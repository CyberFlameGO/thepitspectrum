# file opened: main.asm
  1   0000                  DEVICE ZXSPECTRUM48
  2   0000
  3   0000                  ORG $8000
  4   8000
  5   8000              ;===========================================================================
  6   8000              ; Persistent watchpoint.
  7   8000              ; Change WPMEMx (remove the 'x' from WPMEMx) below to activate.
  8   8000              ; If you do so the program will hit a breakpoint when it tries to
  9   8000              ; write to the first byte of the 3rd line.
 10   8000              ; When program breaks in the fill_memory sub routine please hover over hl
 11   8000              ; to see that it contains 0x5804 or COLOR_SCREEN+64.
 12   8000              ;===========================================================================
 13   8000
 14   8000              ; WPMEMx 0x5840, 1, w
 15   8000
 16   8000
 17   8000              ;===========================================================================
 18   8000              ; Include modules
 19   8000              ;===========================================================================
 20   8000                  include "init.asm"
# file opened: init.asm
  1+  8000              ;
  2+  8000              ; Set up at start up
  3+  8000              ;
  4+  8000              init_start:
  5+  8000              ; We want a black screen.
  6+  8000 CD 6B 0D         call $0D6B
  7+  8003 3E 47            ld a,71             ; white ink (7) on black paper (0),
  8+  8005                                      ; bright (64).
  9+  8005 32 8D 5C         ld (23693),a        ; set our screen colours.
 10+  8008 AF               xor a               ; quick way to load accumulator with zero.
 11+  8009 CD 9B 22         call 8859           ; set permanent border colours.
 12+  800C CD AF 0D         call 3503           ; ROM routine - clears screen, opens chan 2.
 13+  800F
 14+  800F C9               ret
 15+  8010
 16+  8010              ;
 17+  8010              ;   Start coord
 18+  8010              ;   vert c, horiz b
 19+  8010              start_coord:
 20+  8010 18 30            defb 24,48
 21+  8012
# file closed: init.asm
 21   8012                  include "utilities.asm"
# file opened: utilities.asm
  1+  8012              ; ##########################################################################
  2+  8012              ; Print a character
  3+  8012              ; Inputs:
  4+  8012              ; b - x coord
  5+  8012              ; c - y coord
  6+  8012              ; d - character
  7+  8012              ; e - colour
  8+  8012              ; ##########################################################################
  9+  8012              utilities_print_char:
 10+  8012 7B               ld a,e
 11+  8013 32 8F 5C         ld (23695),a        ; set our temporary screen colours.
 12+  8016 3E 16            ld a,22
 13+  8018 D7               rst 16              ; Calls the Sinclair PRINT AT routine
 14+  8019 78               ld a,b              ; Gets the X co-ordinate
 15+  801A 3D               dec a
 16+  801B D7               rst 16
 17+  801C 79               ld a,c              ; and the Y co-ordinate
 18+  801D D7               rst 16              ; So, essentially PRINT AT X,Y; like in BASIC
 19+  801E 7A               ld a,d              ; ASCII code for udg.
 20+  801F D7               rst 16              ; draw block.
 21+  8020 C9               ret
 22+  8021
 23+  8021
 24+  8021              ;Inputs:
 25+  8021              ;     DE and A are factors
 26+  8021              ;Outputs:
 27+  8021              ;     A is not changed
 28+  8021              ;     B is 0
 29+  8021              ;     C is not changed
 30+  8021              ;     DE is not changed
 31+  8021              ;     HL is the product
 32+  8021              ;Time:
 33+  8021              ;     342+6x
 34+  8021              ;
 35+  8021              utilities_multiply:
 36+  8021 06 08            ld b,8          ;7           7
 37+  8023 21 00 00         ld hl,0         ;10         10
 38+  8026 29               add hl,hl     ;11*8       88
 39+  8027 07               rlca          ;4*8        32
 40+  8028 30 01            jr nc,$+3     ;(12|18)*8  96+6x
 41+  802A 19                   add hl,de   ;--         --
 42+  802B 10 F9            djnz $-5      ;13*7+8     99
 43+  802D C9               ret             ;10         10
 44+  802E
 45+  802E              utilities_waitforkey:
 46+  802E 21 08 5C         ld hl,23560         ; LAST K system variable.
 47+  8031 36 00            ld (hl),0           ; put null value there.
 48+  8033              utilities_waitforkey0:
 49+  8033 7E               ld a,(hl)           ; new value of LAST K.
 50+  8034 FE 00            cp 0                ; is it still zero?
 51+  8036 28 FB            jr z,utilities_waitforkey0           ; yes, so no key pressed.
 52+  8038 C9               ret                 ; key was pressed.
 53+  8039
 54+  8039              ;
 55+  8039              ; Waits number of frames for keypress. If got, returns 1, if not 0
 56+  8039              ; Inputs:
 57+  8039              ; a - number of frames to waits
 58+  8039              ; Ouputs:
 59+  8039              ; e - 0 not pressed, 1 pressed
 60+  8039              utilities_waitforkey_forframes:
 61+  8039 21 08 5C         ld hl,23560         ; LAST K system variable.
 62+  803C 36 00            ld (hl),0           ; put null value there.
 63+  803E 47               ld b,a              ; number of frames to wait
 64+  803F              utilities_waitforkey_forframes0:
 65+  803F 7E               ld a,(hl)           ; new value of LAST K.
 66+  8040 FE 00            cp 0                ; is it still zero?
 67+  8042 28 03            jr z,utilities_waitforkey_forframes1           ; yes, so no key pressed.
 68+  8044 1E 01            ld e,1              ; set the pressed flag
 69+  8046 C9               ret                 ; key was pressed.
 70+  8047              utilities_waitforkey_forframes1:
 71+  8047 76               halt                ; wait for frame
 72+  8048 76               halt                ; wait for frame
 73+  8049 10 F4            djnz utilities_waitforkey_forframes0 ; loop again
 74+  804B 1E 00            ld e,0              ; nothing pressed in time
 75+  804D C9               ret
 76+  804E
# file closed: utilities.asm
 22   804E                  include "strings.asm"
# file opened: strings.asm
  1+  804E              string_score1:
  2+  804E 04 00 53 43      defb 4,0,'SCORE1',255
  2+  8052 4F 52 45 31
  2+  8056 FF
  3+  8057              string_scorenumbers1:
  4+  8057 04 01 30 30      defb 4,1,'000000',255
  4+  805B 30 30 30 30
  4+  805F FF
  5+  8060              string_company:
  6+  8060 0E 00 45 4E      defb 14,0,'ENV',255
  6+  8064 56 FF
  7+  8066              string_credits:
  8+  8066 0C 01 50 4C      defb 12,1,'PLAYER 1',255
  8+  806A 41 59 45 52
  8+  806E 20 31 FF
  9+  8071              string_score2:
 10+  8071 16 00 53 43      defb 22,0,'SCORE2',255
 10+  8075 4F 52 45 32
 10+  8079 FF
 11+  807A              string_scorenumbers2:
 12+  807A 16 01 30 30      defb 22,1,'000000',255
 12+  807E 30 30 30 30
 12+  8082 FF
 13+  8083              string_titlescreen_copyright:
 14+  8083 04 16 7F 20      defb 4,22, 127,' 1982 AW ZILEC ELC LTD',255
 14+  8087 31 39 38 32
 14+  808B 20 41 57 20
 14+  808F 5A 49 4C 45
 14+  8093 43 20 45 4C
 14+  8097 43 20 4C 54
 14+  809B 44 FF
 15+  809D
 16+  809D
 17+  809D              string_alttitlescreen_1:
 18+  809D 0C 00 43 52      defb 12,0,'CREDITS 1',255
 18+  80A1 45 44 49 54
 18+  80A5 53 20 31 FF
 19+  80A9              string_alttitlescreen_2:
 20+  80A9 00 02 20 20      defb 0,2,'           THE OBJECT',254
 20+  80AD 20 20 20 20
 20+  80B1 20 20 20 20
 20+  80B5 20 54 48 45
 20+  80B9 20 4F 42 4A
 20+  80BD 45 43 54 FE
 21+  80C1 00 03 20 20      defb 0,3,'          OF THIS GAME',254
 21+  80C5 20 20 20 20
 21+  80C9 20 20 20 20
 21+  80CD 4F 46 20 54
 21+  80D1 48 49 53 20
 21+  80D5 47 41 4D 45
 21+  80D9 FE
 22+  80DA 00 04 20 20      defb 0,4,'         IS TO DIG DOWN',254
 22+  80DE 20 20 20 20
 22+  80E2 20 20 20 49
 22+  80E6 53 20 54 4F
 22+  80EA 20 44 49 47
 22+  80EE 20 44 4F 57
 22+  80F2 4E FE
 23+  80F4 00 05 20 20      defb 0,5,'        TO THE BOTTOM PIT',254
 23+  80F8 20 20 20 20
 23+  80FC 20 20 54 4F
 23+  8100 20 54 48 45
 23+  8104 20 42 4F 54
 23+  8108 54 4F 4D 20
 23+  810C 50 49 54 FE
 24+  8110 00 06 20 20      defb 0,6,'               AND',254
 24+  8114 20 20 20 20
 24+  8118 20 20 20 20
 24+  811C 20 20 20 20
 24+  8120 20 41 4E 44
 24+  8124 FE
 25+  8125 00 07 20 20      defb 0,7,'        COLLECT AT LEAST',254
 25+  8129 20 20 20 20
 25+  812D 20 20 43 4F
 25+  8131 4C 4C 45 43
 25+  8135 54 20 41 54
 25+  8139 20 4C 45 41
 25+  813D 53 54 FE
 26+  8140 00 08 20 20      defb 0,8,'         ONE LARGE JEWEL',254
 26+  8144 20 20 20 20
 26+  8148 20 20 20 4F
 26+  814C 4E 45 20 4C
 26+  8150 41 52 47 45
 26+  8154 20 4A 45 57
 26+  8158 45 4C FE
 27+  815B 00 09 20 20      defb 0,9,'              THEN',254
 27+  815F 20 20 20 20
 27+  8163 20 20 20 20
 27+  8167 20 20 20 20
 27+  816B 54 48 45 4E
 27+  816F FE
 28+  8170 00 0A 20 20      defb 0,10,'         RETURN TO SHIP',254
 28+  8174 20 20 20 20
 28+  8178 20 20 20 52
 28+  817C 45 54 55 52
 28+  8180 4E 20 54 4F
 28+  8184 20 53 48 49
 28+  8188 50 FE
 29+  818A 00 0B 20 20      defb 0,11,'         THRU UPPER PIT',255
 29+  818E 20 20 20 20
 29+  8192 20 20 20 54
 29+  8196 48 52 55 20
 29+  819A 55 50 50 45
 29+  819E 52 20 50 49
 29+  81A2 54 FF
 30+  81A4              string_alttitlescreen_3:
 31+  81A4 00 0D 20 20      defb 0,13,'    SINGLE BONUS  5000 POINTS',254
 31+  81A8 20 20 53 49
 31+  81AC 4E 47 4C 45
 31+  81B0 20 42 4F 4E
 31+  81B4 55 53 20 20
 31+  81B8 35 30 30 30
 31+  81BC 20 50 4F 49
 31+  81C0 4E 54 53 FE
 32+  81C4 00 0E 20 20      defb 0,14,'      COLLECT 1 LARGE JEWEL',254
 32+  81C8 20 20 20 20
 32+  81CC 43 4F 4C 4C
 32+  81D0 45 43 54 20
 32+  81D4 31 20 4C 41
 32+  81D8 52 47 45 20
 32+  81DC 4A 45 57 45
 32+  81E0 4C FE
 33+  81E2 00 0F 20 20      defb 0,15,'       AND RETURN TO SHIP',254
 33+  81E6 20 20 20 20
 33+  81EA 20 41 4E 44
 33+  81EE 20 52 45 54
 33+  81F2 55 52 4E 20
 33+  81F6 54 4F 20 53
 33+  81FA 48 49 50 FE
 34+  81FE 00 11 20 20      defb 0,17,'    DOUBLE BONUS  10000 POINTS',254
 34+  8202 20 20 44 4F
 34+  8206 55 42 4C 45
 34+  820A 20 42 4F 4E
 34+  820E 55 53 20 20
 34+  8212 31 30 30 30
 34+  8216 30 20 50 4F
 34+  821A 49 4E 54 53
 34+  821E FE
 35+  821F 00 12 20 20      defb 0,18,'    COLLECT ALL 3 LARGE JEWELS',254
 35+  8223 20 20 43 4F
 35+  8227 4C 4C 45 43
 35+  822B 54 20 41 4C
 35+  822F 4C 20 33 20
 35+  8233 4C 41 52 47
 35+  8237 45 20 4A 45
 35+  823B 57 45 4C 53
 35+  823F FE
 36+  8240 00 13 20 20      defb 0,19,'       OR   ALL 4 SMALL JEWELS',254
 36+  8244 20 20 20 20
 36+  8248 20 4F 52 20
 36+  824C 20 20 41 4C
 36+  8250 4C 20 34 20
 36+  8254 53 4D 41 4C
 36+  8258 4C 20 4A 45
 36+  825C 57 45 4C 53
 36+  8260 FE
 37+  8261 00 15 20 20      defb 0,21,'    TRIPLE BONUS  15000 POINTS',254
 37+  8265 20 20 54 52
 37+  8269 49 50 4C 45
 37+  826D 20 42 4F 4E
 37+  8271 55 53 20 20
 37+  8275 31 35 30 30
 37+  8279 30 20 50 4F
 37+  827D 49 4E 54 53
 37+  8281 FE
 38+  8282 00 16 20 20      defb 0,22,'       COLLECT ALL 7 JEWELS',255
 38+  8286 20 20 20 20
 38+  828A 20 43 4F 4C
 38+  828E 4C 45 43 54
 38+  8292 20 41 4C 4C
 38+  8296 20 37 20 4A
 38+  829A 45 57 45 4C
 38+  829E 53 FF
 39+  82A0
 40+  82A0              ;
 41+  82A0              ; Prints specified string
 42+  82A0              ; Inputs:
 43+  82A0              ; de: pointer to string
 44+  82A0              ; bc: length of string
 45+  82A0              ;
 46+  82A0              ; Print String Data
 47+  82A0              ; First two bytes of string contain X and Y char position, then the string
 48+  82A0              ; Individual strings are terminated with 0xFE
 49+  82A0              ; End of data is terminated with 0xFF
 50+  82A0              ; HL: Address of string
 51+  82A0              ;
 52+  82A0 5E           string_print:           LD E,(HL)                       ; Fetch the X coordinate
 53+  82A1 23                                   INC HL                          ; Increase HL to the next memory location
 54+  82A2 56                                   LD D,(HL)                       ; Fetch the Y coordinate
 55+  82A3 23                                   INC HL                          ; Increase HL to the next memory location
 56+  82A4 CD B7 82                             CALL string_getcharaddress           ; Calculate the screen address (in DE)
 57+  82A7 7E           string_print_0:         LD A,(HL)                       ; Fetch the character to print
 58+  82A8 23                                   INC HL                          ; Increase HL to the next character
 59+  82A9 FE FE                                CP 0xFE                         ; Compare with 0xFE
 60+  82AB 28 F3                                JR Z,string_print               ; If it is equal to 0xFE then loop back to print next string
 61+  82AD D0                                   RET NC                          ; If it is greater or equal to (carry bit set) then
 62+  82AE E5                                   PUSH HL                         ; Push HL on stack (Print_Char will not preserve HL)
 63+  82AF CD C7 82                             CALL Print_Char                 ; Print the character
 64+  82B2 E1                                   POP HL                          ; Retrieve HL back off the stack
 65+  82B3 1C                                   INC E                           ; Go to the next screen address
 66+  82B4 18 F1                                JR string_print_0               ; Loop back to print next character
 67+  82B6 C9                                   RET
 68+  82B7
 69+  82B7              ; Get screen address
 70+  82B7              ; D = Y character position
 71+  82B7              ; E = X character position
 72+  82B7              ; Returns address in DE
 73+  82B7              ;
 74+  82B7 7A           string_getcharaddress:       LD A,D
 75+  82B8 E6 07                                AND %00000111
 76+  82BA 1F                                   RRA
 77+  82BB 1F                                   RRA
 78+  82BC 1F                                   RRA
 79+  82BD 1F                                   RRA
 80+  82BE B3                                   OR E
 81+  82BF 5F                                   LD E,A
 82+  82C0 7A                                   LD A,D
 83+  82C1 E6 18                                AND %00011000
 84+  82C3 F6 40                                OR %01000000
 85+  82C5 57                                   LD D,A
 86+  82C6 C9                                   RET                             ; Returns screen address in DE
 87+  82C7
 88+  82C7              ; Print a single character out
 89+  82C7              ; A:  Character to print
 90+  82C7              ; DE: Screen address to print character at
 91+  82C7              ;
 92+  82C7 21 00 3C     Print_Char:             LD HL,0x3C00                    ; Address of character set table in ROM
 93+  82CA 06 00                                LD B,0                          ; Set BC to A
 94+  82CC 4F                                   LD C,A
 95+  82CD E6 FF                                AND 0xFF                        ; Clear the carry bit
 96+  82CF CB 11                                RL C                            ; Multiply BC by 8 (shift left 3 times)
 97+  82D1 CB 10                                RL B
 98+  82D3 CB 11                                RL C
 99+  82D5 CB 10                                RL B
100+  82D7 CB 11                                RL C
101+  82D9 CB 10                                RL B
102+  82DB 09                                   ADD HL,BC                       ; Get the character address in HL
103+  82DC 0E 08                                LD C,8                          ; Loop counter
104+  82DE D5                                   PUSH DE
105+  82DF 7E           Print_Char_1:           LD A,(HL)                       ; Get the byte from the ROM into A
106+  82E0 12                                   LD (DE),A                       ; Stick A onto the screen
107+  82E1 14                                   INC D                           ; Goto next line on screen
108+  82E2 2C                                   INC L                           ; Goto next byte of character
109+  82E3 0D                                   DEC C                           ; Decrease the loop counter
110+  82E4 20 F9                                JR NZ,Print_Char_1              ; Loop around whilst it is Not Zero (NZ)
111+  82E6 D1                                   POP DE
112+  82E7 C9                                   RET                             ; Return from the subroutine
# file closed: strings.asm
 23   82E8                  include "screen\buffer.asm"
# file opened: screen/buffer.asm
  1+  82E8              buffer_buffer:
  2+  82E8 00 00 00...      defs 7424                   ; area reserved for screen
  3+  9FE8
  4+  9FE8              buffer_attr_buffer:
  5+  9FE8 00 00 00...      defs 928                    ; attrs buffer area
  6+  A388
  7+  A388              buffer_tmp:
  8+  A388 00 00            defb 0,0                    ; temp area
  9+  A38A
 10+  A38A              buffer_updatedlines:
 11+  A38A FF FF FF...      defs 21,255
 12+  A39F
 13+  A39F              buffer_updateall:
 14+  A39F 00               defb 0
 15+  A3A0
 16+  A3A0              ;
 17+  A3A0              ; Stores a line number in the update list
 18+  A3A0              ; Inputs:
 19+  A3A0              ; a - row number
 20+  A3A0              buffer_marklineforupdate:
 21+  A3A0 5F               ld e,a                          ; store in e
 22+  A3A1 06 15            ld b,21
 23+  A3A3 21 8A A3         ld hl,buffer_updatedlines
 24+  A3A6              buffer_marklineforupdate0:
 25+  A3A6 7E               ld a,(hl)                       ; get the line stored in updated lines
 26+  A3A7 BB               cp e                            ; is this the same as the row number passed in?
 27+  A3A8 C8               ret z                           ; if so, don't need to do anything
 28+  A3A9 FE FF            cp 255                          ; is this 255, ie the end of the buffer
 29+  A3AB C2 B0 A3         jp nz,buffer_marklineforupdate1 ; if not, move to next
 30+  A3AE 73               ld (hl),e                       ; if it is, this spot is empty, so store the row number
 31+  A3AF C9               ret                             ; and finish
 32+  A3B0              buffer_marklineforupdate1:
 33+  A3B0 23               inc hl
 34+  A3B1 10 F3            djnz buffer_marklineforupdate0
 35+  A3B3 C9               ret
 36+  A3B4
 37+  A3B4              ;
 38+  A3B4              ; Zeroes the updated lines list
 39+  A3B4              ;
 40+  A3B4              buffer_clearlist:
 41+  A3B4 06 15            ld b,21
 42+  A3B6 21 8A A3         ld hl,buffer_updatedlines
 43+  A3B9              buffer_clearlist0:
 44+  A3B9 36 FF            ld (hl),255
 45+  A3BB 23               inc hl
 46+  A3BC 10 FB            djnz buffer_clearlist0
 47+  A3BE C9               ret
 48+  A3BF
 49+  A3BF              ;
 50+  A3BF              ; Copies the buffer to the screen. Use stack.
 51+  A3BF              ; Inputs:
 52+  A3BF              ; a - row number to display - 0 is first line
 53+  A3BF              ;
 54+  A3BF              buffer_bufferlinetoscreen:
 55+  A3BF 4F               ld c,a                          ; store a
 56+  A3C0 ED 5B ED A4      ld de,(screen_offset)          ; load the screen offset, this is in rows, want it *256
 57+  A3C4 83               add a,e                       ; add the row number
 58+  A3C5 11 00 01         ld de,256
 59+  A3C8 CD 21 80         call utilities_multiply
 60+  A3CB 54 5D            ld de,hl
 61+  A3CD 21 E8 82         ld hl,buffer_buffer
 62+  A3D0 19               add hl,de                   ; add the offset
 63+  A3D1 79               ld a,c                      ; get original row back
 64+  A3D2 ED 73 30 A4      ld (buffer_bufferlinetoscreen1+1),sp ; this is some self-modifying code; stores the stack pointer in an ld sp,nn instruction at the end
 65+  A3D6 D9               exx
 66+  A3D7 47               ld b,a                      ; load the row number into vertical coord
 67+  A3D8 04               inc b
 68+  A3D9 04               inc b                       ; move forward 2 to allow for scores
 69+  A3DA 0E 00            ld c,0                      ; zero horizontal
 70+  A3DC CD CE A5         call screen_getcelladdress  ; get the memory into de
 71+  A3DF 21 10 00         ld hl,16                    ; offset by 16 chars to get to the centre, since populating stack from right
 72+  A3E2 19               add hl,de
 73+  A3E3              buffer_bufferlinetoscreen0:
 74+  A3E3 D9               exx                         ; hl is now buffer
 75+  A3E4 23               inc hl
 76+  A3E5 23               inc hl                      ; move hl forward 2 to skip first two blocks
 77+  A3E6 F9               ld sp,hl                    ; do first fourteen for left hand side, sp pointing at buffer
 78+  A3E7 F1               pop af
 79+  A3E8 C1               pop bc
 80+  A3E9 D1               pop de
 81+  A3EA DD E1            pop ix
 82+  A3EC D9               exx                         ; hl is now screen
 83+  A3ED 08               ex af,af'
 84+  A3EE F1               pop af
 85+  A3EF C1               pop bc
 86+  A3F0 D1               pop de
 87+  A3F1 F9               ld sp,hl                    ; sp pointing at screen
 88+  A3F2 D5               push de
 89+  A3F3 C5               push bc
 90+  A3F4 F5               push af
 91+  A3F5 08               ex af,af'
 92+  A3F6 D9               exx                         ; hl is now buffer
 93+  A3F7 DD E5            push ix
 94+  A3F9 D5               push de
 95+  A3FA C5               push bc
 96+  A3FB F5               push af
 97+  A3FC 1E 0E            ld e,14                    ; do another fourteen for right hand side
 98+  A3FE 16 00            ld d,0
 99+  A400 19               add hl,de
100+  A401 F9               ld sp,hl                    ; sp pointing at buffer
101+  A402 F1               pop af
102+  A403 C1               pop bc
103+  A404 D1               pop de
104+  A405 DD E1            pop ix
105+  A407                  ;pop ix
106+  A407 D9               exx                         ; hl is now screen
107+  A408 08               ex af,af'
108+  A409 1E 0E            ld e,14
109+  A40B 16 00            ld d,0
110+  A40D 19               add hl,de
111+  A40E F1               pop af
112+  A40F C1               pop bc
113+  A410 D1               pop de
114+  A411                  ;pop iy
115+  A411 F9               ld sp,hl                    ; sp pointing at screen
116+  A412                  ;push iy
117+  A412 D5               push de
118+  A413 C5               push bc
119+  A414 F5               push af
120+  A415 08               ex af,af'
121+  A416 D9               exx                         ; hl is now buffer
122+  A417 DD E5            push ix
123+  A419 D5               push de
124+  A41A C5               push bc
125+  A41B F5               push af
126+  A41C 1E 10            ld e,16
127+  A41E 16 00            ld d,0
128+  A420 19               add hl,de
129+  A421 D9               exx                         ; hl is now screen
130+  A422 1E 0E            ld e,14
131+  A424 16 00            ld d,0
132+  A426 ED 52            sbc hl,de
133+  A428 24               inc h
134+  A429 7C               ld a,h
135+  A42A E6 07            and 0x07                    ; check if this is multiple of 8, if so, end of cell line
136+  A42C C2 E3 A3         jp nz,buffer_bufferlinetoscreen0 ; next line in cell
137+  A42F              buffer_bufferlinetoscreen1:
138+  A42F 31 00 00         ld sp,0
139+  A432 D9               exx
140+  A433 C9               ret
141+  A434
142+  A434              ;
143+  A434              ; Copies the buffer to the screen for updated lines. Use stack.
144+  A434              ; Inputs: none
145+  A434              ;
146+  A434              buffer_buffertoscreen:
147+  A434 3A 9F A3         ld a,(buffer_updateall)      ; get the all update flag
148+  A437 FE 00            cp 0
149+  A439 CA 45 A4         jp z,buffer_buffertoscreen2  ; if not set, draw only updated
150+  A43C CD 66 A4         call buffer_allbuffertoscreen ; otherwise, draw whole screen
151+  A43F 21 9F A3         ld hl,buffer_updateall
152+  A442 36 00            ld (hl),0                    ; reset flag
153+  A444 C9               ret
154+  A445              buffer_buffertoscreen2:
155+  A445 06 15            ld b,21
156+  A447 FD 21 8A A3      ld iy,buffer_updatedlines    ; the location of the updated lines
157+  A44B              buffer_buffertoscreen0:
158+  A44B FD 7E 00         ld a,(iy)
159+  A44E FE FF            cp 255
160+  A450 CA 62 A4         jp z,buffer_buffertoscreen1                       ; if this is 255, then we're at the end of the updated list
161+  A453 C5               push bc
162+  A454 FD E5            push iy
163+  A456 F3               di
164+  A457 CD BF A3         call buffer_bufferlinetoscreen
165+  A45A FB               ei
166+  A45B FD E1            pop iy
167+  A45D C1               pop bc
168+  A45E FD 23            inc iy
169+  A460 10 E9            djnz buffer_buffertoscreen0
170+  A462              buffer_buffertoscreen1:
171+  A462 CD 7A A4         call buffer_buffertoattrsfast
172+  A465 C9               ret
173+  A466
174+  A466              ;
175+  A466              ; Copies the buffer to the screen. Use stack.
176+  A466              ; Inputs: none
177+  A466              ;
178+  A466              buffer_allbuffertoscreen:
179+  A466 06 15            ld b,21
180+  A468 3E 00            ld a,0
181+  A46A              buffer_allbuffertoscreen0:
182+  A46A C5               push bc
183+  A46B F5               push af
184+  A46C F3               di
185+  A46D CD BF A3         call buffer_bufferlinetoscreen
186+  A470 FB               ei
187+  A471 F1               pop af
188+  A472 C1               pop bc
189+  A473 3C               inc a
190+  A474 10 F4            djnz buffer_allbuffertoscreen0
191+  A476
192+  A476 CD 7A A4         call buffer_buffertoattrsfast
193+  A479 C9               ret
194+  A47A
195+  A47A              ;
196+  A47A              ; Copies the attrs buffer to screen with the stack
197+  A47A              ;
198+  A47A              buffer_buffertoattrsfast:
199+  A47A ED 73 E9 A4      ld (buffer_buffertoattrsfast1+1),sp ; this is some self-modifying code; stores the stack pointer in an ld sp,nn instruction at the end
200+  A47E 3A ED A4         ld a,(screen_offset)            ; get the screen offset in rows, so want *32
201+  A481 11 20 00         ld de,32
202+  A484 CD 21 80         call utilities_multiply
203+  A487 54 5D            ld de,hl
204+  A489 21 E8 9F         ld hl,buffer_attr_buffer
205+  A48C 19               add hl,de                       ; add the offset, start of attr buffer now in hl
206+  A48D D9               exx
207+  A48E 21 50 58         ld hl,22528+80                  ; start of attr memory + 2 lines for score + 16 to start at right side
208+  A491 FD 21 88 A3      ld iy,buffer_tmp
209+  A495 FD 36 00 15      ld (iy),21              ; number of times to loop
210+  A499              buffer_buffertoattrsfast0:
211+  A499 D9               exx                         ; hl is now buffer
212+  A49A 23               inc hl
213+  A49B 23               inc hl                      ; move hl forward 2 to skip first two blocks
214+  A49C F9               ld sp,hl                    ; do first fourteen for left hand side, sp pointing at buffer
215+  A49D F1               pop af
216+  A49E C1               pop bc
217+  A49F D1               pop de
218+  A4A0 DD E1            pop ix
219+  A4A2 D9               exx                         ; hl is now screen
220+  A4A3 08               ex af,af'
221+  A4A4 F1               pop af
222+  A4A5 C1               pop bc
223+  A4A6 D1               pop de
224+  A4A7 F9               ld sp,hl                    ; sp pointing at screen
225+  A4A8 D5               push de
226+  A4A9 C5               push bc
227+  A4AA F5               push af
228+  A4AB 08               ex af,af'
229+  A4AC D9               exx                         ; hl is now buffer
230+  A4AD DD E5            push ix
231+  A4AF D5               push de
232+  A4B0 C5               push bc
233+  A4B1 F5               push af
234+  A4B2 1E 0E            ld e,14                    ; do another fourteen for right hand side
235+  A4B4 16 00            ld d,0
236+  A4B6 19               add hl,de
237+  A4B7 F9               ld sp,hl                    ; sp pointing at buffer
238+  A4B8 F1               pop af
239+  A4B9 C1               pop bc
240+  A4BA D1               pop de
241+  A4BB DD E1            pop ix
242+  A4BD D9               exx                         ; hl is now screen
243+  A4BE 08               ex af,af'
244+  A4BF 1E 0E            ld e,14
245+  A4C1 16 00            ld d,0
246+  A4C3 19               add hl,de
247+  A4C4 F1               pop af
248+  A4C5 C1               pop bc
249+  A4C6 D1               pop de
250+  A4C7 F9               ld sp,hl                    ; sp pointing at screen
251+  A4C8 D5               push de
252+  A4C9 C5               push bc
253+  A4CA F5               push af
254+  A4CB 08               ex af,af'
255+  A4CC D9               exx                         ; hl is now buffer
256+  A4CD DD E5            push ix
257+  A4CF D5               push de
258+  A4D0 C5               push bc
259+  A4D1 F5               push af
260+  A4D2 1E 10            ld e,16
261+  A4D4 16 00            ld d,0
262+  A4D6 19               add hl,de
263+  A4D7 D9               exx                         ; hl is now screen
264+  A4D8 11 12 00         ld de,18
265+  A4DB 19               add hl,de
266+  A4DC FD 7E 00         ld a,(iy)
267+  A4DF 3D               dec a
268+  A4E0 FE 00            cp 0
269+  A4E2 FD 77 00         ld (iy),a
270+  A4E5 C2 99 A4         jp nz,buffer_buffertoattrsfast0 ; do another row
271+  A4E8              buffer_buffertoattrsfast1:
272+  A4E8 31 00 00         ld sp,0
273+  A4EB D9               exx
274+  A4EC C9               ret
# file closed: screen/buffer.asm
 24   A4ED                  include "screen\screen.asm"
# file opened: screen/screen.asm
  1+  A4ED              screen_offset:
  2+  A4ED 00               defb 0                      ; offset from top of screen in lines
  3+  A4EE
  4+  A4EE              screen_tmp:
  5+  A4EE 00               defb 0                      ; temporary memory
  6+  A4EF
  7+  A4EF              screen_setscorecolours:
  8+  A4EF 21 7B AD         ld hl,score_colours
  9+  A4F2 11 00 58         ld de,22528                     ; attrs here
 10+  A4F5 01 40 00         ld bc,64
 11+  A4F8 ED B0            ldir
 12+  A4FA C9               ret
 13+  A4FB
 14+  A4FB              screen_sethighscorecolours:
 15+  A4FB 21 BB AD         ld hl,high_score_colours
 16+  A4FE 11 E0 5A         ld de,22528+736                 ; attrs here
 17+  A501 01 20 00         ld bc,32
 18+  A504 ED B0            ldir
 19+  A506 C9               ret
 20+  A507
 21+  A507              ; Draw the screen
 22+  A507              ; Inputs:
 23+  A507              ; none
 24+  A507              ; Notes:
 25+  A507              ; The value held at screen_offset tells the screen how many rows to scroll down. Set to five to bottom out.
 26+  A507              screen_draw:
 27+  A507                  ;call clear_screen
 28+  A507 0E 00            ld c,0                      ; horiz
 29+  A509 06 00            ld b,0                      ; vert, 0 at top
 30+  A50B DD 21 3D A8      ld ix,level01               ; point ix at level data
 31+  A50F FD 21 E8 9F      ld iy,buffer_attr_buffer    ; point iy at attr data
 32+  A513              screen_draw0:
 33+  A513 DD 7E 00         ld a,(ix)                   ; load the block number
 34+  A516 C5               push bc                     ; store bc, contains loop count
 35+  A517 CD 55 A6         call screen_getattr         ; get the memory location for this cell's attr into hl
 36+  A51A 7E               ld a,(hl)                   ; get the attr value at the address
 37+  A51B FD 77 00         ld (iy),a                   ; load the attr into memory
 38+  A51E DD 7E 00         ld a,(ix)                   ; load the block number
 39+  A521 CD 4A A6         call screen_getblock        ; get the block data into hl
 40+  A524 CD 30 A6         call screen_showchar        ; show this character here
 41+  A527 C1               pop bc                      ; get the loop counter back
 42+  A528 DD 23            inc ix                      ; increment level location
 43+  A52A FD 23            inc iy                      ; increment attr location
 44+  A52C 0C               inc c                       ; increment horiz
 45+  A52D 79               ld a,c
 46+  A52E FE 20            cp 32                       ; check if horiz has reach edge of screen
 47+  A530 C2 13 A5         jp nz,screen_draw0          ; if not, loop
 48+  A533 0E 00            ld c,0                      ; if so, reset horiz
 49+  A535 04               inc b                       ; increment vertical
 50+  A536 78               ld a,b
 51+  A537 FE 1D            cp 29                       ; check if at bottom
 52+  A539 C2 13 A5         jp nz,screen_draw0          ; if not, loop
 53+  A53C 21 EE A4         ld hl, screen_tmp
 54+  A53F 36 09            ld (hl),9                   ; load the block number into memory
 55+  A541 DD 21 DD AB      ld ix,level01rocks          ; rock memory
 56+  A545 CD 9E A5         call screen_initobjects     ; draw rocks
 57+  A548 21 EE A4         ld hl, screen_tmp
 58+  A54B 36 0C            ld (hl),12                  ; load the block number into memory
 59+  A54D DD 21 DD AC      ld ix,level01missiles       ; missile memory
 60+  A551 CD 9E A5         call screen_initobjects     ; draw missiles
 61+  A554 21 EE A4         ld hl, screen_tmp
 62+  A557 36 08            ld (hl),08                  ; load the block number into memory
 63+  A559 DD 21 56 AD      ld ix,level01diamonds       ; diamond memory
 64+  A55D CD 9E A5         call screen_initobjects     ; draw diamonds
 65+  A560 21 EE A4         ld hl, screen_tmp
 66+  A563 36 0E            ld (hl),14                  ; load the block number into memory
 67+  A565 DD 21 66 AD      ld ix,level01gems           ; gems memory
 68+  A569 CD 9E A5         call screen_initobjects     ; draw gems
 69+  A56C CD 70 A5         call screen_setuptext       ; draws text on the screen
 70+  A56F C9               ret
 71+  A570
 72+  A570              ;
 73+  A570              ; Sets up text on the screen
 74+  A570              ;
 75+  A570              screen_setuptext:
 76+  A570 CD E0 B6         call scores_showtable
 77+  A573 CD FB A4         call screen_sethighscorecolours
 78+  A576 21 4E 80         ld hl, string_score1
 79+  A579 CD A0 82         call string_print
 80+  A57C 21 57 80         ld hl, string_scorenumbers1
 81+  A57F CD A0 82         call string_print
 82+  A582 21 60 80         ld hl, string_company
 83+  A585 CD A0 82         call string_print
 84+  A588 21 71 80         ld hl, string_score2
 85+  A58B CD A0 82         call string_print
 86+  A58E 21 7A 80         ld hl, string_scorenumbers2
 87+  A591 CD A0 82         call string_print
 88+  A594 21 66 80         ld hl, string_credits
 89+  A597 CD A0 82         call string_print
 90+  A59A CD EF A4         call screen_setscorecolours
 91+  A59D C9               ret
 92+  A59E              ;
 93+  A59E              ; Draw initial object positions
 94+  A59E              ; Inputs:
 95+  A59E              ; ix - memory location of objects
 96+  A59E              ; a - graphic
 97+  A59E              screen_initobjects:
 98+  A59E DD 4E 00         ld c,(ix)                   ; get the horiz coord
 99+  A5A1 79               ld a,c
100+  A5A2 FE FF            cp 255
101+  A5A4 CA CD A5         jp z,screen_initobjects2
102+  A5A7 DD 23            inc ix                      ; move to next
103+  A5A9 DD 46 00         ld b,(ix)                   ; get the vert coord
104+  A5AC DD 23            inc ix
105+  A5AE CD DF A5         call screen_getcellattradress ; get the memory address of b,c attr into de
106+  A5B1 D5               push de
107+  A5B2 3A EE A4         ld a,(screen_tmp)                  ; get the block number back
108+  A5B5 CD 55 A6         call screen_getattr         ; get the memory location for this cell's attr into hl
109+  A5B8 D1               pop de
110+  A5B9 7E               ld a,(hl)                   ; get the attr value at the address
111+  A5BA 12               ld (de),a                   ; load the attr into memory
112+  A5BB 3A EE A4         ld a,(screen_tmp)                  ; get the block number back
113+  A5BE CD 4A A6         call screen_getblock        ; get the block data into hl
114+  A5C1 CD 30 A6         call screen_showchar        ; show this character here
115+  A5C4
116+  A5C4              screen_initobjects1:
117+  A5C4 DD 23            inc ix                      ; move past state
118+  A5C6 DD 23            inc ix
119+  A5C8 DD 23            inc ix                      ; move past mem
120+  A5CA C3 9E A5         jp screen_initobjects
121+  A5CD              screen_initobjects2:
122+  A5CD C9               ret
123+  A5CE
124+  A5CE
125+  A5CE              ;
126+  A5CE              ; Return character cell address offset of block at (b, c) ready for addition to screen  memory.
127+  A5CE              ; Inputs:
128+  A5CE              ; bc: coords
129+  A5CE              ; Outputs:
130+  A5CE              ; de: memory location
131+  A5CE              ;
132+  A5CE              screen_getcelladdress:
133+  A5CE 78               ld a,b      ; vertical position.
134+  A5CF E6 18            and 24      ; which segment, 0, 1 or 2?
135+  A5D1 C6 40            add a,64    ; 64*256 = 16384, Spectrum's screen memory.
136+  A5D3 57               ld d,a      ; this is our high byte.
137+  A5D4 78               ld a,b      ; what was that vertical position again?
138+  A5D5 E6 07            and 7       ; which row within segment?
139+  A5D7 0F               rrca        ; multiply row by 32.
140+  A5D8 0F               rrca
141+  A5D9 0F               rrca
142+  A5DA 5F               ld e,a      ; low byte.
143+  A5DB 79               ld a,c      ; add on y coordinate.
144+  A5DC 83               add a,e     ; mix with low byte.
145+  A5DD 5F               ld e,a      ; address of screen position in de.
146+  A5DE C9               ret
147+  A5DF
148+  A5DF              ;
149+  A5DF              ; Calculate buffer address of attribute for character at (b, c).
150+  A5DF              ; Inputs:
151+  A5DF              ; bc: coords
152+  A5DF              ; Outputs:
153+  A5DF              ; de: memory location
154+  A5DF              ;
155+  A5DF              screen_getcellattradress:
156+  A5DF 11 E8 9F         ld de,buffer_attr_buffer ; memory is at base + horiz (c) + vert*32 (b)
157+  A5E2 69               ld l,c      ; x position.
158+  A5E3 26 00            ld h,0      ; 0 h
159+  A5E5 19               add hl,de
160+  A5E6 54 5D            ld de,hl    ; horiz done
161+  A5E8 78               ld a,b      ; do vert
162+  A5E9 D5               push de
163+  A5EA C5               push bc
164+  A5EB 11 20 00         ld de,32
165+  A5EE CD 21 80         call utilities_multiply
166+  A5F1 C1               pop bc
167+  A5F2 D1               pop de
168+  A5F3 19               add hl,de
169+  A5F4 54 5D            ld de,hl    ; vert done
170+  A5F6 C9               ret
171+  A5F7
172+  A5F7              ;
173+  A5F7              ; Calculate buffer address of attribute for character at (b, c).
174+  A5F7              ; Inputs:
175+  A5F7              ; bc: coords
176+  A5F7              ; Outputs:
177+  A5F7              ; de: memory location
178+  A5F7              ;
179+  A5F7              screen_getscreenattradress:
180+  A5F7 11 00 58         ld de,22528 ; memory is at base + horiz (c) + vert*32 (b)
181+  A5FA 69               ld l,c      ; x position.
182+  A5FB 26 00            ld h,0      ; 0 h
183+  A5FD 19               add hl,de
184+  A5FE 54 5D            ld de,hl    ; horiz done
185+  A600 78               ld a,b      ; do vert
186+  A601 D5               push de
187+  A602 C5               push bc
188+  A603 11 20 00         ld de,32
189+  A606 CD 21 80         call utilities_multiply
190+  A609 C1               pop bc
191+  A60A D1               pop de
192+  A60B 19               add hl,de
193+  A60C 54 5D            ld de,hl    ; vert done
194+  A60E C9               ret
195+  A60F
196+  A60F              ;
197+  A60F              ; Gets the attr memory location for a screen coord
198+  A60F              ; Will overwrite bc
199+  A60F              ; Inputs:
200+  A60F              ; bc - screen coords
201+  A60F              ; Outputs:
202+  A60F              ; de - memory location
203+  A60F              ; bc - character coords
204+  A60F              ;
205+  A60F              screen_getattraddressfromscreencoords:
206+  A60F 78               ld a,b                          ; get the player block coords of current block
207+  A610 E6 F8            and 248                         ; find closest multiple of eight
208+  A612 0F               rrca
209+  A613 0F               rrca
210+  A614 0F               rrca                ; divide by 8
211+  A615 47               ld b,a
212+  A616 79               ld a,c
213+  A617 48               ld c,b                         ; swap b and c
214+  A618 E6 F8            and 248
215+  A61A 0F               rrca
216+  A61B 0F               rrca
217+  A61C 0F               rrca                ; divide by 8
218+  A61D 47               ld b,a
219+  A61E CD DF A5         call screen_getcellattradress   ; work out memory location of current block attributes, memory in de
220+  A621 C9               ret
221+  A622
222+  A622              ;
223+  A622              ; Get buffer address for a character at b,c - b vert
224+  A622              ; Buffer memory is stored as sequential block
225+  A622              ; Char at 0,0 is stored 0,32,64...; 0,1 is stored at 1,33,65
226+  A622              ; Inputs:
227+  A622              ; bc - coords
228+  A622              ; Outputs:
229+  A622              ; de - memory location of first byte
230+  A622              screen_getbufferaddress:
231+  A622 21 E8 82         ld hl, buffer_buffer    ; first get screen buffer start
232+  A625 50               ld d,b                  ; then work out vertical offset
233+  A626 1E 00            ld e,0                  ; mult by 256, low byte becomes high byte, de now holds result
234+  A628 19               add hl,de               ; add to base
235+  A629 59               ld e,c                  ; then add horizontal offset (c)
236+  A62A 16 00            ld d,0
237+  A62C 19               add hl,de               ; add to base
238+  A62D 54 5D            ld de,hl
239+  A62F C9               ret
240+  A630
241+  A630              ;
242+  A630              ; Display character hl at (b, c) to buffer.
243+  A630              ; Stored sequentially
244+  A630              ; Inputs:
245+  A630              ; hl: block address
246+  A630              ; bc: coords
247+  A630              ;
248+  A630              screen_showchar:
249+  A630 3E 00            ld a,0
250+  A632 E5               push hl
251+  A633 CD 22 A6         call screen_getbufferaddress ; get the current screen buffer pointer
252+  A636 E1               pop hl
253+  A637 06 08            ld b,8              ; number of pixels high.
254+  A639              screen_showchar0:
255+  A639 7E               ld a,(hl)           ; source graphic.
256+  A63A 12               ld (de),a           ; transfer to screen.
257+  A63B 23               inc hl              ; next piece of data.
258+  A63C E5               push hl             ; store hl
259+  A63D 62 6B            ld hl,de            ; put de in hl
260+  A63F 1E 20            ld e,32            ; inc memory by 32, so load 32 into de
261+  A641 16 00            ld d,0
262+  A643 19               add hl,de              ; add de to hl
263+  A644 54 5D            ld de,hl            ; load back to de
264+  A646 E1               pop hl              ; restore hl
265+  A647
266+  A647 10 F0            djnz screen_showchar0 ; repeat
267+  A649 C9               ret
268+  A64A
269+  A64A
270+  A64A              ;
271+  A64A              ; Get cell graphic.
272+  A64A              ; Inputs:
273+  A64A              ; a: block
274+  A64A              ; Outputs:
275+  A64A              ; hl: memory
276+  A64A              ;
277+  A64A              screen_getblock:
278+  A64A 07               rlca                        ; multiply block number by eight.
279+  A64B 07               rlca
280+  A64C 07               rlca
281+  A64D 5F               ld e,a                      ; displacement to graphic address.
282+  A64E 16 00            ld d,0                      ; no high byte.
283+  A650 21 DB AD         ld hl,sprites               ; address of character blocks.
284+  A653 19               add hl,de                   ; point to block.
285+  A654 C9               ret
286+  A655
287+  A655              ;
288+  A655              ; Get cell attribute.
289+  A655              ; Inputs:
290+  A655              ; a: block
291+  A655              ; Outputs:
292+  A655              ; hl: memory
293+  A655              ;
294+  A655              screen_getattr:
295+  A655 5F               ld e,a                      ; displacement to attribute address.
296+  A656 16 00            ld d,0                      ; no high byte.
297+  A658 21 53 AE         ld hl,sprite_attrs          ; address of block attributes.
298+  A65B 19               add hl,de                   ; point to attribute.
299+  A65C C9               ret
300+  A65D
# file closed: screen/screen.asm
 25   A65D                  include "screen\sprites.asm"
# file opened: screen/sprites.asm
  1+  A65D              ;
  2+  A65D              ; This is the sprite routine and expects coordinates in (c ,b) form,
  3+  A65D              ; where c is the vertical coord from the top of the screen (0-176), and
  4+  A65D              ; b is the horizontal coord from the left of the screen (0 to 240).
  5+  A65D              ; Sprite data is stored as you'd expect in its unshifted form as this
  6+  A65D              ; routine takes care of all the shifting itself. This means that sprite
  7+  A65D              ; handling isn't particularly fast but the graphics only take 1/8th of the
  8+  A65D              ; space they would require in pre-shifted form.
  9+  A65D              ; Inputs:
 10+  A65D              ; hl - sprite data
 11+  A65D              ; bc - screen coords
 12+  A65D              ;
 13+  A65D              sprites_drawsprite7:
 14+  A65D EE 07            xor 7               ; complement last 3 bits.
 15+  A65F 3C               inc a               ; add one for luck!
 16+  A660              sprites_drawsprite3:
 17+  A660 CB 11            rl c                ; ...into middle byte...
 18+  A662 CB 12            rl d                ; ...and finally into left character cell.
 19+  A664 3D               dec a               ; count shifts we've done.
 20+  A665 20 F9            jr nz,sprites_drawsprite3 ; return until all shifts complete.
 21+  A667                                      ; Line of sprite image is now in e + c + d, we need it in form c + d + e.
 22+  A667 79               ld a,c              ; left edge of image is currently in e.
 23+  A668 4A               ld c,d              ; put right edge there instead.
 24+  A669 57               ld d,a              ; and the left edge back into c.
 25+  A66A 18 25            jr sprites_drawsprite0   ; we've done the switch so transfer to screen.
 26+  A66C              sprites_drawsprite:
 27+  A66C ED 43 D1 A6      ld (dispx),bc       ; store coords in dispx for now.
 28+  A670 E5               push hl
 29+  A671 CD AF A6         call sprites_scadd  ; calculate screen address.
 30+  A674 E1               pop hl
 31+  A675 3E 08            ld a,8              ; height of sprite in pixels.
 32+  A677              sprites_drawsprite1:
 33+  A677 08               ex af,af'           ; store loop counter.
 34+  A678 D5               push de             ; store screen address.
 35+  A679 4E               ld c,(hl)           ; first sprite graphic.
 36+  A67A 23               inc hl              ; increment poiinter to sprite data.
 37+  A67B 22 D3 A6         ld (sprtmp),hl      ; store it for later.
 38+  A67E 16 00            ld d,0              ; blank right byte for now.
 39+  A680 78               ld a,b              ; b holds y position.
 40+  A681 E6 07            and 7               ; how are we straddling character cells?
 41+  A683 28 0C            jr z,sprites_drawsprite0 ; we're not straddling them, don't bother shifting.
 42+  A685 FE 05            cp 5                ; 5 or more right shifts needed?
 43+  A687 30 D4            jr nc,sprites_drawsprite7 ; yes, shift from left as it's quicker.
 44+  A689 A7               and a               ; oops, carry flag is set so clear it.
 45+  A68A              sprites_drawsprite2:
 46+  A68A CB 19            rr c                ; rotate left byte right...
 47+  A68C CB 1A            rr d                ; ...into right byte.
 48+  A68E 3D               dec a               ; one less shift to do.
 49+  A68F 20 F9            jr nz,sprites_drawsprite2 ; return until all shifts complete.
 50+  A691              sprites_drawsprite0:
 51+  A691 E1               pop hl              ; pop screen address from stack.
 52+  A692 7E               ld a,(hl)           ; what's there already.
 53+  A693 A9               xor c               ; merge in image data.
 54+  A694 77               ld (hl),a           ; place onto screen.
 55+  A695 23               inc hl
 56+  A696 7E               ld a,(hl)           ; what's already there.
 57+  A697 AA               xor d               ; right edge of sprite image data.
 58+  A698 77               ld (hl),a           ; plonk it on screen.
 59+  A699 3A D1 A6         ld a,(dispx)        ; vertical coordinate.
 60+  A69C 3C               inc a               ; next line down.
 61+  A69D 32 D1 A6         ld (dispx),a        ; store new position.
 62+  A6A0 2B               dec hl
 63+  A6A1 11 20 00         ld de,32            ; add 32 to get to the next row
 64+  A6A4 19               add hl,de           ; add 32
 65+  A6A5              sprites_drawsprite6:
 66+  A6A5 EB               ex de,hl            ; screen address in de.
 67+  A6A6 2A D3 A6         ld hl,(sprtmp)      ; restore graphic address.
 68+  A6A9 08               ex af,af'           ; restore loop counter.
 69+  A6AA 3D               dec a               ; decrement it.
 70+  A6AB C2 77 A6         jp nz,sprites_drawsprite1 ; not reached bottom of sprite yet to repeat.
 71+  A6AE C9               ret                 ; job done.
 72+  A6AF
 73+  A6AF              ;
 74+  A6AF              ; This routine returns a buffer address for (c, b) in de (c vert).
 75+  A6AF              ; For example: 0,0 will be at memory offset 0
 76+  A6AF              ; 1,0 (1 down) will be at memory offset 1
 77+  A6AF              ; 0,7 will be at memory offset 0
 78+  A6AF              ; 9,1 will be at memory offset 8+1
 79+  A6AF              ; 8,0 will be at memory offset 256
 80+  A6AF              ; 9,0 will be at memory offset 257
 81+  A6AF              ; Outputs:
 82+  A6AF              ; de - coords
 83+  A6AF              ;
 84+  A6AF              sprites_scadd:
 85+  A6AF 79               ld a,c               ; calculate vertical offset
 86+  A6B0 E6 F8            and 248             ;  to get nearest multiple of 8
 87+  A6B2 0F               rrca
 88+  A6B3 0F               rrca
 89+  A6B4 0F               rrca                ; divide by 8
 90+  A6B5 67               ld h,a
 91+  A6B6 78               ld a,b               ; calculate horizontal offset
 92+  A6B7 E6 F8            and 248             ;  to get nearest multiple of 8
 93+  A6B9 0F               rrca
 94+  A6BA 0F               rrca
 95+  A6BB 0F               rrca                ; divide by 8
 96+  A6BC 6F               ld l,a
 97+  A6BD C5               push bc             ; store the screen coords
 98+  A6BE 44 4D            ld bc,hl            ; load bc with the character coords
 99+  A6C0 CD 22 A6         call screen_getbufferaddress
100+  A6C3 C1               pop bc              ; get back screen coords, de is now memory of character
101+  A6C4 79               ld a,c              ; now add the vertical within the cell
102+  A6C5 E6 07            and 7
103+  A6C7 0F               rrca                ; multiply by 32.
104+  A6C8 0F               rrca
105+  A6C9 0F               rrca
106+  A6CA 6F               ld l,a
107+  A6CB 26 00            ld h,0
108+  A6CD 19               add hl,de
109+  A6CE 54 5D            ld de,hl
110+  A6D0 C9               ret
111+  A6D1
112+  A6D1 00           dispx   defb 0           ; general-use coordinates.
113+  A6D2 00           dispy   defb 0
114+  A6D3 00           sprtmp  defb 0           ; sprite temporary address.
115+  A6D4
# file closed: screen/sprites.asm
 26   A6D4                  include "screen\titlescreen.asm"
# file opened: screen/titlescreen.asm
  1+  A6D4              ;
  2+  A6D4              ; Draws the title screen
  3+  A6D4              ;
  4+  A6D4              titlescreen_show:
  5+  A6D4 CD 4B A7         call titlescreen_init
  6+  A6D7 CD F5 A6         call titlescreen_drawtitle
  7+  A6DA 3E FA            ld a,250                              ; wait for 200 frames
  8+  A6DC CD 39 80         call utilities_waitforkey_forframes   ; wait for keypress
  9+  A6DF 7B               ld a,e
 10+  A6E0 FE 01            cp 1                                  ; was anything pressed?
 11+  A6E2 C8               ret z                                 ; end titlescreen if so
 12+  A6E3
 13+  A6E3 CD 61 A7         call titlescreen_alt_init             ; otherwise, draw alt screen
 14+  A6E6 CD 11 A7         call titlescreen_alt_drawtitle
 15+  A6E9 3E FA            ld a,250                              ; wait for 200 frames
 16+  A6EB CD 39 80         call utilities_waitforkey_forframes   ; wait for keypress
 17+  A6EE 7B               ld a,e
 18+  A6EF FE 01            cp 1                                  ; was anything pressed?
 19+  A6F1 C2 D4 A6         jp nz,titlescreen_show                ; start again if not
 20+  A6F4 C9               ret
 21+  A6F5
 22+  A6F5              ;
 23+  A6F5              ; Draws the iconic logo
 24+  A6F5              ;
 25+  A6F5              titlescreen_drawtitle:
 26+  A6F5 06 66            ld b,102              ; number of points
 27+  A6F7 DD 21 71 A7      ld ix,titlescreen_logo_data
 28+  A6FB              titlescreen_drawtitle0:
 29+  A6FB C5               push bc
 30+  A6FC DD 4E 00         ld c,(ix)                   ; got horiz
 31+  A6FF DD 23            inc ix
 32+  A701 DD 46 00         ld b,(ix)                   ; got vert
 33+  A704 DD 23            inc ix
 34+  A706 CD F7 A5         call screen_getscreenattradress ; memory in de
 35+  A709 13               inc de                      ; slide one to the right, since I'm too lazy to change the data
 36+  A70A 3E 13            ld a,19
 37+  A70C 12               ld (de),a
 38+  A70D C1               pop bc
 39+  A70E 10 EB            djnz titlescreen_drawtitle0 ; loop if we're not at the end
 40+  A710 C9               ret
 41+  A711
 42+  A711              ;
 43+  A711              ; Draws the alternate title screen
 44+  A711              ;
 45+  A711              titlescreen_alt_drawtitle:
 46+  A711 21 9D 80         ld hl,string_alttitlescreen_1
 47+  A714 CD A0 82         call string_print
 48+  A717 21 A9 80         ld hl,string_alttitlescreen_2
 49+  A71A CD A0 82         call string_print
 50+  A71D 21 A4 81         ld hl,string_alttitlescreen_3
 51+  A720 CD A0 82         call string_print
 52+  A723 3E 43            ld a,67
 53+  A725 11 00 58         ld de,22528                         ; top row attrs here
 54+  A728 CD 44 A7         call titlescreen_alt_setcolours
 55+  A72B 3E 46            ld a,70
 56+  A72D 11 A0 59         ld de,22528+416                     ; 13th row attrs here
 57+  A730 CD 44 A7         call titlescreen_alt_setcolours
 58+  A733 3E 43            ld a,67
 59+  A735 11 20 5A         ld de,22528+544                         ; 17th row attrs here
 60+  A738 CD 44 A7         call titlescreen_alt_setcolours
 61+  A73B 3E 42            ld a,66
 62+  A73D 11 A0 5A         ld de,22528+672                         ; 21st row attrs here
 63+  A740 CD 44 A7         call titlescreen_alt_setcolours
 64+  A743 C9               ret
 65+  A744
 66+  A744              titlescreen_alt_setcolours:
 67+  A744 06 20            ld b,32
 68+  A746              titlescreen_alt_setcolours0:
 69+  A746 12               ld (de),a
 70+  A747 13               inc de
 71+  A748 10 FC            djnz titlescreen_alt_setcolours0
 72+  A74A C9               ret
 73+  A74B
 74+  A74B              ;
 75+  A74B              ; Initialises the screen
 76+  A74B              ;
 77+  A74B              titlescreen_init:
 78+  A74B              ; We want a black screen.
 79+  A74B CD 6B 0D         call $0D6B
 80+  A74E 3E 0B            ld a,11             ; magenta ink (7) on blue paper (0),
 81+  A750                                      ; bright (64).
 82+  A750 32 8D 5C         ld (23693),a        ; set our screen colours.
 83+  A753 3E 01            ld a,1              ; 2 is the code for red.
 84+  A755 D3 FE            out (254),a         ; write to port 254.
 85+  A757 CD AF 0D         call 3503           ; ROM routine - clears screen, opens chan 2.
 86+  A75A
 87+  A75A 21 83 80         ld hl,string_titlescreen_copyright
 88+  A75D CD A0 82         call string_print
 89+  A760
 90+  A760 C9               ret
 91+  A761
 92+  A761              ;
 93+  A761              ; Initialises the screen
 94+  A761              ;
 95+  A761              titlescreen_alt_init:
 96+  A761              ; We want a black screen.
 97+  A761 CD 6B 0D         call $0D6B
 98+  A764 3E 47            ld a,71             ; white ink (7) on black paper (0),
 99+  A766                                      ; bright (64).
100+  A766 32 8D 5C         ld (23693),a        ; set our screen colours.
101+  A769 3E 00            ld a,0              ; 2 is the code for red.
102+  A76B D3 FE            out (254),a         ; write to port 254.
103+  A76D CD AF 0D         call 3503           ; ROM routine - clears screen, opens chan 2.
104+  A770
105+  A770 C9               ret
106+  A771
107+  A771              ;
108+  A771              ; Horiz, vert
109+  A771              ;
110+  A771              titlescreen_logo_data:
111+  A771 08 00 09 00      defb 8,0,9,0,10,0,12,0,15,0,17,0,18,0,19,0
111+  A775 0A 00 0C 00
111+  A779 0F 00 11 00
111+  A77D 12 00 13 00
112+  A781 09 01 0C 01      defb 9,1,12,1,15,1,17,1
112+  A785 0F 01 11 01
113+  A789 09 02 0C 02      defb 9,2,12,2,13,2,14,2,15,2,17,2,18,2,19,2
113+  A78D 0D 02 0E 02
113+  A791 0F 02 11 02
113+  A795 12 02 13 02
114+  A799 09 03 0C 03      defb 9,3,12,3,15,3,17,3
114+  A79D 0F 03 11 03
115+  A7A1 09 04 0C 04      defb 9,4,12,4,15,4,17,4,18,4,19,4
115+  A7A5 0F 04 11 04
115+  A7A9 12 04 13 04
116+  A7AD 00 06 01 06      defb 0,6,1,6,2,6,3,6,4,6,5,6,6,6,7,6,8,6,9,6,10,6,11,6
116+  A7B1 02 06 03 06
116+  A7B5 04 06 05 06
116+  A7B9 06 06 07 06
116+  A7BD 08 06 09 06
116+  A7C1 0A 06 0B 06
117+  A7C5 10 06 11 06      defb 16,6,17,6,18,6,19,6,20,6,21,6,22,6,23,6,24,6,25,6,26,6,27,6
117+  A7C9 12 06 13 06
117+  A7CD 14 06 15 06
117+  A7D1 16 06 17 06
117+  A7D5 18 06 19 06
117+  A7D9 1A 06 1B 06
118+  A7DD 02 07 02 08      defb 2,7,2,8,2,9,2,10,2,11,2,12,2,13,2,14,2,15,2,16,2,17,2,18,2,19,2,20
118+  A7E1 02 09 02 0A
118+  A7E5 02 0B 02 0C
118+  A7E9 02 0D 02 0E
118+  A7ED 02 0F 02 10
118+  A7F1 02 11 02 12
118+  A7F5 02 13 02 14
119+  A7F9 19 07 19 08      defb 25,7,25,8,25,9,25,10,25,11,25,12,25,13,25,14,25,15,25,16,25,17,25,18,25,19,25,20
119+  A7FD 19 09 19 0A
119+  A801 19 0B 19 0C
119+  A805 19 0D 19 0E
119+  A809 19 0F 19 10
119+  A80D 19 11 19 12
119+  A811 19 13 19 14
120+  A815 03 0B 04 0B      defb 3,11,4,11,5,11,6,11,7,11,8,11,9,11,10,11,11,11
120+  A819 05 0B 06 0B
120+  A81D 07 0B 08 0B
120+  A821 09 0B 0A 0B
120+  A825 0B 0B
121+  A827 0B 07 0B 08      defb 11,7,11,8,11,9,11,10
121+  A82B 0B 09 0B 0A
122+  A82F 10 0D 10 0F      defb 16,13,16,15,16,16,16,17,16,18,16,19,16,20
122+  A833 10 10 10 11
122+  A837 10 12 10 13
122+  A83B 10 14
123+  A83D
# file closed: screen/titlescreen.asm
 27   A83D
 28   A83D                  include "leveldata\level01.asm"
# file opened: leveldata/level01.asm
  1+  A83D              ; ###############################################################
  2+  A83D              ; Data for level 1
  3+  A83D              ; ###############################################################
  4+  A83D              level01:
  5+  A83D
  6+  A83D                  ;defb 09,04,04,04,04,04,04,04,04,04,04,04,04,04,04,09,09,04,04,04,04,04,04,04,04,04,04,04,04,04,04,09
  7+  A83D
  8+  A83D 00 00 05 05      defb 00,00,05,05,05,05,05,05,05,05,05,05,05,05,02,01,01,01,03,05,05,05,05,05,05,05,05,05,05,05,00,00
  8+  A841 05 05 05 05
  8+  A845 05 05 05 05
  8+  A849 05 05 02 01
  8+  A84D 01 01 03 05
  8+  A851 05 05 05 05
  8+  A855 05 05 05 05
  8+  A859 05 05 00 00
  9+  A85D 00 00 05 05      defb 00,00,05,05,05,05,05,05,05,05,05,05,02,01,01,01,01,01,01,01,03,05,05,05,05,05,05,05,05,05,00,00
  9+  A861 05 05 05 05
  9+  A865 05 05 05 05
  9+  A869 02 01 01 01
  9+  A86D 01 01 01 01
  9+  A871 03 05 05 05
  9+  A875 05 05 05 05
  9+  A879 05 05 00 00
 10+  A87D 00 00 05 05      defb 00,00,05,05,05,05,05,05,05,05,02,01,01,01,01,01,01,01,01,01,01,01,03,05,13,13,13,13,13,13,00,00
 10+  A881 05 05 05 05
 10+  A885 05 05 02 01
 10+  A889 01 01 01 01
 10+  A88D 01 01 01 01
 10+  A891 01 01 03 05
 10+  A895 0D 0D 0D 0D
 10+  A899 0D 0D 00 00
 11+  A89D 00 00 01 01      defb 00,00,01,01,01,01,00,01,01,01,01,01,01,01,01,01,01,01,01,01,01,01,01,03,05,05,05,05,05,05,00,00
 11+  A8A1 01 01 00 01
 11+  A8A5 01 01 01 01
 11+  A8A9 01 01 01 01
 11+  A8AD 01 01 01 01
 11+  A8B1 01 01 01 03
 11+  A8B5 05 05 05 05
 11+  A8B9 05 05 00 00
 12+  A8BD 00 00 01 01      defb 00,00,01,01,04,04,04,04,04,04,01,01,01,01,01,01,01,01,01,01,01,01,01,01,01,01,01,01,00,01,00,00
 12+  A8C1 04 04 04 04
 12+  A8C5 04 04 01 01
 12+  A8C9 01 01 01 01
 12+  A8CD 01 01 01 01
 12+  A8D1 01 01 01 01
 12+  A8D5 01 01 01 01
 12+  A8D9 00 01 00 00
 13+  A8DD 00 00 01 04      defb 00,00,01,04,04,04,04,04,04,04,04,04,01,01,01,01,01,01,01,01,01,01,01,01,00,00,00,00,00,01,00,00
 13+  A8E1 04 04 04 04
 13+  A8E5 04 04 04 04
 13+  A8E9 01 01 01 01
 13+  A8ED 01 01 01 01
 13+  A8F1 01 01 01 01
 13+  A8F5 00 00 00 00
 13+  A8F9 00 01 00 00
 14+  A8FD 00 00 01 04      defb 00,00,01,04,04,01,01,01,01,01,04,04,04,04,01,01,01,01,01,01,01,00,00,00,00,01,01,01,01,01,00,00
 14+  A901 04 01 01 01
 14+  A905 01 01 04 04
 14+  A909 04 04 01 01
 14+  A90D 01 01 01 01
 14+  A911 01 00 00 00
 14+  A915 00 01 01 01
 14+  A919 01 01 00 00
 15+  A91D 00 00 01 04      defb 00,00,01,04,04,04,04,04,04,01,04,04,04,04,04,04,04,04,00,00,00,00,04,04,04,04,04,04,04,01,00,00
 15+  A921 04 04 04 04
 15+  A925 04 01 04 04
 15+  A929 04 04 04 04
 15+  A92D 04 04 00 00
 15+  A931 00 00 04 04
 15+  A935 04 04 04 04
 15+  A939 04 01 00 00
 16+  A93D 00 00 01 01      defb 00,00,01,01,01,04,01,01,01,01,04,04,04,04,04,04,04,04,00,04,04,04,04,04,04,04,04,04,04,01,00,00
 16+  A941 01 04 01 01
 16+  A945 01 01 04 04
 16+  A949 04 04 04 04
 16+  A94D 04 04 00 04
 16+  A951 04 04 04 04
 16+  A955 04 04 04 04
 16+  A959 04 01 00 00
 17+  A95D 00 00 01 00      defb 00,00,01,00,00,00,00,00,00,04,04,04,04,04,04,04,04,04,00,04,04,04,04,04,04,04,04,04,04,01,00,00
 17+  A961 00 00 00 00
 17+  A965 00 04 04 04
 17+  A969 04 04 04 04
 17+  A96D 04 04 00 04
 17+  A971 04 04 04 04
 17+  A975 04 04 04 04
 17+  A979 04 01 00 00
 18+  A97D 00 00 01 07      defb 00,00,01,07,07,07,07,07,07,01,04,04,04,04,04,04,04,04,00,04,04,04,04,04,04,04,04,04,04,01,00,00
 18+  A981 07 07 07 07
 18+  A985 07 01 04 04
 18+  A989 04 04 04 04
 18+  A98D 04 04 00 04
 18+  A991 04 04 04 04
 18+  A995 04 04 04 04
 18+  A999 04 01 00 00
 19+  A99D 00 00 01 00      defb 00,00,01,00,00,00,00,00,00,01,04,04,04,04,04,04,04,04,00,04,04,04,04,04,04,00,00,00,00,01,00,00
 19+  A9A1 00 00 00 00
 19+  A9A5 00 01 04 04
 19+  A9A9 04 04 04 04
 19+  A9AD 04 04 00 04
 19+  A9B1 04 04 04 04
 19+  A9B5 04 00 00 00
 19+  A9B9 00 01 00 00
 20+  A9BD 00 00 01 00      defb 00,00,01,00,00,00,00,00,00,01,04,04,04,04,04,04,04,04,00,04,04,04,04,04,04,00,04,04,00,01,00,00
 20+  A9C1 00 00 00 00
 20+  A9C5 00 01 04 04
 20+  A9C9 04 04 04 04
 20+  A9CD 04 04 00 04
 20+  A9D1 04 04 04 04
 20+  A9D5 04 00 04 04
 20+  A9D9 00 01 00 00
 21+  A9DD 00 00 01 06      defb 00,00,01,06,06,06,06,06,06,01,04,04,04,04,04,04,04,04,00,04,04,04,04,04,04,00,04,04,00,01,00,00
 21+  A9E1 06 06 06 06
 21+  A9E5 06 01 04 04
 21+  A9E9 04 04 04 04
 21+  A9ED 04 04 00 04
 21+  A9F1 04 04 04 04
 21+  A9F5 04 00 04 04
 21+  A9F9 00 01 00 00
 22+  A9FD 00 00 01 06      defb 00,00,01,06,06,06,06,06,06,01,04,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,04,04,00,01,00,00
 22+  AA01 06 06 06 06
 22+  AA05 06 01 04 00
 22+  AA09 00 00 00 00
 22+  AA0D 00 00 00 00
 22+  AA11 00 00 00 00
 22+  AA15 00 00 04 04
 22+  AA19 00 01 00 00
 23+  AA1D 00 00 01 06      defb 00,00,01,06,06,06,06,06,06,01,04,00,04,04,04,04,04,04,00,04,04,04,00,04,04,04,04,04,00,01,00,00
 23+  AA21 06 06 06 06
 23+  AA25 06 01 04 00
 23+  AA29 04 04 04 04
 23+  AA2D 04 04 00 04
 23+  AA31 04 04 00 04
 23+  AA35 04 04 04 04
 23+  AA39 00 01 00 00
 24+  AA3D 00 00 01 06      defb 00,00,01,06,06,06,06,06,06,01,04,00,04,04,04,04,04,04,00,04,04,04,00,04,04,04,04,04,00,01,00,00
 24+  AA41 06 06 06 06
 24+  AA45 06 01 04 00
 24+  AA49 04 04 04 04
 24+  AA4D 04 04 00 04
 24+  AA51 04 04 00 04
 24+  AA55 04 04 04 04
 24+  AA59 00 01 00 00
 25+  AA5D 00 00 01 01      defb 00,00,01,01,01,01,01,01,01,01,04,00,04,04,04,04,04,04,00,04,04,04,00,04,04,04,04,04,00,01,00,00
 25+  AA61 01 01 01 01
 25+  AA65 01 01 04 00
 25+  AA69 04 04 04 04
 25+  AA6D 04 04 00 04
 25+  AA71 04 04 00 04
 25+  AA75 04 04 04 04
 25+  AA79 00 01 00 00
 26+  AA7D 00 00 01 04      defb 00,00,01,04,04,04,04,04,04,04,04,00,04,04,04,04,04,04,00,04,04,04,00,00,00,00,04,04,04,01,00,00
 26+  AA81 04 04 04 04
 26+  AA85 04 04 04 00
 26+  AA89 04 04 04 04
 26+  AA8D 04 04 00 04
 26+  AA91 04 04 00 00
 26+  AA95 00 00 04 04
 26+  AA99 04 01 00 00
 27+  AA9D 00 00 01 04      defb 00,00,01,04,04,04,00,00,00,00,00,00,04,04,04,04,04,04,00,04,04,04,04,04,04,00,04,04,04,01,00,00
 27+  AAA1 04 04 00 00
 27+  AAA5 00 00 00 00
 27+  AAA9 04 04 04 04
 27+  AAAD 04 04 00 04
 27+  AAB1 04 04 04 04
 27+  AAB5 04 00 04 04
 27+  AAB9 04 01 00 00
 28+  AABD 00 00 01 04      defb 00,00,01,04,04,04,00,04,04,04,04,04,04,04,04,04,04,04,00,04,04,04,04,04,04,00,04,04,04,01,00,00
 28+  AAC1 04 04 00 04
 28+  AAC5 04 04 04 04
 28+  AAC9 04 04 04 04
 28+  AACD 04 04 00 04
 28+  AAD1 04 04 04 04
 28+  AAD5 04 00 04 04
 28+  AAD9 04 01 00 00
 29+  AADD 00 00 01 04      defb 00,00,01,04,04,04,00,04,04,04,01,01,01,01,01,01,01,01,01,01,01,01,01,01,04,00,04,04,04,01,00,00
 29+  AAE1 04 04 00 04
 29+  AAE5 04 04 01 01
 29+  AAE9 01 01 01 01
 29+  AAED 01 01 01 01
 29+  AAF1 01 01 01 01
 29+  AAF5 04 00 04 04
 29+  AAF9 04 01 00 00
 30+  AAFD 00 00 01 04      defb 00,00,01,04,04,04,00,04,04,04,01,00,00,00,00,00,00,00,00,00,00,00,00,01,04,00,04,04,04,01,00,00
 30+  AB01 04 04 00 04
 30+  AB05 04 04 01 00
 30+  AB09 00 00 00 00
 30+  AB0D 00 00 00 00
 30+  AB11 00 00 00 01
 30+  AB15 04 00 04 04
 30+  AB19 04 01 00 00
 31+  AB1D 00 00 01 04      defb 00,00,01,04,04,04,00,04,04,04,01,00,00,00,00,00,00,00,00,00,00,00,00,01,04,00,04,04,04,01,00,00
 31+  AB21 04 04 00 04
 31+  AB25 04 04 01 00
 31+  AB29 00 00 00 00
 31+  AB2D 00 00 00 00
 31+  AB31 00 00 00 01
 31+  AB35 04 00 04 04
 31+  AB39 04 01 00 00
 32+  AB3D 00 00 01 04      defb 00,00,01,04,04,04,00,04,04,04,01,00,00,00,00,00,00,00,00,00,00,00,00,01,04,00,04,04,04,01,00,00
 32+  AB41 04 04 00 04
 32+  AB45 04 04 01 00
 32+  AB49 00 00 00 00
 32+  AB4D 00 00 00 00
 32+  AB51 00 00 00 01
 32+  AB55 04 00 04 04
 32+  AB59 04 01 00 00
 33+  AB5D 00 00 01 04      defb 00,00,01,04,04,04,00,04,04,04,04,00,00,00,00,00,00,00,00,00,00,00,00,04,04,04,04,04,04,01,00,00
 33+  AB61 04 04 00 04
 33+  AB65 04 04 04 00
 33+  AB69 00 00 00 00
 33+  AB6D 00 00 00 00
 33+  AB71 00 00 00 04
 33+  AB75 04 04 04 04
 33+  AB79 04 01 00 00
 34+  AB7D 00 00 01 04      defb 00,00,01,04,04,04,04,04,04,04,01,00,00,00,00,00,00,00,00,00,00,00,00,01,04,04,04,04,04,01,00,00
 34+  AB81 04 04 04 04
 34+  AB85 04 04 01 00
 34+  AB89 00 00 00 00
 34+  AB8D 00 00 00 00
 34+  AB91 00 00 00 01
 34+  AB95 04 04 04 04
 34+  AB99 04 01 00 00
 35+  AB9D 00 00 01 04      defb 00,00,01,04,04,04,04,04,04,04,01,00,00,00,01,00,00,00,00,01,00,00,00,01,04,04,04,04,04,01,00,00
 35+  ABA1 04 04 04 04
 35+  ABA5 04 04 01 00
 35+  ABA9 00 00 01 00
 35+  ABAD 00 00 00 01
 35+  ABB1 00 00 00 01
 35+  ABB5 04 04 04 04
 35+  ABB9 04 01 00 00
 36+  ABBD 00 00 01 01      defb 00,00,01,01,01,01,01,01,01,01,01,01,01,01,01,01,01,01,01,01,01,01,01,01,01,01,01,01,01,01,00,00
 36+  ABC1 01 01 01 01
 36+  ABC5 01 01 01 01
 36+  ABC9 01 01 01 01
 36+  ABCD 01 01 01 01
 36+  ABD1 01 01 01 01
 36+  ABD5 01 01 01 01
 36+  ABD9 01 01 00 00
 37+  ABDD
 38+  ABDD              ; ###############################################################
 39+  ABDD              ; Object data: horiz, vert, state, memh, meml
 40+  ABDD              ; ###############################################################
 41+  ABDD              level01rocks:
 42+  ABDD 09 04 00 00      defb 9,4,0,0,0
 42+  ABE1 00
 43+  ABE2 0C 07 00 00      defb 12,7,0,0,0
 43+  ABE6 00
 44+  ABE7 10 07 00 00      defb 16,7,0,0,0
 44+  ABEB 00
 45+  ABEC 0B 08 00 00      defb 11,8,0,0,0
 45+  ABF0 00
 46+  ABF1 0A 0A 00 00      defb 10,10,0,0,0
 46+  ABF5 00
 47+  ABF6 0C 0A 00 00      defb 12,10,0,0,0
 47+  ABFA 00
 48+  ABFB 0D 09 00 00      defb 13,9,0,0,0
 48+  ABFF 00
 49+  AC00 0E 08 00 00      defb 14,8,0,0,0
 49+  AC04 00
 50+  AC05 0F 0B 00 00      defb 15,11,0,0,0
 50+  AC09 00
 51+  AC0A 0B 0C 00 00      defb 11,12,0,0,0
 51+  AC0E 00
 52+  AC0F 11 0C 00 00      defb 17,12,0,0,0
 52+  AC13 00
 53+  AC14 13 08 00 00      defb 19,8,0,0,0
 53+  AC18 00
 54+  AC19 16 09 00 00      defb 22,9,0,0,0
 54+  AC1D 00
 55+  AC1E 13 0A 00 00      defb 19,10,0,0,0
 55+  AC22 00
 56+  AC23 15 0A 00 00      defb 21,10,0,0,0
 56+  AC27 00
 57+  AC28 15 0C 00 00      defb 21,12,0,0,0
 57+  AC2C 00
 58+  AC2D 16 0C 00 00      defb 22,12,0,0,0
 58+  AC31 00
 59+  AC32 18 0A 00 00      defb 24,10,0,0,0
 59+  AC36 00
 60+  AC37 19 09 00 00      defb 25,9,0,0,0
 60+  AC3B 00
 61+  AC3C 1C 09 00 00      defb 28,9,0,0,0
 61+  AC40 00
 62+  AC41 1B 0C 00 00      defb 27,12,0,0,0
 62+  AC45 00
 63+  AC46 1A 0D 00 00      defb 26,13,0,0,0
 63+  AC4A 00
 64+  AC4B 19 0E 00 00      defb 25,14,0,0,0
 64+  AC4F 00
 65+  AC50 19 10 00 00      defb 25,16,0,0,0
 65+  AC54 00
 66+  AC55 1A 11 00 00      defb 26,17,0,0,0
 66+  AC59 00
 67+  AC5A 1B 11 00 00      defb 27,17,0,0,0
 67+  AC5E 00
 68+  AC5F 1C 12 00 00      defb 28,18,0,0,0
 68+  AC63 00
 69+  AC64 1A 13 00 00      defb 26,19,0,0,0
 69+  AC68 00
 70+  AC69 1B 15 00 00      defb 27,21,0,0,0
 70+  AC6D 00
 71+  AC6E 1A 17 00 00      defb 26,23,0,0,0
 71+  AC72 00
 72+  AC73 1B 18 00 00      defb 27,24,0,0,0
 72+  AC77 00
 73+  AC78 19 18 00 00      defb 25,24,0,0,0
 73+  AC7C 00
 74+  AC7D 18 17 00 00      defb 24,23,0,0,0
 74+  AC81 00
 75+  AC82 13 14 00 00      defb 19,20,0,0,0
 75+  AC86 00
 76+  AC87 14 12 00 00      defb 20,18,0,0,0
 76+  AC8B 00
 77+  AC8C 14 10 00 00      defb 20,16,0,0,0
 77+  AC90 00
 78+  AC91 15 10 00 00      defb 21,16,0,0,0
 78+  AC95 00
 79+  AC96 16 12 00 00      defb 22,18,0,0,0
 79+  AC9A 00
 80+  AC9B 11 14 00 00      defb 17,20,0,0,0
 80+  AC9F 00
 81+  ACA0 0D 11 00 00      defb 13,17,0,0,0
 81+  ACA4 00
 82+  ACA5 0C 13 00 00      defb 12,19,0,0,0
 82+  ACA9 00
 83+  ACAA 0B 13 00 00      defb 11,19,0,0,0
 83+  ACAE 00
 84+  ACAF 0A 11 00 00      defb 10,17,0,0,0
 84+  ACB3 00
 85+  ACB4 05 12 00 00      defb 5,18,0,0,0
 85+  ACB8 00
 86+  ACB9 07 16 00 00      defb 7,22,0,0,0
 86+  ACBD 00
 87+  ACBE 09 17 00 00      defb 9,23,0,0,0
 87+  ACC2 00
 88+  ACC3 07 18 00 00      defb 7,24,0,0,0
 88+  ACC7 00
 89+  ACC8 05 18 00 00      defb 5,24,0,0,0
 89+  ACCC 00
 90+  ACCD 06 19 00 00      defb 6,25,0,0,0
 90+  ACD1 00
 91+  ACD2 08 19 00 00      defb 8,25,0,0,0
 91+  ACD6 00
 92+  ACD7 04 17 00 00      defb 4,23,0,0,0
 92+  ACDB 00
 93+  ACDC FF               defb 255
 94+  ACDD
 95+  ACDD              level01missiles:
 96+  ACDD 0B 17 00 00      defb 11,23,0,0,0
 96+  ACE1 00
 97+  ACE2 0B 16 00 00      defb 11,22,0,0,0
 97+  ACE6 00
 98+  ACE7 0C 17 00 00      defb 12,23,0,0,0
 98+  ACEB 00
 99+  ACEC 0C 16 00 00      defb 12,22,0,0,0
 99+  ACF0 00
100+  ACF1 0D 17 00 00      defb 13,23,0,0,0
100+  ACF5 00
101+  ACF6 0D 16 00 00      defb 13,22,0,0,0
101+  ACFA 00
102+  ACFB 0E 17 00 00      defb 14,23,0,0,0
102+  ACFF 00
103+  AD00 0E 16 00 00      defb 14,22,0,0,0
103+  AD04 00
104+  AD05 0F 17 00 00      defb 15,23,0,0,0
104+  AD09 00
105+  AD0A 0F 16 00 00      defb 15,22,0,0,0
105+  AD0E 00
106+  AD0F 10 17 00 00      defb 16,23,0,0,0
106+  AD13 00
107+  AD14 10 16 00 00      defb 16,22,0,0,0
107+  AD18 00
108+  AD19 11 17 00 00      defb 17,23,0,0,0
108+  AD1D 00
109+  AD1E 11 16 00 00      defb 17,22,0,0,0
109+  AD22 00
110+  AD23 12 17 00 00      defb 18,23,0,0,0
110+  AD27 00
111+  AD28 12 16 00 00      defb 18,22,0,0,0
111+  AD2C 00
112+  AD2D 13 17 00 00      defb 19,23,0,0,0
112+  AD31 00
113+  AD32 13 16 00 00      defb 19,22,0,0,0
113+  AD36 00
114+  AD37 14 17 00 00      defb 20,23,0,0,0
114+  AD3B 00
115+  AD3C 14 16 00 00      defb 20,22,0,0,0
115+  AD40 00
116+  AD41 15 17 00 00      defb 21,23,0,0,0
116+  AD45 00
117+  AD46 15 16 00 00      defb 21,22,0,0,0
117+  AD4A 00
118+  AD4B 16 17 00 00      defb 22,23,0,0,0
118+  AD4F 00
119+  AD50 16 16 00 00      defb 22,22,0,0,0
119+  AD54 00
120+  AD55 FF               defb 255
121+  AD56
122+  AD56              level01diamonds:
123+  AD56 0C 1B 00 00      defb 12,27,0,0,0
123+  AD5A 00
124+  AD5B 10 1B 00 00      defb 16,27,0,0,0
124+  AD5F 00
125+  AD60 15 1B 00 00      defb 21,27,0,0,0
125+  AD64 00
126+  AD65 FF               defb 255
127+  AD66
128+  AD66              level01gems:
129+  AD66 12 14 00 00      defb 18,20,0,0,0
129+  AD6A 00
130+  AD6B 06 18 00 00      defb 6,24,0,0,0
130+  AD6F 00
131+  AD70 19 17 00 00      defb 25,23,0,0,0
131+  AD74 00
132+  AD75 1C 11 00 00      defb 28,17,0,0,0
132+  AD79 00
133+  AD7A FF               defb 255
134+  AD7B              ;
135+  AD7B              ; Score area colours
136+  AD7B              ;
137+  AD7B              score_colours:
138+  AD7B 47 47 47 47      defb 71,71,71,71,71,71,71,71,71,71,71,66,67,67,67,67,67,67,67,67,66,71,71,71,71,71,71,71,71,71,71,71
138+  AD7F 47 47 47 47
138+  AD83 47 47 47 42
138+  AD87 43 43 43 43
138+  AD8B 43 43 43 43
138+  AD8F 42 47 47 47
138+  AD93 47 47 47 47
138+  AD97 47 47 47 47
139+  AD9B 47 47 47 47      defb 71,71,71,71,71,71,71,71,71,71,71,70,70,70,70,70,70,70,70,70,70,71,71,71,71,71,71,71,71,71,71,71
139+  AD9F 47 47 47 47
139+  ADA3 47 47 47 46
139+  ADA7 46 46 46 46
139+  ADAB 46 46 46 46
139+  ADAF 46 47 47 47
139+  ADB3 47 47 47 47
139+  ADB7 47 47 47 47
140+  ADBB
141+  ADBB              high_score_colours:
142+  ADBB 00 00 00 42      defb  0, 0, 0,66,66,66,71,71,71,71,71,71,67,67,67,71,71,71,71,71,71,70,70,70,71,71,71,71,71,71,0,0
142+  ADBF 42 42 47 47
142+  ADC3 47 47 47 47
142+  ADC7 43 43 43 47
142+  ADCB 47 47 47 47
142+  ADCF 47 46 46 46
142+  ADD3 47 47 47 47
142+  ADD7 47 47 00 00
# file closed: leveldata/level01.asm
 29   ADDB                  include "graphics\graphics.asm"
# file opened: graphics/graphics.asm
  1+  ADDB              ; Tiles graphics.
  2+  ADDB              sprites:
  3+  ADDB 00 00 00 00      defb    0  ,  0,  0,  0,  0,  0,  0,  0   ; 0, space
  3+  ADDF 00 00 00 00
  4+  ADE3 FF FF FF FF      defb    255,255,255,255,255,255,255,255   ; 1, cyan block
  4+  ADE7 FF FF FF FF
  5+  ADEB 01 03 07 0F      defb	  1,  3,  7, 15, 31, 63,127,255   ; 2, slope left
  5+  ADEF 1F 3F 7F FF
  6+  ADF3 80 C0 E0 F0      defb    128,192,224,240,248,252,254,255   ; 3, slope right
  6+  ADF7 F8 FC FE FF
  7+  ADFB 55 AA 55 AA      defb    85,170, 85,170, 85,170, 85,170    ; 4, dirt
  7+  ADFF 55 AA 55 AA
  8+  AE03 00 00 00 00      defb    0  ,  0,  0,  0,  0,  0,  0,  0   ; 5, sky block
  8+  AE07 00 00 00 00
  9+  AE0B FF FF FF FF      defb    255,255,255,255,255,255,255,255   ; 6, slime block
  9+  AE0F FF FF FF FF
 10+  AE13 FF FF 00 00      defb    255,255,  0,  0,  0,  0,  0,  0   ; 7, trapdoor
 10+  AE17 00 00 00 00
 11+  AE1B 18 2C 4E 8F      defb    24, 44, 78,143,241,114, 52,  24    ; 8, diamond
 11+  AE1F F1 72 34 18
 12+  AE23 3C 7E FF 7F      defb    60,126,255,127,254,254,255,126    ; 9, rock
 12+  AE27 FE FE FF 7E
 13+  AE2B 7E FF 7F 7F  	defb	126,255,127,127,254,255,126, 60    ; 10, rock 2
 13+  AE2F FE FF 7E 3C
 14+  AE33 00 00 00 00      defb    0  ,  0,  0,  0,  0,  0,255,255   ; 11, sky block, pixel trapdoor
 14+  AE37 00 00 FF FF
 15+  AE3B 99 DB 7E 24  	defb    153,219,126, 36,255,126, 60, 24   ; 12, missile
 15+  AE3F FF 7E 3C 18
 16+  AE43 00 00 00 00      defb    0  ,  0,  0,  0,  0,  0,  0,  0   ; 13, sky block, tank background
 16+  AE47 00 00 00 00
 17+  AE4B 00 00 00 00  	defb    0,  0,  0,  0,  0, 60, 90, 52     ; 14, gem
 17+  AE4F 00 3C 5A 34
 18+  AE53
 19+  AE53              sprite_attrs:
 20+  AE53 46               defb    070 ; 0, space
 21+  AE54 65               defb    101 ; 1, cyan block
 22+  AE55 4D               defb    077 ; 2, slope left
 23+  AE56 4D               defb    077 ; 3, slope right
 24+  AE57 46               defb    070 ; 4, dirt
 25+  AE58 4E               defb    078 ; 5, sky
 26+  AE59 4C               defb    076 ; 6, slime
 27+  AE5A 42               defb    066 ; 7, trapdoor
 28+  AE5B 46               defb    070 ; 8, diamond
 29+  AE5C 42               defb    066 ; 9, rock
 30+  AE5D 42               defb    066 ; 10, rock 2
 31+  AE5E 49           	defb    073 ; 11, sky, trapdoor
 32+  AE5F 43           	defb    067 ; 12, missile
 33+  AE60 4A               defb    074 ; 13, sky, red ink (tank)
 34+  AE61 46               defb    070 ; 14, gem
 35+  AE62
 36+  AE62              player_sprite:
 37+  AE62 10 39 92 FC  	defb	 16, 57,146,252, 56, 61,195,128 ; 0 up/down 1
 37+  AE66 38 3D C3 80
 38+  AE6A 08 1C 08 FC  	defb	  8, 28,  8,252, 60, 28, 22, 50 ; 1 left 1
 38+  AE6E 3C 1C 16 32
 39+  AE72 10 38 10 3F      defb   	 16, 56, 16, 63, 60, 56,104, 76 ; 2 right 1
 39+  AE76 3C 38 68 4C
 40+  AE7A 08 9C 49 3F  	defb	  8,156, 73, 63, 28,188,195,  1 ; 3 up/down 2
 40+  AE7E 1C BC C3 01
 41+  AE82 08 1C 08 FC  	defb	  8, 28,  8,252, 60, 60,100, 12; 4 left 2
 41+  AE86 3C 3C 64 0C
 42+  AE8A 10 38 10 3F  	defb	 16, 56, 16, 63, 60, 60, 38, 48 ; 5 right 2
 42+  AE8E 3C 3C 26 30
 43+  AE92 54 28 10 12  	defb	 84, 40, 16, 18, 30, 92,253, 95 ; 6 shoot up
 43+  AE96 1E 5C FD 5F
 44+  AE9A 02 87 42 BF  	defb	 2,135, 66,191, 79,143, 25,  3  ; 7 shoot left
 44+  AE9E 4F 8F 19 03
 45+  AEA2 40 E1 42 FD  	defb	 64,225, 66,253,242,241,152,192 ; 8 shoot right
 45+  AEA6 F2 F1 98 C0
 46+  AEAA FA BF 3A 78  	defb	 250,191, 58,120, 72,  8, 20, 42 ; 9 shoot down
 46+  AEAE 48 08 14 2A
 47+  AEB2
 48+  AEB2              ;
 49+  AEB2              ; First 4 top half, next 4 bottom 1, next 4 bottom 2
 50+  AEB2              ;
 51+  AEB2              ship_sprite:
 52+  AEB2 00 00 00 01  	defb	  0,  0,  0,  1,  3, 31,127,255
 52+  AEB6 03 1F 7F FF
 53+  AEBA 1F 01 7F FF  	defb	 31,  1,127,255,255,255,255,255
 53+  AEBE FF FF FF FF
 54+  AEC2 F8 80 FE FF  	defb	248,128,254,255,255,255,255,255
 54+  AEC6 FF FF FF FF
 55+  AECA 00 00 00 80  	defb	  0,  0,  0,128,192,248,254,255
 55+  AECE C0 F8 FE FF
 56+  AED2 B3 B3 7F 1F  	defb	179,179,127, 31,  3,  3,  2,  7
 56+  AED6 03 03 02 07
 57+  AEDA 8F 8F FF FF  	defb	143,143,255,255,255, 15,  7,131
 57+  AEDE FF 0F 07 83
 58+  AEE2 0F 0F FF FF  	defb	 15, 15,255,255,255, 16, 32,193
 58+  AEE6 FF 10 20 C1
 59+  AEEA 19 19 FE F8  	defb	 25, 25,254,248,192,192, 64,224
 59+  AEEE C0 C0 40 E0
 60+  AEF2 98 98 7F 1F  	defb	152,152,127, 31,  3,  3,  2,  7
 60+  AEF6 03 03 02 07
 61+  AEFA F0 F0 FF FF  	defb	240,240,255,255,255,  8,  4,131
 61+  AEFE FF 08 04 83
 62+  AF02 F1 F1 FF FF  	defb	241,241,255,255,255,240,224,193
 62+  AF06 FF F0 E0 C1
 63+  AF0A CD CD FE F8  	defb	205,205,254,248,192,192, 64,224
 63+  AF0E C0 C0 40 E0
 64+  AF12
 65+  AF12              ;
 66+  AF12              ;  First 8 frames are tank, last frame is the gun barrel
 67+  AF12              ;
 68+  AF12              tank_sprite:
 69+  AF12 00 00 00 7F  	defb	  0,  0,  0,127,127,  0,  0,  0
 69+  AF16 7F 00 00 00
 70+  AF1A 01 03 FE FC  	defb	  1,  3,254,252,254,255,127, 64
 70+  AF1E FE FF 7F 40
 71+  AF22 FF FF 03 F9  	defb	255,255,  3,249,  3,255,255,  1
 71+  AF26 03 FF FF 01
 72+  AF2A 00 00 C0 E0  	defb	  0,  0,192,224,224,192,  0,  0
 72+  AF2E E0 C0 00 00
 73+  AF32 3F 7F E1 FB  	defb	 63,127,225,251,247,225,127, 63
 73+  AF36 F7 E1 7F 3F
 74+  AF3A FF FF 16 52  	defb	255,255, 22, 82, 84, 22,255,255
 74+  AF3E 54 16 FF FF
 75+  AF42 FF FF A8 A9  	defb	255,255,168,169,155,168,255,255
 75+  AF46 9B A8 FF FF
 76+  AF4A FC FE 8F AF  	defb	252,254,143,175,159,175,254,252
 76+  AF4E 9F AF FE FC
 77+  AF52 00 00 00 1F  	defb	  0,  0,  0, 31, 31,  0,  0,  0
 77+  AF56 1F 00 00 00
# file closed: graphics/graphics.asm
 30   AF5A
 31   AF5A                  include "game\control.asm"
# file opened: game/control.asm
  1+  AF5A              ;
  2+  AF5A              ; Check the keyboard then move
  3+  AF5A              ;
  4+  AF5A              control_keyboard:
  5+  AF5A 3A 3A B3         ld a,(player+5)      ; first, check if the player has pixels left to move
  6+  AF5D FE 00            cp 0
  7+  AF5F CA 66 AF         jp z, control_keyboard5
  8+  AF62 CD 6B B0         call control_automove
  9+  AF65 C9               ret
 10+  AF66              control_keyboard5:
 11+  AF66 3A 3B B3         ld a,(player+6)      ; next, check if the player is digging
 12+  AF69 FE 00            cp 0
 13+  AF6B CA 72 AF         jp z, control_keyboard0
 14+  AF6E CD A9 AF         call control_dig
 15+  AF71 C9               ret
 16+  AF72              control_keyboard0:
 17+  AF72 01 FE FB         ld bc,64510         ; port for keyboard row q-t.
 18+  AF75 ED 78            in a,(c)            ; read keyboard.
 19+  AF77 47               ld b,a              ; store result in b register.
 20+  AF78 CB 18            rr b                ; check outermost key (q).
 21+  AF7A D2 99 AF         jp nc,control_keyboard1
 22+  AF7D 01 FE FD         ld bc,65022         ; port for keyboard row a-f.
 23+  AF80 ED 78            in a,(c)            ; read keyboard.
 24+  AF82 47               ld b,a              ; store result in b register.
 25+  AF83 CB 18            rr b                ; check outermost key (a).
 26+  AF85 D2 9D AF         jp nc,control_keyboard2
 27+  AF88 01 FE DF         ld bc,57342         ; port for keyboard row y-p.
 28+  AF8B ED 78            in a,(c)            ; read keyboard.
 29+  AF8D 47               ld b,a              ; store result in b register.
 30+  AF8E CB 18            rr b                ; check outermost key (p).
 31+  AF90 D2 A1 AF         jp nc,control_keyboard3
 32+  AF93 CB 18            rr b                ; check next key.
 33+  AF95 D2 A5 AF         jp nc,control_keyboard4
 34+  AF98 C9               ret
 35+  AF99              control_keyboard1:
 36+  AF99 CD B4 B0         call control_pl_moveup         ; player up.
 37+  AF9C C9               ret
 38+  AF9D              control_keyboard2:
 39+  AF9D CD E3 B0         call control_pl_movedown       ; player down.
 40+  AFA0 C9               ret
 41+  AFA1              control_keyboard3:
 42+  AFA1 CD 40 B1         call control_pl_moveright       ; player left.
 43+  AFA4 C9               ret
 44+  AFA5              control_keyboard4:
 45+  AFA5 CD 10 B1         call control_pl_moveleft       ; player right.
 46+  AFA8 C9               ret
 47+  AFA9
 48+  AFA9              ;
 49+  AFA9              ; Performs a dig if the counter has reset, otherwise, messes with the graphics
 50+  AFA9              ;
 51+  AFA9              control_dig:
 52+  AFA9 ED 4B 35 B3      ld bc,(player)      ; load the current coords into bc
 53+  AFAD C5               push bc
 54+  AFAE 3A 37 B3         ld a,(player+2)     ; get the direction
 55+  AFB1 FE 01            cp 1                ; left
 56+  AFB3 CA CB AF         jp z,control_dig0
 57+  AFB6 FE 02            cp 2                ; right
 58+  AFB8 CA E0 AF         jp z,control_dig1
 59+  AFBB FE 03            cp 3                ; down
 60+  AFBD CA 04 B0         jp z,control_dig5
 61+  AFC0 FE 00            cp 0                ; up
 62+  AFC2 CA F4 AF         jp z,control_dig4
 63+  AFC5 21 3B B3         ld hl,player+6
 64+  AFC8 36 00            ld (hl),0           ; turn off digging
 65+  AFCA C9               ret                 ; return
 66+  AFCB              control_dig0:           ; going left
 67+  AFCB CD AF A6         call sprites_scadd  ; get the current coord
 68+  AFCE 62 6B            ld hl,de
 69+  AFD0 2B               dec hl              ; move one left
 70+  AFD1 C1               pop bc              ; get the coords back, subtract 8 from horiz, 8 from vert, store (will be coords of space above dug dirt)
 71+  AFD2 78               ld a,b
 72+  AFD3 06 08            ld b,8
 73+  AFD5 90               sub b
 74+  AFD6 47               ld b,a
 75+  AFD7 79               ld a,c
 76+  AFD8 0E 08            ld c,8
 77+  AFDA 91               sub c
 78+  AFDB 4F               ld c,a
 79+  AFDC C5               push bc
 80+  AFDD C3 0D B0         jp control_dig2
 81+  AFE0              control_dig1:
 82+  AFE0 CD AF A6         call sprites_scadd  ; get the current coord
 83+  AFE3 62 6B            ld hl,de
 84+  AFE5 23               inc hl              ; move one right
 85+  AFE6 C1               pop bc              ; get the coords back, add 8 to horiz, subtract 8 from vert store (will be coords of space above dug dirt)
 86+  AFE7 3E 08            ld a,8
 87+  AFE9 80               add a,b
 88+  AFEA 47               ld b,a
 89+  AFEB 79               ld a,c
 90+  AFEC 0E 08            ld c,8
 91+  AFEE 91               sub c
 92+  AFEF 4F               ld c,a
 93+  AFF0 C5               push bc
 94+  AFF1 C3 0D B0         jp control_dig2
 95+  AFF4              control_dig4:
 96+  AFF4 CD AF A6         call sprites_scadd  ; get the current coord
 97+  AFF7 62 6B            ld hl,de
 98+  AFF9 11 20 00         ld de,32
 99+  AFFC ED 52            sbc hl,de             ; move one up
100+  AFFE C1               pop bc              ; get the coords back, 1 from vert, store, then we'll sub 1 from c for each row later
101+  AFFF 0D               dec c
102+  B000 C5               push bc
103+  B001 C3 25 B0         jp control_dig6
104+  B004              control_dig5:
105+  B004 CD AF A6         call sprites_scadd  ; get the current coord
106+  B007 62 6B            ld hl,de
107+  B009 24               inc h              ; move one down
108+  B00A                                     ; not bothered about working out bc here, since rock will never fall if digging down
109+  B00A C3 0D B0         jp control_dig2
110+  B00D              ; Normal (not up) digging
111+  B00D              control_dig2:
112+  B00D 3A 3D B3         ld a,(player+8)     ; get the number of rows we need to overwrite
113+  B010 47               ld b,a              ; rows to copy over
114+  B011 E5               push hl             ; store the memory location of the first row for later
115+  B012              control_dig3:
116+  B012 CD 54 B0         call control_getpixelrow
117+  B015 77               ld (hl),a           ; load contents into row
118+  B016 11 20 00         ld de,32
119+  B019 19               add hl,de           ; move to next row
120+  B01A 10 F6            djnz control_dig3
121+  B01C E1               pop hl              ; get the original memory location back
122+  B01D 11 20 00         ld de,32
123+  B020 ED 52            sbc hl,de           ; move to above row, ready for checking for rock
124+  B022 C3 3B B0         jp control_dig10
125+  B025              ; Special case for going up
126+  B025              control_dig6:
127+  B025 3A 3D B3         ld a,(player+8)     ; get the number of rows we need to overwrite
128+  B028 47               ld b,a              ; rows to copy over
129+  B029              control_dig7:
130+  B029 CD 54 B0         call control_getpixelrow
131+  B02C              control_dig12:
132+  B02C 77               ld (hl),a           ; load empty into row
133+  B02D 11 20 00         ld de,32
134+  B030 ED 52            sbc hl,de           ; move up to next row
135+  B032 0D               dec c               ; decrease c to track rows
136+  B033 10 F4            djnz control_dig7
137+  B035 79               ld a,c
138+  B036 D6 07            sub 7
139+  B038 C1               pop bc
140+  B039 4F               ld c,a
141+  B03A C5               push bc             ; store the decreased c coord
142+  B03B              control_dig10:
143+  B03B DD 21 3C B3      ld ix,player+7
144+  B03F DD 7E 00         ld a,(ix)     ; get the dig frame number
145+  B042 3D               dec a
146+  B043 DD 77 00         ld (ix),a
147+  B046                  ; call the check for rocks above the removed dirt
148+  B046 DD 21 3B B3      ld ix,player+6
149+  B04A DD 7E 00         ld a,(ix)     ; get the dig state
150+  B04D FE 00            cp 0
151+  B04F C1               pop bc
152+  B050 CC 76 B5         call z, rocks_checkforfalling ; make the check if we're no longer digging
153+  B053 C9               ret
154+  B054
155+  B054              ;
156+  B054              ; Gets a modified pixel row to overwrite dirt - if this is the last dig, overwrite with nothing, otherwise xor to flip the dirt
157+  B054              ; Inputs:
158+  B054              ; hl - memory of pixel row
159+  B054              ; Outputs:
160+  B054              ; a - modified row to write
161+  B054              ;
162+  B054              control_getpixelrow:
163+  B054 3A 3C B3         ld a,(player+7)     ; get the dig frame number
164+  B057 FE 00            cp 0                ; is this the last dig
165+  B059 CA 60 B0         jp z,control_getpixelrow1
166+  B05C 7E               ld a,(hl)           ; if not, xor with 255 to flip it
167+  B05D EE FF            xor 255
168+  B05F C9               ret
169+  B060              control_getpixelrow1:
170+  B060 DD 21 3B B3      ld ix,player+6
171+  B064 DD 36 00 00      ld (ix),0           ; turn off digging
172+  B068 3E 00            ld a,0              ; if it is, load with empty
173+  B06A C9               ret
174+  B06B
175+  B06B              ;
176+  B06B              ; Auto move the player until pixels is zero
177+  B06B              ;
178+  B06B              control_automove:
179+  B06B 5F               ld e,a              ; store the number of pixels left to move in e
180+  B06C ED 4B 35 B3      ld bc,(player)      ; load the current coords into bc
181+  B070 21 37 B3         ld hl,player+2      ; get the direction
182+  B073 7E               ld a,(hl)
183+  B074 FE 03            cp 3                ; down
184+  B076 CA 8A B0         jp z,control_automove3  ; don't need to do anything
185+  B079 FE 00            cp 0                ; going up
186+  B07B CA 96 B0         jp z,control_automove2
187+  B07E FE 01            cp 1                ; going left?
188+  B080 CA A2 B0         jp z,control_automove0
189+  B083 78               ld a,b
190+  B084 3C               inc a               ; if we're going right, increment a twice for two pixels
191+  B085 3C               inc a
192+  B086 47               ld b,a
193+  B087 C3 A6 B0         jp control_automove1
194+  B08A              control_automove3:
195+  B08A 79               ld a,c
196+  B08B 3C               inc a
197+  B08C 3C               inc a               ; if we're going down, increment twice
198+  B08D 4F               ld c,a
199+  B08E FE 90            cp 144
200+  B090 CC 6E B1         call z, control_scroll_down
201+  B093 C3 A6 B0         jp control_automove1
202+  B096              control_automove2:
203+  B096 79               ld a,c
204+  B097 3D               dec a
205+  B098 3D               dec a               ; if we're going up, decrement twice
206+  B099 4F               ld c,a
207+  B09A FE 60            cp 96
208+  B09C CC 7B B1         call z, control_scroll_up
209+  B09F C3 A6 B0         jp control_automove1
210+  B0A2              control_automove0:
211+  B0A2 78               ld a,b
212+  B0A3 3D               dec a               ; if we're going left, decrement a twice
213+  B0A4 3D               dec a
214+  B0A5 47               ld b,a
215+  B0A6              control_automove1:
216+  B0A6 ED 43 35 B3      ld (player),bc      ; and back to player
217+  B0AA 7B               ld a,e              ; now get the pixel count back
218+  B0AB 3D               dec a               ; decrease by one
219+  B0AC 21 3A B3         ld hl,player+5
220+  B0AF 77               ld (hl),a           ; copy back
221+  B0B0 CD 7B B3         call player_justmoved
222+  B0B3 C9               ret
223+  B0B4
224+  B0B4              ;
225+  B0B4              ; Moves the player up
226+  B0B4              ;
227+  B0B4              control_pl_moveup:
228+  B0B4 C5               push bc
229+  B0B5 ED 4B 35 B3      ld bc,(player)          ; get the current coords, b horiz, c vert
230+  B0B9 79               ld a,c                  ; load c into the acc
231+  B0BA FE 18            cp 24
232+  B0BC CA DC B0         jp z,control_pl_moveup0 ; are we at the edge of the screen
233+  B0BF FE 60            cp 96
234+  B0C1 CC 7B B1         call z, control_scroll_up
235+  B0C4 CD A6 B2         call movement_checkcanmove_up ; check we can move up, e will be 1 if we can
236+  B0C7 F5               push af
237+  B0C8 7B               ld a,e                  ; put e in a
238+  B0C9 FE 00            cp 0
239+  B0CB CA DB B0         jp z,control_pl_moveup1 ; don't move if we can't
240+  B0CE F1               pop af
241+  B0CF D6 01            sub 1                   ; subtract 1
242+  B0D1 D6 01            sub 1                   ; subtract 1
243+  B0D3 4F               ld c,a                  ; load back to c
244+  B0D4 ED 43 35 B3      ld (player),bc          ; load back to player
245+  B0D8 C3 DC B0         jp control_pl_moveup0
246+  B0DB              control_pl_moveup1:
247+  B0DB F1               pop af                  ; restore af if needed
248+  B0DC              control_pl_moveup0:
249+  B0DC 3E 00            ld a,0
250+  B0DE 32 37 B3         ld (player+2),a        ; set direction to up
251+  B0E1 C1               pop bc
252+  B0E2 C9               ret
253+  B0E3              ;
254+  B0E3              ; Moves the player down
255+  B0E3              ;
256+  B0E3              control_pl_movedown:
257+  B0E3 C5               push bc
258+  B0E4 ED 4B 35 B3      ld bc,(player)          ; get the current coords, b horiz, c vert
259+  B0E8 79               ld a,c                  ; load c into the acc
260+  B0E9 FE E0            cp 224
261+  B0EB CA 09 B1         jp z,control_pl_movedown0 ; are we at the edge of the screen
262+  B0EE FE 80            cp 128
263+  B0F0 CC 6E B1         call z, control_scroll_down
264+  B0F3 CD 7E B2         call movement_checkcanmove_down ; check we can move down, e will be 1 if we can
265+  B0F6 F5               push af
266+  B0F7 7B               ld a,e                  ; put e in a
267+  B0F8 FE 00            cp 0
268+  B0FA CA 08 B1         jp z,control_pl_movedown1 ; don't move if we can't
269+  B0FD F1               pop af
270+  B0FE 3C               inc a                   ; add 1
271+  B0FF 3C               inc a                   ; add 1
272+  B100 4F               ld c,a                  ; load back to c
273+  B101 ED 43 35 B3      ld (player),bc          ; load back to player
274+  B105 C3 09 B1         jp control_pl_movedown0
275+  B108              control_pl_movedown1:
276+  B108 F1               pop af                  ; restore af if needed
277+  B109              control_pl_movedown0:
278+  B109 3E 03            ld a,3
279+  B10B 32 37 B3         ld (player+2),a        ; set direction to down
280+  B10E C1               pop bc
281+  B10F C9               ret
282+  B110              ;
283+  B110              ; Moves the player left
284+  B110              ;
285+  B110              control_pl_moveleft:
286+  B110 C5               push bc
287+  B111 ED 4B 35 B3      ld bc,(player)          ; get the current coords, b horiz, c vert
288+  B115 78               ld a,b                  ; load b into the acc
289+  B116 FE 10            cp 16
290+  B118 CA 39 B1         jp z,control_pl_moveleft0 ; are we at the edge of the screen
291+  B11B CD 00 B3         call movement_checkcanmove_left ; check we can move down, e will be 1 if we can
292+  B11E F5               push af
293+  B11F 7B               ld a,e                  ; put e in a
294+  B120 FE 00            cp 0
295+  B122 CA 38 B1         jp z,control_pl_moveleft1 ; don't move if we can't
296+  B125 21 3A B3         ld hl,player+5          ; need to store the amount of pixels still left to move in the player status
297+  B128 3E 03            ld a,3
298+  B12A 77               ld (hl),a
299+  B12B F1               pop af
300+  B12C D6 01            sub 1                    ; subtract 2
301+  B12E D6 01            sub 1
302+  B130 47               ld b,a                  ; load back to c
303+  B131 ED 43 35 B3      ld (player),bc          ; load back to player
304+  B135 C3 39 B1         jp control_pl_moveleft0
305+  B138              control_pl_moveleft1:
306+  B138 F1               pop af
307+  B139              control_pl_moveleft0:
308+  B139 3E 01            ld a,1
309+  B13B 32 37 B3         ld (player+2),a        ; set direction to left
310+  B13E C1               pop bc
311+  B13F C9               ret
312+  B140              ;
313+  B140              ; Moves the player right
314+  B140              ;
315+  B140              control_pl_moveright:
316+  B140 C5               push bc
317+  B141 ED 4B 35 B3      ld bc,(player)          ; get the current coords, b horiz, c vert
318+  B145 78               ld a,b                  ; load b into the acc
319+  B146 FE F0            cp 240
320+  B148 CA 67 B1         jp z,control_pl_moveright0 ; are we at the edge of the screen
321+  B14B CD D8 B2         call movement_checkcanmove_right ; check we can move down, e will be 1 if we can
322+  B14E F5               push af
323+  B14F 7B               ld a,e                  ; put e in a
324+  B150 FE 00            cp 0
325+  B152 CA 66 B1         jp z,control_pl_moveright1 ; don't move if we can't
326+  B155 21 3A B3         ld hl,player+5          ; need to store the amount of pixels still left to move in the player status
327+  B158 3E 03            ld a,3
328+  B15A 77               ld (hl),a
329+  B15B F1               pop af
330+  B15C 3C               inc a                   ; add 2
331+  B15D 3C               inc a
332+  B15E 47               ld b,a                  ; load back to b
333+  B15F ED 43 35 B3      ld (player),bc          ; load back to player
334+  B163 C3 67 B1         jp control_pl_moveright0
335+  B166              control_pl_moveright1:
336+  B166 F1               pop af                  ; restore af if needed
337+  B167              control_pl_moveright0:
338+  B167 3E 02            ld a,2
339+  B169 32 37 B3         ld (player+2),a        ; set direction to right
340+  B16C C1               pop bc
341+  B16D C9               ret
342+  B16E
343+  B16E              ;
344+  B16E              ; Scrolls the screen down
345+  B16E              ;
346+  B16E              control_scroll_down:
347+  B16E F5               push af
348+  B16F 3E 08            ld a,8
349+  B171 32 ED A4         ld (screen_offset),a
350+  B174 F1               pop af
351+  B175 21 9F A3         ld hl,buffer_updateall
352+  B178 36 01            ld (hl),1         ; flag as screen needing update
353+  B17A C9               ret
354+  B17B
355+  B17B              ;
356+  B17B              ; Scrolls the screen up
357+  B17B              ;
358+  B17B              control_scroll_up:
359+  B17B F5               push af
360+  B17C 3E 00            ld a,0
361+  B17E 32 ED A4         ld (screen_offset),a
362+  B181 F1               pop af
363+  B182 21 9F A3         ld hl,buffer_updateall
364+  B185 36 01            ld (hl),1         ; flag as screen needing update
365+  B187 C9               ret
366+  B188
367+  B188
368+  B188
369+  B188
# file closed: game/control.asm
 32   B188                  include "game\movement.asm"
# file opened: game/movement.asm
  1+  B188              ;
  2+  B188              ; Checks the contents of a cell are empty - ie, all pixel rows are zero
  3+  B188              ; Inputs:
  4+  B188              ; hl - memory location of top pixel row
  5+  B188              ; bc - screen coords, b horiz, c vert
  6+  B188              ; Outputs:
  7+  B188              ; e - 0 if not empty, 1 if empty
  8+  B188              ;
  9+  B188              movement_spaceisempty:
 10+  B188 3E 08            ld a,8                          ; 8 rows to check
 11+  B18A              movement_spaceisempty0:
 12+  B18A 08               ex af,af'                       ; store the loop counter
 13+  B18B 7E               ld a,(hl)                       ; get current pixel row
 14+  B18C FE 00            cp 0
 15+  B18E C2 A2 B1         jp nz, movement_spaceisempty1    ; row is not empty, can't move here
 16+  B191 79               ld a,c                          ; load the vertical coord
 17+  B192 3C               inc a                           ; next row down
 18+  B193 11 20 00         ld de,32
 19+  B196 19               add hl,de                       ; otherwise, just go one down for hl, which means add 32, because of course
 20+  B197 4F               ld c,a                          ; copy vert coord back to c
 21+  B198 08               ex af,af'                       ; get loop counter back
 22+  B199 3D               dec a                           ; decrease loop counter
 23+  B19A C2 8A B1         jp nz, movement_spaceisempty0
 24+  B19D 16 00            ld d,0
 25+  B19F 1E 01            ld e,1                          ; got to end, so space is empty
 26+  B1A1 C9               ret
 27+  B1A2              movement_spaceisempty1:
 28+  B1A2 16 00            ld d,0
 29+  B1A4 1E 00            ld e,0                          ; returning false, ie space not empty
 30+  B1A6 C9               ret
 31+  B1A7
 32+  B1A7              ;
 33+  B1A7              ; Checks the line of a cell below is empty - ie, first pixel rows is zero
 34+  B1A7              ; Inputs:
 35+  B1A7              ; hl - memory location of top pixel row
 36+  B1A7              ; bc - screen coords, b horiz, c vert
 37+  B1A7              ; Outputs:
 38+  B1A7              ; e - 0 if not empty, 1 if empty
 39+  B1A7              ;
 40+  B1A7              movement_linebelowisempty:
 41+  B1A7 7E               ld a,(hl)                       ; get current pixel row
 42+  B1A8 FE 00            cp 0
 43+  B1AA C2 B2 B1         jp nz, movement_linebelowisempty1    ; row is not empty, can't move here
 44+  B1AD 16 00            ld d,0
 45+  B1AF 1E 01            ld e,1                          ; got to end, so space is empty
 46+  B1B1 C9               ret
 47+  B1B2              movement_linebelowisempty1:
 48+  B1B2 16 00            ld d,0
 49+  B1B4 1E 00            ld e,0                          ; returning false, ie space not empty
 50+  B1B6 C9               ret
 51+  B1B7
 52+  B1B7              ;
 53+  B1B7              ; Checks the line of a cell above is empty - ie, last pixel rows are zero
 54+  B1B7              ; Inputs:
 55+  B1B7              ; hl - memory location of top pixel row
 56+  B1B7              ; bc - screen coords, b horiz, c vert
 57+  B1B7              ; Outputs:
 58+  B1B7              ; e - 0 if not empty, 1 if empty
 59+  B1B7              ;
 60+  B1B7              movement_lineaboveisempty:
 61+  B1B7 7E               ld a,(hl)                       ; get current pixel row
 62+  B1B8 FE 00            cp 0
 63+  B1BA C2 C2 B1         jp nz, movement_lineaboveisempty1    ; row is not empty, can't move here
 64+  B1BD 16 00            ld d,0
 65+  B1BF 1E 01            ld e,1                          ; got to end, so space is empty
 66+  B1C1 C9               ret
 67+  B1C2              movement_lineaboveisempty1:
 68+  B1C2 16 00            ld d,0
 69+  B1C4 1E 00            ld e,0                          ; returning false, ie space not empty
 70+  B1C6 C9               ret
 71+  B1C7
 72+  B1C7              ;
 73+  B1C7              ; Checks the contents of a cell are diggable - ie, all pixel rows are dirt or empty
 74+  B1C7              ; Inputs:
 75+  B1C7              ; hl - memory location of top pixel row
 76+  B1C7              ; bc - screen coords, b horiz, c vert
 77+  B1C7              ; Outputs:
 78+  B1C7              ; none - puts player into digging mode
 79+  B1C7              ;
 80+  B1C7              movement_spaceisdiggable:
 81+  B1C7 3E 08            ld a,8                          ; 8 rows to check
 82+  B1C9              movement_spaceisdiggable0:
 83+  B1C9 08               ex af,af'                       ; store the loop counter
 84+  B1CA 7E               ld a,(hl)                       ; get current pixel row
 85+  B1CB FE 00            cp 0
 86+  B1CD CA DD B1         jp z, movement_spaceisdiggable2  ; row is empty, can dig here
 87+  B1D0 FE 55            cp 85
 88+  B1D2 CA DD B1         jp z, movement_spaceisdiggable2  ; row is dirt, can dig here
 89+  B1D5 FE AA            cp 170
 90+  B1D7 CA DD B1         jp z, movement_spaceisdiggable2  ; row is dirt, can dig here
 91+  B1DA C3 F5 B1         jp movement_spaceisdiggable1     ; otherwise, stop checking
 92+  B1DD              movement_spaceisdiggable2:
 93+  B1DD 79               ld a,c                          ; load the vertical coord
 94+  B1DE 3C               inc a                           ; next row down
 95+  B1DF 11 20 00         ld de,32
 96+  B1E2 19               add hl,de                       ; otherwise, just go one down for hl, which means add 32, because of course
 97+  B1E3 4F               ld c,a                          ; copy vert coord back to c
 98+  B1E4 08               ex af,af'                       ; get loop counter back
 99+  B1E5 3D               dec a                           ; decrease loop counter
100+  B1E6 C2 C9 B1         jp nz, movement_spaceisdiggable0
101+  B1E9 21 3B B3         ld hl,player+6
102+  B1EC 36 01            ld (hl),1                       ; set the player into digging mode
103+  B1EE 23               inc hl
104+  B1EF 36 05            ld (hl),5                      ; set the number of frame to dig for
105+  B1F1 23               inc hl
106+  B1F2 36 08            ld (hl),8                       ; set the number of pixels to dig
107+  B1F4 C9               ret
108+  B1F5              movement_spaceisdiggable1:
109+  B1F5 21 3B B3         ld hl,player+6
110+  B1F8 36 00            ld (hl),0                       ; set the player out of digging mode
111+  B1FA C9               ret
112+  B1FB
113+  B1FB              ;
114+  B1FB              ; Checks the contents of a cell below are diggable - ie, at least one pixel row has dirt. If the first one isn't dirt, stop
115+  B1FB              ; Inputs:
116+  B1FB              ; hl - memory location of top pixel row
117+  B1FB              ; bc - screen coords, b horiz, c vert
118+  B1FB              ; Outputs:
119+  B1FB              ; none - puts player into digging mode
120+  B1FB              ;
121+  B1FB              movement_spacebelowisdiggable:
122+  B1FB 7E               ld a,(hl)                       ; get first pixel row
123+  B1FC FE 55            cp 85
124+  B1FE CA 09 B2         jp z, movement_spacebelowisdiggable3  ; row is dirt, can dig here
125+  B201 FE AA            cp 170
126+  B203 CA 09 B2         jp z, movement_spacebelowisdiggable3  ; row is dirt, can dig here
127+  B206 C3 F5 B1         jp movement_spaceisdiggable1    ; the first row is not dirt, so don't bother checking the rest, can't dig
128+  B209              movement_spacebelowisdiggable3:
129+  B209 3E 08            ld a,8                          ; rows to check
130+  B20B 1E 00            ld e,0                          ; count of rows to dig
131+  B20D              movement_spacebelowisdiggable0:
132+  B20D 08               ex af,af'                       ; store the loop counter
133+  B20E 7E               ld a,(hl)                       ; get current pixel row
134+  B20F FE 55            cp 85
135+  B211 CA 1C B2         jp z, movement_spacebelowisdiggable4  ; row is dirt, can dig here
136+  B214 FE AA            cp 170
137+  B216 CA 1C B2         jp z, movement_spacebelowisdiggable4  ; row is dirt, can dig here
138+  B219 C3 2B B2         jp movement_spacebelowisdiggable5     ; don't count this row and stop counting
139+  B21C              movement_spacebelowisdiggable4:
140+  B21C 1C               inc e                           ; inc count of rows to dig
141+  B21D              movement_spacebelowisdiggable2:
142+  B21D 79               ld a,c                          ; load the vertical coord
143+  B21E 3C               inc a                           ; next row down
144+  B21F D5               push de                         ; need e for later
145+  B220 11 20 00         ld de,32
146+  B223 19               add hl,de                       ; otherwise, just go one down for hl, which means add 32, because of course
147+  B224 4F               ld c,a                          ; copy vert coord back to c
148+  B225 D1               pop de                          ; get e back
149+  B226 08               ex af,af'                       ; get loop counter back
150+  B227 3D               dec a                           ; incease loop counter
151+  B228 C2 0D B2         jp nz, movement_spacebelowisdiggable0
152+  B22B              movement_spacebelowisdiggable5:
153+  B22B 21 3B B3         ld hl,player+6
154+  B22E 36 01            ld (hl),1                       ; set the player into digging mode
155+  B230 23               inc hl
156+  B231 36 03            ld (hl),3                      ; set the number of frame to dig for
157+  B233 23               inc hl
158+  B234 73               ld (hl),e                       ; set the number of pixels to dig
159+  B235 C9               ret
160+  B236              movement_spacebelowisdiggable1:
161+  B236 21 3B B3         ld hl,player+6
162+  B239 36 00            ld (hl),0                       ; set the player out of digging mode
163+  B23B C9               ret
164+  B23C
165+  B23C              ;
166+  B23C              ; Checks the contents of a cell above are diggable - ie, at least one pixel row has dirt. If the first one isn't dirt, stop
167+  B23C              ; Inputs:
168+  B23C              ; hl - memory location of top pixel row
169+  B23C              ; bc - screen coords, b horiz, c vert
170+  B23C              ; Outputs:
171+  B23C              ; none - puts player into digging mode
172+  B23C              ;
173+  B23C              movement_spaceaboveisdiggable:
174+  B23C 7E               ld a,(hl)                       ; get first pixel row
175+  B23D FE 55            cp 85
176+  B23F CA 4A B2         jp z, movement_spaceaboveisdiggable3  ; row is dirt, can dig here
177+  B242 FE AA            cp 170
178+  B244 CA 4A B2         jp z, movement_spaceaboveisdiggable3  ; row is dirt, can dig here
179+  B247 C3 F5 B1         jp movement_spaceisdiggable1    ; the first row is not dirt, so don't bother checking the rest, can't dig
180+  B24A              movement_spaceaboveisdiggable3:
181+  B24A 3E 08            ld a,8                          ; rows to check
182+  B24C 1E 00            ld e,0                          ; count of rows to dig
183+  B24E              movement_spaceaboveisdiggable0:
184+  B24E 08               ex af,af'                       ; store the loop counter
185+  B24F 7E               ld a,(hl)                       ; get current pixel row
186+  B250 FE 55            cp 85
187+  B252 CA 5D B2         jp z, movement_spaceaboveisdiggable4  ; row is dirt, can dig here
188+  B255 FE AA            cp 170
189+  B257 CA 5D B2         jp z, movement_spaceaboveisdiggable4  ; row is dirt, can dig here
190+  B25A C3 6D B2         jp movement_spaceaboveisdiggable5     ; don't count this row and stop counting
191+  B25D              movement_spaceaboveisdiggable4:
192+  B25D 1C               inc e                           ; inc count of rows to dig
193+  B25E              movement_spaceaboveisdiggable2:
194+  B25E 79               ld a,c                          ; load the vertical coord
195+  B25F 3D               dec a                           ; next row up
196+  B260 D5               push de                         ; need e for later
197+  B261 11 20 00         ld de,32
198+  B264 ED 52            sbc hl,de                       ; otherwise, just go one up for hl, which means sub 32, because of course
199+  B266 4F               ld c,a                          ; copy vert coord back to c
200+  B267 D1               pop de                          ; get e back
201+  B268 08               ex af,af'                       ; get loop counter back
202+  B269 3D               dec a                           ; incease loop counter
203+  B26A C2 4E B2         jp nz, movement_spaceaboveisdiggable0
204+  B26D              movement_spaceaboveisdiggable5:
205+  B26D 21 3B B3         ld hl,player+6
206+  B270 36 01            ld (hl),1                       ; set the player into digging mode
207+  B272 23               inc hl
208+  B273 36 05            ld (hl),5                       ; set the number of frame to dig for
209+  B275 23               inc hl
210+  B276 73               ld (hl),e                       ; set the number of pixels to dig
211+  B277 C9               ret
212+  B278              movement_spaceaboveisdiggable1:
213+  B278 21 3B B3         ld hl,player+6
214+  B27B 36 00            ld (hl),0                       ; set the player out of digging mode
215+  B27D C9               ret
216+  B27E
217+  B27E              ;
218+  B27E              ; Checks if the player can move down
219+  B27E              ; Inputs:
220+  B27E              ; bc - player coords, b horiz, c vert
221+  B27E              ; Outputs:
222+  B27E              ; de - 1 can move
223+  B27E              movement_checkcanmove_down:
224+  B27E F5               push af
225+  B27F C5               push bc
226+  B280 CD AF A6         call sprites_scadd              ; get the memory location of cell into de
227+  B283 62 6B            ld hl,de                        ; look at cell directly underneath (add 256)
228+  B285 24               inc h                       ; memory location of cell beneath now in hl
229+  B286 CD A7 B1         call movement_linebelowisempty       ; check space is empty
230+  B289 7B               ld a,e                          ; check space empty flag
231+  B28A FE 00            cp 0
232+  B28C CA 95 B2         jp z, movement_checkcanmove_down1 ; can't move
233+  B28F CD 7B B3         call player_justmoved
234+  B292 C1               pop bc
235+  B293 F1               pop af
236+  B294 C9               ret
237+  B295              movement_checkcanmove_down1:
238+  B295 C1               pop bc
239+  B296 CD AF A6         call sprites_scadd              ; get the memory location of cell into de
240+  B299 62 6B            ld hl,de                        ; look at cell directly underneath (add 256)
241+  B29B 24               inc h
242+  B29C C5               push bc
243+  B29D CD FB B1         call movement_spacebelowisdiggable    ; can't move here, but can we dig
244+  B2A0 11 00 00         ld de,0
245+  B2A3 C1               pop bc
246+  B2A4 F1               pop af
247+  B2A5 C9               ret
248+  B2A6
249+  B2A6              ;
250+  B2A6              ; Checks if the player can move up
251+  B2A6              ; Inputs:
252+  B2A6              ; bc - player coords, b horiz, c vert
253+  B2A6              ; Outputs:
254+  B2A6              ; de - 1 can move
255+  B2A6              movement_checkcanmove_up:
256+  B2A6 F5               push af
257+  B2A7 C5               push bc
258+  B2A8 CD AF A6         call sprites_scadd              ; get the memory location of cell into de
259+  B2AB 62 6B            ld hl,de                        ; look at cell directly above (subtract 32)
260+  B2AD 11 20 00         ld de,32
261+  B2B0 ED 52            sbc hl,de                       ; memory location of line above now in hl
262+  B2B2 CD B7 B1         call movement_lineaboveisempty       ; check space is empty
263+  B2B5 7B               ld a,e                          ; check space empty flag
264+  B2B6 FE 00            cp 0
265+  B2B8 CA C3 B2         jp z, movement_checkcanmove_up1 ; can't move
266+  B2BB 1E 01            ld e,1
267+  B2BD CD 7B B3         call player_justmoved
268+  B2C0 C1               pop bc
269+  B2C1 F1               pop af
270+  B2C2 C9               ret
271+  B2C3              movement_checkcanmove_up1:
272+  B2C3 C1               pop bc
273+  B2C4 CD AF A6         call sprites_scadd              ; get the memory location of cell into de
274+  B2C7 62 6B            ld hl,de                        ; look at cell directly above (subtract 32)
275+  B2C9 11 20 00         ld de,32
276+  B2CC ED 52            sbc hl,de                       ; memory location of line above now in hl
277+  B2CE C5               push bc
278+  B2CF CD 3C B2         call movement_spaceaboveisdiggable    ; can't move here, but can we dig
279+  B2D2 11 00 00         ld de,0
280+  B2D5 C1               pop bc
281+  B2D6 F1               pop af
282+  B2D7 C9               ret
283+  B2D8
284+  B2D8              ;
285+  B2D8              ; Checks if the player can move right
286+  B2D8              ; Inputs:
287+  B2D8              ; bc - player coords, b horiz, c vert
288+  B2D8              ; Outputs:
289+  B2D8              ; de - 1 can move
290+  B2D8              movement_checkcanmove_right:
291+  B2D8 F5               push af
292+  B2D9 C5               push bc
293+  B2DA CD AF A6         call sprites_scadd              ; get the memory location of cell into de
294+  B2DD 62 6B            ld hl,de                        ; look at cell directly to the right (add 1)
295+  B2DF 23               inc hl                          ; memory location of cell to the right now in hl
296+  B2E0 CD 88 B1         call movement_spaceisempty       ; check space is empty
297+  B2E3 7B               ld a,e                          ; check space empty flag
298+  B2E4 FE 00            cp 0
299+  B2E6 CA EF B2         jp z, movement_checkcanmove_right1 ; can't move
300+  B2E9 CD 7B B3         call player_justmoved
301+  B2EC C1               pop bc
302+  B2ED F1               pop af
303+  B2EE C9               ret
304+  B2EF              movement_checkcanmove_right1:
305+  B2EF C1               pop bc
306+  B2F0 CD AF A6         call sprites_scadd              ; get the memory location of cell into de
307+  B2F3 62 6B            ld hl,de
308+  B2F5 23               inc hl                          ; memory location of cell to the right now in hl
309+  B2F6 C5               push bc
310+  B2F7 CD C7 B1         call movement_spaceisdiggable    ; can't move here, but can we dig
311+  B2FA 11 00 00         ld de,0
312+  B2FD C1               pop bc
313+  B2FE F1               pop af
314+  B2FF C9               ret
315+  B300
316+  B300              ;
317+  B300              ; Checks if the player can move left
318+  B300              ; Inputs:
319+  B300              ; bc - player coords, b horiz, c vert
320+  B300              ; Outputs:
321+  B300              ; de - 1 can move
322+  B300              movement_checkcanmove_left:
323+  B300 F5               push af
324+  B301 C5               push bc
325+  B302 CD AF A6         call sprites_scadd              ; get the memory location of cell into de
326+  B305 62 6B            ld hl,de                        ; look at cell directly to the right (add 1)
327+  B307 2B               dec hl                          ; memory location of cell to the right now in hl
328+  B308 CD 88 B1         call movement_spaceisempty       ; check space is empty
329+  B30B 7B               ld a,e                          ; check space empty flag
330+  B30C FE 00            cp 0
331+  B30E CA 17 B3         jp z, movement_checkcanmove_left1 ; can't move
332+  B311 CD 7B B3         call player_justmoved
333+  B314 C1               pop bc
334+  B315 F1               pop af
335+  B316 C9               ret
336+  B317              movement_checkcanmove_left1:
337+  B317 C1               pop bc
338+  B318 CD AF A6         call sprites_scadd              ; get the memory location of cell into de
339+  B31B 62 6B            ld hl,de
340+  B31D 2B               dec hl                          ; memory location of cell to the right now in hl
341+  B31E C5               push bc
342+  B31F CD C7 B1         call movement_spaceisdiggable    ; can't move here, but can we dig
343+  B322 11 00 00         ld de,0
344+  B325 C1               pop bc
345+  B326 F1               pop af
346+  B327 C9               ret
# file closed: game/movement.asm
 33   B328                  include "game\game.asm"
# file opened: game/game.asm
  1+  B328              ;
  2+  B328              ; The current frame count, incremented each frame
  3+  B328              ;
  4+  B328              game_framenumber:
  5+  B328 00               defb    0
  6+  B329
  7+  B329              ;
  8+  B329              ; Increment frame number by 1
  9+  B329              ;
 10+  B329              game_incrementframe:
 11+  B329 3A 28 B3         ld a,(game_framenumber)
 12+  B32C 3C               inc a
 13+  B32D 32 28 B3         ld (game_framenumber),a
 14+  B330 C9               ret
 15+  B331
 16+  B331              ;
 17+  B331              ; Returns current frame
 18+  B331              ; Outputs:
 19+  B331              ; a - current frame
 20+  B331              ;
 21+  B331              game_getcurrentframe:
 22+  B331 3A 28 B3         ld a,(game_framenumber)
 23+  B334 C9               ret
# file closed: game/game.asm
 34   B335                  include "game\player.asm"
# file opened: game/player.asm
  1+  B335              ;
  2+  B335              ;   Data for current player
  3+  B335              ;   horiz,vert,dir (0 up, 1 left, 2 right, 3 down), frame, frame transition count,move remaining, is digging (0 no), digging count, pixels to dig
  4+  B335              player:
  5+  B335 00 00 02 00      defb    0,0,2,0,1,0,0,0,0
  5+  B339 01 00 00 00
  5+  B33D 00
  6+  B33E              ;
  7+  B33E              ; Initializes a player
  8+  B33E              ;
  9+  B33E              player_init:
 10+  B33E ED 4B 10 80      ld bc,(start_coord)
 11+  B342 ED 43 35 B3      ld (player),bc
 12+  B346 C9               ret
 13+  B347
 14+  B347              ;
 15+  B347              ; Draws the player at the current position or deletes them
 16+  B347              ;
 17+  B347              player_drawplayer:
 18+  B347 3A 37 B3         ld a,(player+2)             ; get the current direction
 19+  B34A FE 03            cp 3
 20+  B34C C2 51 B3         jp nz,player_drawplayer0
 21+  B34F 3E 00            ld a,0                      ; if 3, then down, so set the direction to 0 since the sprite is the same as up
 22+  B351              player_drawplayer0:
 23+  B351 5F               ld e,a                      ; store in e
 24+  B352 3A 3B B3         ld a,(player+6)             ; get the dig flag
 25+  B355 FE 01            cp 1
 26+  B357 CA 61 B3         jp z,player_drawplayer1    ; get dig frame
 27+  B35A 3A 38 B3         ld a,(player+3)             ; this is normal movement so get the current frame
 28+  B35D 83               add a,e
 29+  B35E C3 66 B3         jp player_drawplayer2
 30+  B361              player_drawplayer1
 31+  B361 3A 37 B3         ld a,(player+2)             ; get the current direction again, because want all four
 32+  B364 C6 06            add a,6                     ; add direction to 6 to get frame
 33+  B366              player_drawplayer2
 34+  B366 07               rlca
 35+  B367 07               rlca
 36+  B368 07               rlca                        ; multiply by eight
 37+  B369 6F               ld l,a
 38+  B36A 26 00            ld h,0
 39+  B36C 11 62 AE         ld de,player_sprite
 40+  B36F 19               add hl,de                   ; load hl with the location of the player sprite data
 41+  B370 ED 4B 35 B3      ld bc,(player)              ; load bc with the start coords
 42+  B374 CD 6C A6         call sprites_drawsprite     ; call the routine to draw the sprite
 43+  B377 CD A7 B3         call player_storeupdatedlines ; log updated rows
 44+  B37A C9               ret
 45+  B37B
 46+  B37B
 47+  B37B              ;
 48+  B37B              ; Runs after the player just moved. Changes animation frame if required
 49+  B37B              ;
 50+  B37B              player_justmoved:
 51+  B37B D9               exx
 52+  B37C 3A 39 B3         ld a,(player+4)             ; get the transition count
 53+  B37F FE 00            cp 0
 54+  B381 CA 87 B3         jp z, player_justmoved2     ; if zero reset and change the frame
 55+  B384 C3 A1 B3         jp player_justmoved1       ; otherwise decrease and continue
 56+  B387              player_justmoved2:
 57+  B387                  ; reset and change frame in here
 58+  B387 3E 01            ld a,1
 59+  B389 32 39 B3         ld (player+4),a            ; reset back to whatever
 60+  B38C 3A 38 B3         ld a,(player+3)             ; load the frame
 61+  B38F FE 03            cp 3                       ; flip between 3 and 0
 62+  B391 C2 99 B3         jp nz, player_justmoved4
 63+  B394 3E 00            ld a,0
 64+  B396 C3 9B B3         jp player_justmoved5
 65+  B399              player_justmoved4:
 66+  B399 3E 03            ld a,3
 67+  B39B              player_justmoved5:
 68+  B39B 32 38 B3         ld (player+3),a           ; save back
 69+  B39E C3 A5 B3         jp player_justmoved3
 70+  B3A1              player_justmoved1:
 71+  B3A1                  ; decrease count
 72+  B3A1 3D               dec a
 73+  B3A2 32 39 B3         ld (player+4),a
 74+  B3A5              player_justmoved3:
 75+  B3A5 D9               exx;
 76+  B3A6 C9               ret
 77+  B3A7
 78+  B3A7              ;
 79+  B3A7              ; Stores the updated rows associated with the player
 80+  B3A7              ;
 81+  B3A7              player_storeupdatedlines:
 82+  B3A7 ED 4B 35 B3      ld bc,(player)          ; get the screen coords into bc
 83+  B3AB 79               ld a,c                  ; get the player block coords of current block
 84+  B3AC E6 F8            and 248                 ; find closest multiple of eight
 85+  B3AE 0F               rrca
 86+  B3AF 0F               rrca
 87+  B3B0 0F               rrca                    ; divide by 8
 88+  B3B1 ED 5B ED A4      ld de,(screen_offset)          ; load the screen offset, this is in rows
 89+  B3B5 93               sub e
 90+  B3B6 F5               push af
 91+  B3B7 CD A0 A3         call buffer_marklineforupdate  ; store current row in updated lines
 92+  B3BA F1               pop af
 93+  B3BB 3D               dec a
 94+  B3BC F5               push af
 95+  B3BD CD A0 A3         call buffer_marklineforupdate  ; store line above
 96+  B3C0 F1               pop af
 97+  B3C1 3C               inc a
 98+  B3C2 3C               inc a
 99+  B3C3 CD A0 A3         call buffer_marklineforupdate  ; store line beneath
100+  B3C6 C9               ret
# file closed: game/player.asm
 35   B3C7                  include "game\ship.asm"
# file opened: game/ship.asm
  1+  B3C7              ;
  2+  B3C7              ; Ship initial position: vert,horiz
  3+  B3C7              ;
  4+  B3C7              ship_initpos:
  5+  B3C7 00 24            defb 0,36
  6+  B3C9              ship_initpos2:
  7+  B3C9 00 00            defb 0,0
  8+  B3CB              ship_frame:
  9+  B3CB 00               defb 0
 10+  B3CC              ;
 11+  B3CC              ; The current memory location
 12+  B3CC              ;
 13+  B3CC              ship_current_sprite:
 14+  B3CC 00 00            defb 0,0
 15+  B3CE
 16+  B3CE              ship_current_coords:
 17+  B3CE 00 00            defb 0,0
 18+  B3D0
 19+  B3D0              ;
 20+  B3D0              ;   Draw and land the ship - first move the ship down, then across, drawing the player in the middle
 21+  B3D0              ;
 22+  B3D0              ship_land:
 23+  B3D0 ED 4B C7 B3      ld bc,(ship_initpos)
 24+  B3D4 ED 43 C9 B3      ld (ship_initpos2),bc        ; save the initial position for later use
 25+  B3D8 1E 00            ld e,0                      ; store a flag to track first time round
 26+  B3DA 06 09            ld b,9                      ; move down 8 pixels
 27+  B3DC              ship_land0:
 28+  B3DC C5               push bc
 29+  B3DD 7B               ld a,e
 30+  B3DE D5               push de                     ; store de for next time round
 31+  B3DF FE 01            cp 1                        ; check first time flag
 32+  B3E1 C2 F6 B3         jp nz,ship_land1             ; don't draw over previous one if first time
 33+  B3E4 CD 5E B4         call ship_draw_full         ; delete old one
 34+  B3E7 CD 33 B4         call ship_change_frame      ; increment the frame
 35+  B3EA ED 4B C9 B3      ld bc,(ship_initpos2)       ; get the current coords
 36+  B3EE 81 C6 01         add c,1                     ; move down one pixels
 37+  B3F1 4F               ld c,a
 38+  B3F2 ED 43 C9 B3      ld (ship_initpos2),bc
 39+  B3F6              ship_land1:
 40+  B3F6 CD 5E B4         call ship_draw_full         ; draw the ship
 41+  B3F9 CD 48 B4         call ship_draw_screen
 42+  B3FC D1               pop de
 43+  B3FD 1E 01            ld e,1
 44+  B3FF C1               pop bc
 45+  B400 10 DA            djnz ship_land0             ; repeat for downward movement
 46+  B402                  ; done moving down
 47+  B402                  ; now move across
 48+  B402 CD 47 B3         call player_drawplayer      ; draw player
 49+  B405 CD 5E B4         call ship_draw_full         ; delete old one
 50+  B408 1E 00            ld e,0                      ; store a flag to track first time round
 51+  B40A 06 14            ld b,20                      ; move back 20 pixels pixels
 52+  B40C              ship_land3:
 53+  B40C C5               push bc
 54+  B40D 7B               ld a,e
 55+  B40E D5               push de                     ; store de for next time round
 56+  B40F FE 01            cp 1                        ; check first time flag
 57+  B411 C2 26 B4         jp nz,ship_land2             ; don't draw over previous one if first time
 58+  B414 CD 5E B4         call ship_draw_full         ; delete old one
 59+  B417 CD 33 B4         call ship_change_frame      ; increment the frame
 60+  B41A ED 4B C9 B3      ld bc,(ship_initpos2)       ; get the current coords
 61+  B41E 78               ld a,b
 62+  B41F D6 01            sub 1                       ; move back one pixels
 63+  B421 47               ld b,a
 64+  B422 ED 43 C9 B3      ld (ship_initpos2),bc
 65+  B426              ship_land2:
 66+  B426 CD 5E B4         call ship_draw_full         ; draw the ship
 67+  B429 CD 48 B4         call ship_draw_screen       ; draw the frame to screen by clearing the buffer
 68+  B42C D1               pop de
 69+  B42D 1E 01            ld e,1                      ; set e to 1 to indicate >1 time
 70+  B42F C1               pop bc
 71+  B430 10 DA            djnz ship_land3             ; repeat for vertical movement
 72+  B432 C9               ret
 73+  B433
 74+  B433              ;
 75+  B433              ; Swap the animation frame between 0 and 32. This will be added to the memory location later
 76+  B433              ;
 77+  B433              ship_change_frame:
 78+  B433 F5               push af
 79+  B434 3A CB B3         ld a,(ship_frame)
 80+  B437 FE 00            cp 0
 81+  B439 CA 41 B4         jp z,ship_change_frame0
 82+  B43C 3E 00            ld a,0                      ; flip to 0
 83+  B43E C3 43 B4         jp ship_change_frame1
 84+  B441              ship_change_frame0:
 85+  B441 3E 20            ld a,32                      ; flip to 32
 86+  B443              ship_change_frame1:
 87+  B443 32 CB B3         ld (ship_frame),a            ; save the frame
 88+  B446 F1               pop af
 89+  B447 C9               ret
 90+  B448
 91+  B448              ship_draw_screen:
 92+  B448 3E 00            ld a,0
 93+  B44A CD A0 A3         call buffer_marklineforupdate
 94+  B44D 3E 01            ld a,1
 95+  B44F CD A0 A3         call buffer_marklineforupdate
 96+  B452 3E 02            ld a,2
 97+  B454 CD A0 A3         call buffer_marklineforupdate   ; mark the first three rows for update
 98+  B457 76               halt
 99+  B458 F3               di
100+  B459 CD 34 A4         call buffer_buffertoscreen  ; copy buffer to screen
101+  B45C FB               ei                          ; enable interupts
102+  B45D C9               ret
103+  B45E
104+  B45E              ship_draw_full:
105+  B45E 21 B2 AE         ld hl,ship_sprite
106+  B461 ED 4B C9 B3      ld bc,(ship_initpos2)         ; load bc with the start coords
107+  B465 22 CC B3         ld (ship_current_sprite),hl  ; put into memory
108+  B468 ED 43 CE B3      ld (ship_current_coords),bc  ; put into memory
109+  B46C CD 8B B4         call ship_draw
110+  B46F 08               ex af,af'
111+  B470 3A CB B3         ld a,(ship_frame)            ; get the animation frame
112+  B473 16 00            ld d,0
113+  B475 5F               ld e,a
114+  B476 19               add hl,de
115+  B477 22 CC B3         ld (ship_current_sprite),hl  ; put into memory
116+  B47A 08               ex af,af'
117+  B47B ED 4B C9 B3      ld bc,(ship_initpos2)         ; load bc with the start coords
118+  B47F 81 C6 08         add c,8                      ; move one line down
119+  B482 4F               ld c,a
120+  B483 ED 43 CE B3      ld (ship_current_coords),bc  ; put into memory
121+  B487 CD 8B B4         call ship_draw
122+  B48A C9               ret
123+  B48B
124+  B48B              ;
125+  B48B              ; Draw the ship
126+  B48B              ; Inputs:
127+  B48B              ; None, all in memory
128+  B48B              ;
129+  B48B              ship_draw:
130+  B48B 3E 04            ld a,4                              ; 4 pieces per half
131+  B48D              ship_draw0:
132+  B48D F5               push af
133+  B48E 2A CC B3         ld hl,(ship_current_sprite)
134+  B491 ED 4B CE B3      ld bc,(ship_current_coords)         ; load bc with the start coords
135+  B495 CD 6C A6         call sprites_drawsprite
136+  B498 2A CC B3         ld hl,(ship_current_sprite)
137+  B49B ED 4B CE B3      ld bc,(ship_current_coords)         ; load bc with the start coords
138+  B49F 11 08 00         ld de,8
139+  B4A2 19               add hl,de
140+  B4A3 80 C6 08         add b,8
141+  B4A6 47               ld b,a
142+  B4A7 22 CC B3         ld (ship_current_sprite),hl         ; put into memory
143+  B4AA ED 43 CE B3      ld (ship_current_coords),bc         ; put into memory
144+  B4AE F1               pop af
145+  B4AF 3D               dec a
146+  B4B0 FE 00            cp 0
147+  B4B2 C2 8D B4         jp nz,ship_draw0
148+  B4B5
149+  B4B5 C9               ret
150+  B4B6
# file closed: game/ship.asm
 36   B4B6                  include "game\tank.asm"
# file opened: game/tank.asm
  1+  B4B6              ;
  2+  B4B6              ; tank initial position: vert,horiz
  3+  B4B6              ;
  4+  B4B6              tank_initpos:
  5+  B4B6 10 D0            defb 16,208
  6+  B4B8              tank_initpos2:
  7+  B4B8 00 00            defb 0,0
  8+  B4BA              tank_frame:
  9+  B4BA 00               defb 0
 10+  B4BB              tank_anim:
 11+  B4BB 11               defb 17
 12+  B4BC              ;
 13+  B4BC              ; The current memory location
 14+  B4BC              ;
 15+  B4BC              tank_current_sprite:
 16+  B4BC 00 00            defb 0,0
 17+  B4BE
 18+  B4BE              tank_current_coords:
 19+  B4BE 00 00            defb 0,0
 20+  B4C0
 21+  B4C0              ;
 22+  B4C0              ; Initialise the tank
 23+  B4C0              ;
 24+  B4C0              tank_init:
 25+  B4C0 ED 4B B6 B4      ld bc,(tank_initpos)
 26+  B4C4 ED 43 B8 B4      ld (tank_initpos2),bc       ; save the initial position for later use
 27+  B4C8 C9               ret
 28+  B4C9
 29+  B4C9              ;
 30+  B4C9              ;   Draw and move the tank
 31+  B4C9              ;   Start processing at frame 200
 32+  B4C9              ;   Don't move if anim is zero
 33+  B4C9              ;   Decrement frame if moved
 34+  B4C9              ;
 35+  B4C9              tank_process:
 36+  B4C9 3A BB B4         ld a,(tank_anim)
 37+  B4CC FE 00            cp 0
 38+  B4CE C8               ret z                       ; return if we've already moved
 39+  B4CF CD 31 B3         call game_getcurrentframe   ; get the current frame number into a
 40+  B4D2 FE 4B            cp 75
 41+  B4D4 D8               ret c                       ; return if the frame number is below 100
 42+  B4D5 CD E0 B4         call tank_move              ; move tank if not
 43+  B4D8 3A BB B4         ld a,(tank_anim)
 44+  B4DB 3D               dec a
 45+  B4DC 32 BB B4         ld (tank_anim),a            ; decrease the anim count
 46+  B4DF C9               ret
 47+  B4E0
 48+  B4E0              tank_move:
 49+  B4E0 ED 4B B8 B4      ld bc,(tank_initpos2)
 50+  B4E4 C5               push bc
 51+  B4E5 3A BB B4         ld a,(tank_anim)
 52+  B4E8 FE 11            cp 17                       ; check first time flag
 53+  B4EA CA FC B4         jp z,tank_move1             ; don't draw over previous one if first time
 54+  B4ED CD 01 B5         call tank_draw_full         ; delete old one
 55+  B4F0 ED 4B B8 B4      ld bc,(tank_initpos2)       ; get the current coords
 56+  B4F4 78               ld a,b
 57+  B4F5 D6 01            sub 1                       ; move back one pixels
 58+  B4F7 47               ld b,a
 59+  B4F8 ED 43 B8 B4      ld (tank_initpos2),bc
 60+  B4FC              tank_move1:
 61+  B4FC CD 01 B5         call tank_draw_full         ; draw the tank
 62+  B4FF C1               pop bc
 63+  B500 C9               ret
 64+  B501
 65+  B501              tank_draw_full:
 66+  B501 21 12 AF         ld hl,tank_sprite
 67+  B504 ED 4B B8 B4      ld bc,(tank_initpos2)         ; load bc with the start coords
 68+  B508 22 BC B4         ld (tank_current_sprite),hl  ; put into memory
 69+  B50B ED 43 BE B4      ld (tank_current_coords),bc  ; put into memory
 70+  B50F CD 38 B5         call tank_draw
 71+  B512 08               ex af,af'
 72+  B513 3A BA B4         ld a,(tank_frame)            ; get the animation frame
 73+  B516 16 00            ld d,0
 74+  B518 5F               ld e,a
 75+  B519 19               add hl,de
 76+  B51A 22 BC B4         ld (tank_current_sprite),hl  ; put into memory
 77+  B51D 08               ex af,af'
 78+  B51E ED 4B B8 B4      ld bc,(tank_initpos2)         ; load bc with the start coords
 79+  B522 81 C6 08         add c,8                      ; move one line down
 80+  B525 4F               ld c,a
 81+  B526 ED 43 BE B4      ld (tank_current_coords),bc  ; put into memory
 82+  B52A CD 38 B5         call tank_draw
 83+  B52D 3E 02            ld a,2
 84+  B52F CD A0 A3         call buffer_marklineforupdate
 85+  B532 3E 03            ld a,3
 86+  B534 CD A0 A3         call buffer_marklineforupdate   ; mark the first two rows for update
 87+  B537 C9               ret
 88+  B538
 89+  B538              ;
 90+  B538              ; Draw the tank
 91+  B538              ; Inputs:
 92+  B538              ; None, all in memory
 93+  B538              ;
 94+  B538              tank_draw:
 95+  B538 3E 04            ld a,4                              ; 4 pieces per half
 96+  B53A              tank_draw0:
 97+  B53A F5               push af
 98+  B53B 2A BC B4         ld hl,(tank_current_sprite)
 99+  B53E ED 4B BE B4      ld bc,(tank_current_coords)         ; load bc with the start coords
100+  B542 CD 6C A6         call sprites_drawsprite
101+  B545 2A BC B4         ld hl,(tank_current_sprite)
102+  B548 ED 4B BE B4      ld bc,(tank_current_coords)         ; load bc with the start coords
103+  B54C 11 08 00         ld de,8
104+  B54F 19               add hl,de
105+  B550 80 C6 08         add b,8
106+  B553 47               ld b,a
107+  B554 22 BC B4         ld (tank_current_sprite),hl         ; put into memory
108+  B557 ED 43 BE B4      ld (tank_current_coords),bc         ; put into memory
109+  B55B F1               pop af
110+  B55C 3D               dec a
111+  B55D FE 00            cp 0
112+  B55F C2 3A B5         jp nz,tank_draw0
113+  B562
114+  B562 C9               ret
115+  B563
# file closed: game/tank.asm
 37   B563                  include "game\rocks.asm"
# file opened: game/rocks.asm
  1+  B563              ;
  2+  B563              ; A structure of falling rocks
  3+  B563              ; Assume we'll never have more than 4 falling at any one time
  4+  B563              ; (1,2 - 16 bit memory location for rock graphic),state (0 fell, 1 falling, 2 wobbling), countdown
  5+  B563              ;
  6+  B563              rocks_falling:
  7+  B563 00 00 00 00      defb 0,0,0,0
  8+  B567 00 00 00 00      defb 0,0,0,0
  9+  B56B 00 00 00 00      defb 0,0,0,0
 10+  B56F 00 00 00 00      defb 0,0,0,0
 11+  B573
 12+  B573              rocks_tmp:
 13+  B573 00               defb 0
 14+  B574
 15+  B574              rocks_tmp2:
 16+  B574 00 00            defb 0,0
 17+  B576
 18+  B576              ;
 19+  B576              ; Checks for a rock that needs to start falling. Takes a memory location of the first line at the bottom of the space.
 20+  B576              ; Checks to see if the pixel row in that location is a rock bottom. If it is, mark this rock as ready to fall.
 21+  B576              ; If the pixel row is not the rock bottom, stop checking.
 22+  B576              ; Inputs:
 23+  B576              ; hl- memory location
 24+  B576              ;
 25+  B576              rocks_checkforfalling:
 26+  B576 7E               ld a,(hl)           ; get the pixel row in this memory location
 27+  B577 FE 7E            cp 126              ; check against the bottom pixel row of the rock graphic
 28+  B579 C2 7F B5         jp nz,rocks_checkforfalling2 ; not a rock, stop
 29+  B57C CD 80 B5         call rocks_addrocktofalling ; mark the rock as falling
 30+  B57F              rocks_checkforfalling2:
 31+  B57F C9               ret
 32+  B580
 33+  B580              ;
 34+  B580              ; Adds the rock to the structure that tracks falling rocks
 35+  B580              ; Inputs:
 36+  B580              ; hl - memory location of falling rock graphic
 37+  B580              ; bc - coords of rock, c vert
 38+  B580              rocks_addrocktofalling:
 39+  B580 C5               push bc             ; store the coords
 40+  B581 11 63 B5         ld de,rocks_falling
 41+  B584 06 04            ld b,4              ; number of possible falling rocks
 42+  B586              rocks_addrocktofalling0:
 43+  B586 13               inc de
 44+  B587 13               inc de
 45+  B588 13               inc de              ; move three along to get the state
 46+  B589 1A               ld a,(de)           ; load the state
 47+  B58A FE 00            cp 0                ; check if this is not falling
 48+  B58C C2 A1 B5         jp nz,rocks_addrocktofalling1 ; continue the loop if not 0
 49+  B58F 3E 10            ld a,16             ; load the number of frames to wobble
 50+  B591 12               ld (de),a
 51+  B592 1B               dec de              ; move de back to state
 52+  B593 3E 02            ld a,2
 53+  B595 12               ld (de),a           ; set the state to wobbling
 54+  B596 1B               dec de              ; move back coords
 55+  B597 C1               pop bc              ; get back coords
 56+  B598 78               ld a,b
 57+  B599 12               ld (de),a           ; store the vertical
 58+  B59A 1B               dec de
 59+  B59B 79               ld a,c
 60+  B59C 12               ld (de),a           ; store the horizontal
 61+  B59D C5               push bc
 62+  B59E C3 A4 B5         jp rocks_addrocktofalling2 ; done
 63+  B5A1              rocks_addrocktofalling1:
 64+  B5A1 13               inc de              ; move memory along to next rock
 65+  B5A2 10 E2            djnz rocks_addrocktofalling0 ; try the next rock
 66+  B5A4              rocks_addrocktofalling2: ; done, return
 67+  B5A4 C1               pop bc              ; to tidy up
 68+  B5A5 C9               ret
 69+  B5A6
 70+  B5A6              ;
 71+  B5A6              ; Processes any falling rocks
 72+  B5A6              ;
 73+  B5A6              rocks_processrocks:
 74+  B5A6 DD 21 63 B5      ld ix,rocks_falling
 75+  B5AA 06 04            ld b,4              ; the number of rocks to check
 76+  B5AC              rocks_processrocks0:
 77+  B5AC C5               push bc             ; store loop count
 78+  B5AD DD 4E 00 DD      ld bc,(ix)          ; load the coords for this rock into bc
 78+  B5B1 46 01
 79+  B5B3 DD 23            inc ix
 80+  B5B5 DD 23            inc ix              ; move to the state
 81+  B5B7 DD 7E 00         ld a,(ix)           ; load the state into a
 82+  B5BA FE 00            cp 0
 83+  B5BC CA E0 B5         jp z,rocks_processrocks3 ; if not falling, check next
 84+  B5BF FE 02            cp 2
 85+  B5C1 C2 D1 B5         jp nz, rocks_processrocks2
 86+  B5C4                  ; we're wobbling
 87+  B5C4 DD 23            inc ix              ; get frame number for wobble
 88+  B5C6 DD 7E 00         ld a,(ix)           ; get wobble frame into a
 89+  B5C9 CD 7A B6         call rocks_wobble
 90+  B5CC DD 23            inc ix              ; increment for next
 91+  B5CE C3 E4 B5         jp rocks_processrocks1  ; do next rock
 92+  B5D1              rocks_processrocks2:
 93+  B5D1                  ; we're falling
 94+  B5D1 C5               push bc
 95+  B5D2 CD FD B5         call rocks_fall
 96+  B5D5 C1               pop bc
 97+  B5D6 CD E8 B5         call rocks_storeupdatedlines
 98+  B5D9 DD 23            inc ix
 99+  B5DB DD 23            inc ix              ; inc ix to get to next
100+  B5DD C3 E4 B5         jp rocks_processrocks1
101+  B5E0              rocks_processrocks3:
102+  B5E0 DD 23            inc ix
103+  B5E2 DD 23            inc ix
104+  B5E4              rocks_processrocks1:
105+  B5E4 C1               pop bc              ; get loop count back
106+  B5E5 10 C5            djnz rocks_processrocks0
107+  B5E7 C9               ret
108+  B5E8
109+  B5E8              ;
110+  B5E8              ; Stores the updated rows associated with the rock
111+  B5E8              ; Inputs:
112+  B5E8              ; bc - coords
113+  B5E8              ;
114+  B5E8              rocks_storeupdatedlines:
115+  B5E8 79               ld a,c                  ; get the player block coords of current block
116+  B5E9 E6 F8            and 248                 ; find closest multiple of eight
117+  B5EB 0F               rrca
118+  B5EC 0F               rrca
119+  B5ED 0F               rrca                    ; divide by 8
120+  B5EE ED 5B ED A4      ld de,(screen_offset)          ; load the screen offset, this is in rows
121+  B5F2 93               sub e
122+  B5F3 F5               push af
123+  B5F4 CD A0 A3         call buffer_marklineforupdate  ; store current row in updated lines
124+  B5F7 F1               pop af
125+  B5F8 3C               inc a
126+  B5F9 CD A0 A3         call buffer_marklineforupdate  ; store line beneath
127+  B5FC C9               ret
128+  B5FD
129+  B5FD              ;
130+  B5FD              ; Falls a rock one pixel, checks the next square down to see if it is empty, if not, stop falling
131+  B5FD              ; bc - coord of current rock graphic on screen
132+  B5FD              ; ix - memory location of current rock in rock list, currently at the 3rd position (rock state)
133+  B5FD              ;
134+  B5FD              rocks_fall:
135+  B5FD DD 2B            dec ix
136+  B5FF DD 2B            dec ix              ; decrease ix back to coords
137+  B601 ED 43 74 B5      ld (rocks_tmp2),bc  ; store original coords
138+  B605 3E 03            ld a,3              ; move this number of pixels
139+  B607              rocks_fall1:
140+  B607 08               ex af,af'
141+  B608 DD 4E 00 DD      ld bc,(ix)          ; get current coords
141+  B60C 46 01
142+  B60E CD AF A6         call sprites_scadd  ; get the memory of the coords into de
143+  B611 14               inc d               ; add 256 to get next row
144+  B612 1A               ld a,(de)           ; get the contents of the next row
145+  B613 FE 00            cp 0
146+  B615 C2 65 B6         jp nz,rocks_fall3    ; move the rock if the row is empty
147+  B618 0C               inc c               ; increment the vertical
148+  B619 DD 71 00 DD      ld (ix),bc          ; store the new coords
148+  B61D 70 01
149+  B61F 79               ld a,c              ; get the vertical coord into a
150+  B620 E6 07            and 7               ; divisible by 8?
151+  B622 FE 00            cp 0
152+  B624 C2 3F B6         jp nz,rocks_fall4   ; if not, carry on
153+  B627 CD 0F A6         call screen_getattraddressfromscreencoords ; get the attr address into de
154+  B62A 62 6B            ld hl,de
155+  B62C 36 42            ld (hl),66          ; load this square with the yellow colour
156+  B62E DD 4E 00 DD      ld bc,(ix)
156+  B632 46 01
157+  B634 79               ld a,c              ; get vertical
158+  B635 D6 08            sub 8               ; look up one square
159+  B637 4F               ld c,a              ; put a back in c
160+  B638 CD 0F A6         call screen_getattraddressfromscreencoords ; get the attr address into de
161+  B63B 62 6B            ld hl,de
162+  B63D 36 46            ld (hl),70          ; load this square with the yellow colour
163+  B63F              rocks_fall4:
164+  B63F 08               ex af,af'
165+  B640 3D               dec a
166+  B641 FE 00            cp 0
167+  B643 C2 07 B6         jp nz,rocks_fall1   ; do another pixel if needed
168+  B646              rocks_fall2:
169+  B646 3E 09            ld a,9              ; rock graphic
170+  B648 ED 4B 74 B5      ld bc,(rocks_tmp2)  ; get the original coords
171+  B64C CD 4A A6         call screen_getblock     ; get the memory into hl
172+  B64F CD 6C A6         call sprites_drawsprite  ; draw the sprite - over the top of the current one
173+  B652 3E 09            ld a,9
174+  B654 DD 4E 00 DD      ld bc,(ix)          ; get the new coords
174+  B658 46 01
175+  B65A CD 4A A6         call screen_getblock     ; get the memory into hl
176+  B65D CD 6C A6         call sprites_drawsprite  ; draw the sprite - over the top of the current one
177+  B660 DD 23            inc ix
178+  B662 DD 23            inc ix                  ; get ix back to state
179+  B664 C9               ret
180+  B665              rocks_fall3:
181+  B665 3E 00            ld a,0              ; set the state to fell
182+  B667 DD 77 02         ld (ix+2),a           ; store the falling state
183+  B66A DD 4E 00 DD      ld bc,(ix)          ; get the coords
183+  B66E 46 01
184+  B670 CD 0F A6         call screen_getattraddressfromscreencoords ; get the attr address into de
185+  B673 62 6B            ld hl,de
186+  B675 36 42            ld (hl),66
187+  B677 C3 46 B6         jp rocks_fall2      ; rejoin main loop
188+  B67A
189+  B67A              ;
190+  B67A              ; Wobbles a rocks
191+  B67A              ; Inputs:
192+  B67A              ; bc - coord of current rock graphic on screen
193+  B67A              ; ix - memory location of current rock in rock list, currently at the 4th position (wobble count)
194+  B67A              ; a - wobble frame
195+  B67A              rocks_wobble:
196+  B67A 3A 73 B5         ld a,(rocks_tmp)    ; get the frame toggle
197+  B67D 1E 09            ld e,9              ; this is the rock frame
198+  B67F 83               add a,e             ; add the frame toggle
199+  B680 C5               push bc
200+  B681 CD 4A A6         call screen_getblock     ; get the memory into hl
201+  B684 CD 6C A6         call sprites_drawsprite  ; draw the sprite - over the top of the current one
202+  B687 3A 73 B5         ld a,(rocks_tmp)    ; get the frame toggle against
203+  B68A EE 01            xor 1               ; flip to other state
204+  B68C 32 73 B5         ld (rocks_tmp),a    ; store
205+  B68F 1E 09            ld e,9              ; this is the rock frame
206+  B691 83               add a,e             ; add the frame toggle
207+  B692 CD 4A A6         call screen_getblock     ; get the memory into hl
208+  B695 C1               pop bc
209+  B696 CD 6C A6         call sprites_drawsprite  ; draw the sprite again with the new frame - next time it will do the opposite
210+  B699 DD 7E 00         ld a,(ix)           ; get the wobble count back
211+  B69C 3D               dec a               ; decrease
212+  B69D DD 77 00         ld (ix),a           ; store
213+  B6A0 FE 00            cp 0
214+  B6A2 C0               ret nz              ; if we're not at zero, return
215+  B6A3 DD 2B            dec ix              ; otherwise look to state location
216+  B6A5 3E 01            ld a,1              ; set the state to falling
217+  B6A7 DD 77 00         ld (ix),a           ; store the falling state
218+  B6AA DD 23            inc ix              ; set ix back to location of wobble count, and we're done
219+  B6AC C9               ret
220+  B6AD
# file closed: game/rocks.asm
 38   B6AD                  include "game\scores.asm"
# file opened: game/scores.asm
  1+  B6AD              ;
  2+  B6AD              ; The score of the current player
  3+  B6AD              ;
  4+  B6AD              scores_current:
  5+  B6AD 30 30 30 30      defb '000000'
  5+  B6B1 30 30
  6+  B6B3
  7+  B6B3              ;
  8+  B6B3              ; The current high score table
  9+  B6B3              ;
 10+  B6B3              scores_table:
 11+  B6B3 03 17 47 41      defb 3,23,'GAM',255
 11+  B6B7 4D FF
 12+  B6B9 06 17 30 30      defb 6,23,'00000 ',255
 12+  B6BD 30 30 30 20
 12+  B6C1 FF
 13+  B6C2 0C 17 47 41      defb 12,23,'GAM',255
 13+  B6C6 4D FF
 14+  B6C8 0F 17 30 30      defb 15,23,'00000 ',255
 14+  B6CC 30 30 30 20
 14+  B6D0 FF
 15+  B6D1 15 17 47 41      defb 21,23,'GAM',255
 15+  B6D5 4D FF
 16+  B6D7 18 17 30 30      defb 24,23,'00000 ',255
 16+  B6DB 30 30 30 20
 16+  B6DF FF
 17+  B6E0
 18+  B6E0              ;
 19+  B6E0              ; Displays the high score table at the bottom of the screen
 20+  B6E0              ;
 21+  B6E0              scores_showtable:
 22+  B6E0 21 B3 B6         ld hl, scores_table
 23+  B6E3 CD A0 82         call string_print
 24+  B6E6 21 B9 B6         ld hl, scores_table+6
 25+  B6E9 CD A0 82         call string_print
 26+  B6EC 21 C2 B6         ld hl, scores_table+15
 27+  B6EF CD A0 82         call string_print
 28+  B6F2 21 C8 B6         ld hl, scores_table+21
 29+  B6F5 CD A0 82         call string_print
 30+  B6F8 21 D1 B6         ld hl, scores_table+30
 31+  B6FB CD A0 82         call string_print
 32+  B6FE 21 D7 B6         ld hl, scores_table+36
 33+  B701 CD A0 82         call string_print
 34+  B704 C9               ret
# file closed: game/scores.asm
 39   B705                  include "game\diamonds.asm"
# file opened: game/diamonds.asm
  1+  B705              ;
  2+  B705              ; Changes the attribute of gem and diamond cells based on the frame count
  3+  B705              ; Inputs:
  4+  B705              ; hl - memory location of gem type
  5+  B705              diamonds_twinkle_type:
  6+  B705 CD 31 B3         call game_getcurrentframe       ; get current frame number
  7+  B708 E6 07            and 7                           ; want a number from 0-7
  8+  B70A C6 40            add 64                          ; add to 60 to get attr colour
  9+  B70C              diamonds_twinkle_type0:
 10+  B70C 4E               ld c,(hl)                      ; get coords into bc
 11+  B70D 08               ex af, af'
 12+  B70E 79               ld a,c                          ; load c into add
 13+  B70F FE FF            cp 255                          ; is this the end?
 14+  B711 CA 28 B7         jp z,diamonds_twinkle_type1           ; step out if so
 15+  B714 23               inc hl
 16+  B715 23               inc hl
 17+  B716 7E               ld a,(hl)                       ; check the state, don't process if collection
 18+  B717 FE 01            cp 1
 19+  B719 CA 28 B7         jp z,diamonds_twinkle_type1           ; step out if so
 20+  B71C 23               inc hl
 21+  B71D 08               ex af,af'
 22+  B71E 5E 23 56 2B      ld de,(hl)                      ; get the memory location into de
 23+  B722 12               ld (de),a                       ; set the value of attr
 24+  B723 23               inc hl
 25+  B724 23               inc hl                          ; move to next diamond
 26+  B725 C3 0C B7         jp diamonds_twinkle_type0
 27+  B728              diamonds_twinkle_type1:
 28+  B728 C9               ret
 29+  B729
 30+  B729              ;
 31+  B729              ; Initialise diamonds and gems
 32+  B729              ;
 33+  B729              diamonds_twinkle
 34+  B729 21 56 AD         ld hl, level01diamonds
 35+  B72C CD 05 B7         call diamonds_twinkle_type
 36+  B72F 21 66 AD         ld hl, level01gems
 37+  B732 CD 05 B7         call diamonds_twinkle_type
 38+  B735 C9               ret
 39+  B736
 40+  B736              ;
 41+  B736              ; Initialise diamonds and gems
 42+  B736              ;
 43+  B736              diamonds_init:
 44+  B736 21 56 AD         ld hl, level01diamonds
 45+  B739 CD 43 B7         call diamonds_init_type
 46+  B73C 21 66 AD         ld hl, level01gems
 47+  B73F CD 43 B7         call diamonds_init_type
 48+  B742 C9               ret
 49+  B743
 50+  B743              ;
 51+  B743              ; Initialise diamonds or gems, get memory addresses
 52+  B743              ; Inputs:
 53+  B743              ; hl - memory location
 54+  B743              diamonds_init_type:
 55+  B743 4E               ld c,(hl)                      ; get coords into c
 56+  B744 79               ld a,c                          ; load c into add
 57+  B745 FE FF            cp 255                          ; is this the end?
 58+  B747 CA 5C B7         jp z,diamonds_init_type1             ; step out if so
 59+  B74A 23               inc hl
 60+  B74B 46               ld b,(hl)                       ; get coords into b
 61+  B74C E5               push hl
 62+  B74D CD DF A5         call screen_getcellattradress ; get memory of attr for this diamond into de
 63+  B750 E1               pop hl
 64+  B751 23               inc hl                          ; move to state
 65+  B752 23               inc hl                          ; move to memory
 66+  B753 73 23 72 2B      ld (hl),de                      ; store the memory location
 67+  B757 23               inc hl                          ; move to next diamond
 68+  B758 23               inc hl
 69+  B759 C3 43 B7         jp diamonds_init_type
 70+  B75C              diamonds_init_type1:
 71+  B75C C9               ret
# file closed: game/diamonds.asm
 40   B75D
 41   B75D              ;===========================================================================
 42   B75D              ; main routine - the code execution starts here.
 43   B75D              ; Sets up the new interrupt routine, the memory
 44   B75D              ; banks and jumps to the start loop.
 45   B75D              ;===========================================================================
 46   B75D              main:
 47   B75D
 48   B75D                  ; Setup stack
 49   B75D 31 65 B8         ld sp,stack_top
 50   B760
 51   B760                  ; Draw the title screen
 52   B760 CD D4 A6         call titlescreen_show
 53   B763
 54   B763 CD 00 80         call init_start
 55   B766 CD 07 A5         call screen_draw
 56   B769 CD 66 A4         call buffer_allbuffertoscreen
 57   B76C CD 3E B3         call player_init
 58   B76F CD D0 B3         call ship_land              ; land the ship
 59   B772 CD C0 B4         call tank_init
 60   B775 CD 36 B7         call diamonds_init
 61   B778
 62   B778              mloop:
 63   B778 76               halt
 64   B779 CD 7F B7         call main_loop_processing
 65   B77C C3 78 B7         jp mloop
 66   B77F
 67   B77F              main_loop_processing:
 68   B77F CD 34 A4         call buffer_buffertoscreen  ; copy buffer to screen
 69   B782 CD B4 A3         call buffer_clearlist       ; zero the updated lines list
 70   B785 CD 47 B3         call player_drawplayer      ; delete player
 71   B788 CD 5A AF         call control_keyboard       ; check keyboard
 72   B78B CD 47 B3         call player_drawplayer      ; draw player
 73   B78E CD C9 B4         call tank_process           ; prcoess the tank
 74   B791 CD A6 B5         call rocks_processrocks     ; process falling rocks
 75   B794 CD 29 B7         call diamonds_twinkle       ; make the diamonds twinkle
 76   B797
 77   B797 CD 29 B3         call game_incrementframe    ; increment the game frame
 78   B79A
 79   B79A C9               ret
 80   B79B
 81   B79B              ;===========================================================================
 82   B79B              ; Stack.
 83   B79B              ;===========================================================================
 84   B79B
 85   B79B              ; Stack: this area is reserved for the stack
 86   B79B              STACK_SIZE: equ 100    ; in words
 87   B79B
 88   B79B              ; Reserve stack space
 89   B79B 00 00            defw 0  ; WPMEM, 2
 90   B79D              stack_bottom:
 91   B79D 00 00 00...      defs    STACK_SIZE*2, 0
 92   B865              stack_top:
 93   B865 00 00            defw 0  ; WPMEM, 2
 94   B867
 95   B867                     SAVESNA "ThePit.sna", main
# file closed: main.asm
