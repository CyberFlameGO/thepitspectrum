# file opened: main.asm
  1   0000                  DEVICE ZXSPECTRUM48
  2   0000
  3   0000                  ORG $8000
  4   8000
  5   8000              ;===========================================================================
  6   8000              ; Persistent watchpoint.
  7   8000              ; Change WPMEMx (remove the 'x' from WPMEMx) below to activate.
  8   8000              ; If you do so the program will hit a breakpoint when it tries to
  9   8000              ; write to the first byte of the 3rd line.
 10   8000              ; When program breaks in the fill_memory sub routine please hover over hl
 11   8000              ; to see that it contains 0x5804 or COLOR_SCREEN+64.
 12   8000              ;===========================================================================
 13   8000
 14   8000              ; WPMEMx 0x5840, 1, w
 15   8000
 16   8000
 17   8000              ;===========================================================================
 18   8000              ; main routine - the code execution starts here.
 19   8000              ; Sets up the new interrupt routine, the memory
 20   8000              ; banks and jumps to the start loop.
 21   8000              ;===========================================================================
 22   8000              main:
 23   8000 21 40 B9         ld hl,font
 24   8003 22 36 5C         ld (23606),hl
 25   8006 CD 8B B0         call options_show
 26   8009                  ; Show the red pre-title screen
 27   8009 CD 33 AC         call titlescreen_preshow
 28   800C
 29   800C                  ; Draw the title screen
 30   800C              main_titlescreen:
 31   800C CD 3F AC         call titlescreen_show
 32   800F CD 21 C6         call player_init_gamestart
 33   8012
 34   8012              main_lifestart:
 35   8012
 36   8012 CD 47 C6         call player_init_lifestart
 37   8015 CD 56 C5         call game_setcurrentrocks   ; set the current rocks based on the level
 38   8018                  ;ld a,12
 39   8018                  ;ld (game_difficulty),a
 40   8018 CD 96 C5         call game_setdifficulty     ; set the current difficulty
 41   801B
 42   801B CD CC AD         call lifescreen_draw        ; show the lives remaining screen
 43   801E
 44   801E CD C9 80         call init_start
 45   8021 CD FD A8         call screen_draw
 46   8024 CD 4C A8         call buffer_allbuffertoscreen
 47   8027
 48   8027 CD 6C CF         call missiles_init
 49   802A CD 48 C8         call ship_land              ; land the ship
 50   802D CD 6A C9         call tank_init
 51   8030 CD 33 CF         call diamonds_init
 52   8033 CD 24 D1         call thepit_init
 53   8036 CD C0 D1         call monster_init
 54   8039 CD 10 D3         call robots_init
 55   803C CD B7 D6         call bullet_init
 56   803F
 57   803F              mloop:
 58   803F                  ;halt
 59   803F CD 86 80         call main_loop_processing
 60   8042
 61   8042                  ;
 62   8042                  ; Check if the player died
 63   8042                  ;
 64   8042 21 E5 C5         ld hl,player+10
 65   8045 7E               ld a,(hl)                   ; check if the player died this frame
 66   8046 FE 01            cp 1
 67   8048 C2 72 80         jp nz,mloop0
 68   804B CD D8 C6         call player_died        ; do end of life housekeeping
 69   804E 06 28            ld b,40
 70   8050 CD 64 81         call utilities_pauseforframes
 71   8053
 72   8053 21 E4 C5         ld hl,player+9        ; check lives remaining
 73   8056 7E               ld a,(hl)
 74   8057 FE 00            cp 0
 75   8059 C2 6C 80         jp nz,mloop1         ; haven't finished, so keep going
 76   805C
 77   805C 3A EB C4         ld a,(game_numberplayers) ; get the number of players
 78   805F FE 01            cp 1
 79   8061 CA BA 80         jp z,main_gameover   ; if just one player, then this is game over
 80   8064
 81   8064 3A EC C4         ld a,(game_currentplayer) ; get the current player
 82   8067 FE 02            cp 2                    ; if we're here, we have no lives, and if the current player is 2, then we're done
 83   8069 CA BA 80         jp z,main_gameover            ; if it's  two game over
 84   806C
 85   806C              mloop1:
 86   806C CD 3A C5         call game_changeplayer ; change player if needed
 87   806F C3 12 80         jp main_lifestart    ; otherwise, start a new life
 88   8072              mloop0:
 89   8072                  ;
 90   8072                  ; Check if the player completed the level
 91   8072                  ;
 92   8072 21 E8 C5         ld hl,player+13
 93   8075 7E               ld a,(hl)
 94   8076 FE 01            cp 1
 95   8078 C2 3F 80         jp nz,mloop
 96   807B CD 12 C8         call player_checkforexit
 97   807E FE 01            cp 1                        ; look at return, if 1, level has been completed
 98   8080 CA C0 80         jp z,main_endlevel          ; jump to level transition screen
 99   8083 C3 3F 80         jp mloop                ; start the loop again
100   8086
101   8086
102   8086              main_loop_processing:
103   8086
104   8086 CD 0B A8         call buffer_buffertoscreen  ; copy buffer to screen
105   8089 CD 70 A7         call buffer_clearlist       ; zero the updated lines list
106   808C CD EB C5         call player_getlocation     ; figure out where the player is
107   808F CD 1C C7         call player_drawplayer      ; delete player
108   8092 CD E4 BF         call control_input          ; check input
109   8095 CD 1C C7         call player_drawplayer      ; draw player
110   8098 CD 99 C9         call tank_process           ; prcoess the tank
111   809B CD 33 C8         call ship_process           ; proces the ship
112   809E CD B1 CB         call rocks_processrocks     ; process falling rocks
113   80A1 CD 30 D1         call thepit_process         ; process the pit trap
114   80A4 CD 94 CF         call missiles_process       ; process missiles
115   80A7 CD DD D1         call monster_process        ; process monster
116   80AA CD 99 D3         call robots_process         ; process robots
117   80AD CD FE D6         call bullet_process         ; process the bullet
118   80B0 CD 12 CF         call diamonds_twinkle       ; make the diamonds twinkle
119   80B3 CD 24 CD         call scores_printscore      ; update the score on screen
120   80B6 CD 76 C5         call game_incrementframe    ; increment the game frame
121   80B9
122   80B9 C9               ret
123   80BA
124   80BA              main_gameover:
125   80BA CD 2F AE         call gameover_draw          ; show the game over screen
126   80BD C3 0C 80         jp main_titlescreen         ; go back to title
127   80C0
128   80C0              main_endlevel:
129   80C0 CD A6 C6         call player_recordcurrentstate
130   80C3 CD 7D AF         call endlevel_draw          ; show the end level screen
131   80C6 C3 12 80         jp main_lifestart           ; start a new life
132   80C9
133   80C9
134   80C9              ;===========================================================================
135   80C9              ; Include modules
136   80C9              ;===========================================================================
137   80C9                  include "init.asm"
# file opened: init.asm
  1+  80C9              ;
  2+  80C9              ; Set up at start up
  3+  80C9              ;
  4+  80C9              init_start:
  5+  80C9              ; We want a black screen.
  6+  80C9
  7+  80C9 3E 47            ld a,71             ; white ink (7) on black paper (0),
  8+  80CB                                      ; bright (64).
  9+  80CB CD 49 81         call utilities_clearscreen
 10+  80CE 32 8D 5C         ld (23693),a        ; set our screen colours.
 11+  80D1 AF               xor a               ; quick way to load accumulator with zero.
 12+  80D2 CD 9B 22         call 8859           ; set permanent border colours.
 13+  80D5
 14+  80D5 21 E2 A8         ld hl,screen_offset ; reset some temp variables
 15+  80D8 36 00            ld (hl),0
 16+  80DA 21 E3 A8         ld hl,screen_tmp
 17+  80DD 36 00            ld (hl),0
 18+  80DF 21 18 A7         ld hl,buffer_tmp
 19+  80E2 36 00            ld (hl),0
 20+  80E4 23               inc hl
 21+  80E5 36 00            ld (hl),0
 22+  80E7
 23+  80E7 CD 89 C5         call game_resetcurrentframe ; reset current frame
 24+  80EA
 25+  80EA C9               ret
 26+  80EB
 27+  80EB              ;
 28+  80EB              ;   Start coord
 29+  80EB              ;   vert c, horiz b
 30+  80EB              init_coord:
 31+  80EB 18 30            defb 24,48
 32+  80ED
 33+  80ED              ;
 34+  80ED              ; Number of lives to start
 35+  80ED              ;
 36+  80ED              init_lives:
 37+  80ED 03               defb 3
 38+  80EE
 39+  80EE              ;
 40+  80EE              ; Score to start
 41+  80EE              ;
 42+  80EE              init_score:
 43+  80EE 30 30 30 30      defb '000000'
 43+  80F2 30 30
# file closed: init.asm
138   80F4                  include "utilities.asm"
# file opened: utilities.asm
  1+  80F4              ; ##########################################################################
  2+  80F4              ; Print a character
  3+  80F4              ; Inputs:
  4+  80F4              ; b - x coord
  5+  80F4              ; c - y coord
  6+  80F4              ; d - character
  7+  80F4              ; e - colour
  8+  80F4              ; ##########################################################################
  9+  80F4              utilities_print_char:
 10+  80F4 7B               ld a,e
 11+  80F5 32 8F 5C         ld (23695),a        ; set our temporary screen colours.
 12+  80F8 3E 16            ld a,22
 13+  80FA D7               rst 16              ; Calls the Sinclair PRINT AT routine
 14+  80FB 78               ld a,b              ; Gets the X co-ordinate
 15+  80FC 3D               dec a
 16+  80FD D7               rst 16
 17+  80FE 79               ld a,c              ; and the Y co-ordinate
 18+  80FF D7               rst 16              ; So, essentially PRINT AT X,Y; like in BASIC
 19+  8100 7A               ld a,d              ; ASCII code for udg.
 20+  8101 D7               rst 16              ; draw block.
 21+  8102 C9               ret
 22+  8103
 23+  8103
 24+  8103              ;Inputs:
 25+  8103              ;     DE and A are factors
 26+  8103              ;Outputs:
 27+  8103              ;     A is not changed
 28+  8103              ;     B is 0
 29+  8103              ;     C is not changed
 30+  8103              ;     DE is not changed
 31+  8103              ;     HL is the product
 32+  8103              ;Time:
 33+  8103              ;     342+6x
 34+  8103              ;
 35+  8103              utilities_multiply:
 36+  8103 06 08            ld b,8          ;7           7
 37+  8105 21 00 00         ld hl,0         ;10         10
 38+  8108 29               add hl,hl     ;11*8       88
 39+  8109 07               rlca          ;4*8        32
 40+  810A 30 01            jr nc,$+3     ;(12|18)*8  96+6x
 41+  810C 19                   add hl,de   ;--         --
 42+  810D 10 F9            djnz $-5      ;13*7+8     99
 43+  810F C9               ret             ;10         10
 44+  8110
 45+  8110              utilities_waitforkey:
 46+  8110 21 08 5C         ld hl,23560         ; LAST K system variable.
 47+  8113 36 00            ld (hl),0           ; put null value there.
 48+  8115              utilities_waitforkey0:
 49+  8115 7E               ld a,(hl)           ; new value of LAST K.
 50+  8116 FE 00            cp 0                ; is it still zero?
 51+  8118 20 0A            jr nz,utilities_waitforkey1           ; yes, so no key pressed.
 52+  811A 01 1F 00         ld bc,31                        ; Kempston joystick port.
 53+  811D ED 78            in a,(c)                        ; read input.
 54+  811F E6 10            and 16
 55+  8121 CA 15 81         jp z,utilities_waitforkey0
 56+  8124              utilities_waitforkey1:
 57+  8124 C9               ret                 ; key was pressed.
 58+  8125
 59+  8125              ;
 60+  8125              ; Waits number of frames for keypress. If got, returns 1, if not 0
 61+  8125              ; Inputs:
 62+  8125              ; a - number of frames to waits
 63+  8125              ; Ouputs:
 64+  8125              ; e - 0 not pressed, 1 pressed
 65+  8125              utilities_waitforkey_forframes:
 66+  8125 21 08 5C         ld hl,23560         ; LAST K system variable.
 67+  8128 36 00            ld (hl),0           ; put null value there.
 68+  812A 47               ld b,a              ; number of frames to wait
 69+  812B              utilities_waitforkey_forframes0:
 70+  812B 7E               ld a,(hl)           ; new value of LAST K.
 71+  812C FE 00            cp 0                ; is it still zero?
 72+  812E 28 03            jr z,utilities_waitforkey_forframes1           ; yes, so no key pressed.
 73+  8130 1E 01            ld e,1              ; set the pressed flag
 74+  8132 C9               ret                 ; key was pressed.
 75+  8133              utilities_waitforkey_forframes1:
 76+  8133 C5               push bc
 77+  8134 01 1F 00         ld bc,31                        ; Kempston joystick port.
 78+  8137 ED 78            in a,(c)                        ; read input.
 79+  8139 C1               pop bc
 80+  813A E6 10            and 16
 81+  813C CA 42 81         jp z,utilities_waitforkey_forframes2
 82+  813F 1E 01            ld e,1              ; set the pressed flag
 83+  8141 C9               ret                 ; key was pressed.
 84+  8142              utilities_waitforkey_forframes2:
 85+  8142 76               halt                ; wait for frame
 86+  8143 76               halt                ; wait for frame
 87+  8144 10 E5            djnz utilities_waitforkey_forframes0 ; loop again
 88+  8146 1E 00            ld e,0              ; nothing pressed in time
 89+  8148 C9               ret
 90+  8149
 91+  8149              ;
 92+  8149              ; Clears the screen
 93+  8149              ; Inputs:
 94+  8149              ; a - attribute colour
 95+  8149              utilities_clearscreen:
 96+  8149 76               halt
 97+  814A 21 00 58         ld hl,22528         ; attr
 98+  814D 11 01 58         ld de,22529         ; attr+1
 99+  8150 01 FF 02         ld bc,767
100+  8153 77               ld (hl),a
101+  8154 ED B0            ldir
102+  8156
103+  8156 21 00 40         ld hl, 16384        ;pixels
104+  8159 11 01 40         ld de, 16385        ;pixels + 1
105+  815C 01 FF 17         ld bc, 6143         ;pixels area length - 1
106+  815F 36 00            ld (hl), 0          ;set first byte to '0'
107+  8161 ED B0            ldir                ;copy bytes
108+  8163
109+  8163 C9               ret
110+  8164
111+  8164              ;
112+  8164              ; Wait for a number of frames
113+  8164              ; Inputs:
114+  8164              ; b - number of frames
115+  8164              utilities_pauseforframes:
116+  8164 76               halt
117+  8165 10 FD            djnz utilities_pauseforframes
118+  8167 C9               ret
119+  8168
120+  8168              utilities_readkey:
121+  8168 21 88 81         LD HL,utilties_keymap              ; Point HL at the keyboard list
122+  816B 16 08            LD D,8                                  ; This is the number of ports (rows) to check
123+  816D 0E FE            LD C,$FE                            ; C is always FEh for reading keyboard ports
124+  816F              utilities_readkey_0:
125+  816F 46               LD B,(HL)                               ; Get the keyboard port address from table
126+  8170 23               INC HL                                  ; Increment to list of keys
127+  8171 ED 78            IN A,(C)                                ; Read the row of keys in
128+  8173 E6 1F            AND $1F                                     ; We are only interested in the first five bits
129+  8175 1E 05            LD E,5                                  ; This is the number of keys in the row
130+  8177              utilities_readkey_1:
131+  8177 CB 3F            SRL A                                   ; Shift A right; bit 0 sets carry bit
132+  8179 30 0B            JR NC,utilities_readkey_2   ; If the bit is 0, we've found our key
133+  817B 23               INC HL                                  ; Go to next table address
134+  817C 1D               DEC E                                   ; Decrement key loop counter
135+  817D 20 F8            JR NZ,utilities_readkey_1   ; Loop around until this row finished
136+  817F 15               DEC D                                   ; Decrement row loop counter
137+  8180 20 ED            JR NZ,utilities_readkey_0   ; Loop around until we are done
138+  8182 A7               AND A                                   ; Clear A (no key found)
139+  8183 C3 68 81         jp utilities_readkey
140+  8186              utilities_readkey_2:
141+  8186 7E               LD A,(HL)                               ; We've found a key at this point; fetch the character code!
142+  8187 C9               RET
143+  8188
144+  8188              utilties_keymap:
145+  8188 FE 23 5A 58      defb $FE,"#","Z","X","C","V"
145+  818C 43 56
146+  818E FD 41 53 44      defb $FD,"A","S","D","F","G"
146+  8192 46 47
147+  8194 FB 51 57 45      defb $FB,"Q","W","E","R","T"
147+  8198 52 54
148+  819A F7 31 32 33      defb $F7,"1","2","3","4","5"
148+  819E 34 35
149+  81A0 EF 30 39 38      defb $EF,"0","9","8","7","6"
149+  81A4 37 36
150+  81A6 DF 50 4F 49      defb $DF,"P","O","I","U","Y"
150+  81AA 55 59
151+  81AC BF 23 4C 4B      defb $BF,"#","L","K","J","H"
151+  81B0 4A 48
152+  81B2 7F 20 23 4D      defb $7F," ","#","M","N","B"
152+  81B6 4E 42
153+  81B8
154+  81B8
155+  81B8              ;
156+  81B8              ; Generates a randomish number in the range 0 to e
157+  81B8              ; Inputs:
158+  81B8              ; e - upper value
159+  81B8              ; Outputs:
160+  81B8              ; a - random number
161+  81B8              utilities_randomupper
162+  81B8 3A EA C4         ld a,(game_framenumber)
163+  81BB 6F               ld l,a
164+  81BC 26 00            ld h,0
165+  81BE 16 00            ld d,0
166+  81C0 42 4B            ld bc,de
167+  81C2              utilities_randomupper0:
168+  81C2 B7               or a
169+  81C3 ED 42            sbc hl,bc
170+  81C5 F2 C2 81         jp p,utilities_randomupper0
171+  81C8 09               add hl,bc
172+  81C9 01 00 00         ld bc,0
173+  81CC 09               add hl,bc
174+  81CD 7D               ld a,l
175+  81CE C9               ret
176+  81CF
# file closed: utilities.asm
139   81CF                  include "strings.asm"
# file opened: strings.asm
  1+  81CF              string_score1:
  2+  81CF 04 00 53 43      defb 4,0,'SCORE1',255
  2+  81D3 4F 52 45 31
  2+  81D7 FF
  3+  81D8              string_scorenumbers1:
  4+  81D8 04 01 30 30      defb 4,1,'000000',255
  4+  81DC 30 30 30 30
  4+  81E0 FF
  5+  81E1              string_company:
  6+  81E1 0C 00 43 45      defb 12,0,'CENTURI',255
  6+  81E5 4E 54 55 52
  6+  81E9 49 FF
  7+  81EB              string_player1:
  8+  81EB 0C 01 50 4C      defb 12,1,'PLAYER 1',255
  8+  81EF 41 59 45 52
  8+  81F3 20 31 FF
  9+  81F6              string_player2:
 10+  81F6 0C 01 50 4C      defb 12,1,'PLAYER 2',255
 10+  81FA 41 59 45 52
 10+  81FE 20 32 FF
 11+  8201              string_score2:
 12+  8201 16 00 53 43      defb 22,0,'SCORE2',255
 12+  8205 4F 52 45 32
 12+  8209 FF
 13+  820A              string_scorenumbers2:
 14+  820A 16 01 30 30      defb 22,1,'000000',255
 14+  820E 30 30 30 30
 14+  8212 FF
 15+  8213              string_titlescreen_copyright:
 16+  8213 06 15 7F 31      defb 6,21, 127,'1982  CENTURI INC',255
 16+  8217 39 38 32 20
 16+  821B 20 43 45 4E
 16+  821F 54 55 52 49
 16+  8223 20 49 4E 43
 16+  8227 FF
 17+  8228
 18+  8228
 19+  8228              string_alttitlescreen_1:
 20+  8228 0C 00 43 52      defb 12,0,'CREDITS 1',255
 20+  822C 45 44 49 54
 20+  8230 53 20 31 FF
 21+  8234              string_alttitlescreen_2:
 22+  8234 00 02 20 20      defb 0,2,'           THE OBJECT',254
 22+  8238 20 20 20 20
 22+  823C 20 20 20 20
 22+  8240 20 54 48 45
 22+  8244 20 4F 42 4A
 22+  8248 45 43 54 FE
 23+  824C 00 03 20 20      defb 0,3,'          OF THIS GAME',254
 23+  8250 20 20 20 20
 23+  8254 20 20 20 20
 23+  8258 4F 46 20 54
 23+  825C 48 49 53 20
 23+  8260 47 41 4D 45
 23+  8264 FE
 24+  8265 00 04 20 20      defb 0,4,'         IS TO DIG DOWN',254
 24+  8269 20 20 20 20
 24+  826D 20 20 20 49
 24+  8271 53 20 54 4F
 24+  8275 20 44 49 47
 24+  8279 20 44 4F 57
 24+  827D 4E FE
 25+  827F 00 05 20 20      defb 0,5,'        TO THE BOTTOM PIT',254
 25+  8283 20 20 20 20
 25+  8287 20 20 54 4F
 25+  828B 20 54 48 45
 25+  828F 20 42 4F 54
 25+  8293 54 4F 4D 20
 25+  8297 50 49 54 FE
 26+  829B 00 06 20 20      defb 0,6,'               AND',254
 26+  829F 20 20 20 20
 26+  82A3 20 20 20 20
 26+  82A7 20 20 20 20
 26+  82AB 20 41 4E 44
 26+  82AF FE
 27+  82B0 00 07 20 20      defb 0,7,'        COLLECT AT LEAST',254
 27+  82B4 20 20 20 20
 27+  82B8 20 20 43 4F
 27+  82BC 4C 4C 45 43
 27+  82C0 54 20 41 54
 27+  82C4 20 4C 45 41
 27+  82C8 53 54 FE
 28+  82CB 00 08 20 20      defb 0,8,'         ONE LARGE JEWEL',254
 28+  82CF 20 20 20 20
 28+  82D3 20 20 20 4F
 28+  82D7 4E 45 20 4C
 28+  82DB 41 52 47 45
 28+  82DF 20 4A 45 57
 28+  82E3 45 4C FE
 29+  82E6 00 09 20 20      defb 0,9,'              THEN',254
 29+  82EA 20 20 20 20
 29+  82EE 20 20 20 20
 29+  82F2 20 20 20 20
 29+  82F6 54 48 45 4E
 29+  82FA FE
 30+  82FB 00 0A 20 20      defb 0,10,'         RETURN TO SHIP',254
 30+  82FF 20 20 20 20
 30+  8303 20 20 20 52
 30+  8307 45 54 55 52
 30+  830B 4E 20 54 4F
 30+  830F 20 53 48 49
 30+  8313 50 FE
 31+  8315 00 0B 20 20      defb 0,11,'         THRU UPPER PIT',255
 31+  8319 20 20 20 20
 31+  831D 20 20 20 54
 31+  8321 48 52 55 20
 31+  8325 55 50 50 45
 31+  8329 52 20 50 49
 31+  832D 54 FF
 32+  832F              string_alttitlescreen_3:
 33+  832F 00 0D 20 20      defb 0,13,'    SINGLE BONUS  5000 POINTS',254
 33+  8333 20 20 53 49
 33+  8337 4E 47 4C 45
 33+  833B 20 42 4F 4E
 33+  833F 55 53 20 20
 33+  8343 35 30 30 30
 33+  8347 20 50 4F 49
 33+  834B 4E 54 53 FE
 34+  834F 00 0E 20 20      defb 0,14,'      COLLECT 1 LARGE JEWEL',254
 34+  8353 20 20 20 20
 34+  8357 43 4F 4C 4C
 34+  835B 45 43 54 20
 34+  835F 31 20 4C 41
 34+  8363 52 47 45 20
 34+  8367 4A 45 57 45
 34+  836B 4C FE
 35+  836D 00 0F 20 20      defb 0,15,'       AND RETURN TO SHIP',254
 35+  8371 20 20 20 20
 35+  8375 20 41 4E 44
 35+  8379 20 52 45 54
 35+  837D 55 52 4E 20
 35+  8381 54 4F 20 53
 35+  8385 48 49 50 FE
 36+  8389 00 11 20 20      defb 0,17,'    DOUBLE BONUS  10000 POINTS',254
 36+  838D 20 20 44 4F
 36+  8391 55 42 4C 45
 36+  8395 20 42 4F 4E
 36+  8399 55 53 20 20
 36+  839D 31 30 30 30
 36+  83A1 30 20 50 4F
 36+  83A5 49 4E 54 53
 36+  83A9 FE
 37+  83AA 00 12 20 20      defb 0,18,'    COLLECT ALL 3 LARGE JEWELS',254
 37+  83AE 20 20 43 4F
 37+  83B2 4C 4C 45 43
 37+  83B6 54 20 41 4C
 37+  83BA 4C 20 33 20
 37+  83BE 4C 41 52 47
 37+  83C2 45 20 4A 45
 37+  83C6 57 45 4C 53
 37+  83CA FE
 38+  83CB 00 13 20 20      defb 0,19,'       OR   ALL 4 SMALL JEWELS',254
 38+  83CF 20 20 20 20
 38+  83D3 20 4F 52 20
 38+  83D7 20 20 41 4C
 38+  83DB 4C 20 34 20
 38+  83DF 53 4D 41 4C
 38+  83E3 4C 20 4A 45
 38+  83E7 57 45 4C 53
 38+  83EB FE
 39+  83EC 00 15 20 20      defb 0,21,'    TRIPLE BONUS  15000 POINTS',254
 39+  83F0 20 20 54 52
 39+  83F4 49 50 4C 45
 39+  83F8 20 42 4F 4E
 39+  83FC 55 53 20 20
 39+  8400 31 35 30 30
 39+  8404 30 20 50 4F
 39+  8408 49 4E 54 53
 39+  840C FE
 40+  840D 00 16 20 20      defb 0,22,'       COLLECT ALL 7 JEWELS',255
 40+  8411 20 20 20 20
 40+  8415 20 43 4F 4C
 40+  8419 4C 45 43 54
 40+  841D 20 41 4C 4C
 40+  8421 20 37 20 4A
 40+  8425 45 57 45 4C
 40+  8429 53 FF
 41+  842B
 42+  842B              string_lifescreen_player:
 43+  842B 0B 00 20 50      defb 11,0,' PLAYER 1 ',255
 43+  842F 4C 41 59 45
 43+  8433 52 20 31 20
 43+  8437 FF
 44+  8438              string_lifescreen_lives:
 45+  8438 0B 03 30 20      defb 11,3,48,' MEN LEFT',255
 45+  843C 4D 45 4E 20
 45+  8440 4C 45 46 54
 45+  8444 FF
 46+  8445              string_lifescreen_lastman:
 47+  8445 0C 03 4C 41      defb 12,3,'LAST MAN',255
 47+  8449 53 54 20 4D
 47+  844D 41 4E FF
 48+  8450
 49+  8450              string_gameoverscreen_gameover:
 50+  8450 0B 06 47 41      defb 11,6,'GAME OVER',255
 50+  8454 4D 45 20 4F
 50+  8458 56 45 52 FF
 51+  845C              string_gameoverscreen_copyright:
 52+  845C 07 12 7F 31      defb 7,18,127,'1982 CENTURI INC',255
 52+  8460 39 38 32 20
 52+  8464 43 45 4E 54
 52+  8468 55 52 49 20
 52+  846C 49 4E 43 FF
 53+  8470              string_gameoverscreen_bestscores:
 54+  8470 07 16 42 45      defb 7,22,'BEST SCORES TODAY',255
 54+  8474 53 54 20 53
 54+  8478 43 4F 52 45
 54+  847C 53 20 54 4F
 54+  8480 44 41 59 FF
 55+  8484              string_gameover_credits:
 56+  8484 0C 01 43 52      defb 12,1,'CREDITS 0',255
 56+  8488 45 44 49 54
 56+  848C 53 20 30 FF
 57+  8490
 58+  8490              string_highscore_congratulations:
 59+  8490 08 05 43 4F      defb 8,5,'CONGRATULATIONS',255
 59+  8494 4E 47 52 41
 59+  8498 54 55 4C 41
 59+  849C 54 49 4F 4E
 59+  84A0 53 FF
 60+  84A2              string_highscore_player1:
 61+  84A2 0C 07 50 4C      defb 12,7,'PLAYER 1',255
 61+  84A6 41 59 45 52
 61+  84AA 20 31 FF
 62+  84AD              string_highscore_player2:
 63+  84AD 0C 07 50 4C      defb 12,7,'PLAYER 2',255
 63+  84B1 41 59 45 52
 63+  84B5 20 32 FF
 64+  84B8              string_highscore_youhaveearned:
 65+  84B8 08 0A 59 4F      defb 8,10,'YOU HAVE EARNED',255
 65+  84BC 55 20 48 41
 65+  84C0 56 45 20 45
 65+  84C4 41 52 4E 45
 65+  84C8 44 FF
 66+  84CA              string_highscore_place1:
 67+  84CA 06 0C 54 48      defb 6,12,'THE GREATEST SCORE',255
 67+  84CE 45 20 47 52
 67+  84D2 45 41 54 45
 67+  84D6 53 54 20 53
 67+  84DA 43 4F 52 45
 67+  84DE FF
 68+  84DF              string_highscore_place2:
 69+  84DF 06 0C 54 48      defb 6,12,'THE 2ND BEST SCORE',255
 69+  84E3 45 20 32 4E
 69+  84E7 44 20 42 45
 69+  84EB 53 54 20 53
 69+  84EF 43 4F 52 45
 69+  84F3 FF
 70+  84F4              string_highscore_place3:
 71+  84F4 06 0C 54 48      defb 6,12,'THE 3RD BEST SCORE',255
 71+  84F8 45 20 33 52
 71+  84FC 44 20 42 45
 71+  8500 53 54 20 53
 71+  8504 43 4F 52 45
 71+  8508 FF
 72+  8509              string_highscore_pleaseenter
 73+  8509 03 0F 52 45      defb 3,15,'RECORD YOUR INITIALS BELOW',255
 73+  850D 43 4F 52 44
 73+  8511 20 59 4F 55
 73+  8515 52 20 49 4E
 73+  8519 49 54 49 41
 73+  851D 4C 53 20 42
 73+  8521 45 4C 4F 57
 73+  8525 FF
 74+  8526
 75+  8526              string_endlevel_youhaveearned:
 76+  8526 08 0B 59 4F      defb 8,11,'YOU HAVE EARNED',255
 76+  852A 55 20 48 41
 76+  852E 56 45 20 45
 76+  8532 41 52 4E 45
 76+  8536 44 FF
 77+  8538              string_endlevel_bonus1:
 78+  8538 09 0D 53 49      defb 9,13,'SINGLE BONUS',255
 78+  853C 4E 47 4C 45
 78+  8540 20 42 4F 4E
 78+  8544 55 53 FF
 79+  8547              string_endlevel_bonus2:
 80+  8547 09 0D 44 4F      defb 9,13,'DOUBLE BONUS',255
 80+  854B 55 42 4C 45
 80+  854F 20 42 4F 4E
 80+  8553 55 53 FF
 81+  8556              string_endlevel_bonus3:
 82+  8556 09 0D 54 52      defb 9,13,'TRIPLE BONUS',255
 82+  855A 49 50 4C 45
 82+  855E 20 42 4F 4E
 82+  8562 55 53 FF
 83+  8565              string_endlevel_points1:
 84+  8565 0A 0F 35 30      defb 10,15,'5000 POINTS',255
 84+  8569 30 30 20 50
 84+  856D 4F 49 4E 54
 84+  8571 53 FF
 85+  8573              string_endlevel_points2:
 86+  8573 09 0F 31 30      defb 9,15,'10000 POINTS',255
 86+  8577 30 30 30 20
 86+  857B 50 4F 49 4E
 86+  857F 54 53 FF
 87+  8582              string_endlevel_points3:
 88+  8582 09 0F 31 35      defb 9,15,'15000 POINTS',255
 88+  8586 30 30 30 20
 88+  858A 50 4F 49 4E
 88+  858E 54 53 FF
 89+  8591              string_endlevel_anothergo:
 90+  8591 08 12 48 41      defb 8,18,'HAVE ANOTHER GO',255
 90+  8595 56 45 20 41
 90+  8599 4E 4F 54 48
 90+  859D 45 52 20 47
 90+  85A1 4F FF
 91+  85A3
 92+  85A3              string_zonk:
 93+  85A3 00 00 5A 4F      defb 0,0,'ZONK!!',255
 93+  85A7 4E 4B 21 21
 93+  85AB FF
 94+  85AC
 95+  85AC
 96+  85AC              string_options_title:
 97+  85AC 0D 03 54 48      defb 13,3,'THE PIT',255
 97+  85B0 45 20 50 49
 97+  85B4 54 FF
 98+  85B6              string_options_1player:
 99+  85B6 09 06 31 2E      defb 9,6,'1. ONE PLAYER',255
 99+  85BA 20 4F 4E 45
 99+  85BE 20 50 4C 41
 99+  85C2 59 45 52 FF
100+  85C6              string_options_2player:
101+  85C6 09 07 32 2E      defb 9,7,'2. TWO PLAYER',255
101+  85CA 20 54 57 4F
101+  85CE 20 50 4C 41
101+  85D2 59 45 52 FF
102+  85D6              string_options_keyboard:
103+  85D6 09 08 33 2E      defb 9,8,'3. KEYS (QAOPSp)',255
103+  85DA 20 4B 45 59
103+  85DE 53 20 28 51
103+  85E2 41 4F 50 53
103+  85E6 70 29 FF
104+  85E9              string_options_joystick:
105+  85E9 09 09 34 2E      defb 9,9,'4. KEMPSTON',255
105+  85ED 20 4B 45 4D
105+  85F1 50 53 54 4F
105+  85F5 4E FF
106+  85F7              string_options_start:
107+  85F7 09 0A 35 2E      defb 9,10,'5. START',255
107+  85FB 20 53 54 41
107+  85FF 52 54 FF
108+  8602              string_options_vanity:
109+  8602 08 16 53 70      defb 8,22,'Spectrum Conversion',254
109+  8606 65 63 74 72
109+  860A 75 6D 20 43
109+  860E 6F 6E 76 65
109+  8612 72 73 69 6F
109+  8616 6E FE
110+  8618 07 17 62 79      defb 7,23,'by Dave Tansley, 2020',255
110+  861C 20 44 61 76
110+  8620 65 20 54 61
110+  8624 6E 73 6C 65
110+  8628 79 2C 20 32
110+  862C 30 32 30 FF
111+  8630
112+  8630              ;
113+  8630              ; Prints specified string
114+  8630              ; Inputs:
115+  8630              ; de: pointer to string
116+  8630              ; bc: length of string
117+  8630              ;
118+  8630              ; Print String Data
119+  8630              ; First two bytes of string contain X and Y char position, then the string
120+  8630              ; Individual strings are terminated with 0xFE
121+  8630              ; End of data is terminated with 0xFF
122+  8630              ; HL: Address of string
123+  8630              ;
124+  8630 5E           string_print:           LD E,(HL)                       ; Fetch the X coordinate
125+  8631 23                                   INC HL                          ; Increase HL to the next memory location
126+  8632 56                                   LD D,(HL)                       ; Fetch the Y coordinate
127+  8633 23                                   INC HL                          ; Increase HL to the next memory location
128+  8634 CD 47 86                             CALL string_getcharaddress           ; Calculate the screen address (in DE)
129+  8637 7E           string_print_0:         LD A,(HL)                       ; Fetch the character to print
130+  8638 23                                   INC HL                          ; Increase HL to the next character
131+  8639 FE FE                                CP 0xFE                         ; Compare with 0xFE
132+  863B 28 F3                                JR Z,string_print               ; If it is equal to 0xFE then loop back to print next string
133+  863D D0                                   RET NC                          ; If it is greater or equal to (carry bit set) then
134+  863E E5                                   PUSH HL                         ; Push HL on stack (Print_Char will not preserve HL)
135+  863F CD 57 86                             CALL Print_Char                 ; Print the character
136+  8642 E1                                   POP HL                          ; Retrieve HL back off the stack
137+  8643 1C                                   INC E                           ; Go to the next screen address
138+  8644 18 F1                                JR string_print_0               ; Loop back to print next character
139+  8646 C9                                   RET
140+  8647
141+  8647              ; Get screen address
142+  8647              ; D = Y character position
143+  8647              ; E = X character position
144+  8647              ; Returns address in DE
145+  8647              ;
146+  8647 7A           string_getcharaddress:       LD A,D
147+  8648 E6 07                                AND %00000111
148+  864A 1F                                   RRA
149+  864B 1F                                   RRA
150+  864C 1F                                   RRA
151+  864D 1F                                   RRA
152+  864E B3                                   OR E
153+  864F 5F                                   LD E,A
154+  8650 7A                                   LD A,D
155+  8651 E6 18                                AND %00011000
156+  8653 F6 40                                OR %01000000
157+  8655 57                                   LD D,A
158+  8656 C9                                   RET                             ; Returns screen address in DE
159+  8657
160+  8657              ; Print a single character out
161+  8657              ; A:  Character to print
162+  8657              ; DE: Screen address to print character at
163+  8657              ;
164+  8657 2A 36 5C     Print_Char:             LD HL,(23606)                    ; Address of character set table in ROM
165+  865A 06 00                                LD B,0                          ; Set BC to A
166+  865C 4F                                   LD C,A
167+  865D E6 FF                                AND 0xFF                        ; Clear the carry bit
168+  865F CB 11                                RL C                            ; Multiply BC by 8 (shift left 3 times)
169+  8661 CB 10                                RL B
170+  8663 CB 11                                RL C
171+  8665 CB 10                                RL B
172+  8667 CB 11                                RL C
173+  8669 CB 10                                RL B
174+  866B 09                                   ADD HL,BC                       ; Get the character address in HL
175+  866C 0E 08                                LD C,8                          ; Loop counter
176+  866E D5                                   PUSH DE
177+  866F 7E           Print_Char_1:           LD A,(HL)                       ; Get the byte from the ROM into A
178+  8670 12                                   LD (DE),A                       ; Stick A onto the screen
179+  8671 14                                   INC D                           ; Goto next line on screen
180+  8672 23                                   INC HL                           ; Goto next byte of character
181+  8673 0D                                   DEC C                           ; Decrease the loop counter
182+  8674 20 F9                                JR NZ,Print_Char_1              ; Loop around whilst it is Not Zero (NZ)
183+  8676 D1                                   POP DE
184+  8677 C9                                   RET                             ; Return from the subroutine
# file closed: strings.asm
140   8678                  include "screen\buffer.asm"
# file opened: screen/buffer.asm
  1+  8678              buffer_buffer:
  2+  8678 00 00 00...      defs 7424                   ; area reserved for screen
  3+  A378
  4+  A378              buffer_attr_buffer:
  5+  A378 00 00 00...      defs 928                    ; attrs buffer area
  6+  A718
  7+  A718              buffer_tmp:
  8+  A718 00 00            defb 0,0                    ; temp area
  9+  A71A
 10+  A71A              ;
 11+  A71A              ; This list stores lines to be updated by the buffer.
 12+  A71A              ; This is done by half line. Lines are encded with.
 13+  A71A              ; 00hlllll
 14+  A71A              ; Where h is the half of the screen (0 or 1), lllll is the line number
 15+  A71A              buffer_updatedlines:
 16+  A71A FF FF FF...      defs 21,255
 17+  A72F
 18+  A72F              buffer_updateall:
 19+  A72F 00               defb 0
 20+  A730
 21+  A730              ;
 22+  A730              ; Stores a line number in the update list
 23+  A730              ; Inputs:
 24+  A730              ; a - row number
 25+  A730              buffer_marklineforupdate:
 26+  A730 FE 15            cp 21
 27+  A732 D0               ret nc                          ; dont store lines that we shouldn't draw
 28+  A733 5F               ld e,a                          ; store in e
 29+  A734 ED 4B 2B AC      ld bc,(origcoords)              ; this should hold the coords of what was drawn
 30+  A738 79               ld a,c                          ; get the horiz coord
 31+  A739 FE 0F            cp 15
 32+  A73B CA 52 A7         jp z,buffer_marklineforupdate3  ; if 15 or 16, store both halves
 33+  A73E FE 10            cp 16                           ; if this is 15 or less, the first half of screen
 34+  A740 CA 52 A7         jp z,buffer_marklineforupdate3  ; if 15 or 16, store both halves
 35+  A743 DA 4E A7         jp c,buffer_marklineforupdate4  ; if first half, nothing to do
 36+  A746 78               ld a,b                          ; get the vertical
 37+  A747 3E 20            ld a,32                         ; set the 6th bit by adding 32
 38+  A749 83               add a,e
 39+  A74A 5F               ld e,a                          ; store this value
 40+  A74B C3 59 A7         jp buffer_marklineforupdate2
 41+  A74E              buffer_marklineforupdate4:
 42+  A74E 78               ld a,b
 43+  A74F C3 59 A7         jp buffer_marklineforupdate2    ; just get the vertical
 44+  A752              buffer_marklineforupdate3:          ; special case for 15,16 - need to render both halves, since might be between
 45+  A752 CD 5D A7         call buffer_storelineforupdate  ; call store update for e
 46+  A755 3E 20            ld a,32
 47+  A757 83               add a,e
 48+  A758 5F               ld e,a
 49+  A759              buffer_marklineforupdate2:
 50+  A759 CD 5D A7         call buffer_storelineforupdate  ; call store update for e
 51+  A75C C9               ret
 52+  A75D
 53+  A75D
 54+  A75D              ;
 55+  A75D              ; Stores the calculated line and half if needed
 56+  A75D              ; Inputs:
 57+  A75D              ; e - half/row
 58+  A75D              ;
 59+  A75D              buffer_storelineforupdate:
 60+  A75D 06 15            ld b,21
 61+  A75F 21 1A A7         ld hl,buffer_updatedlines
 62+  A762              buffer_storelineforupdate0:
 63+  A762 7E               ld a,(hl)                       ; get the line stored in updated lines
 64+  A763 BB               cp e                            ; is this the same as the row number passed in?
 65+  A764 C8               ret z                           ; if so, don't need to do anything
 66+  A765 FE FF            cp 255                          ; is this 255, ie the end of the buffer
 67+  A767 C2 6C A7         jp nz,buffer_storelineforupdate1 ; if not, move to next
 68+  A76A 73               ld (hl),e
 69+  A76B C9               ret
 70+  A76C              buffer_storelineforupdate1:
 71+  A76C 23               inc hl
 72+  A76D 10 F3            djnz buffer_storelineforupdate0
 73+  A76F C9               ret
 74+  A770
 75+  A770              ;
 76+  A770              ; Zeroes the updated lines list
 77+  A770              ;
 78+  A770              buffer_clearlist:
 79+  A770 06 15            ld b,21
 80+  A772 21 1A A7         ld hl,buffer_updatedlines
 81+  A775              buffer_clearlist0:
 82+  A775 36 FF            ld (hl),255
 83+  A777 23               inc hl
 84+  A778 10 FB            djnz buffer_clearlist0
 85+  A77A C9               ret
 86+  A77B
 87+  A77B              ;
 88+  A77B              ; Which half are we displaying? 0 left 1 right
 89+  A77B              ;
 90+  A77B              buffer_bufferhalf:
 91+  A77B 00               defb 0
 92+  A77C
 93+  A77C              ;
 94+  A77C              ; Copies the buffer to the screen. Use stack.
 95+  A77C              ; Inputs:
 96+  A77C              ; hl - half/line number to display - 0 is first half, 0 is first line
 97+  A77C              ;
 98+  A77C              buffer_bufferlinetoscreen:
 99+  A77C 7C               ld a,h
100+  A77D 32 7B A7         ld (buffer_bufferhalf),a        ; store the half
101+  A780 7D               ld a,l
102+  A781 4F               ld c,a                          ; store a
103+  A782 ED 5B E2 A8      ld de,(screen_offset)          ; load the screen offset, this is in rows, want it *256
104+  A786 83               add a,e                       ; add the row number
105+  A787 11 00 01         ld de,256
106+  A78A CD 03 81         call utilities_multiply
107+  A78D 54 5D            ld de,hl
108+  A78F 21 78 86         ld hl,buffer_buffer
109+  A792 19               add hl,de                   ; add the offset
110+  A793 79               ld a,c                      ; get original row back
111+  A794 ED 73 07 A8      ld (buffer_bufferlinetoscreen3+1),sp ; this is some self-modifying code; stores the stack pointer in an ld sp,nn instruction at the end
112+  A798 D9               exx
113+  A799 0E 00            ld c,0                      ; zero horizontal
114+  A79B 47               ld b,a                      ; load the row number into vertical coord
115+  A79C 04               inc b
116+  A79D 04               inc b                       ; move forward 2 to allow for scores
117+  A79E CD DA A9         call screen_getcelladdress  ; get the memory into de
118+  A7A1 21 10 00         ld hl,16                    ; offset by 16 chars to get to the centre, since populating stack from right
119+  A7A4 19               add hl,de
120+  A7A5 3A 7B A7         ld a,(buffer_bufferhalf)    ; get the half
121+  A7A8 FE 01            cp 1
122+  A7AA CA D7 A7         jp z,buffer_bufferlinetoscreen4
123+  A7AD              buffer_bufferlinetoscreen0:     ; PROCESS THE LEFT HALF
124+  A7AD D9               exx                         ; hl is now buffer
125+  A7AE 23               inc hl
126+  A7AF 23               inc hl                      ; move hl forward 2 to skip first two blocks
127+  A7B0 F9               ld sp,hl                    ; do first fourteen for left hand side, sp pointing at buffer
128+  A7B1 F1               pop af
129+  A7B2 C1               pop bc
130+  A7B3 D1               pop de
131+  A7B4 DD E1            pop ix
132+  A7B6 D9               exx                         ; hl is now screen
133+  A7B7 08               ex af,af'
134+  A7B8 F1               pop af
135+  A7B9 C1               pop bc
136+  A7BA D1               pop de
137+  A7BB F9               ld sp,hl                    ; sp pointing at screen
138+  A7BC D5               push de
139+  A7BD C5               push bc
140+  A7BE F5               push af
141+  A7BF 08               ex af,af'
142+  A7C0 D9               exx                         ; hl is now buffer
143+  A7C1 DD E5            push ix
144+  A7C3 D5               push de
145+  A7C4 C5               push bc
146+  A7C5 F5               push af
147+  A7C6 11 1E 00         ld de,30                    ; add thirty to get to next line
148+  A7C9 19               add hl,de
149+  A7CA F9               ld sp,hl                    ; sp pointing at buffer
150+  A7CB D9               exx                         ; hl is now screen
151+  A7CC 08               ex af,af'
152+  A7CD 24               inc h
153+  A7CE 7C               ld a,h
154+  A7CF E6 07            and 0x07                    ; check if this is multiple of 8, if so, end of cell line
155+  A7D1 C2 AD A7         jp nz,buffer_bufferlinetoscreen0 ; next line in cell
156+  A7D4              buffer_bufferlinetoscreen1:
157+  A7D4 C3 06 A8         jp buffer_bufferlinetoscreen3
158+  A7D7              buffer_bufferlinetoscreen4:     ; PROCESS THE RIGHT HALF
159+  A7D7 D9               exx                         ; hl is buffer
160+  A7D8 11 10 00         ld de,16
161+  A7DB 19               add hl,de                   ; move halfway across
162+  A7DC D9               exx                         ; hl is screen
163+  A7DD 11 0E 00         ld de,14
164+  A7E0 19               add hl,de
165+  A7E1              buffer_bufferlinetoscreen2:
166+  A7E1 D9               exx                         ; hl is now buffer
167+  A7E2 F9               ld sp,hl                    ; do first fourteen for right hand side, sp pointing at buffer
168+  A7E3 F1               pop af
169+  A7E4 C1               pop bc
170+  A7E5 D1               pop de
171+  A7E6 DD E1            pop ix
172+  A7E8 D9               exx                         ; hl is now screen
173+  A7E9 08               ex af,af'
174+  A7EA F1               pop af
175+  A7EB C1               pop bc
176+  A7EC D1               pop de
177+  A7ED F9               ld sp,hl                    ; sp pointing at screen
178+  A7EE D5               push de
179+  A7EF C5               push bc
180+  A7F0 F5               push af
181+  A7F1 08               ex af,af'
182+  A7F2 D9               exx                         ; hl is now buffer
183+  A7F3 DD E5            push ix
184+  A7F5 D5               push de
185+  A7F6 C5               push bc
186+  A7F7 F5               push af
187+  A7F8 11 20 00         ld de,32                    ; add thirty two to get to next line
188+  A7FB 19               add hl,de
189+  A7FC F9               ld sp,hl                    ; sp pointing at buffer
190+  A7FD D9               exx                         ; hl is now screen
191+  A7FE 08               ex af,af'
192+  A7FF 24               inc h
193+  A800 7C               ld a,h
194+  A801 E6 07            and 0x07                    ; check if this is multiple of 8, if so, end of cell line
195+  A803 C2 E1 A7         jp nz,buffer_bufferlinetoscreen2 ; next line in cell
196+  A806              buffer_bufferlinetoscreen3:
197+  A806 31 00 00         ld sp,0
198+  A809 D9               exx
199+  A80A C9               ret
200+  A80B
201+  A80B              ;
202+  A80B              ; Copies the buffer to the screen for updated lines. Use stack.
203+  A80B              ; Inputs: none
204+  A80B              ;
205+  A80B              buffer_buffertoscreen:
206+  A80B 3A 2F A7         ld a,(buffer_updateall)      ; get the all update flag
207+  A80E FE 00            cp 0
208+  A810 CA 1C A8         jp z,buffer_buffertoscreen2  ; if not set, draw only updated
209+  A813 CD 4C A8         call buffer_allbuffertoscreen ; otherwise, draw whole screen
210+  A816 21 2F A7         ld hl,buffer_updateall
211+  A819 36 00            ld (hl),0                    ; reset flag
212+  A81B C9               ret
213+  A81C              buffer_buffertoscreen2:
214+  A81C 06 15            ld b,21
215+  A81E FD 21 1A A7      ld iy,buffer_updatedlines    ; the location of the updated lines
216+  A822              buffer_buffertoscreen0:
217+  A822 FD 7E 00         ld a,(iy)
218+  A825 FE FF            cp 255
219+  A827 CA 4B A8         jp z,buffer_buffertoscreen1                       ; if this is 255, then we're at the end of the updated list
220+  A82A 6F               ld l,a
221+  A82B 26 00            ld h,0
222+  A82D E6 20            and 32                      ; and with 32 to see if 6th bit is set
223+  A82F FE 20            cp 32                       ; if so, second half of screen
224+  A831 C2 3C A8         jp nz,buffer_buffertoscreen3
225+  A834 26 01            ld h,1                      ; store half in h
226+  A836 FD 7E 00         ld a,(iy)
227+  A839 D6 20            sub 32                      ; remove 32
228+  A83B 6F               ld l,a                      ; stor in line number
229+  A83C              buffer_buffertoscreen3:
230+  A83C C5               push bc
231+  A83D FD E5            push iy
232+  A83F F3               di
233+  A840 CD 7C A7         call buffer_bufferlinetoscreen      ; hl has h=half (0 or 1), l=line
234+  A843 FB               ei
235+  A844 FD E1            pop iy
236+  A846 C1               pop bc
237+  A847 FD 23            inc iy
238+  A849 10 D7            djnz buffer_buffertoscreen0
239+  A84B              buffer_buffertoscreen1:
240+  A84B                  ;call buffer_buffertoattrsfast
241+  A84B C9               ret
242+  A84C
243+  A84C              ;
244+  A84C              ; Copies the buffer to the screen. Use stack.
245+  A84C              ; Inputs: none
246+  A84C              ;
247+  A84C              buffer_allbuffertoscreen:
248+  A84C 06 15            ld b,21
249+  A84E 3E 00            ld a,0
250+  A850              buffer_allbuffertoscreen0:
251+  A850 C5               push bc
252+  A851 F5               push af
253+  A852 F3               di
254+  A853 26 00            ld h,0
255+  A855 6F               ld l,a
256+  A856 CD 7C A7         call buffer_bufferlinetoscreen
257+  A859 FB               ei
258+  A85A F1               pop af
259+  A85B F5               push af
260+  A85C F3               di
261+  A85D 26 01            ld h,1
262+  A85F 6F               ld l,a
263+  A860 CD 7C A7         call buffer_bufferlinetoscreen
264+  A863 FB               ei
265+  A864 F1               pop af
266+  A865 C1               pop bc
267+  A866 3C               inc a
268+  A867 10 E7            djnz buffer_allbuffertoscreen0
269+  A869 F3               di
270+  A86A CD 6F A8         call buffer_buffertoattrsfast
271+  A86D FB               ei
272+  A86E C9               ret
273+  A86F
274+  A86F              ;
275+  A86F              ; Copies the attrs buffer to screen with the stack
276+  A86F              ;
277+  A86F              buffer_buffertoattrsfast:
278+  A86F ED 73 DE A8      ld (buffer_buffertoattrsfast1+1),sp ; this is some self-modifying code; stores the stack pointer in an ld sp,nn instruction at the end
279+  A873 3A E2 A8         ld a,(screen_offset)            ; get the screen offset in rows, so want *32
280+  A876 11 20 00         ld de,32
281+  A879 CD 03 81         call utilities_multiply
282+  A87C 54 5D            ld de,hl
283+  A87E 21 78 A3         ld hl,buffer_attr_buffer
284+  A881 19               add hl,de                       ; add the offset, start of attr buffer now in hl
285+  A882 D9               exx
286+  A883 21 50 58         ld hl,22528+80                  ; start of attr memory + 2 lines for score + 16 to start at right side
287+  A886 FD 21 18 A7      ld iy,buffer_tmp
288+  A88A FD 36 00 15      ld (iy),21              ; number of times to loop
289+  A88E              buffer_buffertoattrsfast0:
290+  A88E D9               exx                         ; hl is now buffer
291+  A88F 23               inc hl
292+  A890 23               inc hl                      ; move hl forward 2 to skip first two blocks
293+  A891 F9               ld sp,hl                    ; do first fourteen for left hand side, sp pointing at buffer
294+  A892 F1               pop af
295+  A893 C1               pop bc
296+  A894 D1               pop de
297+  A895 DD E1            pop ix
298+  A897 D9               exx                         ; hl is now screen
299+  A898 08               ex af,af'
300+  A899 F1               pop af
301+  A89A C1               pop bc
302+  A89B D1               pop de
303+  A89C F9               ld sp,hl                    ; sp pointing at screen
304+  A89D D5               push de
305+  A89E C5               push bc
306+  A89F F5               push af
307+  A8A0 08               ex af,af'
308+  A8A1 D9               exx                         ; hl is now buffer
309+  A8A2 DD E5            push ix
310+  A8A4 D5               push de
311+  A8A5 C5               push bc
312+  A8A6 F5               push af
313+  A8A7 1E 0E            ld e,14                    ; do another fourteen for right hand side
314+  A8A9 16 00            ld d,0
315+  A8AB 19               add hl,de
316+  A8AC F9               ld sp,hl                    ; sp pointing at buffer
317+  A8AD F1               pop af
318+  A8AE C1               pop bc
319+  A8AF D1               pop de
320+  A8B0 DD E1            pop ix
321+  A8B2 D9               exx                         ; hl is now screen
322+  A8B3 08               ex af,af'
323+  A8B4 1E 0E            ld e,14
324+  A8B6 16 00            ld d,0
325+  A8B8 19               add hl,de
326+  A8B9 F1               pop af
327+  A8BA C1               pop bc
328+  A8BB D1               pop de
329+  A8BC F9               ld sp,hl                    ; sp pointing at screen
330+  A8BD D5               push de
331+  A8BE C5               push bc
332+  A8BF F5               push af
333+  A8C0 08               ex af,af'
334+  A8C1 D9               exx                         ; hl is now buffer
335+  A8C2 DD E5            push ix
336+  A8C4 D5               push de
337+  A8C5 C5               push bc
338+  A8C6 F5               push af
339+  A8C7 1E 10            ld e,16
340+  A8C9 16 00            ld d,0
341+  A8CB 19               add hl,de
342+  A8CC D9               exx                         ; hl is now screen
343+  A8CD 11 12 00         ld de,18
344+  A8D0 19               add hl,de
345+  A8D1 FD 7E 00         ld a,(iy)
346+  A8D4 3D               dec a
347+  A8D5 FE 00            cp 0
348+  A8D7 FD 77 00         ld (iy),a
349+  A8DA C2 8E A8         jp nz,buffer_buffertoattrsfast0 ; do another row
350+  A8DD              buffer_buffertoattrsfast1:
351+  A8DD 31 00 00         ld sp,0
352+  A8E0 D9               exx
353+  A8E1 C9               ret
# file closed: screen/buffer.asm
141   A8E2                  include "screen\screen.asm"
# file opened: screen/screen.asm
  1+  A8E2              screen_offset:
  2+  A8E2 00               defb 0                      ; offset from top of screen in lines
  3+  A8E3
  4+  A8E3              screen_tmp:
  5+  A8E3 00 00            defb 0,0                      ; temporary memory
  6+  A8E5
  7+  A8E5              screen_setscorecolours:
  8+  A8E5 21 E0 B8         ld hl,score_colours
  9+  A8E8 11 00 58         ld de,22528                     ; attrs here
 10+  A8EB 01 40 00         ld bc,64
 11+  A8EE ED B0            ldir
 12+  A8F0 C9               ret
 13+  A8F1
 14+  A8F1              screen_sethighscorecolours:
 15+  A8F1 21 20 B9         ld hl,high_score_colours
 16+  A8F4 11 E0 5A         ld de,22528+736                 ; attrs here
 17+  A8F7 01 20 00         ld bc,32
 18+  A8FA ED B0            ldir
 19+  A8FC C9               ret
 20+  A8FD
 21+  A8FD              ; Draw the screen
 22+  A8FD              ; Inputs:
 23+  A8FD              ; none
 24+  A8FD              ; Notes:
 25+  A8FD              ; The value held at screen_offset tells the screen how many rows to scroll down. Set to five to bottom out.
 26+  A8FD              screen_draw:
 27+  A8FD                  ;call clear_screen
 28+  A8FD 0E 00            ld c,0                      ; horiz
 29+  A8FF 06 00            ld b,0                      ; vert, 0 at top
 30+  A901 DD 21 BB B2      ld ix,level_layout               ; point ix at level data
 31+  A905 FD 21 78 A3      ld iy,buffer_attr_buffer    ; point iy at attr data
 32+  A909              screen_draw0:
 33+  A909 DD 7E 00         ld a,(ix)                   ; load the block number
 34+  A90C C5               push bc                     ; store bc, contains loop count
 35+  A90D CD C8 AA         call screen_getattr         ; get the memory location for this cell's attr into hl
 36+  A910 7E               ld a,(hl)                   ; get the attr value at the address
 37+  A911 FD 77 00         ld (iy),a                   ; load the attr into memory
 38+  A914 DD 7E 00         ld a,(ix)                   ; load the block number
 39+  A917 CD 8F AA         call screen_getblock        ; get the block data into hl
 40+  A91A CD 6C AA         call screen_showchar        ; show this character here
 41+  A91D C1               pop bc                      ; get the loop counter back
 42+  A91E DD 23            inc ix                      ; increment level location
 43+  A920 FD 23            inc iy                      ; increment attr location
 44+  A922 0C               inc c                       ; increment horiz
 45+  A923 79               ld a,c
 46+  A924 FE 20            cp 32                       ; check if horiz has reach edge of screen
 47+  A926 C2 09 A9         jp nz,screen_draw0          ; if not, loop
 48+  A929 0E 00            ld c,0                      ; if so, reset horiz
 49+  A92B 04               inc b                       ; increment vertical
 50+  A92C 78               ld a,b
 51+  A92D FE 1D            cp 29                       ; check if at bottom
 52+  A92F C2 09 A9         jp nz,screen_draw0          ; if not, loop
 53+  A932 21 E3 A8         ld hl, screen_tmp
 54+  A935 36 09            ld (hl),9                   ; load the block number into memory
 55+  A937 DD 2A F0 C4      ld ix,(game_current_rocks)  ; current rock memory
 56+  A93B CD AA A9         call screen_initobjects     ; draw rocks
 57+  A93E 21 E3 A8         ld hl, screen_tmp
 58+  A941 36 0C            ld (hl),12                  ; load the block number into memory
 59+  A943 DD 21 42 B8      ld ix,level_missiles       ; missile memory
 60+  A947 CD AA A9         call screen_initobjects     ; draw missiles
 61+  A94A 21 E3 A8         ld hl, screen_tmp
 62+  A94D 36 08            ld (hl),08                  ; load the block number into memory
 63+  A94F DD 21 BB B8      ld ix,level_diamonds       ; diamond memory
 64+  A953 CD AA A9         call screen_initobjects     ; draw diamonds
 65+  A956 21 E3 A8         ld hl, screen_tmp
 66+  A959 36 0E            ld (hl),14                  ; load the block number into memory
 67+  A95B DD 21 CB B8      ld ix,level_gems           ; gems memory
 68+  A95F CD AA A9         call screen_initobjects     ; draw gems
 69+  A962 CD 69 A9         call screen_setuptext       ; draws text on the screen
 70+  A965 CD 64 CD         call scores_printscores     ; print the current scores
 71+  A968 C9               ret
 72+  A969
 73+  A969              ;
 74+  A969              ; Sets up text on the screen
 75+  A969              ;
 76+  A969              screen_setuptext:
 77+  A969 CD C0 CD         call scores_showtable
 78+  A96C CD F1 A8         call screen_sethighscorecolours
 79+  A96F 21 CF 81         ld hl, string_score1
 80+  A972 CD 30 86         call string_print
 81+  A975 21 D8 81         ld hl, string_scorenumbers1
 82+  A978 CD 30 86         call string_print
 83+  A97B 21 E1 81         ld hl, string_company
 84+  A97E CD 30 86         call string_print
 85+  A981 21 01 82         ld hl, string_score2
 86+  A984 CD 30 86         call string_print
 87+  A987 21 0A 82         ld hl, string_scorenumbers2
 88+  A98A CD 30 86         call string_print
 89+  A98D 3A EC C4         ld a,(game_currentplayer)
 90+  A990 FE 01            cp 1
 91+  A992 C2 9B A9         jp nz,screen_setuptext0
 92+  A995 21 EB 81         ld hl, string_player1
 93+  A998 C3 9E A9         jp screen_setuptext1
 94+  A99B              screen_setuptext0:
 95+  A99B 21 F6 81         ld hl, string_player2
 96+  A99E              screen_setuptext1:
 97+  A99E CD 30 86         call string_print
 98+  A9A1 CD E5 A8         call screen_setscorecolours
 99+  A9A4 C9               ret
100+  A9A5
101+  A9A5              ;
102+  A9A5              ; Sets a line of colours
103+  A9A5              ; Inputs:
104+  A9A5              ; a - colour to set
105+  A9A5              ; b - number to set
106+  A9A5              ; de - start memory location
107+  A9A5              ;
108+  A9A5              screen_setcolours:
109+  A9A5 12               ld (de),a
110+  A9A6 13               inc de
111+  A9A7 10 FC            djnz screen_setcolours
112+  A9A9 C9               ret
113+  A9AA
114+  A9AA              ;
115+  A9AA              ; Draw initial object positions
116+  A9AA              ; Inputs:
117+  A9AA              ; ix - memory location of objects
118+  A9AA              ; a - graphic
119+  A9AA              screen_initobjects:
120+  A9AA DD 4E 00         ld c,(ix)                   ; get the horiz coord
121+  A9AD 79               ld a,c
122+  A9AE FE FF            cp 255
123+  A9B0 CA D9 A9         jp z,screen_initobjects2
124+  A9B3 DD 23            inc ix                      ; move to next
125+  A9B5 DD 46 00         ld b,(ix)                   ; get the vert coord
126+  A9B8 DD 23            inc ix
127+  A9BA CD EB A9         call screen_getcellattradress ; get the memory address of b,c attr into de
128+  A9BD D5               push de
129+  A9BE 3A E3 A8         ld a,(screen_tmp)                  ; get the block number back
130+  A9C1 CD C8 AA         call screen_getattr         ; get the memory location for this cell's attr into hl
131+  A9C4 D1               pop de
132+  A9C5 7E               ld a,(hl)                   ; get the attr value at the address
133+  A9C6 12               ld (de),a                   ; load the attr into memory
134+  A9C7 3A E3 A8         ld a,(screen_tmp)                  ; get the block number back
135+  A9CA CD 8F AA         call screen_getblock        ; get the block data into hl
136+  A9CD CD 6C AA         call screen_showchar        ; show this character here
137+  A9D0
138+  A9D0              screen_initobjects1:
139+  A9D0 DD 23            inc ix                      ; move past state
140+  A9D2 DD 23            inc ix
141+  A9D4 DD 23            inc ix                      ; move past mem
142+  A9D6 C3 AA A9         jp screen_initobjects
143+  A9D9              screen_initobjects2:
144+  A9D9 C9               ret
145+  A9DA
146+  A9DA
147+  A9DA              ;
148+  A9DA              ; Return character cell address offset of block at (b, c) ready for addition to screen  memory.
149+  A9DA              ; Inputs:
150+  A9DA              ; bc: coords
151+  A9DA              ; Outputs:
152+  A9DA              ; de: memory location
153+  A9DA              ;
154+  A9DA              screen_getcelladdress:
155+  A9DA 78               ld a,b      ; vertical position.
156+  A9DB E6 18            and 24      ; which segment, 0, 1 or 2?
157+  A9DD C6 40            add a,64    ; 64*256 = 16384, Spectrum's screen memory.
158+  A9DF 57               ld d,a      ; this is our high byte.
159+  A9E0 78               ld a,b      ; what was that vertical position again?
160+  A9E1 E6 07            and 7       ; which row within segment?
161+  A9E3 0F               rrca        ; multiply row by 32.
162+  A9E4 0F               rrca
163+  A9E5 0F               rrca
164+  A9E6 5F               ld e,a      ; low byte.
165+  A9E7 79               ld a,c      ; add on y coordinate.
166+  A9E8 83               add a,e     ; mix with low byte.
167+  A9E9 5F               ld e,a      ; address of screen position in de.
168+  A9EA C9               ret
169+  A9EB
170+  A9EB              ;
171+  A9EB              ; Calculate buffer address of attribute for character at (b, c).
172+  A9EB              ; Inputs:
173+  A9EB              ; bc: coords
174+  A9EB              ; Outputs:
175+  A9EB              ; de: memory location
176+  A9EB              ;
177+  A9EB              screen_getcellattradress:
178+  A9EB 11 78 A3         ld de,buffer_attr_buffer ; memory is at base + horiz (c) + vert*32 (b)
179+  A9EE 69               ld l,c      ; x position.
180+  A9EF 26 00            ld h,0      ; 0 h
181+  A9F1 19               add hl,de
182+  A9F2 54 5D            ld de,hl    ; horiz done
183+  A9F4 78               ld a,b      ; do vert
184+  A9F5 D5               push de
185+  A9F6 C5               push bc
186+  A9F7 11 20 00         ld de,32
187+  A9FA CD 03 81         call utilities_multiply
188+  A9FD C1               pop bc
189+  A9FE D1               pop de
190+  A9FF 19               add hl,de
191+  AA00 54 5D            ld de,hl    ; vert done
192+  AA02 C9               ret
193+  AA03
194+  AA03              ;
195+  AA03              ; Calculate buffer address offset of attribute for character at (b, c).
196+  AA03              ; Inputs:
197+  AA03              ; bc: coords
198+  AA03              ; Outputs:
199+  AA03              ; de: memory location
200+  AA03              ;
201+  AA03              screen_getcellattroffset:
202+  AA03 69               ld l,c      ; x position.
203+  AA04 26 00            ld h,0      ; 0 h
204+  AA06 54 5D            ld de,hl    ; horiz done
205+  AA08 78               ld a,b      ; do vert
206+  AA09 D5               push de
207+  AA0A C5               push bc
208+  AA0B 11 20 00         ld de,32
209+  AA0E CD 03 81         call utilities_multiply
210+  AA11 C1               pop bc
211+  AA12 D1               pop de
212+  AA13 19               add hl,de
213+  AA14 54 5D            ld de,hl    ; vert done
214+  AA16 C9               ret
215+  AA17
216+  AA17              ;
217+  AA17              ; Calculate buffer address of attribute for character at (b, c).
218+  AA17              ; Inputs:
219+  AA17              ; bc: coords
220+  AA17              ; Outputs:
221+  AA17              ; de: memory location
222+  AA17              ;
223+  AA17              screen_getscreenattradress:
224+  AA17 11 00 58         ld de,22528 ; memory is at base + horiz (c) + vert*32 (b)
225+  AA1A 69               ld l,c      ; x position.
226+  AA1B 26 00            ld h,0      ; 0 h
227+  AA1D 19               add hl,de
228+  AA1E 54 5D            ld de,hl    ; horiz done
229+  AA20 78               ld a,b      ; do vert
230+  AA21 D5               push de
231+  AA22 C5               push bc
232+  AA23 11 20 00         ld de,32
233+  AA26 CD 03 81         call utilities_multiply
234+  AA29 C1               pop bc
235+  AA2A D1               pop de
236+  AA2B 19               add hl,de
237+  AA2C 54 5D            ld de,hl    ; vert done
238+  AA2E C9               ret
239+  AA2F
240+  AA2F              ;
241+  AA2F              ; Gets the attr memory location for a screen coord
242+  AA2F              ; Will overwrite bc
243+  AA2F              ; Inputs:
244+  AA2F              ; bc - screen coords
245+  AA2F              ; Outputs:
246+  AA2F              ; de - memory location
247+  AA2F              ; bc - character coords
248+  AA2F              ;
249+  AA2F              screen_getattraddressfromscreencoords:
250+  AA2F 78               ld a,b                          ; get the player block coords of current block
251+  AA30 E6 F8            and 248                         ; find closest multiple of eight
252+  AA32 0F               rrca
253+  AA33 0F               rrca
254+  AA34 0F               rrca                ; divide by 8
255+  AA35 47               ld b,a
256+  AA36 79               ld a,c
257+  AA37 48               ld c,b                         ; swap b and c
258+  AA38 E6 F8            and 248
259+  AA3A 0F               rrca
260+  AA3B 0F               rrca
261+  AA3C 0F               rrca                ; divide by 8
262+  AA3D 47               ld b,a
263+  AA3E CD EB A9         call screen_getcellattradress   ; work out memory location of current block attributes, memory in de
264+  AA41 C9               ret
265+  AA42
266+  AA42
267+  AA42              ; Gets the nearest cell coords for a screen coord
268+  AA42              ; Will overwrite bc
269+  AA42              ; Inputs:
270+  AA42              ; bc - screen coords
271+  AA42              ; Outputs:
272+  AA42              ; bc - character coords
273+  AA42              ;
274+  AA42              screen_getcharcoordsfromscreencoords:
275+  AA42 78               ld a,b                          ; get the player block coords of current block
276+  AA43 E6 F8            and 248                         ; find closest multiple of eight
277+  AA45 0F               rrca
278+  AA46 0F               rrca
279+  AA47 0F               rrca                ; divide by 8
280+  AA48 47               ld b,a
281+  AA49 79               ld a,c
282+  AA4A 48               ld c,b                         ; swap b and c
283+  AA4B E6 F8            and 248
284+  AA4D 0F               rrca
285+  AA4E 0F               rrca
286+  AA4F 0F               rrca                ; divide by 8
287+  AA50 47               ld b,a
288+  AA51 C9               ret
289+  AA52
290+  AA52              ; Gets the screen coords for a cell coord
291+  AA52              ; Will overwrite bc
292+  AA52              ; Inputs:
293+  AA52              ; bc - char coords
294+  AA52              ; Outputs:
295+  AA52              ; bc - screen coords
296+  AA52              ;
297+  AA52              screen_getscreencoordsfromcharcoords:
298+  AA52 78               ld a,b                          ; get the player block coords of current block
299+  AA53 07               rlca
300+  AA54 07               rlca
301+  AA55 07               rlca                ; multiply by 8
302+  AA56 47               ld b,a
303+  AA57 79               ld a,c
304+  AA58 48               ld c,b                         ; swap b and c
305+  AA59 07               rlca
306+  AA5A 07               rlca
307+  AA5B 07               rlca                ; divide by 8
308+  AA5C 47               ld b,a
309+  AA5D C9               ret
310+  AA5E
311+  AA5E              ;
312+  AA5E              ; Get buffer address for a character at b,c - b vert
313+  AA5E              ; Buffer memory is stored as sequential block
314+  AA5E              ; Char at 0,0 is stored 0,32,64...; 0,1 is stored at 1,33,65
315+  AA5E              ; Inputs:
316+  AA5E              ; bc - coords
317+  AA5E              ; Outputs:
318+  AA5E              ; de - memory location of first byte
319+  AA5E              screen_getbufferaddress:
320+  AA5E 21 78 86         ld hl, buffer_buffer    ; first get screen buffer start
321+  AA61 50               ld d,b                  ; then work out vertical offset
322+  AA62 1E 00            ld e,0                  ; mult by 256, low byte becomes high byte, de now holds result
323+  AA64 19               add hl,de               ; add to base
324+  AA65 59               ld e,c                  ; then add horizontal offset (c)
325+  AA66 16 00            ld d,0
326+  AA68 19               add hl,de               ; add to base
327+  AA69 54 5D            ld de,hl
328+  AA6B C9               ret
329+  AA6C
330+  AA6C              ;
331+  AA6C              ; Display character hl at (b, c) to buffer.
332+  AA6C              ; Stored sequentially
333+  AA6C              ; Inputs:
334+  AA6C              ; hl: block address
335+  AA6C              ; bc: coords
336+  AA6C              ;
337+  AA6C              screen_showchar:
338+  AA6C ED 43 2B AC      ld (origcoords),bc   ; store char coords
339+  AA70 3E 00            ld a,0
340+  AA72 E5               push hl
341+  AA73 CD 5E AA         call screen_getbufferaddress ; get the current screen buffer pointer
342+  AA76 E1               pop hl
343+  AA77 06 08            ld b,8              ; number of pixels high.
344+  AA79              screen_showchar0:
345+  AA79 7E               ld a,(hl)           ; source graphic.
346+  AA7A 12               ld (de),a           ; transfer to screen.
347+  AA7B 23               inc hl              ; next piece of data.
348+  AA7C E5               push hl             ; store hl
349+  AA7D 62 6B            ld hl,de            ; put de in hl
350+  AA7F 1E 20            ld e,32            ; inc memory by 32, so load 32 into de
351+  AA81 16 00            ld d,0
352+  AA83 19               add hl,de              ; add de to hl
353+  AA84 54 5D            ld de,hl            ; load back to de
354+  AA86 E1               pop hl              ; restore hl
355+  AA87
356+  AA87 10 F0            djnz screen_showchar0 ; repeat
357+  AA89 2E 01            ld l,1
358+  AA8B CD DC AB         call sprites_marklinesforupdatechar
359+  AA8E
360+  AA8E C9               ret
361+  AA8F
362+  AA8F
363+  AA8F              ;
364+  AA8F              ; Get cell graphic.
365+  AA8F              ; Inputs:
366+  AA8F              ; a: block
367+  AA8F              ; Outputs:
368+  AA8F              ; hl: memory
369+  AA8F              ;
370+  AA8F              screen_getblock:
371+  AA8F 07               rlca                        ; multiply block number by eight.
372+  AA90 07               rlca
373+  AA91 07               rlca
374+  AA92 5F               ld e,a                      ; displacement to graphic address.
375+  AA93 16 00            ld d,0                      ; no high byte.
376+  AA95 21 40 BD         ld hl,sprites               ; address of character blocks.
377+  AA98 19               add hl,de                   ; point to block.
378+  AA99 C9               ret
379+  AA9A
380+  AA9A              ;
381+  AA9A              ; Set a the attr of a coord
382+  AA9A              ; Inputs:
383+  AA9A              ; bc - char coords
384+  AA9A              ; a - attr
385+  AA9A              ;
386+  AA9A              screen_setattr:
387+  AA9A DD E5            push ix
388+  AA9C C5               push bc
389+  AA9D 08               ex af, af'
390+  AA9E CD 03 AA         call screen_getcellattroffset   ; get offset into de
391+  AAA1 21 78 A3         ld hl,buffer_attr_buffer
392+  AAA4 19               add hl,de                       ; get the memory location
393+  AAA5 08               ex af, af'                      ; get attr back
394+  AAA6 77               ld (hl),a                         ; set the attr
395+  AAA7 08               ex af, af'                      ; get attr back
396+  AAA8 ED 5B E2 A8      ld de,(screen_offset)           ; get the offset
397+  AAAC 78               ld a,b                          ; get the vertical
398+  AAAD 93               sub e                           ; subtract the offset
399+  AAAE DA C4 AA         jp c,screen_setattr0            ; if less than zero, don't update the attr on screen
400+  AAB1 FE 15            cp 21
401+  AAB3 D2 C4 AA         jp nc,screen_setattr0           ; if more than 21, don't update the attr on screen
402+  AAB6 47               ld b,a                          ; put the coord back in b
403+  AAB7 CD 17 AA         call screen_getscreenattradress ; screen attr address in de
404+  AABA 21 40 00         ld hl,64                        ; attr memory + two rows for scores
405+  AABD 19               add hl,de
406+  AABE 08               ex af, af'                      ; get attr back
407+  AABF 77               ld (hl),a
408+  AAC0 C1               pop bc
409+  AAC1 DD E1            pop ix
410+  AAC3 C9               ret
411+  AAC4              screen_setattr0:
412+  AAC4 C1               pop bc
413+  AAC5 DD E1            pop ix
414+  AAC7 C9               ret
415+  AAC8
416+  AAC8              ;
417+  AAC8              ; Get cell attribute.
418+  AAC8              ; Inputs:
419+  AAC8              ; a: block
420+  AAC8              ; Outputs:
421+  AAC8              ; hl: memory
422+  AAC8              ;
423+  AAC8              screen_getattr:
424+  AAC8 5F               ld e,a                      ; displacement to attribute address.
425+  AAC9 16 00            ld d,0                      ; no high byte.
426+  AACB 21 20 BE         ld hl,sprite_attrs          ; address of block attributes.
427+  AACE 19               add hl,de                   ; point to attribute.
428+  AACF C9               ret
429+  AAD0
430+  AAD0              ;
431+  AAD0              ; Checks whether a character block has anything in it
432+  AAD0              ; Inputs:
433+  AAD0              ; bc - char coords
434+  AAD0              ; Outputs:
435+  AAD0              ; a - 1, empty
436+  AAD0              screen_ischarempty:
437+  AAD0 CD 5E AA         call screen_getbufferaddress ; get the current screen buffer pointer
438+  AAD3 06 08            ld b,8                      ; check 8 rows
439+  AAD5              screen_ischarempty2:
440+  AAD5 1A               ld a,(de)                   ; check line
441+  AAD6 FE 00            cp 0
442+  AAD8 C2 E6 AA         jp nz,screen_ischarempty1   ; if not zero, jump out with false
443+  AADB 21 20 00         ld hl,32
444+  AADE 19               add hl,de
445+  AADF 54 5D            ld de,hl                    ; move to next row
446+  AAE1 10 F2            djnz screen_ischarempty2
447+  AAE3              screen_ischarempty0:
448+  AAE3 3E 01            ld a,1
449+  AAE5 C9               ret
450+  AAE6              screen_ischarempty1:
451+  AAE6 3E 00            ld a,0
452+  AAE8 C9               ret
453+  AAE9
454+  AAE9              ;
455+  AAE9              ; Copies a block from one place to another directly underneath, leaves the original empty
456+  AAE9              ; Inputs:
457+  AAE9              ; bc - coords of block to copy from
458+  AAE9              screen_copyblockdown
459+  AAE9 CD 5E AA         call screen_getbufferaddress ; get the current screen buffer pointer for source
460+  AAEC 06 08            ld b,8                      ; copy 8 rows
461+  AAEE              screen_copyblock0:
462+  AAEE 1A               ld a,(de)                    ; get what we're copying
463+  AAEF 08               ex af,af'
464+  AAF0 3E 00            ld a,0
465+  AAF2 12               ld (de),a                    ; replace with empty
466+  AAF3 08               ex af,af'
467+  AAF4 14               inc d                        ; add 256 to get to the next row
468+  AAF5 12               ld (de),a                    ; copy to the next row
469+  AAF6 15               dec d
470+  AAF7 21 20 00         ld hl,32
471+  AAFA 19               add hl,de                       ; return back to source, next row down
472+  AAFB 54 5D            ld de,hl
473+  AAFD 10 EF            djnz screen_copyblock0
474+  AAFF C9               ret
475+  AB00
476+  AB00              ;
477+  AB00              ; Returns the first byte of a character. Useful for figuring out what's there
478+  AB00              ; Inputs:
479+  AB00              ; bc - coords
480+  AB00              ; Outputs:
481+  AB00              ; a - first byte
482+  AB00              ;
483+  AB00              screen_getcharfirstbyte:
484+  AB00 CD 5E AA         call screen_getbufferaddress ; get the current screen buffer pointer for source
485+  AB03 1A               ld a,(de)
486+  AB04 C9               ret
487+  AB05
# file closed: screen/screen.asm
142   AB05                  include "screen\sprites.asm"
# file opened: screen/sprites.asm
  1+  AB05              ;
  2+  AB05              ; This is the sprite routine and expects coordinates in (c ,b) form,
  3+  AB05              ; where c is the vertical coord from the top of the screen (0-176), and
  4+  AB05              ; b is the horizontal coord from the left of the screen (0 to 240).
  5+  AB05              ; Sprite data is stored as you'd expect in its unshifted form as this
  6+  AB05              ; routine takes care of all the shifting itself. This means that sprite
  7+  AB05              ; handling isn't particularly fast but the graphics only take 1/8th of the
  8+  AB05              ; space they would require in pre-shifted form.
  9+  AB05              ; Inputs:
 10+  AB05              ; hl - sprite data
 11+  AB05              ; bc - screen coords
 12+  AB05              ;
 13+  AB05              sprites_drawsprite7:
 14+  AB05 EE 07            xor 7               ; complement last 3 bits.
 15+  AB07 3C               inc a               ; add one for luck!
 16+  AB08              sprites_drawsprite3:
 17+  AB08 CB 11            rl c                ; ...into middle byte...
 18+  AB0A CB 12            rl d                ; ...and finally into left character cell.
 19+  AB0C 3D               dec a               ; count shifts we've done.
 20+  AB0D 20 F9            jr nz,sprites_drawsprite3 ; return until all shifts complete.
 21+  AB0F                                      ; Line of sprite image is now in e + c + d, we need it in form c + d + e.
 22+  AB0F 79               ld a,c              ; left edge of image is currently in e.
 23+  AB10 4A               ld c,d              ; put right edge there instead.
 24+  AB11 57               ld d,a              ; and the left edge back into c.
 25+  AB12 18 29            jr sprites_drawsprite0   ; we've done the switch so transfer to screen.
 26+  AB14              sprites_drawsprite:
 27+  AB14 ED 43 2B AC      ld (origcoords),bc  ; store coords
 28+  AB18 ED 43 2D AC      ld (dispx),bc       ; store coords in dispx for now.
 29+  AB1C E5               push hl
 30+  AB1D CD 09 AC         call sprites_scadd  ; calculate screen address.
 31+  AB20 E1               pop hl
 32+  AB21 3E 08            ld a,8              ; height of sprite in pixels.
 33+  AB23              sprites_drawsprite1:
 34+  AB23 08               ex af,af'           ; store loop counter.
 35+  AB24 D5               push de             ; store screen address.
 36+  AB25 4E               ld c,(hl)           ; first sprite graphic.
 37+  AB26 23               inc hl              ; increment poiinter to sprite data.
 38+  AB27 22 2F AC         ld (sprtmp),hl      ; store it for later.
 39+  AB2A 16 00            ld d,0              ; blank right byte for now.
 40+  AB2C 78               ld a,b              ; b holds y position.
 41+  AB2D E6 07            and 7               ; how are we straddling character cells?
 42+  AB2F 28 0C            jr z,sprites_drawsprite0 ; we're not straddling them, don't bother shifting.
 43+  AB31 FE 05            cp 5                ; 5 or more right shifts needed?
 44+  AB33 30 D0            jr nc,sprites_drawsprite7 ; yes, shift from left as it's quicker.
 45+  AB35 A7               and a               ; oops, carry flag is set so clear it.
 46+  AB36              sprites_drawsprite2:
 47+  AB36 CB 19            rr c                ; rotate left byte right...
 48+  AB38 CB 1A            rr d                ; ...into right byte.
 49+  AB3A 3D               dec a               ; one less shift to do.
 50+  AB3B 20 F9            jr nz,sprites_drawsprite2 ; return until all shifts complete.
 51+  AB3D              sprites_drawsprite0:
 52+  AB3D E1               pop hl              ; pop screen address from stack.
 53+  AB3E 7E               ld a,(hl)           ; what's there already.
 54+  AB3F A9               xor c               ; merge in image data.
 55+  AB40 77               ld (hl),a           ; place onto screen.
 56+  AB41 23               inc hl
 57+  AB42 7E               ld a,(hl)           ; what's already there.
 58+  AB43 AA               xor d               ; right edge of sprite image data.
 59+  AB44 77               ld (hl),a           ; plonk it on screen.
 60+  AB45 3A 2D AC         ld a,(dispx)        ; vertical coordinate.
 61+  AB48 3C               inc a               ; next line down.
 62+  AB49 32 2D AC         ld (dispx),a        ; store new position.
 63+  AB4C 2B               dec hl
 64+  AB4D 11 20 00         ld de,32            ; add 32 to get to the next row
 65+  AB50 19               add hl,de           ; add 32
 66+  AB51              sprites_drawsprite6:
 67+  AB51 EB               ex de,hl            ; screen address in de.
 68+  AB52 2A 2F AC         ld hl,(sprtmp)      ; restore graphic address.
 69+  AB55 08               ex af,af'           ; restore loop counter.
 70+  AB56 3D               dec a               ; decrement it.
 71+  AB57 C2 23 AB         jp nz,sprites_drawsprite1 ; not reached bottom of sprite yet to repeat.
 72+  AB5A 2E 02            ld l,2
 73+  AB5C CD CB AB         call sprites_marklinesforupdatescreen
 74+  AB5F C9               ret                 ; job done.
 75+  AB60
 76+  AB60              ; Inputs:
 77+  AB60              ; hl - sprite data
 78+  AB60              ; bc - screen coords
 79+  AB60              ;
 80+  AB60              sprites_draw2by2sprite7
 81+  AB60 EE 07            xor 7               ; complement last 3 bits.
 82+  AB62 3C               inc a               ; add one for luck!
 83+  AB63              sprites_draw2by2sprite3
 84+  AB63 CB 12            rl d                ; rotate left...
 85+  AB65 CB 11            rl c                ; ...into middle byte...
 86+  AB67 CB 13            rl e                ; ...and finally into left character cell.
 87+  AB69 3D               dec a               ; count shifts we've done.
 88+  AB6A 20 F7            jr nz,sprites_draw2by2sprite3 ; return until all shifts complete.
 89+  AB6C                                      ; Line of sprite image is now in e + c + d, we need it in form c + d + e.
 90+  AB6C 7B               ld a,e              ; left edge of image is currently in e.
 91+  AB6D 5A               ld e,d              ; put right edge there instead.
 92+  AB6E 51               ld d,c              ; middle bit goes in d.
 93+  AB6F 4F               ld c,a              ; and the left edge back into c.
 94+  AB70 18 31            jr sprites_draw2by2sprite0 ; we've done the switch so transfer to screen.
 95+  AB72              sprites_draw2by2sprite
 96+  AB72 ED 43 2B AC      ld (origcoords),bc  ; store coords
 97+  AB76 ED 43 2D AC      ld (dispx),bc       ; store coords in dispx for now.
 98+  AB7A 79               ld a,c
 99+  AB7B 32 31 AC         ld (sprtmp0),a         ; store vertical.
100+  AB7E E5               push hl
101+  AB7F CD 09 AC         call sprites_scadd          ; calculate screen address.
102+  AB82 E1               pop hl
103+  AB83 3E 10            ld a,16             ; height of sprite in pixels.
104+  AB85              sprites_draw2by2sprite1
105+  AB85 08               ex af,af'           ; store loop counter.
106+  AB86 D5               push de             ; store screen address.
107+  AB87 4E               ld c,(hl)           ; first sprite graphic.
108+  AB88 23               inc hl              ; increment poiinter to sprite data.
109+  AB89 56               ld d,(hl)           ; next bit of sprite image.
110+  AB8A 23               inc hl              ; point to next row of sprite data.
111+  AB8B 22 2F AC         ld (sprtmp),hl        ; store in tmp0 for later.
112+  AB8E 1E 00            ld e,0              ; blank right byte for now.
113+  AB90 78               ld a,b              ; b holds y position.
114+  AB91 E6 07            and 7               ; how are we straddling character cells?
115+  AB93 28 0E            jr z,sprites_draw2by2sprite0 ; we're not straddling them, don't bother shifting.
116+  AB95 FE 05            cp 5                ; 5 or more right shifts needed?
117+  AB97 30 C7            jr nc,sprites_draw2by2sprite7 ; yes, shift from left as it's quicker.
118+  AB99 A7               and a               ; oops, carry flag is set so clear it.
119+  AB9A              sprites_draw2by2sprite2
120+  AB9A CB 19            rr c                ; rotate left byte right...
121+  AB9C CB 1A            rr d                ; ...through middle byte...
122+  AB9E CB 1B            rr e                ; ...into right byte.
123+  ABA0 3D               dec a               ; one less shift to do.
124+  ABA1 20 F7            jr nz,sprites_draw2by2sprite2 ; return until all shifts complete.
125+  ABA3              sprites_draw2by2sprite0
126+  ABA3 E1               pop hl              ; pop screen address from stack.
127+  ABA4 7E               ld a,(hl)           ; what's there already.
128+  ABA5 A9               xor c               ; merge in image data.
129+  ABA6 77               ld (hl),a           ; place onto screen.
130+  ABA7 23               inc hl               ; next character cell to right please.
131+  ABA8 7E               ld a,(hl)           ; what's there already.
132+  ABA9 AA               xor d               ; merge with middle bit of image.
133+  ABAA 77               ld (hl),a           ; put back onto screen.
134+  ABAB 23               inc hl              ; next bit of screen area.
135+  ABAC 7E               ld a,(hl)           ; what's already there.
136+  ABAD AB               xor e               ; right edge of sprite image data.
137+  ABAE 77               ld (hl),a           ; plonk it on screen.
138+  ABAF 3A 31 AC         ld a,(sprtmp0)         ; temporary vertical coordinate.
139+  ABB2 3C               inc a               ; next line down.
140+  ABB3 32 31 AC         ld (sprtmp0),a         ; store new position.
141+  ABB6 2B               dec hl
142+  ABB7 2B               dec hl
143+  ABB8 11 20 00         ld de,32            ; add 32 to get to the next row
144+  ABBB 19               add hl,de           ; add 32
145+  ABBC              sprites_draw2by2sprite6
146+  ABBC EB               ex de,hl            ; screen address in de.
147+  ABBD 2A 2F AC         ld hl,(sprtmp)        ; restore graphic address.
148+  ABC0 08               ex af,af'           ; restore loop counter.
149+  ABC1 3D               dec a               ; decrement it.
150+  ABC2 C2 85 AB         jp nz,sprites_draw2by2sprite1 ; not reached bottom of sprite yet to repeat.
151+  ABC5 2E 03            ld l,3
152+  ABC7 CD CB AB         call sprites_marklinesforupdatescreen
153+  ABCA C9               ret                 ; job done.
154+  ABCB
155+  ABCB              ;
156+  ABCB              ; Marks lines for update with screen coords
157+  ABCB              ; Inputs:
158+  ABCB              ; l - number to update
159+  ABCB              ;
160+  ABCB              sprites_marklinesforupdatescreen:
161+  ABCB F5               push af
162+  ABCC ED 4B 2B AC      ld bc,(origcoords)
163+  ABD0 CD 42 AA         call screen_getcharcoordsfromscreencoords
164+  ABD3 ED 43 2B AC      ld (origcoords),bc
165+  ABD7 CD E6 AB         call sprites_marklinesforupdate
166+  ABDA F1               pop af
167+  ABDB C9               ret
168+  ABDC
169+  ABDC              ;
170+  ABDC              ; Marks lines for update with char coords
171+  ABDC              ; Inputs:
172+  ABDC              ; l - number to update
173+  ABDC              ;
174+  ABDC              sprites_marklinesforupdatechar:
175+  ABDC F5               push af
176+  ABDD ED 43 2B AC      ld (origcoords),bc
177+  ABE1 CD E6 AB         call sprites_marklinesforupdate
178+  ABE4 F1               pop af
179+  ABE5 C9               ret
180+  ABE6
181+  ABE6              ;
182+  ABE6              ; Marks lines for update
183+  ABE6              ; Inputs:
184+  ABE6              ; l - number to update
185+  ABE6              ;
186+  ABE6              sprites_marklinesforupdate:
187+  ABE6 ED 4B 2B AC      ld bc,(origcoords)
188+  ABEA ED 5B E2 A8      ld de,(screen_offset)          ; load the screen offset, this is in rows
189+  ABEE 78               ld a,b
190+  ABEF 93               sub e
191+  ABF0 47               ld b,a
192+  ABF1 7D               ld a,l                          ; get loop counter
193+  ABF2              sprites_marklinesforupdate0:
194+  ABF2 C5               push bc
195+  ABF3 08               ex af,af'                     ; store loop counter
196+  ABF4 78               ld a,b
197+  ABF5 CD 30 A7         call buffer_marklineforupdate ; mark this line for update
198+  ABF8 ED 4B 2B AC      ld bc,(origcoords)            ; move the coords for the next line
199+  ABFC 04               inc b
200+  ABFD ED 43 2B AC      ld (origcoords),bc
201+  AC01 C1               pop bc
202+  AC02 04               inc b
203+  AC03 08               ex af,af'                     ; restore loop counter
204+  AC04 3D               dec a
205+  AC05 C2 F2 AB         jp nz,sprites_marklinesforupdate0
206+  AC08 C9               ret
207+  AC09
208+  AC09              ;
209+  AC09              ; This routine returns a buffer address for (c, b) in de (c vert).
210+  AC09              ; For example: 0,0 will be at memory offset 0
211+  AC09              ; 1,0 (1 down) will be at memory offset 1
212+  AC09              ; 0,7 will be at memory offset 0
213+  AC09              ; 9,1 will be at memory offset 8+1
214+  AC09              ; 8,0 will be at memory offset 256
215+  AC09              ; 9,0 will be at memory offset 257
216+  AC09              ; Outputs:
217+  AC09              ; de - coords
218+  AC09              ;
219+  AC09              sprites_scadd:
220+  AC09 79               ld a,c               ; calculate vertical offset
221+  AC0A E6 F8            and 248             ;  to get nearest multiple of 8
222+  AC0C 0F               rrca
223+  AC0D 0F               rrca
224+  AC0E 0F               rrca                ; divide by 8
225+  AC0F 67               ld h,a
226+  AC10 78               ld a,b               ; calculate horizontal offset
227+  AC11 E6 F8            and 248             ;  to get nearest multiple of 8
228+  AC13 0F               rrca
229+  AC14 0F               rrca
230+  AC15 0F               rrca                ; divide by 8
231+  AC16 6F               ld l,a
232+  AC17 C5               push bc             ; store the screen coords
233+  AC18 44 4D            ld bc,hl            ; load bc with the character coords
234+  AC1A CD 5E AA         call screen_getbufferaddress
235+  AC1D C1               pop bc              ; get back screen coords, de is now memory of character
236+  AC1E 79               ld a,c              ; now add the vertical within the cell
237+  AC1F E6 07            and 7
238+  AC21 0F               rrca                ; multiply by 32.
239+  AC22 0F               rrca
240+  AC23 0F               rrca
241+  AC24 6F               ld l,a
242+  AC25 26 00            ld h,0
243+  AC27 19               add hl,de
244+  AC28 54 5D            ld de,hl
245+  AC2A C9               ret
246+  AC2B
247+  AC2B 00 00        origcoords   defb 0,0           ; general-use coordinates.
248+  AC2D
249+  AC2D 00           dispx   defb 0           ; general-use coordinates.
250+  AC2E 00           dispy   defb 0
251+  AC2F 00 00        sprtmp  defb 0,0           ; sprite temporary address.
252+  AC31 00 00        sprtmp0  defb 0,0           ; sprite temporary address.
253+  AC33
# file closed: screen/sprites.asm
143   AC33                  include "screen\titlescreen.asm"
# file opened: screen/titlescreen.asm
  1+  AC33              titlescreen_preshow:
  2+  AC33 CD E4 AC         call titlescreen_preinit
  3+  AC36 CD 4E B1         call sound_gamestart
  4+  AC39 06 3C            ld b,60
  5+  AC3B CD 64 81         call utilities_pauseforframes         ; pause for a second
  6+  AC3E C9               ret
  7+  AC3F
  8+  AC3F              ;
  9+  AC3F              ; Draws the title screen
 10+  AC3F              ;
 11+  AC3F              titlescreen_show:
 12+  AC3F CD D1 AC         call titlescreen_init
 13+  AC42 CD 7A AC         call titlescreen_drawtitle
 14+  AC45 3A EF C4         ld a,(game_control)
 15+  AC48 FE 00            cp 0
 16+  AC4A CA 52 AC         jp z,titlescreen_show1
 17+  AC4D 06 32            ld b,50
 18+  AC4F CD 64 81         call utilities_pauseforframes         ; pause for a second
 19+  AC52              titlescreen_show1:
 20+  AC52 3E FA            ld a,250                              ; wait for 200 frames
 21+  AC54 CD 25 81         call utilities_waitforkey_forframes   ; wait for keypress
 22+  AC57 7B               ld a,e
 23+  AC58 FE 01            cp 1                                  ; was anything pressed?
 24+  AC5A C8               ret z                                 ; end titlescreen if so
 25+  AC5B
 26+  AC5B CD F1 AC         call titlescreen_alt_init             ; otherwise, draw alt screen
 27+  AC5E CD 96 AC         call titlescreen_alt_drawtitle
 28+  AC61 3A EF C4         ld a,(game_control)
 29+  AC64 FE 00            cp 0
 30+  AC66 CA 6E AC         jp z,titlescreen_show0
 31+  AC69 06 32            ld b,50
 32+  AC6B CD 64 81         call utilities_pauseforframes         ; pause for a second if joystick
 33+  AC6E              titlescreen_show0:
 34+  AC6E 3E FA            ld a,250                              ; wait for 200 frames
 35+  AC70 CD 25 81         call utilities_waitforkey_forframes   ; wait for keypress
 36+  AC73 7B               ld a,e
 37+  AC74 FE 01            cp 1                                  ; was anything pressed?
 38+  AC76 C2 3F AC         jp nz,titlescreen_show               ; start again if not
 39+  AC79 C9               ret
 40+  AC7A
 41+  AC7A              ;
 42+  AC7A              ; Draws the iconic logo
 43+  AC7A              ;
 44+  AC7A              titlescreen_drawtitle:
 45+  AC7A 06 67            ld b,103              ; number of points
 46+  AC7C DD 21 FE AC      ld ix,titlescreen_logo_data
 47+  AC80              titlescreen_drawtitle0:
 48+  AC80 C5               push bc
 49+  AC81 DD 4E 00         ld c,(ix)                   ; got horiz
 50+  AC84 DD 23            inc ix
 51+  AC86 DD 46 00         ld b,(ix)                   ; got vert
 52+  AC89 DD 23            inc ix
 53+  AC8B CD 17 AA         call screen_getscreenattradress ; memory in de
 54+  AC8E 13               inc de                      ; slide one to the right, since I'm too lazy to change the data
 55+  AC8F 3E 13            ld a,19
 56+  AC91 12               ld (de),a
 57+  AC92 C1               pop bc
 58+  AC93 10 EB            djnz titlescreen_drawtitle0 ; loop if we're not at the end
 59+  AC95 C9               ret
 60+  AC96
 61+  AC96              ;
 62+  AC96              ; Draws the alternate title screen
 63+  AC96              ;
 64+  AC96              titlescreen_alt_drawtitle:
 65+  AC96 21 28 82         ld hl,string_alttitlescreen_1
 66+  AC99 CD 30 86         call string_print
 67+  AC9C 21 34 82         ld hl,string_alttitlescreen_2
 68+  AC9F CD 30 86         call string_print
 69+  ACA2 21 2F 83         ld hl,string_alttitlescreen_3
 70+  ACA5 CD 30 86         call string_print
 71+  ACA8 06 20            ld b,32
 72+  ACAA 3E 43            ld a,67
 73+  ACAC 11 00 58         ld de,22528                         ; top row attrs here
 74+  ACAF CD A5 A9         call screen_setcolours
 75+  ACB2 06 20            ld b,32
 76+  ACB4 3E 46            ld a,70
 77+  ACB6 11 A0 59         ld de,22528+416                     ; 13th row attrs here
 78+  ACB9 CD A5 A9         call screen_setcolours
 79+  ACBC 06 20            ld b,32
 80+  ACBE 3E 43            ld a,67
 81+  ACC0 11 20 5A         ld de,22528+544                         ; 17th row attrs here
 82+  ACC3 CD A5 A9         call screen_setcolours
 83+  ACC6 06 20            ld b,32
 84+  ACC8 3E 42            ld a,66
 85+  ACCA 11 A0 5A         ld de,22528+672                         ; 21st row attrs here
 86+  ACCD CD A5 A9         call screen_setcolours
 87+  ACD0 C9               ret
 88+  ACD1
 89+  ACD1              ;
 90+  ACD1              ; Initialises the screen
 91+  ACD1              ;
 92+  ACD1              titlescreen_init:
 93+  ACD1              ; We want a black screen.
 94+  ACD1 3E 0B            ld a,11             ; magenta ink (7) on blue paper (0),
 95+  ACD3                                      ; bright (64).
 96+  ACD3 CD 49 81         call utilities_clearscreen
 97+  ACD6 32 8D 5C         ld (23693),a        ; set our screen colours.
 98+  ACD9 3E 01            ld a,1              ; 2 is the code for red.
 99+  ACDB D3 FE            out (254),a         ; write to port 254.
100+  ACDD
101+  ACDD 21 13 82         ld hl,string_titlescreen_copyright
102+  ACE0 CD 30 86         call string_print
103+  ACE3
104+  ACE3 C9               ret
105+  ACE4
106+  ACE4              ;
107+  ACE4              ; Initialises the pre-screen
108+  ACE4              ;
109+  ACE4              titlescreen_preinit:
110+  ACE4              ; We want a red screen.
111+  ACE4 3E 10            ld a,16             ; magenta ink (7) on blue paper (0),
112+  ACE6                                      ; bright (64).
113+  ACE6 CD 49 81         call utilities_clearscreen
114+  ACE9 32 8D 5C         ld (23693),a        ; set our screen colours.
115+  ACEC 3E 02            ld a,2              ; 2 is the code for red.
116+  ACEE D3 FE            out (254),a         ; write to port 254.
117+  ACF0 C9               ret
118+  ACF1
119+  ACF1              ;
120+  ACF1              ; Initialises the screen
121+  ACF1              ;
122+  ACF1              titlescreen_alt_init:
123+  ACF1              ; We want a black screen.
124+  ACF1 3E 47            ld a,71             ; white ink (7) on black paper (0),
125+  ACF3                                      ; bright (64).
126+  ACF3 CD 49 81         call utilities_clearscreen
127+  ACF6 32 8D 5C         ld (23693),a        ; set our screen colours.
128+  ACF9 3E 00            ld a,0              ; 2 is the code for red.
129+  ACFB D3 FE            out (254),a         ; write to port 254.
130+  ACFD
131+  ACFD C9               ret
132+  ACFE
133+  ACFE              ;
134+  ACFE              ; Horiz, vert
135+  ACFE              ;
136+  ACFE              titlescreen_logo_data:
137+  ACFE 08 00 09 00      defb 8,0,9,0,10,0,12,0,15,0,17,0,18,0,19,0
137+  AD02 0A 00 0C 00
137+  AD06 0F 00 11 00
137+  AD0A 12 00 13 00
138+  AD0E 09 01 0C 01      defb 9,1,12,1,15,1,17,1
138+  AD12 0F 01 11 01
139+  AD16 09 02 0C 02      defb 9,2,12,2,13,2,14,2,15,2,17,2,18,2,19,2
139+  AD1A 0D 02 0E 02
139+  AD1E 0F 02 11 02
139+  AD22 12 02 13 02
140+  AD26 09 03 0C 03      defb 9,3,12,3,15,3,17,3
140+  AD2A 0F 03 11 03
141+  AD2E 09 04 0C 04      defb 9,4,12,4,15,4,17,4,18,4,19,4
141+  AD32 0F 04 11 04
141+  AD36 12 04 13 04
142+  AD3A 00 06 01 06      defb 0,6,1,6,2,6,3,6,4,6,5,6,6,6,7,6,8,6,9,6,10,6,11,6
142+  AD3E 02 06 03 06
142+  AD42 04 06 05 06
142+  AD46 06 06 07 06
142+  AD4A 08 06 09 06
142+  AD4E 0A 06 0B 06
143+  AD52 10 06 11 06      defb 16,6,17,6,18,6,19,6,20,6,21,6,22,6,23,6,24,6,25,6,26,6,27,6
143+  AD56 12 06 13 06
143+  AD5A 14 06 15 06
143+  AD5E 16 06 17 06
143+  AD62 18 06 19 06
143+  AD66 1A 06 1B 06
144+  AD6A 02 07 02 08      defb 2,7,2,8,2,9,2,10,2,11,2,12,2,13,2,14,2,15,2,16,2,17,2,18,2,19,2,20,2,21
144+  AD6E 02 09 02 0A
144+  AD72 02 0B 02 0C
144+  AD76 02 0D 02 0E
144+  AD7A 02 0F 02 10
144+  AD7E 02 11 02 12
144+  AD82 02 13 02 14
144+  AD86 02 15
145+  AD88 19 07 19 08      defb 25,7,25,8,25,9,25,10,25,11,25,12,25,13,25,14,25,15,25,16,25,17,25,18,25,19,25,20,25,21
145+  AD8C 19 09 19 0A
145+  AD90 19 0B 19 0C
145+  AD94 19 0D 19 0E
145+  AD98 19 0F 19 10
145+  AD9C 19 11 19 12
145+  ADA0 19 13 19 14
145+  ADA4 19 15
146+  ADA6 03 0B 04 0B      defb 3,11,4,11,5,11,6,11,7,11,8,11,9,11,10,11,11,11
146+  ADAA 05 0B 06 0B
146+  ADAE 07 0B 08 0B
146+  ADB2 09 0B 0A 0B
146+  ADB6 0B 0B
147+  ADB8 0B 07 0B 08      defb 11,7,11,8,11,9,11,10
147+  ADBC 0B 09 0B 0A
148+  ADC0 10 0D 10 0F      defb 16,13,16,15,16,16,16,17,16,18,16,19
148+  ADC4 10 10 10 11
148+  ADC8 10 12 10 13
149+  ADCC
# file closed: screen/titlescreen.asm
144   ADCC                  include "screen\lifescreen.asm"
# file opened: screen/lifescreen.asm
  1+  ADCC              ;
  2+  ADCC              ; Draws the life remaining screen
  3+  ADCC              ;
  4+  ADCC              lifescreen_draw:
  5+  ADCC CD 22 AE         call lifescreen_init
  6+  ADCF
  7+  ADCF 3A EC C4         ld a,(game_currentplayer)             ; get the current player
  8+  ADD2 C6 30            add 48                                ; add 48 to get char
  9+  ADD4 21 35 84         ld hl,string_lifescreen_player+10
 10+  ADD7 77               ld (hl),a                             ; load this to the string we're about to show
 11+  ADD8
 12+  ADD8 21 2B 84         ld hl,string_lifescreen_player
 13+  ADDB CD 30 86         call string_print
 14+  ADDE
 15+  ADDE 3A E4 C5         ld a,(player+9)                       ; get the current player lives
 16+  ADE1 C6 30            add 48                                ; add 48 to get the character
 17+  ADE3 FE 31            cp 49
 18+  ADE5 C2 F8 AD         jp nz,lifescreen_draw0
 19+  ADE8 21 45 84         ld hl,string_lifescreen_lastman
 20+  ADEB
 21+  ADEB 06 08            ld b,8
 22+  ADED 3E 0A            ld a,10                                ; set red
 23+  ADEF 11 6C 58         ld de,22528+108                        ; attrs here
 24+  ADF2 CD A5 A9         call screen_setcolours
 25+  ADF5
 26+  ADF5 C3 FF AD         jp lifescreen_draw1
 27+  ADF8              lifescreen_draw0:
 28+  ADF8 21 3A 84         ld hl,string_lifescreen_lives+2       ; not last man, so use the normal view
 29+  ADFB 77               ld (hl),a                             ; load this to the string we're about to show
 30+  ADFC 21 38 84         ld hl,string_lifescreen_lives
 31+  ADFF              lifescreen_draw1:
 32+  ADFF CD 30 86         call string_print
 33+  AE02
 34+  AE02 3E 86            ld a,134
 35+  AE04 11 0B 58         ld de, 22528+11     ; get the colour for the top text
 36+  AE07 06 0A            ld b,10
 37+  AE09 CD A5 A9         call screen_setcolours
 38+  AE0C 3A EF C4         ld a,(game_control)
 39+  AE0F FE 00            cp 0
 40+  AE11 CA 19 AE         jp z,lifescreen_draw2
 41+  AE14 06 32            ld b,50
 42+  AE16 CD 64 81         call utilities_pauseforframes         ; pause for a second if joystick
 43+  AE19              lifescreen_draw2:
 44+  AE19 CD 6B B1         call sound_lifestart
 45+  AE1C 3E 64            ld a,100                              ; wait for 200 frames
 46+  AE1E CD 25 81         call utilities_waitforkey_forframes   ; wait for keypress
 47+  AE21
 48+  AE21 C9               ret
 49+  AE22
 50+  AE22              ;
 51+  AE22              ; Initialises the screen
 52+  AE22              ;
 53+  AE22              lifescreen_init:
 54+  AE22              ; We want a blue screen.
 55+  AE22                  ;call $0D6B
 56+  AE22 3E 0E            ld a,14             ; yellow ink (6) on blue paper (1),
 57+  AE24                                      ; bright (64).
 58+  AE24 CD 49 81         call utilities_clearscreen
 59+  AE27 32 8D 5C         ld (23693),a        ; set our screen colours.
 60+  AE2A 3E 01            ld a,1              ; 1 is the code for blue.
 61+  AE2C D3 FE            out (254),a         ; write to port 254.
 62+  AE2E                  ;call 3503           ; ROM routine - clears screen, opens chan 2.
 63+  AE2E
 64+  AE2E C9               ret
# file closed: screen/lifescreen.asm
145   AE2F                  include "screen\gameover.asm"
# file opened: screen/gameover.asm
  1+  AE2F              ;
  2+  AE2F              ; Draws the game over screen
  3+  AE2F              ;
  4+  AE2F              gameover_draw:
  5+  AE2F 3E 00            ld a,0
  6+  AE31 32 6D AF         ld (gameover_soundplayed),a
  7+  AE34 3E 01            ld a,1
  8+  AE36 32 EC C4         ld (game_currentplayer),a               ; do the first player first
  9+  AE39 CD 47 C6         call player_init_lifestart              ; get the player config
 10+  AE3C CD 92 AE         call gameover_enterhighscores
 11+  AE3F
 12+  AE3F 3A EB C4         ld a,(game_numberplayers)               ; check if we need to do player 2
 13+  AE42 FE 02            cp 2
 14+  AE44 C2 52 AE         jp nz,gameover_draw0
 15+  AE47 3E 02            ld a,2
 16+  AE49 32 EC C4         ld (game_currentplayer),a               ; do the second player
 17+  AE4C CD 47 C6         call player_init_lifestart              ; get the player config
 18+  AE4F CD 92 AE         call gameover_enterhighscores
 19+  AE52              gameover_draw0:
 20+  AE52 CD 60 AF         call gameover_init
 21+  AE55
 22+  AE55 21 50 84         ld hl,string_gameoverscreen_gameover
 23+  AE58 CD 30 86         call string_print
 24+  AE5B
 25+  AE5B 21 5C 84         ld hl,string_gameoverscreen_copyright
 26+  AE5E CD 30 86         call string_print
 27+  AE61
 28+  AE61 CD 75 AE         call gameover_commontext
 29+  AE64 CD 6E AF         call gameover_playsound
 30+  AE67 06 0B            ld b,11
 31+  AE69 3E 42            ld a,66
 32+  AE6B 11 2B 58         ld de,22528+43                         ; attrs here
 33+  AE6E CD A5 A9         call screen_setcolours
 34+  AE71 CD 10 81         call utilities_waitforkey   ; wait for keypress
 35+  AE74
 36+  AE74 C9               ret
 37+  AE75
 38+  AE75              ;
 39+  AE75              ; Draws text shared by the game over and high score screens
 40+  AE75              ;
 41+  AE75              gameover_commontext:
 42+  AE75 CD 69 A9         call screen_setuptext       ; show scores
 43+  AE78 CD 64 CD         call scores_printscores     ; print the current scores
 44+  AE7B
 45+  AE7B 21 84 84         ld hl,string_gameover_credits
 46+  AE7E CD 30 86         call string_print
 47+  AE81
 48+  AE81 21 70 84         ld hl,string_gameoverscreen_bestscores
 49+  AE84 CD 30 86         call string_print
 50+  AE87
 51+  AE87 06 20            ld b,32
 52+  AE89 3E 45            ld a,69
 53+  AE8B 11 C0 5A         ld de,22528+704                         ; attrs here
 54+  AE8E CD A5 A9         call screen_setcolours
 55+  AE91
 56+  AE91 C9               ret
 57+  AE92
 58+  AE92              ;
 59+  AE92              ; If required, enter highscore
 60+  AE92              ;
 61+  AE92              gameover_enterhighscores:
 62+  AE92                  ; check if we need to enter initial
 63+  AE92 CD D5 CD         call scores_processhighscores
 64+  AE95
 65+  AE95 3A D3 CD         ld a,(scores_highscoretmp)
 66+  AE98 FE 00            cp 0
 67+  AE9A C8               ret z
 68+  AE9B CD F6 AE         call gameover_enterhighscores_init
 69+  AE9E CD 6E AF         call gameover_playsound
 70+  AEA1                  ; Set the flash
 71+  AEA1 3A D3 CD         ld a,(scores_highscoretmp)              ; scoretmp has the memory offset of the start of the number
 72+  AEA4 1E 05            ld e,5
 73+  AEA6 93               sub e                                   ; get the score position back to coords
 74+  AEA7 11 00 00         ld de,0
 75+  AEAA 5F               ld e,a                                  ; load into de
 76+  AEAB 21 E9 CC         ld hl,scores_table
 77+  AEAE 19               add hl,de                               ; get the memory location
 78+  AEAF 4E 23 46 2B      ld bc,(hl)                              ; get the coords
 79+  AEB3 CD 17 AA         call screen_getscreenattradress         ; get the memory location of the cell attr into de
 80+  AEB6 1A               ld a,(de)                               ; get the current attr
 81+  AEB7 F6 80            or 128                                  ; make it flash
 82+  AEB9 12               ld (de),a
 83+  AEBA 13               inc de
 84+  AEBB 12               ld (de),a
 85+  AEBC 13               inc de
 86+  AEBD 12               ld (de),a                               ; make all three flash
 87+  AEBE 3A D3 CD         ld a,(scores_highscoretmp)              ; get the score back again
 88+  AEC1 3D               dec a
 89+  AEC2 3D               dec a
 90+  AEC3 3D               dec a                                   ; get high score location back to position of name
 91+  AEC4 16 00            ld d,0
 92+  AEC6 5F               ld e,a
 93+  AEC7 21 E9 CC         ld hl,scores_table
 94+  AECA 19               add hl,de                               ; load memory into hl
 95+  AECB 08               ex af,af'
 96+  AECC 06 0F            ld b,15
 97+  AECE CD 64 81         call utilities_pauseforframes           ; pause for a little bit
 98+  AED1 06 03            ld b,3                                  ; collect three chars
 99+  AED3              gameover_enterhighscores2:
100+  AED3 C5               push bc
101+  AED4 E5               push hl
102+  AED5              gameover_enterhighscores3:
103+  AED5 CD 68 81         call utilities_readkey               ; get key into a
104+  AED8 FE 41            cp 65
105+  AEDA DA D5 AE         jp c,gameover_enterhighscores3
106+  AEDD FE 5B            cp 91
107+  AEDF D2 D5 AE         jp nc,gameover_enterhighscores3      ; if not a letter, get another
108+  AEE2 E1               pop hl
109+  AEE3 77               ld (hl),a
110+  AEE4 23               inc hl
111+  AEE5 E5               push hl
112+  AEE6 CD E4 B1         call sound_gemcollected
113+  AEE9 CD C0 CD         call scores_showtable
114+  AEEC E1               pop hl
115+  AEED 06 0F            ld b,15
116+  AEEF CD 64 81         call utilities_pauseforframes
117+  AEF2 C1               pop bc
118+  AEF3 10 DE            djnz gameover_enterhighscores2
119+  AEF5 C9               ret
120+  AEF6
121+  AEF6              ;
122+  AEF6              ; Displays the screen text for high score entry
123+  AEF6              ;
124+  AEF6              gameover_enterhighscores_init:
125+  AEF6
126+  AEF6 CD 60 AF         call gameover_init
127+  AEF9 CD 75 AE         call gameover_commontext
128+  AEFC
129+  AEFC 21 90 84         ld hl,string_highscore_congratulations
130+  AEFF CD 30 86         call string_print
131+  AF02
132+  AF02 3A EC C4         ld a,(game_currentplayer)
133+  AF05 FE 01            cp 1
134+  AF07 21 A2 84         ld hl,string_highscore_player1
135+  AF0A C3 10 AF         jp gameover_enterhighscores_init1
136+  AF0D              gameover_enterhighscores_init0:
137+  AF0D 21 AD 84         ld hl,string_highscore_player2
138+  AF10              gameover_enterhighscores_init1:
139+  AF10 CD 30 86         call string_print
140+  AF13 06 60            ld b,96
141+  AF15 3E 43            ld a,67
142+  AF17 11 A0 58         ld de,22528+160                         ; attrs here
143+  AF1A CD A5 A9         call screen_setcolours
144+  AF1D
145+  AF1D 21 B8 84         ld hl,string_highscore_youhaveearned
146+  AF20 CD 30 86         call string_print
147+  AF23
148+  AF23 3A D3 CD         ld a,(scores_highscoretmp)
149+  AF26 FE 05            cp 5
150+  AF28 CA 36 AF         jp z, gameover_enterhighscores_init2    ; first place
151+  AF2B FE 11            cp 17
152+  AF2D CA 3C AF         jp z, gameover_enterhighscores_init3    ; 2nd place
153+  AF30 21 F4 84         ld hl,string_highscore_place3           ; 3rd place
154+  AF33 C3 42 AF         jp gameover_enterhighscores_init4
155+  AF36              gameover_enterhighscores_init2
156+  AF36 21 CA 84         ld hl,string_highscore_place1
157+  AF39 C3 42 AF         jp gameover_enterhighscores_init4
158+  AF3C              gameover_enterhighscores_init3
159+  AF3C 21 DF 84         ld hl,string_highscore_place2
160+  AF3F C3 42 AF         jp gameover_enterhighscores_init4
161+  AF42              gameover_enterhighscores_init4
162+  AF42 CD 30 86         call string_print
163+  AF45
164+  AF45 06 60            ld b,96
165+  AF47 3E 42            ld a,66
166+  AF49 11 40 59         ld de,22528+320                         ; attrs here
167+  AF4C CD A5 A9         call screen_setcolours
168+  AF4F
169+  AF4F 21 09 85         ld hl,string_highscore_pleaseenter
170+  AF52 CD 30 86         call string_print
171+  AF55
172+  AF55 06 60            ld b,96
173+  AF57 3E 46            ld a,70
174+  AF59 11 E0 59         ld de,22528+480                         ; attrs here
175+  AF5C CD A5 A9         call screen_setcolours
176+  AF5F C9               ret
177+  AF60
178+  AF60              ;
179+  AF60              ; Initialises the screen
180+  AF60              ;
181+  AF60              gameover_init:
182+  AF60              ; We want a black screen.
183+  AF60 3E 47            ld a,71             ; white ink (7) on black paper (0),
184+  AF62                                      ; bright (64).
185+  AF62 CD 49 81         call utilities_clearscreen
186+  AF65 32 8D 5C         ld (23693),a        ; set our screen colours.
187+  AF68 3E 00            ld a,0              ; 2 is the code for red.
188+  AF6A D3 FE            out (254),a         ; write to port 254.
189+  AF6C C9               ret
190+  AF6D
191+  AF6D              gameover_soundplayed:
192+  AF6D 00               defb 0
193+  AF6E
194+  AF6E              ;
195+  AF6E              ; Plays the sound if it hasn't already been played
196+  AF6E              ;
197+  AF6E              gameover_playsound:
198+  AF6E 3A 6D AF         ld a,(gameover_soundplayed)
199+  AF71 FE 01            cp 1
200+  AF73 C8               ret z
201+  AF74 CD 98 B1         call sound_gameover
202+  AF77 3E 01            ld a,1
203+  AF79 32 6D AF         ld (gameover_soundplayed),a
204+  AF7C C9               ret
# file closed: screen/gameover.asm
146   AF7D                  include "screen\endlevel.asm"
# file opened: screen/endlevel.asm
  1+  AF7D              ;
  2+  AF7D              ; Draws the level transition screen
  3+  AF7D              ;
  4+  AF7D              endlevel_draw:
  5+  AF7D CD 7E B0         call endlevel_init
  6+  AF80 CD 67 B0         call endlevel_commontext
  7+  AF83
  8+  AF83 21 90 84         ld hl,string_highscore_congratulations
  9+  AF86 CD 30 86         call string_print
 10+  AF89
 11+  AF89 3A EC C4         ld a,(game_currentplayer)
 12+  AF8C FE 01            cp 1
 13+  AF8E 21 A2 84         ld hl,string_highscore_player1
 14+  AF91 C3 97 AF         jp endlevel_init1
 15+  AF94              endlevel_init0:
 16+  AF94 21 AD 84         ld hl,string_highscore_player2
 17+  AF97              endlevel_init1:
 18+  AF97 CD 30 86         call string_print
 19+  AF9A
 20+  AF9A 21 26 85         ld hl,string_endlevel_youhaveearned
 21+  AF9D CD 30 86         call string_print
 22+  AFA0
 23+  AFA0 CD 06 B0         call endlevel_workoutbonus
 24+  AFA3 D5               push de
 25+  AFA4 08               ex af,af'                               ; store the a value for later
 26+  AFA5 CD 30 86         call string_print
 27+  AFA8 D1               pop de
 28+  AFA9 62 6B            ld hl,de                                ; get the points text into de
 29+  AFAB CD 30 86         call string_print
 30+  AFAE
 31+  AFAE 21 91 85         ld hl, string_endlevel_anothergo
 32+  AFB1 CD 30 86         call string_print
 33+  AFB4
 34+  AFB4 06 20            ld b,32
 35+  AFB6 3E 23            ld a,35
 36+  AFB8 11 60 59         ld de,22528+352                         ; attrs here
 37+  AFBB CD A5 A9         call screen_setcolours
 38+  AFBE
 39+  AFBE 06 20            ld b,32
 40+  AFC0 3E 25            ld a,37
 41+  AFC2 11 A0 59         ld de,22528+416                         ; attrs here
 42+  AFC5 CD A5 A9         call screen_setcolours
 43+  AFC8
 44+  AFC8 06 20            ld b,32
 45+  AFCA 3E 23            ld a,35
 46+  AFCC 11 E0 59         ld de,22528+480                         ; attrs here
 47+  AFCF CD A5 A9         call screen_setcolours
 48+  AFD2
 49+  AFD2 06 20            ld b,32
 50+  AFD4 3E 22            ld a,34
 51+  AFD6 11 40 5A         ld de,22528+576                         ; attrs here
 52+  AFD9 CD A5 A9         call screen_setcolours
 53+  AFDC
 54+  AFDC 08               ex af,af'                               ; get back a value with bonus type
 55+  AFDD 06 14            ld b,20
 56+  AFDF CD 64 81         call utilities_pauseforframes
 57+  AFE2
 58+  AFE2 47               ld b,a                      ; put the bonus count in b
 59+  AFE3              endlevel_init2:
 60+  AFE3 C5               push bc
 61+  AFE4 06 01            ld b,1
 62+  AFE6 CD 0D CD         call scores_addthousands
 63+  AFE9 CD B5 B1         call sound_scoretick
 64+  AFEC CD A6 C6         call player_recordcurrentstate
 65+  AFEF CD 24 CD         call scores_printscore     ; print the current scores
 66+  AFF2 06 0A            ld b,10
 67+  AFF4 CD 64 81         call utilities_pauseforframes
 68+  AFF7 C1               pop bc
 69+  AFF8 10 E9            djnz endlevel_init2
 70+  AFFA
 71+  AFFA CD 8F C5         call game_increasedifficulty ; move the difficulty up a level
 72+  AFFD CD A6 C6         call player_recordcurrentstate
 73+  B000
 74+  B000 3E 64            ld a,100                              ; wait for 200 frames
 75+  B002 CD 25 81         call utilities_waitforkey_forframes   ; wait for keypress
 76+  B005
 77+  B005 C9               ret
 78+  B006
 79+  B006              ;
 80+  B006              ; Works out the bonus
 81+  B006              ; Outputs:
 82+  B006              ; a = 15 (all seven)
 83+  B006              ; a = 10 (3 large or 4 small)
 84+  B006              ; a = 5 (1 large diamond)
 85+  B006              ; hl - pointer to bonus text
 86+  B006              ; de - pointer to points text
 87+  B006              ;
 88+  B006              endlevel_workoutbonus:
 89+  B006 21 BD B8         ld hl,level_diamonds+2     ; location of state of first diamond
 90+  B009 06 03            ld b,3                      ; number to check
 91+  B00B 16 00            ld d,0                      ; zero diamond count
 92+  B00D              endlevel_workoutbonus0:
 93+  B00D 7E               ld a,(hl)                   ; get state
 94+  B00E FE 01            cp 1
 95+  B010 C2 14 B0         jp nz,endlevel_workoutbonus1 ; if not, move on
 96+  B013 14               inc d                       ; increment diamond count
 97+  B014              endlevel_workoutbonus1:
 98+  B014 23               inc hl
 99+  B015 23               inc hl
100+  B016 23               inc hl
101+  B017 23               inc hl
102+  B018 23               inc hl                      ; get to next state
103+  B019 10 F2            djnz endlevel_workoutbonus0
104+  B01B
105+  B01B 21 CD B8         ld hl,level_gems+2     ; location of state of first gem
106+  B01E 06 04            ld b,4                      ; number to check
107+  B020 1E 00            ld e,0                      ; zero gem count
108+  B022              endlevel_workoutbonus2:
109+  B022 7E               ld a,(hl)                   ; get state
110+  B023 FE 01            cp 1
111+  B025 C2 29 B0         jp nz,endlevel_workoutbonus3 ; if not, move on
112+  B028 1C               inc e                       ; increment diamond count
113+  B029              endlevel_workoutbonus3:
114+  B029 23               inc hl
115+  B02A 23               inc hl
116+  B02B 23               inc hl
117+  B02C 23               inc hl
118+  B02D 23               inc hl                     ; get to next state
119+  B02E 10 F2            djnz endlevel_workoutbonus2
120+  B030
121+  B030 7A               ld a,d
122+  B031 83               add e
123+  B032 FE 07            cp 7                        ; check for max bonus
124+  B034 C2 40 B0         jp nz,endlevel_workoutbonus4 ;
125+  B037 3E 0F            ld a,15
126+  B039 21 56 85         ld hl, string_endlevel_bonus3
127+  B03C 11 82 85         ld de, string_endlevel_points3
128+  B03F C9               ret                         ; return with bonus of 15
129+  B040              endlevel_workoutbonus4:
130+  B040 7A               ld a,d                      ; check for for diamonds
131+  B041 FE 03            cp 3
132+  B043 C2 4F B0         jp nz,endlevel_workoutbonus5
133+  B046 3E 0A            ld a,10
134+  B048 21 47 85         ld hl, string_endlevel_bonus2
135+  B04B 11 73 85         ld de, string_endlevel_points2
136+  B04E C9               ret                         ; return with bonus of ten
137+  B04F              endlevel_workoutbonus5:
138+  B04F 7B               ld a,e                      ; check for four gems
139+  B050 FE 04            cp 4
140+  B052 C2 5E B0         jp nz,endlevel_workoutbonus6
141+  B055 3E 0A            ld a,10
142+  B057 21 47 85         ld hl, string_endlevel_bonus2
143+  B05A 11 73 85         ld de, string_endlevel_points2
144+  B05D C9               ret                         ; return with bonus of 10
145+  B05E              endlevel_workoutbonus6:
146+  B05E 3E 05            ld a,5                      ; otherwise, bonus is 5
147+  B060 21 38 85         ld hl, string_endlevel_bonus1
148+  B063 11 65 85         ld de, string_endlevel_points1
149+  B066 C9               ret
150+  B067
151+  B067              ;
152+  B067              ; Draws text shared by the game over and high score screens
153+  B067              ;
154+  B067              endlevel_commontext:
155+  B067 CD 69 A9         call screen_setuptext       ; show scores
156+  B06A CD 64 CD         call scores_printscores     ; print the current scores
157+  B06D
158+  B06D 21 70 84         ld hl,string_gameoverscreen_bestscores
159+  B070 CD 30 86         call string_print
160+  B073
161+  B073 06 20            ld b,32
162+  B075 3E 45            ld a,69
163+  B077 11 C0 5A         ld de,22528+704                         ; attrs here
164+  B07A CD A5 A9         call screen_setcolours
165+  B07D
166+  B07D C9               ret
167+  B07E
168+  B07E              ;
169+  B07E              ; Initialises the screen
170+  B07E              ;
171+  B07E              endlevel_init:
172+  B07E              ; We want a green screen.
173+  B07E 3E 21            ld a,33             ; white ink (7) on black paper (0),
174+  B080                                      ; bright (64).
175+  B080 CD 49 81         call utilities_clearscreen
176+  B083 32 8D 5C         ld (23693),a        ; set our screen colours.
177+  B086 3E 00            ld a,0              ; 2 is the code for red.
178+  B088 D3 FE            out (254),a         ; write to port 254.
179+  B08A C9               ret
# file closed: screen/endlevel.asm
147   B08B                  include "screen\options.asm"
# file opened: screen/options.asm
  1+  B08B              ;
  2+  B08B              ; Show the options screen
  3+  B08B              ;
  4+  B08B              options_show:
  5+  B08B CD 2C B1         call options_init
  6+  B08E
  7+  B08E 21 AC 85         ld hl,string_options_title
  8+  B091 CD 30 86         call string_print
  9+  B094 21 B6 85         ld hl,string_options_1player
 10+  B097 CD 30 86         call string_print
 11+  B09A 21 C6 85         ld hl,string_options_2player
 12+  B09D CD 30 86         call string_print
 13+  B0A0 21 D6 85         ld hl,string_options_keyboard
 14+  B0A3 CD 30 86         call string_print
 15+  B0A6 21 E9 85         ld hl,string_options_joystick
 16+  B0A9 CD 30 86         call string_print
 17+  B0AC 21 F7 85         ld hl,string_options_start
 18+  B0AF CD 30 86         call string_print
 19+  B0B2 21 02 86         ld hl,string_options_vanity
 20+  B0B5 CD 30 86         call string_print
 21+  B0B8
 22+  B0B8 3A EB C4         ld a,(game_numberplayers)
 23+  B0BB FE 01            cp 1
 24+  B0BD C2 C6 B0         jp nz,options_show0
 25+  B0C0 11 C9 58         ld de,22528+201                         ; top row attrs here
 26+  B0C3 C3 C9 B0         jp options_show1
 27+  B0C6              options_show0:
 28+  B0C6 11 E9 58         ld de,22528+233                         ; top row attrs here
 29+  B0C9              options_show1:
 30+  B0C9 06 10            ld b,16
 31+  B0CB 3E C7            ld a,199
 32+  B0CD CD A5 A9         call screen_setcolours                  ; highlight current player
 33+  B0D0
 34+  B0D0 3A EF C4         ld a,(game_control)
 35+  B0D3 FE 00            cp 0
 36+  B0D5 C2 DE B0         jp nz,options_show6
 37+  B0D8 11 09 59         ld de,22528+265                         ; top row attrs here
 38+  B0DB C3 E1 B0         jp options_show7
 39+  B0DE              options_show6:
 40+  B0DE 11 29 59         ld de,22528+297                         ; top row attrs here
 41+  B0E1              options_show7:
 42+  B0E1 06 10            ld b,16
 43+  B0E3 3E C7            ld a,199
 44+  B0E5 CD A5 A9         call screen_setcolours                  ; highlight current control
 45+  B0E8              options_show8:
 46+  B0E8 CD 68 81         call utilities_readkey
 47+  B0EB FE 31            cp 49                                   ; was 1 pressed
 48+  B0ED C2 F8 B0         jp nz,options_show2
 49+  B0F0 21 EB C4         ld hl,game_numberplayers
 50+  B0F3 36 01            ld (hl),1
 51+  B0F5 C3 26 B1         jp options_show9
 52+  B0F8              options_show2:
 53+  B0F8 FE 32            cp 50                                   ; was 2 pressed
 54+  B0FA C2 05 B1         jp nz,options_show3
 55+  B0FD 21 EB C4         ld hl,game_numberplayers
 56+  B100 36 02            ld (hl),2
 57+  B102 C3 26 B1         jp options_show9
 58+  B105              options_show3:
 59+  B105 FE 33            cp 51                                   ; was 3 pressed
 60+  B107 C2 12 B1         jp nz,options_show4
 61+  B10A 21 EF C4         ld hl,game_control
 62+  B10D 36 00            ld (hl),0
 63+  B10F C3 26 B1         jp options_show9
 64+  B112              options_show4:
 65+  B112 FE 34            cp 52                                   ; was 4 pressed
 66+  B114 C2 1F B1         jp nz,options_show5
 67+  B117 21 EF C4         ld hl,game_control
 68+  B11A 36 01            ld (hl),1
 69+  B11C C3 26 B1         jp options_show9
 70+  B11F              options_show5:
 71+  B11F FE 35            cp 53                                   ; was 5 pressed
 72+  B121 C8               ret z                                   ; exit if so
 73+  B122 C3 E8 B0         jp options_show8                         ; otherwise, jump to top
 74+  B125 C9               ret
 75+  B126              options_show9:
 76+  B126 CD E4 B1         call sound_gemcollected
 77+  B129 C3 8B B0         jp options_show
 78+  B12C
 79+  B12C              ;
 80+  B12C              ; Initialise the options screen
 81+  B12C              ;
 82+  B12C              options_init:
 83+  B12C 3E 47            ld a,71             ; white ink (7) on black paper (0),
 84+  B12E                                      ; bright (64).
 85+  B12E CD 49 81         call utilities_clearscreen
 86+  B131 32 8D 5C         ld (23693),a        ; set our screen colours.
 87+  B134 3E 00            ld a,0              ; 2 is the code for red.
 88+  B136 D3 FE            out (254),a         ; write to port 254.
 89+  B138
 90+  B138 C9               ret
 91+  B139 C9               ret
# file closed: screen/options.asm
148   B13A
149   B13A                  include "sound\sound.asm"
# file opened: sound/sound.asm
  1+  B13A
  2+  B13A
  3+  B13A              ;
  4+  B13A              ; Plays a note
  5+  B13A              ; Inputs:
  6+  B13A              ; d - border
  7+  B13A              ; e - pitch
  8+  B13A              ; bc - duration
  9+  B13A              sound_play:
 10+  B13A 7B               ld a,e
 11+  B13B 32 45 B1         ld (sound_play2+1),a
 12+  B13E 7A           	ld a,d
 13+  B13F              sound_play0:
 14+  B13F D3 FE            out (254),a
 15+  B141 1D               dec e
 16+  B142 20 04            jr nz,sound_play1
 17+  B144              sound_play2:
 18+  B144 1E 00            ld e,0
 19+  B146 EE 18            xor 24
 20+  B148              sound_play1:
 21+  B148 10 F5            djnz sound_play0
 22+  B14A 0D               dec c
 23+  B14B 20 F2            jr nz,sound_play0
 24+  B14D C9               ret
 25+  B14E
 26+  B14E              sound_gamestart:
 27+  B14E F3               di
 28+  B14F 06 03            ld b,3
 29+  B151              sound_gamestart0:
 30+  B151 C5               push bc
 31+  B152 1E 36            ld e,54
 32+  B154 01 4B 00         ld bc,75
 33+  B157 16 02            ld d,2
 34+  B159 CD 3A B1         call sound_play
 35+  B15C 1E 4C            ld e,76
 36+  B15E 01 4B 00         ld bc,75
 37+  B161 16 02            ld d,2
 38+  B163 CD 3A B1         call sound_play
 39+  B166 C1               pop bc
 40+  B167 10 E8            djnz sound_gamestart0
 41+  B169 FB               ei
 42+  B16A C9               ret
 43+  B16B
 44+  B16B              sound_lifestart:
 45+  B16B F3               di
 46+  B16C 06 03            ld b,3
 47+  B16E              sound_lifestart0:
 48+  B16E C5               push bc
 49+  B16F 1E 2D            ld e,45
 50+  B171 01 20 00         ld bc,32
 51+  B174 16 01            ld d,1
 52+  B176 CD 3A B1         call sound_play
 53+  B179 1E 41            ld e,65
 54+  B17B 01 20 00         ld bc,32
 55+  B17E 16 01            ld d,1
 56+  B180 CD 3A B1         call sound_play
 57+  B183 1E 2D            ld e,45
 58+  B185 01 20 00         ld bc,32
 59+  B188 CD 3A B1         call sound_play
 60+  B18B 1E 41            ld e,65
 61+  B18D 01 20 00         ld bc,32
 62+  B190 CD 3A B1         call sound_play
 63+  B193 C1               pop bc
 64+  B194 10 D8            djnz sound_lifestart0
 65+  B196 FB               ei
 66+  B197 C9               ret
 67+  B198
 68+  B198              sound_gameover:
 69+  B198 F3               di
 70+  B199 06 0A            ld b,10
 71+  B19B 1E 28            ld e,40
 72+  B19D              sound_gameover0:
 73+  B19D C5               push bc
 74+  B19E D5               push de
 75+  B19F F5               push af
 76+  B1A0 01 20 00         ld bc,32
 77+  B1A3 16 00            ld d,0
 78+  B1A5 CD 3A B1         call sound_play
 79+  B1A8 F1               pop af
 80+  B1A9 D1               pop de
 81+  B1AA 3E 0A            ld a,10
 82+  B1AC 83               add e
 83+  B1AD 5F               ld e,a
 84+  B1AE C6 04            add 4
 85+  B1B0 C1               pop bc
 86+  B1B1 10 EA            djnz sound_gameover0
 87+  B1B3 FB               ei
 88+  B1B4 C9               ret
 89+  B1B5
 90+  B1B5              sound_scoretick:
 91+  B1B5 F3               di
 92+  B1B6 1E 23            ld e,35
 93+  B1B8 01 18 00         ld bc,24
 94+  B1BB 16 00            ld d,0
 95+  B1BD CD 3A B1         call sound_play
 96+  B1C0 FB               ei
 97+  B1C1 C9               ret
 98+  B1C2
 99+  B1C2              sound_tankalarm:
100+  B1C2 F3               di
101+  B1C3 1E 19            ld e,25
102+  B1C5 01 18 00         ld bc,24
103+  B1C8 16 00            ld d,0
104+  B1CA CD 3A B1         call sound_play
105+  B1CD FB               ei
106+  B1CE C9               ret
107+  B1CF
108+  B1CF              sound_laser:
109+  B1CF 16 10        	ld d,16		            ;speaker = bit 4
110+  B1D1 1E 00        	ld e,0		            ;distance between speaker move counter
111+  B1D3 06 80        	ld b,128	            ;overall length counter
112+  B1D5              sound_laser0:
113+  B1D5 7A               ld a,d
114+  B1D6 E6 F8        	and 248		            ;keep border colour the same
115+  B1D8 D3 FE        	out (254),a	            ;move the speaker in or out depending on bit 4
116+  B1DA 2F           	cpl		                ;toggle, so we alternative between speaker in and out to make sound
117+  B1DB 57           	ld d,a		            ;store it
118+  B1DC 4B           	ld c,e		            ;now a pause
119+  B1DD              sound_laser1:
120+  B1DD 0D               dec c
121+  B1DE 20 FD        	jr nz,sound_laser1
122+  B1E0 1D           	dec e		            ;change to inc e to reverse the sound, or remove to make it a note
123+  B1E1 10 F2        	djnz sound_laser0	;repeat B=255 times
124+  B1E3 C9           	ret
125+  B1E4
126+  B1E4              sound_gemcollected:
127+  B1E4 16 10        	ld d,16		            ;speaker = bit 4
128+  B1E6 1E 00        	ld e,0		            ;distance between speaker move counter
129+  B1E8 06 80        	ld b,128	            ;overall length counter
130+  B1EA              sound_gemcollected0:
131+  B1EA 7A               ld a,d
132+  B1EB E6 F8        	and 248		            ;keep border colour the same
133+  B1ED D3 FE        	out (254),a	            ;move the speaker in or out depending on bit 4
134+  B1EF 2F           	cpl		                ;toggle, so we alternative between speaker in and out to make sound
135+  B1F0 57           	ld d,a		            ;store it
136+  B1F1 4B           	ld c,e		            ;now a pause
137+  B1F2              sound_gemcollected1:
138+  B1F2 0D               dec c
139+  B1F3 20 FD        	jr nz,sound_gemcollected1
140+  B1F5 1C           	inc e		            ;change to inc e to reverse the sound, or remove to make it a note
141+  B1F6 10 F2        	djnz sound_gemcollected0	;repeat B=255 times
142+  B1F8 C9           	ret
143+  B1F9
144+  B1F9              sound_pitchbend:
145+  B1F9 21 F4 01         ld hl,500 ; starting pitch.
146+  B1FC 06 FA            ld b,250 ; length of pitch bend.
147+  B1FE              sound_pitchbend0:
148+  B1FE C5                push bc
149+  B1FF E5               push hl ; store pitch.
150+  B200 11 01 00         ld de,1 ; very short duration.
151+  B203 CD B5 03         call 949 ; ROM beeper routine.
152+  B206 E1               pop hl ; restore pitch.
153+  B207 23               inc hl ; pitch going up.
154+  B208 C1               pop bc
155+  B209 10 F3            djnz sound_pitchbend0 ; repeat.
156+  B20B C9               ret
157+  B20C
158+  B20C              sound_pitchbenddown:
159+  B20C 21 EE 02         ld hl,750 ; starting pitch.
160+  B20F 06 FA            ld b,250 ; length of pitch bend.
161+  B211              sound_pitchbenddown0:
162+  B211 C5               push bc
163+  B212 E5               push hl ; store pitch.
164+  B213 11 01 00         ld de,1 ; very short duration.
165+  B216 CD B5 03         call 949 ; ROM beeper routine.
166+  B219 E1               pop hl ; restore pitch.
167+  B21A 2B               dec hl ; pitch going down.
168+  B21B C1               pop bc
169+  B21C 10 F3            djnz sound_pitchbenddown0 ; repeat.
170+  B21E C9               ret
171+  B21F
172+  B21F              sound_rockfell:
173+  B21F 08               ex af,af'
174+  B220 1E 32            ld e,50 ; repeat 250 times.
175+  B222 21 00 00         ld hl,0 ; start pointer in ROM.
176+  B225              sound_rockfell2
177+  B225 D5               push de
178+  B226 06 20            ld b,32 ; length of step.
179+  B228 C5           sound_rockfell0 push bc
180+  B229 7E               ld a,(hl) ; next "random" number.
181+  B22A 23               inc hl ; pointer.
182+  B22B E6 F8            and 248 ; we want a black border.
183+  B22D D3 FE            out (254),a ; write to speaker.
184+  B22F 7B               ld a,e ; as e gets smaller...
185+  B230 2F               cpl ; ...we increase the delay.
186+  B231 3D           sound_rockfell1 dec a ; decrement loop counter.
187+  B232 20 FD            jr nz,sound_rockfell1 ; delay loop.
188+  B234 C1               pop bc
189+  B235 10 F1            djnz sound_rockfell0 ; next step.
190+  B237 D1               pop de
191+  B238 7B               ld a,e
192+  B239 D6 18            sub 24 ; size of step.
193+  B23B FE 1E            cp 30 ; end of range.
194+  B23D CA 4E B2         jp z,sound_rockfell5
195+  B240 DA 4E B2         jp c, sound_rockfell5
196+  B243 5F               ld e,a
197+  B244 2F               cpl
198+  B245 06 28        sound_rockfell3 ld b,40 ; silent period.
199+  B247 10 FE        sound_rockfell4 djnz sound_rockfell4
200+  B249 3D               dec a
201+  B24A 20 F9            jr nz,sound_rockfell3
202+  B24C 18 D7            jr sound_rockfell2
203+  B24E              sound_rockfell5
204+  B24E 08               ex af,af'
205+  B24F C9               ret
206+  B250
207+  B250              sound_tankshoot:
208+  B250 08               ex af,af'
209+  B251 1E 32            ld e,50 ; repeat 250 times.
210+  B253 21 00 00         ld hl,0 ; start pointer in ROM.
211+  B256              sound_tankshoot2
212+  B256 D5               push de
213+  B257 06 10            ld b,16 ; length of step.
214+  B259 C5           sound_tankshoot0 push bc
215+  B25A 7E               ld a,(hl) ; next "random" number.
216+  B25B 23               inc hl ; pointer.
217+  B25C E6 F8            and 248 ; we want a black border.
218+  B25E D3 FE            out (254),a ; write to speaker.
219+  B260 7B               ld a,e ; as e gets smaller...
220+  B261 2F               cpl ; ...we increase the delay.
221+  B262 3D           sound_tankshoot1 dec a ; decrement loop counter.
222+  B263 20 FD            jr nz,sound_tankshoot1 ; delay loop.
223+  B265 C1               pop bc
224+  B266 10 F1            djnz sound_tankshoot0 ; next step.
225+  B268 D1               pop de
226+  B269 7B               ld a,e
227+  B26A D6 18            sub 24 ; size of step.
228+  B26C FE 1E            cp 30 ; end of range.
229+  B26E CA 7F B2         jp z,sound_tankshoot5
230+  B271 DA 7F B2         jp c, sound_tankshoot5
231+  B274 5F               ld e,a
232+  B275 2F               cpl
233+  B276 06 28        sound_tankshoot3 ld b,40 ; silent period.
234+  B278 10 FE        sound_tankshoot4 djnz sound_tankshoot4
235+  B27A 3D               dec a
236+  B27B 20 F9            jr nz,sound_tankshoot3
237+  B27D 18 D7            jr sound_tankshoot2
238+  B27F              sound_tankshoot5
239+  B27F 08               ex af,af'
240+  B280 C9               ret
241+  B281
242+  B281              ; Call this every time you want to initialise a sound effect
243+  B281              ; A = Variable 1
244+  B281              ; B = Variable 2
245+  B281              ; C = Duration of overall sound effect
246+  B281              ; D = Duration of each step of the sound effect
247+  B281              ;
248+  B281              soundfx_a_init:
249+  B281 32 A8 B2         ld (soundfx_a_v2+1),a
250+  B284 78               ld a,b
251+  B285 32 B1 B2         ld (soundfx_a_v3+1),a
252+  B288 79               ld a,c
253+  B289 32 96 B2         ld (soundfx_a_main+1),a
254+  B28C 7A               ld a,d
255+  B28D 32 9D B2         ld (soundfx_a_v1+1),a
256+  B290 AF               xor a
257+  B291 32 BA B2         ld (soundfx_a_v4),a
258+  B294 C9               ret
259+  B295
260+  B295              ; Call this during your main loop
261+  B295              ; It will play one step of the sound effect each pass
262+  B295              ; until the complete sound effect has finished
263+  B295              ;
264+  B295              soundfx_a_main:
265+  B295 3E 00            ld a,0
266+  B297 3D               dec a
267+  B298 C8               ret z
268+  B299 32 96 B2         ld (soundfx_a_main+1),a
269+  B29C              soundfx_a_v1:
270+  B29C 06 00            ld b,0
271+  B29E 21 BA B2         ld hl,soundfx_a_v4
272+  B2A1              soundfx_a_l1:
273+  B2A1 48               ld c,b
274+  B2A2 3E 08            ld a,%00001000
275+  B2A4 D3 FE            out (254),a
276+  B2A6 7E               ld a,(hl)
277+  B2A7              soundfx_a_v2:
278+  B2A7 EE 00            xor 0
279+  B2A9 47               ld b,a
280+  B2AA 10 FE            djnz $
281+  B2AC AF               xor a
282+  B2AD D3 FE            out (254),a
283+  B2AF 7E               ld a,(hl)
284+  B2B0              soundfx_a_v3:
285+  B2B0 EE 00            xor 0
286+  B2B2 47               ld b,a
287+  B2B3 10 FE            djnz $
288+  B2B5 35               dec (hl)
289+  B2B6 41               ld b,c
290+  B2B7 10 E8            djnz soundfx_a_l1
291+  B2B9 C9               ret
292+  B2BA
293+  B2BA              soundfx_a_v4:
294+  B2BA 00               defb 0
# file closed: sound/sound.asm
150   B2BB
151   B2BB                  include "leveldata\level.asm"
# file opened: leveldata/level.asm
  1+  B2BB              ; ###############################################################
  2+  B2BB              ; Data for level 1
  3+  B2BB              ; ###############################################################
  4+  B2BB              level_layout:
  5+  B2BB
  6+  B2BB                  ;defb 09,04,04,04,04,04,04,04,04,04,04,04,04,04,04,09,09,04,04,04,04,04,04,04,04,04,04,04,04,04,04,09
  7+  B2BB
  8+  B2BB 00 00 05 05      defb 00,00,05,05,05,05,05,05,05,05,05,05,05,05,02,01,01,01,03,05,05,05,05,05,05,05,05,05,05,05,00,00
  8+  B2BF 05 05 05 05
  8+  B2C3 05 05 05 05
  8+  B2C7 05 05 02 01
  8+  B2CB 01 01 03 05
  8+  B2CF 05 05 05 05
  8+  B2D3 05 05 05 05
  8+  B2D7 05 05 00 00
  9+  B2DB 00 00 05 05      defb 00,00,05,05,05,05,05,05,05,05,05,05,02,01,01,01,01,01,01,01,03,05,05,05,05,05,05,05,05,05,00,00
  9+  B2DF 05 05 05 05
  9+  B2E3 05 05 05 05
  9+  B2E7 02 01 01 01
  9+  B2EB 01 01 01 01
  9+  B2EF 03 05 05 05
  9+  B2F3 05 05 05 05
  9+  B2F7 05 05 00 00
 10+  B2FB 00 00 05 05      defb 00,00,05,05,05,05,05,05,05,05,02,01,01,01,01,01,01,01,01,01,01,01,03,05,13,13,13,13,13,13,00,00
 10+  B2FF 05 05 05 05
 10+  B303 05 05 02 01
 10+  B307 01 01 01 01
 10+  B30B 01 01 01 01
 10+  B30F 01 01 03 05
 10+  B313 0D 0D 0D 0D
 10+  B317 0D 0D 00 00
 11+  B31B 00 00 01 01      defb 00,00,01,01,01,01,00,01,01,01,01,01,01,01,01,01,01,01,01,01,01,01,01,03,05,05,05,05,05,05,00,00
 11+  B31F 01 01 00 01
 11+  B323 01 01 01 01
 11+  B327 01 01 01 01
 11+  B32B 01 01 01 01
 11+  B32F 01 01 01 03
 11+  B333 05 05 05 05
 11+  B337 05 05 00 00
 12+  B33B 00 00 01 01      defb 00,00,01,01,04,04,04,04,04,04,01,01,01,01,01,01,01,01,01,01,01,01,01,01,01,01,01,01,00,01,00,00
 12+  B33F 04 04 04 04
 12+  B343 04 04 01 01
 12+  B347 01 01 01 01
 12+  B34B 01 01 01 01
 12+  B34F 01 01 01 01
 12+  B353 01 01 01 01
 12+  B357 00 01 00 00
 13+  B35B 00 00 01 04      defb 00,00,01,04,04,04,04,04,04,04,04,04,01,01,01,01,01,01,01,01,01,01,01,01,00,00,00,00,00,01,00,00
 13+  B35F 04 04 04 04
 13+  B363 04 04 04 04
 13+  B367 01 01 01 01
 13+  B36B 01 01 01 01
 13+  B36F 01 01 01 01
 13+  B373 00 00 00 00
 13+  B377 00 01 00 00
 14+  B37B 00 00 01 04      defb 00,00,01,04,04,01,01,01,01,01,04,04,04,04,01,01,01,01,01,01,01,00,00,00,00,01,01,01,01,01,00,00
 14+  B37F 04 01 01 01
 14+  B383 01 01 04 04
 14+  B387 04 04 01 01
 14+  B38B 01 01 01 01
 14+  B38F 01 00 00 00
 14+  B393 00 01 01 01
 14+  B397 01 01 00 00
 15+  B39B 00 00 01 04      defb 00,00,01,04,04,04,04,04,04,01,04,04,04,04,04,04,04,04,00,00,00,00,04,04,04,04,04,04,04,01,00,00
 15+  B39F 04 04 04 04
 15+  B3A3 04 01 04 04
 15+  B3A7 04 04 04 04
 15+  B3AB 04 04 00 00
 15+  B3AF 00 00 04 04
 15+  B3B3 04 04 04 04
 15+  B3B7 04 01 00 00
 16+  B3BB 00 00 01 01      defb 00,00,01,01,01,04,01,01,01,01,04,04,04,04,04,04,04,04,00,04,04,04,04,04,04,04,04,04,04,01,00,00
 16+  B3BF 01 04 01 01
 16+  B3C3 01 01 04 04
 16+  B3C7 04 04 04 04
 16+  B3CB 04 04 00 04
 16+  B3CF 04 04 04 04
 16+  B3D3 04 04 04 04
 16+  B3D7 04 01 00 00
 17+  B3DB 00 00 01 00      defb 00,00,01,00,00,00,00,00,00,04,04,04,04,04,04,04,04,04,00,04,04,04,04,04,04,04,04,04,04,01,00,00
 17+  B3DF 00 00 00 00
 17+  B3E3 00 04 04 04
 17+  B3E7 04 04 04 04
 17+  B3EB 04 04 00 04
 17+  B3EF 04 04 04 04
 17+  B3F3 04 04 04 04
 17+  B3F7 04 01 00 00
 18+  B3FB 00 00 01 15      defb 00,00,01,21,21,21,21,21,21,01,04,04,04,04,04,04,04,04,00,04,04,04,04,04,04,04,04,04,04,01,00,00
 18+  B3FF 15 15 15 15
 18+  B403 15 01 04 04
 18+  B407 04 04 04 04
 18+  B40B 04 04 00 04
 18+  B40F 04 04 04 04
 18+  B413 04 04 04 04
 18+  B417 04 01 00 00
 19+  B41B 00 00 01 00      defb 00,00,01,00,00,00,00,00,00,01,04,04,04,04,04,04,04,04,00,04,04,04,04,04,04,00,00,00,00,01,00,00
 19+  B41F 00 00 00 00
 19+  B423 00 01 04 04
 19+  B427 04 04 04 04
 19+  B42B 04 04 00 04
 19+  B42F 04 04 04 04
 19+  B433 04 00 00 00
 19+  B437 00 01 00 00
 20+  B43B 00 00 01 00      defb 00,00,01,00,00,00,00,00,00,01,04,04,04,04,04,04,04,04,00,04,04,04,04,04,04,00,04,04,00,01,00,00
 20+  B43F 00 00 00 00
 20+  B443 00 01 04 04
 20+  B447 04 04 04 04
 20+  B44B 04 04 00 04
 20+  B44F 04 04 04 04
 20+  B453 04 00 04 04
 20+  B457 00 01 00 00
 21+  B45B 00 00 01 06      defb 00,00,01,06,06,06,06,06,06,01,04,04,04,04,04,04,04,04,00,04,04,04,04,04,04,00,04,04,00,01,00,00
 21+  B45F 06 06 06 06
 21+  B463 06 01 04 04
 21+  B467 04 04 04 04
 21+  B46B 04 04 00 04
 21+  B46F 04 04 04 04
 21+  B473 04 00 04 04
 21+  B477 00 01 00 00
 22+  B47B 00 00 01 1A      defb 00,00,01,26,26,26,26,26,26,01,04,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,04,04,00,01,00,00
 22+  B47F 1A 1A 1A 1A
 22+  B483 1A 01 04 00
 22+  B487 00 00 00 00
 22+  B48B 00 00 00 00
 22+  B48F 00 00 00 00
 22+  B493 00 00 04 04
 22+  B497 00 01 00 00
 23+  B49B 00 00 01 1A      defb 00,00,01,26,26,26,26,26,26,01,04,00,04,04,04,04,04,04,00,04,04,04,00,04,04,04,04,04,00,01,00,00
 23+  B49F 1A 1A 1A 1A
 23+  B4A3 1A 01 04 00
 23+  B4A7 04 04 04 04
 23+  B4AB 04 04 00 04
 23+  B4AF 04 04 00 04
 23+  B4B3 04 04 04 04
 23+  B4B7 00 01 00 00
 24+  B4BB 00 00 01 1A      defb 00,00,01,26,26,26,26,26,26,01,04,00,04,04,04,04,04,04,00,04,04,04,00,04,04,04,04,04,00,01,00,00
 24+  B4BF 1A 1A 1A 1A
 24+  B4C3 1A 01 04 00
 24+  B4C7 04 04 04 04
 24+  B4CB 04 04 00 04
 24+  B4CF 04 04 00 04
 24+  B4D3 04 04 04 04
 24+  B4D7 00 01 00 00
 25+  B4DB 00 00 01 01      defb 00,00,01,01,01,01,01,01,01,01,04,00,04,04,04,04,04,04,00,04,04,04,00,04,04,04,04,04,00,01,00,00
 25+  B4DF 01 01 01 01
 25+  B4E3 01 01 04 00
 25+  B4E7 04 04 04 04
 25+  B4EB 04 04 00 04
 25+  B4EF 04 04 00 04
 25+  B4F3 04 04 04 04
 25+  B4F7 00 01 00 00
 26+  B4FB 00 00 01 04      defb 00,00,01,04,04,04,04,04,04,04,04,00,04,04,04,04,04,04,00,04,04,04,00,00,00,00,04,04,04,01,00,00
 26+  B4FF 04 04 04 04
 26+  B503 04 04 04 00
 26+  B507 04 04 04 04
 26+  B50B 04 04 00 04
 26+  B50F 04 04 00 00
 26+  B513 00 00 04 04
 26+  B517 04 01 00 00
 27+  B51B 00 00 01 04      defb 00,00,01,04,04,04,00,00,00,00,00,00,04,04,04,04,04,04,00,04,04,04,04,04,04,00,04,04,04,01,00,00
 27+  B51F 04 04 00 00
 27+  B523 00 00 00 00
 27+  B527 04 04 04 04
 27+  B52B 04 04 00 04
 27+  B52F 04 04 04 04
 27+  B533 04 00 04 04
 27+  B537 04 01 00 00
 28+  B53B 00 00 01 04      defb 00,00,01,04,04,04,00,04,04,04,04,04,04,04,04,04,04,04,00,04,04,04,04,04,04,00,04,04,04,01,00,00
 28+  B53F 04 04 00 04
 28+  B543 04 04 04 04
 28+  B547 04 04 04 04
 28+  B54B 04 04 00 04
 28+  B54F 04 04 04 04
 28+  B553 04 00 04 04
 28+  B557 04 01 00 00
 29+  B55B 00 00 01 04      defb 00,00,01,04,04,04,00,04,04,04,01,01,01,01,01,01,01,01,01,01,01,01,01,01,04,00,04,04,04,01,00,00
 29+  B55F 04 04 00 04
 29+  B563 04 04 01 01
 29+  B567 01 01 01 01
 29+  B56B 01 01 01 01
 29+  B56F 01 01 01 01
 29+  B573 04 00 04 04
 29+  B577 04 01 00 00
 30+  B57B 00 00 01 04      defb 00,00,01,04,04,04,00,04,04,04,01,00,00,00,00,00,00,00,00,00,00,00,00,01,04,00,04,04,04,01,00,00
 30+  B57F 04 04 00 04
 30+  B583 04 04 01 00
 30+  B587 00 00 00 00
 30+  B58B 00 00 00 00
 30+  B58F 00 00 00 01
 30+  B593 04 00 04 04
 30+  B597 04 01 00 00
 31+  B59B 00 00 01 04      defb 00,00,01,04,04,04,00,04,04,04,01,00,00,00,00,00,00,00,00,00,00,00,00,01,04,00,04,04,04,01,00,00
 31+  B59F 04 04 00 04
 31+  B5A3 04 04 01 00
 31+  B5A7 00 00 00 00
 31+  B5AB 00 00 00 00
 31+  B5AF 00 00 00 01
 31+  B5B3 04 00 04 04
 31+  B5B7 04 01 00 00
 32+  B5BB 00 00 01 04      defb 00,00,01,04,04,04,00,04,04,04,01,00,00,00,00,00,00,00,00,00,00,00,00,01,04,00,04,04,04,01,00,00
 32+  B5BF 04 04 00 04
 32+  B5C3 04 04 01 00
 32+  B5C7 00 00 00 00
 32+  B5CB 00 00 00 00
 32+  B5CF 00 00 00 01
 32+  B5D3 04 00 04 04
 32+  B5D7 04 01 00 00
 33+  B5DB 00 00 01 04      defb 00,00,01,04,04,04,00,04,04,04,04,00,00,00,00,00,00,00,00,00,00,00,00,04,04,04,04,04,04,01,00,00
 33+  B5DF 04 04 00 04
 33+  B5E3 04 04 04 00
 33+  B5E7 00 00 00 00
 33+  B5EB 00 00 00 00
 33+  B5EF 00 00 00 04
 33+  B5F3 04 04 04 04
 33+  B5F7 04 01 00 00
 34+  B5FB 00 00 01 04      defb 00,00,01,04,04,04,04,04,04,04,01,00,00,00,00,00,00,00,00,00,00,00,00,01,04,04,04,04,04,01,00,00
 34+  B5FF 04 04 04 04
 34+  B603 04 04 01 00
 34+  B607 00 00 00 00
 34+  B60B 00 00 00 00
 34+  B60F 00 00 00 01
 34+  B613 04 04 04 04
 34+  B617 04 01 00 00
 35+  B61B 00 00 01 04      defb 00,00,01,04,04,04,04,04,04,04,01,00,00,00,01,00,00,00,00,01,00,00,00,01,04,04,04,04,04,01,00,00
 35+  B61F 04 04 04 04
 35+  B623 04 04 01 00
 35+  B627 00 00 01 00
 35+  B62B 00 00 00 01
 35+  B62F 00 00 00 01
 35+  B633 04 04 04 04
 35+  B637 04 01 00 00
 36+  B63B 00 00 01 01      defb 00,00,01,01,01,01,01,01,01,01,01,01,01,01,01,01,01,01,01,01,01,01,01,01,01,01,01,01,01,01,00,00
 36+  B63F 01 01 01 01
 36+  B643 01 01 01 01
 36+  B647 01 01 01 01
 36+  B64B 01 01 01 01
 36+  B64F 01 01 01 01
 36+  B653 01 01 01 01
 36+  B657 01 01 00 00
 37+  B65B
 38+  B65B              ; ###############################################################
 39+  B65B              ; Object data: horiz, vert, state, memh, meml
 40+  B65B              ; ###############################################################
 41+  B65B              level_rocks:
 42+  B65B 09 04 00 00      defb 9,4,0,0,0
 42+  B65F 00
 43+  B660 0C 07 00 00      defb 12,7,0,0,0
 43+  B664 00
 44+  B665 10 07 00 00      defb 16,7,0,0,0
 44+  B669 00
 45+  B66A 0B 08 00 00      defb 11,8,0,0,0
 45+  B66E 00
 46+  B66F 0A 0A 00 00      defb 10,10,0,0,0
 46+  B673 00
 47+  B674 0C 0A 00 00      defb 12,10,0,0,0
 47+  B678 00
 48+  B679 0D 09 00 00      defb 13,9,0,0,0
 48+  B67D 00
 49+  B67E 0E 08 00 00      defb 14,8,0,0,0
 49+  B682 00
 50+  B683 0F 0B 00 00      defb 15,11,0,0,0
 50+  B687 00
 51+  B688 0B 0C 00 00      defb 11,12,0,0,0
 51+  B68C 00
 52+  B68D 11 0C 00 00      defb 17,12,0,0,0
 52+  B691 00
 53+  B692 13 08 00 00      defb 19,8,0,0,0
 53+  B696 00
 54+  B697 16 09 00 00      defb 22,9,0,0,0
 54+  B69B 00
 55+  B69C 13 0A 00 00      defb 19,10,0,0,0
 55+  B6A0 00
 56+  B6A1 15 0A 00 00      defb 21,10,0,0,0
 56+  B6A5 00
 57+  B6A6 15 0C 00 00      defb 21,12,0,0,0
 57+  B6AA 00
 58+  B6AB 16 0C 00 00      defb 22,12,0,0,0
 58+  B6AF 00
 59+  B6B0 18 0A 00 00      defb 24,10,0,0,0
 59+  B6B4 00
 60+  B6B5 19 09 00 00      defb 25,9,0,0,0
 60+  B6B9 00
 61+  B6BA 1C 09 00 00      defb 28,9,0,0,0
 61+  B6BE 00
 62+  B6BF 1B 0C 00 00      defb 27,12,0,0,0
 62+  B6C3 00
 63+  B6C4 1A 0D 00 00      defb 26,13,0,0,0
 63+  B6C8 00
 64+  B6C9 19 0E 00 00      defb 25,14,0,0,0
 64+  B6CD 00
 65+  B6CE 19 10 00 00      defb 25,16,0,0,0
 65+  B6D2 00
 66+  B6D3 1A 11 00 00      defb 26,17,0,0,0
 66+  B6D7 00
 67+  B6D8 1B 11 00 00      defb 27,17,0,0,0
 67+  B6DC 00
 68+  B6DD 1C 12 00 00      defb 28,18,0,0,0
 68+  B6E1 00
 69+  B6E2 1A 13 00 00      defb 26,19,0,0,0
 69+  B6E6 00
 70+  B6E7 1B 15 00 00      defb 27,21,0,0,0
 70+  B6EB 00
 71+  B6EC 1A 17 00 00      defb 26,23,0,0,0
 71+  B6F0 00
 72+  B6F1 1B 18 00 00      defb 27,24,0,0,0
 72+  B6F5 00
 73+  B6F6 19 18 00 00      defb 25,24,0,0,0
 73+  B6FA 00
 74+  B6FB 18 17 00 00      defb 24,23,0,0,0
 74+  B6FF 00
 75+  B700 13 14 00 00      defb 19,20,0,0,0
 75+  B704 00
 76+  B705 14 12 00 00      defb 20,18,0,0,0
 76+  B709 00
 77+  B70A 14 10 00 00      defb 20,16,0,0,0
 77+  B70E 00
 78+  B70F 15 10 00 00      defb 21,16,0,0,0
 78+  B713 00
 79+  B714 16 12 00 00      defb 22,18,0,0,0
 79+  B718 00
 80+  B719 11 14 00 00      defb 17,20,0,0,0
 80+  B71D 00
 81+  B71E 0D 11 00 00      defb 13,17,0,0,0
 81+  B722 00
 82+  B723 0C 13 00 00      defb 12,19,0,0,0
 82+  B727 00
 83+  B728 0B 13 00 00      defb 11,19,0,0,0
 83+  B72C 00
 84+  B72D 0A 11 00 00      defb 10,17,0,0,0
 84+  B731 00
 85+  B732 05 12 00 00      defb 5,18,0,0,0
 85+  B736 00
 86+  B737 07 16 00 00      defb 7,22,0,0,0
 86+  B73B 00
 87+  B73C 09 16 00 00      defb 9,22,0,0,0
 87+  B740 00
 88+  B741 07 18 00 00      defb 7,24,0,0,0
 88+  B745 00
 89+  B746 05 18 00 00      defb 5,24,0,0,0
 89+  B74A 00
 90+  B74B 06 19 00 00      defb 6,25,0,0,0
 90+  B74F 00
 91+  B750 08 19 00 00      defb 8,25,0,0,0
 91+  B754 00
 92+  B755 04 17 00 00      defb 4,23,0,0,0
 92+  B759 00
 93+  B75A FF               defb 255
 94+  B75B
 95+  B75B              level_rocks_alt:
 96+  B75B 09 04 00 00      defb 9,4,0,0,0
 96+  B75F 00
 97+  B760 0C 07 00 00      defb 12,7,0,0,0
 97+  B764 00
 98+  B765 0B 07 00 00      defb 11,7,0,0,0
 98+  B769 00
 99+  B76A 0A 08 00 00      defb 10,8,0,0,0
 99+  B76E 00
100+  B76F 10 07 00 00      defb 16,7,0,0,0
100+  B773 00
101+  B774 0E 08 00 00      defb 14,8,0,0,0
101+  B778 00
102+  B779 0D 09 00 00      defb 13,9,0,0,0
102+  B77D 00
103+  B77E 0C 0A 00 00      defb 12,10,0,0,0
103+  B782 00
104+  B783 0A 0B 00 00      defb 10,11,0,0,0
104+  B787 00
105+  B788 0B 0C 00 00      defb 11,12,0,0,0
105+  B78C 00
106+  B78D 0F 0B 00 00      defb 15,11,0,0,0
106+  B791 00
107+  B792 11 0C 00 00      defb 17,12,0,0,0
107+  B796 00
108+  B797 15 0B 00 00      defb 21,11,0,0,0
108+  B79B 00
109+  B79C 16 0C 00 00      defb 22,12,0,0,0
109+  B7A0 00
110+  B7A1 19 09 00 00      defb 25,9,0,0,0
110+  B7A5 00
111+  B7A6 1C 09 00 00      defb 28,9,0,0,0
111+  B7AA 00
112+  B7AB 1B 0C 00 00      defb 27,12,0,0,0
112+  B7AF 00
113+  B7B0 1B 0E 00 00      defb 27,14,0,0,0
113+  B7B4 00
114+  B7B5 1A 0F 00 00      defb 26,15,0,0,0
114+  B7B9 00
115+  B7BA 1B 10 00 00      defb 27,16,0,0,0
115+  B7BE 00
116+  B7BF 1C 12 00 00      defb 28,18,0,0,0
116+  B7C3 00
117+  B7C4 1A 13 00 00      defb 26,19,0,0,0
117+  B7C8 00
118+  B7C9 1A 15 00 00      defb 26,21,0,0,0
118+  B7CD 00
119+  B7CE 1B 17 00 00      defb 27,23,0,0,0
119+  B7D2 00
120+  B7D3 1A 17 00 00      defb 26,23,0,0,0
120+  B7D7 00
121+  B7D8 19 18 00 00      defb 25,24,0,0,0
121+  B7DC 00
122+  B7DD 18 17 00 00      defb 24,23,0,0,0
122+  B7E1 00
123+  B7E2 17 10 00 00      defb 23,16,0,0,0
123+  B7E6 00
124+  B7E7 15 10 00 00      defb 21,16,0,0,0
124+  B7EB 00
125+  B7EC 14 12 00 00      defb 20,18,0,0,0
125+  B7F0 00
126+  B7F1 13 14 00 00      defb 19,20,0,0,0
126+  B7F5 00
127+  B7F6 10 13 00 00      defb 16,19,0,0,0
127+  B7FA 00
128+  B7FB 0D 14 00 00      defb 13,20,0,0,0
128+  B7FF 00
129+  B800 0E 11 00 00      defb 14,17,0,0,0
129+  B804 00
130+  B805 0C 12 00 00      defb 12,18,0,0,0
130+  B809 00
131+  B80A 0A 11 00 00      defb 10,17,0,0,0
131+  B80E 00
132+  B80F 05 12 00 00      defb 5,18,0,0,0
132+  B813 00
133+  B814 09 14 00 00      defb 9,20,0,0,0
133+  B818 00
134+  B819 08 15 00 00      defb 8,21,0,0,0
134+  B81D 00
135+  B81E 07 16 00 00      defb 7,22,0,0,0
135+  B822 00
136+  B823 08 17 00 00      defb 8,23,0,0,0
136+  B827 00
137+  B828 07 18 00 00      defb 7,24,0,0,0
137+  B82C 00
138+  B82D 08 1A 00 00      defb 8,26,0,0,0
138+  B831 00
139+  B832 06 19 00 00      defb 6,25,0,0,0
139+  B836 00
140+  B837 05 18 00 00      defb 5,24,0,0,0
140+  B83B 00
141+  B83C 04 17 00 00      defb 4,23,0,0,0
141+  B840 00
142+  B841 FF               defb 255
143+  B842
144+  B842              level_missiles:
145+  B842 0B 17 00 00      defb 11,23,0,0,0
145+  B846 00
146+  B847 0B 16 00 00      defb 11,22,0,0,0
146+  B84B 00
147+  B84C 0C 17 00 00      defb 12,23,0,0,0
147+  B850 00
148+  B851 0C 16 00 00      defb 12,22,0,0,0
148+  B855 00
149+  B856 0D 17 00 00      defb 13,23,0,0,0
149+  B85A 00
150+  B85B 0D 16 00 00      defb 13,22,0,0,0
150+  B85F 00
151+  B860 0E 17 00 00      defb 14,23,0,0,0
151+  B864 00
152+  B865 0E 16 00 00      defb 14,22,0,0,0
152+  B869 00
153+  B86A 0F 17 00 00      defb 15,23,0,0,0
153+  B86E 00
154+  B86F 0F 16 00 00      defb 15,22,0,0,0
154+  B873 00
155+  B874 10 17 00 00      defb 16,23,0,0,0
155+  B878 00
156+  B879 10 16 00 00      defb 16,22,0,0,0
156+  B87D 00
157+  B87E 11 17 00 00      defb 17,23,0,0,0
157+  B882 00
158+  B883 11 16 00 00      defb 17,22,0,0,0
158+  B887 00
159+  B888 12 17 00 00      defb 18,23,0,0,0
159+  B88C 00
160+  B88D 12 16 00 00      defb 18,22,0,0,0
160+  B891 00
161+  B892 13 17 00 00      defb 19,23,0,0,0
161+  B896 00
162+  B897 13 16 00 00      defb 19,22,0,0,0
162+  B89B 00
163+  B89C 14 17 00 00      defb 20,23,0,0,0
163+  B8A0 00
164+  B8A1 14 16 00 00      defb 20,22,0,0,0
164+  B8A5 00
165+  B8A6 15 17 00 00      defb 21,23,0,0,0
165+  B8AA 00
166+  B8AB 15 16 00 00      defb 21,22,0,0,0
166+  B8AF 00
167+  B8B0 16 17 00 00      defb 22,23,0,0,0
167+  B8B4 00
168+  B8B5 16 16 00 00      defb 22,22,0,0,0
168+  B8B9 00
169+  B8BA FF               defb 255
170+  B8BB
171+  B8BB              ;
172+  B8BB              ; Diamonds: x,y,state,mem1+mem2
173+  B8BB              ;
174+  B8BB              level_diamonds:
175+  B8BB 0C 1B 00 00      defb 12,27,0,0,0
175+  B8BF 00
176+  B8C0 10 1B 00 00      defb 16,27,0,0,0
176+  B8C4 00
177+  B8C5 15 1B 00 00      defb 21,27,0,0,0
177+  B8C9 00
178+  B8CA FF               defb 255
179+  B8CB
180+  B8CB              level_gems:
181+  B8CB 12 14 00 00      defb 18,20,0,0,0
181+  B8CF 00
182+  B8D0 06 18 00 00      defb 6,24,0,0,0
182+  B8D4 00
183+  B8D5 19 17 00 00      defb 25,23,0,0,0
183+  B8D9 00
184+  B8DA 1C 11 00 00      defb 28,17,0,0,0
184+  B8DE 00
185+  B8DF FF               defb 255
186+  B8E0              ;
187+  B8E0              ; Score area colours
188+  B8E0              ;
189+  B8E0              score_colours:
190+  B8E0 47 47 47 47      defb 71,71,71,71,71,71,71,71,71,71,71,66,67,67,67,67,67,67,67,67,66,71,71,71,71,71,71,71,71,71,71,71
190+  B8E4 47 47 47 47
190+  B8E8 47 47 47 42
190+  B8EC 43 43 43 43
190+  B8F0 43 43 43 43
190+  B8F4 42 47 47 47
190+  B8F8 47 47 47 47
190+  B8FC 47 47 47 47
191+  B900 47 47 47 47      defb 71,71,71,71,71,71,71,71,71,71,71,70,70,70,70,70,70,70,70,70,70,71,71,71,71,71,71,71,71,71,71,71
191+  B904 47 47 47 47
191+  B908 47 47 47 46
191+  B90C 46 46 46 46
191+  B910 46 46 46 46
191+  B914 46 47 47 47
191+  B918 47 47 47 47
191+  B91C 47 47 47 47
192+  B920
193+  B920              high_score_colours:
194+  B920 00 00 00 42      defb  0, 0, 0,66,66,66,71,71,71,71,71,71,67,67,67,71,71,71,71,71,71,70,70,70,71,71,71,71,71,71,0,0
194+  B924 42 42 47 47
194+  B928 47 47 47 47
194+  B92C 43 43 43 47
194+  B930 47 47 47 47
194+  B934 47 46 46 46
194+  B938 47 47 47 47
194+  B93C 47 47 00 00
# file closed: leveldata/level.asm
152   B940                  include "graphics\font.asm"
# file opened: graphics/font.asm
  1+  B940              font:
  2+  B940 00 00 00...  	defs 256
  3+  BA40              	; end 1
  4+  BA40 00 00 00 00  	defb	  0,  0,  0,  0,  0,  0,  0,  0 ; space
  4+  BA44 00 00 00 00
  5+  BA48 18 18 18 18  	defb	  24, 24, 24, 24, 24,  0, 24, 0 ;!
  5+  BA4C 18 00 18 00
  6+  BA50 00 00 00 00  	defb	  0,  0,  0,  0,  0,  0,  0,  0 ; "
  6+  BA54 00 00 00 00
  7+  BA58 00 00 00 00  	defb	  0,  0,  0,  0,  0,  0,  0,  0 ; #
  7+  BA5C 00 00 00 00
  8+  BA60 00 00 00 00  	defb	  0,  0,  0,  0,  0,  0,  0,  0 ; $
  8+  BA64 00 00 00 00
  9+  BA68 00 00 00 00  	defb	  0,  0,  0,  0,  0,  0,  0,  0 ; %
  9+  BA6C 00 00 00 00
 10+  BA70 00 00 00 00  	defb	  0,  0,  0,  0,  0,  0,  0,  0 ; &
 10+  BA74 00 00 00 00
 11+  BA78 00 00 00 00  	defb	  0,  0,  0,  0,  0,  0,  0,  0 ; '
 11+  BA7C 00 00 00 00
 12+  BA80 0C 18 30 30  	defb	  12, 24, 48, 48, 48, 24, 12, 0; (
 12+  BA84 30 18 0C 00
 13+  BA88 30 18 0C 0C  	defb	  48, 24, 12, 12, 12, 24, 48,  0 ; )
 13+  BA8C 0C 18 30 00
 14+  BA90 00 00 00 00  	defb	  0,  0,  0,  0,  0,  0,  0,  0 ; *
 14+  BA94 00 00 00 00
 15+  BA98 00 00 00 00  	defb	  0,  0,  0,  0,  0,  0,  0,  0 ; +
 15+  BA9C 00 00 00 00
 16+  BAA0 00 00 00 00  	defb	  0,  0,  0,  0,  0,  32, 96,  0 ; ,
 16+  BAA4 00 20 60 00
 17+  BAA8 00 00 00 3C  	defb	  0,  0,  0, 60,  0,  0,  0,  0 ; -
 17+  BAAC 00 00 00 00
 18+  BAB0 00 00 00 00  	defb	  0,  0,  0,  0,  0,  96,96,  0 ; .
 18+  BAB4 00 60 60 00
 19+  BAB8 00 00 00 00  	defb	  0,  0,  0,  0,  0,  0,  0,  0 ; /
 19+  BABC 00 00 00 00
 20+  BAC0 1C 26 63 63  	defb	 28, 38, 99, 99, 99, 50, 28,  0 ; 0
 20+  BAC4 63 32 1C 00
 21+  BAC8 0C 1C 0C 0C  	defb	   12, 28, 12, 12, 12, 12, 63,0 ; 1
 21+  BACC 0C 0C 3F 00
 22+  BAD0 3E 63 07 1E  	defb	  62, 99,  7, 30, 60, 96,127, 0 ; 2
 22+  BAD4 3C 60 7F 00
 23+  BAD8 3F 06 0C 1E  	defb	  63,  6, 12, 30,  3, 51, 30, 0 ; 3
 23+  BADC 03 33 1E 00
 24+  BAE0 0E 1E 36 66  	defb	  14, 30, 54,102,127,  6,  6, 0 ; 4
 24+  BAE4 7F 06 06 00
 25+  BAE8 7E 40 7E 03  	defb	 126, 64,126,  3,  3, 99, 62, 0 ; 5
 25+  BAEC 03 63 3E 00
 26+  BAF0 1E 30 60 7E  	defb	 30, 48, 96,126, 99, 99, 62,  0 ; 6
 26+  BAF4 63 63 3E 00
 27+  BAF8 7F 63 06 0C  	defb	  127, 99,  6, 12, 24, 24, 24,0 ; 7
 27+  BAFC 18 18 18 00
 28+  BB00 3C 62 72 3C  	defb	  60, 98,114, 60, 79, 67,62,0   ; 8
 28+  BB04 4F 43 3E 00
 29+  BB08 3E 63 63 3F  	defb	  62, 99, 99, 63,  3,  6, 60, 0 ; 9
 29+  BB0C 03 06 3C 00
 30+  BB10 00 00 18 18  	defb	  0,  0, 24, 24,  0,  24,24,  0 ; :
 30+  BB14 00 18 18 00
 31+  BB18 00 00 00 00  	defb	  0,  0,  0,  0,  0,  0,  0,  0 ; ;
 31+  BB1C 00 00 00 00
 32+  BB20 00 00 00 00  	defb	  0,  0,  0,  0,  0,  0,  0,  0 ; <
 32+  BB24 00 00 00 00
 33+  BB28 00 00 00 00  	defb	  0,  0,  0,  0,  0,  0,  0,  0 ; =
 33+  BB2C 00 00 00 00
 34+  BB30 00 00 00 00  	defb	  0,  0,  0,  0,  0,  0,  0,  0 ; >
 34+  BB34 00 00 00 00
 35+  BB38 00 00 00 00  	defb	  0,  0,  0,  0,  0,  0,  0,  0 ; ?
 35+  BB3C 00 00 00 00
 36+  BB40              	; end 2
 37+  BB40 00 00 00 00  	defb	  0,  0,  0,  0,  0,  0,  0,  0 ; @
 37+  BB44 00 00 00 00
 38+  BB48 1C 36 63 63  	defb	  28, 54, 99, 99,127, 99, 99, 0 ; A
 38+  BB4C 7F 63 63 00
 39+  BB50 7E 63 63 7E  	defb	  126, 99, 99,126, 99, 99,126,0 ; B
 39+  BB54 63 63 7E 00
 40+  BB58 1E 33 60 60  	defb	  30, 51, 96, 96, 96, 51, 30, 0 ; C
 40+  BB5C 60 33 1E 00
 41+  BB60 7C 66 63 63  	defb	  124,102, 99, 99, 99,102,124,0 ; D
 41+  BB64 63 66 7C 00
 42+  BB68 7F 60 60 7E  	defb	  127, 96, 96,126, 96, 96,127,0 ; E
 42+  BB6C 60 60 7F 00
 43+  BB70 7F 60 60 7E  	defb	  127, 96, 96,126, 96, 96, 96,0 ; F
 43+  BB74 60 60 60 00
 44+  BB78 1F 30 60 67  	defb	  31, 48, 96,103, 99, 51, 31, 0 ; G
 44+  BB7C 63 33 1F 00
 45+  BB80 63 63 63 7F  	defb	  99, 99, 99,127, 99, 99, 99, 0 ; H
 45+  BB84 63 63 63 00
 46+  BB88 3F 0C 0C 0C  	defb	  63, 12, 12, 12, 12, 12, 63, 0 ; I
 46+  BB8C 0C 0C 3F 00
 47+  BB90 03 03 03 03  	defb	  3,  3,  3,  3,  3, 99, 62,  0 ; J
 47+  BB94 03 63 3E 00
 48+  BB98 63 66 6C 78  	defb	  99,102,108,120,124,110,103, 0 ; K
 48+  BB9C 7C 6E 67 00
 49+  BBA0 30 30 30 30  	defb	  48, 48, 48, 48, 48, 48, 63, 0 ; L
 49+  BBA4 30 30 3F 00
 50+  BBA8 63 77 7F 7F  	defb	  99,119,127,127,107, 99, 99, 0 ; M
 50+  BBAC 6B 63 63 00
 51+  BBB0 63 73 7B 7F  	defb	  99,115,123,127,111,103, 99, 0 ; N
 51+  BBB4 6F 67 63 00
 52+  BBB8 3E 63 63 63  	defb	  62, 99, 99, 99, 99, 99, 62, 0 ; O
 52+  BBBC 63 63 3E 00
 53+  BBC0 7E 61 61 61  	defb	  126, 97, 97, 97,126, 96, 96,0 ; P
 53+  BBC4 7E 60 60 00
 54+  BBC8 3E 63 63 63  	defb	  62, 99, 99, 99,111,102, 61, 0 ; Q
 54+  BBCC 6F 66 3D 00
 55+  BBD0 7E 63 63 67  	defb	  126, 99, 99,103,124,110,103,0 ; R
 55+  BBD4 7C 6E 67 00
 56+  BBD8 3C 66 60 3E  	defb	  60,102, 96, 62,  3, 99, 62, 0 ; S
 56+  BBDC 03 63 3E 00
 57+  BBE0 7E 18 18 18  	defb	  126, 24, 24, 24, 24, 24, 24,0 ; T
 57+  BBE4 18 18 18 00
 58+  BBE8 63 63 63 63  	defb	  99, 99, 99, 99, 99, 99, 62, 0 ; U
 58+  BBEC 63 63 3E 00
 59+  BBF0 63 63 63 77  	defb	  99, 99, 99,119, 62, 28,  8, 0 ; V
 59+  BBF4 3E 1C 08 00
 60+  BBF8 63 63 6B 7F  	defb	  99, 99,107,127,127, 54, 34, 0 ; W
 60+  BBFC 7F 36 22 00
 61+  BC00 63 77 3E 1C  	defb	  99,119, 62, 28, 62,119, 99, 0 ; X
 61+  BC04 3E 77 63 00
 62+  BC08 33 33 12 1E  	defb	  51, 51, 18, 30, 12, 12, 12, 0 ; Y
 62+  BC0C 0C 0C 0C 00
 63+  BC10 7F 07 0E 1C  	defb	  127,  7, 14, 28, 56,112,127,0 ; Z
 63+  BC14 38 70 7F 00
 64+  BC18 00 00 00 00  	defb	  0,  0,  0,  0,  0,  0,  0,  0 ; [
 64+  BC1C 00 00 00 00
 65+  BC20 00 00 00 00  	defb	  0,  0,  0,  0,  0,  0,  0,  0 ; \
 65+  BC24 00 00 00 00
 66+  BC28 00 00 00 00  	defb	  0,  0,  0,  0,  0,  0,  0,  0 ; ]
 66+  BC2C 00 00 00 00
 67+  BC30 00 00 00 00  	defb	  0,  0,  0,  0,  0,  0,  0,  0 ; ^
 67+  BC34 00 00 00 00
 68+  BC38 00 00 00 00  	defb	  0,  0,  0,  0,  0,  0,  0,  0 ; _
 68+  BC3C 00 00 00 00
 69+  BC40              	; end 3
 70+  BC40 00 00 00 00  	defb	  0,  0,  0,  0,  0,  0,  0,  0 ; £
 70+  BC44 00 00 00 00
 71+  BC48 1C 36 63 63  	defb	  28, 54, 99, 99,127, 99, 99, 0 ; A
 71+  BC4C 7F 63 63 00
 72+  BC50 7E 63 63 7E  	defb	  126, 99, 99,126, 99, 99,126,0 ; B
 72+  BC54 63 63 7E 00
 73+  BC58 1E 33 60 60  	defb	  30, 51, 96, 96, 96, 51, 30, 0 ; C
 73+  BC5C 60 33 1E 00
 74+  BC60 7C 66 63 63  	defb	  124,102, 99, 99, 99,102,124,0 ; D
 74+  BC64 63 66 7C 00
 75+  BC68 7F 60 60 7E  	defb	  127, 96, 96,126, 96, 96,127,0 ; E
 75+  BC6C 60 60 7F 00
 76+  BC70 7F 60 60 7E  	defb	  127, 96, 96,126, 96, 96, 96,0 ; F
 76+  BC74 60 60 60 00
 77+  BC78 1F 30 60 67  	defb	  31, 48, 96,103, 99, 51, 31, 0 ; G
 77+  BC7C 63 33 1F 00
 78+  BC80 63 63 63 7F  	defb	  99, 99, 99,127, 99, 99, 99, 0 ; H
 78+  BC84 63 63 63 00
 79+  BC88 3F 0C 0C 0C  	defb	  63, 12, 12, 12, 12, 12, 63, 0 ; I
 79+  BC8C 0C 0C 3F 00
 80+  BC90 03 03 03 03  	defb	  3,  3,  3,  3,  3, 99, 62,  0 ; J
 80+  BC94 03 63 3E 00
 81+  BC98 63 66 6C 78  	defb	  99,102,108,120,124,110,103, 0 ; K
 81+  BC9C 7C 6E 67 00
 82+  BCA0 30 30 30 30  	defb	  48, 48, 48, 48, 48, 48, 63, 0 ; L
 82+  BCA4 30 30 3F 00
 83+  BCA8 63 77 7F 7F  	defb	  99,119,127,127,107, 99, 99, 0 ; M
 83+  BCAC 6B 63 63 00
 84+  BCB0 63 73 7B 7F  	defb	  99,115,123,127,111,103, 99, 0 ; N
 84+  BCB4 6F 67 63 00
 85+  BCB8 3E 63 63 63  	defb	  62, 99, 99, 99, 99, 99, 62, 0 ; O
 85+  BCBC 63 63 3E 00
 86+  BCC0 7E 61 61 61  	defb	  126, 97, 97, 97,126, 96, 96,0 ; P
 86+  BCC4 7E 60 60 00
 87+  BCC8 3E 63 63 63  	defb	  62, 99, 99, 99,111,102, 61, 0 ; Q
 87+  BCCC 6F 66 3D 00
 88+  BCD0 7E 63 63 67  	defb	  126, 99, 99,103,124,110,103,0 ; R
 88+  BCD4 7C 6E 67 00
 89+  BCD8 3C 66 60 3E  	defb	  60,102, 96, 62,  3, 99, 62, 0 ; S
 89+  BCDC 03 63 3E 00
 90+  BCE0 7E 18 18 18  	defb	  126, 24, 24, 24, 24, 24, 24,0 ; T
 90+  BCE4 18 18 18 00
 91+  BCE8 63 63 63 63  	defb	  99, 99, 99, 99, 99, 99, 62, 0 ; U
 91+  BCEC 63 63 3E 00
 92+  BCF0 63 63 63 77  	defb	  99, 99, 99,119, 62, 28,  8, 0 ; V
 92+  BCF4 3E 1C 08 00
 93+  BCF8 63 63 6B 7F  	defb	  99, 99,107,127,127, 54, 34, 0 ; W
 93+  BCFC 7F 36 22 00
 94+  BD00 63 77 3E 1C  	defb	  99,119, 62, 28, 62,119, 99, 0 ; X
 94+  BD04 3E 77 63 00
 95+  BD08 33 33 12 1E  	defb	  51, 51, 18, 30, 12, 12, 12, 0 ; Y
 95+  BD0C 0C 0C 0C 00
 96+  BD10 7F 07 0E 1C  	defb	  127,  7, 14, 28, 56,112,127,0 ; Z
 96+  BD14 38 70 7F 00
 97+  BD18 00 00 00 00  	defb	  0,  0,  0,  0,  0,  0,  0,  0
 97+  BD1C 00 00 00 00
 98+  BD20 00 00 00 00  	defb	  0,  0,  0,  0,  0,  0,  0,  0
 98+  BD24 00 00 00 00
 99+  BD28 00 00 00 00  	defb	  0,  0,  0,  0,  0,  0,  0,  0
 99+  BD2C 00 00 00 00
100+  BD30 00 00 00 00  	defb	  0,  0,  0,  0,  0,  0,  0,  0
100+  BD34 00 00 00 00
101+  BD38 3C 42 99 A1  	defb	  60, 66,153,161,161,153, 66, 60 ; 	©
101+  BD3C A1 99 42 3C
# file closed: graphics/font.asm
153   BD40                  include "graphics\graphics.asm"
# file opened: graphics/graphics.asm
  1+  BD40              ; Tiles graphics.
  2+  BD40              sprites:
  3+  BD40 00 00 00 00      defb    0  ,  0,  0,  0,  0,  0,  0,  0   ; 0, space
  3+  BD44 00 00 00 00
  4+  BD48 FF FF FF FF      defb    255,255,255,255,255,255,255,255   ; 1, cyan block
  4+  BD4C FF FF FF FF
  5+  BD50 01 03 07 0F      defb	  1,  3,  7, 15, 31, 63,127,255   ; 2, slope left
  5+  BD54 1F 3F 7F FF
  6+  BD58 80 C0 E0 F0      defb    128,192,224,240,248,252,254,255   ; 3, slope right
  6+  BD5C F8 FC FE FF
  7+  BD60 55 AA 55 AA      defb    85,170, 85,170, 85,170, 85,170    ; 4, dirt
  7+  BD64 55 AA 55 AA
  8+  BD68 00 00 00 00      defb    0  ,  0,  0,  0,  0,  0,  0,  0   ; 5, sky block
  8+  BD6C 00 00 00 00
  9+  BD70 00 00 00 00      defb    0  ,  0,  0,  0,  0,  0,  0,  0   ; 6, slime block
  9+  BD74 00 00 00 00
 10+  BD78 00 00 00 00      defb    0  ,0  ,  0,  0,  0,  0,  0,  0   ; 7, for reuse
 10+  BD7C 00 00 00 00
 11+  BD80 18 2C 4E 8F      defb    24, 44, 78,143,241,114, 52,  24    ; 8, diamond
 11+  BD84 F1 72 34 18
 12+  BD88 3C 7E FF 7F      defb    60,126,255,127,254,254,255,126    ; 9, rock
 12+  BD8C FE FE FF 7E
 13+  BD90 7E FF 7F 7F  	defb	126,255,127,127,254,255,126, 60    ; 10, rock 2
 13+  BD94 FE FF 7E 3C
 14+  BD98 00 00 00 00      defb    0  ,  0,  0,  0,  0,  0,255,255   ; 11, sky block, pixel trapdoor
 14+  BD9C 00 00 FF FF
 15+  BDA0 99 DB 7E 24  	defb    153,219,126, 36,255, 66, 36, 24   ; 12, missile
 15+  BDA4 FF 42 24 18
 16+  BDA8 00 00 00 00      defb    0  ,  0,  0,  0,  0,  0,  0,  0   ; 13, sky block, tank background
 16+  BDAC 00 00 00 00
 17+  BDB0 00 00 00 00  	defb    0,  0,  0,  0,  0, 60, 90, 52     ; 14, gem
 17+  BDB4 00 3C 5A 34
 18+  BDB8 FD FE FD FE  	defb	253,254,253,254,253,254,253,254   ; 15, damaged mountain
 18+  BDBC FD FE FD FE
 19+  BDC0 F4 F8 F4 F8  	defb	244,248,244,248,244,248,244,248   ; 16, damaged mountain 2
 19+  BDC4 F4 F8 F4 F8
 20+  BDC8 D0 E0 D0 E0  	defb	208,224,208,224,208,224,208,224   ; 17, damaged mountain 3
 20+  BDCC D0 E0 D0 E0
 21+  BDD0 40 80 40 80  	defb	 64,128, 64,128, 64,128, 64,128   ; 18, damaged mountain 4
 21+  BDD4 40 80 40 80
 22+  BDD8 00 00 00 ED  	defb	0,  0,  0,237,237,  0,  0,  0	  ; 19, tank missile
 22+  BDDC ED 00 00 00
 23+  BDE0 99 DB 7E 24  	defb    153,219,126, 36,255,126, 60, 24   ; 20, missile active
 23+  BDE4 FF 7E 3C 18
 24+  BDE8 FF FF 00 00      defb	255,255,  0,  0,  0,  0,  0,  0	  ; 21, the pit 1
 24+  BDEC 00 00 00 00
 25+  BDF0 FC FC 00 00  	defb	252,252,  0,  0,  0,  0,  0,  0	  ; 22, the pit 2
 25+  BDF4 00 00 00 00
 26+  BDF8 F0 F0 00 00  	defb	240,240,  0,  0,  0,  0,  0,  0	  ; 23, the pit 3
 26+  BDFC 00 00 00 00
 27+  BE00 C0 C0 00 00  	defb	192,192,  0,  0,  0,  0,  0,  0	  ; 24, the pit 4
 27+  BE04 00 00 00 00
 28+  BE08 00 00 00 00  	defb	0,0,  0,  0,  0,  0,  0,  0	  	  ; 25, the pit 5
 28+  BE0C 00 00 00 00
 29+  BE10 FF FF FF FF      defb    255,255,255,255,255,255,255,255   ; 26, slime block, green on green
 29+  BE14 FF FF FF FF
 30+  BE18 00 00 00 66  	defb    0,  0,  0,102,  0,  0,  0,  0     ; 27, bullet
 30+  BE1C 00 00 00 00
 31+  BE20
 32+  BE20
 33+  BE20              sprite_attrs:
 34+  BE20 46               defb    070 ; 0, space
 35+  BE21 4D               defb    077 ; 1, cyan block
 36+  BE22 4D               defb    077 ; 2, slope left
 37+  BE23 4D               defb    077 ; 3, slope right
 38+  BE24 46               defb    070 ; 4, dirt
 39+  BE25 4E               defb    078 ; 5, sky
 40+  BE26 66               defb    102 ; 6, slime
 41+  BE27 42               defb    066 ; 7, trapdoor
 42+  BE28 46               defb    070 ; 8, diamond
 43+  BE29 42               defb    066 ; 9, rock
 44+  BE2A 42               defb    066 ; 10, rock 2
 45+  BE2B 49           	defb    073 ; 11, sky, trapdoor
 46+  BE2C 43           	defb    067 ; 12, missile
 47+  BE2D 4A               defb    074 ; 13, sky, red ink (tank)
 48+  BE2E 46               defb    070 ; 14, gem
 49+  BE2F 4D               defb    077 ; 15, damaged mountain
 50+  BE30 4D               defb    077 ; 16, damaged mountain 2
 51+  BE31 4D               defb    077 ; 17, damaged mountain 3
 52+  BE32 4D               defb    077 ; 18, damaged mountain 4
 53+  BE33 00           	defb 	000 ; 19, tank missile (not used
 54+  BE34 43           	defb    067 ; 20, missile active
 55+  BE35 42           	defb	066	; 21, the pit 1
 56+  BE36 42           	defb	066	; 22, the pit 2
 57+  BE37 42           	defb	066	; 23, the pit 3
 58+  BE38 42           	defb	066	; 24, the pit 4
 59+  BE39 42           	defb	066	; 25, the pit 5
 60+  BE3A 64           	defb    100 ; 26, slime, green on green
 61+  BE3B 46           	defb 	070 ; 27, bullet
 62+  BE3C
 63+  BE3C
 64+  BE3C              player_sprite:
 65+  BE3C 10 39 92 FC  	defb	 16, 57,146,252, 56, 61,195,128 ; 0 up/down 1
 65+  BE40 38 3D C3 80
 66+  BE44 08 1C 08 FC  	defb	  8, 28,  8,252, 60, 28, 22, 50 ; 1 left 1
 66+  BE48 3C 1C 16 32
 67+  BE4C 10 38 10 3F      defb   	 16, 56, 16, 63, 60, 56,104, 76 ; 2 right 1
 67+  BE50 3C 38 68 4C
 68+  BE54 08 9C 49 3F  	defb	  8,156, 73, 63, 28,188,195,  1 ; 3 up/down 2
 68+  BE58 1C BC C3 01
 69+  BE5C 08 1C 08 FC  	defb	  8, 28,  8,252, 60, 60,100, 12; 4 left 2
 69+  BE60 3C 3C 64 0C
 70+  BE64 10 38 10 3F  	defb	 16, 56, 16, 63, 60, 60, 38, 48 ; 5 right 2
 70+  BE68 3C 3C 26 30
 71+  BE6C 54 28 10 12  	defb	 84, 40, 16, 18, 30, 92,253, 95 ; 6 shoot up
 71+  BE70 1E 5C FD 5F
 72+  BE74 02 87 42 BF  	defb	 2,135, 66,191, 79,143, 25,  3  ; 7 shoot left
 72+  BE78 4F 8F 19 03
 73+  BE7C 40 E1 42 FD  	defb	 64,225, 66,253,242,241,152,192 ; 8 shoot right
 73+  BE80 F2 F1 98 C0
 74+  BE84 FA BF 3A 78  	defb	 250,191, 58,120, 72,  8, 20, 42 ; 9 shoot down
 74+  BE88 48 08 14 2A
 75+  BE8C 92 BA 94 78  	defb 	 146,186,148,120, 56,120, 68,195 ; 10 crushed 1
 75+  BE90 38 78 44 C3
 76+  BE94 49 5D 29 1E  	defb	  73, 93, 41, 30, 28, 30, 34,195 ; 11 crushed 2
 76+  BE98 1C 1E 22 C3
 77+  BE9C 72 57 72 67  	defb	114, 87,114,103,111, 69,225,155  ; 12 fight 1
 77+  BEA0 6F 45 E1 9B
 78+  BEA4 4E EA 4E E6  	defb	 78,234, 78,230,246,162,135,217  ; 13 fight 2
 78+  BEA8 F6 A2 87 D9
 79+  BEAC
 80+  BEAC              ;
 81+  BEAC              ; First 4 top half, next 4 bottom 1, next 4 bottom 2
 82+  BEAC              ;
 83+  BEAC              ship_sprite:
 84+  BEAC 00 00 00 01  	defb	  0,  0,  0,  1,  3, 31,127,255
 84+  BEB0 03 1F 7F FF
 85+  BEB4 1F 01 7F FF  	defb	 31,  1,127,255,255,255,255,255
 85+  BEB8 FF FF FF FF
 86+  BEBC F8 80 FE FF  	defb	248,128,254,255,255,255,255,255
 86+  BEC0 FF FF FF FF
 87+  BEC4 00 00 00 80  	defb	  0,  0,  0,128,192,248,254,255
 87+  BEC8 C0 F8 FE FF
 88+  BECC B3 B3 7F 1F  	defb	179,179,127, 31,  3,  3,  2,  7
 88+  BED0 03 03 02 07
 89+  BED4 8F 8F FF FF  	defb	143,143,255,255,255, 15,  7,131
 89+  BED8 FF 0F 07 83
 90+  BEDC 0F 0F FF FF  	defb	 15, 15,255,255,255, 16, 32,193
 90+  BEE0 FF 10 20 C1
 91+  BEE4 19 19 FE F8  	defb	 25, 25,254,248,192,192, 64,224
 91+  BEE8 C0 C0 40 E0
 92+  BEEC 98 98 7F 1F  	defb	152,152,127, 31,  3,  3,  2,  7
 92+  BEF0 03 03 02 07
 93+  BEF4 F0 F0 FF FF  	defb	240,240,255,255,255,  8,  4,131
 93+  BEF8 FF 08 04 83
 94+  BEFC F1 F1 FF FF  	defb	241,241,255,255,255,240,224,193
 94+  BF00 FF F0 E0 C1
 95+  BF04 CD CD FE F8  	defb	205,205,254,248,192,192, 64,224
 95+  BF08 C0 C0 40 E0
 96+  BF0C
 97+  BF0C              ;
 98+  BF0C              ;  First 8 frames are tank, last frame is the gun barrel
 99+  BF0C              ;
100+  BF0C              tank_sprite:
101+  BF0C 00 00 00 7F  	defb	  0,  0,  0,127,127,  0,  0,  0
101+  BF10 7F 00 00 00
102+  BF14 01 03 FE FC  	defb	  1,  3,254,252,254,255,127, 64
102+  BF18 FE FF 7F 40
103+  BF1C FF FF 03 F9  	defb	255,255,  3,249,  3,255,255,  1
103+  BF20 03 FF FF 01
104+  BF24 00 00 C0 E0  	defb	  0,  0,192,224,224,192,  0,  0
104+  BF28 E0 C0 00 00
105+  BF2C 3F 7F E1 FB  	defb	 63,127,225,251,247,225,127, 63
105+  BF30 F7 E1 7F 3F
106+  BF34 FF FF 16 52  	defb	255,255, 22, 82, 84, 22,255,255
106+  BF38 54 16 FF FF
107+  BF3C FF FF A8 A9  	defb	255,255,168,169,155,168,255,255
107+  BF40 9B A8 FF FF
108+  BF44 FC FE 8F AF  	defb	252,254,143,175,159,175,254,252
108+  BF48 9F AF FE FC
109+  BF4C 00 00 00 1F  	defb	  0,  0,  0, 31, 31,  0,  0,  0 ; +64
109+  BF50 1F 00 00 00
110+  BF54
111+  BF54              monster_sprite:
112+  BF54 02 40 06 60  	defb	  2, 64,  6, 96, 11,208, 22,104
112+  BF58 0B D0 16 68
113+  BF5C 19 98 17 E8  	defb	 25,152, 23,232, 53,172,127,254
113+  BF60 35 AC 7F FE
114+  BF64 FE 7F EC 37  	defb	254,127,236, 55,143,241,143,241
114+  BF68 8F F1 8F F1
115+  BF6C 08 10 08 10  	defb	  8, 16,  8, 16, 24, 24,  0,  0		; frame 1
115+  BF70 18 18 00 00
116+  BF74 02 40 06 60  	defb	  2, 64,  6, 96, 11,208, 22,104
116+  BF78 0B D0 16 68
117+  BF7C 19 98 17 E8  	defb	 25,152, 23,232,245,175,255,255
117+  BF80 F5 AF FF FF
118+  BF84 BC 3D 0E 70  	defb	188, 61, 14,112, 15,240, 15,240
118+  BF88 0F F0 0F F0
119+  BF8C 10 08 30 0C  	defb	 16,  8, 48, 12,  0,  0,  0,  0		; frame 2
119+  BF90 00 00 00 00
120+  BF94
121+  BF94              robot_sprite:
122+  BF94 0E 0A CE 3E  	defb	 14, 10,206, 62,206, 18, 34,102		; left 1
122+  BF98 CE 12 22 66
123+  BF9C 0E 0A 4E FE  	defb	 14, 10, 78,254, 78, 18, 36,108		; 2
123+  BFA0 4E 12 24 6C
124+  BFA4 0E 0A 4E FE  	defb	 14, 10, 78,254, 78, 50, 99,  3		; 3
124+  BFA8 4E 32 63 03
125+  BFAC 0E 0A CE 3E  	defb	 14, 10,206, 62,206, 10,  9, 27		; 4
125+  BFB0 CE 0A 09 1B
126+  BFB4 70 50 73 7C  	defb	112, 80,115,124,115, 72, 68,102		; right 1
126+  BFB8 73 48 44 66
127+  BFBC 70 50 72 7F  	defb	112, 80,114,127,114, 72, 36, 54		; 2
127+  BFC0 72 48 24 36
128+  BFC4 70 50 72 7F  	defb	112, 80,114,127,114, 76,198,192		; 3
128+  BFC8 72 4C C6 C0
129+  BFCC 70 50 73 7C  	defb	112, 80,115,124,115, 80,144,216		; 4
129+  BFD0 73 50 90 D8
130+  BFD4 38 A9 BA 7C  	defb     56,169,186,124, 56, 42, 38, 96     ; dead 1
130+  BFD8 38 2A 26 60
131+  BFDC 1C 95 5D 3E  	defb	 28,149, 93, 62, 28, 84,100,  6		; dead 2
131+  BFE0 1C 54 64 06
132+  BFE4
# file closed: graphics/graphics.asm
154   BFE4
155   BFE4                  include "game\control.asm"
# file opened: game/control.asm
  1+  BFE4              ;
  2+  BFE4              ; Check the preferred input method then move
  3+  BFE4              ;
  4+  BFE4              control_input:
  5+  BFE4 3A E6 C5         ld a,(player+11)    ; first, check if player is dying
  6+  BFE7 FE 04            cp 4                ; is the player falling
  7+  BFE9 CC B3 C0         call z, control_fall
  8+  BFEC FE 05            cp 5                ; is the player fighting
  9+  BFEE CC A0 C0         call z, control_fight
 10+  BFF1 3A E6 C5         ld a,(player+11)    ; first, check if player is dying
 11+  BFF4 FE 00            cp 0
 12+  BFF6 C0               ret nz               ; if so, can't move
 13+  BFF7 3A E0 C5         ld a,(player+5)      ; next, check if the player has pixels left to move
 14+  BFFA FE 00            cp 0
 15+  BFFC CA 03 C0         jp z, control_input0
 16+  BFFF CD 91 C1         call control_automove
 17+  C002 C9               ret
 18+  C003              control_input0:
 19+  C003 3A E1 C5         ld a,(player+6)      ; next, check if the player is digging
 20+  C006 FE 00            cp 0
 21+  C008 CA 0F C0         jp z, control_input1
 22+  C00B CD CF C0         call control_dig
 23+  C00E C9               ret
 24+  C00F              control_input1:
 25+  C00F 3A EF C4         ld a,(game_control)
 26+  C012 FE 00            cp 0                ; is this keyboard
 27+  C014 C2 1B C0         jp nz,control_input2
 28+  C017 CD 1F C0         call control_keyboard
 29+  C01A C9               ret
 30+  C01B              control_input2:
 31+  C01B                  ; do joystick
 32+  C01B CD 65 C0         call control_joystick
 33+  C01E C9               ret
 34+  C01F
 35+  C01F              ;
 36+  C01F              ; Check the keyboard
 37+  C01F              ;
 38+  C01F              control_keyboard:
 39+  C01F 01 FE FB         ld bc,64510         ; port for keyboard row q-t.
 40+  C022 ED 78            in a,(c)            ; read keyboard.
 41+  C024 47               ld b,a              ; store result in b register.
 42+  C025 CB 18            rr b                ; check outermost key (q).
 43+  C027 D2 51 C0         jp nc,control_keyboard1
 44+  C02A 01 FE FD         ld bc,65022         ; port for keyboard row a-f.
 45+  C02D ED 78            in a,(c)            ; read keyboard.
 46+  C02F 47               ld b,a              ; store result in b register.
 47+  C030 CB 18            rr b                ; check outermost key (a).
 48+  C032 D2 55 C0         jp nc,control_keyboard2
 49+  C035 01 FE DF         ld bc,57342         ; port for keyboard row y-p.
 50+  C038 ED 78            in a,(c)            ; read keyboard.
 51+  C03A 47               ld b,a              ; store result in b register.
 52+  C03B CB 18            rr b                ; check outermost key (p).
 53+  C03D D2 59 C0         jp nc,control_keyboard3
 54+  C040 CB 18            rr b                ; check next key.
 55+  C042 D2 5D C0         jp nc,control_keyboard4
 56+  C045 01 FE 7F         ld bc,32766         ; port for keyboard row b-space.
 57+  C048 ED 78            in a,(c)            ; read keyboard.
 58+  C04A 47               ld b,a              ; store result in b register.
 59+  C04B CB 18            rr b                ; check outermost key (space).
 60+  C04D D2 61 C0         jp nc,control_keyboard5
 61+  C050 C9               ret
 62+  C051              control_keyboard1:
 63+  C051 CD DA C1         call control_pl_moveup         ; player up.
 64+  C054 C9               ret
 65+  C055              control_keyboard2:
 66+  C055 CD 07 C2         call control_pl_movedown       ; player down.
 67+  C058 C9               ret
 68+  C059              control_keyboard3:
 69+  C059 CD 63 C2         call control_pl_moveright       ; player left.
 70+  C05C C9               ret
 71+  C05D              control_keyboard4:
 72+  C05D CD 33 C2         call control_pl_moveleft       ; player right.
 73+  C060 C9               ret
 74+  C061              control_keyboard5:
 75+  C061 CD 91 C2         call control_pl_fire       ; player fire.
 76+  C064 C9               ret
 77+  C065
 78+  C065              ;
 79+  C065              ; Check the joystick
 80+  C065              ;
 81+  C065              control_joystick:
 82+  C065 01 1F 00         ld bc,31                        ; Kempston joystick port.
 83+  C068 ED 78            in a,(c)                        ; read input.
 84+  C06A E6 02            and 2                           ; check "left" bit.
 85+  C06C C2 94 C0         jp nz,control_joystick3       ; move left.
 86+  C06F ED 78            in a,(c)                        ; read input.
 87+  C071 E6 01            and 1                           ; test "right" bit.
 88+  C073 C2 98 C0         jp nz,control_joystick4       ; move right.
 89+  C076 ED 78            in a,(c)                        ; read input.
 90+  C078 E6 08            and 8                           ; check "up" bit.
 91+  C07A C2 8C C0         jp nz,control_joystick1       ; move up.
 92+  C07D ED 78            in a,(c)                        ; read input.
 93+  C07F E6 04            and 4                           ; check "down" bit.
 94+  C081 C2 90 C0         jp nz,control_joystick2       ; move down.
 95+  C084 ED 78            in a,(c)                        ; read input.
 96+  C086 E6 10            and 16                          ; try the fire bit.
 97+  C088 C2 9C C0         jp nz,control_joystick5       ; fire pressed.
 98+  C08B C9               ret
 99+  C08C              control_joystick1:
100+  C08C CD DA C1         call control_pl_moveup         ; player up.
101+  C08F C9               ret
102+  C090              control_joystick2:
103+  C090 CD 07 C2         call control_pl_movedown       ; player down.
104+  C093 C9               ret
105+  C094              control_joystick3:
106+  C094 CD 33 C2         call control_pl_moveleft       ; player left.
107+  C097 C9               ret
108+  C098              control_joystick4:
109+  C098 CD 63 C2         call control_pl_moveright       ; player right.
110+  C09B C9               ret
111+  C09C              control_joystick5:
112+  C09C CD 91 C2         call control_pl_fire
113+  C09F C9               ret
114+  C0A0
115+  C0A0              ;
116+  C0A0              ; Fights the player - just flips the players anim frame
117+  C0A0              ;
118+  C0A0              control_fight:
119+  C0A0 3A DE C5         ld a,(player+3)             ; load the frame
120+  C0A3 FE 0C            cp 12                       ; flip between 12 and 13
121+  C0A5 CA AD C0         jp z,control_fight0
122+  C0A8 3E 0C            ld a,12
123+  C0AA C3 AF C0         jp control_fight1
124+  C0AD              control_fight0:
125+  C0AD 3E 0D            ld a,13
126+  C0AF              control_fight1:
127+  C0AF 32 DE C5         ld (player+3),a           ; save back
128+  C0B2 C9               ret
129+  C0B3
130+  C0B3              ;
131+  C0B3              ; Falls the player
132+  C0B3              ;
133+  C0B3              control_fall:
134+  C0B3 ED 4B DB C5      ld bc,(player)              ; get coords
135+  C0B7 0C               inc c
136+  C0B8 ED 43 DB C5      ld (player),bc
137+  C0BC 3A DE C5         ld a,(player+3)             ; load the frame
138+  C0BF FE 03            cp 3                       ; flip between 3 and 0
139+  C0C1 C2 C9 C0         jp nz, control_fall0
140+  C0C4 3E 00            ld a,0
141+  C0C6 C3 CB C0         jp control_fall1
142+  C0C9              control_fall0:
143+  C0C9 3E 03            ld a,3
144+  C0CB              control_fall1:
145+  C0CB 32 DE C5         ld (player+3),a           ; save back
146+  C0CE C9               ret
147+  C0CF
148+  C0CF              ;
149+  C0CF              ; Performs a dig if the counter has reset, otherwise, messes with the graphics
150+  C0CF              ;
151+  C0CF              control_dig:
152+  C0CF ED 4B DB C5      ld bc,(player)      ; load the current coords into bc
153+  C0D3 C5               push bc
154+  C0D4 3A DD C5         ld a,(player+2)     ; get the direction
155+  C0D7 FE 01            cp 1                ; left
156+  C0D9 CA F1 C0         jp z,control_dig0
157+  C0DC FE 02            cp 2                ; right
158+  C0DE CA 06 C1         jp z,control_dig1
159+  C0E1 FE 03            cp 3                ; down
160+  C0E3 CA 2A C1         jp z,control_dig5
161+  C0E6 FE 00            cp 0                ; up
162+  C0E8 CA 1A C1         jp z,control_dig4
163+  C0EB 21 E1 C5         ld hl,player+6
164+  C0EE 36 00            ld (hl),0           ; turn off digging
165+  C0F0 C9               ret                 ; return
166+  C0F1              control_dig0:           ; going left
167+  C0F1 CD 09 AC         call sprites_scadd  ; get the current coord
168+  C0F4 62 6B            ld hl,de
169+  C0F6 2B               dec hl              ; move one left
170+  C0F7 C1               pop bc              ; get the coords back, subtract 8 from horiz, 8 from vert, store (will be coords of space above dug dirt)
171+  C0F8 78               ld a,b
172+  C0F9 06 08            ld b,8
173+  C0FB 90               sub b
174+  C0FC 47               ld b,a
175+  C0FD 79               ld a,c
176+  C0FE 0E 08            ld c,8
177+  C100 91               sub c
178+  C101 4F               ld c,a
179+  C102 C5               push bc
180+  C103 C3 33 C1         jp control_dig2
181+  C106              control_dig1:
182+  C106 CD 09 AC         call sprites_scadd  ; get the current coord
183+  C109 62 6B            ld hl,de
184+  C10B 23               inc hl              ; move one right
185+  C10C C1               pop bc              ; get the coords back, add 8 to horiz, subtract 8 from vert store (will be coords of space above dug dirt)
186+  C10D 3E 08            ld a,8
187+  C10F 80               add a,b
188+  C110 47               ld b,a
189+  C111 79               ld a,c
190+  C112 0E 08            ld c,8
191+  C114 91               sub c
192+  C115 4F               ld c,a
193+  C116 C5               push bc
194+  C117 C3 33 C1         jp control_dig2
195+  C11A              control_dig4:
196+  C11A CD 09 AC         call sprites_scadd  ; get the current coord
197+  C11D 62 6B            ld hl,de
198+  C11F 11 20 00         ld de,32
199+  C122 ED 52            sbc hl,de             ; move one up
200+  C124 C1               pop bc              ; get the coords back, 1 from vert, store, then we'll sub 1 from c for each row later
201+  C125 0D               dec c
202+  C126 C5               push bc
203+  C127 C3 4B C1         jp control_dig6
204+  C12A              control_dig5:
205+  C12A CD 09 AC         call sprites_scadd  ; get the current coord
206+  C12D 62 6B            ld hl,de
207+  C12F 24               inc h              ; move one down
208+  C130                                     ; not bothered about working out bc here, since rock will never fall if digging down
209+  C130 C3 33 C1         jp control_dig2
210+  C133              ; Normal (not up) digging
211+  C133              control_dig2:
212+  C133 3A E3 C5         ld a,(player+8)     ; get the number of rows we need to overwrite
213+  C136 47               ld b,a              ; rows to copy over
214+  C137 E5               push hl             ; store the memory location of the first row for later
215+  C138              control_dig3:
216+  C138 CD 7A C1         call control_getpixelrow
217+  C13B 77               ld (hl),a           ; load contents into row
218+  C13C 11 20 00         ld de,32
219+  C13F 19               add hl,de           ; move to next row
220+  C140 10 F6            djnz control_dig3
221+  C142 E1               pop hl              ; get the original memory location back
222+  C143 11 20 00         ld de,32
223+  C146 ED 52            sbc hl,de           ; move to above row, ready for checking for rock
224+  C148 C3 61 C1         jp control_dig10
225+  C14B              ; Special case for going up
226+  C14B              control_dig6:
227+  C14B 3A E3 C5         ld a,(player+8)     ; get the number of rows we need to overwrite
228+  C14E 47               ld b,a              ; rows to copy over
229+  C14F              control_dig7:
230+  C14F CD 7A C1         call control_getpixelrow
231+  C152              control_dig12:
232+  C152 77               ld (hl),a           ; load empty into row
233+  C153 11 20 00         ld de,32
234+  C156 ED 52            sbc hl,de           ; move up to next row
235+  C158 0D               dec c               ; decrease c to track rows
236+  C159 10 F4            djnz control_dig7
237+  C15B 79               ld a,c
238+  C15C D6 07            sub 7
239+  C15E C1               pop bc
240+  C15F 4F               ld c,a
241+  C160 C5               push bc             ; store the decreased c coord
242+  C161              control_dig10:
243+  C161 DD 21 E2 C5      ld ix,player+7
244+  C165 DD 7E 00         ld a,(ix)     ; get the dig frame number
245+  C168 3D               dec a
246+  C169 DD 77 00         ld (ix),a
247+  C16C                  ; call the check for rocks above the removed dirt
248+  C16C DD 21 E1 C5      ld ix,player+6
249+  C170 DD 7E 00         ld a,(ix)     ; get the dig state
250+  C173 FE 00            cp 0
251+  C175 C1               pop bc
252+  C176 CC 7F CB         call z, rocks_checkforfalling ; make the check if we're no longer digging
253+  C179 C9               ret
254+  C17A
255+  C17A              ;
256+  C17A              ; Gets a modified pixel row to overwrite dirt - if this is the last dig, overwrite with nothing, otherwise xor to flip the dirt
257+  C17A              ; Inputs:
258+  C17A              ; hl - memory of pixel row
259+  C17A              ; Outputs:
260+  C17A              ; a - modified row to write
261+  C17A              ;
262+  C17A              control_getpixelrow:
263+  C17A 3A E2 C5         ld a,(player+7)     ; get the dig frame number
264+  C17D FE 00            cp 0                ; is this the last dig
265+  C17F CA 86 C1         jp z,control_getpixelrow1
266+  C182 7E               ld a,(hl)           ; if not, xor with 255 to flip it
267+  C183 EE FF            xor 255
268+  C185 C9               ret
269+  C186              control_getpixelrow1:
270+  C186 DD 21 E1 C5      ld ix,player+6
271+  C18A DD 36 00 00      ld (ix),0           ; turn off digging
272+  C18E 3E 00            ld a,0              ; if it is, load with empty
273+  C190 C9               ret
274+  C191
275+  C191              ;
276+  C191              ; Auto move the player until pixels is zero
277+  C191              ;
278+  C191              control_automove:
279+  C191 5F               ld e,a              ; store the number of pixels left to move in e
280+  C192 ED 4B DB C5      ld bc,(player)      ; load the current coords into bc
281+  C196 21 DD C5         ld hl,player+2      ; get the direction
282+  C199 7E               ld a,(hl)
283+  C19A FE 03            cp 3                ; down
284+  C19C CA B0 C1         jp z,control_automove3  ; don't need to do anything
285+  C19F FE 00            cp 0                ; going up
286+  C1A1 CA BC C1         jp z,control_automove2
287+  C1A4 FE 01            cp 1                ; going left?
288+  C1A6 CA C8 C1         jp z,control_automove0
289+  C1A9 78               ld a,b
290+  C1AA 3C               inc a               ; if we're going right, increment a twice for two pixels
291+  C1AB 3C               inc a
292+  C1AC 47               ld b,a
293+  C1AD C3 CC C1         jp control_automove1
294+  C1B0              control_automove3:
295+  C1B0 79               ld a,c
296+  C1B1 3C               inc a
297+  C1B2 3C               inc a               ; if we're going down, increment twice
298+  C1B3 4F               ld c,a
299+  C1B4 FE 90            cp 144
300+  C1B6 CC AA C2         call z, control_scroll_down
301+  C1B9 C3 CC C1         jp control_automove1
302+  C1BC              control_automove2:
303+  C1BC 79               ld a,c
304+  C1BD 3D               dec a
305+  C1BE 3D               dec a               ; if we're going up, decrement twice
306+  C1BF 4F               ld c,a
307+  C1C0 FE 60            cp 96
308+  C1C2 CC B7 C2         call z, control_scroll_up
309+  C1C5 C3 CC C1         jp control_automove1
310+  C1C8              control_automove0:
311+  C1C8 78               ld a,b
312+  C1C9 3D               dec a               ; if we're going left, decrement a twice
313+  C1CA 3D               dec a
314+  C1CB 47               ld b,a
315+  C1CC              control_automove1:
316+  C1CC ED 43 DB C5      ld (player),bc      ; and back to player
317+  C1D0 7B               ld a,e              ; now get the pixel count back
318+  C1D1 3D               dec a               ; decrease by one
319+  C1D2 21 E0 C5         ld hl,player+5
320+  C1D5 77               ld (hl),a           ; copy back
321+  C1D6 CD E6 C7         call player_justmoved
322+  C1D9 C9               ret
323+  C1DA
324+  C1DA              ;
325+  C1DA              ; Moves the player up
326+  C1DA              ;
327+  C1DA              control_pl_moveup:
328+  C1DA C5               push bc
329+  C1DB ED 4B DB C5      ld bc,(player)          ; get the current coords, b horiz, c vert
330+  C1DF 79               ld a,c                  ; load c into the acc
331+  C1E0 FE 18            cp 24
332+  C1E2 CA 00 C2         jp z,control_pl_moveup0 ; are we at the edge of the screen
333+  C1E5 FE 60            cp 96
334+  C1E7 CC B7 C2         call z, control_scroll_up
335+  C1EA CD 5E C4         call movement_checkcanmove_up ; check we can move up, e will be 1 if we can
336+  C1ED F5               push af
337+  C1EE 7B               ld a,e                  ; put e in a
338+  C1EF FE 00            cp 0
339+  C1F1 CA FF C1         jp z,control_pl_moveup1 ; don't move if we can't
340+  C1F4 F1               pop af
341+  C1F5 D6 01            sub 1                   ; subtract 1
342+  C1F7                  ;sub 1                   ; subtract 1
343+  C1F7 4F               ld c,a                  ; load back to c
344+  C1F8 ED 43 DB C5      ld (player),bc          ; load back to player
345+  C1FC C3 00 C2         jp control_pl_moveup0
346+  C1FF              control_pl_moveup1:
347+  C1FF F1               pop af                  ; restore af if needed
348+  C200              control_pl_moveup0:
349+  C200 3E 00            ld a,0
350+  C202 32 DD C5         ld (player+2),a        ; set direction to up
351+  C205 C1               pop bc
352+  C206 C9               ret
353+  C207              ;
354+  C207              ; Moves the player down
355+  C207              ;
356+  C207              control_pl_movedown:
357+  C207 C5               push bc
358+  C208 ED 4B DB C5      ld bc,(player)          ; get the current coords, b horiz, c vert
359+  C20C 79               ld a,c                  ; load c into the acc
360+  C20D FE E0            cp 224
361+  C20F CA 2C C2         jp z,control_pl_movedown0 ; are we at the edge of the screen
362+  C212 FE 80            cp 128
363+  C214 CC AA C2         call z, control_scroll_down
364+  C217 CD 32 C4         call movement_checkcanmove_down ; check we can move down, e will be 1 if we can
365+  C21A F5               push af
366+  C21B 7B               ld a,e                  ; put e in a
367+  C21C FE 00            cp 0
368+  C21E CA 2B C2         jp z,control_pl_movedown1 ; don't move if we can't
369+  C221 F1               pop af
370+  C222 3C               inc a                   ; add 1
371+  C223                  ;inc a                   ; add 1
372+  C223 4F               ld c,a                  ; load back to c
373+  C224 ED 43 DB C5      ld (player),bc          ; load back to player
374+  C228 C3 2C C2         jp control_pl_movedown0
375+  C22B              control_pl_movedown1:
376+  C22B F1               pop af                  ; restore af if needed
377+  C22C              control_pl_movedown0:
378+  C22C 3E 03            ld a,3
379+  C22E 32 DD C5         ld (player+2),a        ; set direction to down
380+  C231 C1               pop bc
381+  C232 C9               ret
382+  C233              ;
383+  C233              ; Moves the player left
384+  C233              ;
385+  C233              control_pl_moveleft:
386+  C233 C5               push bc
387+  C234 ED 4B DB C5      ld bc,(player)          ; get the current coords, b horiz, c vert
388+  C238 78               ld a,b                  ; load b into the acc
389+  C239 FE 10            cp 16
390+  C23B CA 5C C2         jp z,control_pl_moveleft0 ; are we at the edge of the screen
391+  C23E CD BD C4         call movement_checkcanmove_left ; check we can move down, e will be 1 if we can
392+  C241 F5               push af
393+  C242 7B               ld a,e                  ; put e in a
394+  C243 FE 00            cp 0
395+  C245 CA 5B C2         jp z,control_pl_moveleft1 ; don't move if we can't
396+  C248 21 E0 C5         ld hl,player+5          ; need to store the amount of pixels still left to move in the player status
397+  C24B 3E 03            ld a,3
398+  C24D 77               ld (hl),a
399+  C24E F1               pop af
400+  C24F D6 01            sub 1                    ; subtract 2
401+  C251 D6 01            sub 1
402+  C253 47               ld b,a                  ; load back to c
403+  C254 ED 43 DB C5      ld (player),bc          ; load back to player
404+  C258 C3 5C C2         jp control_pl_moveleft0
405+  C25B              control_pl_moveleft1:
406+  C25B F1               pop af
407+  C25C              control_pl_moveleft0:
408+  C25C 3E 01            ld a,1
409+  C25E 32 DD C5         ld (player+2),a        ; set direction to left
410+  C261 C1               pop bc
411+  C262 C9               ret
412+  C263              ;
413+  C263              ; Moves the player right
414+  C263              ;
415+  C263              control_pl_moveright:
416+  C263 C5               push bc
417+  C264 ED 4B DB C5      ld bc,(player)          ; get the current coords, b horiz, c vert
418+  C268 78               ld a,b                  ; load b into the acc
419+  C269 FE F0            cp 240
420+  C26B CA 8A C2         jp z,control_pl_moveright0 ; are we at the edge of the screen
421+  C26E CD 91 C4         call movement_checkcanmove_right ; check we can move down, e will be 1 if we can
422+  C271 F5               push af
423+  C272 7B               ld a,e                  ; put e in a
424+  C273 FE 00            cp 0
425+  C275 CA 89 C2         jp z,control_pl_moveright1 ; don't move if we can't
426+  C278 21 E0 C5         ld hl,player+5          ; need to store the amount of pixels still left to move in the player status
427+  C27B 3E 03            ld a,3
428+  C27D 77               ld (hl),a
429+  C27E F1               pop af
430+  C27F 3C               inc a                   ; add 2
431+  C280 3C               inc a
432+  C281 47               ld b,a                  ; load back to b
433+  C282 ED 43 DB C5      ld (player),bc          ; load back to player
434+  C286 C3 8A C2         jp control_pl_moveright0
435+  C289              control_pl_moveright1:
436+  C289 F1               pop af                  ; restore af if needed
437+  C28A              control_pl_moveright0:
438+  C28A 3E 02            ld a,2
439+  C28C 32 DD C5         ld (player+2),a        ; set direction to right
440+  C28F C1               pop bc
441+  C290 C9               ret
442+  C291
443+  C291              ;
444+  C291              ; Player fires
445+  C291              ;
446+  C291              control_pl_fire:
447+  C291 3A DD C5         ld a,(player+2)         ; get player direction
448+  C294 FE 00            cp 0
449+  C296 C8               ret z
450+  C297 FE 03            cp 3
451+  C299 C8               ret z                   ; if up or down, don't fire
452+  C29A 3A B6 D6         ld a,(bullet_state+3)       ; get the state
453+  C29D FE 01            cp 1
454+  C29F C8               ret z                   ; if currently firing, don't fire
455+  C2A0 CD B7 D6         call bullet_init        ; initialise the bullet
456+  C2A3 CD CC D6         call bullet_shoot       ; shoot the bullet
457+  C2A6 CD CF B1         call sound_laser
458+  C2A9 C9               ret
459+  C2AA
460+  C2AA              ;
461+  C2AA              ; Scrolls the screen down
462+  C2AA              ;
463+  C2AA              control_scroll_down:
464+  C2AA F5               push af
465+  C2AB 3E 08            ld a,8
466+  C2AD 32 E2 A8         ld (screen_offset),a
467+  C2B0 F1               pop af
468+  C2B1 21 2F A7         ld hl,buffer_updateall
469+  C2B4 36 01            ld (hl),1         ; flag as screen needing update
470+  C2B6 C9               ret
471+  C2B7
472+  C2B7              ;
473+  C2B7              ; Scrolls the screen up
474+  C2B7              ;
475+  C2B7              control_scroll_up:
476+  C2B7 F5               push af
477+  C2B8 3E 00            ld a,0
478+  C2BA 32 E2 A8         ld (screen_offset),a
479+  C2BD F1               pop af
480+  C2BE 21 2F A7         ld hl,buffer_updateall
481+  C2C1 36 01            ld (hl),1         ; flag as screen needing update
482+  C2C3 C9               ret
483+  C2C4
484+  C2C4
485+  C2C4
486+  C2C4
# file closed: game/control.asm
156   C2C4                  include "game\movement.asm"
# file opened: game/movement.asm
  1+  C2C4              ;
  2+  C2C4              ; The number of frames to dig for
  3+  C2C4              ;
  4+  C2C4              movement_numberdigframes:
  5+  C2C4 0A               defb 10
  6+  C2C5
  7+  C2C5              ;
  8+  C2C5              ; Checks the contents of a cell are empty - ie, all pixel rows are zero
  9+  C2C5              ; Inputs:
 10+  C2C5              ; hl - memory location of top pixel row
 11+  C2C5              ; bc - screen coords, b horiz, c vert
 12+  C2C5              ; Outputs:
 13+  C2C5              ; e - 0 if not empty, 1 if empty
 14+  C2C5              ;
 15+  C2C5              movement_spaceisempty:
 16+  C2C5 C5               push bc
 17+  C2C6 E5               push hl
 18+  C2C7 CD EF C2         call movement_spaceisgem        ; check if space is a gem
 19+  C2CA E1               pop hl
 20+  C2CB C1               pop bc
 21+  C2CC 7B               ld a,e
 22+  C2CD FE 01            cp 1
 23+  C2CF C8               ret z                           ; if e is 1, space is a gem so can move here, return
 24+  C2D0 3E 08            ld a,8                          ; 8 rows to check
 25+  C2D2              movement_spaceisempty0:
 26+  C2D2 08               ex af,af'                       ; store the loop counter
 27+  C2D3 7E               ld a,(hl)                       ; get current pixel row
 28+  C2D4 FE 00            cp 0
 29+  C2D6 C2 EA C2         jp nz, movement_spaceisempty1    ; row is not empty, can't move here
 30+  C2D9 79               ld a,c                          ; load the vertical coord
 31+  C2DA 3C               inc a                           ; next row down
 32+  C2DB 11 20 00         ld de,32
 33+  C2DE 19               add hl,de                       ; otherwise, just go one down for hl, which means add 32, because of course
 34+  C2DF 4F               ld c,a                          ; copy vert coord back to c
 35+  C2E0 08               ex af,af'                       ; get loop counter back
 36+  C2E1 3D               dec a                           ; decrease loop counter
 37+  C2E2 C2 D2 C2         jp nz, movement_spaceisempty0
 38+  C2E5 16 00            ld d,0
 39+  C2E7 1E 01            ld e,1                          ; got to end, so space is empty
 40+  C2E9 C9               ret
 41+  C2EA              movement_spaceisempty1:
 42+  C2EA 16 00            ld d,0
 43+  C2EC 1E 00            ld e,0                          ; returning false, ie space not empty
 44+  C2EE C9               ret
 45+  C2EF
 46+  C2EF              ;
 47+  C2EF              ; Check if a space contains a gem
 48+  C2EF              ; Inputs:
 49+  C2EF              ; bc - screen coords
 50+  C2EF              ; Outputs:
 51+  C2EF              ; e = 1 if gem
 52+  C2EF              movement_spaceisgem:
 53+  C2EF CD 42 AA         call screen_getcharcoordsfromscreencoords   ; get the char coords we're checking into bc
 54+  C2F2 21 BB B8         ld hl,level_diamonds           ; check diamonds first
 55+  C2F5              movement_spaceisgem0:
 56+  C2F5 5E 23 56 2B      ld de,(hl)                      ; get gem coords into de
 57+  C2F9 7B               ld a,e                          ; check for end of data
 58+  C2FA FE FF            cp 255
 59+  C2FC CA 17 C3         jp z,movement_spaceisgem1       ; if yes, done with diamonds
 60+  C2FF 23               inc hl
 61+  C300 23               inc hl                          ; move to state
 62+  C301 7E               ld a,(hl)
 63+  C302 23               inc hl
 64+  C303 23               inc hl
 65+  C304 23               inc hl                          ; get to next
 66+  C305 FE 01            cp 1                            ; check if collected
 67+  C307 CA F5 C2         jp z,movement_spaceisgem0       ; if yes, move to next diamond
 68+  C30A 7B               ld a,e                          ; load e again
 69+  C30B B9               cp c                            ; otherwise, compare c with e
 70+  C30C C2 F5 C2         jp nz,movement_spaceisgem0      ; if different, move to next diamond
 71+  C30F 7A               ld a,d                          ; get d coord
 72+  C310 B8               cp b                            ; compare b with d
 73+  C311 C2 F5 C2         jp nz,movement_spaceisgem0      ; if different, move to next diamond
 74+  C314 1E 01            ld e,1                          ; otherwise, exit with e = 1
 75+  C316 C9               ret
 76+  C317              movement_spaceisgem1:
 77+  C317 21 CB B8         ld hl,level_gems              ; check gems
 78+  C31A              movement_spaceisgem2:
 79+  C31A 5E 23 56 2B      ld de,(hl)                      ; get gem coords into de
 80+  C31E 7B               ld a,e                          ; check for end of data
 81+  C31F FE FF            cp 255
 82+  C321 CA 3C C3         jp z,movement_spaceisgem3       ; if yes, done with gems
 83+  C324 23               inc hl
 84+  C325 23               inc hl                          ; move to state
 85+  C326 7E               ld a,(hl)
 86+  C327 23               inc hl
 87+  C328 23               inc hl
 88+  C329 23               inc hl                          ; get to next
 89+  C32A FE 01            cp 1                            ; check if collected
 90+  C32C CA 1A C3         jp z,movement_spaceisgem2       ; if yes, move to next diamond
 91+  C32F 7B               ld a,e                          ; load e again
 92+  C330 B9               cp c                            ; otherwise, compare c with e
 93+  C331 C2 1A C3         jp nz,movement_spaceisgem2      ; if different, move to next gem
 94+  C334 7A               ld a,d                          ; get d coord
 95+  C335 B8               cp b                            ; compare b with d
 96+  C336 C2 1A C3         jp nz,movement_spaceisgem2      ; if different, move to next gem
 97+  C339 1E 01            ld e,1                          ; otherwise, exit with e = 1
 98+  C33B C9               ret
 99+  C33C              movement_spaceisgem3:
100+  C33C 1E 00            ld e,0                          ; nothing found, return e = 0
101+  C33E C9               ret
102+  C33F
103+  C33F              ;
104+  C33F              ; Checks the line of a cell below is empty - ie, first pixel rows is zero
105+  C33F              ; Inputs:
106+  C33F              ; hl - memory location of top pixel row
107+  C33F              ; bc - screen coords, b horiz, c vert
108+  C33F              ; Outputs:
109+  C33F              ; e - 0 if not empty, 1 if empty
110+  C33F              ;
111+  C33F              movement_linebelowisempty:
112+  C33F C5               push bc
113+  C340 E5               push hl
114+  C341 CD EF C2         call movement_spaceisgem        ; check if space is a gem
115+  C344 E1               pop hl
116+  C345 C1               pop bc
117+  C346 7B               ld a,e
118+  C347 FE 01            cp 1
119+  C349 C8               ret z                           ; if e is 1, space is a gem so can move here, return
120+  C34A 7E               ld a,(hl)                       ; get current pixel row
121+  C34B FE 00            cp 0
122+  C34D C2 55 C3         jp nz, movement_linebelowisempty1    ; row is not empty, can't move here
123+  C350 16 00            ld d,0
124+  C352 1E 01            ld e,1                          ; got to end, so space is empty
125+  C354 C9               ret
126+  C355              movement_linebelowisempty1:
127+  C355 16 00            ld d,0
128+  C357 1E 00            ld e,0                          ; returning false, ie space not empty
129+  C359 C9               ret
130+  C35A
131+  C35A              ;
132+  C35A              ; Checks the line of a cell above is empty - ie, last pixel rows are zero
133+  C35A              ; Inputs:
134+  C35A              ; hl - memory location of top pixel row
135+  C35A              ; bc - screen coords, b horiz, c vert
136+  C35A              ; Outputs:
137+  C35A              ; e - 0 if not empty, 1 if empty
138+  C35A              ;
139+  C35A              movement_lineaboveisempty:
140+  C35A C5               push bc
141+  C35B E5               push hl
142+  C35C CD EF C2         call movement_spaceisgem        ; check if space is a gem
143+  C35F E1               pop hl
144+  C360 C1               pop bc
145+  C361 7B               ld a,e
146+  C362 FE 01            cp 1
147+  C364 C8               ret z
148+  C365 7E               ld a,(hl)                       ; get current pixel row
149+  C366 FE 00            cp 0
150+  C368 C2 70 C3         jp nz, movement_lineaboveisempty1    ; row is not empty, can't move here
151+  C36B 16 00            ld d,0
152+  C36D 1E 01            ld e,1                          ; got to end, so space is empty
153+  C36F C9               ret
154+  C370              movement_lineaboveisempty1:
155+  C370 16 00            ld d,0
156+  C372 1E 00            ld e,0                          ; returning false, ie space not empty
157+  C374 C9               ret
158+  C375
159+  C375              ;
160+  C375              ; Checks the contents of a cell are diggable - ie, all pixel rows are dirt or empty
161+  C375              ; Inputs:
162+  C375              ; hl - memory location of top pixel row
163+  C375              ; bc - screen coords, b horiz, c vert
164+  C375              ; Outputs:
165+  C375              ; none - puts player into digging mode
166+  C375              ;
167+  C375              movement_spaceisdiggable:
168+  C375 3E 08            ld a,8                          ; 8 rows to check
169+  C377              movement_spaceisdiggable0:
170+  C377 08               ex af,af'                       ; store the loop counter
171+  C378 7E               ld a,(hl)                       ; get current pixel row
172+  C379 FE 00            cp 0
173+  C37B CA 8B C3         jp z, movement_spaceisdiggable2  ; row is empty, can dig here
174+  C37E FE 55            cp 85
175+  C380 CA 8B C3         jp z, movement_spaceisdiggable2  ; row is dirt, can dig here
176+  C383 FE AA            cp 170
177+  C385 CA 8B C3         jp z, movement_spaceisdiggable2  ; row is dirt, can dig here
178+  C388 C3 A5 C3         jp movement_spaceisdiggable1     ; otherwise, stop checking
179+  C38B              movement_spaceisdiggable2:
180+  C38B 79               ld a,c                          ; load the vertical coord
181+  C38C 3C               inc a                           ; next row down
182+  C38D 11 20 00         ld de,32
183+  C390 19               add hl,de                       ; otherwise, just go one down for hl, which means add 32, because of course
184+  C391 4F               ld c,a                          ; copy vert coord back to c
185+  C392 08               ex af,af'                       ; get loop counter back
186+  C393 3D               dec a                           ; decrease loop counter
187+  C394 C2 77 C3         jp nz, movement_spaceisdiggable0
188+  C397 21 E1 C5         ld hl,player+6
189+  C39A 36 01            ld (hl),1                       ; set the player into digging mode
190+  C39C 23               inc hl
191+  C39D 3A C4 C2         ld a,(movement_numberdigframes)
192+  C3A0 77               ld (hl),a                       ; set the number of frame to dig for
193+  C3A1 23               inc hl
194+  C3A2 36 08            ld (hl),8                       ; set the number of pixels to dig
195+  C3A4 C9               ret
196+  C3A5              movement_spaceisdiggable1:
197+  C3A5 21 E1 C5         ld hl,player+6
198+  C3A8 36 00            ld (hl),0                       ; set the player out of digging mode
199+  C3AA C9               ret
200+  C3AB
201+  C3AB              ;
202+  C3AB              ; Checks the contents of a cell below are diggable - ie, at least one pixel row has dirt. If the first one isn't dirt, stop
203+  C3AB              ; Inputs:
204+  C3AB              ; hl - memory location of top pixel row
205+  C3AB              ; bc - screen coords, b horiz, c vert
206+  C3AB              ; Outputs:
207+  C3AB              ; none - puts player into digging mode
208+  C3AB              ;
209+  C3AB              movement_spacebelowisdiggable:
210+  C3AB 7E               ld a,(hl)                       ; get first pixel row
211+  C3AC FE 55            cp 85
212+  C3AE CA B9 C3         jp z, movement_spacebelowisdiggable3  ; row is dirt, can dig here
213+  C3B1 FE AA            cp 170
214+  C3B3 CA B9 C3         jp z, movement_spacebelowisdiggable3  ; row is dirt, can dig here
215+  C3B6 C3 A5 C3         jp movement_spaceisdiggable1    ; the first row is not dirt, so don't bother checking the rest, can't dig
216+  C3B9              movement_spacebelowisdiggable3:
217+  C3B9 3E 08            ld a,8                          ; rows to check
218+  C3BB 1E 00            ld e,0                          ; count of rows to dig
219+  C3BD              movement_spacebelowisdiggable0:
220+  C3BD 08               ex af,af'                       ; store the loop counter
221+  C3BE 7E               ld a,(hl)                       ; get current pixel row
222+  C3BF FE 55            cp 85
223+  C3C1 CA CC C3         jp z, movement_spacebelowisdiggable4  ; row is dirt, can dig here
224+  C3C4 FE AA            cp 170
225+  C3C6 CA CC C3         jp z, movement_spacebelowisdiggable4  ; row is dirt, can dig here
226+  C3C9 C3 DB C3         jp movement_spacebelowisdiggable5     ; don't count this row and stop counting
227+  C3CC              movement_spacebelowisdiggable4:
228+  C3CC 1C               inc e                           ; inc count of rows to dig
229+  C3CD              movement_spacebelowisdiggable2:
230+  C3CD 79               ld a,c                          ; load the vertical coord
231+  C3CE 3C               inc a                           ; next row down
232+  C3CF D5               push de                         ; need e for later
233+  C3D0 11 20 00         ld de,32
234+  C3D3 19               add hl,de                       ; otherwise, just go one down for hl, which means add 32, because of course
235+  C3D4 4F               ld c,a                          ; copy vert coord back to c
236+  C3D5 D1               pop de                          ; get e back
237+  C3D6 08               ex af,af'                       ; get loop counter back
238+  C3D7 3D               dec a                           ; incease loop counter
239+  C3D8 C2 BD C3         jp nz, movement_spacebelowisdiggable0
240+  C3DB              movement_spacebelowisdiggable5:
241+  C3DB 21 E1 C5         ld hl,player+6
242+  C3DE 36 01            ld (hl),1                       ; set the player into digging mode
243+  C3E0 23               inc hl
244+  C3E1 3A C4 C2         ld a,(movement_numberdigframes)
245+  C3E4 77               ld (hl),a                       ; set the number of frame to dig for
246+  C3E5 23               inc hl
247+  C3E6 73               ld (hl),e                       ; set the number of pixels to dig
248+  C3E7 C9               ret
249+  C3E8              movement_spacebelowisdiggable1:
250+  C3E8 21 E1 C5         ld hl,player+6
251+  C3EB 36 00            ld (hl),0                       ; set the player out of digging mode
252+  C3ED C9               ret
253+  C3EE
254+  C3EE              ;
255+  C3EE              ; Checks the contents of a cell above are diggable - ie, at least one pixel row has dirt. If the first one isn't dirt, stop
256+  C3EE              ; Inputs:
257+  C3EE              ; hl - memory location of top pixel row
258+  C3EE              ; bc - screen coords, b horiz, c vert
259+  C3EE              ; Outputs:
260+  C3EE              ; none - puts player into digging mode
261+  C3EE              ;
262+  C3EE              movement_spaceaboveisdiggable:
263+  C3EE 7E               ld a,(hl)                       ; get first pixel row
264+  C3EF FE 55            cp 85
265+  C3F1 CA FC C3         jp z, movement_spaceaboveisdiggable3  ; row is dirt, can dig here
266+  C3F4 FE AA            cp 170
267+  C3F6 CA FC C3         jp z, movement_spaceaboveisdiggable3  ; row is dirt, can dig here
268+  C3F9 C3 A5 C3         jp movement_spaceisdiggable1    ; the first row is not dirt, so don't bother checking the rest, can't dig
269+  C3FC              movement_spaceaboveisdiggable3:
270+  C3FC 3E 08            ld a,8                          ; rows to check
271+  C3FE 1E 00            ld e,0                          ; count of rows to dig
272+  C400              movement_spaceaboveisdiggable0:
273+  C400 08               ex af,af'                       ; store the loop counter
274+  C401 7E               ld a,(hl)                       ; get current pixel row
275+  C402 FE 55            cp 85
276+  C404 CA 0F C4         jp z, movement_spaceaboveisdiggable4  ; row is dirt, can dig here
277+  C407 FE AA            cp 170
278+  C409 CA 0F C4         jp z, movement_spaceaboveisdiggable4  ; row is dirt, can dig here
279+  C40C C3 1F C4         jp movement_spaceaboveisdiggable5     ; don't count this row and stop counting
280+  C40F              movement_spaceaboveisdiggable4:
281+  C40F 1C               inc e                           ; inc count of rows to dig
282+  C410              movement_spaceaboveisdiggable2:
283+  C410 79               ld a,c                          ; load the vertical coord
284+  C411 3D               dec a                           ; next row up
285+  C412 D5               push de                         ; need e for later
286+  C413 11 20 00         ld de,32
287+  C416 ED 52            sbc hl,de                       ; otherwise, just go one up for hl, which means sub 32, because of course
288+  C418 4F               ld c,a                          ; copy vert coord back to c
289+  C419 D1               pop de                          ; get e back
290+  C41A 08               ex af,af'                       ; get loop counter back
291+  C41B 3D               dec a                           ; incease loop counter
292+  C41C C2 00 C4         jp nz, movement_spaceaboveisdiggable0
293+  C41F              movement_spaceaboveisdiggable5:
294+  C41F 21 E1 C5         ld hl,player+6
295+  C422 36 01            ld (hl),1                       ; set the player into digging mode
296+  C424 23               inc hl
297+  C425 3A C4 C2         ld a,(movement_numberdigframes)
298+  C428 77               ld (hl),a                       ; set the number of frame to dig for
299+  C429 23               inc hl
300+  C42A 73               ld (hl),e                       ; set the number of pixels to dig
301+  C42B C9               ret
302+  C42C              movement_spaceaboveisdiggable1:
303+  C42C 21 E1 C5         ld hl,player+6
304+  C42F 36 00            ld (hl),0                       ; set the player out of digging mode
305+  C431 C9               ret
306+  C432
307+  C432              ;
308+  C432              ; Checks if the player can move down
309+  C432              ; Inputs:
310+  C432              ; bc - player coords, b horiz, c vert
311+  C432              ; Outputs:
312+  C432              ; de - 1 can move
313+  C432              movement_checkcanmove_down:
314+  C432 F5               push af
315+  C433 C5               push bc
316+  C434 CD 09 AC         call sprites_scadd              ; get the memory location of cell into de
317+  C437 62 6B            ld hl,de                        ; look at cell directly underneath (add 256)
318+  C439 24               inc h                       ; memory location of cell beneath now in hl
319+  C43A 3E 08            ld a,8                       ; look below
320+  C43C 81               add c
321+  C43D 4F               ld c,a
322+  C43E CD 3F C3         call movement_linebelowisempty       ; check space is empty
323+  C441 7B               ld a,e                          ; check space empty flag
324+  C442 FE 00            cp 0
325+  C444 CA 4D C4         jp z, movement_checkcanmove_down1 ; can't move
326+  C447 CD E6 C7         call player_justmoved
327+  C44A C1               pop bc
328+  C44B F1               pop af
329+  C44C C9               ret
330+  C44D              movement_checkcanmove_down1:
331+  C44D C1               pop bc
332+  C44E CD 09 AC         call sprites_scadd              ; get the memory location of cell into de
333+  C451 62 6B            ld hl,de                        ; look at cell directly underneath (add 256)
334+  C453 24               inc h
335+  C454 C5               push bc
336+  C455 CD AB C3         call movement_spacebelowisdiggable    ; can't move here, but can we dig
337+  C458 11 00 00         ld de,0
338+  C45B C1               pop bc
339+  C45C F1               pop af
340+  C45D C9               ret
341+  C45E
342+  C45E              ;
343+  C45E              ; Checks if the player can move up
344+  C45E              ; Inputs:
345+  C45E              ; bc - player coords, b horiz, c vert
346+  C45E              ; Outputs:
347+  C45E              ; de - 1 can move
348+  C45E              movement_checkcanmove_up:
349+  C45E F5               push af
350+  C45F C5               push bc
351+  C460 CD 09 AC         call sprites_scadd              ; get the memory location of cell into de
352+  C463 62 6B            ld hl,de                        ; look at cell directly above (subtract 32)
353+  C465 11 20 00         ld de,32
354+  C468 ED 52            sbc hl,de                       ; memory location of line above now in hl
355+  C46A 0D               dec c                           ; look above
356+  C46B CD 5A C3         call movement_lineaboveisempty       ; check space is empty
357+  C46E 7B               ld a,e                          ; check space empty flag
358+  C46F FE 00            cp 0
359+  C471 CA 7C C4         jp z, movement_checkcanmove_up1 ; can't move
360+  C474 1E 01            ld e,1
361+  C476 CD E6 C7         call player_justmoved
362+  C479 C1               pop bc
363+  C47A F1               pop af
364+  C47B C9               ret
365+  C47C              movement_checkcanmove_up1:
366+  C47C C1               pop bc
367+  C47D CD 09 AC         call sprites_scadd              ; get the memory location of cell into de
368+  C480 62 6B            ld hl,de                        ; look at cell directly above (subtract 32)
369+  C482 11 20 00         ld de,32
370+  C485 ED 52            sbc hl,de                       ; memory location of line above now in hl
371+  C487 C5               push bc
372+  C488 CD EE C3         call movement_spaceaboveisdiggable    ; can't move here, but can we dig
373+  C48B 11 00 00         ld de,0
374+  C48E C1               pop bc
375+  C48F F1               pop af
376+  C490 C9               ret
377+  C491
378+  C491              ;
379+  C491              ; Checks if the player can move right
380+  C491              ; Inputs:
381+  C491              ; bc - player coords, b horiz, c vert
382+  C491              ; Outputs:
383+  C491              ; de - 1 can move
384+  C491              movement_checkcanmove_right:
385+  C491 F5               push af
386+  C492 C5               push bc
387+  C493 CD 09 AC         call sprites_scadd              ; get the memory location of cell into de
388+  C496 62 6B            ld hl,de                        ; look at cell directly to the right (add 1)
389+  C498 3E 08            ld a,8
390+  C49A 80               add b                           ; move one cell right
391+  C49B 47               ld b,a
392+  C49C 23               inc hl                          ; memory location of cell to the right now in hl
393+  C49D CD C5 C2         call movement_spaceisempty       ; check space is empty
394+  C4A0 7B               ld a,e                          ; check space empty flag
395+  C4A1 FE 00            cp 0
396+  C4A3 CA AC C4         jp z, movement_checkcanmove_right1 ; can't move
397+  C4A6 CD E6 C7         call player_justmoved
398+  C4A9 C1               pop bc
399+  C4AA F1               pop af
400+  C4AB C9               ret
401+  C4AC              movement_checkcanmove_right1:
402+  C4AC C1               pop bc
403+  C4AD CD 09 AC         call sprites_scadd              ; get the memory location of cell into de
404+  C4B0 62 6B            ld hl,de
405+  C4B2 23               inc hl                          ; memory location of cell to the right now in hl
406+  C4B3 C5               push bc
407+  C4B4 CD 75 C3         call movement_spaceisdiggable    ; can't move here, but can we dig
408+  C4B7 11 00 00         ld de,0
409+  C4BA C1               pop bc
410+  C4BB F1               pop af
411+  C4BC C9               ret
412+  C4BD
413+  C4BD              ;
414+  C4BD              ; Checks if the player can move left
415+  C4BD              ; Inputs:
416+  C4BD              ; bc - player coords, b horiz, c vert
417+  C4BD              ; Outputs:
418+  C4BD              ; de - 1 can move
419+  C4BD              movement_checkcanmove_left:
420+  C4BD F5               push af
421+  C4BE C5               push bc
422+  C4BF CD 09 AC         call sprites_scadd              ; get the memory location of cell into de
423+  C4C2 62 6B            ld hl,de                        ; look at cell directly to the right (add 1)
424+  C4C4 78               ld a,b
425+  C4C5 06 08            ld b,8
426+  C4C7 90               sub b                           ; move one cell left
427+  C4C8 47               ld b,a
428+  C4C9 2B               dec hl                          ; memory location of cell to the right now in hl
429+  C4CA CD C5 C2         call movement_spaceisempty       ; check space is empty
430+  C4CD 7B               ld a,e                          ; check space empty flag
431+  C4CE FE 00            cp 0
432+  C4D0 CA D9 C4         jp z, movement_checkcanmove_left1 ; can't move
433+  C4D3 CD E6 C7         call player_justmoved
434+  C4D6 C1               pop bc
435+  C4D7 F1               pop af
436+  C4D8 C9               ret
437+  C4D9              movement_checkcanmove_left1:
438+  C4D9 C1               pop bc
439+  C4DA CD 09 AC         call sprites_scadd              ; get the memory location of cell into de
440+  C4DD 62 6B            ld hl,de
441+  C4DF 2B               dec hl                          ; memory location of cell to the right now in hl
442+  C4E0 C5               push bc
443+  C4E1 CD 75 C3         call movement_spaceisdiggable    ; can't move here, but can we dig
444+  C4E4 11 00 00         ld de,0
445+  C4E7 C1               pop bc
446+  C4E8 F1               pop af
447+  C4E9 C9               ret
# file closed: game/movement.asm
157   C4EA                  include "game\game.asm"
# file opened: game/game.asm
  1+  C4EA              ;
  2+  C4EA              ; The current frame count, incremented each frame
  3+  C4EA              ;
  4+  C4EA              game_framenumber:
  5+  C4EA 00               defb    0
  6+  C4EB
  7+  C4EB              ;
  8+  C4EB              ; The number of players
  9+  C4EB              ;
 10+  C4EB              game_numberplayers:
 11+  C4EB 01               defb 1
 12+  C4EC
 13+  C4EC              ;
 14+  C4EC              ; The current player
 15+  C4EC              ;
 16+  C4EC              game_currentplayer:
 17+  C4EC 01               defb 1
 18+  C4ED
 19+  C4ED              ;
 20+  C4ED              ; The default number of lives
 21+  C4ED              ;
 22+  C4ED              game_numberlives:
 23+  C4ED 04               defb 4
 24+  C4EE
 25+  C4EE              ;
 26+  C4EE              ; The current difficulty
 27+  C4EE              ;
 28+  C4EE              game_difficulty:
 29+  C4EE 01               defb 1
 30+  C4EF
 31+  C4EF              ;
 32+  C4EF              ; Control method: 0 for keyboard, 1 for kempston
 33+  C4EF              ;
 34+  C4EF              game_control:
 35+  C4EF 00               defb 0
 36+  C4F0
 37+  C4F0              ;
 38+  C4F0              ; The current rocks used
 39+  C4F0              ;
 40+  C4F0              game_current_rocks:
 41+  C4F0 00 00            defb 0,0
 42+  C4F2
 43+  C4F2
 44+  C4F2              game_tankdifficulty:
 45+  C4F2 46 41 3C 37      defb 70,65,60,55,50,45,40,35,30,25,20,12
 45+  C4F6 32 2D 28 23
 45+  C4FA 1E 19 14 0C
 46+  C4FE              game_pitdifficulty:
 47+  C4FE 07 05 05 04      defb 7,5,5,4,4,4,2,2,2,2,2,2
 47+  C502 04 04 02 02
 47+  C506 02 02 02 02
 48+  C50A              game_robotdifficulty:
 49+  C50A 06 04 04 04      defb 6,4,4,4,3,3,3,2,0,0,0,0
 49+  C50E 03 03 03 02
 49+  C512 00 00 00 00
 50+  C516              game_digdifficulty:
 51+  C516 14 0E 0A 0A      defb 20,14,10,10,8,8,8,8,6,6,6,4
 51+  C51A 08 08 08 08
 51+  C51E 06 06 06 04
 52+  C522              game_rockdifficulty:
 53+  C522 28 1C 14 14      defb 40,28,20,20,18,18,18,18,18,18,18,18
 53+  C526 12 12 12 12
 53+  C52A 12 12 12 12
 54+  C52E              game_missiledifficulty:
 55+  C52E 46 32 2D 2D      defb 70,50,45,45,40,35,35,30,30,25,25,20
 55+  C532 28 23 23 1E
 55+  C536 1E 19 19 14
 56+  C53A              ;
 57+  C53A              ; Moves to the next player
 58+  C53A              ;
 59+  C53A              game_changeplayer:
 60+  C53A 3A EB C4         ld a,(game_numberplayers)
 61+  C53D FE 01            cp 1
 62+  C53F C8               ret z                       ; if just one player, no need to change
 63+  C540 3A EC C4         ld a,(game_currentplayer)   ; get current player
 64+  C543 3D               dec a                       ; otherwise decrease by one
 65+  C544 EE 01            xor 1                       ; xor with one to flip
 66+  C546 3C               inc a                       ; increment
 67+  C547 21 EC C4         ld hl,game_currentplayer
 68+  C54A 77               ld (hl),a                   ; store
 69+  C54B C9               ret
 70+  C54C
 71+  C54C              ;
 72+  C54C              ; Sets the number of players at the start of the game
 73+  C54C              ; Inputs:
 74+  C54C              ; a - number of players
 75+  C54C              game_setnumberofplayers:
 76+  C54C 21 EB C4         ld hl,game_numberplayers
 77+  C54F 77               ld (hl),a
 78+  C550
 79+  C550              ;
 80+  C550              ; Starts a game
 81+  C550              ;
 82+  C550              game_init:
 83+  C550 3E 01            ld a,1
 84+  C552 32 EC C4         ld (game_currentplayer),a
 85+  C555 C9               ret
 86+  C556
 87+  C556              ;
 88+  C556              ; Sets the current rock layout. Odd gets 1, even gets 2
 89+  C556              ;
 90+  C556              game_setcurrentrocks:
 91+  C556 3A EE C4         ld a,(game_difficulty)
 92+  C559 E6 01            and 1
 93+  C55B FE 00            cp 0
 94+  C55D CA 6B C5         jp z,game_setcurrentrocks0
 95+  C560 11 5B B6         ld de,level_rocks
 96+  C563 21 F0 C4         ld hl,game_current_rocks
 97+  C566 73 23 72 2B      ld (hl),de
 98+  C56A C9               ret
 99+  C56B              game_setcurrentrocks0:
100+  C56B 11 5B B7         ld de,level_rocks_alt
101+  C56E 21 F0 C4         ld hl,game_current_rocks
102+  C571 73 23 72 2B      ld (hl),de
103+  C575 C9               ret
104+  C576
105+  C576              ;
106+  C576              ; Increment frame number by 1
107+  C576              ;
108+  C576              game_incrementframe:
109+  C576 3A EA C4         ld a,(game_framenumber)
110+  C579 FE FF            cp 255
111+  C57B C2 80 C5         jp nz,game_incrementframe0
112+  C57E 3E 00            ld a,0
113+  C580              game_incrementframe0:
114+  C580 3C               inc a
115+  C581 32 EA C4         ld (game_framenumber),a
116+  C584 C9               ret
117+  C585
118+  C585              ;
119+  C585              ; Returns current frame
120+  C585              ; Outputs:
121+  C585              ; a - current frame
122+  C585              ;
123+  C585              game_getcurrentframe:
124+  C585 3A EA C4         ld a,(game_framenumber)
125+  C588 C9               ret
126+  C589
127+  C589              ;
128+  C589              ; Resets current frame
129+  C589              ;
130+  C589              game_resetcurrentframe:
131+  C589 21 EA C4         ld hl,game_framenumber
132+  C58C 36 00            ld (hl),0
133+  C58E C9               ret
134+  C58F
135+  C58F              ;
136+  C58F              ; Increases the current difficulty
137+  C58F              ;
138+  C58F              game_increasedifficulty:
139+  C58F 3A EE C4         ld a,(game_difficulty)
140+  C592 3C               inc a
141+  C593 32 EE C4         ld (game_difficulty),a
142+  C596
143+  C596              ;
144+  C596              ; Sets the various difficulties
145+  C596              ;
146+  C596              game_setdifficulty:
147+  C596 3A EE C4         ld a,(game_difficulty)
148+  C599 FE 0D            cp 13
149+  C59B C2 A0 C5         jp nz,game_setdifficulty0
150+  C59E 3E 0C            ld a,12                         ; limit difficulty to twelve
151+  C5A0              game_setdifficulty0:
152+  C5A0 11 00 00         ld de,0
153+  C5A3 5F               ld e,a                          ; keep the difficulty in de
154+  C5A4                  ; Set the tank difficulty
155+  C5A4 21 F2 C4         ld hl,game_tankdifficulty
156+  C5A7 2B               dec hl
157+  C5A8 19               add hl,de                       ; add the difficulty
158+  C5A9 7E               ld a,(hl)                       ; get the value
159+  C5AA 32 69 C9         ld (tank_speed),a               ; set the tank speed
160+  C5AD                  ; Set the pit difficulty
161+  C5AD 21 FE C4         ld hl,game_pitdifficulty
162+  C5B0 2B               dec hl
163+  C5B1 19               add hl,de                       ; add the difficulty
164+  C5B2 7E               ld a,(hl)                       ; get the value
165+  C5B3 32 2F D1         ld (thepit_speed),a               ; set the pit speed
166+  C5B6                  ; Set the robot difficulty
167+  C5B6 21 0A C5         ld hl,game_robotdifficulty
168+  C5B9 2B               dec hl
169+  C5BA 19               add hl,de                       ; add the difficulty
170+  C5BB 7E               ld a,(hl)                       ; get the value
171+  C5BC 32 0D D3         ld (robots_robotspeed),a        ; set the robot speed
172+  C5BF                  ; Set the dig difficulty
173+  C5BF 21 16 C5         ld hl,game_digdifficulty
174+  C5C2 2B               dec hl
175+  C5C3 19               add hl,de                       ; add the difficulty
176+  C5C4 7E               ld a,(hl)                       ; get the value
177+  C5C5 32 C4 C2         ld (movement_numberdigframes),a ; set the dig frames
178+  C5C8                  ; Set the rock difficulty
179+  C5C8 21 22 C5         ld hl,game_rockdifficulty
180+  C5CB 2B               dec hl
181+  C5CC 19               add hl,de                       ; add the difficulty
182+  C5CD 7E               ld a,(hl)                       ; get the value
183+  C5CE 32 7C CB         ld (rocks_numberofframestowobble),a ; set the wobble frames
184+  C5D1                  ; Set the missile difficulty
185+  C5D1 21 2E C5         ld hl,game_missiledifficulty
186+  C5D4 2B               dec hl
187+  C5D5 19               add hl,de                       ; add the difficulty
188+  C5D6 7E               ld a,(hl)                       ; get the value
189+  C5D7 32 6B CF         ld (missiles_speed),a           ; set the missile difficulty
190+  C5DA C9               ret
# file closed: game/game.asm
158   C5DB                  include "game\player.asm"
# file opened: game/player.asm
  1+  C5DB              ;
  2+  C5DB              ;   Data for current player
  3+  C5DB              ;
  4+  C5DB              player:
  5+  C5DB 00 00            defb    0,0                 ; horiz,vert (+0,+1)
  6+  C5DD 02 00 01         defb    2,0,1               ; dir (0 up, 1 left, 2 right, 3 down), frame, frame transition count (+2,+3,+4)
  7+  C5E0 00               defb    0                   ; auto move remaining (+5)
  8+  C5E1 00 00 00         defb    0,0,0               ; is digging (0 no), digging count, pixels to di (+6,+7,+8)
  9+  C5E4 00               defb    0                   ; lives remaining (+9)
 10+  C5E5 00               defb    0                   ; died this life (+10)
 11+  C5E6 00 00            defb    0,0                 ; dying (+11), frames (+12)
 12+  C5E8 00               defb    0                   ; can finish level, whether can finish level or not (+13)
 13+  C5E9 00               defb    0                   ; difficulty (+14)
 14+  C5EA
 15+  C5EA              player_location:
 16+  C5EA 00               defb 0                      ; 0 normal, 1 diamond cavern, 2 the pit
 17+  C5EB
 18+  C5EB              ;
 19+  C5EB              ; Works out which part of the screen the player is in
 20+  C5EB              ; Pit is between 3,9 and 8,9
 21+  C5EB              ; Diamond cavern is between 11,22 and 22,28
 22+  C5EB              ;
 23+  C5EB              player_getlocation:
 24+  C5EB ED 4B DB C5      ld bc,(player)              ; get screen coords
 25+  C5EF CD 42 AA         call screen_getcharcoordsfromscreencoords ; get char coords, c horiz
 26+  C5F2 78               ld a,b                      ; check for pit first
 27+  C5F3 FE 09            cp 9                        ; if not on this row, not in the pit
 28+  C5F5 C2 04 C6         jp nz,player_getlocation0
 29+  C5F8 79               ld a,c                      ; check horizontal
 30+  C5F9 FE 09            cp 9
 31+  C5FB D2 04 C6         jp nc, player_getlocation0  ; if more than 9, not in the pit
 32+  C5FE 21 EA C5         ld hl,player_location
 33+  C601 36 02            ld (hl),2                   ; load location with 2, the pit
 34+  C603 C9               ret                         ; done
 35+  C604              player_getlocation0:            ; check for diamond cavern
 36+  C604 78               ld a,b                      ; first check vertical
 37+  C605 FE 16            cp 22                       ; if above row 22, then not in cavern
 38+  C607 DA 1B C6         jp c,player_getlocation1
 39+  C60A 79               ld a,c                      ; get the horizontal next
 40+  C60B FE 0B            cp 11
 41+  C60D DA 1B C6         jp c,player_getlocation1    ; if less than 11 not in diamond cave
 42+  C610 FE 17            cp 23
 43+  C612 D2 1B C6         jp nc,player_getlocation1    ; if less than 11 not in diamond cave
 44+  C615 21 EA C5         ld hl,player_location
 45+  C618 36 01            ld (hl),1                   ; load location with 1, the cavern
 46+  C61A C9               ret
 47+  C61B              player_getlocation1:
 48+  C61B 21 EA C5         ld hl,player_location
 49+  C61E 36 00            ld (hl),0                   ; load location with 2, the pit
 50+  C620 C9               ret                         ; done
 51+  C621
 52+  C621
 53+  C621              ;
 54+  C621              ; Initializes a player at start of game
 55+  C621              ; Copy initial coords, copy lives, copy score
 56+  C621              ;
 57+  C621              player_init_gamestart:
 58+  C621 3A ED C4         ld a,(game_numberlives)
 59+  C624 32 E2 C6         ld (player1_lives),a
 60+  C627 32 E3 C6         ld (player2_lives),a                        ; set the initial number of lives at game start
 61+  C62A
 62+  C62A 21 E6 C6         ld hl,player1_score+2
 63+  C62D 06 06            ld b,6
 64+  C62F              player_init_gamestart0:
 65+  C62F 36 30            ld (hl),48
 66+  C631 23               inc hl
 67+  C632 10 FB            djnz player_init_gamestart0                 ; zero out player 1 score
 68+  C634 21 EF C6         ld hl,player2_score+2
 69+  C637 06 06            ld b,6
 70+  C639              player_init_gamestart1:
 71+  C639 36 30            ld (hl),48
 72+  C63B 23               inc hl
 73+  C63C 10 FB            djnz player_init_gamestart1                 ; zero out player 2 score
 74+  C63E 3E 01            ld a,1
 75+  C640 32 F6 C6         ld (player1_difficulty),a
 76+  C643 32 F7 C6         ld (player2_difficulty),a                   ; set player difficulties to zero
 77+  C646 C9               ret
 78+  C647
 79+  C647              ;
 80+  C647              ; Initializes a player at start of a life
 81+  C647              ; Copy initial coords, copy lives, copy score
 82+  C647              ;
 83+  C647              player_init_lifestart:
 84+  C647 21 E0 C5         ld hl,player+5
 85+  C64A 06 09            ld b,9                      ; initialise 9 properties
 86+  C64C              player_init_lifestart2:
 87+  C64C 36 00            ld (hl),0
 88+  C64E 23               inc hl
 89+  C64F 10 FB            djnz player_init_lifestart2
 90+  C651
 91+  C651 21 DD C5         ld hl,player+2              ; initialise some properties
 92+  C654 36 02            ld (hl),2
 93+  C656 23               inc hl
 94+  C657 36 00            ld (hl),0
 95+  C659 23               inc hl
 96+  C65A 36 01            ld (hl),1
 97+  C65C
 98+  C65C ED 4B EB 80      ld bc,(init_coord)
 99+  C660 ED 43 DB C5      ld (player),bc
100+  C664
101+  C664 3A EC C4         ld a,(game_currentplayer)
102+  C667 FE 01            cp 1
103+  C669 C2 76 C6         jp nz,player_init_lifestart4
104+  C66C 01 E4 C5         ld bc,player+9
105+  C66F 3A E2 C6         ld a,(player1_lives)
106+  C672 02               ld (bc),a
107+  C673 C3 7D C6         jp player_init_lifestart3
108+  C676              player_init_lifestart4:
109+  C676 01 E4 C5         ld bc,player+9
110+  C679 3A E3 C6         ld a,(player2_lives)
111+  C67C 02               ld (bc),a
112+  C67D              player_init_lifestart3:
113+  C67D CD 33 CF         call diamonds_init      ; initialise gems
114+  C680 01 06 00         ld bc,6
115+  C683 11 DF CC         ld de,scores_current+2
116+  C686 3A EC C4         ld a,(game_currentplayer)
117+  C689 FE 01            cp 1
118+  C68B C2 9A C6         jp nz,player_init_lifestart0
119+  C68E 3A F6 C6         ld a,(player1_difficulty)       ; initialise player 1 difficulty
120+  C691 32 EE C4         ld (game_difficulty),a
121+  C694 21 E6 C6         ld hl,player1_score+2           ; itialise player 1 scores
122+  C697 C3 A3 C6         jp player_init_lifestart1
123+  C69A              player_init_lifestart0:
124+  C69A 3A F7 C6         ld a,(player2_difficulty)       ; initialise player 2 difficulty
125+  C69D 32 EE C4         ld (game_difficulty),a
126+  C6A0 21 EF C6         ld hl,player2_score+2           ; initialise player 2 scores
127+  C6A3              player_init_lifestart1:
128+  C6A3 ED B0            ldir
129+  C6A5 C9               ret
130+  C6A6
131+  C6A6
132+  C6A6              ;
133+  C6A6              ; Copies the current score and difficulty in the current player
134+  C6A6              ;
135+  C6A6              player_recordcurrentstate:
136+  C6A6 01 06 00         ld bc,6                  ; copy current score back to correct player
137+  C6A9 21 DF CC         ld hl,scores_current+2
138+  C6AC 3A EC C4         ld a,(game_currentplayer)
139+  C6AF FE 01            cp 1
140+  C6B1 C2 C6 C6         jp nz,player_recordcurrentstate0
141+  C6B4 3A EE C4         ld a,(game_difficulty)
142+  C6B7 32 F6 C6         ld (player1_difficulty),a       ; store difficulty
143+  C6BA 11 E6 C6         ld de,player1_score+2
144+  C6BD 3A E4 C5         ld a,(player+9)
145+  C6C0 32 E2 C6         ld (player1_lives),a              ; record lives
146+  C6C3 C3 D5 C6         jp player_recordcurrentstate1
147+  C6C6              player_recordcurrentstate0:         ; do player 2
148+  C6C6 3A EE C4         ld a,(game_difficulty)
149+  C6C9 32 F7 C6         ld (player2_difficulty),a       ; store difficulty
150+  C6CC 3A E4 C5         ld a,(player+9)
151+  C6CF 32 E3 C6         ld (player2_lives),a              ; record lives
152+  C6D2 11 EF C6         ld de,player2_score+2
153+  C6D5              player_recordcurrentstate1:
154+  C6D5 ED B0            ldir
155+  C6D7 C9               ret
156+  C6D8
157+  C6D8              ;
158+  C6D8              ; Player just died, subtract a life
159+  C6D8              ;
160+  C6D8              player_died:
161+  C6D8 01 E4 C5         ld bc,player+9
162+  C6DB 0A               ld a,(bc)
163+  C6DC 3D               dec a
164+  C6DD 02               ld (bc),a
165+  C6DE CD A6 C6         call player_recordcurrentstate
166+  C6E1 C9               ret
167+  C6E2
168+  C6E2              ;
169+  C6E2              ; Player lives
170+  C6E2              ;
171+  C6E2              player1_lives:
172+  C6E2 03               defb 3
173+  C6E3              player2_lives:
174+  C6E3 03               defb 3
175+  C6E4
176+  C6E4              ;
177+  C6E4              ; Player scores
178+  C6E4              ;
179+  C6E4              player1_score:
180+  C6E4 04 01 30 30      defb 4,1,'000000',255
180+  C6E8 30 30 30 30
180+  C6EC FF
181+  C6ED              player2_score:
182+  C6ED 16 01 30 30      defb 22,1,'000000',255
182+  C6F1 30 30 30 30
182+  C6F5 FF
183+  C6F6
184+  C6F6              ;
185+  C6F6              ; Player difficulties
186+  C6F6              ;
187+  C6F6              player1_difficulty:
188+  C6F6 00               defb 0
189+  C6F7              player2_difficulty:
190+  C6F7 00               defb 0
191+  C6F8
192+  C6F8              ;
193+  C6F8              ; Kills a player this life
194+  C6F8              ;
195+  C6F8              player_killplayer:
196+  C6F8 21 E5 C5         ld hl,player+10
197+  C6FB 36 01            ld (hl),1
198+  C6FD C9               ret
199+  C6FE
200+  C6FE              ;
201+  C6FE              ; Crush a player this life
202+  C6FE              ;
203+  C6FE              player_crushplayer:
204+  C6FE 21 E6 C5         ld hl,player+11             ; mark as crushed
205+  C701 36 01            ld (hl),1
206+  C703 C9               ret
207+  C704
208+  C704              player_tankkillplayer
209+  C704 21 E6 C5         ld hl,player+11             ; mark as tanked
210+  C707 36 02            ld (hl),2
211+  C709 C9               ret
212+  C70A
213+  C70A              player_zonkplayer
214+  C70A 21 E6 C5         ld hl,player+11             ; mark as zonked (missile)
215+  C70D 36 03            ld (hl),3
216+  C70F C9               ret
217+  C710
218+  C710              player_pitkillplayer
219+  C710 21 E6 C5         ld hl,player+11             ; mark as pit killed
220+  C713 36 04            ld (hl),4
221+  C715 C9               ret
222+  C716
223+  C716              player_robotkillplayer
224+  C716 21 E6 C5         ld hl,player+11             ; mark as robot killed
225+  C719 36 05            ld (hl),5
226+  C71B C9               ret
227+  C71C
228+  C71C              ;
229+  C71C              ; Draws the player at the current position or deletes them
230+  C71C              ;
231+  C71C              player_drawplayer:
232+  C71C 3A DD C5         ld a,(player+2)             ; get the current direction
233+  C71F FE 03            cp 3
234+  C721 C2 26 C7         jp nz,player_drawplayer0
235+  C724 3E 00            ld a,0                      ; if 3, then down, so set the direction to 0 since the sprite is the same as up
236+  C726              player_drawplayer0:             ; DYING CHECKS
237+  C726 5F               ld e,a                      ; store in e
238+  C727 3A E6 C5         ld a,(player+11)             ; get the dying flag
239+  C72A FE 01            cp 1
240+  C72C CA 66 C7         jp z,player_drawplayer3     ; if it's one, we're being crushed
241+  C72F FE 04            cp 4
242+  C731 CA AE C7         jp z,player_drawplayer9     ; player is falling into the pit
243+  C734 FE 05            cp 5
244+  C736 CA CA C7         jp z,player_drawplayer12    ; player has been killed by a robot
245+  C739              player_drawplayer4:             ; CHECK FOR DIGGING
246+  C739 3A E1 C5         ld a,(player+6)             ; get the dig flag
247+  C73C FE 01            cp 1
248+  C73E CA 4F C7         jp z,player_drawplayer1    ; get dig frame
249+  C741 3A DE C5         ld a,(player+3)             ; this is normal movement so get the current frame
250+  C744 83               add a,e
251+  C745 C3 54 C7         jp player_drawplayer2
252+  C748              player_drawplayer6:             ; GETTING THE DIG FRAM
253+  C748 E6 01            and 1                       ; check for odd
254+  C74A C6 0A            add 10                      ; add 10, to get either 10 or 11
255+  C74C C3 54 C7         jp player_drawplayer2
256+  C74F              player_drawplayer1:             ; GET THE NORMAL FRAME
257+  C74F 3A DD C5         ld a,(player+2)             ; digging, get the current direction again, because want all four
258+  C752 C6 06            add a,6                     ; add direction to 6 to get frame
259+  C754              player_drawplayer2:             ; WORK OUT THE FRAME
260+  C754 07               rlca
261+  C755 07               rlca
262+  C756 07               rlca                        ; multiply by eight
263+  C757 6F               ld l,a
264+  C758 26 00            ld h,0
265+  C75A 11 3C BE         ld de,player_sprite
266+  C75D 19               add hl,de                   ; load hl with the location of the player sprite data
267+  C75E              player_drawplayer7:             ; DRAW THE PlAYER
268+  C75E ED 4B DB C5      ld bc,(player)              ; load bc with the start coords
269+  C762 CD 14 AB         call sprites_drawsprite     ; call the routine to draw the sprite
270+  C765                  ;call player_storeupdatedlines ; log updated rows
271+  C765 C9               ret
272+  C766              ;
273+  C766              ; CRUSHING
274+  C766              ;
275+  C766              player_drawplayer3:
276+  C766 21 E7 C5         ld hl,player+12
277+  C769 7E               ld a,(hl)                  ; crushing, so get the current anim flag
278+  C76A FE 00            cp 0
279+  C76C C2 75 C7         jp nz,player_drawplayer5    ; if this isn't zero, then this isn't the first time round, so do the crush anim
280+  C76F 3E 64            ld a,100
281+  C771 77               ld (hl),a                   ; otherwise, load up the anim frames
282+  C772 C3 39 C7         jp player_drawplayer4       ; and return to the main loop to remove the current frame
283+  C775              player_drawplayer5:
284+  C775 3D               dec a
285+  C776 77               ld (hl),a
286+  C777 FE 00            cp 0
287+  C779 CC F8 C6         call z,player_killplayer     ; final animation, so kill the player
288+  C77C FE 0A            cp 10                         ; play the sound
289+  C77E CC 1F B2         call z, sound_rockfell
290+  C781 FE 14            cp 20                        ; check if we should move the rock
291+  C783 C2 97 C7         jp nz,player_drawplayer8
292+  C786 D9               exx
293+  C787 F5               push af
294+  C788 ED 4B 7D CB      ld bc,(rocks_killerrock)    ; get the coords of the rock that killed us
295+  C78C 21 88 BD         ld hl,sprites+72
296+  C78F CD 14 AB         call sprites_drawsprite     ; draw a rock over current
297+  C792 F1               pop af
298+  C793 D9               exx
299+  C794 C3 48 C7         jp player_drawplayer6       ; continue drawing player
300+  C797              player_drawplayer8:
301+  C797 FE 14            cp 20
302+  C799 D2 48 C7         jp nc,player_drawplayer6    ; if not in last 10 frames, draw as normal
303+  C79C ED 4B DB C5      ld bc,(player)
304+  C7A0 CD 42 AA         call screen_getcharcoordsfromscreencoords ; get the char coords into bc
305+  C7A3 3E 42            ld a,66             ; load red
306+  C7A5 CD 9A AA         call screen_setattr
307+  C7A8 21 88 BD         ld hl,sprites+72            ; otherwise, player is rock
308+  C7AB C3 5E C7         jp player_drawplayer7
309+  C7AE              ;
310+  C7AE              ; FALLING
311+  C7AE              ;
312+  C7AE              player_drawplayer9:             ; player is falling into the pit
313+  C7AE 21 E7 C5         ld hl,player+12
314+  C7B1 7E               ld a,(hl)                   ; get the frames
315+  C7B2 FE 00            cp 0
316+  C7B4 C2 BD C7         jp nz,player_drawplayer10    ; if this isn't zero, then this isn't the first time round, so do the crush anim
317+  C7B7 3E 50            ld a,80
318+  C7B9 77               ld (hl),a                   ; otherwise, load up the anim frames
319+  C7BA C3 39 C7         jp player_drawplayer4       ; and return to the main loop to remove the current frame
320+  C7BD              player_drawplayer10:
321+  C7BD 3D               dec a
322+  C7BE 77               ld (hl),a
323+  C7BF FE 00            cp 0
324+  C7C1 CC F8 C6         call z,player_killplayer     ; final frame, so kill the player
325+  C7C4 3A DE C5         ld a,(player+3)
326+  C7C7 C3 54 C7         jp player_drawplayer2
327+  C7CA              ;
328+  C7CA              ; ROBOT KILLED
329+  C7CA              ;
330+  C7CA              player_drawplayer12:
331+  C7CA 21 E7 C5         ld hl,player+12
332+  C7CD 7E               ld a,(hl)                   ; get the frames
333+  C7CE FE 00            cp 0
334+  C7D0 C2 D9 C7         jp nz,player_drawplayer13    ; if this isn't zero, then this isn't the first time round, so do the crush anim
335+  C7D3 3E C8            ld a,200
336+  C7D5 77               ld (hl),a                   ; otherwise, load up the anim frames
337+  C7D6 C3 39 C7         jp player_drawplayer4       ; and return to the main loop to remove the current frame
338+  C7D9              player_drawplayer13:
339+  C7D9 3D               dec a
340+  C7DA 77               ld (hl),a
341+  C7DB FE 00            cp 0
342+  C7DD CC F8 C6         call z,player_killplayer     ; final frame, so kill the player
343+  C7E0 3A DE C5         ld a,(player+3)
344+  C7E3 C3 54 C7         jp player_drawplayer2
345+  C7E6
346+  C7E6              ;
347+  C7E6              ; Runs after the player just moved. Changes animation frame if required
348+  C7E6              ;
349+  C7E6              player_justmoved:
350+  C7E6 D9               exx
351+  C7E7 3A DF C5         ld a,(player+4)             ; get the transition count
352+  C7EA FE 00            cp 0
353+  C7EC CA F2 C7         jp z, player_justmoved2     ; if zero reset and change the frame
354+  C7EF C3 0C C8         jp player_justmoved1       ; otherwise decrease and continue
355+  C7F2              player_justmoved2:
356+  C7F2                  ; reset and change frame in here
357+  C7F2 3E 01            ld a,1
358+  C7F4 32 DF C5         ld (player+4),a            ; reset back to whatever
359+  C7F7 3A DE C5         ld a,(player+3)             ; load the frame
360+  C7FA FE 03            cp 3                       ; flip between 3 and 0
361+  C7FC C2 04 C8         jp nz, player_justmoved4
362+  C7FF 3E 00            ld a,0
363+  C801 C3 06 C8         jp player_justmoved5
364+  C804              player_justmoved4:
365+  C804 3E 03            ld a,3
366+  C806              player_justmoved5:
367+  C806 32 DE C5         ld (player+3),a           ; save back
368+  C809 C3 10 C8         jp player_justmoved3
369+  C80C              player_justmoved1:
370+  C80C                  ; decrease count
371+  C80C 3D               dec a
372+  C80D 32 DF C5         ld (player+4),a
373+  C810              player_justmoved3:
374+  C810 D9               exx;
375+  C811 C9               ret
376+  C812
377+  C812              ;
378+  C812              ; Called if the player has collected a diamond. Checks the current coord. If it is the start coord, then return complete
379+  C812              ; Outputs:
380+  C812              ; a - 1 for completed level
381+  C812              player_checkforexit:
382+  C812 ED 4B DB C5      ld bc,(player)                 ; get player coords
383+  C816 ED 5B EB 80      ld de,(init_coord)             ; get start coords
384+  C81A 78               ld a,b
385+  C81B BA               cp d                         ; compare horiz
386+  C81C C2 27 C8         jp nz,player_checkforexit1
387+  C81F 79               ld a,c
388+  C820 BB               cp e                        ; compare vert
389+  C821 C2 27 C8         jp nz,player_checkforexit1
390+  C824              player_checkforexit0:
391+  C824 3E 01            ld a,1                       ; hasn't completed
392+  C826 C9               ret
393+  C827              player_checkforexit1:
394+  C827 3E 00            ld a,0                       ; has completed
395+  C829 C9               ret
# file closed: game/player.asm
159   C82A                  include "game\ship.asm"
# file opened: game/ship.asm
  1+  C82A              ;
  2+  C82A              ; Ship initial position: vert,horiz
  3+  C82A              ;
  4+  C82A              ship_initpos:
  5+  C82A 00 24            defb 0,36
  6+  C82C              ship_initpos2:
  7+  C82C 00 00            defb 0,0
  8+  C82E              ship_frame:
  9+  C82E 00               defb 0
 10+  C82F              ;
 11+  C82F              ; The current memory location
 12+  C82F              ;
 13+  C82F              ship_current_sprite:
 14+  C82F 00 00            defb 0,0
 15+  C831
 16+  C831              ship_current_coords:
 17+  C831 00 00            defb 0,0
 18+  C833
 19+  C833              ship_process:
 20+  C833 3A E6 C5         ld a,(player+11)
 21+  C836 FE 02            cp 2                        ; has the player been killed by tank?
 22+  C838 C0               ret nz                      ; do nothing if not
 23+  C839 CD B7 C2         call control_scroll_up           ; make sure the screen is on the top screen
 24+  C83C CD B6 C8         call ship_takeoff           ; bye bye
 25+  C83F CD F8 C6         call player_killplayer      ; killed
 26+  C842 06 32            ld b,50
 27+  C844 CD 64 81         call utilities_pauseforframes
 28+  C847 C9               ret
 29+  C848
 30+  C848              ;
 31+  C848              ;   Draw and land the ship - first move the ship down, then across, drawing the player in the middle
 32+  C848              ;
 33+  C848              ship_land:
 34+  C848 ED 4B 2A C8      ld bc,(ship_initpos)
 35+  C84C ED 43 2C C8      ld (ship_initpos2),bc        ; save the initial position for later use
 36+  C850 1E 00            ld e,0                      ; store a flag to track first time round
 37+  C852 06 09            ld b,9                      ; move down 8 pixels
 38+  C854              ship_land0:
 39+  C854 C5               push bc
 40+  C855 7B               ld a,e
 41+  C856 D5               push de                     ; store de for next time round
 42+  C857 FE 01            cp 1                        ; check first time flag
 43+  C859 C2 6E C8         jp nz,ship_land1             ; don't draw over previous one if first time
 44+  C85C CD 01 C9         call ship_draw_full         ; delete old one
 45+  C85F CD E5 C8         call ship_change_frame      ; increment the frame
 46+  C862 ED 4B 2C C8      ld bc,(ship_initpos2)       ; get the current coords
 47+  C866 81 C6 01         add c,1                     ; move down one pixels
 48+  C869 4F               ld c,a
 49+  C86A ED 43 2C C8      ld (ship_initpos2),bc
 50+  C86E              ship_land1:
 51+  C86E CD 01 C9         call ship_draw_full         ; draw the ship
 52+  C871 D1               pop de
 53+  C872 7B               ld a,e
 54+  C873 FE 00            cp 0
 55+  C875 C2 7B C8         jp nz,ship_land4
 56+  C878 CD F9 B1         call sound_pitchbend        ; play sound if first frame
 57+  C87B              ship_land4:
 58+  C87B D5               push de
 59+  C87C CD FA C8         call ship_draw_screen
 60+  C87F D1               pop de
 61+  C880 1E 01            ld e,1
 62+  C882 C1               pop bc
 63+  C883 10 CF            djnz ship_land0             ; repeat for downward movement
 64+  C885                  ; done moving down
 65+  C885                  ; now move across
 66+  C885 CD 1C C7         call player_drawplayer      ; draw player
 67+  C888 CD 01 C9         call ship_draw_full         ; delete old one
 68+  C88B 1E 00            ld e,0                      ; store a flag to track first time round
 69+  C88D 06 14            ld b,20                      ; move back 20 pixels pixels
 70+  C88F              ship_land3:
 71+  C88F C5               push bc
 72+  C890 7B               ld a,e
 73+  C891 D5               push de                     ; store de for next time round
 74+  C892 FE 01            cp 1                        ; check first time flag
 75+  C894 C2 A9 C8         jp nz,ship_land2             ; don't draw over previous one if first time
 76+  C897 CD 01 C9         call ship_draw_full         ; delete old one
 77+  C89A CD E5 C8         call ship_change_frame      ; increment the frame
 78+  C89D ED 4B 2C C8      ld bc,(ship_initpos2)       ; get the current coords
 79+  C8A1 78               ld a,b
 80+  C8A2 D6 01            sub 1                       ; move back one pixels
 81+  C8A4 47               ld b,a
 82+  C8A5 ED 43 2C C8      ld (ship_initpos2),bc
 83+  C8A9              ship_land2:
 84+  C8A9 CD 01 C9         call ship_draw_full         ; draw the ship
 85+  C8AC CD FA C8         call ship_draw_screen       ; draw the frame to screen by clearing the buffer
 86+  C8AF D1               pop de
 87+  C8B0 1E 01            ld e,1                      ; set e to 1 to indicate >1 time
 88+  C8B2 C1               pop bc
 89+  C8B3 10 DA            djnz ship_land3             ; repeat for vertical movement
 90+  C8B5 C9               ret
 91+  C8B6
 92+  C8B6              ;
 93+  C8B6              ;   Take off the ship
 94+  C8B6              ;
 95+  C8B6              ship_takeoff:
 96+  C8B6 CD 0C B2         call sound_pitchbenddown
 97+  C8B9 1E 01            ld e,1                      ; store a flag to track first time round
 98+  C8BB 06 08            ld b,8                      ; move up 8 pixels
 99+  C8BD              ship_takeoff0:
100+  C8BD C5               push bc
101+  C8BE 7B               ld a,e
102+  C8BF D5               push de                     ; store de for next time round
103+  C8C0 FE 01            cp 1                        ; check first time flag
104+  C8C2 C2 D8 C8         jp nz,ship_takeoff1             ; don't draw over previous one if first time
105+  C8C5 ED 4B 2C C8      ld bc,(ship_initpos2)       ; get the current coords
106+  C8C9 CD 01 C9         call ship_draw_full         ; delete old one
107+  C8CC CD E5 C8         call ship_change_frame      ; increment the frame
108+  C8CF ED 4B 2C C8      ld bc,(ship_initpos2)       ; get the current coords
109+  C8D3 0D               dec c                       ; move up one pixels
110+  C8D4 ED 43 2C C8      ld (ship_initpos2),bc
111+  C8D8              ship_takeoff1:
112+  C8D8 CD 01 C9         call ship_draw_full         ; draw the ship
113+  C8DB CD FA C8         call ship_draw_screen
114+  C8DE D1               pop de
115+  C8DF 1E 01            ld e,1
116+  C8E1 C1               pop bc
117+  C8E2 10 D9            djnz ship_takeoff0             ; repeat for upward movement
118+  C8E4                  ; done moving up
119+  C8E4 C9               ret
120+  C8E5
121+  C8E5              ;
122+  C8E5              ; Swap the animation frame between 0 and 32. This will be added to the memory location later
123+  C8E5              ;
124+  C8E5              ship_change_frame:
125+  C8E5 F5               push af
126+  C8E6 3A 2E C8         ld a,(ship_frame)
127+  C8E9 FE 00            cp 0
128+  C8EB CA F3 C8         jp z,ship_change_frame0
129+  C8EE 3E 00            ld a,0                      ; flip to 0
130+  C8F0 C3 F5 C8         jp ship_change_frame1
131+  C8F3              ship_change_frame0:
132+  C8F3 3E 20            ld a,32                      ; flip to 32
133+  C8F5              ship_change_frame1:
134+  C8F5 32 2E C8         ld (ship_frame),a            ; save the frame
135+  C8F8 F1               pop af
136+  C8F9 C9               ret
137+  C8FA
138+  C8FA              ship_draw_screen:
139+  C8FA 76               halt
140+  C8FB F3               di
141+  C8FC CD 0B A8         call buffer_buffertoscreen  ; copy buffer to screen
142+  C8FF FB               ei                          ; enable interupts
143+  C900 C9               ret
144+  C901
145+  C901              ship_draw_full:
146+  C901 21 AC BE         ld hl,ship_sprite
147+  C904 ED 4B 2C C8      ld bc,(ship_initpos2)         ; load bc with the start coords
148+  C908 22 2F C8         ld (ship_current_sprite),hl  ; put into memory
149+  C90B ED 43 31 C8      ld (ship_current_coords),bc  ; put into memory
150+  C90F CD 2E C9         call ship_draw
151+  C912 08               ex af,af'
152+  C913 3A 2E C8         ld a,(ship_frame)            ; get the animation frame
153+  C916 16 00            ld d,0
154+  C918 5F               ld e,a
155+  C919 19               add hl,de
156+  C91A 22 2F C8         ld (ship_current_sprite),hl  ; put into memory
157+  C91D 08               ex af,af'
158+  C91E ED 4B 2C C8      ld bc,(ship_initpos2)         ; load bc with the start coords
159+  C922 81 C6 08         add c,8                      ; move one line down
160+  C925 4F               ld c,a
161+  C926 ED 43 31 C8      ld (ship_current_coords),bc  ; put into memory
162+  C92A CD 2E C9         call ship_draw
163+  C92D C9               ret
164+  C92E
165+  C92E              ;
166+  C92E              ; Draw the ship
167+  C92E              ; Inputs:
168+  C92E              ; None, all in memory
169+  C92E              ;
170+  C92E              ship_draw:
171+  C92E 3E 04            ld a,4                              ; 4 pieces per half
172+  C930              ship_draw0:
173+  C930 F5               push af
174+  C931 2A 2F C8         ld hl,(ship_current_sprite)
175+  C934 ED 4B 31 C8      ld bc,(ship_current_coords)         ; load bc with the start coords
176+  C938 CD 14 AB         call sprites_drawsprite
177+  C93B 2A 2F C8         ld hl,(ship_current_sprite)
178+  C93E ED 4B 31 C8      ld bc,(ship_current_coords)         ; load bc with the start coords
179+  C942 11 08 00         ld de,8
180+  C945 19               add hl,de
181+  C946 80 C6 08         add b,8
182+  C949 47               ld b,a
183+  C94A 22 2F C8         ld (ship_current_sprite),hl         ; put into memory
184+  C94D ED 43 31 C8      ld (ship_current_coords),bc         ; put into memory
185+  C951 F1               pop af
186+  C952 3D               dec a
187+  C953 FE 00            cp 0
188+  C955 C2 30 C9         jp nz,ship_draw0
189+  C958
190+  C958 C9               ret
191+  C959
# file closed: game/ship.asm
160   C959                  include "game\tank.asm"
# file opened: game/tank.asm
  1+  C959              ;
  2+  C959              ; tank initial position: vert,horiz
  3+  C959              ;
  4+  C959              tank_initpos:
  5+  C959 10 D0            defb 16,208
  6+  C95B              tank_initpos2:
  7+  C95B 00 00            defb 0,0
  8+  C95D              tank_frame:
  9+  C95D 00               defb 0
 10+  C95E              tank_anim:
 11+  C95E 11               defb 17
 12+  C95F
 13+  C95F              ;
 14+  C95F              ; The damage countdown
 15+  C95F              ;
 16+  C95F              tank_currentdamage:
 17+  C95F F0               defb 240
 18+  C960
 19+  C960              ;
 20+  C960              ; The damage coordinate
 21+  C960              ;
 22+  C960              tank_currentdamagecoord:
 23+  C960 16 02            defb 22,2
 24+  C962
 25+  C962              ;
 26+  C962              ; Controls when the tank shoots
 27+  C962              ;
 28+  C962              tank_count:
 29+  C962 00               defb 0
 30+  C963
 31+  C963              ;
 32+  C963              ; Holds the block number of the current damage sprite
 33+  C963              ;
 34+  C963              tank_damageframe:
 35+  C963 00               defb 0
 36+  C964
 37+  C964              ;
 38+  C964              ; The current memory location
 39+  C964              ;
 40+  C964              tank_current_sprite:
 41+  C964 00 00            defb 0,0
 42+  C966
 43+  C966              tank_current_coords:
 44+  C966 00 00            defb 0,0
 45+  C968
 46+  C968              ;
 47+  C968              ; Is the missile displayed - will be 19 if so, 0 if not
 48+  C968              ;
 49+  C968              tank_missile_displayed:
 50+  C968 00               defb 0
 51+  C969
 52+  C969              ;
 53+  C969              ; Speed that the tank fires
 54+  C969              ;
 55+  C969              tank_speed:
 56+  C969 00               defb 0
 57+  C96A
 58+  C96A              ;
 59+  C96A              ; Initialise the tank
 60+  C96A              ;
 61+  C96A              tank_init:
 62+  C96A ED 4B 59 C9      ld bc,(tank_initpos)
 63+  C96E ED 43 5B C9      ld (tank_initpos2),bc       ; save the initial position for later use
 64+  C972 21 5D C9         ld hl,tank_frame
 65+  C975 36 00            ld (hl),0
 66+  C977 21 5E C9         ld hl,tank_anim
 67+  C97A 36 11            ld (hl),17
 68+  C97C 21 63 C9         ld hl,tank_damageframe              ; reset tank
 69+  C97F 36 00            ld (hl),0
 70+  C981 21 62 C9         ld hl,tank_count
 71+  C984 36 00            ld (hl),0
 72+  C986 21 5F C9         ld hl,tank_currentdamage
 73+  C989 36 F0            ld (hl),240
 74+  C98B 21 60 C9         ld hl,tank_currentdamagecoord
 75+  C98E 36 16            ld (hl),22
 76+  C990 23               inc hl
 77+  C991 36 02            ld (hl),2
 78+  C993 21 68 C9         ld hl,tank_missile_displayed
 79+  C996 36 00            ld (hl),0
 80+  C998
 81+  C998 C9               ret
 82+  C999
 83+  C999              ;
 84+  C999              ;   Draw and move the tank
 85+  C999              ;   Start processing at frame 200
 86+  C999              ;   Don't move if anim is zero
 87+  C999              ;   Decrement frame if moved
 88+  C999              ;
 89+  C999              tank_process:
 90+  C999 3A 5E C9         ld a,(tank_anim)
 91+  C99C FE 00            cp 0
 92+  C99E C2 A5 C9         jp nz,tank_process0         ; fire the tank if we've already moved, or jump to movement
 93+  C9A1 CD B6 C9         call tank_fire
 94+  C9A4 C9               ret
 95+  C9A5              tank_process0:
 96+  C9A5 CD 85 C5         call game_getcurrentframe   ; get the current frame number into a
 97+  C9A8 FE 4B            cp 75
 98+  C9AA D8               ret c                       ; return if the frame number is below 100
 99+  C9AB CD F0 CA         call tank_move              ; move tank if not
100+  C9AE 3A 5E C9         ld a,(tank_anim)
101+  C9B1 3D               dec a
102+  C9B2 32 5E C9         ld (tank_anim),a            ; decrease the anim count
103+  C9B5 C9               ret
104+  C9B6
105+  C9B6              ;
106+  C9B6              ; Fires the tank
107+  C9B6              ;
108+  C9B6              tank_fire:
109+  C9B6 3A 62 C9         ld a,(tank_count)            ; if not, don't do anything
110+  C9B9 3C               inc a                        ; increment
111+  C9BA ED 5B 69 C9      ld de,(tank_speed)
112+  C9BE BB               cp e                        ; have we reached the speed
113+  C9BF C2 C4 C9         jp nz,tank_fire0
114+  C9C2 3E 00            ld a,0                       ; reset if reached fifty
115+  C9C4              tank_fire0:                      ; DEALING WITH A NEW BLOCK
116+  C9C4 32 62 C9         ld (tank_count),a            ; store tank count
117+  C9C7 FE 00            cp 0
118+  C9C9 CA EA C9         jp z,tank_fire7              ; If this is zero, fire
119+  C9CC 3A 68 C9         ld a,(tank_missile_displayed) ; is the missile displaying?
120+  C9CF FE 00            cp 0
121+  C9D1 C8               ret z                       ; don't do anything if not
122+  C9D2 CD AA CA         call tank_missilegraphic     ; if not, overwrite the previous tank missile
123+  C9D5 3E 00            ld a,0                       ; reset the flag
124+  C9D7 32 68 C9         ld (tank_missile_displayed),a
125+  C9DA 3E 02            ld a,2
126+  C9DC ED 4B 60 C9      ld bc,(tank_currentdamagecoord)
127+  C9E0 0C               inc c
128+  C9E1 0C               inc c
129+  C9E2 ED 43 2B AC      ld (origcoords),bc
130+  C9E6 CD 30 A7         call buffer_marklineforupdate
131+  C9E9 C9               ret                        ; only shoot if we're on 0
132+  C9EA              tank_fire7:
133+  C9EA 3A 5F C9         ld a,(tank_currentdamage)    ; get the damage countdown
134+  C9ED E6 07            and 7                       ; check if multiple of 8 - house keeping when moving onto a new block
135+  C9EF C2 25 CA         jp nz,tank_fire1            ; not, so just do a normal frame
136+  C9F2 ED 4B 60 C9      ld bc,(tank_currentdamagecoord) ; get the current damage coord into bc
137+  C9F6 79               ld a,c
138+  C9F7 FE 0A            cp 10
139+  C9F9 C2 00 CA         jp nz, tank_fire6
140+  C9FC CD E2 CA         call tank_killedbytank      ; we're through, so the player has died. Kill them.
141+  C9FF C9               ret                         ; return if we're through the mountain
142+  CA00              tank_fire6:
143+  CA00 3E 0F            ld a,15
144+  CA02 32 63 C9         ld (tank_damageframe),a     ; reset the damage frame
145+  CA05 21 40 BD         ld hl,sprites               ; location of the empty block
146+  CA08 CD 6C AA         call screen_showchar        ; show this character here
147+  CA0B ED 4B 60 C9      ld bc,(tank_currentdamagecoord) ; get the current damage coord into bc
148+  CA0F 05               dec b                       ; look one above
149+  CA10 CD D0 AA         call screen_ischarempty     ; check if it is empty
150+  CA13 ED 4B 60 C9      ld bc,(tank_currentdamagecoord) ; get the current damage coord into bc again
151+  CA17 FE 01            cp 1
152+  CA19 C2 5C CA         jp nz,tank_fire2             ; block above isn't empty, so can't move on, copy down above blocks
153+  CA1C ED 4B 60 C9      ld bc,(tank_currentdamagecoord) ; get the current damage coord into bc
154+  CA20 0D               dec c
155+  CA21 ED 43 60 C9      ld (tank_currentdamagecoord),bc ; store the coord
156+  CA25              tank_fire1:                         ; DEALING WITH NORMAL DAMAGE
157+  CA25 ED 4B 60 C9      ld bc,(tank_currentdamagecoord) ; get the current damage coord into bc
158+  CA29 3A 5F C9         ld a,(tank_currentdamage)    ; get the damage countdown
159+  CA2C E6 07            and 7                       ; is it a multiple of 8? only want to do the first line check then
160+  CA2E C2 39 CA         jp nz, tank_fire5
161+  CA31 CD 00 AB         call screen_getcharfirstbyte    ; get the first byte to check if this is a slope
162+  CA34 FE FF            cp 255                      ; if it's a full line, it will be 255 and not a slope
163+  CA36 C2 7A CA         jp nz,tank_fire3            ; if it's a slope, handle this differently
164+  CA39              tank_fire5:
165+  CA39 3A 63 C9         ld a,(tank_damageframe)
166+  CA3C CD 8F AA         call screen_getblock        ; get the block data into hl
167+  CA3F CD 6C AA         call screen_showchar        ; show this character here
168+  CA42 3A 63 C9         ld a,(tank_damageframe)
169+  CA45 3C               inc a
170+  CA46 32 63 C9         ld (tank_damageframe),a     ; increment the damage block and store
171+  CA49 3A 5F C9         ld a,(tank_currentdamage)    ; get the damage countdown
172+  CA4C 3D               dec a
173+  CA4D 3D               dec a
174+  CA4E 32 5F C9         ld (tank_currentdamage),a     ; decrease current damage by 2 and store
175+  CA51 3A 68 C9         ld a,(tank_missile_displayed) ; is the missile displaying?
176+  CA54 FE 00            cp 0
177+  CA56 CC AA CA         call z, tank_missilegraphic
178+  CA59 C3 83 CA         jp tank_fire4
179+  CA5C              tank_fire2:                     ; DEALING WITH COPYING BLOCKS FROM ABOVE
180+  CA5C 05               dec b
181+  CA5D C5               push bc
182+  CA5E CD E9 AA         call screen_copyblockdown       ; copy the block down
183+  CA61 ED 4B 60 C9      ld bc,(tank_currentdamagecoord) ; get the current damage coord into bc
184+  CA65 C1               pop bc                      ; get the coord we just checked back
185+  CA66 78               ld a,b
186+  CA67 FE 00            cp 0
187+  CA69 CA 25 CA         jp z,tank_fire1             ; if we're at the top of the screen, don't check any more
188+  CA6C C5               push bc
189+  CA6D 05               dec b
190+  CA6E CD D0 AA         call screen_ischarempty     ; check if it is empty
191+  CA71 C1               pop bc
192+  CA72 FE 01            cp 1                        ; if empty
193+  CA74 C2 5C CA         jp nz, tank_fire2            ; copy another one down
194+  CA77 C3 25 CA         jp tank_fire1               ; otherwise, return to main thread
195+  CA7A              tank_fire3:                      ; dealing with slopes
196+  CA7A 3A 5F C9         ld a,(tank_currentdamage)    ; get the damage countdown
197+  CA7D 06 08            ld b,8
198+  CA7F 90               sub b                        ; special case for slopes
199+  CA80 32 5F C9         ld (tank_currentdamage),a    ; decrease the damage countdown by 8, so that next time, we get rid of this block without eroding it
200+  CA83              tank_fire4:                     ; TIDY UP
201+  CA83 ED 4B 60 C9      ld bc,(tank_currentdamagecoord)
202+  CA87 ED 43 2B AC      ld (origcoords),bc
203+  CA8B CD 30 A7         call buffer_marklineforupdate
204+  CA8E 3E 01            ld a,1
205+  CA90 CD 30 A7         call buffer_marklineforupdate
206+  CA93 3E 02            ld a,2
207+  CA95 CD 30 A7         call buffer_marklineforupdate
208+  CA98 ED 4B 60 C9      ld bc,(tank_currentdamagecoord) ; get the current damage coord into bc
209+  CA9C 79               ld a,c
210+  CA9D FE 0D            cp 13
211+  CA9F DA A6 CA         jp c, tank_fire8                ; play alarm instead if getting close
212+  CAA2 CD 50 B2         call sound_tankshoot
213+  CAA5 C9               ret
214+  CAA6              tank_fire8:
215+  CAA6 CD C2 B1         call sound_tankalarm
216+  CAA9 C9               ret
217+  CAAA
218+  CAAA              ;
219+  CAAA              ; Displays or hides the missile graphic, and changes the gun
220+  CAAA              ;
221+  CAAA              tank_missilegraphic:
222+  CAAA 3A 68 C9         ld a,(tank_missile_displayed)
223+  CAAD FE 00            cp 0
224+  CAAF C2 B7 CA         jp nz,tank_missilegraphic0
225+  CAB2 3E 13            ld a,19
226+  CAB4 C3 B9 CA         jp tank_missilegraphic1
227+  CAB7              tank_missilegraphic0:
228+  CAB7 3E 00            ld a,0
229+  CAB9              tank_missilegraphic1:
230+  CAB9 32 68 C9         ld (tank_missile_displayed),a ; store the flipped graphic
231+  CABC ED 4B 60 C9      ld bc,(tank_currentdamagecoord)
232+  CAC0 0C               inc c
233+  CAC1 0C               inc c                   ; print the graphic 2 spaces right
234+  CAC2 CD 8F AA         call screen_getblock        ; get the block data into hl
235+  CAC5 CD 6C AA         call screen_showchar        ; show this character here
236+  CAC8 06 02            ld b,2
237+  CACA 0E 18            ld c,24                     ; set gunbarrel coords
238+  CACC 11 00 00         ld de,0
239+  CACF 21 0C BF         ld hl,tank_sprite           ; set hl to gunbarrel gfx, shooting is +64
240+  CAD2 3A 68 C9         ld a,(tank_missile_displayed)
241+  CAD5 FE 00            cp 0
242+  CAD7 CA DD CA         jp z,tank_missilegraphic2
243+  CADA 11 40 00         ld de,64
244+  CADD              tank_missilegraphic2:
245+  CADD 19               add hl,de                   ; work out missile graphic
246+  CADE CD 6C AA         call screen_showchar        ; show this character here
247+  CAE1 C9               ret
248+  CAE2
249+  CAE2              ;
250+  CAE2              ; Deal with the player being killed by the tank
251+  CAE2              ;
252+  CAE2              tank_killedbytank:
253+  CAE2 ED 4B 60 C9      ld bc,(tank_currentdamagecoord) ; get the current damage coord into bc
254+  CAE6 21 40 BD         ld hl,sprites                   ; empty sprite
255+  CAE9 CD 6C AA         call screen_showchar            ; hide the last piece of dirt
256+  CAEC CD 04 C7         call player_tankkillplayer
257+  CAEF C9               ret
258+  CAF0
259+  CAF0              tank_move:
260+  CAF0 ED 4B 5B C9      ld bc,(tank_initpos2)
261+  CAF4 C5               push bc
262+  CAF5 3A 5E C9         ld a,(tank_anim)
263+  CAF8 FE 11            cp 17                       ; check first time flag
264+  CAFA CA 0C CB         jp z,tank_move1             ; don't draw over previous one if first time
265+  CAFD CD 11 CB         call tank_draw_full         ; delete old one
266+  CB00 ED 4B 5B C9      ld bc,(tank_initpos2)       ; get the current coords
267+  CB04 78               ld a,b
268+  CB05 D6 01            sub 1                       ; move back one pixels
269+  CB07 47               ld b,a
270+  CB08 ED 43 5B C9      ld (tank_initpos2),bc
271+  CB0C              tank_move1:
272+  CB0C CD 11 CB         call tank_draw_full         ; draw the tank
273+  CB0F C1               pop bc
274+  CB10 C9               ret
275+  CB11
276+  CB11              tank_draw_full:
277+  CB11 21 0C BF         ld hl,tank_sprite
278+  CB14 ED 4B 5B C9      ld bc,(tank_initpos2)         ; load bc with the start coords
279+  CB18 22 64 C9         ld (tank_current_sprite),hl  ; put into memory
280+  CB1B ED 43 66 C9      ld (tank_current_coords),bc  ; put into memory
281+  CB1F CD 3E CB         call tank_draw
282+  CB22 08               ex af,af'
283+  CB23 3A 5D C9         ld a,(tank_frame)            ; get the animation frame
284+  CB26 16 00            ld d,0
285+  CB28 5F               ld e,a
286+  CB29 19               add hl,de
287+  CB2A 22 64 C9         ld (tank_current_sprite),hl  ; put into memory
288+  CB2D 08               ex af,af'
289+  CB2E ED 4B 5B C9      ld bc,(tank_initpos2)         ; load bc with the start coords
290+  CB32 81 C6 08         add c,8                      ; move one line down
291+  CB35 4F               ld c,a
292+  CB36 ED 43 66 C9      ld (tank_current_coords),bc  ; put into memory
293+  CB3A CD 3E CB         call tank_draw
294+  CB3D C9               ret
295+  CB3E
296+  CB3E              ;
297+  CB3E              ; Draw the tank
298+  CB3E              ; Inputs:
299+  CB3E              ; None, all in memory
300+  CB3E              ;
301+  CB3E              tank_draw:
302+  CB3E 3E 04            ld a,4                              ; 4 pieces per half
303+  CB40              tank_draw0:
304+  CB40 F5               push af
305+  CB41 2A 64 C9         ld hl,(tank_current_sprite)
306+  CB44 ED 4B 66 C9      ld bc,(tank_current_coords)         ; load bc with the start coords
307+  CB48 CD 14 AB         call sprites_drawsprite
308+  CB4B 2A 64 C9         ld hl,(tank_current_sprite)
309+  CB4E ED 4B 66 C9      ld bc,(tank_current_coords)         ; load bc with the start coords
310+  CB52 11 08 00         ld de,8
311+  CB55 19               add hl,de
312+  CB56 80 C6 08         add b,8
313+  CB59 47               ld b,a
314+  CB5A 22 64 C9         ld (tank_current_sprite),hl         ; put into memory
315+  CB5D ED 43 66 C9      ld (tank_current_coords),bc         ; put into memory
316+  CB61 F1               pop af
317+  CB62 3D               dec a
318+  CB63 FE 00            cp 0
319+  CB65 C2 40 CB         jp nz,tank_draw0
320+  CB68
321+  CB68 C9               ret
322+  CB69
# file closed: game/tank.asm
161   CB69                  include "game\rocks.asm"
# file opened: game/rocks.asm
  1+  CB69              ;
  2+  CB69              ; A structure of falling rocks
  3+  CB69              ; Assume we'll never have more than 4 falling at any one time
  4+  CB69              ; (1,2 - 16 bit memory location for rock graphic),state (0 fell, 1 falling, 2 wobbling), countdown
  5+  CB69              ;
  6+  CB69              rocks_falling:
  7+  CB69 00 00 00 00      defb 0,0,0,0
  8+  CB6D 00 00 00 00      defb 0,0,0,0
  9+  CB71 00 00 00 00      defb 0,0,0,0
 10+  CB75 00 00 00 00      defb 0,0,0,0
 11+  CB79
 12+  CB79              rocks_tmp:
 13+  CB79 00               defb 0
 14+  CB7A
 15+  CB7A              rocks_tmp2:
 16+  CB7A 00 00            defb 0,0
 17+  CB7C
 18+  CB7C              ;
 19+  CB7C              ; The number of frames to wobble for
 20+  CB7C              ; Must always be 10 more than the number of frames a player digs
 21+  CB7C              ;
 22+  CB7C              rocks_numberofframestowobble:
 23+  CB7C 14               defb 20
 24+  CB7D
 25+  CB7D              ;
 26+  CB7D              ; Coords of the rock that killed us
 27+  CB7D              ;
 28+  CB7D              rocks_killerrock:
 29+  CB7D 00 00            defb 0,0
 30+  CB7F
 31+  CB7F              ;
 32+  CB7F              ; Checks for a rock that needs to start falling. Takes a memory location of the first line at the bottom of the space.
 33+  CB7F              ; Checks to see if the pixel row in that location is a rock bottom. If it is, mark this rock as ready to fall.
 34+  CB7F              ; If the pixel row is not the rock bottom, stop checking.
 35+  CB7F              ; Inputs:
 36+  CB7F              ; hl- memory location
 37+  CB7F              ;
 38+  CB7F              rocks_checkforfalling:
 39+  CB7F 7E               ld a,(hl)           ; get the pixel row in this memory location
 40+  CB80 FE 7E            cp 126              ; check against the bottom pixel row of the rock graphic
 41+  CB82 C2 88 CB         jp nz,rocks_checkforfalling2 ; not a rock, stop
 42+  CB85 CD 89 CB         call rocks_addrocktofalling ; mark the rock as falling
 43+  CB88              rocks_checkforfalling2:
 44+  CB88 C9               ret
 45+  CB89
 46+  CB89              ;
 47+  CB89              ; Adds the rock to the structure that tracks falling rocks
 48+  CB89              ; Inputs:
 49+  CB89              ; hl - memory location of falling rock graphic
 50+  CB89              ; bc - coords of rock, c vert
 51+  CB89              rocks_addrocktofalling:
 52+  CB89 C5               push bc             ; store the coords
 53+  CB8A 11 69 CB         ld de,rocks_falling
 54+  CB8D 06 04            ld b,4              ; number of possible falling rocks
 55+  CB8F              rocks_addrocktofalling0:
 56+  CB8F 13               inc de
 57+  CB90                  ;inc de
 58+  CB90 13               inc de              ; move three along to get the state
 59+  CB91 1A               ld a,(de)           ; load the state
 60+  CB92 FE 00            cp 0                ; check if this is not falling
 61+  CB94 C2 AB CB         jp nz,rocks_addrocktofalling1 ; continue the loop if not 0
 62+  CB97 13               inc de              ; move to frame
 63+  CB98 3A 7C CB         ld a,(rocks_numberofframestowobble) ; load the number of frames to wobble
 64+  CB9B 12               ld (de),a
 65+  CB9C 1B               dec de              ; move de back to state
 66+  CB9D 3E 02            ld a,2
 67+  CB9F 12               ld (de),a           ; set the state to wobbling
 68+  CBA0 1B               dec de              ; move back coords
 69+  CBA1 C1               pop bc              ; get back coords
 70+  CBA2 78               ld a,b
 71+  CBA3 12               ld (de),a           ; store the vertical
 72+  CBA4 1B               dec de
 73+  CBA5 79               ld a,c
 74+  CBA6 12               ld (de),a           ; store the horizontal
 75+  CBA7 C5               push bc
 76+  CBA8 C3 AF CB         jp rocks_addrocktofalling2 ; done
 77+  CBAB              rocks_addrocktofalling1:
 78+  CBAB 13               inc de
 79+  CBAC 13               inc de              ; move memory along to next rock
 80+  CBAD 10 E0            djnz rocks_addrocktofalling0 ; try the next rock
 81+  CBAF              rocks_addrocktofalling2: ; done, return
 82+  CBAF C1               pop bc              ; to tidy up
 83+  CBB0 C9               ret
 84+  CBB1
 85+  CBB1              ;
 86+  CBB1              ; Processes any falling rocks
 87+  CBB1              ;
 88+  CBB1              rocks_processrocks:
 89+  CBB1 DD 21 69 CB      ld ix,rocks_falling
 90+  CBB5 06 04            ld b,4              ; the number of rocks to check
 91+  CBB7              rocks_processrocks0:
 92+  CBB7 C5               push bc             ; store loop count
 93+  CBB8 DD 4E 00 DD      ld bc,(ix)          ; load the coords for this rock into bc
 93+  CBBC 46 01
 94+  CBBE DD 23            inc ix
 95+  CBC0 DD 23            inc ix              ; move to the state
 96+  CBC2 DD 7E 00         ld a,(ix)           ; load the state into a
 97+  CBC5 FE 00            cp 0
 98+  CBC7 CA E8 CB         jp z,rocks_processrocks3 ; if not falling, check next
 99+  CBCA FE 02            cp 2
100+  CBCC C2 DC CB         jp nz, rocks_processrocks2
101+  CBCF                  ; we're wobbling
102+  CBCF DD 23            inc ix              ; get frame number for wobble
103+  CBD1 DD 7E 00         ld a,(ix)           ; get wobble frame into a
104+  CBD4 CD AB CC         call rocks_wobble
105+  CBD7 DD 23            inc ix              ; increment for next
106+  CBD9 C3 EC CB         jp rocks_processrocks1  ; do next rock
107+  CBDC              rocks_processrocks2:
108+  CBDC                  ; we're falling
109+  CBDC C5               push bc
110+  CBDD CD F0 CB         call rocks_fall
111+  CBE0 C1               pop bc
112+  CBE1 DD 23            inc ix
113+  CBE3 DD 23            inc ix              ; inc ix to get to next
114+  CBE5 C3 EC CB         jp rocks_processrocks1
115+  CBE8              rocks_processrocks3:
116+  CBE8 DD 23            inc ix
117+  CBEA DD 23            inc ix
118+  CBEC              rocks_processrocks1:
119+  CBEC C1               pop bc              ; get loop count back
120+  CBED 10 C8            djnz rocks_processrocks0
121+  CBEF C9               ret
122+  CBF0
123+  CBF0              ;
124+  CBF0              ; Falls a rock one pixel, checks the next square down to see if it is empty, if not, stop falling
125+  CBF0              ; bc - coord of current rock graphic on screen
126+  CBF0              ; ix - memory location of current rock in rock list, currently at the 3rd position (rock state)
127+  CBF0              ;
128+  CBF0              rocks_fall:
129+  CBF0 DD 2B            dec ix
130+  CBF2 DD 2B            dec ix              ; decrease ix back to coords
131+  CBF4 ED 43 7A CB      ld (rocks_tmp2),bc  ; store original coords
132+  CBF8 3E 03            ld a,3              ; move this number of pixels
133+  CBFA              rocks_fall1:
134+  CBFA 32 79 CB         ld (rocks_tmp),a    ; store loop counter
135+  CBFD DD 4E 00 DD      ld bc,(ix)          ; get current coords
135+  CC01 46 01
136+  CC03 CD 09 AC         call sprites_scadd  ; get the memory of the coords into de
137+  CC06 14               inc d               ; add 256 to get next row
138+  CC07 1A               ld a,(de)           ; get the contents of the next row
139+  CC08 FE 00            cp 0
140+  CC0A C2 6A CC         jp nz,rocks_fall3    ; move the rock if the row is empty
141+  CC0D 0C               inc c               ; increment the vertical
142+  CC0E DD 71 00 DD      ld (ix),bc          ; store the new coords
142+  CC12 70 01
143+  CC14 79               ld a,c              ; get the vertical coord into a
144+  CC15 E6 07            and 7               ; divisible by 8?
145+  CC17 FE 00            cp 0
146+  CC19 C2 36 CC         jp nz,rocks_fall4   ; if not, carry on
147+  CC1C CD 42 AA         call screen_getcharcoordsfromscreencoords ; get the char coords into bc
148+  CC1F 3E 42            ld a,66             ; load red
149+  CC21 CD 9A AA         call screen_setattr
150+  CC24 DD 4E 00 DD      ld bc,(ix)
150+  CC28 46 01
151+  CC2A 79               ld a,c              ; get vertical
152+  CC2B D6 08            sub 8               ; look up one square
153+  CC2D 4F               ld c,a              ; put a back in c
154+  CC2E CD 42 AA         call screen_getcharcoordsfromscreencoords ; get the char coords into bc
155+  CC31 3E 46            ld a,70             ; load yellow
156+  CC33 CD 9A AA         call screen_setattr
157+  CC36              rocks_fall4:
158+  CC36 3A 79 CB         ld a,(rocks_tmp)    ; get the loop counter
159+  CC39 3D               dec a
160+  CC3A FE 00            cp 0
161+  CC3C C2 FA CB         jp nz,rocks_fall1   ; do another pixel if needed
162+  CC3F              rocks_fall2:
163+  CC3F 3E 09            ld a,9              ; rock graphic
164+  CC41 ED 4B 7A CB      ld bc,(rocks_tmp2)  ; get the original coords
165+  CC45 CD 8F AA         call screen_getblock     ; get the memory into hl
166+  CC48 CD 14 AB         call sprites_drawsprite  ; draw the sprite - over the top of the current one
167+  CC4B 3E 09            ld a,9
168+  CC4D DD 4E 00 DD      ld bc,(ix)          ; get the new coords
168+  CC51 46 01
169+  CC53 CD 8F AA         call screen_getblock     ; get the memory into hl
170+  CC56 CD 14 AB         call sprites_drawsprite  ; draw the sprite - over the top of the current one
171+  CC59 DD 4E 00 DD      ld bc,(ix)          ; get the coords again
171+  CC5D 46 01
172+  CC5F CD 90 CC         call rocks_checkforplayer ; check to see if we hit a player
173+  CC62 DD 23            inc ix
174+  CC64 DD 23            inc ix                  ; get ix back to state
175+  CC66 CD 80 CC         call rocks_makesound
176+  CC69 C9               ret
177+  CC6A              rocks_fall3:
178+  CC6A 3E 00            ld a,0              ; set the state to fell
179+  CC6C DD 77 02         ld (ix+2),a           ; store the falling state
180+  CC6F DD 4E 00 DD      ld bc,(ix)          ; get the coords
180+  CC73 46 01
181+  CC75 CD 42 AA         call screen_getcharcoordsfromscreencoords ; get the char coords into bc
182+  CC78 3E 42            ld a,66             ; load magenta
183+  CC7A CD 9A AA         call screen_setattr
184+  CC7D C3 3F CC         jp rocks_fall2      ; rejoin main loop
185+  CC80
186+  CC80              ;
187+  CC80              ; Makes the rock sound if we're no longer falling, and if we didn't hit a player
188+  CC80              ;
189+  CC80              rocks_makesound:
190+  CC80 DD 7E 00         ld a,(ix)           ; get the state
191+  CC83 FE 00            cp 0
192+  CC85 C0               ret nz              ; if we haven't fallen, don't do anything
193+  CC86 21 E6 C5         ld hl,player+11
194+  CC89 7E               ld a,(hl)
195+  CC8A FE 01            cp 1
196+  CC8C C4 1F B2         call nz, sound_rockfell ; only make sound if didn't kill player
197+  CC8F C9               ret
198+  CC90
199+  CC90              ;
200+  CC90              ; Checks to see if the rock is hitting a player
201+  CC90              ; Inputs:
202+  CC90              ; bc - coords of rock we're checking
203+  CC90              rocks_checkforplayer:
204+  CC90 ED 5B DB C5      ld de,(player)       ; get the player coords
205+  CC94 7B               ld a,e               ; get the vert coord first
206+  CC95 91               sub c                ; subtract the rock vertical coord from players
207+  CC96 FE 08            cp 8                 ; the rock will only hit a player if the player is directly underneath, so this must be 8
208+  CC98 C0               ret nz               ; if not, hasn't hit
209+  CC99 7A               ld a,d               ; get the player horiz coord
210+  CC9A 90               sub b                ; subtract rock coord
211+  CC9B C6 07            add 7                ; add max distance
212+  CC9D FE 0D            cp 13                ; compare to 13? if carry flag set, they've hit
213+  CC9F DA A3 CC         jp c,rocks_checkforplayer0
214+  CCA2 C9               ret
215+  CCA3              rocks_checkforplayer0:
216+  CCA3 ED 43 7D CB      ld (rocks_killerrock),bc; store the coords of the killer rock
217+  CCA7 CD FE C6         call player_crushplayer ; if so, jump out
218+  CCAA C9               ret
219+  CCAB
220+  CCAB              ;
221+  CCAB              ; Wobbles a rocks
222+  CCAB              ; Inputs:
223+  CCAB              ; bc - coord of current rock graphic on screen
224+  CCAB              ; ix - memory location of current rock in rock list, currently at the 4th position (wobble count)
225+  CCAB              ; a - wobble frame
226+  CCAB              rocks_wobble:
227+  CCAB DD 7E 00         ld a,(ix)           ; get the wobble count, which we'll use as frame toggle
228+  CCAE E6 01            and 1               ; is it odd or even, gets 1 or 0
229+  CCB0 1E 09            ld e,9              ; this is the rock frame
230+  CCB2 83               add a,e             ; add the frame toggle
231+  CCB3 C5               push bc
232+  CCB4 CD 8F AA         call screen_getblock     ; get the memory into hl
233+  CCB7 CD 14 AB         call sprites_drawsprite  ; draw the sprite - over the top of the current one
234+  CCBA DD 7E 00         ld a,(ix)           ; get the frame toggle again
235+  CCBD 3D               dec a               ; decrease
236+  CCBE DD 77 00         ld (ix),a           ; store
237+  CCC1 E6 01            and 1
238+  CCC3 1E 09            ld e,9              ; this is the rock frame
239+  CCC5 83               add a,e             ; add the frame toggle
240+  CCC6 CD 8F AA         call screen_getblock     ; get the memory into hl
241+  CCC9 C1               pop bc
242+  CCCA CD 14 AB         call sprites_drawsprite  ; draw the sprite again with the new frame - next time it will do the opposite
243+  CCCD DD 7E 00         ld a,(ix)           ; get the wobble count back
244+  CCD0 FE 00            cp 0
245+  CCD2 C0               ret nz              ; if we're not at zero, return
246+  CCD3 DD 2B            dec ix              ; otherwise look to state location
247+  CCD5 3E 01            ld a,1              ; set the state to falling
248+  CCD7 DD 77 00         ld (ix),a           ; store the falling state
249+  CCDA DD 23            inc ix              ; set ix back to location of wobble count, and we're done
250+  CCDC C9               ret
251+  CCDD
# file closed: game/rocks.asm
162   CCDD                  include "game\scores.asm"
# file opened: game/scores.asm
  1+  CCDD              ;
  2+  CCDD              ; The score of the current player
  3+  CCDD              ;
  4+  CCDD              scores_current:
  5+  CCDD 04 01 30 30      defb 4,1,'000000',255       ;+2
  5+  CCE1 30 30 30 30
  5+  CCE5 FF
  6+  CCE6
  7+  CCE6              scores_defaultname:
  8+  CCE6 2D 2D 2D         defb '---'
  9+  CCE9
 10+  CCE9              ;
 11+  CCE9              ; The current high score table
 12+  CCE9              ;
 13+  CCE9              scores_table:
 14+  CCE9 03 17 47 41      defb 03,23,'GAM000000',255         ;+0, +2, +5
 14+  CCED 4D 30 30 30
 14+  CCF1 30 30 30 FF
 15+  CCF5 0C 17 47 41      defb 12,23,'GAM000000',255        ;+12, +14, +17
 15+  CCF9 4D 30 30 30
 15+  CCFD 30 30 30 FF
 16+  CD01 15 17 47 41      defb 21,23,'GAM000000',255        ;+24, +26, +29
 16+  CD05 4D 30 30 30
 16+  CD09 30 30 30 FF
 17+  CD0D
 18+  CD0D              ;
 19+  CD0D              ; Add thousands to the score
 20+  CD0D              ; Inputs:
 21+  CD0D              ; b - number to add
 22+  CD0D              ;
 23+  CD0D              scores_addthousands:
 24+  CD0D 21 E1 CC         ld hl,scores_current+4
 25+  CD10 CD 71 CD         call scores_update
 26+  CD13 C9               ret
 27+  CD14
 28+  CD14              ;
 29+  CD14              ; Add hundreds to the score
 30+  CD14              ; Inputs:
 31+  CD14              ; b - number to add
 32+  CD14              ;
 33+  CD14              scores_addhundreds:
 34+  CD14 21 E2 CC         ld hl,scores_current+5
 35+  CD17 CD 71 CD         call scores_update
 36+  CD1A C9               ret
 37+  CD1B
 38+  CD1B              ;
 39+  CD1B              ; Temporary area for printing scores
 40+  CD1B              ;
 41+  CD1B              scores_printscore_tmp:
 42+  CD1B 00 00 00 00      defb 0,0,0,0,0,0,0,0,255
 42+  CD1F 00 00 00 00
 42+  CD23 FF
 43+  CD24
 44+  CD24              ;
 45+  CD24              ; Prints the score to screen
 46+  CD24              ;
 47+  CD24              scores_printscore:
 48+  CD24 3A EC C4         ld a,(game_currentplayer)   ; get current player
 49+  CD27 21 DD CC         ld hl,scores_current
 50+  CD2A FE 01            cp 1
 51+  CD2C C2 34 CD         jp nz, score_printscore0    ; if not player 1
 52+  CD2F 36 04            ld (hl),4       ; set position for player 1
 53+  CD31 C3 36 CD         jp score_printscore1
 54+  CD34              score_printscore0:
 55+  CD34 36 16            ld (hl),22       ; set position for player 2
 56+  CD36              score_printscore1:
 57+  CD36 CD 3A CD         call score_printscoreformatted
 58+  CD39 C9               ret
 59+  CD3A
 60+  CD3A              ;
 61+  CD3A              ; Formats a score and prints to the top screen
 62+  CD3A              ; Inputs:
 63+  CD3A              ; hl - where is the score
 64+  CD3A              score_printscoreformatted:
 65+  CD3A 01 08 00         ld bc,8
 66+  CD3D 11 1B CD         ld de,scores_printscore_tmp
 67+  CD40 ED B0            ldir                        ; copy to temp
 68+  CD42 21 1B CD         ld hl,scores_printscore_tmp
 69+  CD45 E5 DD E1         ld ix,hl
 70+  CD48 DD 7E 02         ld a,(ix+2)
 71+  CD4B FE 30            cp 48                   ; is it a leading zero?
 72+  CD4D C2 60 CD         jp nz,score_printscore2
 73+  CD50 DD 36 02 20      ld (ix+2),32              ; load it with a space
 74+  CD54 DD 7E 03         ld a,(ix+3)
 75+  CD57 FE 30            cp 48                   ; is it a leading zero?
 76+  CD59 C2 60 CD         jp nz,score_printscore2
 77+  CD5C DD 36 03 20      ld (ix+3),32              ; load it with a space
 78+  CD60              score_printscore2:
 79+  CD60 CD 30 86         call string_print
 80+  CD63 C9               ret
 81+  CD64
 82+  CD64              ;
 83+  CD64              ; Prints both scores to screen
 84+  CD64              ;
 85+  CD64              scores_printscores:
 86+  CD64 21 E4 C6         ld hl,player1_score
 87+  CD67 CD 3A CD         call score_printscoreformatted
 88+  CD6A 21 ED C6         ld hl,player2_score
 89+  CD6D CD 3A CD         call score_printscoreformatted
 90+  CD70 C9               ret
 91+  CD71
 92+  CD71              ;
 93+  CD71              ; Updates the current score.
 94+  CD71              ; Inputs:
 95+  CD71              ; hl - memory location of the score column
 96+  CD71              ; b - number to add
 97+  CD71              ;
 98+  CD71              scores_update:
 99+  CD71 7E               ld a,(hl)           ; current value of digit.
100+  CD72 80               add a,b             ; add points to this digit.
101+  CD73 77               ld (hl),a           ; place new digit back in string.
102+  CD74 FE 3A            cp 58               ; more than ASCII value '9'?
103+  CD76 D8               ret c               ; no - relax.
104+  CD77 D6 0A            sub 10              ; subtract 10.
105+  CD79 77               ld (hl),a           ; put new character back in string.
106+  CD7A              scores_update0:
107+  CD7A 2B               dec hl              ; previous character in string.
108+  CD7B 34               inc (hl)            ; up this by one.
109+  CD7C 7E               ld a,(hl)           ; what's the new value?
110+  CD7D FE 3A            cp 58               ; gone past ASCII nine?
111+  CD7F D8               ret c               ; no, scoring done.
112+  CD80 D6 0A            sub 10              ; down by ten.
113+  CD82 77               ld (hl),a           ; put it back
114+  CD83 C3 7A CD         jp scores_update0   ; go round again.
115+  CD86
116+  CD86
117+  CD86              ;
118+  CD86              ; Temporary area to store score
119+  CD86              ;
120+  CD86              scores_showtable_tmp:
121+  CD86 00 00 00 00      defb 0,0,0,0,0,0,0,0,0,0,0,255
121+  CD8A 00 00 00 00
121+  CD8E 00 00 00 FF
122+  CD92
123+  CD92              ;
124+  CD92              ; Processes a score
125+  CD92              ; Inputs:
126+  CD92              ; hl - location on table
127+  CD92              ;
128+  CD92              scores_showtable_process:
129+  CD92 01 0B 00         ld bc,11                     ; copy this many
130+  CD95 11 86 CD         ld de,scores_showtable_tmp
131+  CD98 ED B0            ldir
132+  CD9A DD 21 86 CD      ld ix,scores_showtable_tmp   ; decide whether to show five or six numbers
133+  CD9E DD 7E 05         ld a,(ix+5)
134+  CDA1 FE 30            cp 48                        ; is this a zero?
135+  CDA3 C2 B9 CD         jp nz,scores_showtable_process0 ; if not, show the whole thing
136+  CDA6 01 05 00         ld bc,5                      ; copy this many
137+  CDA9 DD E5 E1         ld hl,ix
138+  CDAC 11 06 00         ld de,6
139+  CDAF 19               add hl,de                    ; move to second digit
140+  CDB0 54 5D            ld de,hl
141+  CDB2 1B               dec de
142+  CDB3 ED B0            ldir
143+  CDB5 DD 36 0A 20      ld (ix+10),32                ; stick a space at the end
144+  CDB9              scores_showtable_process0:
145+  CDB9 21 86 CD         ld hl,scores_showtable_tmp
146+  CDBC CD 30 86         call string_print
147+  CDBF C9               ret
148+  CDC0
149+  CDC0              ;
150+  CDC0              ; Displays the high score table at the bottom of the screen
151+  CDC0              ;
152+  CDC0              scores_showtable:
153+  CDC0 21 E9 CC         ld hl, scores_table
154+  CDC3 CD 92 CD         call scores_showtable_process
155+  CDC6 21 F5 CC         ld hl, scores_table+12
156+  CDC9 CD 92 CD         call scores_showtable_process
157+  CDCC 21 01 CD         ld hl, scores_table+24
158+  CDCF CD 92 CD         call scores_showtable_process
159+  CDD2 C9               ret
160+  CDD3
161+  CDD3              ;
162+  CDD3              ; Place to store the current position we're checking
163+  CDD3              ;
164+  CDD3              scores_highscoretmp:
165+  CDD3 00               defb 0
166+  CDD4
167+  CDD4              ;
168+  CDD4              ; Place to store the equal indicator
169+  CDD4              ;
170+  CDD4              scores_highscoretmp2:
171+  CDD4 00               defb 0
172+  CDD5
173+  CDD5              ;
174+  CDD5              ; Updates the highscore table. Start at bottom score. Work way from left. Compare each digit. If current is higher than one we're checking,
175+  CDD5              ; copy checking one down (or erase) then copy current over that one. Then move up one and do the same
176+  CDD5              ;
177+  CDD5              scores_processhighscores:
178+  CDD5 21 D3 CD         ld hl,scores_highscoretmp
179+  CDD8 36 00            ld (hl),0  ; load up the tracking byte with 0 (ie, not on the table)
180+  CDDA 3E 1D            ld a,29
181+  CDDC              scores_processhighscores3:
182+  CDDC 21 E9 CC         ld hl,scores_table          ; position of first score column
183+  CDDF 5F               ld e,a
184+  CDE0 16 00            ld d,0
185+  CDE2 19               add hl,de
186+  CDE3 08               ex af,af'                   ; store a for later
187+  CDE4 11 DF CC         ld de,scores_current+2      ; position of current score column
188+  CDE7 3E 01            ld a,1
189+  CDE9 32 D4 CD         ld (scores_highscoretmp2),a ; set the equal indicator to 1 - this will be set to zero if a different number is found
190+  CDEC 06 06            ld b,6                      ; times to loop
191+  CDEE              scores_processhighscores0:
192+  CDEE 7E               ld a,(hl)
193+  CDEF 4F               ld c,a                      ; get first score column
194+  CDF0 1A               ld a,(de)                   ; get first current column
195+  CDF1 B9               cp c                        ; compare current with first
196+  CDF2 DA 14 CE         jp c,scores_processhighscores4  ; if c is bigger, then this is not a higher score, so end
197+  CDF5 CA FD CD         jp z,scores_processhighscores5  ; if c is equal, then this is not a higher score, so end
198+  CDF8 3E 00            ld a,0
199+  CDFA 32 D4 CD         ld (scores_highscoretmp2),a ; zero the equality indicator
200+  CDFD              scores_processhighscores5:
201+  CDFD 23               inc hl
202+  CDFE 13               inc de                      ; move to next column
203+  CDFF 10 ED            djnz scores_processhighscores0 ; loop
204+  CE01 3A D4 CD         ld a,(scores_highscoretmp2)   ; get the equality indicator
205+  CE04 FE 01            cp 1
206+  CE06 CA 14 CE         jp z,scores_processhighscores4 ; if it is equal, not a highscore
207+  CE09 B7               or a                            ; clear the carry flag
208+  CE0A 08               ex af,af'                     ; still here, so must be bigger
209+  CE0B 32 D3 CD         ld (scores_highscoretmp),a  ; store the position indicator in the tracking byte
210+  CE0E 0E 0C            ld c,12
211+  CE10 91               sub c
212+  CE11 D2 DC CD         jp nc,scores_processhighscores3 ; if the place we're looking is less than zero, we've gone to far, so continue, otherwise go again
213+  CE14              scores_processhighscores4
214+  CE14 CD 18 CE         call scores_updatehighscores
215+  CE17 C9               ret
216+  CE18
217+  CE18              ;
218+  CE18              ; Update score table
219+  CE18              ;
220+  CE18              scores_updatehighscores:
221+  CE18 3A D3 CD         ld a,(scores_highscoretmp)  ; get the place we want to overwrite
222+  CE1B FE 00            cp 0
223+  CE1D C8               ret z                       ; if this is 0, didn't get a high score
224+  CE1E FE 1D            cp 29                       ; check against 29... if it's equal, we don't want to copy the current score down one
225+  CE20 CA 53 CE         jp z, scores_updatehighscores3
226+  CE23                                              ; copy old score over one below, if not first
227+  CE23 21 E9 CC         ld hl,scores_table
228+  CE26 11 11 00         ld de,17                    ; start at second score, because this is the first one we'd ever need to copy...
229+  CE29 19               add hl,de                   ; position of first column
230+  CE2A 2B               dec hl
231+  CE2B 2B               dec hl
232+  CE2C 2B               dec hl
233+  CE2D E5               push hl
234+  CE2E 11 0C 00         ld de,12
235+  CE31 19               add hl,de                   ; get position of next score
236+  CE32 54 5D            ld de,hl
237+  CE34 E1               pop hl                      ; get hl back
238+  CE35 01 09 00         ld bc,9
239+  CE38 ED B0            ldir
240+  CE3A FE 11            cp 17                       ; see if we're copying into the second place slot (17 memory offset). If so, stop copying back the scores
241+  CE3C CA 53 CE         jp z,scores_updatehighscores3
242+  CE3F 21 E9 CC         ld hl,scores_table
243+  CE42 11 02 00         ld de,2                    ; ... otherwise, copy back the first score
244+  CE45 19               add hl,de                   ; position of first column
245+  CE46 E5               push hl
246+  CE47 11 0C 00         ld de,12
247+  CE4A 19               add hl,de                   ; get position of next score
248+  CE4B 54 5D            ld de,hl
249+  CE4D E1               pop hl                      ; get hl back
250+  CE4E 01 09 00         ld bc,9
251+  CE51 ED B0            ldir
252+  CE53              scores_updatehighscores3:
253+  CE53 06 06            ld b,6                      ; now overwrite
254+  CE55 21 E9 CC         ld hl,scores_table
255+  CE58 16 00            ld d,0
256+  CE5A 5F               ld e,a
257+  CE5B 19               add hl,de                   ; position of first column
258+  CE5C 08               ex af,af'
259+  CE5D 11 DF CC         ld de,scores_current+2      ; position of current score column
260+  CE60              scores_updatehighscores2:
261+  CE60 1A               ld a,(de)
262+  CE61 77               ld (hl),a
263+  CE62 23               inc hl
264+  CE63 13               inc de
265+  CE64 10 FA            djnz scores_updatehighscores2
266+  CE66 11 09 00         ld de,9
267+  CE69 ED 52            sbc hl,de
268+  CE6B 54 5D            ld de,hl                    ; get back to start of entry
269+  CE6D 21 E6 CC         ld hl,scores_defaultname    ; still need to overwrite the name
270+  CE70 01 03 00         ld bc,3                      ; 3 chars to copy
271+  CE73 ED B0            ldir
272+  CE75 C9               ret
# file closed: game/scores.asm
163   CE76                  include "game\diamonds.asm"
# file opened: game/diamonds.asm
  1+  CE76              diamonds_tmp:
  2+  CE76 00               defb 0
  3+  CE77
  4+  CE77              diamonds_tmp2:
  5+  CE77 00               defb 0
  6+  CE78
  7+  CE78              ;
  8+  CE78              ; Holds the number of thousands for the current gem type
  9+  CE78              ;
 10+  CE78              diamonds_score:
 11+  CE78 00               defb 0
 12+  CE79
 13+  CE79              ;
 14+  CE79              ; Changes the attribute of gem and diamond cells based on the frame count
 15+  CE79              ; Inputs:
 16+  CE79              ; hl - memory location of gem type
 17+  CE79              diamonds_twinkle_type:
 18+  CE79 CD 85 C5         call game_getcurrentframe       ; get current frame number
 19+  CE7C E6 07            and 7                           ; want a number from 0-7
 20+  CE7E C6 40            add 64                          ; add to 60 to get attr colour
 21+  CE80 32 77 CE         ld (diamonds_tmp2),a             ; store the colour
 22+  CE83              diamonds_twinkle_type0:
 23+  CE83 4E 23 46 2B      ld bc,(hl)                      ; get coords into bc
 24+  CE87 79               ld a,c                          ; load c into a
 25+  CE88 FE FF            cp 255                          ; is this the end?
 26+  CE8A CA B2 CE         jp z,diamonds_twinkle_type1           ; step out if so
 27+  CE8D 23               inc hl
 28+  CE8E 23               inc hl
 29+  CE8F 7E               ld a,(hl)                       ; check the state, don't process if collected
 30+  CE90 FE 01            cp 1
 31+  CE92 CA B3 CE         jp z,diamonds_twinkle_type2           ; step out if so
 32+  CE95 CD F3 CE         call diamonds_checkforplayer    ; check to see if we've collided with player
 33+  CE98 DC BA CE         call c,diamonds_collect     ; we collided
 34+  CE9B 23               inc hl
 35+  CE9C E5               push hl
 36+  CE9D E5 DD E1         ld ix,hl
 37+  CEA0 DD 4E FD DD      ld bc,(ix-3)                    ; get coords again
 37+  CEA4 46 FE
 38+  CEA6 3A 77 CE         ld a,(diamonds_tmp2)
 39+  CEA9 CD 9A AA         call screen_setattr
 40+  CEAC E1               pop hl
 41+  CEAD 23               inc hl
 42+  CEAE 23               inc hl                          ; move to next diamond
 43+  CEAF C3 83 CE         jp diamonds_twinkle_type0
 44+  CEB2              diamonds_twinkle_type1:
 45+  CEB2 C9               ret
 46+  CEB3              diamonds_twinkle_type2:
 47+  CEB3 23               inc hl                          ; do stuff the we would have done anyway to get to next gem
 48+  CEB4 23               inc hl
 49+  CEB5 23               inc hl
 50+  CEB6 08               ex af,af'
 51+  CEB7 C3 83 CE         jp diamonds_twinkle_type0       ; rejoin main loop
 52+  CEBA
 53+  CEBA              ;
 54+  CEBA              ; Collect the diamond we collided with
 55+  CEBA              ; Inputs:
 56+  CEBA              ; hl - memory location of current diamond, currently on state
 57+  CEBA              ; Output:
 58+  CEBA              ; a - 70 - for yellow on black
 59+  CEBA              diamonds_collect:
 60+  CEBA 36 01            ld (hl),1                       ; collected
 61+  CEBC E5               push hl
 62+  CEBD 2B               dec hl
 63+  CEBE 2B               dec hl
 64+  CEBF 4E 23 46 2B      ld bc,(hl)                      ; get the coords
 65+  CEC3 CD 52 AA         call screen_getscreencoordsfromcharcoords ; get the screen coords into bc
 66+  CEC6 ED 5B 76 CE      ld de,(diamonds_tmp)            ; tmp stores the offset for this type of gem
 67+  CECA 16 00            ld d,0
 68+  CECC 21 40 BD         ld hl,sprites
 69+  CECF 19               add hl,de
 70+  CED0 CD 14 AB         call sprites_drawsprite     ; call the routine to draw the sprite
 71+  CED3 E1               pop hl
 72+  CED4 3E 46            ld a,70                     ; pass this back to overwrite the attr
 73+  CED6 32 77 CE         ld (diamonds_tmp2),a
 74+  CED9 D9               exx
 75+  CEDA 3A 78 CE         ld a,(diamonds_score)
 76+  CEDD 47               ld b,a
 77+  CEDE CD 0D CD         call scores_addthousands
 78+  CEE1 3A 76 CE         ld a,(diamonds_tmp)
 79+  CEE4 FE 40            cp 64                       ; check the gem type offset, if its 64 this is a diamond, so mark the level as completable
 80+  CEE6 C2 EE CE         jp nz,diamonds_collect0
 81+  CEE9 21 E8 C5         ld hl,player+13
 82+  CEEC 36 01            ld (hl),1                   ; mark the player as able to complete the level
 83+  CEEE              diamonds_collect0:
 84+  CEEE CD E4 B1         call sound_gemcollected
 85+  CEF1 D9               exx
 86+  CEF2 C9               ret
 87+  CEF3
 88+  CEF3              ;
 89+  CEF3              ; Checks to see if the gem is hitting a player
 90+  CEF3              ; Inputs:
 91+  CEF3              ; bc - coords of diamond we're checking
 92+  CEF3              diamonds_checkforplayer:
 93+  CEF3 78               ld a,b               ; multiply b by 8
 94+  CEF4 07               rlca
 95+  CEF5 07               rlca
 96+  CEF6 07               rlca
 97+  CEF7 47               ld b,a
 98+  CEF8 ED 5B DB C5      ld de,(player)       ; get the player coords
 99+  CEFC 7B               ld a,e               ; get the vert coord first
100+  CEFD 90               sub b                ; subtract the diamond vertical coord from players
101+  CEFE C6 04            add 4                ; add the max distance
102+  CF00 FE 09            cp 9                ; compare to max*2+1? if carry flag set, they've hit
103+  CF02 D0               ret nc               ; if not, hasn't hit
104+  CF03 79               ld a,c               ; multiply c by 8
105+  CF04 07               rlca
106+  CF05 07               rlca
107+  CF06 07               rlca
108+  CF07 4F               ld c,a
109+  CF08 7A               ld a,d               ; get the player horiz coord
110+  CF09 91               sub c                ; subtract rock coord
111+  CF0A C6 04            add 4                ; add max distance
112+  CF0C FE 09            cp 9                ; compare to max*2+1? if carry flag set, they've hit
113+  CF0E D0               ret nc
114+  CF0F 3E 00            ld a,0
115+  CF11 C9               ret
116+  CF12
117+  CF12
118+  CF12              ;
119+  CF12              ; Initialise diamonds and gems
120+  CF12              ;
121+  CF12              diamonds_twinkle
122+  CF12 21 78 CE         ld hl,diamonds_score
123+  CF15 36 02            ld (hl),2         ; store the score we'll add
124+  CF17 21 76 CE         ld hl,diamonds_tmp
125+  CF1A 36 40            ld (hl),64         ; store the location the diamond sprite
126+  CF1C 21 BB B8         ld hl, level_diamonds
127+  CF1F CD 79 CE         call diamonds_twinkle_type
128+  CF22 21 78 CE         ld hl,diamonds_score
129+  CF25 36 01            ld (hl),1         ; store the score we'll add
130+  CF27 21 76 CE         ld hl,diamonds_tmp
131+  CF2A 36 70            ld (hl),112         ; store the location the gem sprite
132+  CF2C 21 CB B8         ld hl, level_gems
133+  CF2F CD 79 CE         call diamonds_twinkle_type
134+  CF32 C9               ret
135+  CF33
136+  CF33              ;
137+  CF33              ; Initialise diamonds and gems
138+  CF33              ;
139+  CF33              diamonds_init:
140+  CF33 21 BB B8         ld hl, level_diamonds
141+  CF36 CD 40 CF         call diamonds_init_type
142+  CF39 21 CB B8         ld hl, level_gems
143+  CF3C CD 40 CF         call diamonds_init_type
144+  CF3F C9               ret
145+  CF40
146+  CF40              ;
147+  CF40              ; Initialise diamonds or gems, get memory addresses
148+  CF40              ; Inputs:
149+  CF40              ; hl - memory location
150+  CF40              diamonds_init_type:
151+  CF40 4E               ld c,(hl)                      ; get coords into c
152+  CF41 79               ld a,c                          ; load c into add
153+  CF42 FE FF            cp 255                          ; is this the end?
154+  CF44 CA 5B CF         jp z,diamonds_init_type1             ; step out if so
155+  CF47 23               inc hl
156+  CF48 46               ld b,(hl)                       ; get coords into b
157+  CF49 E5               push hl
158+  CF4A CD 03 AA         call screen_getcellattroffset ; get memory of attr for this diamond into de
159+  CF4D E1               pop hl
160+  CF4E 23               inc hl                          ; move to state
161+  CF4F 36 00            ld (hl),0
162+  CF51 23               inc hl                          ; move to memory
163+  CF52 73 23 72 2B      ld (hl),de                      ; store the memory location
164+  CF56 23               inc hl                          ; move to next diamond
165+  CF57 23               inc hl
166+  CF58 C3 40 CF         jp diamonds_init_type
167+  CF5B              diamonds_init_type1:
168+  CF5B C9               ret
# file closed: game/diamonds.asm
164   CF5C                  include "game\missiles.asm"
# file opened: game/missiles.asm
  1+  CF5C              ;
  2+  CF5C              ; Controls when missiles fall
  3+  CF5C              ;
  4+  CF5C              missiles_count:
  5+  CF5C 00               defb 0
  6+  CF5D
  7+  CF5D              ;
  8+  CF5D              ; A structure of falling missiles
  9+  CF5D              ; Assume we'll never have more than 4 falling at any one time
 10+  CF5D              ; (1,2 - 16 bit memory location for missile graphic),state (0 fell, 1 falling)
 11+  CF5D              ;
 12+  CF5D              missiles_falling:
 13+  CF5D 00 00 00         defb 0,0,0
 14+  CF60 00 00 00         defb 0,0,0
 15+  CF63 00 00 00         defb 0,0,0
 16+  CF66 00 00 00         defb 0,0,0
 17+  CF69
 18+  CF69              ;
 19+  CF69              ; The coords of the missile that killed us
 20+  CF69              ;
 21+  CF69              missiles_killermissile:
 22+  CF69 00 00            defb 0,0
 23+  CF6B
 24+  CF6B              ;
 25+  CF6B              ; The speed of the missiles
 26+  CF6B              ;
 27+  CF6B              missiles_speed:
 28+  CF6B 00               defb 0
 29+  CF6C
 30+  CF6C              ;
 31+  CF6C              ; Zeroes the state of each missile
 32+  CF6C              ;
 33+  CF6C              missiles_init:
 34+  CF6C 06 0C            ld b,12
 35+  CF6E DD 21 42 B8      ld ix,level_missiles
 36+  CF72              missiles_init0:
 37+  CF72 DD 36 02 00      ld (ix+2),0               ; set the state to zero
 38+  CF76 11 05 00         ld de,5
 39+  CF79 DD 19            add ix,de
 40+  CF7B DD 36 02 00      ld (ix+2),0
 41+  CF7F DD 19            add ix,de
 42+  CF81 10 EF            djnz missiles_init0
 43+  CF83 06 04            ld b,4                  ; reset four falling missiles
 44+  CF85 21 5D CF         ld hl,missiles_falling
 45+  CF88              missiles_init1:
 46+  CF88 36 00            ld (hl),0
 47+  CF8A 23               inc hl
 48+  CF8B 36 00            ld (hl),0
 49+  CF8D 23               inc hl
 50+  CF8E 36 00            ld (hl),0
 51+  CF90 23               inc hl
 52+  CF91 10 F5            djnz missiles_init1
 53+  CF93 C9               ret
 54+  CF94
 55+  CF94              ;
 56+  CF94              ; Runs each frame and checks if a missile can fall, then selects one at random and adds to the falling missiles
 57+  CF94              ; Processes any already falling missiles
 58+  CF94              ;
 59+  CF94              missiles_process:
 60+  CF94 3A E6 C5         ld a,(player+11)                        ; check if the player was hit by a missile previously
 61+  CF97 FE 03            cp 3
 62+  CF99 C2 A0 CF         jp nz,missiles_process3                 ; if not, continue
 63+  CF9C CD E0 D0         call missiles_zonkplayer
 64+  CF9F C9               ret
 65+  CFA0              missiles_process3:
 66+  CFA0 3A EA C5         ld a,(player_location)
 67+  CFA3 FE 01            cp 1
 68+  CFA5 C2 16 D0         jp nz, missiles_process0                ; if not 1 we're not in the cavern so no need to make any more fall
 69+  CFA8 21 E8 C5         ld hl,player+13
 70+  CFAB 7E               ld a,(hl)                               ; check if player has collected a diamond
 71+  CFAC FE 01            cp 1
 72+  CFAE C2 16 D0         jp nz, missiles_process0                ; don't activate if not
 73+  CFB1 21 5C CF         ld hl,missiles_count
 74+  CFB4 7E               ld a,(hl)                   ; get the missiles count
 75+  CFB5 3C               inc a
 76+  CFB6 ED 5B 6B CF      ld de,(missiles_speed)
 77+  CFBA BB               cp e                                   ; have we reached the count yet
 78+  CFBB CA C2 CF         jp z,missiles_process2                 ; if not, don't activate a new one
 79+  CFBE 77               ld (hl),a                               ; store the updated count, and continue without activating
 80+  CFBF C3 16 D0         jp missiles_process0
 81+  CFC2              missiles_process2:
 82+  CFC2 36 00            ld (hl),0                               ; zero the counter
 83+  CFC4 1E 0C            ld e,12
 84+  CFC6 CD B8 81         call utilities_randomupper              ; get random number from 0 to 11
 85+  CFC9 11 0A 00         ld de,10
 86+  CFCC CD 03 81         call utilities_multiply                 ; multiple random number by 10
 87+  CFCF 54 5D            ld de,hl                                ; this is the offset for the random missile
 88+  CFD1 DD 21 42 B8      ld ix,level_missiles                   ; load the location of the missile definitions
 89+  CFD5 DD 19            add ix,de                               ; get to location of missile
 90+  CFD7 DD 7E 02         ld a,(ix+2)
 91+  CFDA FE 00            cp 0
 92+  CFDC CA EC CF         jp z,missiles_process1                  ; if this missile isn't active, activate it
 93+  CFDF 11 05 00         ld de,5                                 ; otherwise, check the missile above
 94+  CFE2 DD 19            add ix,de
 95+  CFE4 DD 7E 02         ld a,(ix+2)
 96+  CFE7 FE 00            cp 0
 97+  CFE9 C2 16 D0         jp nz,missiles_process0                 ; if this is active as well, the player got lucky
 98+  CFEC              missiles_process1:                          ; activate a missile
 99+  CFEC DD 36 02 01      ld (ix+2),1                               ; mark this missile as active
100+  CFF0 DD 4E 00 DD      ld bc,(ix)                              ; get char coords from the missile
100+  CFF4 46 01
101+  CFF6 78               ld a,b
102+  CFF7 ED 5B E2 A8      ld de,(screen_offset)          ; load the screen offset, this is in rows
103+  CFFB 93               sub e
104+  CFFC CD 52 AA         call screen_getscreencoordsfromcharcoords ; get screen coords into bc
105+  CFFF C5               push bc
106+  D000 3E 0C            ld a,12                                 ; inactive missile sprite
107+  D002 CD 8F AA         call screen_getblock
108+  D005 CD 14 AB         call sprites_drawsprite                 ; draw the sprite over the old one
109+  D008 C1               pop bc
110+  D009 C5               push bc
111+  D00A 3E 14            ld a,20                                 ; active missile sprite
112+  D00C CD 8F AA         call screen_getblock
113+  D00F CD 14 AB         call sprites_drawsprite                 ; draw the sprite over the old one
114+  D012 C1               pop bc
115+  D013 CD A4 D0         call missiles_addmissiletofalling
116+  D016              missiles_process0:
117+  D016 CD 1A D0         call missiles_fall
118+  D019 C9               ret
119+  D01A
120+  D01A              ;
121+  D01A              ; Processes falling missiles
122+  D01A              ;
123+  D01A              missiles_fall:
124+  D01A 06 04            ld b,4              ; number of possible falling missiles
125+  D01C DD 21 5D CF      ld ix,missiles_falling
126+  D020              missiles_fall0:
127+  D020 C5               push bc
128+  D021 DD 7E 02         ld a,(ix+2)
129+  D024 FE 00            cp 0
130+  D026 CA 83 D0         jp z,missiles_fall1 ; not falling move to next
131+  D029 FE 01            cp 1                ; is this ready to fall
132+  D02B CA 31 D0         jp z, missiles_fall3
133+  D02E C3 9D D0         jp missiles_fall4   ; if not, decrease the countdown
134+  D031              missiles_fall3:
135+  D031 DD 4E 00 DD      ld bc,(ix)          ; load coords into bc
135+  D035 46 01
136+  D037 CD 09 AC         call sprites_scadd  ; get the memory of the coords into de
137+  D03A 14               inc d               ; add 256 to get next row
138+  D03B 1A               ld a,(de)           ; get the contents of the next row
139+  D03C FE 00            cp 0
140+  D03E C2 96 D0         jp nz,missiles_fall2 ; if this is not empty, stop this missile falling
141+  D041 3E 14            ld a,20                                 ; active missile sprite
142+  D043 CD 8F AA         call screen_getblock
143+  D046 CD 14 AB         call sprites_drawsprite                 ; draw the sprite over the old one
144+  D049 DD 4E 00 DD      ld bc,(ix)          ; load coords into bc
144+  D04D 46 01
145+  D04F 0C               inc c               ; move down one pixel
146+  D050 DD 71 00 DD      ld (ix),bc          ; store the new coords
146+  D054 70 01
147+  D056 3E 14            ld a,20                                 ; active missile sprite
148+  D058 CD 8F AA         call screen_getblock
149+  D05B CD 14 AB         call sprites_drawsprite                 ; draw the sprite
150+  D05E DD 4E 00 DD      ld bc,(ix)          ; load coords into bc
150+  D062 46 01
151+  D064 79               ld a,c              ; get the vertical coord into a
152+  D065 E6 07            and 7               ; divisible by 8?
153+  D067 FE 00            cp 0
154+  D069 C2 83 D0         jp nz,missiles_fall1   ; if not, carry on
155+  D06C CD 42 AA         call screen_getcharcoordsfromscreencoords ; get the char coords into bc
156+  D06F 3E 43            ld a,67             ; load magenta
157+  D071 CD 9A AA         call screen_setattr
158+  D074 DD 4E 00 DD      ld bc,(ix)
158+  D078 46 01
159+  D07A CD 42 AA         call screen_getcharcoordsfromscreencoords ; get the attr address into de
160+  D07D 05               dec b               ; look one square above
161+  D07E 3E 46            ld a,70             ; load yellow
162+  D080 CD 9A AA         call screen_setattr
163+  D083              missiles_fall1:         ; hl at state
164+  D083 DD 4E 00 DD      ld bc,(ix)          ; get coords back
164+  D087 46 01
165+  D089 CD C5 D0         call missiles_checkforplayer ; check for player
166+  D08C DD 23            inc ix
167+  D08E DD 23            inc ix
168+  D090 DD 23            inc ix              ; get to next missile
169+  D092 C1               pop bc
170+  D093 10 8B            djnz missiles_fall0
171+  D095 C9               ret
172+  D096              missiles_fall2:
173+  D096 DD 36 02 00      ld (ix+2),0
174+  D09A C3 83 D0         jp missiles_fall1   ; rejoin the loop
175+  D09D              missiles_fall4:
176+  D09D 3D               dec a               ; decrease the countdown
177+  D09E DD 77 02         ld (ix+2),a         ; store back
178+  D0A1 C3 83 D0         jp missiles_fall1   ; do next missile
179+  D0A4
180+  D0A4              ;
181+  D0A4              ; Adds the missile to the structure that tracks falling missile
182+  D0A4              ; Inputs:
183+  D0A4              ; bc - coords of missile, c vert
184+  D0A4              missiles_addmissiletofalling:
185+  D0A4 C5               push bc             ; store the coords
186+  D0A5 11 5D CF         ld de,missiles_falling
187+  D0A8 06 04            ld b,4              ; number of possible falling missiles
188+  D0AA              missiles_addmissiletofalling0:
189+  D0AA 13               inc de
190+  D0AB 13               inc de              ; move three along to get the state
191+  D0AC 1A               ld a,(de)           ; load the state
192+  D0AD FE 00            cp 0                ; check if this is not falling
193+  D0AF C2 C0 D0         jp nz,missiles_addmissiletofalling1 ; continue the loop if not 0
194+  D0B2 3E 19            ld a,25
195+  D0B4 12               ld (de),a           ; set the state to pre-falling
196+  D0B5 1B               dec de              ; move back coords
197+  D0B6 C1               pop bc              ; get back coords
198+  D0B7 78               ld a,b
199+  D0B8 12               ld (de),a           ; store the vertical
200+  D0B9 1B               dec de
201+  D0BA 79               ld a,c
202+  D0BB 12               ld (de),a           ; store the horizontal
203+  D0BC C5               push bc
204+  D0BD C3 C3 D0         jp missiles_addmissiletofalling2 ; done
205+  D0C0              missiles_addmissiletofalling1:
206+  D0C0 13               inc de              ; move memory along to next rock
207+  D0C1 10 E7            djnz missiles_addmissiletofalling0 ; try the next missile
208+  D0C3              missiles_addmissiletofalling2: ; done, return
209+  D0C3 C1               pop bc              ; to tidy up
210+  D0C4 C9               ret
211+  D0C5
212+  D0C5              ;
213+  D0C5              ; Checks to see if the missile is hitting a player
214+  D0C5              ; Inputs:
215+  D0C5              ; bc - coords of missile we're checking
216+  D0C5              missiles_checkforplayer:
217+  D0C5 ED 5B DB C5      ld de,(player)       ; get the player coords
218+  D0C9 7B               ld a,e               ; get the vert coord first
219+  D0CA 91               sub c                ; subtract the missile vertical coord from players
220+  D0CB FE 08            cp 8                 ; the missile will only hit a player if the player is directly underneath, so this must be 8
221+  D0CD C0               ret nz               ; if not, hasn't hit
222+  D0CE 7A               ld a,d               ; get the player horiz coord
223+  D0CF 90               sub b                ; subtract missile coord
224+  D0D0 C6 07            add 7                ; add max distance
225+  D0D2 FE 0D            cp 13                ; compare to 13? if carry flag set, they've hit
226+  D0D4 DA D8 D0         jp c,missiles_checkforplayer0
227+  D0D7 C9               ret
228+  D0D8              missiles_checkforplayer0:
229+  D0D8 ED 43 69 CF      ld (missiles_killermissile),bc; store the coords of the killer missile
230+  D0DC CD 0A C7         call player_zonkplayer ; if so, jump out
231+  D0DF C9               ret
232+  D0E0
233+  D0E0              ;
234+  D0E0              ; Player has been hit, so draw text over them and mark as dead
235+  D0E0              ;
236+  D0E0              missiles_zonkplayer:
237+  D0E0 CD F8 C6         call player_killplayer      ; mark as dead
238+  D0E3 ED 4B DB C5      ld bc,(player)              ; get player coords
239+  D0E7 CD 42 AA         call screen_getcharcoordsfromscreencoords
240+  D0EA 0D               dec c
241+  D0EB 0D               dec c
242+  D0EC 04               inc b
243+  D0ED C5               push bc
244+  D0EE 3E 42            ld a,66
245+  D0F0 CD 9A AA         call screen_setattr
246+  D0F3 0C               inc c
247+  D0F4 CD 9A AA         call screen_setattr
248+  D0F7 0C               inc c
249+  D0F8 CD 9A AA         call screen_setattr
250+  D0FB 0C               inc c
251+  D0FC CD 9A AA         call screen_setattr
252+  D0FF 0C               inc c
253+  D100 CD 9A AA         call screen_setattr
254+  D103 0C               inc c
255+  D104 CD 9A AA         call screen_setattr
256+  D107 C1               pop bc
257+  D108 ED 5B E2 A8      ld de,(screen_offset)
258+  D10C 78               ld a,b
259+  D10D 93               sub e
260+  D10E 47               ld b,a                      ; subtract the offset
261+  D10F 04               inc b
262+  D110 04               inc b                       ; add two for the score rows
263+  D111 ED 43 A3 85      ld (string_zonk),bc         ; set coords of string
264+  D115 21 A3 85         ld hl,string_zonk
265+  D118 CD 30 86         call string_print
266+  D11B 06 14            ld b,20
267+  D11D CD 64 81         call utilities_pauseforframes ; pause
268+  D120 C9               ret
269+  D121
# file closed: game/missiles.asm
165   D121                  include "game\thepit.asm"
# file opened: game/thepit.asm
  1+  D121              ;
  2+  D121              ; Timer for deciding how fast the trap withdraws
  3+  D121              ;
  4+  D121              thepit_timer:
  5+  D121 00               defb 0
  6+  D122
  7+  D122              ;
  8+  D122              ; Ticks for the trap state. Will count to 3 then reset
  9+  D122              ;
 10+  D122              thepit_trapcount:
 11+  D122 00               defb 0
 12+  D123
 13+  D123              ;
 14+  D123              ; The horizontal coordinate of the current pit trap
 15+  D123              ;
 16+  D123              thepit_trapcoord:
 17+  D123 08               defb 8
 18+  D124
 19+  D124              ;
 20+  D124              ; Initialises the pit
 21+  D124              ;
 22+  D124              thepit_init:
 23+  D124 21 23 D1         ld hl,thepit_trapcoord
 24+  D127 36 08            ld (hl),8
 25+  D129 21 22 D1         ld hl,thepit_trapcount
 26+  D12C 36 00            ld (hl),0
 27+  D12E C9               ret
 28+  D12F              ;
 29+  D12F              ; The speed the pit will withdraw
 30+  D12F              ;
 31+  D12F              thepit_speed:
 32+  D12F 00               defb 0
 33+  D130
 34+  D130              ;
 35+  D130              ; Performs per frame processing on the pit room
 36+  D130              ;
 37+  D130              thepit_process:
 38+  D130 3A EA C5         ld a,(player_location)
 39+  D133 FE 02            cp 2                            ; if two, the player is in the pit, so process the trap
 40+  D135 C2 9F D1         jp nz,thepit_process0
 41+  D138 ED 4B DB C5      ld bc,(player)                  ; get the player's coords to check if about to fall
 42+  D13C 3E 08            ld a,8
 43+  D13E 81               add a,c
 44+  D13F 4F               ld c,a                          ; look at the square underneath
 45+  D140 CD 42 AA         call screen_getcharcoordsfromscreencoords ; get the cell coords
 46+  D143 CD D0 AA         call screen_ischarempty
 47+  D146 FE 01            cp 1                            ; check if this is 1=empty
 48+  D148 CA A0 D1         jp z,thepit_process2
 49+  D14B 3A 21 D1         ld a,(thepit_timer)             ; get the timer
 50+  D14E 3C               inc a
 51+  D14F 32 21 D1         ld (thepit_timer),a             ; store
 52+  D152 ED 5B 2F D1      ld de,(thepit_speed)            ; get the speed
 53+  D156 BB               cp e                           ; have we reached the trigger?
 54+  D157 C2 9F D1         jp nz, thepit_process0          ; no need to do anything
 55+  D15A 3E 00            ld a,0
 56+  D15C 32 21 D1         ld (thepit_timer),a             ; zero the timer and process
 57+  D15F 3A 22 D1         ld a,(thepit_trapcount)         ; get the current count
 58+  D162 3C               inc a
 59+  D163 32 22 D1         ld (thepit_trapcount),a         ; reset the trap count
 60+  D166 FE 04            cp 4                            ; do we need to begin another character?
 61+  D168 C2 87 D1         jp nz,thepit_process1           ; if not, draw as normal
 62+  D16B 3E 00            ld a,0
 63+  D16D 32 22 D1         ld (thepit_trapcount),a         ; reset the trap count
 64+  D170 3A 23 D1         ld a,(thepit_trapcoord)         ; get the trap horiz coord
 65+  D173 FE 02            cp 2
 66+  D175 CA 9F D1         jp z,thepit_process0
 67+  D178 4F               ld c,a
 68+  D179 06 0A            ld b,10
 69+  D17B 3E 46            ld a,70
 70+  D17D CD 9A AA         call screen_setattr             ; set the attr of the empty square to yellow on black
 71+  D180 3A 23 D1         ld a,(thepit_trapcoord)         ; get the trap horiz coord
 72+  D183 3D               dec a
 73+  D184 32 23 D1         ld (thepit_trapcoord),a         ; store the reduced coord
 74+  D187
 75+  D187              thepit_process1:                    ; draw the trapdoor in current position
 76+  D187 3A 23 D1         ld a,(thepit_trapcoord)
 77+  D18A FE 02            cp 2
 78+  D18C CA 9F D1         jp z, thepit_process0           ; don't process outside of the pit
 79+  D18F 4F               ld c,a
 80+  D190 06 0A            ld b,10                         ; vertical coord will always be the same
 81+  D192 3A 22 D1         ld a,(thepit_trapcount)         ; get the trap count
 82+  D195 5F               ld e,a                          ; store in e
 83+  D196 3E 16            ld a,22                         ; 21 is full trapdoor
 84+  D198 83               add a,e
 85+  D199 CD 8F AA         call screen_getblock
 86+  D19C CD 6C AA         call screen_showchar            ; show the char
 87+  D19F
 88+  D19F              thepit_process0:
 89+  D19F C9               ret
 90+  D1A0              thepit_process2:
 91+  D1A0 CD 10 C7         call player_pitkillplayer
 92+  D1A3 C9               ret
 93+  D1A4
# file closed: game/thepit.asm
166   D1A4                  include "game\monster.asm"
# file opened: game/monster.asm
  1+  D1A4
  2+  D1A4              ;
  3+  D1A4              ; Where the monster currently is
  4+  D1A4              ;
  5+  D1A4              monster_currentcoords:
  6+  D1A4 00 00            defb 0,0
  7+  D1A6
  8+  D1A6              ;
  9+  D1A6              ; The start coords of the monster
 10+  D1A6              ;
 11+  D1A6              monster_initcoords:
 12+  D1A6 70 1B            defb 112,27
 13+  D1A8
 14+  D1A8              ;
 15+  D1A8              ; Store the memory location of the current jump position
 16+  D1A8              ;
 17+  D1A8              monster_jumppos:
 18+  D1A8 00 00            defb 0,0
 19+  D1AA
 20+  D1AA              ;
 21+  D1AA              ; The jump table for the monster.
 22+  D1AA              ;
 23+  D1AA              monster_jumptable:
 24+  D1AA FF 03 02 02      defb 255,3,2,2,2,2,2,2,2,2,1,1,1,1,1,1,255
 24+  D1AE 02 02 02 02
 24+  D1B2 02 02 01 01
 24+  D1B6 01 01 01 01
 24+  D1BA FF
 25+  D1BB
 26+  D1BB              ;
 27+  D1BB              ; The vertical direction: 0 up, 1 down
 28+  D1BB              ;
 29+  D1BB              monster_jumpdirectionvert:
 30+  D1BB 00               defb 0
 31+  D1BC
 32+  D1BC              ;
 33+  D1BC              ; The horiz direction: 0 right, 1 left
 34+  D1BC              ;
 35+  D1BC              monster_jumpdirectionhoriz:
 36+  D1BC 00               defb 0
 37+  D1BD
 38+  D1BD              ;
 39+  D1BD              ; Frame offset, 0 or 32
 40+  D1BD              ;
 41+  D1BD              monster_frameoffset:
 42+  D1BD 00               defb 0
 43+  D1BE
 44+  D1BE              ;
 45+  D1BE              ; Monster tick
 46+  D1BE              ;
 47+  D1BE              monster_tick:
 48+  D1BE 00               defb 0
 49+  D1BF
 50+  D1BF              ;
 51+  D1BF              ; The colour of the monster
 52+  D1BF              ;
 53+  D1BF              monster_colour:
 54+  D1BF 06               defb 6
 55+  D1C0
 56+  D1C0              ;
 57+  D1C0              ; Initialises the pit monster
 58+  D1C0              ;
 59+  D1C0              monster_init:
 60+  D1C0 ED 4B A6 D1      ld bc,(monster_initcoords)              ; load the initial coords
 61+  D1C4 ED 43 A4 D1      ld (monster_currentcoords),bc           ; save in current coords
 62+  D1C8 21 AB D1         ld hl,monster_jumptable+1
 63+  D1CB 22 A8 D1         ld (monster_jumppos),hl                 ; store the initial position in the jump table
 64+  D1CE 3E 00            ld a,0
 65+  D1D0 32 BB D1         ld (monster_jumpdirectionvert),a        ; going up
 66+  D1D3 32 BD D1         ld (monster_frameoffset),a
 67+  D1D6 32 BE D1         ld (monster_tick),a
 68+  D1D9 CD 63 D2         call monster_draw                       ; the monster
 69+  D1DC C9               ret
 70+  D1DD
 71+  D1DD              ;
 72+  D1DD              ; Animate the monster
 73+  D1DD              ;
 74+  D1DD              monster_process:
 75+  D1DD 3A BE D1         ld a,(monster_tick)                     ; check if we should draw this frame
 76+  D1E0 FE 01            cp 1
 77+  D1E2 CA EA D1         jp z,monster_process6
 78+  D1E5 3C               inc a
 79+  D1E6 32 BE D1         ld (monster_tick),a                     ; increase the tick and continue
 80+  D1E9 C9               ret
 81+  D1EA              monster_process6:
 82+  D1EA 3E 00            ld a,0
 83+  D1EC 32 BE D1         ld (monster_tick),a                     ; zero the tick
 84+  D1EF CD 63 D2         call monster_draw                       ; overwrite the old sprite
 85+  D1F2 3A BD D1         ld a,(monster_frameoffset)              ; get the anim frame offset
 86+  D1F5 EE 20            xor 32                                  ; flip between 0 and 32
 87+  D1F7 32 BD D1         ld (monster_frameoffset),a              ; store
 88+  D1FA ED 4B A4 D1      ld bc,(monster_currentcoords)           ; get the current coords
 89+  D1FE 2A A8 D1         ld hl,(monster_jumppos)                 ; get the position in the jump table
 90+  D201 56               ld d,(hl)                               ; get the jump modifier
 91+  D202 3A BB D1         ld a,(monster_jumpdirectionvert)        ; get the vertical direction
 92+  D205 FE 00            cp 0                                    ; if 0, going up, so dec vert
 93+  D207 C2 10 D2         jp nz,monster_process0
 94+  D20A 79               ld a,c
 95+  D20B 92               sub d
 96+  D20C 23               inc hl                                  ; move forward a jump pos
 97+  D20D C3 13 D2         jp monster_process1
 98+  D210              monster_process0:
 99+  D210 79               ld a,c                                   ; going down so inc c
100+  D211 82               add a,d
101+  D212 2B               dec hl                                  ; move back a jump pos
102+  D213              monster_process1:
103+  D213 4F               ld c,a                                  ; get the vertical coord back
104+  D214 7E               ld a,(hl)                               ; check the next jump pos
105+  D215 FE FF            cp 255                                  ; if 255 reverse
106+  D217 CA 20 D2         jp z,monster_process3
107+  D21A 22 A8 D1         ld (monster_jumppos),hl                 ; store the new pos
108+  D21D C3 32 D2         jp monster_process2                     ; keep going
109+  D220              monster_process3:
110+  D220 3A BB D1         ld a,(monster_jumpdirectionvert)        ; get the direction
111+  D223 EE 01            xor 1                                   ; flip it
112+  D225 32 BB D1         ld (monster_jumpdirectionvert),a        ; store it
113+  D228 FE 01            cp 1
114+  D22A CA 32 D2         jp z,monster_process2
115+  D22D D9               exx
116+  D22E CD 76 D2         call monster_colourchange
117+  D231 D9               exx
118+  D232              monster_process2:
119+  D232 3A BC D1         ld a,(monster_jumpdirectionhoriz)       ; get the horiz direction
120+  D235 FE 00            cp 0                                    ; is it right?
121+  D237 C2 4C D2         jp nz,monster_process4
122+  D23A 04               inc b                                   ; 1 pixel right
123+  D23B 78               ld a,b
124+  D23C FE 38            cp 56                                   ; reached the edge of the pit?
125+  D23E C2 5B D2         jp nz,monster_process5
126+  D241 3A BC D1         ld a,(monster_jumpdirectionhoriz)
127+  D244 EE 01            xor 1
128+  D246 32 BC D1         ld (monster_jumpdirectionhoriz),a       ; flip direction
129+  D249 C3 5B D2         jp monster_process5
130+  D24C              monster_process4:
131+  D24C 05               dec b                                   ; 1 pixel left
132+  D24D 78               ld a,b
133+  D24E FE 18            cp 24                                   ; reached the edge of the pit?
134+  D250 C2 5B D2         jp nz,monster_process5
135+  D253 3A BC D1         ld a,(monster_jumpdirectionhoriz)
136+  D256 EE 01            xor 1
137+  D258 32 BC D1         ld (monster_jumpdirectionhoriz),a       ; flip direction
138+  D25B              monster_process5:
139+  D25B ED 43 A4 D1      ld (monster_currentcoords),bc           ; store the new vertical coords
140+  D25F CD 63 D2         call monster_draw                       ; finally, draw the monster
141+  D262 C9               ret
142+  D263
143+  D263              ;
144+  D263              ; Draw the monster at the current location
145+  D263              ;
146+  D263              monster_draw:
147+  D263 ED 4B A4 D1      ld bc,(monster_currentcoords)
148+  D267 3A BD D1         ld a,(monster_frameoffset)
149+  D26A 11 00 00         ld de,0
150+  D26D 5F               ld e,a
151+  D26E 21 54 BF         ld hl,monster_sprite                    ; load the first frame
152+  D271 19               add hl,de
153+  D272 CD 72 AB         call sprites_draw2by2sprite
154+  D275 C9               ret
155+  D276
156+  D276              ;
157+  D276              ; Changes the monster colour whenever it reaches the bottom of its jump
158+  D276              ;
159+  D276              monster_colourchange:
160+  D276 3A BF D1         ld a,(monster_colour)
161+  D279 3C               inc a
162+  D27A FE 07            cp 7
163+  D27C C2 81 D2         jp nz, monster_colourchange0
164+  D27F 3E 01            ld a,1
165+  D281              monster_colourchange0:
166+  D281 32 BF D1         ld (monster_colour),a                   ; save the monster colour
167+  D284 3A E2 A8         ld a,(screen_offset)
168+  D287 FE 00            cp 0
169+  D289 CA B6 D2         jp z,monster_colourchange1
170+  D28C 3A BF D1         ld a,(monster_colour)                   ; get the monster colour
171+  D28F 06 06            ld b,6
172+  D291 0E 40            ld c,64
173+  D293 81               add c                                   ; want this with black background, so add 64
174+  D294 11 A3 58         ld de,22528+163                         ; attrs here
175+  D297 CD A5 A9         call screen_setcolours
176+  D29A 3A BF D1         ld a,(monster_colour)                   ; get the monster colour
177+  D29D 06 06            ld b,6
178+  D29F 0E 40            ld c,64
179+  D2A1 81               add c                                   ; want this with black background, so add 64
180+  D2A2 11 C3 58         ld de,22528+195                         ; attrs here
181+  D2A5 CD A5 A9         call screen_setcolours
182+  D2A8 3A BF D1         ld a,(monster_colour)                   ; get the monster colour
183+  D2AB F6 60            or 96
184+  D2AD 06 06            ld b,6
185+  D2AF 11 E3 58         ld de,22528+227                         ; attrs here
186+  D2B2 CD A5 A9         call screen_setcolours
187+  D2B5 C9               ret
188+  D2B6              monster_colourchange1:
189+  D2B6 3A BF D1         ld a,(monster_colour)                   ; get the monster colour
190+  D2B9 06 06            ld b,6
191+  D2BB 0E 40            ld c,64
192+  D2BD 81               add c                                   ; want this with black background, so add 64
193+  D2BE 11 A3 59         ld de,22528+419                         ; attrs here
194+  D2C1 CD A5 A9         call screen_setcolours
195+  D2C4 3A BF D1         ld a,(monster_colour)                   ; get the monster colour
196+  D2C7 06 06            ld b,6
197+  D2C9 0E 40            ld c,64
198+  D2CB 81               add c                                   ; want this with black background, so add 64
199+  D2CC 11 C3 59         ld de,22528+451                         ; attrs here
200+  D2CF CD A5 A9         call screen_setcolours
201+  D2D2 3A BF D1         ld a,(monster_colour)                   ; get the monster colour
202+  D2D5 F6 60            or 96
203+  D2D7 06 06            ld b,6
204+  D2D9 11 E3 59         ld de,22528+483                         ; attrs here
205+  D2DC CD A5 A9         call screen_setcolours
206+  D2DF C9               ret
# file closed: game/monster.asm
167   D2E0                  include "game\robots.asm"
# file opened: game/robots.asm
  1+  D2E0
  2+  D2E0              ;
  3+  D2E0              ; Array of robot states
  4+  D2E0              ; x,y,state (0 inactive, 1 active), direction (0 left, 1 right), anim offset, automove frames remaining, move direction (0 left, 1 right, 3 up, 4 down)
  5+  D2E0              robots_robots:
  6+  D2E0 00 00 00 00      defb 0,0,0,0,0,0,0
  6+  D2E4 00 00 00
  7+  D2E7 00 00 00 00      defb 0,0,0,0,0,0,0
  7+  D2EB 00 00 00
  8+  D2EE 00 00 00 00      defb 0,0,0,0,0,0,0
  8+  D2F2 00 00 00
  9+  D2F5 00 00 00 00      defb 0,0,0,0,0,0,0
  9+  D2F9 00 00 00
 10+  D2FC 00 00 00 00      defb 0,0,0,0,0,0,0
 10+  D300 00 00 00
 11+  D303
 12+  D303              robots_initcoords:
 13+  D303 18 E8            defb 24,232
 14+  D305
 15+  D305              ;
 16+  D305              ; When this reaches zero, spawn a new robot
 17+  D305              ;
 18+  D305              robots_spawntimer:
 19+  D305 FA               defb 250
 20+  D306
 21+  D306              ;
 22+  D306              ; When this reaches max, change the anim frame
 23+  D306              ;
 24+  D306              robots_animtimer:
 25+  D306 00               defb 0
 26+  D307
 27+  D307              ;
 28+  D307              ; When this reaches max, change move the robot
 29+  D307              ;
 30+  D307              robots_movetimer:
 31+  D307 00               defb 0
 32+  D308
 33+  D308
 34+  D308              ;
 35+  D308              ; The number of robots active
 36+  D308              ;
 37+  D308              robots_numberactive:
 38+  D308 00               defb 0
 39+  D309
 40+  D309              ;
 41+  D309              ; Tracks which directions a robot can move
 42+  D309              ; up,down,left,right
 43+  D309              robots_canmovedirections:
 44+  D309 00 00 00 00      defb 0,0,0,0
 45+  D30D
 46+  D30D              ;
 47+  D30D              ; The current robot speed
 48+  D30D              ;
 49+  D30D              robots_robotspeed:
 50+  D30D 02               defb 2
 51+  D30E
 52+  D30E              ;
 53+  D30E              ; The current robot spawn speed
 54+  D30E              ;
 55+  D30E              robots_robotspawnspeed:
 56+  D30E 01               defb 1
 57+  D30F
 58+  D30F              ;
 59+  D30F              ; The current max robots
 60+  D30F              ;
 61+  D30F              robots_robotsmax:
 62+  D30F 03               defb 3
 63+  D310
 64+  D310              ;
 65+  D310              ; Initialises the robots
 66+  D310              ;
 67+  D310              robots_init:
 68+  D310 06 23            ld b,35
 69+  D312 DD 21 E0 D2      ld ix,robots_robots
 70+  D316              robots_init0:
 71+  D316 DD 36 00 00      ld (ix),0                       ; reset robot states back to zero
 72+  D31A DD 23            inc ix
 73+  D31C 10 F8            djnz robots_init0
 74+  D31E 3E 00            ld a,0
 75+  D320 32 08 D3         ld (robots_numberactive),a
 76+  D323 3E FA            ld a,250
 77+  D325 32 05 D3         ld (robots_spawntimer),a
 78+  D328                  ; Self writing code
 79+  D328                  ; Robot speed
 80+  D328 3A 0D D3         ld a,(robots_robotspeed)
 81+  D32B 32 DC D3         ld (robots_process7+1),a
 82+  D32E 3C               inc a
 83+  D32F 32 0C D4         ld (robots_process6+1),a
 84+  D332                  ; Robots max
 85+  D332 3A 0F D3         ld a,(robots_robotsmax)
 86+  D335 32 46 D3         ld (robots_spawn+1),a
 87+  D338 32 9D D3         ld (robots_process8+1),a
 88+  D33B 32 CA D3         ld (robots_process0+1),a
 89+  D33E 3A 0E D3         ld a,(robots_robotspawnspeed)
 90+  D341 32 AE D3         ld (robots_process10+1),a
 91+  D344 C9               ret
 92+  D345
 93+  D345              ;
 94+  D345              ; Spawns a new robot
 95+  D345              ; Inputs:
 96+  D345              ; ix - pointer to start of robot array entry
 97+  D345              ;
 98+  D345              robots_spawn:
 99+  D345 06 03            ld b,3                      ;(SELF WRITING CODE)
100+  D347 DD 21 E0 D2      ld ix,robots_robots
101+  D34B              robots_spawn0:
102+  D34B DD 7E 02         ld a,(ix+2)                 ; get the state
103+  D34E FE 00            cp 0
104+  D350 C2 7C D3         jp nz,robots_spawn1         ; if already active, move on
105+  D353 ED 4B 03 D3      ld bc,(robots_initcoords)
106+  D357 DD 71 00 DD      ld (ix),bc
106+  D35B 70 01
107+  D35D DD 36 02 01      ld (ix+2),1
108+  D361 DD 36 03 00      ld (ix+3),0
109+  D365 DD 36 04 00      ld (ix+4),0
110+  D369 DD 36 05 00      ld (ix+5),0
111+  D36D DD 36 06 00      ld (ix+6),0
112+  D371 3A 08 D3         ld a,(robots_numberactive)
113+  D374 3C               inc a
114+  D375 32 08 D3         ld (robots_numberactive),a  ; increase the number active
115+  D378 CD 44 D6         call robots_draw            ; draw initial frame
116+  D37B C9               ret
117+  D37C              robots_spawn1:
118+  D37C 11 07 00         ld de,7
119+  D37F DD 19            add ix,de
120+  D381 10 C8            djnz robots_spawn0
121+  D383 C9               ret
122+  D384              ;
123+  D384              ; Kills robot
124+  D384              ; Inputs:
125+  D384              ; ix - pointer to start of robot array entry
126+  D384              ;
127+  D384              robots_kill:
128+  D384 3A 08 D3         ld a,(robots_numberactive)
129+  D387 3D               dec a
130+  D388 32 08 D3         ld (robots_numberactive),a
131+  D38B DD 36 02 00      ld (ix+2),0                     ; set to inactive
132+  D38F C5               push bc
133+  D390 E5               push hl
134+  D391 06 01            ld b,1
135+  D393 CD 14 CD         call scores_addhundreds
136+  D396 E1               pop hl
137+  D397 C1               pop bc
138+  D398 C9               ret
139+  D399
140+  D399              ;
141+  D399              ; Processes the robots
142+  D399              ;
143+  D399              robots_process:
144+  D399 3A 08 D3         ld a,(robots_numberactive)              ; first, check if we need to spawn a new robot
145+  D39C              robots_process8:
146+  D39C FE 03            cp 3                                    ; 3 is the maximum
147+  D39E CA C9 D3         jp z,robots_process0                    ; if already three, nothing to do
148+  D3A1 3A 0E D3         ld a,(robots_robotspawnspeed)                ; now check the spawn speed timer
149+  D3A4 3D               dec a
150+  D3A5 32 0E D3         ld (robots_robotspawnspeed),a           ; store the spawn speed timer
151+  D3A8 FE 00            cp 0
152+  D3AA C2 C9 D3         jp nz,robots_process0                   ; if it hasn't reached zero yet, just move
153+  D3AD              robots_process10:
154+  D3AD 3E 04            ld a,4                                  ; SELF WRITING CODE
155+  D3AF 32 0E D3         ld (robots_robotspawnspeed),a                ; reset the spawn speed timer
156+  D3B2 3A 05 D3         ld a,(robots_spawntimer)                ; now check the spawn timer
157+  D3B5 FE 00            cp 0
158+  D3B7 C2 C5 D3         jp nz,robots_process1                   ; if it hasn't reached zero yet, just decrease
159+  D3BA 3E FA            ld a,250
160+  D3BC 32 05 D3         ld (robots_spawntimer),a                ; reset the spawn timer
161+  D3BF CD 45 D3         call robots_spawn                       ; spawn a robot
162+  D3C2 C3 C9 D3         jp robots_process0                      ; carry on
163+  D3C5              robots_process1:
164+  D3C5 3D               dec a
165+  D3C6 32 05 D3         ld (robots_spawntimer),a                ; decrease the spawn timer and store
166+  D3C9              robots_process0:
167+  D3C9 06 03            ld b,3                                  ; max number of robots (SELF WRITING CODE)
168+  D3CB DD 21 E0 D2      ld ix, robots_robots                    ; point ix at the robot array
169+  D3CF              robots_process2:
170+  D3CF C5               push bc
171+  D3D0 DD 7E 02         ld a,(ix+2)                             ; check the state
172+  D3D3 FE 00            cp 0
173+  D3D5 CA F1 D3         jp z,robots_process3                    ; if not active, move on
174+  D3D8 3A 07 D3         ld a,(robots_movetimer)
175+  D3DB              robots_process7:                            ; self writing code - the number in the comparison will be ovewritten
176+  D3DB FE 04            cp 4
177+  D3DD C2 F1 D3         jp nz,robots_process3                   ; can we move this frame
178+  D3E0 CD 44 D6         call robots_draw                        ; draw over existing
179+  D3E3 CD 16 D4         call robots_move                        ; move the
180+  D3E6 DD 7E 02         ld a,(ix+2)                             ; get the state again
181+  D3E9 FE 00            cp 0
182+  D3EB CA F1 D3         jp z,robots_process3                    ; move to next if this robot has become inactive
183+  D3EE CD 44 D6         call robots_draw                        ; draw the new robot
184+  D3F1              robots_process3:
185+  D3F1 C1               pop bc
186+  D3F2 11 07 00         ld de,7
187+  D3F5 DD 19            add ix,de
188+  D3F7 10 D6            djnz robots_process2
189+  D3F9 3A 06 D3         ld a,(robots_animtimer)
190+  D3FC 3C               inc a
191+  D3FD FE 08            cp 8
192+  D3FF C2 04 D4         jp nz,robots_process4
193+  D402 3E 00            ld a,0                                  ; reset if we reached max
194+  D404              robots_process4:
195+  D404 32 06 D3         ld (robots_animtimer),a
196+  D407 3A 07 D3         ld a,(robots_movetimer)                 ; increment the robot move timer
197+  D40A 3C               inc a
198+  D40B              robots_process6:                            ; self writing code - the number in the comparison will be ovewritten
199+  D40B FE 05            cp 5                                    ; there is another reference to this number above
200+  D40D C2 12 D4         jp nz,robots_process5
201+  D410 3E 00            ld a,0
202+  D412              robots_process5:
203+  D412 32 07 D3         ld (robots_movetimer),a
204+  D415
205+  D415 C9               ret
206+  D416
207+  D416
208+  D416              ;
209+  D416              ; Moves a robot
210+  D416              ; Inputs:
211+  D416              ; ix - points to first byte of robot in array
212+  D416              robots_move:
213+  D416 DD 7E 02         ld a,(ix+2)                             ; get the state
214+  D419 FE 02            cp 2
215+  D41B CA 4C D4         jp z,robots_move4                       ; don't move if shot, just change the anim
216+  D41E 3A 06 D3         ld a,(robots_animtimer)                 ; get the anim timer
217+  D421 FE 07            cp 7                                    ; compare with 8
218+  D423 C2 36 D4         jp nz,robots_move1                       ; if even, don't increment frame
219+  D426 DD 7E 04         ld a,(ix+4)                             ; get the anim frame
220+  D429 06 08            ld b,8
221+  D42B 80               add a,b                                 ; add to anim frame
222+  D42C FE 20            cp 32
223+  D42E C2 33 D4         jp nz,robots_move0                      ; if not 32, then just store
224+  D431 3E 00            ld a,0                                  ; otherwise, reset
225+  D433              robots_move0:
226+  D433 DD 77 04         ld (ix+4),a                             ; store
227+  D436              robots_move1:
228+  D436 DD 7E 05         ld a,(ix+5)
229+  D439 FE 00            cp 0                                    ; are we automoving
230+  D43B CA 44 D4         jp z,robots_move2                       ; if not, keep directions
231+  D43E CD 60 D4         call robots_automove
232+  D441 C3 48 D4         jp robots_move3
233+  D444              robots_move2:
234+  D444 CD 95 D4         call robots_checkdirectionsandmove
235+  D447 C9               ret
236+  D448              robots_move3:
237+  D448 CD 8D D6         call robots_checkforplayer              ; check to see if we collided with a player
238+  D44B C9               ret
239+  D44C              robots_move4:
240+  D44C DD 7E 04         ld a,(ix+4)
241+  D44F FE 48            cp 72
242+  D451 C2 5A D4         jp nz,robots_move5
243+  D454 3E 40            ld a,64
244+  D456 DD 77 04         ld (ix+4),a
245+  D459 C9               ret
246+  D45A              robots_move5:
247+  D45A 3E 48            ld a,72
248+  D45C DD 77 04         ld (ix+4),a
249+  D45F C9               ret
250+  D460
251+  D460
252+  D460              ;
253+  D460              ; Processes automove
254+  D460              ; Inputs:
255+  D460              ; ix - points to the current robot
256+  D460              ; a - number of frames left to move
257+  D460              robots_automove:
258+  D460 3D               dec a
259+  D461 DD 77 05         ld (ix+5),a                         ; store the decreased frames
260+  D464 DD 4E 00 DD      ld bc,(ix)                          ; get coords
260+  D468 46 01
261+  D46A DD 7E 06         ld a,(ix+6)                         ; get the direction
262+  D46D FE 00            cp 0                                ; left
263+  D46F CA 80 D4         jp z,robots_automove1
264+  D472 FE 02            cp 2                                ; up
265+  D474 CA 84 D4         jp z,robots_automove3
266+  D477 FE 03            cp 3                                ; down
267+  D479 CA 89 D4         jp z,robots_automove4
268+  D47C 04               inc b                               ; right
269+  D47D C3 8E D4         jp robots_automove2
270+  D480              robots_automove1:
271+  D480 05               dec b
272+  D481 C3 8E D4         jp robots_automove2
273+  D484              robots_automove3:
274+  D484 0D               dec c
275+  D485 0D               dec c
276+  D486 C3 8E D4         jp robots_automove2
277+  D489              robots_automove4:
278+  D489 0C               inc c
279+  D48A 0C               inc c
280+  D48B C3 8E D4         jp robots_automove2
281+  D48E              robots_automove2:
282+  D48E DD 71 00 DD      ld (ix),bc
282+  D492 70 01
283+  D494 C9               ret
284+  D495
285+  D495              ;
286+  D495              ; Checks if a robot can move in all directions, then picks one and moves there.
287+  D495              ; This looks complicated, but really what it does is:
288+  D495              ; 1) Look at the current direction
289+  D495              ; 2) Randomly determine which orthoganal direction check first
290+  D495              ; 3) If orthogonal can't be moved, keep going in direction we're going
291+  D495              ; 4) Otherwise, back the way we came
292+  D495              ; Inputs:
293+  D495              ; ix - points to the current robot
294+  D495              ;
295+  D495              robots_checkdirectionsandmove:
296+  D495 DD 7E 06         ld a,(ix+6)                 ; get the direction
297+  D498 FE 00            cp 0                        ; left
298+  D49A C2 C1 D4         jp nz,robots_checkdirectionsandmove0
299+  D49D                  ; random check
300+  D49D CD 85 C5         call game_getcurrentframe
301+  D4A0 E6 01            and 1                       ; odd or even
302+  D4A2 CA AE D4         jp z,robots_checkdirectionsandmove3
303+  D4A5 CD 47 D5         call robots_checkupthendown ; prefer up over down
304+  D4A8 FE 01            cp 1
305+  D4AA C8               ret z
306+  D4AB C3 B4 D4         jp robots_checkdirectionsandmove4
307+  D4AE              robots_checkdirectionsandmove3:
308+  D4AE CD 3D D5         call robots_checkdownthenup ; prefer down over up
309+  D4B1 FE 01            cp 1
310+  D4B3 C8               ret z
311+  D4B4              robots_checkdirectionsandmove4:
312+  D4B4                  ; check left
313+  D4B4 CD CD D5         call robots_checkleftandmove
314+  D4B7 FE 01            cp 1
315+  D4B9 C8               ret z                       ; if we moved, don't check again
316+  D4BA                  ; check right
317+  D4BA CD 06 D6         call robots_checkrightandmove
318+  D4BD FE 01            cp 1
319+  D4BF C8               ret z                       ; if we moved, don't check again
320+  D4C0                  ; if we're here and haven't moved...
321+  D4C0 C9               ret
322+  D4C1              robots_checkdirectionsandmove0
323+  D4C1 FE 01            cp 1                        ; right
324+  D4C3 C2 EA D4         jp nz,robots_checkdirectionsandmove1
325+  D4C6                  ; ALREADY MOVING RIGHT
326+  D4C6                  ; random check
327+  D4C6 CD 85 C5         call game_getcurrentframe
328+  D4C9 E6 01            and 1                       ; odd or even
329+  D4CB CA D7 D4         jp z,robots_checkdirectionsandmove5
330+  D4CE CD 3D D5         call robots_checkdownthenup ; prefer down over up
331+  D4D1 FE 01            cp 1
332+  D4D3 C8               ret z
333+  D4D4 C3 DD D4         jp robots_checkdirectionsandmove6
334+  D4D7              robots_checkdirectionsandmove5:
335+  D4D7 CD 47 D5         call robots_checkupthendown ; prefer down over up
336+  D4DA FE 01            cp 1
337+  D4DC C8               ret z
338+  D4DD              robots_checkdirectionsandmove6:
339+  D4DD                  ; check right
340+  D4DD CD 06 D6         call robots_checkrightandmove
341+  D4E0 FE 01            cp 1
342+  D4E2 C8               ret z                       ; if we moved, don't check again
343+  D4E3                  ; check left
344+  D4E3 CD CD D5         call robots_checkleftandmove
345+  D4E6 FE 01            cp 1
346+  D4E8 C8               ret z                       ; if we moved, don't check again
347+  D4E9                  ; if we're here and haven't moved...
348+  D4E9 C9               ret
349+  D4EA              robots_checkdirectionsandmove1
350+  D4EA FE 02            cp 2                        ; up
351+  D4EC C2 13 D5         jp nz,robots_checkdirectionsandmove2
352+  D4EF                  ; ALREADY MOVING UP
353+  D4EF                  ; random check
354+  D4EF CD 85 C5         call game_getcurrentframe
355+  D4F2 E6 01            and 1                       ; odd or even
356+  D4F4 CA 00 D5         jp z,robots_checkdirectionsandmove7
357+  D4F7 CD 5D D5         call robots_checkleftthenright ; prefer left over right
358+  D4FA FE 01            cp 1
359+  D4FC C8               ret z
360+  D4FD C3 06 D5         jp robots_checkdirectionsandmove8
361+  D500              robots_checkdirectionsandmove7:
362+  D500 CD 53 D5         call robots_checkrightthenleft ; prefer right over left
363+  D503 FE 01            cp 1
364+  D505 C8               ret z
365+  D506              robots_checkdirectionsandmove8:
366+  D506                  ; check up
367+  D506 CD 69 D5         call robots_checkupandmove
368+  D509 FE 01            cp 1
369+  D50B C8               ret z                       ; if we moved, don't check again
370+  D50C                  ; check down
371+  D50C CD 9F D5         call robots_checkdownandmove
372+  D50F FE 01            cp 1
373+  D511 C8               ret z                       ; if we moved, don't check again
374+  D512                  ; if we're here and haven't moved...
375+  D512 C9               ret
376+  D513              robots_checkdirectionsandmove2
377+  D513                  ; ALREADY MOVING DOWN
378+  D513                  ; random check
379+  D513 CD 85 C5         call game_getcurrentframe
380+  D516 E6 01            and 1                       ; odd or even
381+  D518 CA 24 D5         jp z,robots_checkdirectionsandmove9
382+  D51B CD 53 D5         call robots_checkrightthenleft ; prefer right over left
383+  D51E FE 01            cp 1
384+  D520 C8               ret z
385+  D521 C3 2A D5         jp robots_checkdirectionsandmove10
386+  D524              robots_checkdirectionsandmove9:
387+  D524 CD 5D D5         call robots_checkleftthenright ; prefer left over right
388+  D527 FE 01            cp 1
389+  D529 C8               ret z
390+  D52A              robots_checkdirectionsandmove10:
391+  D52A                  ; check down
392+  D52A CD 9F D5         call robots_checkdownandmove
393+  D52D FE 01            cp 1
394+  D52F C8               ret z                       ; if we moved, don't check again
395+  D530                  ; check right first
396+  D530 CD 06 D6         call robots_checkrightandmove
397+  D533 FE 01            cp 1
398+  D535 C8               ret z                       ; if we moved, don't check again
399+  D536                  ; check up
400+  D536 CD 69 D5         call robots_checkupandmove
401+  D539 FE 01            cp 1
402+  D53B C8               ret z                       ; if we moved, don't check again
403+  D53C                  ; if we're here and haven't moved...
404+  D53C C9               ret
405+  D53D
406+  D53D              ;
407+  D53D              ; Different orders of checking directions, for pseudo random motion
408+  D53D              ;
409+  D53D              robots_checkdownthenup:
410+  D53D                  ; check down
411+  D53D CD 9F D5         call robots_checkdownandmove
412+  D540 FE 01            cp 1
413+  D542 C8               ret z                       ; if we moved, don't check again
414+  D543                  ; check up
415+  D543 CD 69 D5         call robots_checkupandmove
416+  D546 C9               ret
417+  D547
418+  D547              robots_checkupthendown:
419+  D547                  ; check up
420+  D547 CD 69 D5         call robots_checkupandmove
421+  D54A FE 01            cp 1
422+  D54C C8               ret z
423+  D54D                  ; check down
424+  D54D CD 9F D5         call robots_checkdownandmove
425+  D550 FE 01            cp 1
426+  D552 C9               ret
427+  D553              robots_checkrightthenleft:
428+  D553                  ; check right
429+  D553 CD 06 D6         call robots_checkrightandmove
430+  D556 FE 01            cp 1
431+  D558 C8               ret z                       ; if we moved, don't check again
432+  D559                  ; check left
433+  D559 CD CD D5         call robots_checkleftandmove
434+  D55C C9               ret
435+  D55D
436+  D55D              robots_checkleftthenright:
437+  D55D                  ; check left
438+  D55D CD CD D5         call robots_checkleftandmove
439+  D560 FE 01            cp 1
440+  D562 C8               ret z
441+  D563                  ; check right
442+  D563 CD 06 D6         call robots_checkrightandmove
443+  D566 FE 01            cp 1
444+  D568 C9               ret
445+  D569
446+  D569              ;
447+  D569              ; Checks up for movement
448+  D569              ; Outputs:
449+  D569              ; a - 1 if have moved
450+  D569              robots_checkupandmove:
451+  D569                  ; check above
452+  D569 DD 4E 00 DD      ld bc,(ix)                  ; load current coords into bc
452+  D56D 46 01
453+  D56F 79               ld a,c
454+  D570 FE 28            cp 40
455+  D572 D8               ret c
456+  D573 CD 09 AC         call sprites_scadd              ; get the memory location of cell into de
457+  D576 62 6B            ld hl,de                        ; look at cell directly above (subtract 32)
458+  D578 11 20 00         ld de,32
459+  D57B ED 52            sbc hl,de                       ; memory location of line above now in hl
460+  D57D 7E               ld a,(hl)                       ; get the contents of the line
461+  D57E FE 00            cp 0
462+  D580 C2 9C D5         jp nz,robots_checkupandmove0    ; can't move here so return
463+  D583 DD 4E 00 DD      ld bc,(ix)                  ; load current coords into bc
463+  D587 46 01
464+  D589 0D               dec c                       ; move up
465+  D58A 0D               dec c
466+  D58B DD 71 00 DD      ld (ix),bc
466+  D58F 70 01
467+  D591 DD 36 06 02      ld (ix+6),2
468+  D595 DD 36 05 03      ld (ix+5),3                 ; set the auto move frames
469+  D599 3E 01            ld a,1
470+  D59B C9               ret
471+  D59C              robots_checkupandmove0:
472+  D59C 3E 00            ld a,0
473+  D59E C9               ret
474+  D59F
475+  D59F              ;
476+  D59F              ; Checks down for movement
477+  D59F              ; Outputs:
478+  D59F              ; a - 1 if have moved
479+  D59F              robots_checkdownandmove:
480+  D59F                  ; check below
481+  D59F DD 4E 00 DD      ld bc,(ix)                  ; load current coords into bc
481+  D5A3 46 01
482+  D5A5 CD 09 AC         call sprites_scadd              ; get the memory location of cell into de
483+  D5A8 62 6B            ld hl,de                        ; look at cell directly underneath (add 256)
484+  D5AA 24               inc h                       ; memory location of cell beneath now in hl
485+  D5AB 7E               ld a,(hl)                       ; get the contents of the line
486+  D5AC FE 00            cp 0
487+  D5AE C2 CA D5         jp nz,robots_checkdownandmove0    ; can't move here so return
488+  D5B1 DD 4E 00 DD      ld bc,(ix)                  ; load current coords into bc
488+  D5B5 46 01
489+  D5B7 0C               inc c                       ; move up
490+  D5B8 0C               inc c
491+  D5B9 DD 71 00 DD      ld (ix),bc
491+  D5BD 70 01
492+  D5BF DD 36 06 03      ld (ix+6),3
493+  D5C3 DD 36 05 03      ld (ix+5),3                 ; set the auto move frames
494+  D5C7 3E 01            ld a,1
495+  D5C9 C9               ret
496+  D5CA              robots_checkdownandmove0:
497+  D5CA 3E 00            ld a,0
498+  D5CC C9               ret
499+  D5CD
500+  D5CD              ;
501+  D5CD              ; Checks left for movement
502+  D5CD              ; Outputs:
503+  D5CD              ; a - 1 if have moved
504+  D5CD              robots_checkleftandmove:
505+  D5CD                  ; check below
506+  D5CD DD 4E 00 DD      ld bc,(ix)                  ; load current coords into bc
506+  D5D1 46 01
507+  D5D3 CD 09 AC         call sprites_scadd              ; get the memory location of cell into de
508+  D5D6 62 6B            ld hl,de                        ; look at cell directly to the right (add 1)
509+  D5D8 78               ld a,b
510+  D5D9 06 08            ld b,8
511+  D5DB 90               sub b                           ; move one cell left
512+  D5DC 47               ld b,a
513+  D5DD 2B               dec hl                          ; memory location of cell to the right now in hl
514+  D5DE CD C5 C2         call movement_spaceisempty       ; check space is empty
515+  D5E1 7B               ld a,e                          ; check space empty flag
516+  D5E2 FE 00            cp 0
517+  D5E4 CA 03 D6         jp z,robots_checkleftandmove0    ; if zero can't move
518+  D5E7 DD 4E 00 DD      ld bc,(ix)                  ; load current coords into bc
518+  D5EB 46 01
519+  D5ED 05               dec b
520+  D5EE DD 71 00 DD      ld (ix),bc
520+  D5F2 70 01
521+  D5F4 DD 36 06 00      ld (ix+6),0
522+  D5F8 DD 36 05 07      ld (ix+5),7                 ; set the auto move frames
523+  D5FC DD 36 03 00      ld (ix+3),0                 ; set to right
524+  D600 3E 01            ld a,1
525+  D602 C9               ret
526+  D603              robots_checkleftandmove0:
527+  D603 3E 00            ld a,0
528+  D605 C9               ret
529+  D606
530+  D606              ;
531+  D606              ; Checks right for movement
532+  D606              ; Outputs:
533+  D606              ; a - 1 if have moved
534+  D606              robots_checkrightandmove:
535+  D606                  ; check below
536+  D606 DD 4E 00 DD      ld bc,(ix)                  ; load current coords into bc
536+  D60A 46 01
537+  D60C 78               ld a,b
538+  D60D FE E8            cp 232
539+  D60F CA 41 D6         jp z,robots_checkrightandmove0  ; can't move if at edge
540+  D612 CD 09 AC         call sprites_scadd              ; get the memory location of cell into de
541+  D615 62 6B            ld hl,de                        ; look at cell directly to the right (add 1)
542+  D617 3E 08            ld a,8
543+  D619 80               add b                           ; move one cell right
544+  D61A 47               ld b,a
545+  D61B 23               inc hl                          ; memory location of cell to the right now in hl
546+  D61C CD C5 C2         call movement_spaceisempty       ; check space is empty
547+  D61F 7B               ld a,e                          ; check space empty flag
548+  D620 FE 00            cp 0
549+  D622 CA 41 D6         jp z,robots_checkrightandmove0    ; if zero can't move
550+  D625 DD 4E 00 DD      ld bc,(ix)                  ; load current coords into bc
550+  D629 46 01
551+  D62B 04               inc b
552+  D62C DD 71 00 DD      ld (ix),bc
552+  D630 70 01
553+  D632 DD 36 06 01      ld (ix+6),1
554+  D636 DD 36 05 07      ld (ix+5),7                 ; set the auto move frames
555+  D63A DD 36 03 01      ld (ix+3),1                 ; set to right
556+  D63E 3E 01            ld a,1
557+  D640 C9               ret
558+  D641              robots_checkrightandmove0:
559+  D641 3E 00            ld a,0
560+  D643 C9               ret
561+  D644
562+  D644              ;
563+  D644              ; Draws a robot
564+  D644              ; Inputs:
565+  D644              ; ix - points to first byte of robot in array
566+  D644              robots_draw:
567+  D644 DD 4E 00 DD      ld bc,(ix)
567+  D648 46 01
568+  D64A 21 94 BF         ld hl,robot_sprite                      ; set to the robot sprite
569+  D64D DD 7E 02         ld a,(ix+2)                             ; get the state
570+  D650 FE 02            cp 2                                    ; is this dying
571+  D652 CA 6D D6         jp z,robots_draw1
572+  D655              robots_draw3:
573+  D655 DD 7E 03         ld a,(ix+3)                             ; get the direction
574+  D658 FE 00            cp 0
575+  D65A CA 61 D6         jp z,robots_draw0                       ; if left, nothing to do
576+  D65D 11 20 00         ld de,32
577+  D660 19               add hl,de                               ; add four frames to sprite
578+  D661              robots_draw0:
579+  D661 DD 7E 04         ld a,(ix+4)                             ; get the anim frame
580+  D664 11 00 00         ld de,0
581+  D667 5F               ld e,a
582+  D668 19               add hl,de                               ; add to base
583+  D669 CD 14 AB         call sprites_drawsprite
584+  D66C C9               ret
585+  D66D              ;
586+  D66D              ; Dying
587+  D66D              ;
588+  D66D              robots_draw1:
589+  D66D DD 7E 05         ld a,(ix+5)                             ; get anim frames
590+  D670 FE 00            cp 0                                    ; if zero this is the first time around
591+  D672 C2 7D D6         jp nz,robots_draw2
592+  D675 3E 18            ld a,24
593+  D677 DD 77 05         ld (ix+5),a                             ; load up the anim frames
594+  D67A C3 55 D6         jp robots_draw3                         ; return to main loop to draw as normal
595+  D67D              robots_draw2:
596+  D67D 3D               dec a
597+  D67E DD 77 05         ld (ix+5),a
598+  D681 FE 00            cp 0                                    ; have we reached the end yet
599+  D683 C2 89 D6         jp nz, robots_draw4
600+  D686 CD 84 D3         call robots_kill
601+  D689              robots_draw4:
602+  D689 C3 61 D6         jp robots_draw0
603+  D68C C9               ret
604+  D68D
605+  D68D              ;
606+  D68D              ; Checks to see if the robot is hitting a player
607+  D68D              ; Inputs:
608+  D68D              ; ix - memory location of robot we're checking
609+  D68D              robots_checkforplayer:
610+  D68D 3A E6 C5         ld a,(player+11)     ; get player state
611+  D690 FE 00            cp 0
612+  D692 C0               ret nz               ; if already dying, don't kill again
613+  D693 DD 4E 00 DD      ld bc,(ix)           ; get coords
613+  D697 46 01
614+  D699 ED 5B DB C5      ld de,(player)       ; get the player coords
615+  D69D 7B               ld a,e               ; get the vert coord first
616+  D69E 91               sub c                ; subtract the diamond vertical coord from players
617+  D69F C6 08            add 8                ; add the max distance
618+  D6A1 FE 11            cp 17                ; compare to max*2+1? if carry flag set, they've hit
619+  D6A3 D0               ret nc               ; if not, hasn't hit
620+  D6A4 7A               ld a,d               ; get the player horiz coord
621+  D6A5 90               sub b                ; subtract rock coord
622+  D6A6 C6 08            add 8                ; add max distance
623+  D6A8 FE 11            cp 17                ; compare to max*2+1? if carry flag set, they've hit
624+  D6AA D0               ret nc
625+  D6AB DD 36 02 00      ld (ix+2),0          ; mark as inactive
626+  D6AF CD 16 C7         call player_robotkillplayer ; mark the player as killed
627+  D6B2 C9               ret
# file closed: game/robots.asm
168   D6B3                  include "game\bullet.asm"
# file opened: game/bullet.asm
  1+  D6B3              ;
  2+  D6B3              ; Current state: x & y coords (screen), direction (0 left, 1 right), state
  3+  D6B3              ;
  4+  D6B3              bullet_state:
  5+  D6B3 00 00 00 00      defb 0,0,0,0
  6+  D6B7
  7+  D6B7              ;
  8+  D6B7              ; Initialise a the bullet
  9+  D6B7              ;
 10+  D6B7              bullet_init:
 11+  D6B7 DD 21 B3 D6      ld ix,bullet_state
 12+  D6BB DD 36 00 00      ld (ix),0
 13+  D6BF DD 36 01 00      ld (ix+1),0
 14+  D6C3 DD 36 02 00      ld (ix+2),0
 15+  D6C7 DD 36 03 00      ld (ix+3),0
 16+  D6CB C9               ret
 17+  D6CC
 18+  D6CC              ;
 19+  D6CC              ; Shoots the bullet
 20+  D6CC              ;
 21+  D6CC              bullet_shoot:
 22+  D6CC DD 21 B3 D6      ld ix,bullet_state
 23+  D6D0 ED 4B DB C5      ld bc,(player)              ; get the player coords
 24+  D6D4 3A DD C5         ld a,(player+2)             ; get the player direction
 25+  D6D7 FE 01            cp 1                        ; going left?
 26+  D6D9 CA E7 D6         jp z,bullet_shoot0
 27+  D6DC 3E 08            ld a,8
 28+  D6DE 80               add a,b                     ; going right so add eight to start coords
 29+  D6DF 47               ld b,a
 30+  D6E0 DD 36 02 01      ld (ix+2),1                 ; set right
 31+  D6E4 C3 F0 D6         jp bullet_shoot1
 32+  D6E7              bullet_shoot0:
 33+  D6E7 78               ld a,b
 34+  D6E8 06 08            ld b,8
 35+  D6EA 90               sub b
 36+  D6EB 47               ld b,a                      ; going left so subtract eight to start coords
 37+  D6EC DD 36 02 00      ld (ix+2),0                 ; set right
 38+  D6F0              bullet_shoot1:
 39+  D6F0 DD 71 00 DD      ld (ix),bc        ; store coords
 39+  D6F4 70 01
 40+  D6F6 DD 36 03 01      ld (ix+3),1       ; set state to 1
 41+  D6FA CD 50 D7         call bullet_draw ; draw the initial frame
 42+  D6FD C9               ret
 43+  D6FE
 44+  D6FE              ;
 45+  D6FE              ; Performs bullet processing
 46+  D6FE              ;
 47+  D6FE              bullet_process:
 48+  D6FE 3A B6 D6         ld a,(bullet_state+3)       ; get the state
 49+  D701 FE 00            cp 0
 50+  D703 C8               ret z                       ; don't draw if this has become inactive
 51+  D704 CD 50 D7         call bullet_draw            ; delete current frame
 52+  D707 CD 14 D7         call bullet_move            ; move the bullet
 53+  D70A 3A B6 D6         ld a,(bullet_state+3)       ; get the state
 54+  D70D FE 00            cp 0
 55+  D70F C8               ret z                       ; don't draw if this has become inactive
 56+  D710 CD 50 D7         call bullet_draw            ; draw new frame
 57+  D713 C9               ret
 58+  D714
 59+  D714              ;
 60+  D714              ; Moves the bullet, checking for collisions
 61+  D714              ;
 62+  D714              bullet_move:
 63+  D714 DD 21 B3 D6      ld ix,bullet_state
 64+  D718 DD 4E 00 DD      ld bc,(ix)
 64+  D71C 46 01
 65+  D71E DD 7E 02         ld a,(ix+2)                 ; get the direction
 66+  D721 FE 00            cp 0                        ; going left?
 67+  D723 CA 2D D7         jp z,bullet_move0
 68+  D726 3E 08            ld a,8
 69+  D728 80               add b
 70+  D729 47               ld b,a                      ; add 8 since going right
 71+  D72A C3 32 D7         jp bullet_move1
 72+  D72D              bullet_move0:
 73+  D72D 78               ld a,b
 74+  D72E 06 08            ld b,8
 75+  D730 90               sub b
 76+  D731 47               ld b,a                      ; subtract 8 since going left
 77+  D732              bullet_move1:
 78+  D732 DD 71 00 DD      ld (ix),bc                  ; store new coords
 78+  D736 70 01
 79+  D738 C5               push bc
 80+  D739 CD 5D D7         call bullets_checkforrobot
 81+  D73C C1               pop bc
 82+  D73D FE 01            cp 1                        ; if we hit a robot, keep moving
 83+  D73F C8               ret z
 84+  D740 CD 09 AC         call sprites_scadd          ; get memory loc of this block into de
 85+  D743 21 60 00         ld hl,96
 86+  D746 19               add hl,de
 87+  D747 7E               ld a,(hl)                   ; get the content
 88+  D748 FE 00            cp 0
 89+  D74A C8               ret z                       ; if empty, continue
 90+  D74B DD 36 03 00      ld (ix+3),0                 ; otherwise, mark bullet as inactive
 91+  D74F C9               ret
 92+  D750
 93+  D750              ;
 94+  D750              ; Draw the bullet
 95+  D750              ;
 96+  D750              bullet_draw:
 97+  D750 ED 4B B3 D6      ld bc,(bullet_state)        ; get coords
 98+  D754 3E 1B            ld a,27
 99+  D756 CD 8F AA         call screen_getblock        ; get the block address
100+  D759 CD 14 AB         call sprites_drawsprite     ; draw the sprite
101+  D75C C9               ret
102+  D75D
103+  D75D              ;
104+  D75D              ; Checks to see if the robot is hitting a bullet
105+  D75D              ; Outputs:
106+  D75D              ; a = 0 if not robot hit
107+  D75D              ; a = 1 if robot not hit
108+  D75D              bullets_checkforrobot:
109+  D75D 3E 00            ld a,0
110+  D75F 32 B3 D7         ld (bullets_tmp),a
111+  D762 3A 0F D3         ld a,(robots_robotsmax) ; robots to check
112+  D765 47               ld b,a
113+  D766 FD 21 E0 D2      ld iy,robots_robots   ; start of robot array
114+  D76A              bullets_checkforrobot0:
115+  D76A C5               push bc
116+  D76B FD 7E 02         ld a,(iy+2)             ; get the state
117+  D76E FE 01            cp 1
118+  D770 C2 A7 D7         jp nz,bullets_checkforrobot1 ; if not active, don't check
119+  D773 FD 5E 00 FD      ld de,(iy)              ; get robot coords
119+  D777 56 01
120+  D779 7A               ld a,d
121+  D77A E6 F8            and 248                 ; get nearest multiple of 8
122+  D77C 57               ld d,a
123+  D77D ED 4B B3 D6      ld bc,(bullet_state)    ; get bullet coords
124+  D781 7A               ld a,d               ; get the player horiz coord
125+  D782 90               sub b                ; subtract robot coord
126+  D783 FE 00            cp 0                ; should be the same
127+  D785 C2 91 D7         jp nz,bullets_checkforrobot2 ; if not, might have hit, so check the next char along... if matched, check vert
128+  D788 3E 08            ld a,8
129+  D78A 82               add a,d
130+  D78B 90               sub b                ; check again for the next char along
131+  D78C FE 00            cp 0
132+  D78E C2 A7 D7         jp nz,bullets_checkforrobot1 ; if not, haven't hit
133+  D791              bullets_checkforrobot2:
134+  D791 7B               ld a,e               ; get the vert coord
135+  D792 91               sub c                ; subtract the bullet vertical coord from robots
136+  D793 C6 04            add 4                ; add the max distance
137+  D795 FE 09            cp 9                ; compare to max*2+1? if carry flag set, they've hit
138+  D797 D2 A7 D7         jp nc,bullets_checkforrobot1   ; if not, hasn't hit
139+  D79A FD 36 02 02      ld (iy+2),2             ; mark the robot as killed
140+  D79E FD 36 05 00      ld (iy+5),0             ; mark the anim frames as zero
141+  D7A2 3E 01            ld a,1
142+  D7A4 32 B3 D7         ld (bullets_tmp),a      ; hit the flag to say we killed a robot
143+  D7A7              bullets_checkforrobot1:
144+  D7A7 11 07 00         ld de,7
145+  D7AA FD 19            add iy,de              ; move to next robot
146+  D7AC C1               pop bc
147+  D7AD 10 BB            djnz bullets_checkforrobot0
148+  D7AF 3A B3 D7         ld a,(bullets_tmp)
149+  D7B2 C9               ret
150+  D7B3
151+  D7B3              bullets_tmp:
152+  D7B3 00               defb 0
153+  D7B4
# file closed: game/bullet.asm
169   D7B4
170   D7B4              ;===========================================================================
171   D7B4              ; Stack.
172   D7B4              ;===========================================================================
173   D7B4
174   D7B4              ; Stack: this area is reserved for the stack
175   D7B4              STACK_SIZE: equ 100    ; in words
176   D7B4
177   D7B4              ; Reserve stack space
178   D7B4 00 00            defw 0  ; WPMEM, 2
179   D7B6              stack_bottom:
180   D7B6 00 00 00...      defs    STACK_SIZE*2, 0
181   D87E              stack_top:
182   D87E 00 00            defw 0  ; WPMEM, 2
183   D880
184   D880                     SAVESNA "./dist/ThePit.sna", main
185   D880                     ;SAVETAP "./dist/ThePit.tap", main
# file closed: main.asm
