# file opened: main.asm
  1   0000                  DEVICE ZXSPECTRUM48
  2   0000
  3   0000                  ORG $8000
  4   8000
  5   8000              ;===========================================================================
  6   8000              ; Persistent watchpoint.
  7   8000              ; Change WPMEMx (remove the 'x' from WPMEMx) below to activate.
  8   8000              ; If you do so the program will hit a breakpoint when it tries to
  9   8000              ; write to the first byte of the 3rd line.
 10   8000              ; When program breaks in the fill_memory sub routine please hover over hl
 11   8000              ; to see that it contains 0x5804 or COLOR_SCREEN+64.
 12   8000              ;===========================================================================
 13   8000
 14   8000              ; WPMEMx 0x5840, 1, w
 15   8000
 16   8000
 17   8000              ;===========================================================================
 18   8000              ; Include modules
 19   8000              ;===========================================================================
 20   8000                  include "init.asm"
# file opened: init.asm
  1+  8000              ;
  2+  8000              ; Set up at start up
  3+  8000              ;
  4+  8000              init_start:
  5+  8000              ; We want a black screen.
  6+  8000
  7+  8000 3E 47            ld a,71             ; white ink (7) on black paper (0),
  8+  8002                                      ; bright (64).
  9+  8002 CD 67 80         call utilities_clearscreen
 10+  8005 32 8D 5C         ld (23693),a        ; set our screen colours.
 11+  8008 AF               xor a               ; quick way to load accumulator with zero.
 12+  8009 CD 9B 22         call 8859           ; set permanent border colours.
 13+  800C
 14+  800C 21 1C A7         ld hl,screen_offset ; reset some temp variables
 15+  800F 36 00            ld (hl),0
 16+  8011 21 1D A7         ld hl,screen_tmp
 17+  8014 36 00            ld (hl),0
 18+  8016 21 B4 A5         ld hl,buffer_tmp
 19+  8019 36 00            ld (hl),0
 20+  801B 23               inc hl
 21+  801C 36 00            ld (hl),0
 22+  801E
 23+  801E CD 34 B9         call game_resetcurrentframe ; reset current frame
 24+  8021
 25+  8021 C9               ret
 26+  8022
 27+  8022              ;
 28+  8022              ;   Start coord
 29+  8022              ;   vert c, horiz b
 30+  8022              init_coord:
 31+  8022 18 30            defb 24,48
 32+  8024
 33+  8024              ;
 34+  8024              ; Number of lives to start
 35+  8024              ;
 36+  8024              init_lives:
 37+  8024 03               defb 3
 38+  8025
 39+  8025              ;
 40+  8025              ; Score to start
 41+  8025              ;
 42+  8025              init_score:
 43+  8025 30 30 30 30      defb '000000'
 43+  8029 30 30
# file closed: init.asm
 21   802B                  include "utilities.asm"
# file opened: utilities.asm
  1+  802B              ; ##########################################################################
  2+  802B              ; Print a character
  3+  802B              ; Inputs:
  4+  802B              ; b - x coord
  5+  802B              ; c - y coord
  6+  802B              ; d - character
  7+  802B              ; e - colour
  8+  802B              ; ##########################################################################
  9+  802B              utilities_print_char:
 10+  802B 7B               ld a,e
 11+  802C 32 8F 5C         ld (23695),a        ; set our temporary screen colours.
 12+  802F 3E 16            ld a,22
 13+  8031 D7               rst 16              ; Calls the Sinclair PRINT AT routine
 14+  8032 78               ld a,b              ; Gets the X co-ordinate
 15+  8033 3D               dec a
 16+  8034 D7               rst 16
 17+  8035 79               ld a,c              ; and the Y co-ordinate
 18+  8036 D7               rst 16              ; So, essentially PRINT AT X,Y; like in BASIC
 19+  8037 7A               ld a,d              ; ASCII code for udg.
 20+  8038 D7               rst 16              ; draw block.
 21+  8039 C9               ret
 22+  803A
 23+  803A
 24+  803A              ;Inputs:
 25+  803A              ;     DE and A are factors
 26+  803A              ;Outputs:
 27+  803A              ;     A is not changed
 28+  803A              ;     B is 0
 29+  803A              ;     C is not changed
 30+  803A              ;     DE is not changed
 31+  803A              ;     HL is the product
 32+  803A              ;Time:
 33+  803A              ;     342+6x
 34+  803A              ;
 35+  803A              utilities_multiply:
 36+  803A 06 08            ld b,8          ;7           7
 37+  803C 21 00 00         ld hl,0         ;10         10
 38+  803F 29               add hl,hl     ;11*8       88
 39+  8040 07               rlca          ;4*8        32
 40+  8041 30 01            jr nc,$+3     ;(12|18)*8  96+6x
 41+  8043 19                   add hl,de   ;--         --
 42+  8044 10 F9            djnz $-5      ;13*7+8     99
 43+  8046 C9               ret             ;10         10
 44+  8047
 45+  8047              utilities_waitforkey:
 46+  8047 21 08 5C         ld hl,23560         ; LAST K system variable.
 47+  804A 36 00            ld (hl),0           ; put null value there.
 48+  804C              utilities_waitforkey0:
 49+  804C 7E               ld a,(hl)           ; new value of LAST K.
 50+  804D FE 00            cp 0                ; is it still zero?
 51+  804F 28 FB            jr z,utilities_waitforkey0           ; yes, so no key pressed.
 52+  8051 C9               ret                 ; key was pressed.
 53+  8052
 54+  8052              ;
 55+  8052              ; Waits number of frames for keypress. If got, returns 1, if not 0
 56+  8052              ; Inputs:
 57+  8052              ; a - number of frames to waits
 58+  8052              ; Ouputs:
 59+  8052              ; e - 0 not pressed, 1 pressed
 60+  8052              utilities_waitforkey_forframes:
 61+  8052 21 08 5C         ld hl,23560         ; LAST K system variable.
 62+  8055 36 00            ld (hl),0           ; put null value there.
 63+  8057 47               ld b,a              ; number of frames to wait
 64+  8058              utilities_waitforkey_forframes0:
 65+  8058 7E               ld a,(hl)           ; new value of LAST K.
 66+  8059 FE 00            cp 0                ; is it still zero?
 67+  805B 28 03            jr z,utilities_waitforkey_forframes1           ; yes, so no key pressed.
 68+  805D 1E 01            ld e,1              ; set the pressed flag
 69+  805F C9               ret                 ; key was pressed.
 70+  8060              utilities_waitforkey_forframes1:
 71+  8060 76               halt                ; wait for frame
 72+  8061 76               halt                ; wait for frame
 73+  8062 10 F4            djnz utilities_waitforkey_forframes0 ; loop again
 74+  8064 1E 00            ld e,0              ; nothing pressed in time
 75+  8066 C9               ret
 76+  8067
 77+  8067              ;
 78+  8067              ; Clears the screen
 79+  8067              ; Inputs:
 80+  8067              ; a - attribute colour
 81+  8067              utilities_clearscreen:
 82+  8067 76               halt
 83+  8068 21 00 58         ld hl,22528         ; attr
 84+  806B 11 01 58         ld de,22529         ; attr+1
 85+  806E 01 FF 02         ld bc,767
 86+  8071 77               ld (hl),a
 87+  8072 ED B0            ldir
 88+  8074
 89+  8074 21 00 40         ld hl, 16384        ;pixels
 90+  8077 11 01 40         ld de, 16385        ;pixels + 1
 91+  807A 01 FF 17         ld bc, 6143         ;pixels area length - 1
 92+  807D 36 00            ld (hl), 0          ;set first byte to '0'
 93+  807F ED B0            ldir                ;copy bytes
 94+  8081
 95+  8081 C9               ret
 96+  8082
 97+  8082              ;
 98+  8082              ; Wait for a number of frames
 99+  8082              ; Inputs:
100+  8082              ; b - number of frames
101+  8082              utilities_pauseforframes:
102+  8082 76               halt
103+  8083 10 FD            djnz utilities_pauseforframes
104+  8085 C9               ret
105+  8086
106+  8086              utilities_readkey:
107+  8086 21 A6 80         LD HL,utilties_keymap              ; Point HL at the keyboard list
108+  8089 16 08            LD D,8                                  ; This is the number of ports (rows) to check
109+  808B 0E FE            LD C,$FE                            ; C is always FEh for reading keyboard ports
110+  808D              utilities_readkey_0:
111+  808D 46               LD B,(HL)                               ; Get the keyboard port address from table
112+  808E 23               INC HL                                  ; Increment to list of keys
113+  808F ED 78            IN A,(C)                                ; Read the row of keys in
114+  8091 E6 1F            AND $1F                                     ; We are only interested in the first five bits
115+  8093 1E 05            LD E,5                                  ; This is the number of keys in the row
116+  8095              utilities_readkey_1:
117+  8095 CB 3F            SRL A                                   ; Shift A right; bit 0 sets carry bit
118+  8097 30 0B            JR NC,utilities_readkey_2   ; If the bit is 0, we've found our key
119+  8099 23               INC HL                                  ; Go to next table address
120+  809A 1D               DEC E                                   ; Decrement key loop counter
121+  809B 20 F8            JR NZ,utilities_readkey_1   ; Loop around until this row finished
122+  809D 15               DEC D                                   ; Decrement row loop counter
123+  809E 20 ED            JR NZ,utilities_readkey_0   ; Loop around until we are done
124+  80A0 A7               AND A                                   ; Clear A (no key found)
125+  80A1 C3 86 80         jp utilities_readkey
126+  80A4              utilities_readkey_2:
127+  80A4 7E               LD A,(HL)                               ; We've found a key at this point; fetch the character code!
128+  80A5 C9               RET
129+  80A6
130+  80A6              utilties_keymap:
131+  80A6 FE 23 5A 58      defb $FE,"#","Z","X","C","V"
131+  80AA 43 56
132+  80AC FD 41 53 44      defb $FD,"A","S","D","F","G"
132+  80B0 46 47
133+  80B2 FB 51 57 45      defb $FB,"Q","W","E","R","T"
133+  80B6 52 54
134+  80B8 F7 31 32 33      defb $F7,"1","2","3","4","5"
134+  80BC 34 35
135+  80BE EF 30 39 38      defb $EF,"0","9","8","7","6"
135+  80C2 37 36
136+  80C4 DF 50 4F 49      defb $DF,"P","O","I","U","Y"
136+  80C8 55 59
137+  80CA BF 23 4C 4B      defb $BF,"#","L","K","J","H"
137+  80CE 4A 48
138+  80D0 7F 20 23 4D      defb $7F," ","#","M","N","B"
138+  80D4 4E 42
139+  80D6
140+  80D6              ;
141+  80D6              ; Generates a random number
142+  80D6              ; Outputs:
143+  80D6              ; a - random 8 bit number
144+  80D6              ;
145+  80D6              utilities_random:
146+  80D6 2A E3 80         ld hl,(utilities_seed) ; Pointer
147+  80D9 7C               ld a,h
148+  80DA E6 1F            and 31 ; keep it within first 8k of ROM.
149+  80DC 67               ld h,a
150+  80DD 7E               ld a,(hl) ; Get "random" number from location.
151+  80DE 23               inc hl ; Increment pointer.
152+  80DF 22 E3 80         ld (utilities_seed),hl
153+  80E2 C9               ret
154+  80E3              utilities_seed:
155+  80E3 00 00            defw 0
156+  80E5
157+  80E5              ;
158+  80E5              ; Generates a random number in the range 0 to e
159+  80E5              ; Inputs:
160+  80E5              ; e - upper value
161+  80E5              ; Outputs:
162+  80E5              ; a - random number
163+  80E5              utilities_randomupper
164+  80E5 CD D6 80         call utilities_random
165+  80E8 6F               ld l,a
166+  80E9 26 00            ld h,0
167+  80EB 16 00            ld d,0
168+  80ED 42 4B            ld bc,de
169+  80EF              utilities_randomupper0:
170+  80EF B7               or a
171+  80F0 ED 42            sbc hl,bc
172+  80F2 F2 EF 80         jp p,utilities_randomupper0
173+  80F5 09               add hl,bc
174+  80F6 01 00 00         ld bc,0
175+  80F9 09               add hl,bc
176+  80FA 7D               ld a,l
177+  80FB C9               ret
# file closed: utilities.asm
 22   80FC                  include "strings.asm"
# file opened: strings.asm
  1+  80FC              string_score1:
  2+  80FC 04 00 53 43      defb 4,0,'SCORE1',255
  2+  8100 4F 52 45 31
  2+  8104 FF
  3+  8105              string_scorenumbers1:
  4+  8105 04 01 30 30      defb 4,1,'000000',255
  4+  8109 30 30 30 30
  4+  810D FF
  5+  810E              string_company:
  6+  810E 0E 00 45 4E      defb 14,0,'ENV',255
  6+  8112 56 FF
  7+  8114              string_credits:
  8+  8114 0C 01 50 4C      defb 12,1,'PLAYER 1',255
  8+  8118 41 59 45 52
  8+  811C 20 31 FF
  9+  811F              string_score2:
 10+  811F 16 00 53 43      defb 22,0,'SCORE2',255
 10+  8123 4F 52 45 32
 10+  8127 FF
 11+  8128              string_scorenumbers2:
 12+  8128 16 01 30 30      defb 22,1,'000000',255
 12+  812C 30 30 30 30
 12+  8130 FF
 13+  8131              string_titlescreen_copyright:
 14+  8131 04 16 7F 20      defb 4,22, 127,' 1982 AW ZILEC ELC LTD',255
 14+  8135 31 39 38 32
 14+  8139 20 41 57 20
 14+  813D 5A 49 4C 45
 14+  8141 43 20 45 4C
 14+  8145 43 20 4C 54
 14+  8149 44 FF
 15+  814B
 16+  814B
 17+  814B              string_alttitlescreen_1:
 18+  814B 0C 00 43 52      defb 12,0,'CREDITS 1',255
 18+  814F 45 44 49 54
 18+  8153 53 20 31 FF
 19+  8157              string_alttitlescreen_2:
 20+  8157 00 02 20 20      defb 0,2,'           THE OBJECT',254
 20+  815B 20 20 20 20
 20+  815F 20 20 20 20
 20+  8163 20 54 48 45
 20+  8167 20 4F 42 4A
 20+  816B 45 43 54 FE
 21+  816F 00 03 20 20      defb 0,3,'          OF THIS GAME',254
 21+  8173 20 20 20 20
 21+  8177 20 20 20 20
 21+  817B 4F 46 20 54
 21+  817F 48 49 53 20
 21+  8183 47 41 4D 45
 21+  8187 FE
 22+  8188 00 04 20 20      defb 0,4,'         IS TO DIG DOWN',254
 22+  818C 20 20 20 20
 22+  8190 20 20 20 49
 22+  8194 53 20 54 4F
 22+  8198 20 44 49 47
 22+  819C 20 44 4F 57
 22+  81A0 4E FE
 23+  81A2 00 05 20 20      defb 0,5,'        TO THE BOTTOM PIT',254
 23+  81A6 20 20 20 20
 23+  81AA 20 20 54 4F
 23+  81AE 20 54 48 45
 23+  81B2 20 42 4F 54
 23+  81B6 54 4F 4D 20
 23+  81BA 50 49 54 FE
 24+  81BE 00 06 20 20      defb 0,6,'               AND',254
 24+  81C2 20 20 20 20
 24+  81C6 20 20 20 20
 24+  81CA 20 20 20 20
 24+  81CE 20 41 4E 44
 24+  81D2 FE
 25+  81D3 00 07 20 20      defb 0,7,'        COLLECT AT LEAST',254
 25+  81D7 20 20 20 20
 25+  81DB 20 20 43 4F
 25+  81DF 4C 4C 45 43
 25+  81E3 54 20 41 54
 25+  81E7 20 4C 45 41
 25+  81EB 53 54 FE
 26+  81EE 00 08 20 20      defb 0,8,'         ONE LARGE JEWEL',254
 26+  81F2 20 20 20 20
 26+  81F6 20 20 20 4F
 26+  81FA 4E 45 20 4C
 26+  81FE 41 52 47 45
 26+  8202 20 4A 45 57
 26+  8206 45 4C FE
 27+  8209 00 09 20 20      defb 0,9,'              THEN',254
 27+  820D 20 20 20 20
 27+  8211 20 20 20 20
 27+  8215 20 20 20 20
 27+  8219 54 48 45 4E
 27+  821D FE
 28+  821E 00 0A 20 20      defb 0,10,'         RETURN TO SHIP',254
 28+  8222 20 20 20 20
 28+  8226 20 20 20 52
 28+  822A 45 54 55 52
 28+  822E 4E 20 54 4F
 28+  8232 20 53 48 49
 28+  8236 50 FE
 29+  8238 00 0B 20 20      defb 0,11,'         THRU UPPER PIT',255
 29+  823C 20 20 20 20
 29+  8240 20 20 20 54
 29+  8244 48 52 55 20
 29+  8248 55 50 50 45
 29+  824C 52 20 50 49
 29+  8250 54 FF
 30+  8252              string_alttitlescreen_3:
 31+  8252 00 0D 20 20      defb 0,13,'    SINGLE BONUS  5000 POINTS',254
 31+  8256 20 20 53 49
 31+  825A 4E 47 4C 45
 31+  825E 20 42 4F 4E
 31+  8262 55 53 20 20
 31+  8266 35 30 30 30
 31+  826A 20 50 4F 49
 31+  826E 4E 54 53 FE
 32+  8272 00 0E 20 20      defb 0,14,'      COLLECT 1 LARGE JEWEL',254
 32+  8276 20 20 20 20
 32+  827A 43 4F 4C 4C
 32+  827E 45 43 54 20
 32+  8282 31 20 4C 41
 32+  8286 52 47 45 20
 32+  828A 4A 45 57 45
 32+  828E 4C FE
 33+  8290 00 0F 20 20      defb 0,15,'       AND RETURN TO SHIP',254
 33+  8294 20 20 20 20
 33+  8298 20 41 4E 44
 33+  829C 20 52 45 54
 33+  82A0 55 52 4E 20
 33+  82A4 54 4F 20 53
 33+  82A8 48 49 50 FE
 34+  82AC 00 11 20 20      defb 0,17,'    DOUBLE BONUS  10000 POINTS',254
 34+  82B0 20 20 44 4F
 34+  82B4 55 42 4C 45
 34+  82B8 20 42 4F 4E
 34+  82BC 55 53 20 20
 34+  82C0 31 30 30 30
 34+  82C4 30 20 50 4F
 34+  82C8 49 4E 54 53
 34+  82CC FE
 35+  82CD 00 12 20 20      defb 0,18,'    COLLECT ALL 3 LARGE JEWELS',254
 35+  82D1 20 20 43 4F
 35+  82D5 4C 4C 45 43
 35+  82D9 54 20 41 4C
 35+  82DD 4C 20 33 20
 35+  82E1 4C 41 52 47
 35+  82E5 45 20 4A 45
 35+  82E9 57 45 4C 53
 35+  82ED FE
 36+  82EE 00 13 20 20      defb 0,19,'       OR   ALL 4 SMALL JEWELS',254
 36+  82F2 20 20 20 20
 36+  82F6 20 4F 52 20
 36+  82FA 20 20 41 4C
 36+  82FE 4C 20 34 20
 36+  8302 53 4D 41 4C
 36+  8306 4C 20 4A 45
 36+  830A 57 45 4C 53
 36+  830E FE
 37+  830F 00 15 20 20      defb 0,21,'    TRIPLE BONUS  15000 POINTS',254
 37+  8313 20 20 54 52
 37+  8317 49 50 4C 45
 37+  831B 20 42 4F 4E
 37+  831F 55 53 20 20
 37+  8323 31 35 30 30
 37+  8327 30 20 50 4F
 37+  832B 49 4E 54 53
 37+  832F FE
 38+  8330 00 16 20 20      defb 0,22,'       COLLECT ALL 7 JEWELS',255
 38+  8334 20 20 20 20
 38+  8338 20 43 4F 4C
 38+  833C 4C 45 43 54
 38+  8340 20 41 4C 4C
 38+  8344 20 37 20 4A
 38+  8348 45 57 45 4C
 38+  834C 53 FF
 39+  834E
 40+  834E              string_lifescreen_player:
 41+  834E 0B 00 20 50      defb 11,0,' PLAYER 1 ',255
 41+  8352 4C 41 59 45
 41+  8356 52 20 31 20
 41+  835A FF
 42+  835B              string_lifescreen_lives:
 43+  835B 0B 03 30 20      defb 11,3,48,' MEN LEFT',255
 43+  835F 4D 45 4E 20
 43+  8363 4C 45 46 54
 43+  8367 FF
 44+  8368              string_lifescreen_lastman:
 45+  8368 0C 03 4C 41      defb 12,3,'LAST MAN',255
 45+  836C 53 54 20 4D
 45+  8370 41 4E FF
 46+  8373
 47+  8373              string_gameoverscreen_gameover:
 48+  8373 0C 06 47 41      defb 12,6,'GAME OVER',255
 48+  8377 4D 45 20 4F
 48+  837B 56 45 52 FF
 49+  837F              string_gameoverscreen_copyright:
 50+  837F 05 12 7F 20      defb 5,18,127,' 1982 AW ZILEC ELC LTD',255
 50+  8383 31 39 38 32
 50+  8387 20 41 57 20
 50+  838B 5A 49 4C 45
 50+  838F 43 20 45 4C
 50+  8393 43 20 4C 54
 50+  8397 44 FF
 51+  8399              string_gameoverscreen_bestscores:
 52+  8399 07 16 42 45      defb 7,22,'BEST SCORES TODAY',255
 52+  839D 53 54 20 53
 52+  83A1 43 4F 52 45
 52+  83A5 53 20 54 4F
 52+  83A9 44 41 59 FF
 53+  83AD              string_gameover_credits:
 54+  83AD 0C 01 43 52      defb 12,1,'CREDITS 0',255
 54+  83B1 45 44 49 54
 54+  83B5 53 20 30 FF
 55+  83B9
 56+  83B9              string_highscore_congratulations:
 57+  83B9 08 05 43 4F      defb 8,5,'CONGRATULATIONS',255
 57+  83BD 4E 47 52 41
 57+  83C1 54 55 4C 41
 57+  83C5 54 49 4F 4E
 57+  83C9 53 FF
 58+  83CB              string_highscore_player1:
 59+  83CB 0C 07 50 4C      defb 12,7,'PLAYER 1',255
 59+  83CF 41 59 45 52
 59+  83D3 20 31 FF
 60+  83D6              string_highscore_player2:
 61+  83D6 0C 07 50 4C      defb 12,7,'PLAYER 2',255
 61+  83DA 41 59 45 52
 61+  83DE 20 32 FF
 62+  83E1              string_highscore_youhaveearned:
 63+  83E1 08 0A 59 4F      defb 8,10,'YOU HAVE EARNED',255
 63+  83E5 55 20 48 41
 63+  83E9 56 45 20 45
 63+  83ED 41 52 4E 45
 63+  83F1 44 FF
 64+  83F3              string_highscore_place1:
 65+  83F3 06 0C 54 48      defb 6,12,'THE GREATEST SCORE',255
 65+  83F7 45 20 47 52
 65+  83FB 45 41 54 45
 65+  83FF 53 54 20 53
 65+  8403 43 4F 52 45
 65+  8407 FF
 66+  8408              string_highscore_place2:
 67+  8408 06 0C 54 48      defb 6,12,'THE 2ND BEST SCORE',255
 67+  840C 45 20 32 4E
 67+  8410 44 20 42 45
 67+  8414 53 54 20 53
 67+  8418 43 4F 52 45
 67+  841C FF
 68+  841D              string_highscore_place3:
 69+  841D 06 0C 54 48      defb 6,12,'THE 3RD BEST SCORE',255
 69+  8421 45 20 33 52
 69+  8425 44 20 42 45
 69+  8429 53 54 20 53
 69+  842D 43 4F 52 45
 69+  8431 FF
 70+  8432              string_highscore_pleaseenter
 71+  8432 03 0F 52 45      defb 3,15,'RECORD YOUR INITIALS BELOW',255
 71+  8436 43 4F 52 44
 71+  843A 20 59 4F 55
 71+  843E 52 20 49 4E
 71+  8442 49 54 49 41
 71+  8446 4C 53 20 42
 71+  844A 45 4C 4F 57
 71+  844E FF
 72+  844F
 73+  844F              string_endlevel_youhaveearned:
 74+  844F 08 0B 59 4F      defb 8,11,'YOU HAVE EARNED',255
 74+  8453 55 20 48 41
 74+  8457 56 45 20 45
 74+  845B 41 52 4E 45
 74+  845F 44 FF
 75+  8461              string_endlevel_bonus1:
 76+  8461 09 0D 53 49      defb 9,13,'SINGLE BONUS',255
 76+  8465 4E 47 4C 45
 76+  8469 20 42 4F 4E
 76+  846D 55 53 FF
 77+  8470              string_endlevel_bonus2:
 78+  8470 09 0D 44 4F      defb 9,13,'DOUBLE BONUS',255
 78+  8474 55 42 4C 45
 78+  8478 20 42 4F 4E
 78+  847C 55 53 FF
 79+  847F              string_endlevel_bonus3:
 80+  847F 09 0D 54 52      defb 9,13,'TRIPLE BONUS',255
 80+  8483 49 50 4C 45
 80+  8487 20 42 4F 4E
 80+  848B 55 53 FF
 81+  848E              string_endlevel_points1:
 82+  848E 0A 0F 35 30      defb 10,15,'5000 POINTS',255
 82+  8492 30 30 20 50
 82+  8496 4F 49 4E 54
 82+  849A 53 FF
 83+  849C              string_endlevel_points2:
 84+  849C 09 0F 31 30      defb 9,15,'10000 POINTS',255
 84+  84A0 30 30 30 20
 84+  84A4 50 4F 49 4E
 84+  84A8 54 53 FF
 85+  84AB              string_endlevel_points3:
 86+  84AB 09 0F 31 35      defb 9,15,'15000 POINTS',255
 86+  84AF 30 30 30 20
 86+  84B3 50 4F 49 4E
 86+  84B7 54 53 FF
 87+  84BA              string_endlevel_anothergo:
 88+  84BA 08 12 48 41      defb 8,18,'HAVE ANOTHER GO',255
 88+  84BE 56 45 20 41
 88+  84C2 4E 4F 54 48
 88+  84C6 45 52 20 47
 88+  84CA 4F FF
 89+  84CC              ;
 90+  84CC              ; Prints specified string
 91+  84CC              ; Inputs:
 92+  84CC              ; de: pointer to string
 93+  84CC              ; bc: length of string
 94+  84CC              ;
 95+  84CC              ; Print String Data
 96+  84CC              ; First two bytes of string contain X and Y char position, then the string
 97+  84CC              ; Individual strings are terminated with 0xFE
 98+  84CC              ; End of data is terminated with 0xFF
 99+  84CC              ; HL: Address of string
100+  84CC              ;
101+  84CC 5E           string_print:           LD E,(HL)                       ; Fetch the X coordinate
102+  84CD 23                                   INC HL                          ; Increase HL to the next memory location
103+  84CE 56                                   LD D,(HL)                       ; Fetch the Y coordinate
104+  84CF 23                                   INC HL                          ; Increase HL to the next memory location
105+  84D0 CD E3 84                             CALL string_getcharaddress           ; Calculate the screen address (in DE)
106+  84D3 7E           string_print_0:         LD A,(HL)                       ; Fetch the character to print
107+  84D4 23                                   INC HL                          ; Increase HL to the next character
108+  84D5 FE FE                                CP 0xFE                         ; Compare with 0xFE
109+  84D7 28 F3                                JR Z,string_print               ; If it is equal to 0xFE then loop back to print next string
110+  84D9 D0                                   RET NC                          ; If it is greater or equal to (carry bit set) then
111+  84DA E5                                   PUSH HL                         ; Push HL on stack (Print_Char will not preserve HL)
112+  84DB CD F3 84                             CALL Print_Char                 ; Print the character
113+  84DE E1                                   POP HL                          ; Retrieve HL back off the stack
114+  84DF 1C                                   INC E                           ; Go to the next screen address
115+  84E0 18 F1                                JR string_print_0               ; Loop back to print next character
116+  84E2 C9                                   RET
117+  84E3
118+  84E3              ; Get screen address
119+  84E3              ; D = Y character position
120+  84E3              ; E = X character position
121+  84E3              ; Returns address in DE
122+  84E3              ;
123+  84E3 7A           string_getcharaddress:       LD A,D
124+  84E4 E6 07                                AND %00000111
125+  84E6 1F                                   RRA
126+  84E7 1F                                   RRA
127+  84E8 1F                                   RRA
128+  84E9 1F                                   RRA
129+  84EA B3                                   OR E
130+  84EB 5F                                   LD E,A
131+  84EC 7A                                   LD A,D
132+  84ED E6 18                                AND %00011000
133+  84EF F6 40                                OR %01000000
134+  84F1 57                                   LD D,A
135+  84F2 C9                                   RET                             ; Returns screen address in DE
136+  84F3
137+  84F3              ; Print a single character out
138+  84F3              ; A:  Character to print
139+  84F3              ; DE: Screen address to print character at
140+  84F3              ;
141+  84F3 21 00 3C     Print_Char:             LD HL,0x3C00                    ; Address of character set table in ROM
142+  84F6 06 00                                LD B,0                          ; Set BC to A
143+  84F8 4F                                   LD C,A
144+  84F9 E6 FF                                AND 0xFF                        ; Clear the carry bit
145+  84FB CB 11                                RL C                            ; Multiply BC by 8 (shift left 3 times)
146+  84FD CB 10                                RL B
147+  84FF CB 11                                RL C
148+  8501 CB 10                                RL B
149+  8503 CB 11                                RL C
150+  8505 CB 10                                RL B
151+  8507 09                                   ADD HL,BC                       ; Get the character address in HL
152+  8508 0E 08                                LD C,8                          ; Loop counter
153+  850A D5                                   PUSH DE
154+  850B 7E           Print_Char_1:           LD A,(HL)                       ; Get the byte from the ROM into A
155+  850C 12                                   LD (DE),A                       ; Stick A onto the screen
156+  850D 14                                   INC D                           ; Goto next line on screen
157+  850E 2C                                   INC L                           ; Goto next byte of character
158+  850F 0D                                   DEC C                           ; Decrease the loop counter
159+  8510 20 F9                                JR NZ,Print_Char_1              ; Loop around whilst it is Not Zero (NZ)
160+  8512 D1                                   POP DE
161+  8513 C9                                   RET                             ; Return from the subroutine
# file closed: strings.asm
 23   8514                  include "screen\buffer.asm"
# file opened: screen/buffer.asm
  1+  8514              buffer_buffer:
  2+  8514 00 00 00...      defs 7424                   ; area reserved for screen
  3+  A214
  4+  A214              buffer_attr_buffer:
  5+  A214 00 00 00...      defs 928                    ; attrs buffer area
  6+  A5B4
  7+  A5B4              buffer_tmp:
  8+  A5B4 00 00            defb 0,0                    ; temp area
  9+  A5B6
 10+  A5B6              buffer_updatedlines:
 11+  A5B6 FF FF FF...      defs 21,255
 12+  A5CB
 13+  A5CB              buffer_updateall:
 14+  A5CB 00               defb 0
 15+  A5CC
 16+  A5CC              ;
 17+  A5CC              ; Stores a line number in the update list
 18+  A5CC              ; Inputs:
 19+  A5CC              ; a - row number
 20+  A5CC              buffer_marklineforupdate:
 21+  A5CC FE 15            cp 21
 22+  A5CE D0               ret nc                          ; dont store lines that we shouldn't draw
 23+  A5CF 5F               ld e,a                          ; store in e
 24+  A5D0 06 15            ld b,21
 25+  A5D2 21 B6 A5         ld hl,buffer_updatedlines
 26+  A5D5              buffer_marklineforupdate0:
 27+  A5D5 7E               ld a,(hl)                       ; get the line stored in updated lines
 28+  A5D6 BB               cp e                            ; is this the same as the row number passed in?
 29+  A5D7 C8               ret z                           ; if so, don't need to do anything
 30+  A5D8 FE FF            cp 255                          ; is this 255, ie the end of the buffer
 31+  A5DA C2 DF A5         jp nz,buffer_marklineforupdate1 ; if not, move to next
 32+  A5DD 73               ld (hl),e                       ; if it is, this spot is empty, so store the row number
 33+  A5DE C9               ret                             ; and finish
 34+  A5DF              buffer_marklineforupdate1:
 35+  A5DF 23               inc hl
 36+  A5E0 10 F3            djnz buffer_marklineforupdate0
 37+  A5E2 C9               ret
 38+  A5E3
 39+  A5E3              ;
 40+  A5E3              ; Zeroes the updated lines list
 41+  A5E3              ;
 42+  A5E3              buffer_clearlist:
 43+  A5E3 06 15            ld b,21
 44+  A5E5 21 B6 A5         ld hl,buffer_updatedlines
 45+  A5E8              buffer_clearlist0:
 46+  A5E8 36 FF            ld (hl),255
 47+  A5EA 23               inc hl
 48+  A5EB 10 FB            djnz buffer_clearlist0
 49+  A5ED C9               ret
 50+  A5EE
 51+  A5EE              ;
 52+  A5EE              ; Copies the buffer to the screen. Use stack.
 53+  A5EE              ; Inputs:
 54+  A5EE              ; a - row number to display - 0 is first line
 55+  A5EE              ;
 56+  A5EE              buffer_bufferlinetoscreen:
 57+  A5EE 4F               ld c,a                          ; store a
 58+  A5EF ED 5B 1C A7      ld de,(screen_offset)          ; load the screen offset, this is in rows, want it *256
 59+  A5F3 83               add a,e                       ; add the row number
 60+  A5F4 11 00 01         ld de,256
 61+  A5F7 CD 3A 80         call utilities_multiply
 62+  A5FA 54 5D            ld de,hl
 63+  A5FC 21 14 85         ld hl,buffer_buffer
 64+  A5FF 19               add hl,de                   ; add the offset
 65+  A600 79               ld a,c                      ; get original row back
 66+  A601 ED 73 5F A6      ld (buffer_bufferlinetoscreen1+1),sp ; this is some self-modifying code; stores the stack pointer in an ld sp,nn instruction at the end
 67+  A605 D9               exx
 68+  A606 0E 00            ld c,0                      ; zero horizontal
 69+  A608 47               ld b,a                      ; load the row number into vertical coord
 70+  A609 04               inc b
 71+  A60A 04               inc b                       ; move forward 2 to allow for scores
 72+  A60B CD 06 A8         call screen_getcelladdress  ; get the memory into de
 73+  A60E 21 10 00         ld hl,16                    ; offset by 16 chars to get to the centre, since populating stack from right
 74+  A611 19               add hl,de
 75+  A612              buffer_bufferlinetoscreen0:
 76+  A612 D9               exx                         ; hl is now buffer
 77+  A613 23               inc hl
 78+  A614 23               inc hl                      ; move hl forward 2 to skip first two blocks
 79+  A615 F9               ld sp,hl                    ; do first fourteen for left hand side, sp pointing at buffer
 80+  A616 F1               pop af
 81+  A617 C1               pop bc
 82+  A618 D1               pop de
 83+  A619 DD E1            pop ix
 84+  A61B D9               exx                         ; hl is now screen
 85+  A61C 08               ex af,af'
 86+  A61D F1               pop af
 87+  A61E C1               pop bc
 88+  A61F D1               pop de
 89+  A620 F9               ld sp,hl                    ; sp pointing at screen
 90+  A621 D5               push de
 91+  A622 C5               push bc
 92+  A623 F5               push af
 93+  A624 08               ex af,af'
 94+  A625 D9               exx                         ; hl is now buffer
 95+  A626 DD E5            push ix
 96+  A628 D5               push de
 97+  A629 C5               push bc
 98+  A62A F5               push af
 99+  A62B 1E 0E            ld e,14                    ; do another fourteen for right hand side
100+  A62D 16 00            ld d,0
101+  A62F 19               add hl,de
102+  A630 F9               ld sp,hl                    ; sp pointing at buffer
103+  A631 F1               pop af
104+  A632 C1               pop bc
105+  A633 D1               pop de
106+  A634 DD E1            pop ix
107+  A636                  ;pop ix
108+  A636 D9               exx                         ; hl is now screen
109+  A637 08               ex af,af'
110+  A638 1E 0E            ld e,14
111+  A63A 16 00            ld d,0
112+  A63C 19               add hl,de
113+  A63D F1               pop af
114+  A63E C1               pop bc
115+  A63F D1               pop de
116+  A640                  ;pop iy
117+  A640 F9               ld sp,hl                    ; sp pointing at screen
118+  A641                  ;push iy
119+  A641 D5               push de
120+  A642 C5               push bc
121+  A643 F5               push af
122+  A644 08               ex af,af'
123+  A645 D9               exx                         ; hl is now buffer
124+  A646 DD E5            push ix
125+  A648 D5               push de
126+  A649 C5               push bc
127+  A64A F5               push af
128+  A64B 1E 10            ld e,16
129+  A64D 16 00            ld d,0
130+  A64F 19               add hl,de
131+  A650 D9               exx                         ; hl is now screen
132+  A651 1E 0E            ld e,14
133+  A653 16 00            ld d,0
134+  A655 ED 52            sbc hl,de
135+  A657 24               inc h
136+  A658 7C               ld a,h
137+  A659 E6 07            and 0x07                    ; check if this is multiple of 8, if so, end of cell line
138+  A65B C2 12 A6         jp nz,buffer_bufferlinetoscreen0 ; next line in cell
139+  A65E              buffer_bufferlinetoscreen1:
140+  A65E 31 00 00         ld sp,0
141+  A661 D9               exx
142+  A662 C9               ret
143+  A663
144+  A663              ;
145+  A663              ; Copies the buffer to the screen for updated lines. Use stack.
146+  A663              ; Inputs: none
147+  A663              ;
148+  A663              buffer_buffertoscreen:
149+  A663 3A CB A5         ld a,(buffer_updateall)      ; get the all update flag
150+  A666 FE 00            cp 0
151+  A668 CA 74 A6         jp z,buffer_buffertoscreen2  ; if not set, draw only updated
152+  A66B CD 95 A6         call buffer_allbuffertoscreen ; otherwise, draw whole screen
153+  A66E 21 CB A5         ld hl,buffer_updateall
154+  A671 36 00            ld (hl),0                    ; reset flag
155+  A673 C9               ret
156+  A674              buffer_buffertoscreen2:
157+  A674 06 15            ld b,21
158+  A676 FD 21 B6 A5      ld iy,buffer_updatedlines    ; the location of the updated lines
159+  A67A              buffer_buffertoscreen0:
160+  A67A FD 7E 00         ld a,(iy)
161+  A67D FE FF            cp 255
162+  A67F CA 91 A6         jp z,buffer_buffertoscreen1                       ; if this is 255, then we're at the end of the updated list
163+  A682 C5               push bc
164+  A683 FD E5            push iy
165+  A685 F3               di
166+  A686 CD EE A5         call buffer_bufferlinetoscreen
167+  A689 FB               ei
168+  A68A FD E1            pop iy
169+  A68C C1               pop bc
170+  A68D FD 23            inc iy
171+  A68F 10 E9            djnz buffer_buffertoscreen0
172+  A691              buffer_buffertoscreen1:
173+  A691 CD A9 A6         call buffer_buffertoattrsfast
174+  A694 C9               ret
175+  A695
176+  A695              ;
177+  A695              ; Copies the buffer to the screen. Use stack.
178+  A695              ; Inputs: none
179+  A695              ;
180+  A695              buffer_allbuffertoscreen:
181+  A695 06 15            ld b,21
182+  A697 3E 00            ld a,0
183+  A699              buffer_allbuffertoscreen0:
184+  A699 C5               push bc
185+  A69A F5               push af
186+  A69B F3               di
187+  A69C CD EE A5         call buffer_bufferlinetoscreen
188+  A69F FB               ei
189+  A6A0 F1               pop af
190+  A6A1 C1               pop bc
191+  A6A2 3C               inc a
192+  A6A3 10 F4            djnz buffer_allbuffertoscreen0
193+  A6A5
194+  A6A5 CD A9 A6         call buffer_buffertoattrsfast
195+  A6A8 C9               ret
196+  A6A9
197+  A6A9              ;
198+  A6A9              ; Copies the attrs buffer to screen with the stack
199+  A6A9              ;
200+  A6A9              buffer_buffertoattrsfast:
201+  A6A9 ED 73 18 A7      ld (buffer_buffertoattrsfast1+1),sp ; this is some self-modifying code; stores the stack pointer in an ld sp,nn instruction at the end
202+  A6AD 3A 1C A7         ld a,(screen_offset)            ; get the screen offset in rows, so want *32
203+  A6B0 11 20 00         ld de,32
204+  A6B3 CD 3A 80         call utilities_multiply
205+  A6B6 54 5D            ld de,hl
206+  A6B8 21 14 A2         ld hl,buffer_attr_buffer
207+  A6BB 19               add hl,de                       ; add the offset, start of attr buffer now in hl
208+  A6BC D9               exx
209+  A6BD 21 50 58         ld hl,22528+80                  ; start of attr memory + 2 lines for score + 16 to start at right side
210+  A6C0 FD 21 B4 A5      ld iy,buffer_tmp
211+  A6C4 FD 36 00 15      ld (iy),21              ; number of times to loop
212+  A6C8              buffer_buffertoattrsfast0:
213+  A6C8 D9               exx                         ; hl is now buffer
214+  A6C9 23               inc hl
215+  A6CA 23               inc hl                      ; move hl forward 2 to skip first two blocks
216+  A6CB F9               ld sp,hl                    ; do first fourteen for left hand side, sp pointing at buffer
217+  A6CC F1               pop af
218+  A6CD C1               pop bc
219+  A6CE D1               pop de
220+  A6CF DD E1            pop ix
221+  A6D1 D9               exx                         ; hl is now screen
222+  A6D2 08               ex af,af'
223+  A6D3 F1               pop af
224+  A6D4 C1               pop bc
225+  A6D5 D1               pop de
226+  A6D6 F9               ld sp,hl                    ; sp pointing at screen
227+  A6D7 D5               push de
228+  A6D8 C5               push bc
229+  A6D9 F5               push af
230+  A6DA 08               ex af,af'
231+  A6DB D9               exx                         ; hl is now buffer
232+  A6DC DD E5            push ix
233+  A6DE D5               push de
234+  A6DF C5               push bc
235+  A6E0 F5               push af
236+  A6E1 1E 0E            ld e,14                    ; do another fourteen for right hand side
237+  A6E3 16 00            ld d,0
238+  A6E5 19               add hl,de
239+  A6E6 F9               ld sp,hl                    ; sp pointing at buffer
240+  A6E7 F1               pop af
241+  A6E8 C1               pop bc
242+  A6E9 D1               pop de
243+  A6EA DD E1            pop ix
244+  A6EC D9               exx                         ; hl is now screen
245+  A6ED 08               ex af,af'
246+  A6EE 1E 0E            ld e,14
247+  A6F0 16 00            ld d,0
248+  A6F2 19               add hl,de
249+  A6F3 F1               pop af
250+  A6F4 C1               pop bc
251+  A6F5 D1               pop de
252+  A6F6 F9               ld sp,hl                    ; sp pointing at screen
253+  A6F7 D5               push de
254+  A6F8 C5               push bc
255+  A6F9 F5               push af
256+  A6FA 08               ex af,af'
257+  A6FB D9               exx                         ; hl is now buffer
258+  A6FC DD E5            push ix
259+  A6FE D5               push de
260+  A6FF C5               push bc
261+  A700 F5               push af
262+  A701 1E 10            ld e,16
263+  A703 16 00            ld d,0
264+  A705 19               add hl,de
265+  A706 D9               exx                         ; hl is now screen
266+  A707 11 12 00         ld de,18
267+  A70A 19               add hl,de
268+  A70B FD 7E 00         ld a,(iy)
269+  A70E 3D               dec a
270+  A70F FE 00            cp 0
271+  A711 FD 77 00         ld (iy),a
272+  A714 C2 C8 A6         jp nz,buffer_buffertoattrsfast0 ; do another row
273+  A717              buffer_buffertoattrsfast1:
274+  A717 31 00 00         ld sp,0
275+  A71A D9               exx
276+  A71B C9               ret
# file closed: screen/buffer.asm
 24   A71C                  include "screen\screen.asm"
# file opened: screen/screen.asm
  1+  A71C              screen_offset:
  2+  A71C 00               defb 0                      ; offset from top of screen in lines
  3+  A71D
  4+  A71D              screen_tmp:
  5+  A71D 00 00            defb 0,0                      ; temporary memory
  6+  A71F
  7+  A71F              screen_setscorecolours:
  8+  A71F 21 92 B2         ld hl,score_colours
  9+  A722 11 00 58         ld de,22528                     ; attrs here
 10+  A725 01 40 00         ld bc,64
 11+  A728 ED B0            ldir
 12+  A72A C9               ret
 13+  A72B
 14+  A72B              screen_sethighscorecolours:
 15+  A72B 21 D2 B2         ld hl,high_score_colours
 16+  A72E 11 E0 5A         ld de,22528+736                 ; attrs here
 17+  A731 01 20 00         ld bc,32
 18+  A734 ED B0            ldir
 19+  A736 C9               ret
 20+  A737
 21+  A737              ; Draw the screen
 22+  A737              ; Inputs:
 23+  A737              ; none
 24+  A737              ; Notes:
 25+  A737              ; The value held at screen_offset tells the screen how many rows to scroll down. Set to five to bottom out.
 26+  A737              screen_draw:
 27+  A737                  ;call clear_screen
 28+  A737 0E 00            ld c,0                      ; horiz
 29+  A739 06 00            ld b,0                      ; vert, 0 at top
 30+  A73B DD 21 54 AD      ld ix,level01               ; point ix at level data
 31+  A73F FD 21 14 A2      ld iy,buffer_attr_buffer    ; point iy at attr data
 32+  A743              screen_draw0:
 33+  A743 DD 7E 00         ld a,(ix)                   ; load the block number
 34+  A746 C5               push bc                     ; store bc, contains loop count
 35+  A747 CD A9 A8         call screen_getattr         ; get the memory location for this cell's attr into hl
 36+  A74A 7E               ld a,(hl)                   ; get the attr value at the address
 37+  A74B FD 77 00         ld (iy),a                   ; load the attr into memory
 38+  A74E DD 7E 00         ld a,(ix)                   ; load the block number
 39+  A751 CD 9E A8         call screen_getblock        ; get the block data into hl
 40+  A754 CD 84 A8         call screen_showchar        ; show this character here
 41+  A757 C1               pop bc                      ; get the loop counter back
 42+  A758 DD 23            inc ix                      ; increment level location
 43+  A75A FD 23            inc iy                      ; increment attr location
 44+  A75C 0C               inc c                       ; increment horiz
 45+  A75D 79               ld a,c
 46+  A75E FE 20            cp 32                       ; check if horiz has reach edge of screen
 47+  A760 C2 43 A7         jp nz,screen_draw0          ; if not, loop
 48+  A763 0E 00            ld c,0                      ; if so, reset horiz
 49+  A765 04               inc b                       ; increment vertical
 50+  A766 78               ld a,b
 51+  A767 FE 1D            cp 29                       ; check if at bottom
 52+  A769 C2 43 A7         jp nz,screen_draw0          ; if not, loop
 53+  A76C 21 1D A7         ld hl, screen_tmp
 54+  A76F 36 09            ld (hl),9                   ; load the block number into memory
 55+  A771 DD 21 F4 B0      ld ix,level01rocks          ; rock memory
 56+  A775 CD D6 A7         call screen_initobjects     ; draw rocks
 57+  A778 21 1D A7         ld hl, screen_tmp
 58+  A77B 36 0C            ld (hl),12                  ; load the block number into memory
 59+  A77D DD 21 F4 B1      ld ix,level01missiles       ; missile memory
 60+  A781 CD D6 A7         call screen_initobjects     ; draw missiles
 61+  A784 21 1D A7         ld hl, screen_tmp
 62+  A787 36 08            ld (hl),08                  ; load the block number into memory
 63+  A789 DD 21 6D B2      ld ix,level01diamonds       ; diamond memory
 64+  A78D CD D6 A7         call screen_initobjects     ; draw diamonds
 65+  A790 21 1D A7         ld hl, screen_tmp
 66+  A793 36 0E            ld (hl),14                  ; load the block number into memory
 67+  A795 DD 21 7D B2      ld ix,level01gems           ; gems memory
 68+  A799 CD D6 A7         call screen_initobjects     ; draw gems
 69+  A79C CD A3 A7         call screen_setuptext       ; draws text on the screen
 70+  A79F CD 18 C0         call scores_printscores     ; print the current scores
 71+  A7A2 C9               ret
 72+  A7A3
 73+  A7A3              ;
 74+  A7A3              ; Sets up text on the screen
 75+  A7A3              ;
 76+  A7A3              screen_setuptext:
 77+  A7A3 CD 3A C0         call scores_showtable
 78+  A7A6 CD 2B A7         call screen_sethighscorecolours
 79+  A7A9 21 FC 80         ld hl, string_score1
 80+  A7AC CD CC 84         call string_print
 81+  A7AF 21 05 81         ld hl, string_scorenumbers1
 82+  A7B2 CD CC 84         call string_print
 83+  A7B5 21 0E 81         ld hl, string_company
 84+  A7B8 CD CC 84         call string_print
 85+  A7BB 21 1F 81         ld hl, string_score2
 86+  A7BE CD CC 84         call string_print
 87+  A7C1 21 28 81         ld hl, string_scorenumbers2
 88+  A7C4 CD CC 84         call string_print
 89+  A7C7 21 14 81         ld hl, string_credits
 90+  A7CA CD CC 84         call string_print
 91+  A7CD CD 1F A7         call screen_setscorecolours
 92+  A7D0 C9               ret
 93+  A7D1
 94+  A7D1              ;
 95+  A7D1              ; Sets a line of colours
 96+  A7D1              ; Inputs:
 97+  A7D1              ; a - colour to set
 98+  A7D1              ; b - number to set
 99+  A7D1              ; de - start memory location
100+  A7D1              ;
101+  A7D1              screen_setcolours:
102+  A7D1 12               ld (de),a
103+  A7D2 13               inc de
104+  A7D3 10 FC            djnz screen_setcolours
105+  A7D5 C9               ret
106+  A7D6
107+  A7D6              ;
108+  A7D6              ; Draw initial object positions
109+  A7D6              ; Inputs:
110+  A7D6              ; ix - memory location of objects
111+  A7D6              ; a - graphic
112+  A7D6              screen_initobjects:
113+  A7D6 DD 4E 00         ld c,(ix)                   ; get the horiz coord
114+  A7D9 79               ld a,c
115+  A7DA FE FF            cp 255
116+  A7DC CA 05 A8         jp z,screen_initobjects2
117+  A7DF DD 23            inc ix                      ; move to next
118+  A7E1 DD 46 00         ld b,(ix)                   ; get the vert coord
119+  A7E4 DD 23            inc ix
120+  A7E6 CD 17 A8         call screen_getcellattradress ; get the memory address of b,c attr into de
121+  A7E9 D5               push de
122+  A7EA 3A 1D A7         ld a,(screen_tmp)                  ; get the block number back
123+  A7ED CD A9 A8         call screen_getattr         ; get the memory location for this cell's attr into hl
124+  A7F0 D1               pop de
125+  A7F1 7E               ld a,(hl)                   ; get the attr value at the address
126+  A7F2 12               ld (de),a                   ; load the attr into memory
127+  A7F3 3A 1D A7         ld a,(screen_tmp)                  ; get the block number back
128+  A7F6 CD 9E A8         call screen_getblock        ; get the block data into hl
129+  A7F9 CD 84 A8         call screen_showchar        ; show this character here
130+  A7FC
131+  A7FC              screen_initobjects1:
132+  A7FC DD 23            inc ix                      ; move past state
133+  A7FE DD 23            inc ix
134+  A800 DD 23            inc ix                      ; move past mem
135+  A802 C3 D6 A7         jp screen_initobjects
136+  A805              screen_initobjects2:
137+  A805 C9               ret
138+  A806
139+  A806
140+  A806              ;
141+  A806              ; Return character cell address offset of block at (b, c) ready for addition to screen  memory.
142+  A806              ; Inputs:
143+  A806              ; bc: coords
144+  A806              ; Outputs:
145+  A806              ; de: memory location
146+  A806              ;
147+  A806              screen_getcelladdress:
148+  A806 78               ld a,b      ; vertical position.
149+  A807 E6 18            and 24      ; which segment, 0, 1 or 2?
150+  A809 C6 40            add a,64    ; 64*256 = 16384, Spectrum's screen memory.
151+  A80B 57               ld d,a      ; this is our high byte.
152+  A80C 78               ld a,b      ; what was that vertical position again?
153+  A80D E6 07            and 7       ; which row within segment?
154+  A80F 0F               rrca        ; multiply row by 32.
155+  A810 0F               rrca
156+  A811 0F               rrca
157+  A812 5F               ld e,a      ; low byte.
158+  A813 79               ld a,c      ; add on y coordinate.
159+  A814 83               add a,e     ; mix with low byte.
160+  A815 5F               ld e,a      ; address of screen position in de.
161+  A816 C9               ret
162+  A817
163+  A817              ;
164+  A817              ; Calculate buffer address of attribute for character at (b, c).
165+  A817              ; Inputs:
166+  A817              ; bc: coords
167+  A817              ; Outputs:
168+  A817              ; de: memory location
169+  A817              ;
170+  A817              screen_getcellattradress:
171+  A817 11 14 A2         ld de,buffer_attr_buffer ; memory is at base + horiz (c) + vert*32 (b)
172+  A81A 69               ld l,c      ; x position.
173+  A81B 26 00            ld h,0      ; 0 h
174+  A81D 19               add hl,de
175+  A81E 54 5D            ld de,hl    ; horiz done
176+  A820 78               ld a,b      ; do vert
177+  A821 D5               push de
178+  A822 C5               push bc
179+  A823 11 20 00         ld de,32
180+  A826 CD 3A 80         call utilities_multiply
181+  A829 C1               pop bc
182+  A82A D1               pop de
183+  A82B 19               add hl,de
184+  A82C 54 5D            ld de,hl    ; vert done
185+  A82E C9               ret
186+  A82F
187+  A82F              ;
188+  A82F              ; Calculate buffer address of attribute for character at (b, c).
189+  A82F              ; Inputs:
190+  A82F              ; bc: coords
191+  A82F              ; Outputs:
192+  A82F              ; de: memory location
193+  A82F              ;
194+  A82F              screen_getscreenattradress:
195+  A82F 11 00 58         ld de,22528 ; memory is at base + horiz (c) + vert*32 (b)
196+  A832 69               ld l,c      ; x position.
197+  A833 26 00            ld h,0      ; 0 h
198+  A835 19               add hl,de
199+  A836 54 5D            ld de,hl    ; horiz done
200+  A838 78               ld a,b      ; do vert
201+  A839 D5               push de
202+  A83A C5               push bc
203+  A83B 11 20 00         ld de,32
204+  A83E CD 3A 80         call utilities_multiply
205+  A841 C1               pop bc
206+  A842 D1               pop de
207+  A843 19               add hl,de
208+  A844 54 5D            ld de,hl    ; vert done
209+  A846 C9               ret
210+  A847
211+  A847              ;
212+  A847              ; Gets the attr memory location for a screen coord
213+  A847              ; Will overwrite bc
214+  A847              ; Inputs:
215+  A847              ; bc - screen coords
216+  A847              ; Outputs:
217+  A847              ; de - memory location
218+  A847              ; bc - character coords
219+  A847              ;
220+  A847              screen_getattraddressfromscreencoords:
221+  A847 78               ld a,b                          ; get the player block coords of current block
222+  A848 E6 F8            and 248                         ; find closest multiple of eight
223+  A84A 0F               rrca
224+  A84B 0F               rrca
225+  A84C 0F               rrca                ; divide by 8
226+  A84D 47               ld b,a
227+  A84E 79               ld a,c
228+  A84F 48               ld c,b                         ; swap b and c
229+  A850 E6 F8            and 248
230+  A852 0F               rrca
231+  A853 0F               rrca
232+  A854 0F               rrca                ; divide by 8
233+  A855 47               ld b,a
234+  A856 CD 17 A8         call screen_getcellattradress   ; work out memory location of current block attributes, memory in de
235+  A859 C9               ret
236+  A85A
237+  A85A
238+  A85A              ; Gets the nearest cell coords for a screen coord
239+  A85A              ; Will overwrite bc
240+  A85A              ; Inputs:
241+  A85A              ; bc - screen coords
242+  A85A              ; Outputs:
243+  A85A              ; bc - character coords
244+  A85A              ;
245+  A85A              screen_getcharcoordsfromscreencoords:
246+  A85A 78               ld a,b                          ; get the player block coords of current block
247+  A85B E6 F8            and 248                         ; find closest multiple of eight
248+  A85D 0F               rrca
249+  A85E 0F               rrca
250+  A85F 0F               rrca                ; divide by 8
251+  A860 47               ld b,a
252+  A861 79               ld a,c
253+  A862 48               ld c,b                         ; swap b and c
254+  A863 E6 F8            and 248
255+  A865 0F               rrca
256+  A866 0F               rrca
257+  A867 0F               rrca                ; divide by 8
258+  A868 47               ld b,a
259+  A869 C9               ret
260+  A86A
261+  A86A              ; Gets the screen coords for a cell coord
262+  A86A              ; Will overwrite bc
263+  A86A              ; Inputs:
264+  A86A              ; bc - char coords
265+  A86A              ; Outputs:
266+  A86A              ; bc - screen coords
267+  A86A              ;
268+  A86A              screen_getscreencoordsfromcharcoords:
269+  A86A 78               ld a,b                          ; get the player block coords of current block
270+  A86B 07               rlca
271+  A86C 07               rlca
272+  A86D 07               rlca                ; multiply by 8
273+  A86E 47               ld b,a
274+  A86F 79               ld a,c
275+  A870 48               ld c,b                         ; swap b and c
276+  A871 07               rlca
277+  A872 07               rlca
278+  A873 07               rlca                ; divide by 8
279+  A874 47               ld b,a
280+  A875 C9               ret
281+  A876
282+  A876              ;
283+  A876              ; Get buffer address for a character at b,c - b vert
284+  A876              ; Buffer memory is stored as sequential block
285+  A876              ; Char at 0,0 is stored 0,32,64...; 0,1 is stored at 1,33,65
286+  A876              ; Inputs:
287+  A876              ; bc - coords
288+  A876              ; Outputs:
289+  A876              ; de - memory location of first byte
290+  A876              screen_getbufferaddress:
291+  A876 21 14 85         ld hl, buffer_buffer    ; first get screen buffer start
292+  A879 50               ld d,b                  ; then work out vertical offset
293+  A87A 1E 00            ld e,0                  ; mult by 256, low byte becomes high byte, de now holds result
294+  A87C 19               add hl,de               ; add to base
295+  A87D 59               ld e,c                  ; then add horizontal offset (c)
296+  A87E 16 00            ld d,0
297+  A880 19               add hl,de               ; add to base
298+  A881 54 5D            ld de,hl
299+  A883 C9               ret
300+  A884
301+  A884              ;
302+  A884              ; Display character hl at (b, c) to buffer.
303+  A884              ; Stored sequentially
304+  A884              ; Inputs:
305+  A884              ; hl: block address
306+  A884              ; bc: coords
307+  A884              ;
308+  A884              screen_showchar:
309+  A884 3E 00            ld a,0
310+  A886 E5               push hl
311+  A887 CD 76 A8         call screen_getbufferaddress ; get the current screen buffer pointer
312+  A88A E1               pop hl
313+  A88B 06 08            ld b,8              ; number of pixels high.
314+  A88D              screen_showchar0:
315+  A88D 7E               ld a,(hl)           ; source graphic.
316+  A88E 12               ld (de),a           ; transfer to screen.
317+  A88F 23               inc hl              ; next piece of data.
318+  A890 E5               push hl             ; store hl
319+  A891 62 6B            ld hl,de            ; put de in hl
320+  A893 1E 20            ld e,32            ; inc memory by 32, so load 32 into de
321+  A895 16 00            ld d,0
322+  A897 19               add hl,de              ; add de to hl
323+  A898 54 5D            ld de,hl            ; load back to de
324+  A89A E1               pop hl              ; restore hl
325+  A89B
326+  A89B 10 F0            djnz screen_showchar0 ; repeat
327+  A89D C9               ret
328+  A89E
329+  A89E
330+  A89E              ;
331+  A89E              ; Get cell graphic.
332+  A89E              ; Inputs:
333+  A89E              ; a: block
334+  A89E              ; Outputs:
335+  A89E              ; hl: memory
336+  A89E              ;
337+  A89E              screen_getblock:
338+  A89E 07               rlca                        ; multiply block number by eight.
339+  A89F 07               rlca
340+  A8A0 07               rlca
341+  A8A1 5F               ld e,a                      ; displacement to graphic address.
342+  A8A2 16 00            ld d,0                      ; no high byte.
343+  A8A4 21 F2 B2         ld hl,sprites               ; address of character blocks.
344+  A8A7 19               add hl,de                   ; point to block.
345+  A8A8 C9               ret
346+  A8A9
347+  A8A9              ;
348+  A8A9              ; Get cell attribute.
349+  A8A9              ; Inputs:
350+  A8A9              ; a: block
351+  A8A9              ; Outputs:
352+  A8A9              ; hl: memory
353+  A8A9              ;
354+  A8A9              screen_getattr:
355+  A8A9 5F               ld e,a                      ; displacement to attribute address.
356+  A8AA 16 00            ld d,0                      ; no high byte.
357+  A8AC 21 9A B3         ld hl,sprite_attrs          ; address of block attributes.
358+  A8AF 19               add hl,de                   ; point to attribute.
359+  A8B0 C9               ret
360+  A8B1
361+  A8B1              ;
362+  A8B1              ; Checks whether a character block has anything in it
363+  A8B1              ; Inputs:
364+  A8B1              ; bc - char coords
365+  A8B1              ; Outputs:
366+  A8B1              ; a - 1, empty
367+  A8B1              screen_ischarempty:
368+  A8B1 CD 76 A8         call screen_getbufferaddress ; get the current screen buffer pointer
369+  A8B4 06 08            ld b,8                      ; check 8 rows
370+  A8B6              screen_ischarempty2:
371+  A8B6 1A               ld a,(de)                   ; check line
372+  A8B7 FE 00            cp 0
373+  A8B9 C2 C7 A8         jp nz,screen_ischarempty1   ; if not zero, jump out with false
374+  A8BC 21 20 00         ld hl,32
375+  A8BF 19               add hl,de
376+  A8C0 54 5D            ld de,hl                    ; move to next row
377+  A8C2 10 F2            djnz screen_ischarempty2
378+  A8C4              screen_ischarempty0:
379+  A8C4 3E 01            ld a,1
380+  A8C6 C9               ret
381+  A8C7              screen_ischarempty1:
382+  A8C7 3E 00            ld a,0
383+  A8C9 C9               ret
384+  A8CA
385+  A8CA              ;
386+  A8CA              ; Copies a block from one place to another directly underneath, leaves the original empty
387+  A8CA              ; Inputs:
388+  A8CA              ; bc - coords of block to copy from
389+  A8CA              screen_copyblockdown
390+  A8CA CD 76 A8         call screen_getbufferaddress ; get the current screen buffer pointer for source
391+  A8CD 06 08            ld b,8                      ; copy 8 rows
392+  A8CF              screen_copyblock0:
393+  A8CF 1A               ld a,(de)                    ; get what we're copying
394+  A8D0 08               ex af,af'
395+  A8D1 3E 00            ld a,0
396+  A8D3 12               ld (de),a                    ; replace with empty
397+  A8D4 08               ex af,af'
398+  A8D5 14               inc d                        ; add 256 to get to the next row
399+  A8D6 12               ld (de),a                    ; copy to the next row
400+  A8D7 15               dec d
401+  A8D8 21 20 00         ld hl,32
402+  A8DB 19               add hl,de                       ; return back to source, next row down
403+  A8DC 54 5D            ld de,hl
404+  A8DE 10 EF            djnz screen_copyblock0
405+  A8E0 C9               ret
406+  A8E1
407+  A8E1              ;
408+  A8E1              ; Returns the first byte of a character. Useful for figuring out what's there
409+  A8E1              ; Inputs:
410+  A8E1              ; bc - coords
411+  A8E1              ; Outputs:
412+  A8E1              ; a - first byte
413+  A8E1              ;
414+  A8E1              screen_getcharfirstbyte:
415+  A8E1 CD 76 A8         call screen_getbufferaddress ; get the current screen buffer pointer for source
416+  A8E4 1A               ld a,(de)
417+  A8E5 C9               ret
418+  A8E6
# file closed: screen/screen.asm
 25   A8E6                  include "screen\sprites.asm"
# file opened: screen/sprites.asm
  1+  A8E6              ;
  2+  A8E6              ; This is the sprite routine and expects coordinates in (c ,b) form,
  3+  A8E6              ; where c is the vertical coord from the top of the screen (0-176), and
  4+  A8E6              ; b is the horizontal coord from the left of the screen (0 to 240).
  5+  A8E6              ; Sprite data is stored as you'd expect in its unshifted form as this
  6+  A8E6              ; routine takes care of all the shifting itself. This means that sprite
  7+  A8E6              ; handling isn't particularly fast but the graphics only take 1/8th of the
  8+  A8E6              ; space they would require in pre-shifted form.
  9+  A8E6              ; Inputs:
 10+  A8E6              ; hl - sprite data
 11+  A8E6              ; bc - screen coords
 12+  A8E6              ;
 13+  A8E6              sprites_drawsprite7:
 14+  A8E6 EE 07            xor 7               ; complement last 3 bits.
 15+  A8E8 3C               inc a               ; add one for luck!
 16+  A8E9              sprites_drawsprite3:
 17+  A8E9 CB 11            rl c                ; ...into middle byte...
 18+  A8EB CB 12            rl d                ; ...and finally into left character cell.
 19+  A8ED 3D               dec a               ; count shifts we've done.
 20+  A8EE 20 F9            jr nz,sprites_drawsprite3 ; return until all shifts complete.
 21+  A8F0                                      ; Line of sprite image is now in e + c + d, we need it in form c + d + e.
 22+  A8F0 79               ld a,c              ; left edge of image is currently in e.
 23+  A8F1 4A               ld c,d              ; put right edge there instead.
 24+  A8F2 57               ld d,a              ; and the left edge back into c.
 25+  A8F3 18 25            jr sprites_drawsprite0   ; we've done the switch so transfer to screen.
 26+  A8F5              sprites_drawsprite:
 27+  A8F5 ED 43 5A A9      ld (dispx),bc       ; store coords in dispx for now.
 28+  A8F9 E5               push hl
 29+  A8FA CD 38 A9         call sprites_scadd  ; calculate screen address.
 30+  A8FD E1               pop hl
 31+  A8FE 3E 08            ld a,8              ; height of sprite in pixels.
 32+  A900              sprites_drawsprite1:
 33+  A900 08               ex af,af'           ; store loop counter.
 34+  A901 D5               push de             ; store screen address.
 35+  A902 4E               ld c,(hl)           ; first sprite graphic.
 36+  A903 23               inc hl              ; increment poiinter to sprite data.
 37+  A904 22 5C A9         ld (sprtmp),hl      ; store it for later.
 38+  A907 16 00            ld d,0              ; blank right byte for now.
 39+  A909 78               ld a,b              ; b holds y position.
 40+  A90A E6 07            and 7               ; how are we straddling character cells?
 41+  A90C 28 0C            jr z,sprites_drawsprite0 ; we're not straddling them, don't bother shifting.
 42+  A90E FE 05            cp 5                ; 5 or more right shifts needed?
 43+  A910 30 D4            jr nc,sprites_drawsprite7 ; yes, shift from left as it's quicker.
 44+  A912 A7               and a               ; oops, carry flag is set so clear it.
 45+  A913              sprites_drawsprite2:
 46+  A913 CB 19            rr c                ; rotate left byte right...
 47+  A915 CB 1A            rr d                ; ...into right byte.
 48+  A917 3D               dec a               ; one less shift to do.
 49+  A918 20 F9            jr nz,sprites_drawsprite2 ; return until all shifts complete.
 50+  A91A              sprites_drawsprite0:
 51+  A91A E1               pop hl              ; pop screen address from stack.
 52+  A91B 7E               ld a,(hl)           ; what's there already.
 53+  A91C A9               xor c               ; merge in image data.
 54+  A91D 77               ld (hl),a           ; place onto screen.
 55+  A91E 23               inc hl
 56+  A91F 7E               ld a,(hl)           ; what's already there.
 57+  A920 AA               xor d               ; right edge of sprite image data.
 58+  A921 77               ld (hl),a           ; plonk it on screen.
 59+  A922 3A 5A A9         ld a,(dispx)        ; vertical coordinate.
 60+  A925 3C               inc a               ; next line down.
 61+  A926 32 5A A9         ld (dispx),a        ; store new position.
 62+  A929 2B               dec hl
 63+  A92A 11 20 00         ld de,32            ; add 32 to get to the next row
 64+  A92D 19               add hl,de           ; add 32
 65+  A92E              sprites_drawsprite6:
 66+  A92E EB               ex de,hl            ; screen address in de.
 67+  A92F 2A 5C A9         ld hl,(sprtmp)      ; restore graphic address.
 68+  A932 08               ex af,af'           ; restore loop counter.
 69+  A933 3D               dec a               ; decrement it.
 70+  A934 C2 00 A9         jp nz,sprites_drawsprite1 ; not reached bottom of sprite yet to repeat.
 71+  A937 C9               ret                 ; job done.
 72+  A938
 73+  A938              ;
 74+  A938              ; This routine returns a buffer address for (c, b) in de (c vert).
 75+  A938              ; For example: 0,0 will be at memory offset 0
 76+  A938              ; 1,0 (1 down) will be at memory offset 1
 77+  A938              ; 0,7 will be at memory offset 0
 78+  A938              ; 9,1 will be at memory offset 8+1
 79+  A938              ; 8,0 will be at memory offset 256
 80+  A938              ; 9,0 will be at memory offset 257
 81+  A938              ; Outputs:
 82+  A938              ; de - coords
 83+  A938              ;
 84+  A938              sprites_scadd:
 85+  A938 79               ld a,c               ; calculate vertical offset
 86+  A939 E6 F8            and 248             ;  to get nearest multiple of 8
 87+  A93B 0F               rrca
 88+  A93C 0F               rrca
 89+  A93D 0F               rrca                ; divide by 8
 90+  A93E 67               ld h,a
 91+  A93F 78               ld a,b               ; calculate horizontal offset
 92+  A940 E6 F8            and 248             ;  to get nearest multiple of 8
 93+  A942 0F               rrca
 94+  A943 0F               rrca
 95+  A944 0F               rrca                ; divide by 8
 96+  A945 6F               ld l,a
 97+  A946 C5               push bc             ; store the screen coords
 98+  A947 44 4D            ld bc,hl            ; load bc with the character coords
 99+  A949 CD 76 A8         call screen_getbufferaddress
100+  A94C C1               pop bc              ; get back screen coords, de is now memory of character
101+  A94D 79               ld a,c              ; now add the vertical within the cell
102+  A94E E6 07            and 7
103+  A950 0F               rrca                ; multiply by 32.
104+  A951 0F               rrca
105+  A952 0F               rrca
106+  A953 6F               ld l,a
107+  A954 26 00            ld h,0
108+  A956 19               add hl,de
109+  A957 54 5D            ld de,hl
110+  A959 C9               ret
111+  A95A
112+  A95A 00           dispx   defb 0           ; general-use coordinates.
113+  A95B 00           dispy   defb 0
114+  A95C 00 00        sprtmp  defb 0,0           ; sprite temporary address.
115+  A95E
# file closed: screen/sprites.asm
 26   A95E                  include "screen\titlescreen.asm"
# file opened: screen/titlescreen.asm
  1+  A95E              ;
  2+  A95E              ; Draws the title screen
  3+  A95E              ;
  4+  A95E              titlescreen_show:
  5+  A95E CD D6 A9         call titlescreen_init
  6+  A961 CD 7F A9         call titlescreen_drawtitle
  7+  A964 3E FA            ld a,250                              ; wait for 200 frames
  8+  A966 CD 52 80         call utilities_waitforkey_forframes   ; wait for keypress
  9+  A969 7B               ld a,e
 10+  A96A FE 01            cp 1                                  ; was anything pressed?
 11+  A96C C8               ret z                                 ; end titlescreen if so
 12+  A96D
 13+  A96D CD E9 A9         call titlescreen_alt_init             ; otherwise, draw alt screen
 14+  A970 CD 9B A9         call titlescreen_alt_drawtitle
 15+  A973 3E FA            ld a,250                              ; wait for 200 frames
 16+  A975 CD 52 80         call utilities_waitforkey_forframes   ; wait for keypress
 17+  A978 7B               ld a,e
 18+  A979 FE 01            cp 1                                  ; was anything pressed?
 19+  A97B C2 5E A9         jp nz,titlescreen_show                ; start again if not
 20+  A97E C9               ret
 21+  A97F
 22+  A97F              ;
 23+  A97F              ; Draws the iconic logo
 24+  A97F              ;
 25+  A97F              titlescreen_drawtitle:
 26+  A97F 06 66            ld b,102              ; number of points
 27+  A981 DD 21 F6 A9      ld ix,titlescreen_logo_data
 28+  A985              titlescreen_drawtitle0:
 29+  A985 C5               push bc
 30+  A986 DD 4E 00         ld c,(ix)                   ; got horiz
 31+  A989 DD 23            inc ix
 32+  A98B DD 46 00         ld b,(ix)                   ; got vert
 33+  A98E DD 23            inc ix
 34+  A990 CD 2F A8         call screen_getscreenattradress ; memory in de
 35+  A993 13               inc de                      ; slide one to the right, since I'm too lazy to change the data
 36+  A994 3E 13            ld a,19
 37+  A996 12               ld (de),a
 38+  A997 C1               pop bc
 39+  A998 10 EB            djnz titlescreen_drawtitle0 ; loop if we're not at the end
 40+  A99A C9               ret
 41+  A99B
 42+  A99B              ;
 43+  A99B              ; Draws the alternate title screen
 44+  A99B              ;
 45+  A99B              titlescreen_alt_drawtitle:
 46+  A99B 21 4B 81         ld hl,string_alttitlescreen_1
 47+  A99E CD CC 84         call string_print
 48+  A9A1 21 57 81         ld hl,string_alttitlescreen_2
 49+  A9A4 CD CC 84         call string_print
 50+  A9A7 21 52 82         ld hl,string_alttitlescreen_3
 51+  A9AA CD CC 84         call string_print
 52+  A9AD 06 20            ld b,32
 53+  A9AF 3E 43            ld a,67
 54+  A9B1 11 00 58         ld de,22528                         ; top row attrs here
 55+  A9B4 CD D1 A7         call screen_setcolours
 56+  A9B7 06 20            ld b,32
 57+  A9B9 3E 46            ld a,70
 58+  A9BB 11 A0 59         ld de,22528+416                     ; 13th row attrs here
 59+  A9BE CD D1 A7         call screen_setcolours
 60+  A9C1 06 20            ld b,32
 61+  A9C3 3E 43            ld a,67
 62+  A9C5 11 20 5A         ld de,22528+544                         ; 17th row attrs here
 63+  A9C8 CD D1 A7         call screen_setcolours
 64+  A9CB 06 20            ld b,32
 65+  A9CD 3E 42            ld a,66
 66+  A9CF 11 A0 5A         ld de,22528+672                         ; 21st row attrs here
 67+  A9D2 CD D1 A7         call screen_setcolours
 68+  A9D5 C9               ret
 69+  A9D6
 70+  A9D6              ;
 71+  A9D6              ; Initialises the screen
 72+  A9D6              ;
 73+  A9D6              titlescreen_init:
 74+  A9D6              ; We want a black screen.
 75+  A9D6 3E 0B            ld a,11             ; magenta ink (7) on blue paper (0),
 76+  A9D8                                      ; bright (64).
 77+  A9D8 CD 67 80         call utilities_clearscreen
 78+  A9DB 32 8D 5C         ld (23693),a        ; set our screen colours.
 79+  A9DE 3E 01            ld a,1              ; 2 is the code for red.
 80+  A9E0 D3 FE            out (254),a         ; write to port 254.
 81+  A9E2
 82+  A9E2 21 31 81         ld hl,string_titlescreen_copyright
 83+  A9E5 CD CC 84         call string_print
 84+  A9E8
 85+  A9E8 C9               ret
 86+  A9E9
 87+  A9E9              ;
 88+  A9E9              ; Initialises the screen
 89+  A9E9              ;
 90+  A9E9              titlescreen_alt_init:
 91+  A9E9              ; We want a black screen.
 92+  A9E9 3E 47            ld a,71             ; white ink (7) on black paper (0),
 93+  A9EB                                      ; bright (64).
 94+  A9EB CD 67 80         call utilities_clearscreen
 95+  A9EE 32 8D 5C         ld (23693),a        ; set our screen colours.
 96+  A9F1 3E 00            ld a,0              ; 2 is the code for red.
 97+  A9F3 D3 FE            out (254),a         ; write to port 254.
 98+  A9F5
 99+  A9F5 C9               ret
100+  A9F6
101+  A9F6              ;
102+  A9F6              ; Horiz, vert
103+  A9F6              ;
104+  A9F6              titlescreen_logo_data:
105+  A9F6 08 00 09 00      defb 8,0,9,0,10,0,12,0,15,0,17,0,18,0,19,0
105+  A9FA 0A 00 0C 00
105+  A9FE 0F 00 11 00
105+  AA02 12 00 13 00
106+  AA06 09 01 0C 01      defb 9,1,12,1,15,1,17,1
106+  AA0A 0F 01 11 01
107+  AA0E 09 02 0C 02      defb 9,2,12,2,13,2,14,2,15,2,17,2,18,2,19,2
107+  AA12 0D 02 0E 02
107+  AA16 0F 02 11 02
107+  AA1A 12 02 13 02
108+  AA1E 09 03 0C 03      defb 9,3,12,3,15,3,17,3
108+  AA22 0F 03 11 03
109+  AA26 09 04 0C 04      defb 9,4,12,4,15,4,17,4,18,4,19,4
109+  AA2A 0F 04 11 04
109+  AA2E 12 04 13 04
110+  AA32 00 06 01 06      defb 0,6,1,6,2,6,3,6,4,6,5,6,6,6,7,6,8,6,9,6,10,6,11,6
110+  AA36 02 06 03 06
110+  AA3A 04 06 05 06
110+  AA3E 06 06 07 06
110+  AA42 08 06 09 06
110+  AA46 0A 06 0B 06
111+  AA4A 10 06 11 06      defb 16,6,17,6,18,6,19,6,20,6,21,6,22,6,23,6,24,6,25,6,26,6,27,6
111+  AA4E 12 06 13 06
111+  AA52 14 06 15 06
111+  AA56 16 06 17 06
111+  AA5A 18 06 19 06
111+  AA5E 1A 06 1B 06
112+  AA62 02 07 02 08      defb 2,7,2,8,2,9,2,10,2,11,2,12,2,13,2,14,2,15,2,16,2,17,2,18,2,19,2,20
112+  AA66 02 09 02 0A
112+  AA6A 02 0B 02 0C
112+  AA6E 02 0D 02 0E
112+  AA72 02 0F 02 10
112+  AA76 02 11 02 12
112+  AA7A 02 13 02 14
113+  AA7E 19 07 19 08      defb 25,7,25,8,25,9,25,10,25,11,25,12,25,13,25,14,25,15,25,16,25,17,25,18,25,19,25,20
113+  AA82 19 09 19 0A
113+  AA86 19 0B 19 0C
113+  AA8A 19 0D 19 0E
113+  AA8E 19 0F 19 10
113+  AA92 19 11 19 12
113+  AA96 19 13 19 14
114+  AA9A 03 0B 04 0B      defb 3,11,4,11,5,11,6,11,7,11,8,11,9,11,10,11,11,11
114+  AA9E 05 0B 06 0B
114+  AAA2 07 0B 08 0B
114+  AAA6 09 0B 0A 0B
114+  AAAA 0B 0B
115+  AAAC 0B 07 0B 08      defb 11,7,11,8,11,9,11,10
115+  AAB0 0B 09 0B 0A
116+  AAB4 10 0D 10 0F      defb 16,13,16,15,16,16,16,17,16,18,16,19,16,20
116+  AAB8 10 10 10 11
116+  AABC 10 12 10 13
116+  AAC0 10 14
117+  AAC2
# file closed: screen/titlescreen.asm
 27   AAC2                  include "screen\lifescreen.asm"
# file opened: screen/lifescreen.asm
  1+  AAC2              ;
  2+  AAC2              ; Draws the life remaining screen
  3+  AAC2              ;
  4+  AAC2              lifescreen_draw:
  5+  AAC2 CD 08 AB         call lifescreen_init
  6+  AAC5
  7+  AAC5 3A 0C B9         ld a,(game_currentplayer)             ; get the current player
  8+  AAC8 C6 30            add 48                                ; add 48 to get char
  9+  AACA 21 58 83         ld hl,string_lifescreen_player+10
 10+  AACD 77               ld (hl),a                             ; load this to the string we're about to show
 11+  AACE
 12+  AACE 21 4E 83         ld hl,string_lifescreen_player
 13+  AAD1 CD CC 84         call string_print
 14+  AAD4
 15+  AAD4 3A 43 B9         ld a,(player+9)                       ; get the current player lives
 16+  AAD7 C6 30            add 48                                ; add 48 to get the character
 17+  AAD9 FE 31            cp 49
 18+  AADB C2 EE AA         jp nz,lifescreen_draw0
 19+  AADE 21 68 83         ld hl,string_lifescreen_lastman
 20+  AAE1
 21+  AAE1 06 08            ld b,8
 22+  AAE3 3E 0A            ld a,10                                ; set red
 23+  AAE5 11 6C 58         ld de,22528+108                        ; attrs here
 24+  AAE8 CD D1 A7         call screen_setcolours
 25+  AAEB
 26+  AAEB C3 F5 AA         jp lifescreen_draw1
 27+  AAEE              lifescreen_draw0:
 28+  AAEE 21 5D 83         ld hl,string_lifescreen_lives+2       ; not last man, so use the normal view
 29+  AAF1 77               ld (hl),a                             ; load this to the string we're about to show
 30+  AAF2 21 5B 83         ld hl,string_lifescreen_lives
 31+  AAF5              lifescreen_draw1:
 32+  AAF5 CD CC 84         call string_print
 33+  AAF8
 34+  AAF8 3E 86            ld a,134
 35+  AAFA 11 0B 58         ld de, 22528+11     ; get the colour for the top text
 36+  AAFD 06 0A            ld b,10
 37+  AAFF CD D1 A7         call screen_setcolours
 38+  AB02
 39+  AB02 3E 64            ld a,100                              ; wait for 200 frames
 40+  AB04 CD 52 80         call utilities_waitforkey_forframes   ; wait for keypress
 41+  AB07
 42+  AB07 C9               ret
 43+  AB08
 44+  AB08              ;
 45+  AB08              ; Initialises the screen
 46+  AB08              ;
 47+  AB08              lifescreen_init:
 48+  AB08              ; We want a blue screen.
 49+  AB08                  ;call $0D6B
 50+  AB08 3E 0E            ld a,14             ; yellow ink (6) on blue paper (1),
 51+  AB0A                                      ; bright (64).
 52+  AB0A CD 67 80         call utilities_clearscreen
 53+  AB0D 32 8D 5C         ld (23693),a        ; set our screen colours.
 54+  AB10 3E 01            ld a,1              ; 1 is the code for blue.
 55+  AB12 D3 FE            out (254),a         ; write to port 254.
 56+  AB14                  ;call 3503           ; ROM routine - clears screen, opens chan 2.
 57+  AB14
 58+  AB14 C9               ret
# file closed: screen/lifescreen.asm
 28   AB15                  include "screen\gameover.asm"
# file opened: screen/gameover.asm
  1+  AB15              ;
  2+  AB15              ; Draws the game over screen
  3+  AB15              ;
  4+  AB15              gameover_draw:
  5+  AB15 CD 4E C0         call scores_processhighscores
  6+  AB18
  7+  AB18              gameover_draw0:
  8+  AB18 CD 58 AB         call gameover_enterhighscores
  9+  AB1B
 10+  AB1B CD F6 AB         call gameover_init
 11+  AB1E
 12+  AB1E 21 73 83         ld hl,string_gameoverscreen_gameover
 13+  AB21 CD CC 84         call string_print
 14+  AB24
 15+  AB24 21 7F 83         ld hl,string_gameoverscreen_copyright
 16+  AB27 CD CC 84         call string_print
 17+  AB2A
 18+  AB2A CD 3B AB         call gameover_commontext
 19+  AB2D
 20+  AB2D 06 0B            ld b,11
 21+  AB2F 3E 42            ld a,66
 22+  AB31 11 2B 58         ld de,22528+43                         ; attrs here
 23+  AB34 CD D1 A7         call screen_setcolours
 24+  AB37 CD 47 80         call utilities_waitforkey   ; wait for keypress
 25+  AB3A
 26+  AB3A C9               ret
 27+  AB3B
 28+  AB3B              ;
 29+  AB3B              ; Draws text shared by the game over and high score screens
 30+  AB3B              ;
 31+  AB3B              gameover_commontext:
 32+  AB3B CD A3 A7         call screen_setuptext       ; show scores
 33+  AB3E CD 18 C0         call scores_printscores     ; print the current scores
 34+  AB41
 35+  AB41 21 AD 83         ld hl,string_gameover_credits
 36+  AB44 CD CC 84         call string_print
 37+  AB47
 38+  AB47 21 99 83         ld hl,string_gameoverscreen_bestscores
 39+  AB4A CD CC 84         call string_print
 40+  AB4D
 41+  AB4D 06 20            ld b,32
 42+  AB4F 3E 45            ld a,69
 43+  AB51 11 C0 5A         ld de,22528+704                         ; attrs here
 44+  AB54 CD D1 A7         call screen_setcolours
 45+  AB57
 46+  AB57 C9               ret
 47+  AB58
 48+  AB58              ;
 49+  AB58              ; If required, enter highscore
 50+  AB58              ;
 51+  AB58              gameover_enterhighscores:
 52+  AB58                  ; check if we need to enter initial
 53+  AB58 3A 4D C0         ld a,(scores_highscoretmp)
 54+  AB5B FE 00            cp 0
 55+  AB5D C8               ret z
 56+  AB5E CD 8C AB         call gameover_enterhighscores_init
 57+  AB61 3A 4D C0         ld a,(scores_highscoretmp)
 58+  AB64 3D               dec a
 59+  AB65 3D               dec a
 60+  AB66 3D               dec a                                   ; get high score location back to position of name
 61+  AB67 16 00            ld d,0
 62+  AB69 5F               ld e,a
 63+  AB6A 21 D4 BF         ld hl,scores_table
 64+  AB6D 19               add hl,de                               ; load memory into hl
 65+  AB6E 08               ex af,af'
 66+  AB6F 06 0F            ld b,15
 67+  AB71 CD 82 80         call utilities_pauseforframes           ; pause for a little bit
 68+  AB74 06 03            ld b,3                                  ; collect three chars
 69+  AB76              gameover_draw2:
 70+  AB76 C5               push bc
 71+  AB77 E5               push hl
 72+  AB78 CD 86 80         call utilities_readkey               ; get key into a
 73+  AB7B E1               pop hl
 74+  AB7C 77               ld (hl),a
 75+  AB7D 23               inc hl
 76+  AB7E E5               push hl
 77+  AB7F CD 3A C0         call scores_showtable
 78+  AB82 E1               pop hl
 79+  AB83 06 0F            ld b,15
 80+  AB85 CD 82 80         call utilities_pauseforframes
 81+  AB88 C1               pop bc
 82+  AB89 10 EB            djnz gameover_draw2
 83+  AB8B C9               ret
 84+  AB8C
 85+  AB8C              ;
 86+  AB8C              ; Displays the screen text for high score entry
 87+  AB8C              ;
 88+  AB8C              gameover_enterhighscores_init:
 89+  AB8C
 90+  AB8C CD F6 AB         call gameover_init
 91+  AB8F CD 3B AB         call gameover_commontext
 92+  AB92
 93+  AB92 21 B9 83         ld hl,string_highscore_congratulations
 94+  AB95 CD CC 84         call string_print
 95+  AB98
 96+  AB98 3A 0C B9         ld a,(game_currentplayer)
 97+  AB9B FE 01            cp 1
 98+  AB9D 21 CB 83         ld hl,string_highscore_player1
 99+  ABA0 C3 A6 AB         jp gameover_enterhighscores_init1
100+  ABA3              gameover_enterhighscores_init0:
101+  ABA3 21 D6 83         ld hl,string_highscore_player2
102+  ABA6              gameover_enterhighscores_init1:
103+  ABA6 CD CC 84         call string_print
104+  ABA9 06 60            ld b,96
105+  ABAB 3E 43            ld a,67
106+  ABAD 11 A0 58         ld de,22528+160                         ; attrs here
107+  ABB0 CD D1 A7         call screen_setcolours
108+  ABB3
109+  ABB3 21 E1 83         ld hl,string_highscore_youhaveearned
110+  ABB6 CD CC 84         call string_print
111+  ABB9
112+  ABB9 3A 4D C0         ld a,(scores_highscoretmp)
113+  ABBC FE 05            cp 5
114+  ABBE CA CC AB         jp z, gameover_enterhighscores_init2    ; first place
115+  ABC1 FE 11            cp 17
116+  ABC3 CA D2 AB         jp z, gameover_enterhighscores_init3    ; 2nd place
117+  ABC6 21 1D 84         ld hl,string_highscore_place3           ; 3rd place
118+  ABC9 C3 D8 AB         jp gameover_enterhighscores_init4
119+  ABCC              gameover_enterhighscores_init2
120+  ABCC 21 F3 83         ld hl,string_highscore_place1
121+  ABCF C3 D8 AB         jp gameover_enterhighscores_init4
122+  ABD2              gameover_enterhighscores_init3
123+  ABD2 21 08 84         ld hl,string_highscore_place2
124+  ABD5 C3 D8 AB         jp gameover_enterhighscores_init4
125+  ABD8              gameover_enterhighscores_init4
126+  ABD8 CD CC 84         call string_print
127+  ABDB
128+  ABDB 06 60            ld b,96
129+  ABDD 3E 42            ld a,66
130+  ABDF 11 40 59         ld de,22528+320                         ; attrs here
131+  ABE2 CD D1 A7         call screen_setcolours
132+  ABE5
133+  ABE5 21 32 84         ld hl,string_highscore_pleaseenter
134+  ABE8 CD CC 84         call string_print
135+  ABEB
136+  ABEB 06 60            ld b,96
137+  ABED 3E 46            ld a,70
138+  ABEF 11 E0 59         ld de,22528+480                         ; attrs here
139+  ABF2 CD D1 A7         call screen_setcolours
140+  ABF5 C9               ret
141+  ABF6
142+  ABF6              ;
143+  ABF6              ; Initialises the screen
144+  ABF6              ;
145+  ABF6              gameover_init:
146+  ABF6              ; We want a black screen.
147+  ABF6 3E 47            ld a,71             ; white ink (7) on black paper (0),
148+  ABF8                                      ; bright (64).
149+  ABF8 CD 67 80         call utilities_clearscreen
150+  ABFB 32 8D 5C         ld (23693),a        ; set our screen colours.
151+  ABFE 3E 00            ld a,0              ; 2 is the code for red.
152+  AC00 D3 FE            out (254),a         ; write to port 254.
153+  AC02 C9               ret
# file closed: screen/gameover.asm
 29   AC03                  include "screen\endlevel.asm"
# file opened: screen/endlevel.asm
  1+  AC03              ;
  2+  AC03              ; Draws the level transition screen
  3+  AC03              ;
  4+  AC03              endlevel_draw:
  5+  AC03 CD F9 AC         call endlevel_init
  6+  AC06 CD E2 AC         call endlevel_commontext
  7+  AC09
  8+  AC09 21 B9 83         ld hl,string_highscore_congratulations
  9+  AC0C CD CC 84         call string_print
 10+  AC0F
 11+  AC0F 3A 0C B9         ld a,(game_currentplayer)
 12+  AC12 FE 01            cp 1
 13+  AC14 21 CB 83         ld hl,string_highscore_player1
 14+  AC17 C3 1D AC         jp endlevel_init1
 15+  AC1A              endlevel_init0:
 16+  AC1A 21 D6 83         ld hl,string_highscore_player2
 17+  AC1D              endlevel_init1:
 18+  AC1D CD CC 84         call string_print
 19+  AC20
 20+  AC20 21 4F 84         ld hl,string_endlevel_youhaveearned
 21+  AC23 CD CC 84         call string_print
 22+  AC26
 23+  AC26 CD 81 AC         call endlevel_workoutbonus
 24+  AC29 D5               push de
 25+  AC2A 08               ex af,af'                               ; store the a value for later
 26+  AC2B CD CC 84         call string_print
 27+  AC2E D1               pop de
 28+  AC2F 62 6B            ld hl,de                                ; get the points text into de
 29+  AC31 CD CC 84         call string_print
 30+  AC34
 31+  AC34 21 BA 84         ld hl, string_endlevel_anothergo
 32+  AC37 CD CC 84         call string_print
 33+  AC3A
 34+  AC3A 06 20            ld b,32
 35+  AC3C 3E 63            ld a,99
 36+  AC3E 11 60 59         ld de,22528+352                         ; attrs here
 37+  AC41 CD D1 A7         call screen_setcolours
 38+  AC44
 39+  AC44 06 20            ld b,32
 40+  AC46 3E 65            ld a,101
 41+  AC48 11 A0 59         ld de,22528+416                         ; attrs here
 42+  AC4B CD D1 A7         call screen_setcolours
 43+  AC4E
 44+  AC4E 06 20            ld b,32
 45+  AC50 3E 63            ld a,99
 46+  AC52 11 E0 59         ld de,22528+480                         ; attrs here
 47+  AC55 CD D1 A7         call screen_setcolours
 48+  AC58
 49+  AC58 06 20            ld b,32
 50+  AC5A 3E 62            ld a,98
 51+  AC5C 11 40 5A         ld de,22528+576                         ; attrs here
 52+  AC5F CD D1 A7         call screen_setcolours
 53+  AC62
 54+  AC62 08               ex af,af'                               ; get back a value with bonus type
 55+  AC63 06 14            ld b,20
 56+  AC65 CD 82 80         call utilities_pauseforframes
 57+  AC68
 58+  AC68 47               ld b,a                      ; put the bonus count in b
 59+  AC69              endlevel_init2:
 60+  AC69 C5               push bc
 61+  AC6A 06 01            ld b,1
 62+  AC6C CD F8 BF         call scores_addthousands
 63+  AC6F CD EA B9         call player_recordcurrentscore
 64+  AC72 CD 18 C0         call scores_printscores     ; print the current scores
 65+  AC75 06 0A            ld b,10
 66+  AC77 CD 82 80         call utilities_pauseforframes
 67+  AC7A C1               pop bc
 68+  AC7B 10 EC            djnz endlevel_init2
 69+  AC7D
 70+  AC7D CD 47 80         call utilities_waitforkey   ; wait for keypress
 71+  AC80
 72+  AC80 C9               ret
 73+  AC81
 74+  AC81              ;
 75+  AC81              ; Works out the bonus
 76+  AC81              ; Outputs:
 77+  AC81              ; a = 15 (all seven)
 78+  AC81              ; a = 10 (3 large or 4 small)
 79+  AC81              ; a = 5 (1 large diamond)
 80+  AC81              ; hl - pointer to bonus text
 81+  AC81              ; de - pointer to points text
 82+  AC81              ;
 83+  AC81              endlevel_workoutbonus:
 84+  AC81 21 6F B2         ld hl,level01diamonds+2     ; location of state of first diamond
 85+  AC84 06 03            ld b,3                      ; number to check
 86+  AC86 16 00            ld d,0                      ; zero diamond count
 87+  AC88              endlevel_workoutbonus0:
 88+  AC88 7E               ld a,(hl)                   ; get state
 89+  AC89 FE 01            cp 1
 90+  AC8B C2 8F AC         jp nz,endlevel_workoutbonus1 ; if not, move on
 91+  AC8E 14               inc d                       ; increment diamond count
 92+  AC8F              endlevel_workoutbonus1:
 93+  AC8F 23               inc hl
 94+  AC90 23               inc hl
 95+  AC91 23               inc hl
 96+  AC92 23               inc hl
 97+  AC93 23               inc hl                      ; get to next state
 98+  AC94 10 F2            djnz endlevel_workoutbonus0
 99+  AC96
100+  AC96 21 7F B2         ld hl,level01gems+2     ; location of state of first gem
101+  AC99 06 04            ld b,4                      ; number to check
102+  AC9B 1E 00            ld e,0                      ; zero gem count
103+  AC9D              endlevel_workoutbonus2:
104+  AC9D 7E               ld a,(hl)                   ; get state
105+  AC9E FE 01            cp 1
106+  ACA0 C2 A4 AC         jp nz,endlevel_workoutbonus3 ; if not, move on
107+  ACA3 1C               inc e                       ; increment diamond count
108+  ACA4              endlevel_workoutbonus3:
109+  ACA4 23               inc hl
110+  ACA5 23               inc hl
111+  ACA6 23               inc hl
112+  ACA7 23               inc hl
113+  ACA8 23               inc hl                     ; get to next state
114+  ACA9 10 F2            djnz endlevel_workoutbonus2
115+  ACAB
116+  ACAB 7A               ld a,d
117+  ACAC 83               add e
118+  ACAD FE 07            cp 7                        ; check for max bonus
119+  ACAF C2 BB AC         jp nz,endlevel_workoutbonus4 ;
120+  ACB2 3E 0F            ld a,15
121+  ACB4 21 7F 84         ld hl, string_endlevel_bonus3
122+  ACB7 11 AB 84         ld de, string_endlevel_points3
123+  ACBA C9               ret                         ; return with bonus of 15
124+  ACBB              endlevel_workoutbonus4:
125+  ACBB 7A               ld a,d                      ; check for for diamonds
126+  ACBC FE 03            cp 3
127+  ACBE C2 CA AC         jp nz,endlevel_workoutbonus5
128+  ACC1 3E 0A            ld a,10
129+  ACC3 21 70 84         ld hl, string_endlevel_bonus2
130+  ACC6 11 9C 84         ld de, string_endlevel_points2
131+  ACC9 C9               ret                         ; return with bonus of ten
132+  ACCA              endlevel_workoutbonus5:
133+  ACCA 7B               ld a,e                      ; check for four gems
134+  ACCB FE 04            cp 4
135+  ACCD C2 D9 AC         jp nz,endlevel_workoutbonus6
136+  ACD0 3E 0A            ld a,10
137+  ACD2 21 70 84         ld hl, string_endlevel_bonus2
138+  ACD5 11 9C 84         ld de, string_endlevel_points2
139+  ACD8 C9               ret                         ; return with bonus of 10
140+  ACD9              endlevel_workoutbonus6:
141+  ACD9 3E 05            ld a,5                      ; otherwise, bonus is 5
142+  ACDB 21 61 84         ld hl, string_endlevel_bonus1
143+  ACDE 11 8E 84         ld de, string_endlevel_points1
144+  ACE1 C9               ret
145+  ACE2
146+  ACE2              ;
147+  ACE2              ; Draws text shared by the game over and high score screens
148+  ACE2              ;
149+  ACE2              endlevel_commontext:
150+  ACE2 CD A3 A7         call screen_setuptext       ; show scores
151+  ACE5 CD 18 C0         call scores_printscores     ; print the current scores
152+  ACE8
153+  ACE8 21 99 83         ld hl,string_gameoverscreen_bestscores
154+  ACEB CD CC 84         call string_print
155+  ACEE
156+  ACEE 06 20            ld b,32
157+  ACF0 3E 45            ld a,69
158+  ACF2 11 C0 5A         ld de,22528+704                         ; attrs here
159+  ACF5 CD D1 A7         call screen_setcolours
160+  ACF8
161+  ACF8 C9               ret
162+  ACF9
163+  ACF9              ;
164+  ACF9              ; Initialises the screen
165+  ACF9              ;
166+  ACF9              endlevel_init:
167+  ACF9              ; We want a green screen.
168+  ACF9 3E 61            ld a,97             ; white ink (7) on black paper (0),
169+  ACFB                                      ; bright (64).
170+  ACFB CD 67 80         call utilities_clearscreen
171+  ACFE 32 8D 5C         ld (23693),a        ; set our screen colours.
172+  AD01 3E 00            ld a,0              ; 2 is the code for red.
173+  AD03 D3 FE            out (254),a         ; write to port 254.
174+  AD05 C9               ret
# file closed: screen/endlevel.asm
 30   AD06
 31   AD06                  include "sound\sound.asm"
# file opened: sound/sound.asm
  1+  AD06              sound_gemcollected:
  2+  AD06 21 C8 00         ld hl,200 ; pitch.
  3+  AD09 11 3E 00         ld de,62 ; duration.
  4+  AD0C CD B5 03         call 949 ; ROM beeper routine.
  5+  AD0F C9               ret
  6+  AD10
  7+  AD10              sound_pitchbend:
  8+  AD10 21 F4 01         ld hl,500 ; starting pitch.
  9+  AD13 06 FA            ld b,250 ; length of pitch bend.
 10+  AD15              sound_pitchbend0:
 11+  AD15 C5                push bc
 12+  AD16 E5               push hl ; store pitch.
 13+  AD17 11 01 00         ld de,1 ; very short duration.
 14+  AD1A CD B5 03         call 949 ; ROM beeper routine.
 15+  AD1D E1               pop hl ; restore pitch.
 16+  AD1E 23               inc hl ; pitch going up.
 17+  AD1F C1               pop bc
 18+  AD20 10 F3            djnz sound_pitchbend0 ; repeat.
 19+  AD22 C9               ret
 20+  AD23
 21+  AD23              sound_rockfell:
 22+  AD23 08               ex af,af'
 23+  AD24 1E 32            ld e,50 ; repeat 250 times.
 24+  AD26 21 00 00         ld hl,0 ; start pointer in ROM.
 25+  AD29 D5           sound_rockfell2 push de
 26+  AD2A 06 20            ld b,32 ; length of step.
 27+  AD2C C5           sound_rockfell0 push bc
 28+  AD2D 7E               ld a,(hl) ; next "random" number.
 29+  AD2E 23               inc hl ; pointer.
 30+  AD2F E6 F8            and 248 ; we want a black border.
 31+  AD31 D3 FE            out (254),a ; write to speaker.
 32+  AD33 7B               ld a,e ; as e gets smaller...
 33+  AD34 2F               cpl ; ...we increase the delay.
 34+  AD35 3D           sound_rockfell1 dec a ; decrement loop counter.
 35+  AD36 20 FD            jr nz,sound_rockfell1 ; delay loop.
 36+  AD38 C1               pop bc
 37+  AD39 10 F1            djnz sound_rockfell0 ; next step.
 38+  AD3B D1               pop de
 39+  AD3C 7B               ld a,e
 40+  AD3D D6 18            sub 24 ; size of step.
 41+  AD3F FE 1E            cp 30 ; end of range.
 42+  AD41 CA 52 AD         jp z,sound_rockfell5
 43+  AD44 DA 52 AD         jp c, sound_rockfell5
 44+  AD47 5F               ld e,a
 45+  AD48 2F               cpl
 46+  AD49 06 28        sound_rockfell3 ld b,40 ; silent period.
 47+  AD4B 10 FE        sound_rockfell4 djnz sound_rockfell4
 48+  AD4D 3D               dec a
 49+  AD4E 20 F9            jr nz,sound_rockfell3
 50+  AD50 18 D7            jr sound_rockfell2
 51+  AD52              sound_rockfell5
 52+  AD52 08               ex af,af'
 53+  AD53 C9               ret
 54+  AD54
# file closed: sound/sound.asm
 32   AD54
 33   AD54                  include "leveldata\level01.asm"
# file opened: leveldata/level01.asm
  1+  AD54              ; ###############################################################
  2+  AD54              ; Data for level 1
  3+  AD54              ; ###############################################################
  4+  AD54              level01:
  5+  AD54
  6+  AD54                  ;defb 09,04,04,04,04,04,04,04,04,04,04,04,04,04,04,09,09,04,04,04,04,04,04,04,04,04,04,04,04,04,04,09
  7+  AD54
  8+  AD54 00 00 05 05      defb 00,00,05,05,05,05,05,05,05,05,05,05,05,05,02,01,01,01,03,05,05,05,05,05,05,05,05,05,05,05,00,00
  8+  AD58 05 05 05 05
  8+  AD5C 05 05 05 05
  8+  AD60 05 05 02 01
  8+  AD64 01 01 03 05
  8+  AD68 05 05 05 05
  8+  AD6C 05 05 05 05
  8+  AD70 05 05 00 00
  9+  AD74 00 00 05 05      defb 00,00,05,05,05,05,05,05,05,05,05,05,02,01,01,01,01,01,01,01,03,05,05,05,05,05,05,05,05,05,00,00
  9+  AD78 05 05 05 05
  9+  AD7C 05 05 05 05
  9+  AD80 02 01 01 01
  9+  AD84 01 01 01 01
  9+  AD88 03 05 05 05
  9+  AD8C 05 05 05 05
  9+  AD90 05 05 00 00
 10+  AD94 00 00 05 05      defb 00,00,05,05,05,05,05,05,05,05,02,01,01,01,01,01,01,01,01,01,01,01,03,05,13,13,13,13,13,13,00,00
 10+  AD98 05 05 05 05
 10+  AD9C 05 05 02 01
 10+  ADA0 01 01 01 01
 10+  ADA4 01 01 01 01
 10+  ADA8 01 01 03 05
 10+  ADAC 0D 0D 0D 0D
 10+  ADB0 0D 0D 00 00
 11+  ADB4 00 00 01 01      defb 00,00,01,01,01,01,00,01,01,01,01,01,01,01,01,01,01,01,01,01,01,01,01,03,05,05,05,05,05,05,00,00
 11+  ADB8 01 01 00 01
 11+  ADBC 01 01 01 01
 11+  ADC0 01 01 01 01
 11+  ADC4 01 01 01 01
 11+  ADC8 01 01 01 03
 11+  ADCC 05 05 05 05
 11+  ADD0 05 05 00 00
 12+  ADD4 00 00 01 01      defb 00,00,01,01,04,04,04,04,04,04,01,01,01,01,01,01,01,01,01,01,01,01,01,01,01,01,01,01,00,01,00,00
 12+  ADD8 04 04 04 04
 12+  ADDC 04 04 01 01
 12+  ADE0 01 01 01 01
 12+  ADE4 01 01 01 01
 12+  ADE8 01 01 01 01
 12+  ADEC 01 01 01 01
 12+  ADF0 00 01 00 00
 13+  ADF4 00 00 01 04      defb 00,00,01,04,04,04,04,04,04,04,04,04,01,01,01,01,01,01,01,01,01,01,01,01,00,00,00,00,00,01,00,00
 13+  ADF8 04 04 04 04
 13+  ADFC 04 04 04 04
 13+  AE00 01 01 01 01
 13+  AE04 01 01 01 01
 13+  AE08 01 01 01 01
 13+  AE0C 00 00 00 00
 13+  AE10 00 01 00 00
 14+  AE14 00 00 01 04      defb 00,00,01,04,04,01,01,01,01,01,04,04,04,04,01,01,01,01,01,01,01,00,00,00,00,01,01,01,01,01,00,00
 14+  AE18 04 01 01 01
 14+  AE1C 01 01 04 04
 14+  AE20 04 04 01 01
 14+  AE24 01 01 01 01
 14+  AE28 01 00 00 00
 14+  AE2C 00 01 01 01
 14+  AE30 01 01 00 00
 15+  AE34 00 00 01 04      defb 00,00,01,04,04,04,04,04,04,01,04,04,04,04,04,04,04,04,00,00,00,00,04,04,04,04,04,04,04,01,00,00
 15+  AE38 04 04 04 04
 15+  AE3C 04 01 04 04
 15+  AE40 04 04 04 04
 15+  AE44 04 04 00 00
 15+  AE48 00 00 04 04
 15+  AE4C 04 04 04 04
 15+  AE50 04 01 00 00
 16+  AE54 00 00 01 01      defb 00,00,01,01,01,04,01,01,01,01,04,04,04,04,04,04,04,04,00,04,04,04,04,04,04,04,04,04,04,01,00,00
 16+  AE58 01 04 01 01
 16+  AE5C 01 01 04 04
 16+  AE60 04 04 04 04
 16+  AE64 04 04 00 04
 16+  AE68 04 04 04 04
 16+  AE6C 04 04 04 04
 16+  AE70 04 01 00 00
 17+  AE74 00 00 01 00      defb 00,00,01,00,00,00,00,00,00,04,04,04,04,04,04,04,04,04,00,04,04,04,04,04,04,04,04,04,04,01,00,00
 17+  AE78 00 00 00 00
 17+  AE7C 00 04 04 04
 17+  AE80 04 04 04 04
 17+  AE84 04 04 00 04
 17+  AE88 04 04 04 04
 17+  AE8C 04 04 04 04
 17+  AE90 04 01 00 00
 18+  AE94 00 00 01 07      defb 00,00,01,07,07,07,07,07,07,01,04,04,04,04,04,04,04,04,00,04,04,04,04,04,04,04,04,04,04,01,00,00
 18+  AE98 07 07 07 07
 18+  AE9C 07 01 04 04
 18+  AEA0 04 04 04 04
 18+  AEA4 04 04 00 04
 18+  AEA8 04 04 04 04
 18+  AEAC 04 04 04 04
 18+  AEB0 04 01 00 00
 19+  AEB4 00 00 01 00      defb 00,00,01,00,00,00,00,00,00,01,04,04,04,04,04,04,04,04,00,04,04,04,04,04,04,00,00,00,00,01,00,00
 19+  AEB8 00 00 00 00
 19+  AEBC 00 01 04 04
 19+  AEC0 04 04 04 04
 19+  AEC4 04 04 00 04
 19+  AEC8 04 04 04 04
 19+  AECC 04 00 00 00
 19+  AED0 00 01 00 00
 20+  AED4 00 00 01 00      defb 00,00,01,00,00,00,00,00,00,01,04,04,04,04,04,04,04,04,00,04,04,04,04,04,04,00,04,04,00,01,00,00
 20+  AED8 00 00 00 00
 20+  AEDC 00 01 04 04
 20+  AEE0 04 04 04 04
 20+  AEE4 04 04 00 04
 20+  AEE8 04 04 04 04
 20+  AEEC 04 00 04 04
 20+  AEF0 00 01 00 00
 21+  AEF4 00 00 01 06      defb 00,00,01,06,06,06,06,06,06,01,04,04,04,04,04,04,04,04,00,04,04,04,04,04,04,00,04,04,00,01,00,00
 21+  AEF8 06 06 06 06
 21+  AEFC 06 01 04 04
 21+  AF00 04 04 04 04
 21+  AF04 04 04 00 04
 21+  AF08 04 04 04 04
 21+  AF0C 04 00 04 04
 21+  AF10 00 01 00 00
 22+  AF14 00 00 01 06      defb 00,00,01,06,06,06,06,06,06,01,04,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,04,04,00,01,00,00
 22+  AF18 06 06 06 06
 22+  AF1C 06 01 04 00
 22+  AF20 00 00 00 00
 22+  AF24 00 00 00 00
 22+  AF28 00 00 00 00
 22+  AF2C 00 00 04 04
 22+  AF30 00 01 00 00
 23+  AF34 00 00 01 06      defb 00,00,01,06,06,06,06,06,06,01,04,00,04,04,04,04,04,04,00,04,04,04,00,04,04,04,04,04,00,01,00,00
 23+  AF38 06 06 06 06
 23+  AF3C 06 01 04 00
 23+  AF40 04 04 04 04
 23+  AF44 04 04 00 04
 23+  AF48 04 04 00 04
 23+  AF4C 04 04 04 04
 23+  AF50 00 01 00 00
 24+  AF54 00 00 01 06      defb 00,00,01,06,06,06,06,06,06,01,04,00,04,04,04,04,04,04,00,04,04,04,00,04,04,04,04,04,00,01,00,00
 24+  AF58 06 06 06 06
 24+  AF5C 06 01 04 00
 24+  AF60 04 04 04 04
 24+  AF64 04 04 00 04
 24+  AF68 04 04 00 04
 24+  AF6C 04 04 04 04
 24+  AF70 00 01 00 00
 25+  AF74 00 00 01 01      defb 00,00,01,01,01,01,01,01,01,01,04,00,04,04,04,04,04,04,00,04,04,04,00,04,04,04,04,04,00,01,00,00
 25+  AF78 01 01 01 01
 25+  AF7C 01 01 04 00
 25+  AF80 04 04 04 04
 25+  AF84 04 04 00 04
 25+  AF88 04 04 00 04
 25+  AF8C 04 04 04 04
 25+  AF90 00 01 00 00
 26+  AF94 00 00 01 04      defb 00,00,01,04,04,04,04,04,04,04,04,00,04,04,04,04,04,04,00,04,04,04,00,00,00,00,04,04,04,01,00,00
 26+  AF98 04 04 04 04
 26+  AF9C 04 04 04 00
 26+  AFA0 04 04 04 04
 26+  AFA4 04 04 00 04
 26+  AFA8 04 04 00 00
 26+  AFAC 00 00 04 04
 26+  AFB0 04 01 00 00
 27+  AFB4 00 00 01 04      defb 00,00,01,04,04,04,00,00,00,00,00,00,04,04,04,04,04,04,00,04,04,04,04,04,04,00,04,04,04,01,00,00
 27+  AFB8 04 04 00 00
 27+  AFBC 00 00 00 00
 27+  AFC0 04 04 04 04
 27+  AFC4 04 04 00 04
 27+  AFC8 04 04 04 04
 27+  AFCC 04 00 04 04
 27+  AFD0 04 01 00 00
 28+  AFD4 00 00 01 04      defb 00,00,01,04,04,04,00,04,04,04,04,04,04,04,04,04,04,04,00,04,04,04,04,04,04,00,04,04,04,01,00,00
 28+  AFD8 04 04 00 04
 28+  AFDC 04 04 04 04
 28+  AFE0 04 04 04 04
 28+  AFE4 04 04 00 04
 28+  AFE8 04 04 04 04
 28+  AFEC 04 00 04 04
 28+  AFF0 04 01 00 00
 29+  AFF4 00 00 01 04      defb 00,00,01,04,04,04,00,04,04,04,01,01,01,01,01,01,01,01,01,01,01,01,01,01,04,00,04,04,04,01,00,00
 29+  AFF8 04 04 00 04
 29+  AFFC 04 04 01 01
 29+  B000 01 01 01 01
 29+  B004 01 01 01 01
 29+  B008 01 01 01 01
 29+  B00C 04 00 04 04
 29+  B010 04 01 00 00
 30+  B014 00 00 01 04      defb 00,00,01,04,04,04,00,04,04,04,01,00,00,00,00,00,00,00,00,00,00,00,00,01,04,00,04,04,04,01,00,00
 30+  B018 04 04 00 04
 30+  B01C 04 04 01 00
 30+  B020 00 00 00 00
 30+  B024 00 00 00 00
 30+  B028 00 00 00 01
 30+  B02C 04 00 04 04
 30+  B030 04 01 00 00
 31+  B034 00 00 01 04      defb 00,00,01,04,04,04,00,04,04,04,01,00,00,00,00,00,00,00,00,00,00,00,00,01,04,00,04,04,04,01,00,00
 31+  B038 04 04 00 04
 31+  B03C 04 04 01 00
 31+  B040 00 00 00 00
 31+  B044 00 00 00 00
 31+  B048 00 00 00 01
 31+  B04C 04 00 04 04
 31+  B050 04 01 00 00
 32+  B054 00 00 01 04      defb 00,00,01,04,04,04,00,04,04,04,01,00,00,00,00,00,00,00,00,00,00,00,00,01,04,00,04,04,04,01,00,00
 32+  B058 04 04 00 04
 32+  B05C 04 04 01 00
 32+  B060 00 00 00 00
 32+  B064 00 00 00 00
 32+  B068 00 00 00 01
 32+  B06C 04 00 04 04
 32+  B070 04 01 00 00
 33+  B074 00 00 01 04      defb 00,00,01,04,04,04,00,04,04,04,04,00,00,00,00,00,00,00,00,00,00,00,00,04,04,04,04,04,04,01,00,00
 33+  B078 04 04 00 04
 33+  B07C 04 04 04 00
 33+  B080 00 00 00 00
 33+  B084 00 00 00 00
 33+  B088 00 00 00 04
 33+  B08C 04 04 04 04
 33+  B090 04 01 00 00
 34+  B094 00 00 01 04      defb 00,00,01,04,04,04,04,04,04,04,01,00,00,00,00,00,00,00,00,00,00,00,00,01,04,04,04,04,04,01,00,00
 34+  B098 04 04 04 04
 34+  B09C 04 04 01 00
 34+  B0A0 00 00 00 00
 34+  B0A4 00 00 00 00
 34+  B0A8 00 00 00 01
 34+  B0AC 04 04 04 04
 34+  B0B0 04 01 00 00
 35+  B0B4 00 00 01 04      defb 00,00,01,04,04,04,04,04,04,04,01,00,00,00,01,00,00,00,00,01,00,00,00,01,04,04,04,04,04,01,00,00
 35+  B0B8 04 04 04 04
 35+  B0BC 04 04 01 00
 35+  B0C0 00 00 01 00
 35+  B0C4 00 00 00 01
 35+  B0C8 00 00 00 01
 35+  B0CC 04 04 04 04
 35+  B0D0 04 01 00 00
 36+  B0D4 00 00 01 01      defb 00,00,01,01,01,01,01,01,01,01,01,01,01,01,01,01,01,01,01,01,01,01,01,01,01,01,01,01,01,01,00,00
 36+  B0D8 01 01 01 01
 36+  B0DC 01 01 01 01
 36+  B0E0 01 01 01 01
 36+  B0E4 01 01 01 01
 36+  B0E8 01 01 01 01
 36+  B0EC 01 01 01 01
 36+  B0F0 01 01 00 00
 37+  B0F4
 38+  B0F4              ; ###############################################################
 39+  B0F4              ; Object data: horiz, vert, state, memh, meml
 40+  B0F4              ; ###############################################################
 41+  B0F4              level01rocks:
 42+  B0F4 09 04 00 00      defb 9,4,0,0,0
 42+  B0F8 00
 43+  B0F9 0C 07 00 00      defb 12,7,0,0,0
 43+  B0FD 00
 44+  B0FE 10 07 00 00      defb 16,7,0,0,0
 44+  B102 00
 45+  B103 0B 08 00 00      defb 11,8,0,0,0
 45+  B107 00
 46+  B108 0A 0A 00 00      defb 10,10,0,0,0
 46+  B10C 00
 47+  B10D 0C 0A 00 00      defb 12,10,0,0,0
 47+  B111 00
 48+  B112 0D 09 00 00      defb 13,9,0,0,0
 48+  B116 00
 49+  B117 0E 08 00 00      defb 14,8,0,0,0
 49+  B11B 00
 50+  B11C 0F 0B 00 00      defb 15,11,0,0,0
 50+  B120 00
 51+  B121 0B 0C 00 00      defb 11,12,0,0,0
 51+  B125 00
 52+  B126 11 0C 00 00      defb 17,12,0,0,0
 52+  B12A 00
 53+  B12B 13 08 00 00      defb 19,8,0,0,0
 53+  B12F 00
 54+  B130 16 09 00 00      defb 22,9,0,0,0
 54+  B134 00
 55+  B135 13 0A 00 00      defb 19,10,0,0,0
 55+  B139 00
 56+  B13A 15 0A 00 00      defb 21,10,0,0,0
 56+  B13E 00
 57+  B13F 15 0C 00 00      defb 21,12,0,0,0
 57+  B143 00
 58+  B144 16 0C 00 00      defb 22,12,0,0,0
 58+  B148 00
 59+  B149 18 0A 00 00      defb 24,10,0,0,0
 59+  B14D 00
 60+  B14E 19 09 00 00      defb 25,9,0,0,0
 60+  B152 00
 61+  B153 1C 09 00 00      defb 28,9,0,0,0
 61+  B157 00
 62+  B158 1B 0C 00 00      defb 27,12,0,0,0
 62+  B15C 00
 63+  B15D 1A 0D 00 00      defb 26,13,0,0,0
 63+  B161 00
 64+  B162 19 0E 00 00      defb 25,14,0,0,0
 64+  B166 00
 65+  B167 19 10 00 00      defb 25,16,0,0,0
 65+  B16B 00
 66+  B16C 1A 11 00 00      defb 26,17,0,0,0
 66+  B170 00
 67+  B171 1B 11 00 00      defb 27,17,0,0,0
 67+  B175 00
 68+  B176 1C 12 00 00      defb 28,18,0,0,0
 68+  B17A 00
 69+  B17B 1A 13 00 00      defb 26,19,0,0,0
 69+  B17F 00
 70+  B180 1B 15 00 00      defb 27,21,0,0,0
 70+  B184 00
 71+  B185 1A 17 00 00      defb 26,23,0,0,0
 71+  B189 00
 72+  B18A 1B 18 00 00      defb 27,24,0,0,0
 72+  B18E 00
 73+  B18F 19 18 00 00      defb 25,24,0,0,0
 73+  B193 00
 74+  B194 18 17 00 00      defb 24,23,0,0,0
 74+  B198 00
 75+  B199 13 14 00 00      defb 19,20,0,0,0
 75+  B19D 00
 76+  B19E 14 12 00 00      defb 20,18,0,0,0
 76+  B1A2 00
 77+  B1A3 14 10 00 00      defb 20,16,0,0,0
 77+  B1A7 00
 78+  B1A8 15 10 00 00      defb 21,16,0,0,0
 78+  B1AC 00
 79+  B1AD 16 12 00 00      defb 22,18,0,0,0
 79+  B1B1 00
 80+  B1B2 11 14 00 00      defb 17,20,0,0,0
 80+  B1B6 00
 81+  B1B7 0D 11 00 00      defb 13,17,0,0,0
 81+  B1BB 00
 82+  B1BC 0C 13 00 00      defb 12,19,0,0,0
 82+  B1C0 00
 83+  B1C1 0B 13 00 00      defb 11,19,0,0,0
 83+  B1C5 00
 84+  B1C6 0A 11 00 00      defb 10,17,0,0,0
 84+  B1CA 00
 85+  B1CB 05 12 00 00      defb 5,18,0,0,0
 85+  B1CF 00
 86+  B1D0 07 16 00 00      defb 7,22,0,0,0
 86+  B1D4 00
 87+  B1D5 09 17 00 00      defb 9,23,0,0,0
 87+  B1D9 00
 88+  B1DA 07 18 00 00      defb 7,24,0,0,0
 88+  B1DE 00
 89+  B1DF 05 18 00 00      defb 5,24,0,0,0
 89+  B1E3 00
 90+  B1E4 06 19 00 00      defb 6,25,0,0,0
 90+  B1E8 00
 91+  B1E9 08 19 00 00      defb 8,25,0,0,0
 91+  B1ED 00
 92+  B1EE 04 17 00 00      defb 4,23,0,0,0
 92+  B1F2 00
 93+  B1F3 FF               defb 255
 94+  B1F4
 95+  B1F4              level01missiles:
 96+  B1F4 0B 17 00 00      defb 11,23,0,0,0
 96+  B1F8 00
 97+  B1F9 0B 16 00 00      defb 11,22,0,0,0
 97+  B1FD 00
 98+  B1FE 0C 17 00 00      defb 12,23,0,0,0
 98+  B202 00
 99+  B203 0C 16 00 00      defb 12,22,0,0,0
 99+  B207 00
100+  B208 0D 17 00 00      defb 13,23,0,0,0
100+  B20C 00
101+  B20D 0D 16 00 00      defb 13,22,0,0,0
101+  B211 00
102+  B212 0E 17 00 00      defb 14,23,0,0,0
102+  B216 00
103+  B217 0E 16 00 00      defb 14,22,0,0,0
103+  B21B 00
104+  B21C 0F 17 00 00      defb 15,23,0,0,0
104+  B220 00
105+  B221 0F 16 00 00      defb 15,22,0,0,0
105+  B225 00
106+  B226 10 17 00 00      defb 16,23,0,0,0
106+  B22A 00
107+  B22B 10 16 00 00      defb 16,22,0,0,0
107+  B22F 00
108+  B230 11 17 00 00      defb 17,23,0,0,0
108+  B234 00
109+  B235 11 16 00 00      defb 17,22,0,0,0
109+  B239 00
110+  B23A 12 17 00 00      defb 18,23,0,0,0
110+  B23E 00
111+  B23F 12 16 00 00      defb 18,22,0,0,0
111+  B243 00
112+  B244 13 17 00 00      defb 19,23,0,0,0
112+  B248 00
113+  B249 13 16 00 00      defb 19,22,0,0,0
113+  B24D 00
114+  B24E 14 17 00 00      defb 20,23,0,0,0
114+  B252 00
115+  B253 14 16 00 00      defb 20,22,0,0,0
115+  B257 00
116+  B258 15 17 00 00      defb 21,23,0,0,0
116+  B25C 00
117+  B25D 15 16 00 00      defb 21,22,0,0,0
117+  B261 00
118+  B262 16 17 00 00      defb 22,23,0,0,0
118+  B266 00
119+  B267 16 16 00 00      defb 22,22,0,0,0
119+  B26B 00
120+  B26C FF               defb 255
121+  B26D
122+  B26D              ;
123+  B26D              ; Diamonds: x,y,state,mem1+mem2
124+  B26D              ;
125+  B26D              level01diamonds:
126+  B26D 0C 1B 00 00      defb 12,27,0,0,0
126+  B271 00
127+  B272 10 1B 00 00      defb 16,27,0,0,0
127+  B276 00
128+  B277 15 1B 00 00      defb 21,27,0,0,0
128+  B27B 00
129+  B27C FF               defb 255
130+  B27D
131+  B27D              level01gems:
132+  B27D 12 14 00 00      defb 18,20,0,0,0
132+  B281 00
133+  B282 06 18 00 00      defb 6,24,0,0,0
133+  B286 00
134+  B287 19 17 00 00      defb 25,23,0,0,0
134+  B28B 00
135+  B28C 1C 11 00 00      defb 28,17,0,0,0
135+  B290 00
136+  B291 FF               defb 255
137+  B292              ;
138+  B292              ; Score area colours
139+  B292              ;
140+  B292              score_colours:
141+  B292 47 47 47 47      defb 71,71,71,71,71,71,71,71,71,71,71,66,67,67,67,67,67,67,67,67,66,71,71,71,71,71,71,71,71,71,71,71
141+  B296 47 47 47 47
141+  B29A 47 47 47 42
141+  B29E 43 43 43 43
141+  B2A2 43 43 43 43
141+  B2A6 42 47 47 47
141+  B2AA 47 47 47 47
141+  B2AE 47 47 47 47
142+  B2B2 47 47 47 47      defb 71,71,71,71,71,71,71,71,71,71,71,70,70,70,70,70,70,70,70,70,70,71,71,71,71,71,71,71,71,71,71,71
142+  B2B6 47 47 47 47
142+  B2BA 47 47 47 46
142+  B2BE 46 46 46 46
142+  B2C2 46 46 46 46
142+  B2C6 46 47 47 47
142+  B2CA 47 47 47 47
142+  B2CE 47 47 47 47
143+  B2D2
144+  B2D2              high_score_colours:
145+  B2D2 00 00 00 42      defb  0, 0, 0,66,66,66,71,71,71,71,71,71,67,67,67,71,71,71,71,71,71,70,70,70,71,71,71,71,71,71,0,0
145+  B2D6 42 42 47 47
145+  B2DA 47 47 47 47
145+  B2DE 43 43 43 47
145+  B2E2 47 47 47 47
145+  B2E6 47 46 46 46
145+  B2EA 47 47 47 47
145+  B2EE 47 47 00 00
# file closed: leveldata/level01.asm
 34   B2F2                  include "graphics\graphics.asm"
# file opened: graphics/graphics.asm
  1+  B2F2              ; Tiles graphics.
  2+  B2F2              sprites:
  3+  B2F2 00 00 00 00      defb    0  ,  0,  0,  0,  0,  0,  0,  0   ; 0, space
  3+  B2F6 00 00 00 00
  4+  B2FA FF FF FF FF      defb    255,255,255,255,255,255,255,255   ; 1, cyan block
  4+  B2FE FF FF FF FF
  5+  B302 01 03 07 0F      defb	  1,  3,  7, 15, 31, 63,127,255   ; 2, slope left
  5+  B306 1F 3F 7F FF
  6+  B30A 80 C0 E0 F0      defb    128,192,224,240,248,252,254,255   ; 3, slope right
  6+  B30E F8 FC FE FF
  7+  B312 55 AA 55 AA      defb    85,170, 85,170, 85,170, 85,170    ; 4, dirt
  7+  B316 55 AA 55 AA
  8+  B31A 00 00 00 00      defb    0  ,  0,  0,  0,  0,  0,  0,  0   ; 5, sky block
  8+  B31E 00 00 00 00
  9+  B322 FF FF FF FF      defb    255,255,255,255,255,255,255,255   ; 6, slime block
  9+  B326 FF FF FF FF
 10+  B32A FF FF 00 00      defb    255,255,  0,  0,  0,  0,  0,  0   ; 7, trapdoor
 10+  B32E 00 00 00 00
 11+  B332 18 2C 4E 8F      defb    24, 44, 78,143,241,114, 52,  24    ; 8, diamond
 11+  B336 F1 72 34 18
 12+  B33A 3C 7E FF 7F      defb    60,126,255,127,254,254,255,126    ; 9, rock
 12+  B33E FE FE FF 7E
 13+  B342 7E FF 7F 7F  	defb	126,255,127,127,254,255,126, 60    ; 10, rock 2
 13+  B346 FE FF 7E 3C
 14+  B34A 00 00 00 00      defb    0  ,  0,  0,  0,  0,  0,255,255   ; 11, sky block, pixel trapdoor
 14+  B34E 00 00 FF FF
 15+  B352 99 DB 7E 24  	defb    153,219,126, 36,255, 66, 36, 24   ; 12, missile
 15+  B356 FF 42 24 18
 16+  B35A 00 00 00 00      defb    0  ,  0,  0,  0,  0,  0,  0,  0   ; 13, sky block, tank background
 16+  B35E 00 00 00 00
 17+  B362 00 00 00 00  	defb    0,  0,  0,  0,  0, 60, 90, 52     ; 14, gem
 17+  B366 00 3C 5A 34
 18+  B36A FD FE FD FE  	defb	253,254,253,254,253,254,253,254   ; 15, damaged mountain
 18+  B36E FD FE FD FE
 19+  B372 F4 F8 F4 F8  	defb	244,248,244,248,244,248,244,248   ; 16, damaged mountain 2
 19+  B376 F4 F8 F4 F8
 20+  B37A D0 E0 D0 E0  	defb	208,224,208,224,208,224,208,224   ; 17, damaged mountain 3
 20+  B37E D0 E0 D0 E0
 21+  B382 40 80 40 80  	defb	 64,128, 64,128, 64,128, 64,128   ; 18, damaged mountain 4
 21+  B386 40 80 40 80
 22+  B38A 00 00 00 ED  	defb	0,  0,  0,237,237,  0,  0,  0	  ; 19, tank missile
 22+  B38E ED 00 00 00
 23+  B392 99 DB 7E 24  	defb    153,219,126, 36,255,126, 60, 24   ; 20, missile active
 23+  B396 FF 7E 3C 18
 24+  B39A
 25+  B39A
 26+  B39A              sprite_attrs:
 27+  B39A 46               defb    070 ; 0, space
 28+  B39B 4D               defb    077 ; 1, cyan block
 29+  B39C 4D               defb    077 ; 2, slope left
 30+  B39D 4D               defb    077 ; 3, slope right
 31+  B39E 46               defb    070 ; 4, dirt
 32+  B39F 4E               defb    078 ; 5, sky
 33+  B3A0 4C               defb    076 ; 6, slime
 34+  B3A1 42               defb    066 ; 7, trapdoor
 35+  B3A2 46               defb    070 ; 8, diamond
 36+  B3A3 42               defb    066 ; 9, rock
 37+  B3A4 42               defb    066 ; 10, rock 2
 38+  B3A5 49           	defb    073 ; 11, sky, trapdoor
 39+  B3A6 43           	defb    067 ; 12, missile
 40+  B3A7 4A               defb    074 ; 13, sky, red ink (tank)
 41+  B3A8 46               defb    070 ; 14, gem
 42+  B3A9 4D               defb    077 ; 15, damaged mountain
 43+  B3AA 4D               defb    077 ; 16, damaged mountain 2
 44+  B3AB 4D               defb    077 ; 17, damaged mountain 3
 45+  B3AC 4D               defb    077 ; 18, damaged mountain 4
 46+  B3AD 00           	defb 	000 ; 19, tank missile (not used
 47+  B3AE 43           	defb    067 ; 20, missile active
 48+  B3AF
 49+  B3AF
 50+  B3AF              player_sprite:
 51+  B3AF 10 39 92 FC  	defb	 16, 57,146,252, 56, 61,195,128 ; 0 up/down 1
 51+  B3B3 38 3D C3 80
 52+  B3B7 08 1C 08 FC  	defb	  8, 28,  8,252, 60, 28, 22, 50 ; 1 left 1
 52+  B3BB 3C 1C 16 32
 53+  B3BF 10 38 10 3F      defb   	 16, 56, 16, 63, 60, 56,104, 76 ; 2 right 1
 53+  B3C3 3C 38 68 4C
 54+  B3C7 08 9C 49 3F  	defb	  8,156, 73, 63, 28,188,195,  1 ; 3 up/down 2
 54+  B3CB 1C BC C3 01
 55+  B3CF 08 1C 08 FC  	defb	  8, 28,  8,252, 60, 60,100, 12; 4 left 2
 55+  B3D3 3C 3C 64 0C
 56+  B3D7 10 38 10 3F  	defb	 16, 56, 16, 63, 60, 60, 38, 48 ; 5 right 2
 56+  B3DB 3C 3C 26 30
 57+  B3DF 54 28 10 12  	defb	 84, 40, 16, 18, 30, 92,253, 95 ; 6 shoot up
 57+  B3E3 1E 5C FD 5F
 58+  B3E7 02 87 42 BF  	defb	 2,135, 66,191, 79,143, 25,  3  ; 7 shoot left
 58+  B3EB 4F 8F 19 03
 59+  B3EF 40 E1 42 FD  	defb	 64,225, 66,253,242,241,152,192 ; 8 shoot right
 59+  B3F3 F2 F1 98 C0
 60+  B3F7 FA BF 3A 78  	defb	 250,191, 58,120, 72,  8, 20, 42 ; 9 shoot down
 60+  B3FB 48 08 14 2A
 61+  B3FF 92 BA 94 78  	defb 	 146,186,148,120, 56,120, 68,195 ; 10 crushed 1
 61+  B403 38 78 44 C3
 62+  B407 49 5D 29 1E  	defb	  73, 93, 41, 30, 28, 30, 34,195 ; 11 crushed 2
 62+  B40B 1C 1E 22 C3
 63+  B40F
 64+  B40F              ;
 65+  B40F              ; First 4 top half, next 4 bottom 1, next 4 bottom 2
 66+  B40F              ;
 67+  B40F              ship_sprite:
 68+  B40F 00 00 00 01  	defb	  0,  0,  0,  1,  3, 31,127,255
 68+  B413 03 1F 7F FF
 69+  B417 1F 01 7F FF  	defb	 31,  1,127,255,255,255,255,255
 69+  B41B FF FF FF FF
 70+  B41F F8 80 FE FF  	defb	248,128,254,255,255,255,255,255
 70+  B423 FF FF FF FF
 71+  B427 00 00 00 80  	defb	  0,  0,  0,128,192,248,254,255
 71+  B42B C0 F8 FE FF
 72+  B42F B3 B3 7F 1F  	defb	179,179,127, 31,  3,  3,  2,  7
 72+  B433 03 03 02 07
 73+  B437 8F 8F FF FF  	defb	143,143,255,255,255, 15,  7,131
 73+  B43B FF 0F 07 83
 74+  B43F 0F 0F FF FF  	defb	 15, 15,255,255,255, 16, 32,193
 74+  B443 FF 10 20 C1
 75+  B447 19 19 FE F8  	defb	 25, 25,254,248,192,192, 64,224
 75+  B44B C0 C0 40 E0
 76+  B44F 98 98 7F 1F  	defb	152,152,127, 31,  3,  3,  2,  7
 76+  B453 03 03 02 07
 77+  B457 F0 F0 FF FF  	defb	240,240,255,255,255,  8,  4,131
 77+  B45B FF 08 04 83
 78+  B45F F1 F1 FF FF  	defb	241,241,255,255,255,240,224,193
 78+  B463 FF F0 E0 C1
 79+  B467 CD CD FE F8  	defb	205,205,254,248,192,192, 64,224
 79+  B46B C0 C0 40 E0
 80+  B46F
 81+  B46F              ;
 82+  B46F              ;  First 8 frames are tank, last frame is the gun barrel
 83+  B46F              ;
 84+  B46F              tank_sprite:
 85+  B46F 00 00 00 7F  	defb	  0,  0,  0,127,127,  0,  0,  0
 85+  B473 7F 00 00 00
 86+  B477 01 03 FE FC  	defb	  1,  3,254,252,254,255,127, 64
 86+  B47B FE FF 7F 40
 87+  B47F FF FF 03 F9  	defb	255,255,  3,249,  3,255,255,  1
 87+  B483 03 FF FF 01
 88+  B487 00 00 C0 E0  	defb	  0,  0,192,224,224,192,  0,  0
 88+  B48B E0 C0 00 00
 89+  B48F 3F 7F E1 FB  	defb	 63,127,225,251,247,225,127, 63
 89+  B493 F7 E1 7F 3F
 90+  B497 FF FF 16 52  	defb	255,255, 22, 82, 84, 22,255,255
 90+  B49B 54 16 FF FF
 91+  B49F FF FF A8 A9  	defb	255,255,168,169,155,168,255,255
 91+  B4A3 9B A8 FF FF
 92+  B4A7 FC FE 8F AF  	defb	252,254,143,175,159,175,254,252
 92+  B4AB 9F AF FE FC
 93+  B4AF 00 00 00 1F  	defb	  0,  0,  0, 31, 31,  0,  0,  0 ; +64
 93+  B4B3 1F 00 00 00
# file closed: graphics/graphics.asm
 35   B4B7
 36   B4B7                  include "game\control.asm"
# file opened: game/control.asm
  1+  B4B7              ;
  2+  B4B7              ; Check the keyboard then move
  3+  B4B7              ;
  4+  B4B7              control_keyboard:
  5+  B4B7 3A 45 B9         ld a,(player+11)    ; first, check if player is dying
  6+  B4BA FE 00            cp 0
  7+  B4BC C0               ret nz               ; if so, can't move
  8+  B4BD 3A 3F B9         ld a,(player+5)      ; next, check if the player has pixels left to move
  9+  B4C0 FE 00            cp 0
 10+  B4C2 CA C9 B4         jp z, control_keyboard5
 11+  B4C5 CD CE B5         call control_automove
 12+  B4C8 C9               ret
 13+  B4C9              control_keyboard5:
 14+  B4C9 3A 40 B9         ld a,(player+6)      ; next, check if the player is digging
 15+  B4CC FE 00            cp 0
 16+  B4CE CA D5 B4         jp z, control_keyboard0
 17+  B4D1 CD 0C B5         call control_dig
 18+  B4D4 C9               ret
 19+  B4D5              control_keyboard0:
 20+  B4D5 01 FE FB         ld bc,64510         ; port for keyboard row q-t.
 21+  B4D8 ED 78            in a,(c)            ; read keyboard.
 22+  B4DA 47               ld b,a              ; store result in b register.
 23+  B4DB CB 18            rr b                ; check outermost key (q).
 24+  B4DD D2 FC B4         jp nc,control_keyboard1
 25+  B4E0 01 FE FD         ld bc,65022         ; port for keyboard row a-f.
 26+  B4E3 ED 78            in a,(c)            ; read keyboard.
 27+  B4E5 47               ld b,a              ; store result in b register.
 28+  B4E6 CB 18            rr b                ; check outermost key (a).
 29+  B4E8 D2 00 B5         jp nc,control_keyboard2
 30+  B4EB 01 FE DF         ld bc,57342         ; port for keyboard row y-p.
 31+  B4EE ED 78            in a,(c)            ; read keyboard.
 32+  B4F0 47               ld b,a              ; store result in b register.
 33+  B4F1 CB 18            rr b                ; check outermost key (p).
 34+  B4F3 D2 04 B5         jp nc,control_keyboard3
 35+  B4F6 CB 18            rr b                ; check next key.
 36+  B4F8 D2 08 B5         jp nc,control_keyboard4
 37+  B4FB C9               ret
 38+  B4FC              control_keyboard1:
 39+  B4FC CD 17 B6         call control_pl_moveup         ; player up.
 40+  B4FF C9               ret
 41+  B500              control_keyboard2:
 42+  B500 CD 46 B6         call control_pl_movedown       ; player down.
 43+  B503 C9               ret
 44+  B504              control_keyboard3:
 45+  B504 CD A3 B6         call control_pl_moveright       ; player left.
 46+  B507 C9               ret
 47+  B508              control_keyboard4:
 48+  B508 CD 73 B6         call control_pl_moveleft       ; player right.
 49+  B50B C9               ret
 50+  B50C
 51+  B50C              ;
 52+  B50C              ; Performs a dig if the counter has reset, otherwise, messes with the graphics
 53+  B50C              ;
 54+  B50C              control_dig:
 55+  B50C ED 4B 3A B9      ld bc,(player)      ; load the current coords into bc
 56+  B510 C5               push bc
 57+  B511 3A 3C B9         ld a,(player+2)     ; get the direction
 58+  B514 FE 01            cp 1                ; left
 59+  B516 CA 2E B5         jp z,control_dig0
 60+  B519 FE 02            cp 2                ; right
 61+  B51B CA 43 B5         jp z,control_dig1
 62+  B51E FE 03            cp 3                ; down
 63+  B520 CA 67 B5         jp z,control_dig5
 64+  B523 FE 00            cp 0                ; up
 65+  B525 CA 57 B5         jp z,control_dig4
 66+  B528 21 40 B9         ld hl,player+6
 67+  B52B 36 00            ld (hl),0           ; turn off digging
 68+  B52D C9               ret                 ; return
 69+  B52E              control_dig0:           ; going left
 70+  B52E CD 38 A9         call sprites_scadd  ; get the current coord
 71+  B531 62 6B            ld hl,de
 72+  B533 2B               dec hl              ; move one left
 73+  B534 C1               pop bc              ; get the coords back, subtract 8 from horiz, 8 from vert, store (will be coords of space above dug dirt)
 74+  B535 78               ld a,b
 75+  B536 06 08            ld b,8
 76+  B538 90               sub b
 77+  B539 47               ld b,a
 78+  B53A 79               ld a,c
 79+  B53B 0E 08            ld c,8
 80+  B53D 91               sub c
 81+  B53E 4F               ld c,a
 82+  B53F C5               push bc
 83+  B540 C3 70 B5         jp control_dig2
 84+  B543              control_dig1:
 85+  B543 CD 38 A9         call sprites_scadd  ; get the current coord
 86+  B546 62 6B            ld hl,de
 87+  B548 23               inc hl              ; move one right
 88+  B549 C1               pop bc              ; get the coords back, add 8 to horiz, subtract 8 from vert store (will be coords of space above dug dirt)
 89+  B54A 3E 08            ld a,8
 90+  B54C 80               add a,b
 91+  B54D 47               ld b,a
 92+  B54E 79               ld a,c
 93+  B54F 0E 08            ld c,8
 94+  B551 91               sub c
 95+  B552 4F               ld c,a
 96+  B553 C5               push bc
 97+  B554 C3 70 B5         jp control_dig2
 98+  B557              control_dig4:
 99+  B557 CD 38 A9         call sprites_scadd  ; get the current coord
100+  B55A 62 6B            ld hl,de
101+  B55C 11 20 00         ld de,32
102+  B55F ED 52            sbc hl,de             ; move one up
103+  B561 C1               pop bc              ; get the coords back, 1 from vert, store, then we'll sub 1 from c for each row later
104+  B562 0D               dec c
105+  B563 C5               push bc
106+  B564 C3 88 B5         jp control_dig6
107+  B567              control_dig5:
108+  B567 CD 38 A9         call sprites_scadd  ; get the current coord
109+  B56A 62 6B            ld hl,de
110+  B56C 24               inc h              ; move one down
111+  B56D                                     ; not bothered about working out bc here, since rock will never fall if digging down
112+  B56D C3 70 B5         jp control_dig2
113+  B570              ; Normal (not up) digging
114+  B570              control_dig2:
115+  B570 3A 42 B9         ld a,(player+8)     ; get the number of rows we need to overwrite
116+  B573 47               ld b,a              ; rows to copy over
117+  B574 E5               push hl             ; store the memory location of the first row for later
118+  B575              control_dig3:
119+  B575 CD B7 B5         call control_getpixelrow
120+  B578 77               ld (hl),a           ; load contents into row
121+  B579 11 20 00         ld de,32
122+  B57C 19               add hl,de           ; move to next row
123+  B57D 10 F6            djnz control_dig3
124+  B57F E1               pop hl              ; get the original memory location back
125+  B580 11 20 00         ld de,32
126+  B583 ED 52            sbc hl,de           ; move to above row, ready for checking for rock
127+  B585 C3 9E B5         jp control_dig10
128+  B588              ; Special case for going up
129+  B588              control_dig6:
130+  B588 3A 42 B9         ld a,(player+8)     ; get the number of rows we need to overwrite
131+  B58B 47               ld b,a              ; rows to copy over
132+  B58C              control_dig7:
133+  B58C CD B7 B5         call control_getpixelrow
134+  B58F              control_dig12:
135+  B58F 77               ld (hl),a           ; load empty into row
136+  B590 11 20 00         ld de,32
137+  B593 ED 52            sbc hl,de           ; move up to next row
138+  B595 0D               dec c               ; decrease c to track rows
139+  B596 10 F4            djnz control_dig7
140+  B598 79               ld a,c
141+  B599 D6 07            sub 7
142+  B59B C1               pop bc
143+  B59C 4F               ld c,a
144+  B59D C5               push bc             ; store the decreased c coord
145+  B59E              control_dig10:
146+  B59E DD 21 41 B9      ld ix,player+7
147+  B5A2 DD 7E 00         ld a,(ix)     ; get the dig frame number
148+  B5A5 3D               dec a
149+  B5A6 DD 77 00         ld (ix),a
150+  B5A9                  ; call the check for rocks above the removed dirt
151+  B5A9 DD 21 40 B9      ld ix,player+6
152+  B5AD DD 7E 00         ld a,(ix)     ; get the dig state
153+  B5B0 FE 00            cp 0
154+  B5B2 C1               pop bc
155+  B5B3 CC 5A BE         call z, rocks_checkforfalling ; make the check if we're no longer digging
156+  B5B6 C9               ret
157+  B5B7
158+  B5B7              ;
159+  B5B7              ; Gets a modified pixel row to overwrite dirt - if this is the last dig, overwrite with nothing, otherwise xor to flip the dirt
160+  B5B7              ; Inputs:
161+  B5B7              ; hl - memory of pixel row
162+  B5B7              ; Outputs:
163+  B5B7              ; a - modified row to write
164+  B5B7              ;
165+  B5B7              control_getpixelrow:
166+  B5B7 3A 41 B9         ld a,(player+7)     ; get the dig frame number
167+  B5BA FE 00            cp 0                ; is this the last dig
168+  B5BC CA C3 B5         jp z,control_getpixelrow1
169+  B5BF 7E               ld a,(hl)           ; if not, xor with 255 to flip it
170+  B5C0 EE FF            xor 255
171+  B5C2 C9               ret
172+  B5C3              control_getpixelrow1:
173+  B5C3 DD 21 40 B9      ld ix,player+6
174+  B5C7 DD 36 00 00      ld (ix),0           ; turn off digging
175+  B5CB 3E 00            ld a,0              ; if it is, load with empty
176+  B5CD C9               ret
177+  B5CE
178+  B5CE              ;
179+  B5CE              ; Auto move the player until pixels is zero
180+  B5CE              ;
181+  B5CE              control_automove:
182+  B5CE 5F               ld e,a              ; store the number of pixels left to move in e
183+  B5CF ED 4B 3A B9      ld bc,(player)      ; load the current coords into bc
184+  B5D3 21 3C B9         ld hl,player+2      ; get the direction
185+  B5D6 7E               ld a,(hl)
186+  B5D7 FE 03            cp 3                ; down
187+  B5D9 CA ED B5         jp z,control_automove3  ; don't need to do anything
188+  B5DC FE 00            cp 0                ; going up
189+  B5DE CA F9 B5         jp z,control_automove2
190+  B5E1 FE 01            cp 1                ; going left?
191+  B5E3 CA 05 B6         jp z,control_automove0
192+  B5E6 78               ld a,b
193+  B5E7 3C               inc a               ; if we're going right, increment a twice for two pixels
194+  B5E8 3C               inc a
195+  B5E9 47               ld b,a
196+  B5EA C3 09 B6         jp control_automove1
197+  B5ED              control_automove3:
198+  B5ED 79               ld a,c
199+  B5EE 3C               inc a
200+  B5EF 3C               inc a               ; if we're going down, increment twice
201+  B5F0 4F               ld c,a
202+  B5F1 FE 90            cp 144
203+  B5F3 CC D1 B6         call z, control_scroll_down
204+  B5F6 C3 09 B6         jp control_automove1
205+  B5F9              control_automove2:
206+  B5F9 79               ld a,c
207+  B5FA 3D               dec a
208+  B5FB 3D               dec a               ; if we're going up, decrement twice
209+  B5FC 4F               ld c,a
210+  B5FD FE 60            cp 96
211+  B5FF CC DE B6         call z, control_scroll_up
212+  B602 C3 09 B6         jp control_automove1
213+  B605              control_automove0:
214+  B605 78               ld a,b
215+  B606 3D               dec a               ; if we're going left, decrement a twice
216+  B607 3D               dec a
217+  B608 47               ld b,a
218+  B609              control_automove1:
219+  B609 ED 43 3A B9      ld (player),bc      ; and back to player
220+  B60D 7B               ld a,e              ; now get the pixel count back
221+  B60E 3D               dec a               ; decrease by one
222+  B60F 21 3F B9         ld hl,player+5
223+  B612 77               ld (hl),a           ; copy back
224+  B613 CD BE BA         call player_justmoved
225+  B616 C9               ret
226+  B617
227+  B617              ;
228+  B617              ; Moves the player up
229+  B617              ;
230+  B617              control_pl_moveup:
231+  B617 C5               push bc
232+  B618 ED 4B 3A B9      ld bc,(player)          ; get the current coords, b horiz, c vert
233+  B61C 79               ld a,c                  ; load c into the acc
234+  B61D FE 18            cp 24
235+  B61F CA 3F B6         jp z,control_pl_moveup0 ; are we at the edge of the screen
236+  B622 FE 60            cp 96
237+  B624 CC DE B6         call z, control_scroll_up
238+  B627 CD 7E B8         call movement_checkcanmove_up ; check we can move up, e will be 1 if we can
239+  B62A F5               push af
240+  B62B 7B               ld a,e                  ; put e in a
241+  B62C FE 00            cp 0
242+  B62E CA 3E B6         jp z,control_pl_moveup1 ; don't move if we can't
243+  B631 F1               pop af
244+  B632 D6 01            sub 1                   ; subtract 1
245+  B634 D6 01            sub 1                   ; subtract 1
246+  B636 4F               ld c,a                  ; load back to c
247+  B637 ED 43 3A B9      ld (player),bc          ; load back to player
248+  B63B C3 3F B6         jp control_pl_moveup0
249+  B63E              control_pl_moveup1:
250+  B63E F1               pop af                  ; restore af if needed
251+  B63F              control_pl_moveup0:
252+  B63F 3E 00            ld a,0
253+  B641 32 3C B9         ld (player+2),a        ; set direction to up
254+  B644 C1               pop bc
255+  B645 C9               ret
256+  B646              ;
257+  B646              ; Moves the player down
258+  B646              ;
259+  B646              control_pl_movedown:
260+  B646 C5               push bc
261+  B647 ED 4B 3A B9      ld bc,(player)          ; get the current coords, b horiz, c vert
262+  B64B 79               ld a,c                  ; load c into the acc
263+  B64C FE E0            cp 224
264+  B64E CA 6C B6         jp z,control_pl_movedown0 ; are we at the edge of the screen
265+  B651 FE 80            cp 128
266+  B653 CC D1 B6         call z, control_scroll_down
267+  B656 CD 52 B8         call movement_checkcanmove_down ; check we can move down, e will be 1 if we can
268+  B659 F5               push af
269+  B65A 7B               ld a,e                  ; put e in a
270+  B65B FE 00            cp 0
271+  B65D CA 6B B6         jp z,control_pl_movedown1 ; don't move if we can't
272+  B660 F1               pop af
273+  B661 3C               inc a                   ; add 1
274+  B662 3C               inc a                   ; add 1
275+  B663 4F               ld c,a                  ; load back to c
276+  B664 ED 43 3A B9      ld (player),bc          ; load back to player
277+  B668 C3 6C B6         jp control_pl_movedown0
278+  B66B              control_pl_movedown1:
279+  B66B F1               pop af                  ; restore af if needed
280+  B66C              control_pl_movedown0:
281+  B66C 3E 03            ld a,3
282+  B66E 32 3C B9         ld (player+2),a        ; set direction to down
283+  B671 C1               pop bc
284+  B672 C9               ret
285+  B673              ;
286+  B673              ; Moves the player left
287+  B673              ;
288+  B673              control_pl_moveleft:
289+  B673 C5               push bc
290+  B674 ED 4B 3A B9      ld bc,(player)          ; get the current coords, b horiz, c vert
291+  B678 78               ld a,b                  ; load b into the acc
292+  B679 FE 10            cp 16
293+  B67B CA 9C B6         jp z,control_pl_moveleft0 ; are we at the edge of the screen
294+  B67E CD DD B8         call movement_checkcanmove_left ; check we can move down, e will be 1 if we can
295+  B681 F5               push af
296+  B682 7B               ld a,e                  ; put e in a
297+  B683 FE 00            cp 0
298+  B685 CA 9B B6         jp z,control_pl_moveleft1 ; don't move if we can't
299+  B688 21 3F B9         ld hl,player+5          ; need to store the amount of pixels still left to move in the player status
300+  B68B 3E 03            ld a,3
301+  B68D 77               ld (hl),a
302+  B68E F1               pop af
303+  B68F D6 01            sub 1                    ; subtract 2
304+  B691 D6 01            sub 1
305+  B693 47               ld b,a                  ; load back to c
306+  B694 ED 43 3A B9      ld (player),bc          ; load back to player
307+  B698 C3 9C B6         jp control_pl_moveleft0
308+  B69B              control_pl_moveleft1:
309+  B69B F1               pop af
310+  B69C              control_pl_moveleft0:
311+  B69C 3E 01            ld a,1
312+  B69E 32 3C B9         ld (player+2),a        ; set direction to left
313+  B6A1 C1               pop bc
314+  B6A2 C9               ret
315+  B6A3              ;
316+  B6A3              ; Moves the player right
317+  B6A3              ;
318+  B6A3              control_pl_moveright:
319+  B6A3 C5               push bc
320+  B6A4 ED 4B 3A B9      ld bc,(player)          ; get the current coords, b horiz, c vert
321+  B6A8 78               ld a,b                  ; load b into the acc
322+  B6A9 FE F0            cp 240
323+  B6AB CA CA B6         jp z,control_pl_moveright0 ; are we at the edge of the screen
324+  B6AE CD B1 B8         call movement_checkcanmove_right ; check we can move down, e will be 1 if we can
325+  B6B1 F5               push af
326+  B6B2 7B               ld a,e                  ; put e in a
327+  B6B3 FE 00            cp 0
328+  B6B5 CA C9 B6         jp z,control_pl_moveright1 ; don't move if we can't
329+  B6B8 21 3F B9         ld hl,player+5          ; need to store the amount of pixels still left to move in the player status
330+  B6BB 3E 03            ld a,3
331+  B6BD 77               ld (hl),a
332+  B6BE F1               pop af
333+  B6BF 3C               inc a                   ; add 2
334+  B6C0 3C               inc a
335+  B6C1 47               ld b,a                  ; load back to b
336+  B6C2 ED 43 3A B9      ld (player),bc          ; load back to player
337+  B6C6 C3 CA B6         jp control_pl_moveright0
338+  B6C9              control_pl_moveright1:
339+  B6C9 F1               pop af                  ; restore af if needed
340+  B6CA              control_pl_moveright0:
341+  B6CA 3E 02            ld a,2
342+  B6CC 32 3C B9         ld (player+2),a        ; set direction to right
343+  B6CF C1               pop bc
344+  B6D0 C9               ret
345+  B6D1
346+  B6D1              ;
347+  B6D1              ; Scrolls the screen down
348+  B6D1              ;
349+  B6D1              control_scroll_down:
350+  B6D1 F5               push af
351+  B6D2 3E 08            ld a,8
352+  B6D4 32 1C A7         ld (screen_offset),a
353+  B6D7 F1               pop af
354+  B6D8 21 CB A5         ld hl,buffer_updateall
355+  B6DB 36 01            ld (hl),1         ; flag as screen needing update
356+  B6DD C9               ret
357+  B6DE
358+  B6DE              ;
359+  B6DE              ; Scrolls the screen up
360+  B6DE              ;
361+  B6DE              control_scroll_up:
362+  B6DE F5               push af
363+  B6DF 3E 00            ld a,0
364+  B6E1 32 1C A7         ld (screen_offset),a
365+  B6E4 F1               pop af
366+  B6E5 21 CB A5         ld hl,buffer_updateall
367+  B6E8 36 01            ld (hl),1         ; flag as screen needing update
368+  B6EA C9               ret
369+  B6EB
370+  B6EB
371+  B6EB
372+  B6EB
# file closed: game/control.asm
 37   B6EB                  include "game\movement.asm"
# file opened: game/movement.asm
  1+  B6EB              ;
  2+  B6EB              ; Checks the contents of a cell are empty - ie, all pixel rows are zero
  3+  B6EB              ; Inputs:
  4+  B6EB              ; hl - memory location of top pixel row
  5+  B6EB              ; bc - screen coords, b horiz, c vert
  6+  B6EB              ; Outputs:
  7+  B6EB              ; e - 0 if not empty, 1 if empty
  8+  B6EB              ;
  9+  B6EB              movement_spaceisempty:
 10+  B6EB C5               push bc
 11+  B6EC E5               push hl
 12+  B6ED CD 15 B7         call movement_spaceisgem        ; check if space is a gem
 13+  B6F0 E1               pop hl
 14+  B6F1 C1               pop bc
 15+  B6F2 7B               ld a,e
 16+  B6F3 FE 01            cp 1
 17+  B6F5 C8               ret z                           ; if e is 1, space is a gem so can move here, return
 18+  B6F6 3E 08            ld a,8                          ; 8 rows to check
 19+  B6F8              movement_spaceisempty0:
 20+  B6F8 08               ex af,af'                       ; store the loop counter
 21+  B6F9 7E               ld a,(hl)                       ; get current pixel row
 22+  B6FA FE 00            cp 0
 23+  B6FC C2 10 B7         jp nz, movement_spaceisempty1    ; row is not empty, can't move here
 24+  B6FF 79               ld a,c                          ; load the vertical coord
 25+  B700 3C               inc a                           ; next row down
 26+  B701 11 20 00         ld de,32
 27+  B704 19               add hl,de                       ; otherwise, just go one down for hl, which means add 32, because of course
 28+  B705 4F               ld c,a                          ; copy vert coord back to c
 29+  B706 08               ex af,af'                       ; get loop counter back
 30+  B707 3D               dec a                           ; decrease loop counter
 31+  B708 C2 F8 B6         jp nz, movement_spaceisempty0
 32+  B70B 16 00            ld d,0
 33+  B70D 1E 01            ld e,1                          ; got to end, so space is empty
 34+  B70F C9               ret
 35+  B710              movement_spaceisempty1:
 36+  B710 16 00            ld d,0
 37+  B712 1E 00            ld e,0                          ; returning false, ie space not empty
 38+  B714 C9               ret
 39+  B715
 40+  B715              ;
 41+  B715              ; Check if a space contains a gem
 42+  B715              ; Inputs:
 43+  B715              ; bc - screen coords
 44+  B715              ; Outputs:
 45+  B715              ; e = 1 if gem
 46+  B715              movement_spaceisgem:
 47+  B715 CD 5A A8         call screen_getcharcoordsfromscreencoords   ; get the char coords we're checking into bc
 48+  B718 21 6D B2         ld hl,level01diamonds           ; check diamonds first
 49+  B71B              movement_spaceisgem0:
 50+  B71B 5E 23 56 2B      ld de,(hl)                      ; get gem coords into de
 51+  B71F 7B               ld a,e                          ; check for end of data
 52+  B720 FE FF            cp 255
 53+  B722 CA 3D B7         jp z,movement_spaceisgem1       ; if yes, done with diamonds
 54+  B725 23               inc hl
 55+  B726 23               inc hl                          ; move to state
 56+  B727 7E               ld a,(hl)
 57+  B728 23               inc hl
 58+  B729 23               inc hl
 59+  B72A 23               inc hl                          ; get to next
 60+  B72B FE 01            cp 1                            ; check if collected
 61+  B72D CA 1B B7         jp z,movement_spaceisgem0       ; if yes, move to next diamond
 62+  B730 7B               ld a,e                          ; load e again
 63+  B731 B9               cp c                            ; otherwise, compare c with e
 64+  B732 C2 1B B7         jp nz,movement_spaceisgem0      ; if different, move to next diamond
 65+  B735 7A               ld a,d                          ; get d coord
 66+  B736 B8               cp b                            ; compare b with d
 67+  B737 C2 1B B7         jp nz,movement_spaceisgem0      ; if different, move to next diamond
 68+  B73A 1E 01            ld e,1                          ; otherwise, exit with e = 1
 69+  B73C C9               ret
 70+  B73D              movement_spaceisgem1:
 71+  B73D 21 7D B2         ld hl,level01gems              ; check gems
 72+  B740              movement_spaceisgem2:
 73+  B740 5E 23 56 2B      ld de,(hl)                      ; get gem coords into de
 74+  B744 7B               ld a,e                          ; check for end of data
 75+  B745 FE FF            cp 255
 76+  B747 CA 62 B7         jp z,movement_spaceisgem3       ; if yes, done with gems
 77+  B74A 23               inc hl
 78+  B74B 23               inc hl                          ; move to state
 79+  B74C 7E               ld a,(hl)
 80+  B74D 23               inc hl
 81+  B74E 23               inc hl
 82+  B74F 23               inc hl                          ; get to next
 83+  B750 FE 01            cp 1                            ; check if collected
 84+  B752 CA 40 B7         jp z,movement_spaceisgem2       ; if yes, move to next diamond
 85+  B755 7B               ld a,e                          ; load e again
 86+  B756 B9               cp c                            ; otherwise, compare c with e
 87+  B757 C2 40 B7         jp nz,movement_spaceisgem2      ; if different, move to next gem
 88+  B75A 7A               ld a,d                          ; get d coord
 89+  B75B B8               cp b                            ; compare b with d
 90+  B75C C2 40 B7         jp nz,movement_spaceisgem2      ; if different, move to next gem
 91+  B75F 1E 01            ld e,1                          ; otherwise, exit with e = 1
 92+  B761 C9               ret
 93+  B762              movement_spaceisgem3:
 94+  B762 1E 00            ld e,0                          ; nothing found, return e = 0
 95+  B764 C9               ret
 96+  B765
 97+  B765              ;
 98+  B765              ; Checks the line of a cell below is empty - ie, first pixel rows is zero
 99+  B765              ; Inputs:
100+  B765              ; hl - memory location of top pixel row
101+  B765              ; bc - screen coords, b horiz, c vert
102+  B765              ; Outputs:
103+  B765              ; e - 0 if not empty, 1 if empty
104+  B765              ;
105+  B765              movement_linebelowisempty:
106+  B765 C5               push bc
107+  B766 E5               push hl
108+  B767 CD 15 B7         call movement_spaceisgem        ; check if space is a gem
109+  B76A E1               pop hl
110+  B76B C1               pop bc
111+  B76C 7B               ld a,e
112+  B76D FE 01            cp 1
113+  B76F C8               ret z                           ; if e is 1, space is a gem so can move here, return
114+  B770 7E               ld a,(hl)                       ; get current pixel row
115+  B771 FE 00            cp 0
116+  B773 C2 7B B7         jp nz, movement_linebelowisempty1    ; row is not empty, can't move here
117+  B776 16 00            ld d,0
118+  B778 1E 01            ld e,1                          ; got to end, so space is empty
119+  B77A C9               ret
120+  B77B              movement_linebelowisempty1:
121+  B77B 16 00            ld d,0
122+  B77D 1E 00            ld e,0                          ; returning false, ie space not empty
123+  B77F C9               ret
124+  B780
125+  B780              ;
126+  B780              ; Checks the line of a cell above is empty - ie, last pixel rows are zero
127+  B780              ; Inputs:
128+  B780              ; hl - memory location of top pixel row
129+  B780              ; bc - screen coords, b horiz, c vert
130+  B780              ; Outputs:
131+  B780              ; e - 0 if not empty, 1 if empty
132+  B780              ;
133+  B780              movement_lineaboveisempty:
134+  B780 C5               push bc
135+  B781 E5               push hl
136+  B782 CD 15 B7         call movement_spaceisgem        ; check if space is a gem
137+  B785 E1               pop hl
138+  B786 C1               pop bc
139+  B787 7B               ld a,e
140+  B788 FE 01            cp 1
141+  B78A C8               ret z
142+  B78B 7E               ld a,(hl)                       ; get current pixel row
143+  B78C FE 00            cp 0
144+  B78E C2 96 B7         jp nz, movement_lineaboveisempty1    ; row is not empty, can't move here
145+  B791 16 00            ld d,0
146+  B793 1E 01            ld e,1                          ; got to end, so space is empty
147+  B795 C9               ret
148+  B796              movement_lineaboveisempty1:
149+  B796 16 00            ld d,0
150+  B798 1E 00            ld e,0                          ; returning false, ie space not empty
151+  B79A C9               ret
152+  B79B
153+  B79B              ;
154+  B79B              ; Checks the contents of a cell are diggable - ie, all pixel rows are dirt or empty
155+  B79B              ; Inputs:
156+  B79B              ; hl - memory location of top pixel row
157+  B79B              ; bc - screen coords, b horiz, c vert
158+  B79B              ; Outputs:
159+  B79B              ; none - puts player into digging mode
160+  B79B              ;
161+  B79B              movement_spaceisdiggable:
162+  B79B 3E 08            ld a,8                          ; 8 rows to check
163+  B79D              movement_spaceisdiggable0:
164+  B79D 08               ex af,af'                       ; store the loop counter
165+  B79E 7E               ld a,(hl)                       ; get current pixel row
166+  B79F FE 00            cp 0
167+  B7A1 CA B1 B7         jp z, movement_spaceisdiggable2  ; row is empty, can dig here
168+  B7A4 FE 55            cp 85
169+  B7A6 CA B1 B7         jp z, movement_spaceisdiggable2  ; row is dirt, can dig here
170+  B7A9 FE AA            cp 170
171+  B7AB CA B1 B7         jp z, movement_spaceisdiggable2  ; row is dirt, can dig here
172+  B7AE C3 C9 B7         jp movement_spaceisdiggable1     ; otherwise, stop checking
173+  B7B1              movement_spaceisdiggable2:
174+  B7B1 79               ld a,c                          ; load the vertical coord
175+  B7B2 3C               inc a                           ; next row down
176+  B7B3 11 20 00         ld de,32
177+  B7B6 19               add hl,de                       ; otherwise, just go one down for hl, which means add 32, because of course
178+  B7B7 4F               ld c,a                          ; copy vert coord back to c
179+  B7B8 08               ex af,af'                       ; get loop counter back
180+  B7B9 3D               dec a                           ; decrease loop counter
181+  B7BA C2 9D B7         jp nz, movement_spaceisdiggable0
182+  B7BD 21 40 B9         ld hl,player+6
183+  B7C0 36 01            ld (hl),1                       ; set the player into digging mode
184+  B7C2 23               inc hl
185+  B7C3 36 05            ld (hl),5                      ; set the number of frame to dig for
186+  B7C5 23               inc hl
187+  B7C6 36 08            ld (hl),8                       ; set the number of pixels to dig
188+  B7C8 C9               ret
189+  B7C9              movement_spaceisdiggable1:
190+  B7C9 21 40 B9         ld hl,player+6
191+  B7CC 36 00            ld (hl),0                       ; set the player out of digging mode
192+  B7CE C9               ret
193+  B7CF
194+  B7CF              ;
195+  B7CF              ; Checks the contents of a cell below are diggable - ie, at least one pixel row has dirt. If the first one isn't dirt, stop
196+  B7CF              ; Inputs:
197+  B7CF              ; hl - memory location of top pixel row
198+  B7CF              ; bc - screen coords, b horiz, c vert
199+  B7CF              ; Outputs:
200+  B7CF              ; none - puts player into digging mode
201+  B7CF              ;
202+  B7CF              movement_spacebelowisdiggable:
203+  B7CF 7E               ld a,(hl)                       ; get first pixel row
204+  B7D0 FE 55            cp 85
205+  B7D2 CA DD B7         jp z, movement_spacebelowisdiggable3  ; row is dirt, can dig here
206+  B7D5 FE AA            cp 170
207+  B7D7 CA DD B7         jp z, movement_spacebelowisdiggable3  ; row is dirt, can dig here
208+  B7DA C3 C9 B7         jp movement_spaceisdiggable1    ; the first row is not dirt, so don't bother checking the rest, can't dig
209+  B7DD              movement_spacebelowisdiggable3:
210+  B7DD 3E 08            ld a,8                          ; rows to check
211+  B7DF 1E 00            ld e,0                          ; count of rows to dig
212+  B7E1              movement_spacebelowisdiggable0:
213+  B7E1 08               ex af,af'                       ; store the loop counter
214+  B7E2 7E               ld a,(hl)                       ; get current pixel row
215+  B7E3 FE 55            cp 85
216+  B7E5 CA F0 B7         jp z, movement_spacebelowisdiggable4  ; row is dirt, can dig here
217+  B7E8 FE AA            cp 170
218+  B7EA CA F0 B7         jp z, movement_spacebelowisdiggable4  ; row is dirt, can dig here
219+  B7ED C3 FF B7         jp movement_spacebelowisdiggable5     ; don't count this row and stop counting
220+  B7F0              movement_spacebelowisdiggable4:
221+  B7F0 1C               inc e                           ; inc count of rows to dig
222+  B7F1              movement_spacebelowisdiggable2:
223+  B7F1 79               ld a,c                          ; load the vertical coord
224+  B7F2 3C               inc a                           ; next row down
225+  B7F3 D5               push de                         ; need e for later
226+  B7F4 11 20 00         ld de,32
227+  B7F7 19               add hl,de                       ; otherwise, just go one down for hl, which means add 32, because of course
228+  B7F8 4F               ld c,a                          ; copy vert coord back to c
229+  B7F9 D1               pop de                          ; get e back
230+  B7FA 08               ex af,af'                       ; get loop counter back
231+  B7FB 3D               dec a                           ; incease loop counter
232+  B7FC C2 E1 B7         jp nz, movement_spacebelowisdiggable0
233+  B7FF              movement_spacebelowisdiggable5:
234+  B7FF 21 40 B9         ld hl,player+6
235+  B802 36 01            ld (hl),1                       ; set the player into digging mode
236+  B804 23               inc hl
237+  B805 36 03            ld (hl),3                      ; set the number of frame to dig for
238+  B807 23               inc hl
239+  B808 73               ld (hl),e                       ; set the number of pixels to dig
240+  B809 C9               ret
241+  B80A              movement_spacebelowisdiggable1:
242+  B80A 21 40 B9         ld hl,player+6
243+  B80D 36 00            ld (hl),0                       ; set the player out of digging mode
244+  B80F C9               ret
245+  B810
246+  B810              ;
247+  B810              ; Checks the contents of a cell above are diggable - ie, at least one pixel row has dirt. If the first one isn't dirt, stop
248+  B810              ; Inputs:
249+  B810              ; hl - memory location of top pixel row
250+  B810              ; bc - screen coords, b horiz, c vert
251+  B810              ; Outputs:
252+  B810              ; none - puts player into digging mode
253+  B810              ;
254+  B810              movement_spaceaboveisdiggable:
255+  B810 7E               ld a,(hl)                       ; get first pixel row
256+  B811 FE 55            cp 85
257+  B813 CA 1E B8         jp z, movement_spaceaboveisdiggable3  ; row is dirt, can dig here
258+  B816 FE AA            cp 170
259+  B818 CA 1E B8         jp z, movement_spaceaboveisdiggable3  ; row is dirt, can dig here
260+  B81B C3 C9 B7         jp movement_spaceisdiggable1    ; the first row is not dirt, so don't bother checking the rest, can't dig
261+  B81E              movement_spaceaboveisdiggable3:
262+  B81E 3E 08            ld a,8                          ; rows to check
263+  B820 1E 00            ld e,0                          ; count of rows to dig
264+  B822              movement_spaceaboveisdiggable0:
265+  B822 08               ex af,af'                       ; store the loop counter
266+  B823 7E               ld a,(hl)                       ; get current pixel row
267+  B824 FE 55            cp 85
268+  B826 CA 31 B8         jp z, movement_spaceaboveisdiggable4  ; row is dirt, can dig here
269+  B829 FE AA            cp 170
270+  B82B CA 31 B8         jp z, movement_spaceaboveisdiggable4  ; row is dirt, can dig here
271+  B82E C3 41 B8         jp movement_spaceaboveisdiggable5     ; don't count this row and stop counting
272+  B831              movement_spaceaboveisdiggable4:
273+  B831 1C               inc e                           ; inc count of rows to dig
274+  B832              movement_spaceaboveisdiggable2:
275+  B832 79               ld a,c                          ; load the vertical coord
276+  B833 3D               dec a                           ; next row up
277+  B834 D5               push de                         ; need e for later
278+  B835 11 20 00         ld de,32
279+  B838 ED 52            sbc hl,de                       ; otherwise, just go one up for hl, which means sub 32, because of course
280+  B83A 4F               ld c,a                          ; copy vert coord back to c
281+  B83B D1               pop de                          ; get e back
282+  B83C 08               ex af,af'                       ; get loop counter back
283+  B83D 3D               dec a                           ; incease loop counter
284+  B83E C2 22 B8         jp nz, movement_spaceaboveisdiggable0
285+  B841              movement_spaceaboveisdiggable5:
286+  B841 21 40 B9         ld hl,player+6
287+  B844 36 01            ld (hl),1                       ; set the player into digging mode
288+  B846 23               inc hl
289+  B847 36 05            ld (hl),5                       ; set the number of frame to dig for
290+  B849 23               inc hl
291+  B84A 73               ld (hl),e                       ; set the number of pixels to dig
292+  B84B C9               ret
293+  B84C              movement_spaceaboveisdiggable1:
294+  B84C 21 40 B9         ld hl,player+6
295+  B84F 36 00            ld (hl),0                       ; set the player out of digging mode
296+  B851 C9               ret
297+  B852
298+  B852              ;
299+  B852              ; Checks if the player can move down
300+  B852              ; Inputs:
301+  B852              ; bc - player coords, b horiz, c vert
302+  B852              ; Outputs:
303+  B852              ; de - 1 can move
304+  B852              movement_checkcanmove_down:
305+  B852 F5               push af
306+  B853 C5               push bc
307+  B854 CD 38 A9         call sprites_scadd              ; get the memory location of cell into de
308+  B857 62 6B            ld hl,de                        ; look at cell directly underneath (add 256)
309+  B859 24               inc h                       ; memory location of cell beneath now in hl
310+  B85A 3E 08            ld a,8                       ; look below
311+  B85C 81               add c
312+  B85D 4F               ld c,a
313+  B85E CD 65 B7         call movement_linebelowisempty       ; check space is empty
314+  B861 7B               ld a,e                          ; check space empty flag
315+  B862 FE 00            cp 0
316+  B864 CA 6D B8         jp z, movement_checkcanmove_down1 ; can't move
317+  B867 CD BE BA         call player_justmoved
318+  B86A C1               pop bc
319+  B86B F1               pop af
320+  B86C C9               ret
321+  B86D              movement_checkcanmove_down1:
322+  B86D C1               pop bc
323+  B86E CD 38 A9         call sprites_scadd              ; get the memory location of cell into de
324+  B871 62 6B            ld hl,de                        ; look at cell directly underneath (add 256)
325+  B873 24               inc h
326+  B874 C5               push bc
327+  B875 CD CF B7         call movement_spacebelowisdiggable    ; can't move here, but can we dig
328+  B878 11 00 00         ld de,0
329+  B87B C1               pop bc
330+  B87C F1               pop af
331+  B87D C9               ret
332+  B87E
333+  B87E              ;
334+  B87E              ; Checks if the player can move up
335+  B87E              ; Inputs:
336+  B87E              ; bc - player coords, b horiz, c vert
337+  B87E              ; Outputs:
338+  B87E              ; de - 1 can move
339+  B87E              movement_checkcanmove_up:
340+  B87E F5               push af
341+  B87F C5               push bc
342+  B880 CD 38 A9         call sprites_scadd              ; get the memory location of cell into de
343+  B883 62 6B            ld hl,de                        ; look at cell directly above (subtract 32)
344+  B885 11 20 00         ld de,32
345+  B888 ED 52            sbc hl,de                       ; memory location of line above now in hl
346+  B88A 0D               dec c                           ; look above
347+  B88B CD 80 B7         call movement_lineaboveisempty       ; check space is empty
348+  B88E 7B               ld a,e                          ; check space empty flag
349+  B88F FE 00            cp 0
350+  B891 CA 9C B8         jp z, movement_checkcanmove_up1 ; can't move
351+  B894 1E 01            ld e,1
352+  B896 CD BE BA         call player_justmoved
353+  B899 C1               pop bc
354+  B89A F1               pop af
355+  B89B C9               ret
356+  B89C              movement_checkcanmove_up1:
357+  B89C C1               pop bc
358+  B89D CD 38 A9         call sprites_scadd              ; get the memory location of cell into de
359+  B8A0 62 6B            ld hl,de                        ; look at cell directly above (subtract 32)
360+  B8A2 11 20 00         ld de,32
361+  B8A5 ED 52            sbc hl,de                       ; memory location of line above now in hl
362+  B8A7 C5               push bc
363+  B8A8 CD 10 B8         call movement_spaceaboveisdiggable    ; can't move here, but can we dig
364+  B8AB 11 00 00         ld de,0
365+  B8AE C1               pop bc
366+  B8AF F1               pop af
367+  B8B0 C9               ret
368+  B8B1
369+  B8B1              ;
370+  B8B1              ; Checks if the player can move right
371+  B8B1              ; Inputs:
372+  B8B1              ; bc - player coords, b horiz, c vert
373+  B8B1              ; Outputs:
374+  B8B1              ; de - 1 can move
375+  B8B1              movement_checkcanmove_right:
376+  B8B1 F5               push af
377+  B8B2 C5               push bc
378+  B8B3 CD 38 A9         call sprites_scadd              ; get the memory location of cell into de
379+  B8B6 62 6B            ld hl,de                        ; look at cell directly to the right (add 1)
380+  B8B8 3E 08            ld a,8
381+  B8BA 80               add b                           ; move one cell right
382+  B8BB 47               ld b,a
383+  B8BC 23               inc hl                          ; memory location of cell to the right now in hl
384+  B8BD CD EB B6         call movement_spaceisempty       ; check space is empty
385+  B8C0 7B               ld a,e                          ; check space empty flag
386+  B8C1 FE 00            cp 0
387+  B8C3 CA CC B8         jp z, movement_checkcanmove_right1 ; can't move
388+  B8C6 CD BE BA         call player_justmoved
389+  B8C9 C1               pop bc
390+  B8CA F1               pop af
391+  B8CB C9               ret
392+  B8CC              movement_checkcanmove_right1:
393+  B8CC C1               pop bc
394+  B8CD CD 38 A9         call sprites_scadd              ; get the memory location of cell into de
395+  B8D0 62 6B            ld hl,de
396+  B8D2 23               inc hl                          ; memory location of cell to the right now in hl
397+  B8D3 C5               push bc
398+  B8D4 CD 9B B7         call movement_spaceisdiggable    ; can't move here, but can we dig
399+  B8D7 11 00 00         ld de,0
400+  B8DA C1               pop bc
401+  B8DB F1               pop af
402+  B8DC C9               ret
403+  B8DD
404+  B8DD              ;
405+  B8DD              ; Checks if the player can move left
406+  B8DD              ; Inputs:
407+  B8DD              ; bc - player coords, b horiz, c vert
408+  B8DD              ; Outputs:
409+  B8DD              ; de - 1 can move
410+  B8DD              movement_checkcanmove_left:
411+  B8DD F5               push af
412+  B8DE C5               push bc
413+  B8DF CD 38 A9         call sprites_scadd              ; get the memory location of cell into de
414+  B8E2 62 6B            ld hl,de                        ; look at cell directly to the right (add 1)
415+  B8E4 78               ld a,b
416+  B8E5 06 08            ld b,8
417+  B8E7 90               sub b                           ; move one cell left
418+  B8E8 47               ld b,a
419+  B8E9 2B               dec hl                          ; memory location of cell to the right now in hl
420+  B8EA CD EB B6         call movement_spaceisempty       ; check space is empty
421+  B8ED 7B               ld a,e                          ; check space empty flag
422+  B8EE FE 00            cp 0
423+  B8F0 CA F9 B8         jp z, movement_checkcanmove_left1 ; can't move
424+  B8F3 CD BE BA         call player_justmoved
425+  B8F6 C1               pop bc
426+  B8F7 F1               pop af
427+  B8F8 C9               ret
428+  B8F9              movement_checkcanmove_left1:
429+  B8F9 C1               pop bc
430+  B8FA CD 38 A9         call sprites_scadd              ; get the memory location of cell into de
431+  B8FD 62 6B            ld hl,de
432+  B8FF 2B               dec hl                          ; memory location of cell to the right now in hl
433+  B900 C5               push bc
434+  B901 CD 9B B7         call movement_spaceisdiggable    ; can't move here, but can we dig
435+  B904 11 00 00         ld de,0
436+  B907 C1               pop bc
437+  B908 F1               pop af
438+  B909 C9               ret
# file closed: game/movement.asm
 38   B90A                  include "game\game.asm"
# file opened: game/game.asm
  1+  B90A              ;
  2+  B90A              ; The current frame count, incremented each frame
  3+  B90A              ;
  4+  B90A              game_framenumber:
  5+  B90A 00               defb    0
  6+  B90B
  7+  B90B              ;
  8+  B90B              ; The number of players
  9+  B90B              ;
 10+  B90B              game_numberplayers:
 11+  B90B 01               defb 1
 12+  B90C
 13+  B90C              ;
 14+  B90C              ; The current player
 15+  B90C              ;
 16+  B90C              game_currentplayer:
 17+  B90C 01               defb 1
 18+  B90D
 19+  B90D              ;
 20+  B90D              ; The default number of lives
 21+  B90D              ;
 22+  B90D              game_numberlives:
 23+  B90D 04               defb 4
 24+  B90E
 25+  B90E              ;
 26+  B90E              ; Moves to the next player
 27+  B90E              ;
 28+  B90E              game_changeplayer:
 29+  B90E 3A 0C B9         ld a,(game_currentplayer)
 30+  B911 FE 01            cp 1
 31+  B913 C8               ret z                       ; if just one player, no need to change
 32+  B914 3D               dec a                       ; otherwise decrease by one
 33+  B915 EE 01            xor 1                       ; xor with one to flip
 34+  B917 3C               inc a                       ; increment
 35+  B918 21 0C B9         ld hl,game_currentplayer
 36+  B91B 77               ld (hl),a                   ; store
 37+  B91C C9               ret
 38+  B91D
 39+  B91D              ;
 40+  B91D              ; Sets the number of players at the start of the game
 41+  B91D              ; Inputs:
 42+  B91D              ; a - number of players
 43+  B91D              game_setnumberofplayers:
 44+  B91D 21 0B B9         ld hl,game_numberplayers
 45+  B920 77               ld (hl),a
 46+  B921
 47+  B921              ;
 48+  B921              ; Increment frame number by 1
 49+  B921              ;
 50+  B921              game_incrementframe:
 51+  B921 3A 0A B9         ld a,(game_framenumber)
 52+  B924 FE FF            cp 255
 53+  B926 C2 2B B9         jp nz,game_incrementframe0
 54+  B929 3E 00            ld a,0
 55+  B92B              game_incrementframe0:
 56+  B92B 3C               inc a
 57+  B92C 32 0A B9         ld (game_framenumber),a
 58+  B92F C9               ret
 59+  B930
 60+  B930              ;
 61+  B930              ; Returns current frame
 62+  B930              ; Outputs:
 63+  B930              ; a - current frame
 64+  B930              ;
 65+  B930              game_getcurrentframe:
 66+  B930 3A 0A B9         ld a,(game_framenumber)
 67+  B933 C9               ret
 68+  B934
 69+  B934              ;
 70+  B934              ; Resets current frame
 71+  B934              ;
 72+  B934              game_resetcurrentframe:
 73+  B934 21 0A B9         ld hl,game_framenumber
 74+  B937 36 00            ld (hl),0
 75+  B939 C9               ret
# file closed: game/game.asm
 39   B93A                  include "game\player.asm"
# file opened: game/player.asm
  1+  B93A              ;
  2+  B93A              ;   Data for current player
  3+  B93A              ;
  4+  B93A              player:
  5+  B93A 00 00            defb    0,0                 ; horiz,vert (+0,+1)
  6+  B93C 02 00 01         defb    2,0,1               ; dir (0 up, 1 left, 2 right, 3 down), frame, frame transition count (+2,+3,+4)
  7+  B93F 00               defb    0                   ; auto move remaining (+5)
  8+  B940 00 00 00         defb    0,0,0               ; is digging (0 no), digging count, pixels to di (+6,+7,+8)
  9+  B943 00               defb    0                   ; lives remaining (+9)
 10+  B944 00               defb    0                   ; died this life (+10)
 11+  B945 00 00            defb    0,0                 ; crushed (+11), frames (+12)
 12+  B947 00               defb    0                   ; can finish level, whether can finish level or not (+13)
 13+  B948
 14+  B948              player_location:
 15+  B948 00               defb 0                      ; 0 normal, 1 diamond cavern, 2 the pit
 16+  B949
 17+  B949              ;
 18+  B949              ; Works out which part of the screen the player is in
 19+  B949              ; Pit is between 3,9 and 8,9
 20+  B949              ; Diamond cavern is between 11,22 and 22,28
 21+  B949              ;
 22+  B949              player_getlocation:
 23+  B949 ED 4B 3A B9      ld bc,(player)              ; get screen coords
 24+  B94D CD 5A A8         call screen_getcharcoordsfromscreencoords ; get char coords, c horiz
 25+  B950 78               ld a,b                      ; check for pit first
 26+  B951 FE 09            cp 9                        ; if not on this row, not in the pit
 27+  B953 C2 62 B9         jp nz,player_getlocation0
 28+  B956 79               ld a,c                      ; check horizontal
 29+  B957 FE 08            cp 8
 30+  B959 D2 62 B9         jp nc, player_getlocation0  ; if more than 8, not in the pit
 31+  B95C 21 48 B9         ld hl,player_location
 32+  B95F 36 02            ld (hl),2                   ; load location with 2, the pit
 33+  B961 C9               ret                         ; done
 34+  B962              player_getlocation0:            ; check for diamond cavern
 35+  B962 78               ld a,b                      ; first check vertical
 36+  B963 FE 16            cp 22                       ; if above row 22, then not in cavern
 37+  B965 DA 79 B9         jp c,player_getlocation1
 38+  B968 79               ld a,c                      ; get the horizontal next
 39+  B969 FE 0B            cp 11
 40+  B96B DA 79 B9         jp c,player_getlocation1    ; if less than 11 not in diamond cave
 41+  B96E FE 16            cp 22
 42+  B970 D2 79 B9         jp nc,player_getlocation1    ; if less than 11 not in diamond cave
 43+  B973 21 48 B9         ld hl,player_location
 44+  B976 36 01            ld (hl),1                   ; load location with 1, the cavern
 45+  B978 C9               ret
 46+  B979              player_getlocation1:
 47+  B979 21 48 B9         ld hl,player_location
 48+  B97C 36 00            ld (hl),0                   ; load location with 2, the pit
 49+  B97E C9               ret                         ; done
 50+  B97F
 51+  B97F
 52+  B97F              ;
 53+  B97F              ; Initializes a player at start of game
 54+  B97F              ; Copy initial coords, copy lives, copy score
 55+  B97F              ;
 56+  B97F              player_init_gamestart:
 57+  B97F 3A 0D B9         ld a,(game_numberlives)
 58+  B982 32 0E BA         ld (player1_lives),a
 59+  B985 32 0F BA         ld (player2_lives),a                        ; set the initial number of lives at game start
 60+  B988
 61+  B988 21 12 BA         ld hl,player1_score+2
 62+  B98B 06 06            ld b,6
 63+  B98D              player_init_gamestart0:
 64+  B98D 36 30            ld (hl),48
 65+  B98F 23               inc hl
 66+  B990 10 FB            djnz player_init_gamestart0                 ; zero out player 1 score
 67+  B992 21 1B BA         ld hl,player2_score+2
 68+  B995 06 06            ld b,6
 69+  B997              player_init_gamestart1:
 70+  B997 36 30            ld (hl),48
 71+  B999 23               inc hl
 72+  B99A 10 FB            djnz player_init_gamestart1                 ; zero out player 2 score
 73+  B99C C9               ret
 74+  B99D
 75+  B99D              ;
 76+  B99D              ; Initializes a player at start of a life
 77+  B99D              ; Copy initial coords, copy lives, copy score
 78+  B99D              ;
 79+  B99D              player_init_lifestart:
 80+  B99D 21 3F B9         ld hl,player+5
 81+  B9A0 06 09            ld b,9                      ; initialise 9 properties
 82+  B9A2              player_init_lifestart2:
 83+  B9A2 36 00            ld (hl),0
 84+  B9A4 23               inc hl
 85+  B9A5 10 FB            djnz player_init_lifestart2
 86+  B9A7
 87+  B9A7 21 3C B9         ld hl,player+2              ; initialise some properties
 88+  B9AA 36 02            ld (hl),2
 89+  B9AC 23               inc hl
 90+  B9AD 36 00            ld (hl),0
 91+  B9AF 23               inc hl
 92+  B9B0 36 01            ld (hl),1
 93+  B9B2
 94+  B9B2 ED 4B 22 80      ld bc,(init_coord)
 95+  B9B6 ED 43 3A B9      ld (player),bc
 96+  B9BA 01 43 B9         ld bc,player+9
 97+  B9BD 3A 0E BA         ld a,(player1_lives)
 98+  B9C0 02               ld (bc),a
 99+  B9C1
100+  B9C1 CD 87 C1         call diamonds_init      ; initialise gems
101+  B9C4
102+  B9C4 01 06 00         ld bc,6
103+  B9C7 11 CA BF         ld de,scores_current+2
104+  B9CA 3A 0C B9         ld a,(game_currentplayer)
105+  B9CD FE 01            cp 1
106+  B9CF C2 D8 B9         jp nz,player_init_lifestart0
107+  B9D2 21 12 BA         ld hl,player1_score+2
108+  B9D5 C3 DB B9         jp player_init_lifestart1
109+  B9D8              player_init_lifestart0:
110+  B9D8 21 1B BA         ld hl,player2_score+2
111+  B9DB              player_init_lifestart1:
112+  B9DB ED B0            ldir
113+  B9DD C9               ret
114+  B9DE
115+  B9DE              ;
116+  B9DE              ; Finalises a player at end of a life
117+  B9DE              ; Copy lives, copy score
118+  B9DE              ;
119+  B9DE              player_lifeend:
120+  B9DE 01 43 B9         ld bc,player+9
121+  B9E1 0A               ld a,(bc)
122+  B9E2 01 0E BA         ld bc,player1_lives
123+  B9E5 02               ld (bc),a
124+  B9E6 CD EA B9         call player_recordcurrentscore
125+  B9E9 C9               ret
126+  B9EA
127+  B9EA              ;
128+  B9EA              ; Copies the current score in the current
129+  B9EA              ;
130+  B9EA              player_recordcurrentscore:
131+  B9EA 01 06 00         ld bc,6                  ; copy current score back to correct player
132+  B9ED 21 CA BF         ld hl,scores_current+2
133+  B9F0 3A 0C B9         ld a,(game_currentplayer)
134+  B9F3 FE 01            cp 1
135+  B9F5 C2 FE B9         jp nz,player_lifeend0
136+  B9F8 11 12 BA         ld de,player1_score+2
137+  B9FB C3 01 BA         jp player_lifeend1
138+  B9FE              player_lifeend0:
139+  B9FE 11 1B BA         ld de,player2_score+2
140+  BA01              player_lifeend1:
141+  BA01 ED B0            ldir
142+  BA03 C9               ret
143+  BA04
144+  BA04              ;
145+  BA04              ; Player just died, subtract a life
146+  BA04              ;
147+  BA04              player_died:
148+  BA04 01 43 B9         ld bc,player+9
149+  BA07 0A               ld a,(bc)
150+  BA08 3D               dec a
151+  BA09 02               ld (bc),a
152+  BA0A CD DE B9         call player_lifeend
153+  BA0D C9               ret
154+  BA0E
155+  BA0E              ;
156+  BA0E              ; Player lives
157+  BA0E              ;
158+  BA0E              player1_lives:
159+  BA0E 03               defb 3
160+  BA0F              player2_lives:
161+  BA0F 03               defb 3
162+  BA10
163+  BA10              ;
164+  BA10              ; Player scores
165+  BA10              ;
166+  BA10              player1_score:
167+  BA10 04 01 30 30      defb 4,1,'000000',255
167+  BA14 30 30 30 30
167+  BA18 FF
168+  BA19              player2_score:
169+  BA19 16 01 30 30      defb 22,1,'000000',255
169+  BA1D 30 30 30 30
169+  BA21 FF
170+  BA22
171+  BA22              ;
172+  BA22              ; Kills a player this life
173+  BA22              ;
174+  BA22              player_killplayer:
175+  BA22 21 44 B9         ld hl,player+10
176+  BA25 36 01            ld (hl),1
177+  BA27 C9               ret
178+  BA28
179+  BA28              ;
180+  BA28              ; Crush a player this life
181+  BA28              ;
182+  BA28              player_crushplayer:
183+  BA28 21 45 B9         ld hl,player+11             ; mark as crushed
184+  BA2B 36 01            ld (hl),1
185+  BA2D C9               ret
186+  BA2E
187+  BA2E              player_tankkillplayer
188+  BA2E 21 45 B9         ld hl,player+11             ; mark as tanked
189+  BA31 36 02            ld (hl),2
190+  BA33 C9               ret
191+  BA34              ;
192+  BA34              ; Draws the player at the current position or deletes them
193+  BA34              ;
194+  BA34              player_drawplayer:
195+  BA34 3A 3C B9         ld a,(player+2)             ; get the current direction
196+  BA37 FE 03            cp 3
197+  BA39 C2 3E BA         jp nz,player_drawplayer0
198+  BA3C 3E 00            ld a,0                      ; if 3, then down, so set the direction to 0 since the sprite is the same as up
199+  BA3E              player_drawplayer0:
200+  BA3E 5F               ld e,a                      ; store in e
201+  BA3F 3A 45 B9         ld a,(player+11)             ; get the dying flag
202+  BA42 FE 01            cp 1
203+  BA44 CA 56 BA         jp z,player_drawplayer3     ; if it's one, we're being crushed
204+  BA47              player_drawplayer4:
205+  BA47 3A 40 B9         ld a,(player+6)             ; get the dig flag
206+  BA4A FE 01            cp 1
207+  BA4C CA A4 BA         jp z,player_drawplayer1    ; get dig frame
208+  BA4F 3A 3D B9         ld a,(player+3)             ; this is normal movement so get the current frame
209+  BA52 83               add a,e
210+  BA53 C3 A9 BA         jp player_drawplayer2
211+  BA56              player_drawplayer3:
212+  BA56 21 46 B9         ld hl,player+12
213+  BA59 7E               ld a,(hl)                  ; crushing, so get the current anim flag
214+  BA5A FE 00            cp 0
215+  BA5C C2 65 BA         jp nz,player_drawplayer5    ; if this isn't zero, then this isn't the first time round, so do the crush anim
216+  BA5F 3E 64            ld a,100
217+  BA61 77               ld (hl),a                   ; otherwise, load up the anim frames
218+  BA62 C3 47 BA         jp player_drawplayer4       ; and return to the main loop to remove the current frame
219+  BA65              player_drawplayer5:
220+  BA65 3D               dec a
221+  BA66 77               ld (hl),a
222+  BA67 FE 00            cp 0
223+  BA69 CC 22 BA         call z,player_killplayer     ; final animation, so kill the player
224+  BA6C FE 0A            cp 10                         ; play the sound
225+  BA6E CC 23 AD         call z, sound_rockfell
226+  BA71 FE 14            cp 20                        ; check if we should move the rock
227+  BA73 C2 87 BA         jp nz,player_drawplayer8
228+  BA76 D9               exx
229+  BA77 08               ex af,af'
230+  BA78 ED 4B 58 BE      ld bc,(rocks_killerrock)    ; get the coords of the rock that killed us
231+  BA7C 21 3A B3         ld hl,sprites+72
232+  BA7F CD F5 A8         call sprites_drawsprite     ; draw a rock over current
233+  BA82 08               ex af,af'
234+  BA83 D9               exx
235+  BA84 C3 9D BA         jp player_drawplayer6       ; continue drawing player
236+  BA87              player_drawplayer8:
237+  BA87 FE 14            cp 20
238+  BA89 D2 9D BA         jp nc,player_drawplayer6    ; if not in last 10 frames, draw as normal
239+  BA8C ED 4B 3A B9      ld bc,(player)
240+  BA90 CD 47 A8         call screen_getattraddressfromscreencoords ; get the attr address into de
241+  BA93 62 6B            ld hl,de
242+  BA95 36 42            ld (hl),66
243+  BA97 21 3A B3         ld hl,sprites+72            ; otherwise, player is rock
244+  BA9A C3 B3 BA         jp player_drawplayer7
245+  BA9D              player_drawplayer6:
246+  BA9D E6 01            and 1                       ; check for odd
247+  BA9F C6 0A            add 10                      ; add 10, to get either 10 or 11
248+  BAA1 C3 A9 BA         jp player_drawplayer2
249+  BAA4              player_drawplayer1:
250+  BAA4 3A 3C B9         ld a,(player+2)             ; digging, get the current direction again, because want all four
251+  BAA7 C6 06            add a,6                     ; add direction to 6 to get frame
252+  BAA9              player_drawplayer2:
253+  BAA9 07               rlca
254+  BAAA 07               rlca
255+  BAAB 07               rlca                        ; multiply by eight
256+  BAAC 6F               ld l,a
257+  BAAD 26 00            ld h,0
258+  BAAF 11 AF B3         ld de,player_sprite
259+  BAB2 19               add hl,de                   ; load hl with the location of the player sprite data
260+  BAB3              player_drawplayer7:
261+  BAB3 ED 4B 3A B9      ld bc,(player)              ; load bc with the start coords
262+  BAB7 CD F5 A8         call sprites_drawsprite     ; call the routine to draw the sprite
263+  BABA CD EA BA         call player_storeupdatedlines ; log updated rows
264+  BABD C9               ret
265+  BABE
266+  BABE
267+  BABE              ;
268+  BABE              ; Runs after the player just moved. Changes animation frame if required
269+  BABE              ;
270+  BABE              player_justmoved:
271+  BABE D9               exx
272+  BABF 3A 3E B9         ld a,(player+4)             ; get the transition count
273+  BAC2 FE 00            cp 0
274+  BAC4 CA CA BA         jp z, player_justmoved2     ; if zero reset and change the frame
275+  BAC7 C3 E4 BA         jp player_justmoved1       ; otherwise decrease and continue
276+  BACA              player_justmoved2:
277+  BACA                  ; reset and change frame in here
278+  BACA 3E 01            ld a,1
279+  BACC 32 3E B9         ld (player+4),a            ; reset back to whatever
280+  BACF 3A 3D B9         ld a,(player+3)             ; load the frame
281+  BAD2 FE 03            cp 3                       ; flip between 3 and 0
282+  BAD4 C2 DC BA         jp nz, player_justmoved4
283+  BAD7 3E 00            ld a,0
284+  BAD9 C3 DE BA         jp player_justmoved5
285+  BADC              player_justmoved4:
286+  BADC 3E 03            ld a,3
287+  BADE              player_justmoved5:
288+  BADE 32 3D B9         ld (player+3),a           ; save back
289+  BAE1 C3 E8 BA         jp player_justmoved3
290+  BAE4              player_justmoved1:
291+  BAE4                  ; decrease count
292+  BAE4 3D               dec a
293+  BAE5 32 3E B9         ld (player+4),a
294+  BAE8              player_justmoved3:
295+  BAE8 D9               exx;
296+  BAE9 C9               ret
297+  BAEA
298+  BAEA              ;
299+  BAEA              ; Stores the updated rows associated with the player
300+  BAEA              ;
301+  BAEA              player_storeupdatedlines:
302+  BAEA ED 4B 3A B9      ld bc,(player)          ; get the screen coords into bc
303+  BAEE 79               ld a,c                  ; get the player block coords of current block
304+  BAEF E6 F8            and 248                 ; find closest multiple of eight
305+  BAF1 0F               rrca
306+  BAF2 0F               rrca
307+  BAF3 0F               rrca                    ; divide by 8
308+  BAF4 ED 5B 1C A7      ld de,(screen_offset)          ; load the screen offset, this is in rows
309+  BAF8 93               sub e
310+  BAF9 F5               push af
311+  BAFA CD CC A5         call buffer_marklineforupdate  ; store current row in updated lines
312+  BAFD F1               pop af
313+  BAFE 3D               dec a
314+  BAFF F5               push af
315+  BB00 CD CC A5         call buffer_marklineforupdate  ; store line above
316+  BB03 F1               pop af
317+  BB04 3C               inc a
318+  BB05 3C               inc a
319+  BB06 CD CC A5         call buffer_marklineforupdate  ; store line beneath
320+  BB09 C9               ret
321+  BB0A
322+  BB0A              ;
323+  BB0A              ; Called if the player has collected a diamond. Checks the current coord. If it is the start coord, then return complete
324+  BB0A              ; Outputs:
325+  BB0A              ; a - 1 for completed level
326+  BB0A              player_checkforexit:
327+  BB0A ED 4B 3A B9      ld bc,(player)                 ; get player coords
328+  BB0E ED 5B 22 80      ld de,(init_coord)             ; get start coords
329+  BB12 78               ld a,b
330+  BB13 BA               cp d                         ; compare horiz
331+  BB14 C2 1F BB         jp nz,player_checkforexit1
332+  BB17 79               ld a,c
333+  BB18 BB               cp e                        ; compare vert
334+  BB19 C2 1F BB         jp nz,player_checkforexit1
335+  BB1C              player_checkforexit0:
336+  BB1C 3E 01            ld a,1                       ; hasn't completed
337+  BB1E C9               ret
338+  BB1F              player_checkforexit1:
339+  BB1F 3E 00            ld a,0                       ; has completed
340+  BB21 C9               ret
# file closed: game/player.asm
 40   BB22                  include "game\ship.asm"
# file opened: game/ship.asm
  1+  BB22              ;
  2+  BB22              ; Ship initial position: vert,horiz
  3+  BB22              ;
  4+  BB22              ship_initpos:
  5+  BB22 00 24            defb 0,36
  6+  BB24              ship_initpos2:
  7+  BB24 00 00            defb 0,0
  8+  BB26              ship_frame:
  9+  BB26 00               defb 0
 10+  BB27              ;
 11+  BB27              ; The current memory location
 12+  BB27              ;
 13+  BB27              ship_current_sprite:
 14+  BB27 00 00            defb 0,0
 15+  BB29
 16+  BB29              ship_current_coords:
 17+  BB29 00 00            defb 0,0
 18+  BB2B
 19+  BB2B              ship_process:
 20+  BB2B 3A 45 B9         ld a,(player+11)
 21+  BB2E FE 02            cp 2                        ; has the player been killed by tank?
 22+  BB30 C0               ret nz                      ; do nothing if not
 23+  BB31 CD DE B6         call control_scroll_up           ; make sure the screen is on the top screen
 24+  BB34 CD A3 BB         call ship_takeoff           ; bye bye
 25+  BB37 CD 22 BA         call player_killplayer      ; killed
 26+  BB3A 06 32            ld b,50
 27+  BB3C CD 82 80         call utilities_pauseforframes
 28+  BB3F C9               ret
 29+  BB40
 30+  BB40              ;
 31+  BB40              ;   Draw and land the ship - first move the ship down, then across, drawing the player in the middle
 32+  BB40              ;
 33+  BB40              ship_land:
 34+  BB40 ED 4B 22 BB      ld bc,(ship_initpos)
 35+  BB44 ED 43 24 BB      ld (ship_initpos2),bc        ; save the initial position for later use
 36+  BB48 1E 00            ld e,0                      ; store a flag to track first time round
 37+  BB4A 06 09            ld b,9                      ; move down 8 pixels
 38+  BB4C              ship_land0:
 39+  BB4C C5               push bc
 40+  BB4D 7B               ld a,e
 41+  BB4E D5               push de                     ; store de for next time round
 42+  BB4F FE 01            cp 1                        ; check first time flag
 43+  BB51 C2 66 BB         jp nz,ship_land1             ; don't draw over previous one if first time
 44+  BB54 CD FA BB         call ship_draw_full         ; delete old one
 45+  BB57 CD CF BB         call ship_change_frame      ; increment the frame
 46+  BB5A ED 4B 24 BB      ld bc,(ship_initpos2)       ; get the current coords
 47+  BB5E 81 C6 01         add c,1                     ; move down one pixels
 48+  BB61 4F               ld c,a
 49+  BB62 ED 43 24 BB      ld (ship_initpos2),bc
 50+  BB66              ship_land1:
 51+  BB66 CD FA BB         call ship_draw_full         ; draw the ship
 52+  BB69 CD E4 BB         call ship_draw_screen
 53+  BB6C D1               pop de
 54+  BB6D 1E 01            ld e,1
 55+  BB6F C1               pop bc
 56+  BB70 10 DA            djnz ship_land0             ; repeat for downward movement
 57+  BB72                  ; done moving down
 58+  BB72                  ; now move across
 59+  BB72 CD 34 BA         call player_drawplayer      ; draw player
 60+  BB75 CD FA BB         call ship_draw_full         ; delete old one
 61+  BB78 1E 00            ld e,0                      ; store a flag to track first time round
 62+  BB7A 06 14            ld b,20                      ; move back 20 pixels pixels
 63+  BB7C              ship_land3:
 64+  BB7C C5               push bc
 65+  BB7D 7B               ld a,e
 66+  BB7E D5               push de                     ; store de for next time round
 67+  BB7F FE 01            cp 1                        ; check first time flag
 68+  BB81 C2 96 BB         jp nz,ship_land2             ; don't draw over previous one if first time
 69+  BB84 CD FA BB         call ship_draw_full         ; delete old one
 70+  BB87 CD CF BB         call ship_change_frame      ; increment the frame
 71+  BB8A ED 4B 24 BB      ld bc,(ship_initpos2)       ; get the current coords
 72+  BB8E 78               ld a,b
 73+  BB8F D6 01            sub 1                       ; move back one pixels
 74+  BB91 47               ld b,a
 75+  BB92 ED 43 24 BB      ld (ship_initpos2),bc
 76+  BB96              ship_land2:
 77+  BB96 CD FA BB         call ship_draw_full         ; draw the ship
 78+  BB99 CD E4 BB         call ship_draw_screen       ; draw the frame to screen by clearing the buffer
 79+  BB9C D1               pop de
 80+  BB9D 1E 01            ld e,1                      ; set e to 1 to indicate >1 time
 81+  BB9F C1               pop bc
 82+  BBA0 10 DA            djnz ship_land3             ; repeat for vertical movement
 83+  BBA2 C9               ret
 84+  BBA3
 85+  BBA3              ;
 86+  BBA3              ;   Take off the ship
 87+  BBA3              ;
 88+  BBA3              ship_takeoff:
 89+  BBA3 1E 01            ld e,1                      ; store a flag to track first time round
 90+  BBA5 06 08            ld b,8                      ; move up 8 pixels
 91+  BBA7              ship_takeoff0:
 92+  BBA7 C5               push bc
 93+  BBA8 7B               ld a,e
 94+  BBA9 D5               push de                     ; store de for next time round
 95+  BBAA FE 01            cp 1                        ; check first time flag
 96+  BBAC C2 C2 BB         jp nz,ship_takeoff1             ; don't draw over previous one if first time
 97+  BBAF ED 4B 24 BB      ld bc,(ship_initpos2)       ; get the current coords
 98+  BBB3 CD FA BB         call ship_draw_full         ; delete old one
 99+  BBB6 CD CF BB         call ship_change_frame      ; increment the frame
100+  BBB9 ED 4B 24 BB      ld bc,(ship_initpos2)       ; get the current coords
101+  BBBD 0D               dec c                       ; move up one pixels
102+  BBBE ED 43 24 BB      ld (ship_initpos2),bc
103+  BBC2              ship_takeoff1:
104+  BBC2 CD FA BB         call ship_draw_full         ; draw the ship
105+  BBC5 CD E4 BB         call ship_draw_screen
106+  BBC8 D1               pop de
107+  BBC9 1E 01            ld e,1
108+  BBCB C1               pop bc
109+  BBCC 10 D9            djnz ship_takeoff0             ; repeat for upward movement
110+  BBCE                  ; done moving up
111+  BBCE C9               ret
112+  BBCF
113+  BBCF              ;
114+  BBCF              ; Swap the animation frame between 0 and 32. This will be added to the memory location later
115+  BBCF              ;
116+  BBCF              ship_change_frame:
117+  BBCF F5               push af
118+  BBD0 3A 26 BB         ld a,(ship_frame)
119+  BBD3 FE 00            cp 0
120+  BBD5 CA DD BB         jp z,ship_change_frame0
121+  BBD8 3E 00            ld a,0                      ; flip to 0
122+  BBDA C3 DF BB         jp ship_change_frame1
123+  BBDD              ship_change_frame0:
124+  BBDD 3E 20            ld a,32                      ; flip to 32
125+  BBDF              ship_change_frame1:
126+  BBDF 32 26 BB         ld (ship_frame),a            ; save the frame
127+  BBE2 F1               pop af
128+  BBE3 C9               ret
129+  BBE4
130+  BBE4              ship_draw_screen:
131+  BBE4 3E 00            ld a,0
132+  BBE6 CD CC A5         call buffer_marklineforupdate
133+  BBE9 3E 01            ld a,1
134+  BBEB CD CC A5         call buffer_marklineforupdate
135+  BBEE 3E 02            ld a,2
136+  BBF0 CD CC A5         call buffer_marklineforupdate   ; mark the first three rows for update
137+  BBF3 76               halt
138+  BBF4 F3               di
139+  BBF5 CD 63 A6         call buffer_buffertoscreen  ; copy buffer to screen
140+  BBF8 FB               ei                          ; enable interupts
141+  BBF9 C9               ret
142+  BBFA
143+  BBFA              ship_draw_full:
144+  BBFA 21 0F B4         ld hl,ship_sprite
145+  BBFD ED 4B 24 BB      ld bc,(ship_initpos2)         ; load bc with the start coords
146+  BC01 22 27 BB         ld (ship_current_sprite),hl  ; put into memory
147+  BC04 ED 43 29 BB      ld (ship_current_coords),bc  ; put into memory
148+  BC08 CD 27 BC         call ship_draw
149+  BC0B 08               ex af,af'
150+  BC0C 3A 26 BB         ld a,(ship_frame)            ; get the animation frame
151+  BC0F 16 00            ld d,0
152+  BC11 5F               ld e,a
153+  BC12 19               add hl,de
154+  BC13 22 27 BB         ld (ship_current_sprite),hl  ; put into memory
155+  BC16 08               ex af,af'
156+  BC17 ED 4B 24 BB      ld bc,(ship_initpos2)         ; load bc with the start coords
157+  BC1B 81 C6 08         add c,8                      ; move one line down
158+  BC1E 4F               ld c,a
159+  BC1F ED 43 29 BB      ld (ship_current_coords),bc  ; put into memory
160+  BC23 CD 27 BC         call ship_draw
161+  BC26 C9               ret
162+  BC27
163+  BC27              ;
164+  BC27              ; Draw the ship
165+  BC27              ; Inputs:
166+  BC27              ; None, all in memory
167+  BC27              ;
168+  BC27              ship_draw:
169+  BC27 3E 04            ld a,4                              ; 4 pieces per half
170+  BC29              ship_draw0:
171+  BC29 F5               push af
172+  BC2A 2A 27 BB         ld hl,(ship_current_sprite)
173+  BC2D ED 4B 29 BB      ld bc,(ship_current_coords)         ; load bc with the start coords
174+  BC31 CD F5 A8         call sprites_drawsprite
175+  BC34 2A 27 BB         ld hl,(ship_current_sprite)
176+  BC37 ED 4B 29 BB      ld bc,(ship_current_coords)         ; load bc with the start coords
177+  BC3B 11 08 00         ld de,8
178+  BC3E 19               add hl,de
179+  BC3F 80 C6 08         add b,8
180+  BC42 47               ld b,a
181+  BC43 22 27 BB         ld (ship_current_sprite),hl         ; put into memory
182+  BC46 ED 43 29 BB      ld (ship_current_coords),bc         ; put into memory
183+  BC4A F1               pop af
184+  BC4B 3D               dec a
185+  BC4C FE 00            cp 0
186+  BC4E C2 29 BC         jp nz,ship_draw0
187+  BC51
188+  BC51 C9               ret
189+  BC52
# file closed: game/ship.asm
 41   BC52                  include "game\tank.asm"
# file opened: game/tank.asm
  1+  BC52              ;
  2+  BC52              ; tank initial position: vert,horiz
  3+  BC52              ;
  4+  BC52              tank_initpos:
  5+  BC52 10 D0            defb 16,208
  6+  BC54              tank_initpos2:
  7+  BC54 00 00            defb 0,0
  8+  BC56              tank_frame:
  9+  BC56 00               defb 0
 10+  BC57              tank_anim:
 11+  BC57 11               defb 17
 12+  BC58
 13+  BC58              ;
 14+  BC58              ; The damage countdown
 15+  BC58              ;
 16+  BC58              tank_currentdamage:
 17+  BC58 F0               defb 240
 18+  BC59
 19+  BC59              ;
 20+  BC59              ; The damage coordinate
 21+  BC59              ;
 22+  BC59              tank_currentdamagecoord:
 23+  BC59 16 02            defb 22,2
 24+  BC5B
 25+  BC5B              ;
 26+  BC5B              ; Controls when the tank shoots
 27+  BC5B              ;
 28+  BC5B              tank_count:
 29+  BC5B 00               defb 0
 30+  BC5C
 31+  BC5C              ;
 32+  BC5C              ; Holds the block number of the current damage sprite
 33+  BC5C              ;
 34+  BC5C              tank_damageframe:
 35+  BC5C 00               defb 0
 36+  BC5D
 37+  BC5D              ;
 38+  BC5D              ; The current memory location
 39+  BC5D              ;
 40+  BC5D              tank_current_sprite:
 41+  BC5D 00 00            defb 0,0
 42+  BC5F
 43+  BC5F              tank_current_coords:
 44+  BC5F 00 00            defb 0,0
 45+  BC61
 46+  BC61              ;
 47+  BC61              ; Is the missile displayed - will be 19 if so, 0 if not
 48+  BC61              ;
 49+  BC61              tank_missile_displayed:
 50+  BC61 00               defb 0
 51+  BC62
 52+  BC62              ;
 53+  BC62              ; Initialise the tank
 54+  BC62              ;
 55+  BC62              tank_init:
 56+  BC62 ED 4B 52 BC      ld bc,(tank_initpos)
 57+  BC66 ED 43 54 BC      ld (tank_initpos2),bc       ; save the initial position for later use
 58+  BC6A 21 56 BC         ld hl,tank_frame
 59+  BC6D 36 00            ld (hl),0
 60+  BC6F 21 57 BC         ld hl,tank_anim
 61+  BC72 36 11            ld (hl),17
 62+  BC74 21 5C BC         ld hl,tank_damageframe              ; reset tank
 63+  BC77 36 00            ld (hl),0
 64+  BC79 21 5B BC         ld hl,tank_count
 65+  BC7C 36 00            ld (hl),0
 66+  BC7E 21 58 BC         ld hl,tank_currentdamage
 67+  BC81 36 F0            ld (hl),240
 68+  BC83 21 59 BC         ld hl,tank_currentdamagecoord
 69+  BC86 36 16            ld (hl),22
 70+  BC88 23               inc hl
 71+  BC89 36 02            ld (hl),2
 72+  BC8B 21 61 BC         ld hl,tank_missile_displayed
 73+  BC8E 36 00            ld (hl),0
 74+  BC90
 75+  BC90 C9               ret
 76+  BC91
 77+  BC91              ;
 78+  BC91              ;   Draw and move the tank
 79+  BC91              ;   Start processing at frame 200
 80+  BC91              ;   Don't move if anim is zero
 81+  BC91              ;   Decrement frame if moved
 82+  BC91              ;
 83+  BC91              tank_process:
 84+  BC91 3A 57 BC         ld a,(tank_anim)
 85+  BC94 FE 00            cp 0
 86+  BC96 C2 9D BC         jp nz,tank_process0         ; fire the tank if we've already moved, or jump to movement
 87+  BC99 CD AE BC         call tank_fire
 88+  BC9C C9               ret
 89+  BC9D              tank_process0:
 90+  BC9D CD 30 B9         call game_getcurrentframe   ; get the current frame number into a
 91+  BCA0 FE 4B            cp 75
 92+  BCA2 D8               ret c                       ; return if the frame number is below 100
 93+  BCA3 CD C2 BD         call tank_move              ; move tank if not
 94+  BCA6 3A 57 BC         ld a,(tank_anim)
 95+  BCA9 3D               dec a
 96+  BCAA 32 57 BC         ld (tank_anim),a            ; decrease the anim count
 97+  BCAD C9               ret
 98+  BCAE
 99+  BCAE              ;
100+  BCAE              ; Fires the tank
101+  BCAE              ;
102+  BCAE              tank_fire:
103+  BCAE 3A 5B BC         ld a,(tank_count)            ; if not, don't do anything
104+  BCB1 3C               inc a                        ; increment
105+  BCB2 FE 19            cp 25                        ; have we reached fifty
106+  BCB4 C2 B9 BC         jp nz,tank_fire0
107+  BCB7 3E 00            ld a,0                       ; reset if reached fifty
108+  BCB9              tank_fire0:                      ; DEALING WITH A NEW BLOCK
109+  BCB9 32 5B BC         ld (tank_count),a            ; store tank count
110+  BCBC FE 00            cp 0
111+  BCBE CA D5 BC         jp z,tank_fire7              ; If this is zero, fire
112+  BCC1 3A 61 BC         ld a,(tank_missile_displayed) ; is the missile displaying?
113+  BCC4 FE 00            cp 0
114+  BCC6 C8               ret z                       ; don't do anything if not
115+  BCC7 CD 7C BD         call tank_missilegraphic     ; if not, overwrite the previous tank missile
116+  BCCA 3E 00            ld a,0                       ; reset the flag
117+  BCCC 32 61 BC         ld (tank_missile_displayed),a
118+  BCCF 3E 02            ld a,2
119+  BCD1 CD CC A5         call buffer_marklineforupdate
120+  BCD4 C9               ret                        ; only shoot if we're on 0
121+  BCD5              tank_fire7:
122+  BCD5 3A 58 BC         ld a,(tank_currentdamage)    ; get the damage countdown
123+  BCD8 E6 07            and 7                       ; check if multiple of 8 - house keeping when moving onto a new block
124+  BCDA C2 10 BD         jp nz,tank_fire1            ; not, so just do a normal frame
125+  BCDD ED 4B 59 BC      ld bc,(tank_currentdamagecoord) ; get the current damage coord into bc
126+  BCE1 79               ld a,c
127+  BCE2 FE 0A            cp 10
128+  BCE4 C2 EB BC         jp nz, tank_fire6
129+  BCE7 CD B4 BD         call tank_killedbytank      ; we're through, so the player has died. Kill them.
130+  BCEA C9               ret                         ; return if we're through the mountain
131+  BCEB              tank_fire6:
132+  BCEB 3E 0F            ld a,15
133+  BCED 32 5C BC         ld (tank_damageframe),a     ; reset the damage frame
134+  BCF0 21 F2 B2         ld hl,sprites               ; location of the empty block
135+  BCF3 CD 84 A8         call screen_showchar        ; show this character here
136+  BCF6 ED 4B 59 BC      ld bc,(tank_currentdamagecoord) ; get the current damage coord into bc
137+  BCFA 05               dec b                       ; look one above
138+  BCFB CD B1 A8         call screen_ischarempty     ; check if it is empty
139+  BCFE ED 4B 59 BC      ld bc,(tank_currentdamagecoord) ; get the current damage coord into bc again
140+  BD02 FE 01            cp 1
141+  BD04 C2 47 BD         jp nz,tank_fire2             ; block above isn't empty, so can't move on, copy down above blocks
142+  BD07 ED 4B 59 BC      ld bc,(tank_currentdamagecoord) ; get the current damage coord into bc
143+  BD0B 0D               dec c
144+  BD0C ED 43 59 BC      ld (tank_currentdamagecoord),bc ; store the coord
145+  BD10              tank_fire1:                         ; DEALING WITH NORMAL DAMAGE
146+  BD10 ED 4B 59 BC      ld bc,(tank_currentdamagecoord) ; get the current damage coord into bc
147+  BD14 3A 58 BC         ld a,(tank_currentdamage)    ; get the damage countdown
148+  BD17 E6 07            and 7                       ; is it a multiple of 8? only want to do the first line check then
149+  BD19 C2 24 BD         jp nz, tank_fire5
150+  BD1C CD E1 A8         call screen_getcharfirstbyte    ; get the first byte to check if this is a slope
151+  BD1F FE FF            cp 255                      ; if it's a full line, it will be 255 and not a slope
152+  BD21 C2 65 BD         jp nz,tank_fire3            ; if it's a slope, handle this differently
153+  BD24              tank_fire5:
154+  BD24 3A 5C BC         ld a,(tank_damageframe)
155+  BD27 CD 9E A8         call screen_getblock        ; get the block data into hl
156+  BD2A CD 84 A8         call screen_showchar        ; show this character here
157+  BD2D 3A 5C BC         ld a,(tank_damageframe)
158+  BD30 3C               inc a
159+  BD31 32 5C BC         ld (tank_damageframe),a     ; increment the damage block and store
160+  BD34 3A 58 BC         ld a,(tank_currentdamage)    ; get the damage countdown
161+  BD37 3D               dec a
162+  BD38 3D               dec a
163+  BD39 32 58 BC         ld (tank_currentdamage),a     ; decrease current damage by 2 and store
164+  BD3C 3A 61 BC         ld a,(tank_missile_displayed) ; is the missile displaying?
165+  BD3F FE 00            cp 0
166+  BD41 CC 7C BD         call z, tank_missilegraphic
167+  BD44 C3 6E BD         jp tank_fire4
168+  BD47              tank_fire2:                     ; DEALING WITH COPYING BLOCKS FROM ABOVE
169+  BD47 05               dec b
170+  BD48 C5               push bc
171+  BD49 CD CA A8         call screen_copyblockdown       ; copy the block down
172+  BD4C ED 4B 59 BC      ld bc,(tank_currentdamagecoord) ; get the current damage coord into bc
173+  BD50 C1               pop bc                      ; get the coord we just checked back
174+  BD51 78               ld a,b
175+  BD52 FE 00            cp 0
176+  BD54 CA 10 BD         jp z,tank_fire1             ; if we're at the top of the screen, don't check any more
177+  BD57 C5               push bc
178+  BD58 05               dec b
179+  BD59 CD B1 A8         call screen_ischarempty     ; check if it is empty
180+  BD5C C1               pop bc
181+  BD5D FE 01            cp 1                        ; if empty
182+  BD5F C2 47 BD         jp nz, tank_fire2            ; copy another one down
183+  BD62 C3 10 BD         jp tank_fire1               ; otherwise, return to main thread
184+  BD65              tank_fire3:                      ; dealing with slopes
185+  BD65 3A 58 BC         ld a,(tank_currentdamage)    ; get the damage countdown
186+  BD68 06 08            ld b,8
187+  BD6A 90               sub b                        ; special case for slopes
188+  BD6B 32 58 BC         ld (tank_currentdamage),a    ; decrease the damage countdown by 8, so that next time, we get rid of this block without eroding it
189+  BD6E              tank_fire4:                     ; TIDY UP
190+  BD6E CD CC A5         call buffer_marklineforupdate
191+  BD71 3E 01            ld a,1
192+  BD73 CD CC A5         call buffer_marklineforupdate
193+  BD76 3E 02            ld a,2
194+  BD78 CD CC A5         call buffer_marklineforupdate
195+  BD7B C9               ret
196+  BD7C
197+  BD7C              ;
198+  BD7C              ; Displays or hides the missile graphic, and changes the gun
199+  BD7C              ;
200+  BD7C              tank_missilegraphic:
201+  BD7C 3A 61 BC         ld a,(tank_missile_displayed)
202+  BD7F FE 00            cp 0
203+  BD81 C2 89 BD         jp nz,tank_missilegraphic0
204+  BD84 3E 13            ld a,19
205+  BD86 C3 8B BD         jp tank_missilegraphic1
206+  BD89              tank_missilegraphic0:
207+  BD89 3E 00            ld a,0
208+  BD8B              tank_missilegraphic1:
209+  BD8B 32 61 BC         ld (tank_missile_displayed),a ; store the flipped graphic
210+  BD8E ED 4B 59 BC      ld bc,(tank_currentdamagecoord)
211+  BD92 0C               inc c
212+  BD93 0C               inc c                   ; print the graphic 2 spaces right
213+  BD94 CD 9E A8         call screen_getblock        ; get the block data into hl
214+  BD97 CD 84 A8         call screen_showchar        ; show this character here
215+  BD9A 06 02            ld b,2
216+  BD9C 0E 18            ld c,24                     ; set gunbarrel coords
217+  BD9E 11 00 00         ld de,0
218+  BDA1 21 6F B4         ld hl,tank_sprite           ; set hl to gunbarrel gfx, shooting is +64
219+  BDA4 3A 61 BC         ld a,(tank_missile_displayed)
220+  BDA7 FE 00            cp 0
221+  BDA9 CA AF BD         jp z,tank_missilegraphic2
222+  BDAC 11 40 00         ld de,64
223+  BDAF              tank_missilegraphic2:
224+  BDAF 19               add hl,de                   ; work out missile graphic
225+  BDB0 CD 84 A8         call screen_showchar        ; show this character here
226+  BDB3 C9               ret
227+  BDB4
228+  BDB4              ;
229+  BDB4              ; Deal with the player being killed by the tank
230+  BDB4              ;
231+  BDB4              tank_killedbytank:
232+  BDB4 ED 4B 59 BC      ld bc,(tank_currentdamagecoord) ; get the current damage coord into bc
233+  BDB8 21 F2 B2         ld hl,sprites                   ; empty sprite
234+  BDBB CD 84 A8         call screen_showchar            ; hide the last piece of dirt
235+  BDBE CD 2E BA         call player_tankkillplayer
236+  BDC1 C9               ret
237+  BDC2
238+  BDC2              tank_move:
239+  BDC2 ED 4B 54 BC      ld bc,(tank_initpos2)
240+  BDC6 C5               push bc
241+  BDC7 3A 57 BC         ld a,(tank_anim)
242+  BDCA FE 11            cp 17                       ; check first time flag
243+  BDCC CA DE BD         jp z,tank_move1             ; don't draw over previous one if first time
244+  BDCF CD E3 BD         call tank_draw_full         ; delete old one
245+  BDD2 ED 4B 54 BC      ld bc,(tank_initpos2)       ; get the current coords
246+  BDD6 78               ld a,b
247+  BDD7 D6 01            sub 1                       ; move back one pixels
248+  BDD9 47               ld b,a
249+  BDDA ED 43 54 BC      ld (tank_initpos2),bc
250+  BDDE              tank_move1:
251+  BDDE CD E3 BD         call tank_draw_full         ; draw the tank
252+  BDE1 C1               pop bc
253+  BDE2 C9               ret
254+  BDE3
255+  BDE3              tank_draw_full:
256+  BDE3 21 6F B4         ld hl,tank_sprite
257+  BDE6 ED 4B 54 BC      ld bc,(tank_initpos2)         ; load bc with the start coords
258+  BDEA 22 5D BC         ld (tank_current_sprite),hl  ; put into memory
259+  BDED ED 43 5F BC      ld (tank_current_coords),bc  ; put into memory
260+  BDF1 CD 1A BE         call tank_draw
261+  BDF4 08               ex af,af'
262+  BDF5 3A 56 BC         ld a,(tank_frame)            ; get the animation frame
263+  BDF8 16 00            ld d,0
264+  BDFA 5F               ld e,a
265+  BDFB 19               add hl,de
266+  BDFC 22 5D BC         ld (tank_current_sprite),hl  ; put into memory
267+  BDFF 08               ex af,af'
268+  BE00 ED 4B 54 BC      ld bc,(tank_initpos2)         ; load bc with the start coords
269+  BE04 81 C6 08         add c,8                      ; move one line down
270+  BE07 4F               ld c,a
271+  BE08 ED 43 5F BC      ld (tank_current_coords),bc  ; put into memory
272+  BE0C CD 1A BE         call tank_draw
273+  BE0F 3E 02            ld a,2
274+  BE11 CD CC A5         call buffer_marklineforupdate
275+  BE14 3E 03            ld a,3
276+  BE16 CD CC A5         call buffer_marklineforupdate   ; mark the first two rows for update
277+  BE19 C9               ret
278+  BE1A
279+  BE1A              ;
280+  BE1A              ; Draw the tank
281+  BE1A              ; Inputs:
282+  BE1A              ; None, all in memory
283+  BE1A              ;
284+  BE1A              tank_draw:
285+  BE1A 3E 04            ld a,4                              ; 4 pieces per half
286+  BE1C              tank_draw0:
287+  BE1C F5               push af
288+  BE1D 2A 5D BC         ld hl,(tank_current_sprite)
289+  BE20 ED 4B 5F BC      ld bc,(tank_current_coords)         ; load bc with the start coords
290+  BE24 CD F5 A8         call sprites_drawsprite
291+  BE27 2A 5D BC         ld hl,(tank_current_sprite)
292+  BE2A ED 4B 5F BC      ld bc,(tank_current_coords)         ; load bc with the start coords
293+  BE2E 11 08 00         ld de,8
294+  BE31 19               add hl,de
295+  BE32 80 C6 08         add b,8
296+  BE35 47               ld b,a
297+  BE36 22 5D BC         ld (tank_current_sprite),hl         ; put into memory
298+  BE39 ED 43 5F BC      ld (tank_current_coords),bc         ; put into memory
299+  BE3D F1               pop af
300+  BE3E 3D               dec a
301+  BE3F FE 00            cp 0
302+  BE41 C2 1C BE         jp nz,tank_draw0
303+  BE44
304+  BE44 C9               ret
305+  BE45
# file closed: game/tank.asm
 42   BE45                  include "game\rocks.asm"
# file opened: game/rocks.asm
  1+  BE45              ;
  2+  BE45              ; A structure of falling rocks
  3+  BE45              ; Assume we'll never have more than 4 falling at any one time
  4+  BE45              ; (1,2 - 16 bit memory location for rock graphic),state (0 fell, 1 falling, 2 wobbling), countdown
  5+  BE45              ;
  6+  BE45              rocks_falling:
  7+  BE45 00 00 00 00      defb 0,0,0,0
  8+  BE49 00 00 00 00      defb 0,0,0,0
  9+  BE4D 00 00 00 00      defb 0,0,0,0
 10+  BE51 00 00 00 00      defb 0,0,0,0
 11+  BE55
 12+  BE55              rocks_tmp:
 13+  BE55 00               defb 0
 14+  BE56
 15+  BE56              rocks_tmp2:
 16+  BE56 00 00            defb 0,0
 17+  BE58
 18+  BE58              ;
 19+  BE58              ; Coords of the rock that killed us
 20+  BE58              ;
 21+  BE58              rocks_killerrock:
 22+  BE58 00 00            defb 0,0
 23+  BE5A
 24+  BE5A              ;
 25+  BE5A              ; Checks for a rock that needs to start falling. Takes a memory location of the first line at the bottom of the space.
 26+  BE5A              ; Checks to see if the pixel row in that location is a rock bottom. If it is, mark this rock as ready to fall.
 27+  BE5A              ; If the pixel row is not the rock bottom, stop checking.
 28+  BE5A              ; Inputs:
 29+  BE5A              ; hl- memory location
 30+  BE5A              ;
 31+  BE5A              rocks_checkforfalling:
 32+  BE5A 7E               ld a,(hl)           ; get the pixel row in this memory location
 33+  BE5B FE 7E            cp 126              ; check against the bottom pixel row of the rock graphic
 34+  BE5D C2 63 BE         jp nz,rocks_checkforfalling2 ; not a rock, stop
 35+  BE60 CD 64 BE         call rocks_addrocktofalling ; mark the rock as falling
 36+  BE63              rocks_checkforfalling2:
 37+  BE63 C9               ret
 38+  BE64
 39+  BE64              ;
 40+  BE64              ; Adds the rock to the structure that tracks falling rocks
 41+  BE64              ; Inputs:
 42+  BE64              ; hl - memory location of falling rock graphic
 43+  BE64              ; bc - coords of rock, c vert
 44+  BE64              rocks_addrocktofalling:
 45+  BE64 C5               push bc             ; store the coords
 46+  BE65 11 45 BE         ld de,rocks_falling
 47+  BE68 06 04            ld b,4              ; number of possible falling rocks
 48+  BE6A              rocks_addrocktofalling0:
 49+  BE6A 13               inc de
 50+  BE6B                  ;inc de
 51+  BE6B 13               inc de              ; move three along to get the state
 52+  BE6C 1A               ld a,(de)           ; load the state
 53+  BE6D FE 00            cp 0                ; check if this is not falling
 54+  BE6F C2 85 BE         jp nz,rocks_addrocktofalling1 ; continue the loop if not 0
 55+  BE72 13               inc de              ; move to frame
 56+  BE73 3E 10            ld a,16             ; load the number of frames to wobble
 57+  BE75 12               ld (de),a
 58+  BE76 1B               dec de              ; move de back to state
 59+  BE77 3E 02            ld a,2
 60+  BE79 12               ld (de),a           ; set the state to wobbling
 61+  BE7A 1B               dec de              ; move back coords
 62+  BE7B C1               pop bc              ; get back coords
 63+  BE7C 78               ld a,b
 64+  BE7D 12               ld (de),a           ; store the vertical
 65+  BE7E 1B               dec de
 66+  BE7F 79               ld a,c
 67+  BE80 12               ld (de),a           ; store the horizontal
 68+  BE81 C5               push bc
 69+  BE82 C3 89 BE         jp rocks_addrocktofalling2 ; done
 70+  BE85              rocks_addrocktofalling1:
 71+  BE85 13               inc de
 72+  BE86 13               inc de              ; move memory along to next rock
 73+  BE87 10 E1            djnz rocks_addrocktofalling0 ; try the next rock
 74+  BE89              rocks_addrocktofalling2: ; done, return
 75+  BE89 C1               pop bc              ; to tidy up
 76+  BE8A C9               ret
 77+  BE8B
 78+  BE8B              ;
 79+  BE8B              ; Processes any falling rocks
 80+  BE8B              ;
 81+  BE8B              rocks_processrocks:
 82+  BE8B DD 21 45 BE      ld ix,rocks_falling
 83+  BE8F 06 04            ld b,4              ; the number of rocks to check
 84+  BE91              rocks_processrocks0:
 85+  BE91 C5               push bc             ; store loop count
 86+  BE92 DD 4E 00 DD      ld bc,(ix)          ; load the coords for this rock into bc
 86+  BE96 46 01
 87+  BE98 DD 23            inc ix
 88+  BE9A DD 23            inc ix              ; move to the state
 89+  BE9C DD 7E 00         ld a,(ix)           ; load the state into a
 90+  BE9F FE 00            cp 0
 91+  BEA1 CA C5 BE         jp z,rocks_processrocks3 ; if not falling, check next
 92+  BEA4 FE 02            cp 2
 93+  BEA6 C2 B6 BE         jp nz, rocks_processrocks2
 94+  BEA9                  ; we're wobbling
 95+  BEA9 DD 23            inc ix              ; get frame number for wobble
 96+  BEAB DD 7E 00         ld a,(ix)           ; get wobble frame into a
 97+  BEAE CD 96 BF         call rocks_wobble
 98+  BEB1 DD 23            inc ix              ; increment for next
 99+  BEB3 C3 C9 BE         jp rocks_processrocks1  ; do next rock
100+  BEB6              rocks_processrocks2:
101+  BEB6                  ; we're falling
102+  BEB6 C5               push bc
103+  BEB7 CD E2 BE         call rocks_fall
104+  BEBA C1               pop bc
105+  BEBB CD CD BE         call rocks_storeupdatedlines
106+  BEBE DD 23            inc ix
107+  BEC0 DD 23            inc ix              ; inc ix to get to next
108+  BEC2 C3 C9 BE         jp rocks_processrocks1
109+  BEC5              rocks_processrocks3:
110+  BEC5 DD 23            inc ix
111+  BEC7 DD 23            inc ix
112+  BEC9              rocks_processrocks1:
113+  BEC9 C1               pop bc              ; get loop count back
114+  BECA 10 C5            djnz rocks_processrocks0
115+  BECC C9               ret
116+  BECD
117+  BECD              ;
118+  BECD              ; Stores the updated rows associated with the rock
119+  BECD              ; Inputs:
120+  BECD              ; bc - coords
121+  BECD              ;
122+  BECD              rocks_storeupdatedlines:
123+  BECD 79               ld a,c                  ; get the rock block coords of current block
124+  BECE E6 F8            and 248                 ; find closest multiple of eight
125+  BED0 0F               rrca
126+  BED1 0F               rrca
127+  BED2 0F               rrca                    ; divide by 8
128+  BED3 ED 5B 1C A7      ld de,(screen_offset)          ; load the screen offset, this is in rows
129+  BED7 93               sub e
130+  BED8 F5               push af
131+  BED9 CD CC A5         call buffer_marklineforupdate  ; store current row in updated lines
132+  BEDC F1               pop af
133+  BEDD 3C               inc a
134+  BEDE CD CC A5         call buffer_marklineforupdate  ; store line beneath
135+  BEE1 C9               ret
136+  BEE2
137+  BEE2              ;
138+  BEE2              ; Falls a rock one pixel, checks the next square down to see if it is empty, if not, stop falling
139+  BEE2              ; bc - coord of current rock graphic on screen
140+  BEE2              ; ix - memory location of current rock in rock list, currently at the 3rd position (rock state)
141+  BEE2              ;
142+  BEE2              rocks_fall:
143+  BEE2 DD 2B            dec ix
144+  BEE4 DD 2B            dec ix              ; decrease ix back to coords
145+  BEE6 ED 43 56 BE      ld (rocks_tmp2),bc  ; store original coords
146+  BEEA 3E 03            ld a,3              ; move this number of pixels
147+  BEEC              rocks_fall1:
148+  BEEC 08               ex af,af'
149+  BEED DD 4E 00 DD      ld bc,(ix)          ; get current coords
149+  BEF1 46 01
150+  BEF3 CD 38 A9         call sprites_scadd  ; get the memory of the coords into de
151+  BEF6 14               inc d               ; add 256 to get next row
152+  BEF7 1A               ld a,(de)           ; get the contents of the next row
153+  BEF8 FE 00            cp 0
154+  BEFA C2 56 BF         jp nz,rocks_fall3    ; move the rock if the row is empty
155+  BEFD 0C               inc c               ; increment the vertical
156+  BEFE DD 71 00 DD      ld (ix),bc          ; store the new coords
156+  BF02 70 01
157+  BF04 79               ld a,c              ; get the vertical coord into a
158+  BF05 E6 07            and 7               ; divisible by 8?
159+  BF07 FE 00            cp 0
160+  BF09 C2 24 BF         jp nz,rocks_fall4   ; if not, carry on
161+  BF0C CD 47 A8         call screen_getattraddressfromscreencoords ; get the attr address into de
162+  BF0F 62 6B            ld hl,de
163+  BF11 36 42            ld (hl),66          ; load this square with the yellow colour
164+  BF13 DD 4E 00 DD      ld bc,(ix)
164+  BF17 46 01
165+  BF19 79               ld a,c              ; get vertical
166+  BF1A D6 08            sub 8               ; look up one square
167+  BF1C 4F               ld c,a              ; put a back in c
168+  BF1D CD 47 A8         call screen_getattraddressfromscreencoords ; get the attr address into de
169+  BF20 62 6B            ld hl,de
170+  BF22 36 46            ld (hl),70          ; load this square with the yellow colour
171+  BF24              rocks_fall4:
172+  BF24 08               ex af,af'
173+  BF25 3D               dec a
174+  BF26 FE 00            cp 0
175+  BF28 C2 EC BE         jp nz,rocks_fall1   ; do another pixel if needed
176+  BF2B              rocks_fall2:
177+  BF2B 3E 09            ld a,9              ; rock graphic
178+  BF2D ED 4B 56 BE      ld bc,(rocks_tmp2)  ; get the original coords
179+  BF31 CD 9E A8         call screen_getblock     ; get the memory into hl
180+  BF34 CD F5 A8         call sprites_drawsprite  ; draw the sprite - over the top of the current one
181+  BF37 3E 09            ld a,9
182+  BF39 DD 4E 00 DD      ld bc,(ix)          ; get the new coords
182+  BF3D 46 01
183+  BF3F CD 9E A8         call screen_getblock     ; get the memory into hl
184+  BF42 CD F5 A8         call sprites_drawsprite  ; draw the sprite - over the top of the current one
185+  BF45 DD 4E 00 DD      ld bc,(ix)          ; get the coords again
185+  BF49 46 01
186+  BF4B CD 7B BF         call rocks_checkforplayer ; check to see if we hit a player
187+  BF4E DD 23            inc ix
188+  BF50 DD 23            inc ix                  ; get ix back to state
189+  BF52 CD 6B BF         call rocks_makesound
190+  BF55 C9               ret
191+  BF56              rocks_fall3:
192+  BF56 3E 00            ld a,0              ; set the state to fell
193+  BF58 DD 77 02         ld (ix+2),a           ; store the falling state
194+  BF5B DD 4E 00 DD      ld bc,(ix)          ; get the coords
194+  BF5F 46 01
195+  BF61 CD 47 A8         call screen_getattraddressfromscreencoords ; get the attr address into de
196+  BF64 62 6B            ld hl,de
197+  BF66 36 42            ld (hl),66
198+  BF68 C3 2B BF         jp rocks_fall2      ; rejoin main loop
199+  BF6B
200+  BF6B              ;
201+  BF6B              ; Makes the rock sound if we're no longer falling, and if we didn't hit a player
202+  BF6B              ;
203+  BF6B              rocks_makesound:
204+  BF6B DD 7E 00         ld a,(ix)           ; get the state
205+  BF6E FE 00            cp 0
206+  BF70 C0               ret nz              ; if we haven't fallen, don't do anything
207+  BF71 21 45 B9         ld hl,player+11
208+  BF74 7E               ld a,(hl)
209+  BF75 FE 01            cp 1
210+  BF77 C4 23 AD         call nz, sound_rockfell ; only make sound if didn't kill player
211+  BF7A C9               ret
212+  BF7B
213+  BF7B              ;
214+  BF7B              ; Checks to see if the rock is hitting a player
215+  BF7B              ; Inputs:
216+  BF7B              ; bc - coords of rock we're checking
217+  BF7B              rocks_checkforplayer:
218+  BF7B ED 5B 3A B9      ld de,(player)       ; get the player coords
219+  BF7F 7B               ld a,e               ; get the vert coord first
220+  BF80 91               sub c                ; subtract the rock vertical coord from players
221+  BF81 FE 08            cp 8                 ; the rock will only hit a player if the player is directly underneath, so this must be 8
222+  BF83 C0               ret nz               ; if not, hasn't hit
223+  BF84 7A               ld a,d               ; get the player horiz coord
224+  BF85 90               sub b                ; subtract rock coord
225+  BF86 C6 07            add 7                ; add max distance
226+  BF88 FE 0D            cp 13                ; compare to 13? if carry flag set, they've hit
227+  BF8A DA 8E BF         jp c,rocks_checkforplayer0
228+  BF8D C9               ret
229+  BF8E              rocks_checkforplayer0:
230+  BF8E ED 43 58 BE      ld (rocks_killerrock),bc; store the coords of the killer rock
231+  BF92 CD 28 BA         call player_crushplayer ; if so, jump out
232+  BF95 C9               ret
233+  BF96
234+  BF96              ;
235+  BF96              ; Wobbles a rocks
236+  BF96              ; Inputs:
237+  BF96              ; bc - coord of current rock graphic on screen
238+  BF96              ; ix - memory location of current rock in rock list, currently at the 4th position (wobble count)
239+  BF96              ; a - wobble frame
240+  BF96              rocks_wobble:
241+  BF96 DD 7E 00         ld a,(ix)           ; get the wobble count, which we'll use as frame toggle
242+  BF99 E6 01            and 1               ; is it odd or even, gets 1 or 0
243+  BF9B 1E 09            ld e,9              ; this is the rock frame
244+  BF9D 83               add a,e             ; add the frame toggle
245+  BF9E C5               push bc
246+  BF9F CD 9E A8         call screen_getblock     ; get the memory into hl
247+  BFA2 CD F5 A8         call sprites_drawsprite  ; draw the sprite - over the top of the current one
248+  BFA5
249+  BFA5 DD 7E 00         ld a,(ix)           ; get the frame toggle again
250+  BFA8 3D               dec a               ; decrease
251+  BFA9 DD 77 00         ld (ix),a           ; store
252+  BFAC
253+  BFAC E6 01            and 1
254+  BFAE 1E 09            ld e,9              ; this is the rock frame
255+  BFB0 83               add a,e             ; add the frame toggle
256+  BFB1 CD 9E A8         call screen_getblock     ; get the memory into hl
257+  BFB4
258+  BFB4 C1               pop bc
259+  BFB5 CD F5 A8         call sprites_drawsprite  ; draw the sprite again with the new frame - next time it will do the opposite
260+  BFB8
261+  BFB8 DD 7E 00         ld a,(ix)           ; get the wobble count back
262+  BFBB FE 00            cp 0
263+  BFBD C0               ret nz              ; if we're not at zero, return
264+  BFBE DD 2B            dec ix              ; otherwise look to state location
265+  BFC0 3E 01            ld a,1              ; set the state to falling
266+  BFC2 DD 77 00         ld (ix),a           ; store the falling state
267+  BFC5 DD 23            inc ix              ; set ix back to location of wobble count, and we're done
268+  BFC7 C9               ret
269+  BFC8
# file closed: game/rocks.asm
 43   BFC8                  include "game\scores.asm"
# file opened: game/scores.asm
  1+  BFC8              ;
  2+  BFC8              ; The score of the current player
  3+  BFC8              ;
  4+  BFC8              scores_current:
  5+  BFC8 04 01 30 30      defb 4,1,'000000',255       ;+2
  5+  BFCC 30 30 30 30
  5+  BFD0 FF
  6+  BFD1
  7+  BFD1              scores_defaultname:
  8+  BFD1 2D 2D 2D         defb '---'
  9+  BFD4
 10+  BFD4              ;
 11+  BFD4              ; The current high score table
 12+  BFD4              ;
 13+  BFD4              scores_table:
 14+  BFD4 03 17 47 41      defb 03,23,'GAM000000',255         ;+0, +2, +5
 14+  BFD8 4D 30 30 30
 14+  BFDC 30 30 30 FF
 15+  BFE0 0C 17 47 41      defb 12,23,'GAM000000',255        ;+12, +14, +17
 15+  BFE4 4D 30 30 30
 15+  BFE8 30 30 30 FF
 16+  BFEC 15 17 47 41      defb 21,23,'GAM000000',255        ;+24, +26, +29
 16+  BFF0 4D 30 30 30
 16+  BFF4 30 30 30 FF
 17+  BFF8
 18+  BFF8              ;
 19+  BFF8              ; Add thousands to the score
 20+  BFF8              ; Inputs:
 21+  BFF8              ; b - number to add
 22+  BFF8              ;
 23+  BFF8              scores_addthousands:
 24+  BFF8 21 CC BF         ld hl,scores_current+4
 25+  BFFB CD 25 C0         call scores_update
 26+  BFFE C9               ret
 27+  BFFF
 28+  BFFF              ;
 29+  BFFF              ; Prints the score to screen
 30+  BFFF              ;
 31+  BFFF              scores_printscore:
 32+  BFFF 3A 0C B9         ld a,(game_currentplayer)   ; get current player
 33+  C002 21 C8 BF         ld hl,scores_current
 34+  C005 FE 01            cp 1
 35+  C007 C2 0F C0         jp nz, score_printscore0    ; if not player 1
 36+  C00A 36 04            ld (hl),4       ; set position for player 1
 37+  C00C C3 11 C0         jp score_printscore1
 38+  C00F              score_printscore0:
 39+  C00F 36 16            ld (hl),22       ; set position for player 2
 40+  C011              score_printscore1:
 41+  C011 21 C8 BF         ld hl,scores_current
 42+  C014 CD CC 84         call string_print
 43+  C017 C9               ret
 44+  C018
 45+  C018              ;
 46+  C018              ; Prints both scores to screen
 47+  C018              ;
 48+  C018              scores_printscores:
 49+  C018 21 10 BA         ld hl,player1_score
 50+  C01B CD CC 84         call string_print
 51+  C01E 21 19 BA         ld hl,player2_score
 52+  C021 CD CC 84         call string_print
 53+  C024 C9               ret
 54+  C025
 55+  C025              ;
 56+  C025              ; Updates the current score.
 57+  C025              ; Inputs:
 58+  C025              ; hl - memory location of the score column
 59+  C025              ; b - number to add
 60+  C025              ;
 61+  C025              scores_update:
 62+  C025 7E               ld a,(hl)           ; current value of digit.
 63+  C026 80               add a,b             ; add points to this digit.
 64+  C027 77               ld (hl),a           ; place new digit back in string.
 65+  C028 FE 3A            cp 58               ; more than ASCII value '9'?
 66+  C02A D8               ret c               ; no - relax.
 67+  C02B D6 0A            sub 10              ; subtract 10.
 68+  C02D 77               ld (hl),a           ; put new character back in string.
 69+  C02E              scores_update0:
 70+  C02E 2B               dec hl              ; previous character in string.
 71+  C02F 34               inc (hl)            ; up this by one.
 72+  C030 7E               ld a,(hl)           ; what's the new value?
 73+  C031 FE 3A            cp 58               ; gone past ASCII nine?
 74+  C033 D8               ret c               ; no, scoring done.
 75+  C034 D6 0A            sub 10              ; down by ten.
 76+  C036 77               ld (hl),a           ; put it back
 77+  C037 C3 2E C0         jp scores_update0   ; go round again.
 78+  C03A
 79+  C03A
 80+  C03A              ;
 81+  C03A              ; Displays the high score table at the bottom of the screen
 82+  C03A              ;
 83+  C03A              scores_showtable:
 84+  C03A 21 D4 BF         ld hl, scores_table
 85+  C03D CD CC 84         call string_print
 86+  C040 21 E0 BF         ld hl, scores_table+12
 87+  C043 CD CC 84         call string_print
 88+  C046 21 EC BF         ld hl, scores_table+24
 89+  C049 CD CC 84         call string_print
 90+  C04C C9               ret
 91+  C04D
 92+  C04D              ;
 93+  C04D              ; Place to store the current position we're checking
 94+  C04D              ;
 95+  C04D              scores_highscoretmp:
 96+  C04D 00               defb 0
 97+  C04E
 98+  C04E              ;
 99+  C04E              ; Updates the highscore table. Start at bottom score. Work way from left. Compare each digit. If current is higher than one we're checking,
100+  C04E              ; copy checking one down (or erase) then copy current over that one. Then move up one and do the same
101+  C04E              ;
102+  C04E              scores_processhighscores:
103+  C04E 21 4D C0         ld hl,scores_highscoretmp
104+  C051 36 00            ld (hl),0  ; load up the tracking byte with 0 (ie, not on the table)
105+  C053 3E 1D            ld a,29
106+  C055              scores_processhighscores3:
107+  C055 21 D4 BF         ld hl,scores_table          ; position of first score column
108+  C058 5F               ld e,a
109+  C059 16 00            ld d,0
110+  C05B 19               add hl,de
111+  C05C 08               ex af,af'                   ; store a for later
112+  C05D 11 CA BF         ld de,scores_current+2      ; position of current score column
113+  C060 06 06            ld b,6                      ; times to loop
114+  C062              scores_processhighscores0:
115+  C062 7E               ld a,(hl)
116+  C063 4F               ld c,a                      ; get first score column
117+  C064 1A               ld a,(de)                   ; get first current column
118+  C065 B9               cp c                        ; compare current with first
119+  C066 DA 77 C0         jp c,scores_processhighscores4  ; if c is bigger, then this is not a higher score, so end
120+  C069 23               inc hl
121+  C06A 13               inc de                      ; move to next column
122+  C06B 10 F5            djnz scores_processhighscores0 ; loop
123+  C06D 08               ex af,af'                     ; still here, so must be bigger
124+  C06E 32 4D C0         ld (scores_highscoretmp),a  ; store the position indicator in the tracking byte
125+  C071 0E 0C            ld c,12
126+  C073 91               sub c
127+  C074 D2 55 C0         jp nc,scores_processhighscores3 ; if the place we're looking is less than zero, we've gone to far, so continue, otherwise go again
128+  C077              scores_processhighscores4
129+  C077 CD 7B C0         call scores_updatehighscores
130+  C07A C9               ret
131+  C07B
132+  C07B              ;
133+  C07B              ; Update score table
134+  C07B              ;
135+  C07B              scores_updatehighscores:
136+  C07B 3A 4D C0         ld a,(scores_highscoretmp)  ; get the place we want to overwrite
137+  C07E FE 00            cp 0
138+  C080 C8               ret z                       ; if this is 0, didn't get a high score
139+  C081 FE 1D            cp 29                       ; check against 29... if it's equal, we don't want to copy the current score down one
140+  C083 CA B6 C0         jp z, scores_updatehighscores3
141+  C086                                              ; copy old score over one below, if not first
142+  C086 21 D4 BF         ld hl,scores_table
143+  C089 11 11 00         ld de,17                    ; start at second score, because this is the first one we'd ever need to copy...
144+  C08C 19               add hl,de                   ; position of first column
145+  C08D 2B               dec hl
146+  C08E 2B               dec hl
147+  C08F 2B               dec hl
148+  C090 E5               push hl
149+  C091 11 0C 00         ld de,12
150+  C094 19               add hl,de                   ; get position of next score
151+  C095 54 5D            ld de,hl
152+  C097 E1               pop hl                      ; get hl back
153+  C098 01 09 00         ld bc,9
154+  C09B ED B0            ldir
155+  C09D FE 11            cp 17                       ; see if we're copying into the second place slot (17 memory offset). If so, stop copying back the scores
156+  C09F CA B6 C0         jp z,scores_updatehighscores3
157+  C0A2 21 D4 BF         ld hl,scores_table
158+  C0A5 11 02 00         ld de,2                    ; ... otherwise, copy back the first score
159+  C0A8 19               add hl,de                   ; position of first column
160+  C0A9 E5               push hl
161+  C0AA 11 0C 00         ld de,12
162+  C0AD 19               add hl,de                   ; get position of next score
163+  C0AE 54 5D            ld de,hl
164+  C0B0 E1               pop hl                      ; get hl back
165+  C0B1 01 09 00         ld bc,9
166+  C0B4 ED B0            ldir
167+  C0B6              scores_updatehighscores3:
168+  C0B6 06 06            ld b,6                      ; now overwrite
169+  C0B8 21 D4 BF         ld hl,scores_table
170+  C0BB 16 00            ld d,0
171+  C0BD 5F               ld e,a
172+  C0BE 19               add hl,de                   ; position of first column
173+  C0BF 08               ex af,af'
174+  C0C0 11 CA BF         ld de,scores_current+2      ; position of current score column
175+  C0C3              scores_updatehighscores2:
176+  C0C3 1A               ld a,(de)
177+  C0C4 77               ld (hl),a
178+  C0C5 23               inc hl
179+  C0C6 13               inc de
180+  C0C7 10 FA            djnz scores_updatehighscores2
181+  C0C9 11 09 00         ld de,9
182+  C0CC ED 52            sbc hl,de
183+  C0CE 54 5D            ld de,hl                    ; get back to start of entry
184+  C0D0 21 D1 BF         ld hl,scores_defaultname    ; still need to overwrite the name
185+  C0D3 01 03 00         ld bc,3                      ; 3 chars to copy
186+  C0D6 ED B0            ldir
187+  C0D8 C9               ret
# file closed: game/scores.asm
 44   C0D9                  include "game\diamonds.asm"
# file opened: game/diamonds.asm
  1+  C0D9              diamonds_tmp:
  2+  C0D9 00               defb 0
  3+  C0DA
  4+  C0DA              ;
  5+  C0DA              ; Holds the number of thousands for the current gem type
  6+  C0DA              ;
  7+  C0DA              diamonds_score:
  8+  C0DA 00               defb 0
  9+  C0DB
 10+  C0DB              ;
 11+  C0DB              ; Changes the attribute of gem and diamond cells based on the frame count
 12+  C0DB              ; Inputs:
 13+  C0DB              ; hl - memory location of gem type
 14+  C0DB              diamonds_twinkle_type:
 15+  C0DB CD 30 B9         call game_getcurrentframe       ; get current frame number
 16+  C0DE E6 07            and 7                           ; want a number from 0-7
 17+  C0E0 C6 40            add 64                          ; add to 60 to get attr colour
 18+  C0E2              diamonds_twinkle_type0:
 19+  C0E2 4E 23 46 2B      ld bc,(hl)                      ; get coords into bc
 20+  C0E6 08               ex af, af'
 21+  C0E7 79               ld a,c                          ; load c into a
 22+  C0E8 FE FF            cp 255                          ; is this the end?
 23+  C0EA CA 07 C1         jp z,diamonds_twinkle_type1           ; step out if so
 24+  C0ED 23               inc hl
 25+  C0EE 23               inc hl
 26+  C0EF 7E               ld a,(hl)                       ; check the state, don't process if collected
 27+  C0F0 FE 01            cp 1
 28+  C0F2 CA 08 C1         jp z,diamonds_twinkle_type2           ; step out if so
 29+  C0F5 CD 47 C1         call diamonds_checkforplayer    ; check to see if we've collided with player
 30+  C0F8 DC 0F C1         call c,diamonds_collect     ; we collided
 31+  C0FB 23               inc hl
 32+  C0FC 08               ex af,af'
 33+  C0FD 5E 23 56 2B      ld de,(hl)                      ; get the memory location into de
 34+  C101 12               ld (de),a                       ; set the value of attr
 35+  C102 23               inc hl
 36+  C103 23               inc hl                          ; move to next diamond
 37+  C104 C3 E2 C0         jp diamonds_twinkle_type0
 38+  C107              diamonds_twinkle_type1:
 39+  C107 C9               ret
 40+  C108              diamonds_twinkle_type2:
 41+  C108 23               inc hl                          ; do stuff the we would have done anyway to get to next gem
 42+  C109 23               inc hl
 43+  C10A 23               inc hl
 44+  C10B 08               ex af,af'
 45+  C10C C3 E2 C0         jp diamonds_twinkle_type0       ; rejoin main loop
 46+  C10F
 47+  C10F              ;
 48+  C10F              ; Collect the diamond we collided with
 49+  C10F              ; Inputs:
 50+  C10F              ; hl - memory location of current diamond, currently on state
 51+  C10F              ; Output:
 52+  C10F              ; a - 70 - for yellow on black
 53+  C10F              diamonds_collect:
 54+  C10F 36 01            ld (hl),1                       ; collected
 55+  C111 E5               push hl
 56+  C112 2B               dec hl
 57+  C113 2B               dec hl
 58+  C114 4E 23 46 2B      ld bc,(hl)                      ; get the coords
 59+  C118 CD 6A A8         call screen_getscreencoordsfromcharcoords ; get the screen coords into bc
 60+  C11B ED 5B D9 C0      ld de,(diamonds_tmp)            ; tmp stores the offset for this type of gem
 61+  C11F 16 00            ld d,0
 62+  C121 21 F2 B2         ld hl,sprites
 63+  C124 19               add hl,de
 64+  C125 CD F5 A8         call sprites_drawsprite     ; call the routine to draw the sprite
 65+  C128 E1               pop hl
 66+  C129 08               ex af,af'
 67+  C12A 3E 46            ld a,70
 68+  C12C 08               ex af,af'                       ; make sure a is in the af we'll use for the attr
 69+  C12D D9               exx
 70+  C12E 3A DA C0         ld a,(diamonds_score)
 71+  C131 47               ld b,a
 72+  C132 CD F8 BF         call scores_addthousands
 73+  C135 3A D9 C0         ld a,(diamonds_tmp)
 74+  C138 FE 40            cp 64                       ; check the gem type offset, if its 64 this is a diamond, so mark the level as completable
 75+  C13A C2 42 C1         jp nz,diamonds_collect0
 76+  C13D 21 47 B9         ld hl,player+13
 77+  C140 36 01            ld (hl),1                   ; mark the player as able to complete the level
 78+  C142              diamonds_collect0:
 79+  C142 CD 06 AD         call sound_gemcollected
 80+  C145 D9               exx
 81+  C146 C9               ret
 82+  C147
 83+  C147              ;
 84+  C147              ; Checks to see if the gem is hitting a player
 85+  C147              ; Inputs:
 86+  C147              ; bc - coords of diamond we're checking
 87+  C147              diamonds_checkforplayer:
 88+  C147 78               ld a,b               ; multiply b by 8
 89+  C148 07               rlca
 90+  C149 07               rlca
 91+  C14A 07               rlca
 92+  C14B 47               ld b,a
 93+  C14C ED 5B 3A B9      ld de,(player)       ; get the player coords
 94+  C150 7B               ld a,e               ; get the vert coord first
 95+  C151 90               sub b                ; subtract the diamond vertical coord from players
 96+  C152 C6 04            add 4                ; add the max distance
 97+  C154 FE 09            cp 9                ; compare to max*2+1? if carry flag set, they've hit
 98+  C156 D0               ret nc               ; if not, hasn't hit
 99+  C157 79               ld a,c               ; multiply c by 8
100+  C158 07               rlca
101+  C159 07               rlca
102+  C15A 07               rlca
103+  C15B 4F               ld c,a
104+  C15C 7A               ld a,d               ; get the player horiz coord
105+  C15D 91               sub c                ; subtract rock coord
106+  C15E C6 04            add 4                ; add max distance
107+  C160 FE 09            cp 9                ; compare to max*2+1? if carry flag set, they've hit
108+  C162 D0               ret nc
109+  C163 3E 00            ld a,0
110+  C165 C9               ret
111+  C166
112+  C166
113+  C166              ;
114+  C166              ; Initialise diamonds and gems
115+  C166              ;
116+  C166              diamonds_twinkle
117+  C166 21 DA C0         ld hl,diamonds_score
118+  C169 36 02            ld (hl),2         ; store the score we'll add
119+  C16B 21 D9 C0         ld hl,diamonds_tmp
120+  C16E 36 40            ld (hl),64         ; store the location the diamond sprite
121+  C170 21 6D B2         ld hl, level01diamonds
122+  C173 CD DB C0         call diamonds_twinkle_type
123+  C176 21 DA C0         ld hl,diamonds_score
124+  C179 36 01            ld (hl),1         ; store the score we'll add
125+  C17B 21 D9 C0         ld hl,diamonds_tmp
126+  C17E 36 70            ld (hl),112         ; store the location the gem sprite
127+  C180 21 7D B2         ld hl, level01gems
128+  C183 CD DB C0         call diamonds_twinkle_type
129+  C186 C9               ret
130+  C187
131+  C187              ;
132+  C187              ; Initialise diamonds and gems
133+  C187              ;
134+  C187              diamonds_init:
135+  C187 21 6D B2         ld hl, level01diamonds
136+  C18A CD 94 C1         call diamonds_init_type
137+  C18D 21 7D B2         ld hl, level01gems
138+  C190 CD 94 C1         call diamonds_init_type
139+  C193 C9               ret
140+  C194
141+  C194              ;
142+  C194              ; Initialise diamonds or gems, get memory addresses
143+  C194              ; Inputs:
144+  C194              ; hl - memory location
145+  C194              diamonds_init_type:
146+  C194 4E               ld c,(hl)                      ; get coords into c
147+  C195 79               ld a,c                          ; load c into add
148+  C196 FE FF            cp 255                          ; is this the end?
149+  C198 CA AF C1         jp z,diamonds_init_type1             ; step out if so
150+  C19B 23               inc hl
151+  C19C 46               ld b,(hl)                       ; get coords into b
152+  C19D E5               push hl
153+  C19E CD 17 A8         call screen_getcellattradress ; get memory of attr for this diamond into de
154+  C1A1 E1               pop hl
155+  C1A2 23               inc hl                          ; move to state
156+  C1A3 36 00            ld (hl),0
157+  C1A5 23               inc hl                          ; move to memory
158+  C1A6 73 23 72 2B      ld (hl),de                      ; store the memory location
159+  C1AA 23               inc hl                          ; move to next diamond
160+  C1AB 23               inc hl
161+  C1AC C3 94 C1         jp diamonds_init_type
162+  C1AF              diamonds_init_type1:
163+  C1AF C9               ret
# file closed: game/diamonds.asm
 45   C1B0                  include "game\missiles.asm"
# file opened: game/missiles.asm
  1+  C1B0              ;
  2+  C1B0              ; Controls when missiles fall
  3+  C1B0              ;
  4+  C1B0              missiles_count:
  5+  C1B0 00               defb 0
  6+  C1B1
  7+  C1B1              ;
  8+  C1B1              ; A structure of falling missiles
  9+  C1B1              ; Assume we'll never have more than 4 falling at any one time
 10+  C1B1              ; (1,2 - 16 bit memory location for missile graphic),state (0 fell, 1 falling)
 11+  C1B1              ;
 12+  C1B1              missiles_falling:
 13+  C1B1 00 00 00         defb 0,0,0
 14+  C1B4 00 00 00         defb 0,0,0
 15+  C1B7 00 00 00         defb 0,0,0
 16+  C1BA 00 00 00         defb 0,0,0
 17+  C1BD
 18+  C1BD              ;
 19+  C1BD              ; Zeroes the state of each missile
 20+  C1BD              ;
 21+  C1BD              missiles_init:
 22+  C1BD 06 0C            ld b,12
 23+  C1BF 21 F4 B1         ld hl,level01missiles
 24+  C1C2              missiles_init0:
 25+  C1C2 23               inc hl
 26+  C1C3 23               inc hl
 27+  C1C4 36 00            ld (hl),0               ; set the state to zero
 28+  C1C6 23               inc hl
 29+  C1C7 23               inc hl
 30+  C1C8 23               inc hl
 31+  C1C9 10 F7            djnz missiles_init0
 32+  C1CB 06 04            ld b,4                  ; reset four falling missiles
 33+  C1CD 21 B1 C1         ld hl,missiles_falling
 34+  C1D0              missiles_init1:
 35+  C1D0 36 00            ld (hl),0
 36+  C1D2 23               inc hl
 37+  C1D3 36 00            ld (hl),0
 38+  C1D5 23               inc hl
 39+  C1D6 36 00            ld (hl),0
 40+  C1D8 23               inc hl
 41+  C1D9 10 F5            djnz missiles_init1
 42+  C1DB C9               ret
 43+  C1DC
 44+  C1DC              ;
 45+  C1DC              ; Runs each frame and checks if a missile can fall, then selects one at random and adds to the falling missiles
 46+  C1DC              ; Processes any already falling missiles
 47+  C1DC              ;
 48+  C1DC              missiles_process:
 49+  C1DC 3A 48 B9         ld a,(player_location)
 50+  C1DF FE 01            cp 1
 51+  C1E1 C2 54 C2         jp nz, missiles_process0                ; if not 1 we're not in the cavern so no need to make any more fall
 52+  C1E4 21 47 B9         ld hl,player+13
 53+  C1E7 7E               ld a,(hl)                               ; check if player has collected a diamond
 54+  C1E8 FE 01            cp 1
 55+  C1EA C2 54 C2         jp nz, missiles_process0                ; don't activate if not
 56+  C1ED 21 B0 C1         ld hl,missiles_count
 57+  C1F0 7E               ld a,(hl)                   ; get the missiles count
 58+  C1F1 3C               inc a
 59+  C1F2 FE 4B            cp 75                                   ; have we reached the count yet
 60+  C1F4 CA FB C1         jp z,missiles_process2                 ; if not, don't activate a new one
 61+  C1F7 77               ld (hl),a                               ; store the updated count, and continue without activating
 62+  C1F8 C3 54 C2         jp missiles_process0
 63+  C1FB              missiles_process2:
 64+  C1FB 36 00            ld (hl),0                               ; zero the counter
 65+  C1FD 1E 0C            ld e,12
 66+  C1FF CD E5 80         call utilities_randomupper              ; get random number from 0 to 11
 67+  C202 11 0A 00         ld de,10
 68+  C205 CD 3A 80         call utilities_multiply                 ; multiple random number by 10
 69+  C208 54 5D            ld de,hl                                ; this is the offset for the random missile
 70+  C20A DD 21 F4 B1      ld ix,level01missiles                   ; load the location of the missile definitions
 71+  C20E DD 19            add ix,de                               ; get to location of missile
 72+  C210 DD 7E 02         ld a,(ix+2)
 73+  C213 FE 00            cp 0
 74+  C215 CA 25 C2         jp z,missiles_process1                  ; if this missile isn't active, activate it
 75+  C218 11 05 00         ld de,5                                 ; otherwise, check the missile above
 76+  C21B DD 19            add ix,de
 77+  C21D DD 7E 02         ld a,(ix+2)
 78+  C220 FE 00            cp 0
 79+  C222 C2 54 C2         jp nz,missiles_process0                 ; if this is active as well, the player got lucky
 80+  C225              missiles_process1:                          ; activate a missile
 81+  C225 DD 36 02 01      ld (ix+2),1                               ; mark this missile as active
 82+  C229 DD 4E 00 DD      ld bc,(ix)                              ; get char coords from the missile
 82+  C22D 46 01
 83+  C22F 78               ld a,b
 84+  C230 ED 5B 1C A7      ld de,(screen_offset)          ; load the screen offset, this is in rows
 85+  C234 93               sub e
 86+  C235 C5               push bc
 87+  C236 CD CC A5         call buffer_marklineforupdate
 88+  C239 C1               pop bc
 89+  C23A CD 6A A8         call screen_getscreencoordsfromcharcoords ; get screen coords into bc
 90+  C23D C5               push bc
 91+  C23E 3E 0C            ld a,12                                 ; inactive missile sprite
 92+  C240 CD 9E A8         call screen_getblock
 93+  C243 CD F5 A8         call sprites_drawsprite                 ; draw the sprite over the old one
 94+  C246 C1               pop bc
 95+  C247 C5               push bc
 96+  C248 3E 14            ld a,20                                 ; active missile sprite
 97+  C24A CD 9E A8         call screen_getblock
 98+  C24D CD F5 A8         call sprites_drawsprite                 ; draw the sprite over the old one
 99+  C250 C1               pop bc
100+  C251 CD E9 C2         call missiles_addmissiletofalling
101+  C254              missiles_process0:
102+  C254 CD 58 C2         call missiles_fall
103+  C257 C9               ret
104+  C258
105+  C258              ;
106+  C258              ; Processes falling missiles
107+  C258              ;
108+  C258              missiles_fall:
109+  C258 06 04            ld b,4              ; number of possible falling missiles
110+  C25A DD 21 B1 C1      ld ix,missiles_falling
111+  C25E              missiles_fall0:
112+  C25E C5               push bc
113+  C25F DD 7E 02         ld a,(ix+2)
114+  C262 FE 00            cp 0
115+  C264 CA C3 C2         jp z,missiles_fall1 ; not falling move to next
116+  C267 DD 4E 00 DD      ld bc,(ix)          ; load coords into bc
116+  C26B 46 01
117+  C26D CD 38 A9         call sprites_scadd  ; get the memory of the coords into de
118+  C270 14               inc d               ; add 256 to get next row
119+  C271 1A               ld a,(de)           ; get the contents of the next row
120+  C272 FE 00            cp 0
121+  C274 C2 CD C2         jp nz,missiles_fall2 ; if this is not empty, stop this missile falling
122+  C277 3E 14            ld a,20                                 ; active missile sprite
123+  C279 CD 9E A8         call screen_getblock
124+  C27C CD F5 A8         call sprites_drawsprite                 ; draw the sprite over the old one
125+  C27F DD 4E 00 DD      ld bc,(ix)          ; load coords into bc
125+  C283 46 01
126+  C285 CD D4 C2         call missiles_storeupdatedlines
127+  C288 DD 4E 00 DD      ld bc,(ix)          ; load coords into bc
127+  C28C 46 01
128+  C28E 0C               inc c               ; move down one pixel
129+  C28F DD 71 00 DD      ld (ix),bc          ; store the new coords
129+  C293 70 01
130+  C295 3E 14            ld a,20                                 ; active missile sprite
131+  C297 CD 9E A8         call screen_getblock
132+  C29A CD F5 A8         call sprites_drawsprite                 ; draw the sprite
133+  C29D DD 4E 00 DD      ld bc,(ix)          ; load coords into bc
133+  C2A1 46 01
134+  C2A3 79               ld a,c              ; get the vertical coord into a
135+  C2A4 E6 07            and 7               ; divisible by 8?
136+  C2A6 FE 00            cp 0
137+  C2A8 C2 C3 C2         jp nz,missiles_fall1   ; if not, carry on
138+  C2AB CD 47 A8         call screen_getattraddressfromscreencoords ; get the attr address into de
139+  C2AE 62 6B            ld hl,de
140+  C2B0 36 43            ld (hl),67          ; load this square with the magenta colour
141+  C2B2 DD 4E 00 DD      ld bc,(ix)
141+  C2B6 46 01
142+  C2B8 79               ld a,c              ; get vertical
143+  C2B9 D6 08            sub 8               ; look up one square
144+  C2BB 4F               ld c,a              ; put a back in c
145+  C2BC CD 47 A8         call screen_getattraddressfromscreencoords ; get the attr address into de
146+  C2BF 62 6B            ld hl,de
147+  C2C1 36 46            ld (hl),70          ; load this square with the yellow colour
148+  C2C3              missiles_fall1:         ; hl at state
149+  C2C3 DD 23            inc ix
150+  C2C5 DD 23            inc ix
151+  C2C7 DD 23            inc ix              ; get to next missile
152+  C2C9 C1               pop bc
153+  C2CA 10 92            djnz missiles_fall0
154+  C2CC C9               ret
155+  C2CD              missiles_fall2:
156+  C2CD DD 36 02 00      ld (ix+2),0
157+  C2D1 C3 C3 C2         jp missiles_fall1   ; rejoin the loop
158+  C2D4
159+  C2D4              ;
160+  C2D4              ; Stores the updated rows associated with the missiles
161+  C2D4              ; Inputs:
162+  C2D4              ; bc - coords
163+  C2D4              ;
164+  C2D4              missiles_storeupdatedlines:
165+  C2D4 79               ld a,c                  ; get the missile block coords of current block
166+  C2D5 E6 F8            and 248                 ; find closest multiple of eight
167+  C2D7 0F               rrca
168+  C2D8 0F               rrca
169+  C2D9 0F               rrca                    ; divide by 8
170+  C2DA ED 5B 1C A7      ld de,(screen_offset)          ; load the screen offset, this is in rows
171+  C2DE 93               sub e
172+  C2DF F5               push af
173+  C2E0 CD CC A5         call buffer_marklineforupdate  ; store current row in updated lines
174+  C2E3 F1               pop af
175+  C2E4 3C               inc a
176+  C2E5 CD CC A5         call buffer_marklineforupdate  ; store line beneath
177+  C2E8 C9               ret
178+  C2E9
179+  C2E9              ;
180+  C2E9              ; Adds the missile to the structure that tracks falling missile
181+  C2E9              ; Inputs:
182+  C2E9              ; bc - coords of missile, c vert
183+  C2E9              missiles_addmissiletofalling:
184+  C2E9 C5               push bc             ; store the coords
185+  C2EA 11 B1 C1         ld de,missiles_falling
186+  C2ED 06 04            ld b,4              ; number of possible falling missiles
187+  C2EF              missiles_addmissiletofalling0:
188+  C2EF 13               inc de
189+  C2F0 13               inc de              ; move three along to get the state
190+  C2F1 1A               ld a,(de)           ; load the state
191+  C2F2 FE 00            cp 0                ; check if this is not falling
192+  C2F4 C2 05 C3         jp nz,missiles_addmissiletofalling1 ; continue the loop if not 0
193+  C2F7 3E 01            ld a,1
194+  C2F9 12               ld (de),a           ; set the state to falling
195+  C2FA 1B               dec de              ; move back coords
196+  C2FB C1               pop bc              ; get back coords
197+  C2FC 78               ld a,b
198+  C2FD 12               ld (de),a           ; store the vertical
199+  C2FE 1B               dec de
200+  C2FF 79               ld a,c
201+  C300 12               ld (de),a           ; store the horizontal
202+  C301 C5               push bc
203+  C302 C3 08 C3         jp missiles_addmissiletofalling2 ; done
204+  C305              missiles_addmissiletofalling1:
205+  C305 13               inc de              ; move memory along to next rock
206+  C306 10 E7            djnz missiles_addmissiletofalling0 ; try the next missile
207+  C308              missiles_addmissiletofalling2: ; done, return
208+  C308 C1               pop bc              ; to tidy up
209+  C309 C9               ret
# file closed: game/missiles.asm
 46   C30A
 47   C30A              ;===========================================================================
 48   C30A              ; main routine - the code execution starts here.
 49   C30A              ; Sets up the new interrupt routine, the memory
 50   C30A              ; banks and jumps to the start loop.
 51   C30A              ;===========================================================================
 52   C30A              main:
 53   C30A
 54   C30A                  ; Draw the title screen
 55   C30A              main_titlescreen:
 56   C30A CD 5E A9         call titlescreen_show
 57   C30D CD 7F B9         call player_init_gamestart
 58   C310
 59   C310              main_lifestart:
 60   C310
 61   C310 CD 9D B9         call player_init_lifestart
 62   C313
 63   C313 CD C2 AA         call lifescreen_draw        ; show the lives remaining screen
 64   C316
 65   C316 CD 00 80         call init_start
 66   C319 CD 37 A7         call screen_draw
 67   C31C CD 95 A6         call buffer_allbuffertoscreen
 68   C31F CD BD C1         call missiles_init
 69   C322 CD 40 BB         call ship_land              ; land the ship
 70   C325 CD 62 BC         call tank_init
 71   C328 CD 87 C1         call diamonds_init
 72   C32B
 73   C32B              mloop:
 74   C32B 76               halt
 75   C32C CD 60 C3         call main_loop_processing
 76   C32F
 77   C32F                  ;
 78   C32F                  ; Check if the player died
 79   C32F                  ;
 80   C32F 21 44 B9         ld hl,player+10
 81   C332 7E               ld a,(hl)                   ; check if the player died this frame
 82   C333 FE 01            cp 1
 83   C335 C2 4C C3         jp nz,mloop0
 84   C338 CD 04 BA         call player_died        ; do end of life housekeeping
 85   C33B 06 28            ld b,40
 86   C33D CD 82 80         call utilities_pauseforframes
 87   C340 21 43 B9         ld hl,player+9        ; check lives remaining
 88   C343 7E               ld a,(hl)
 89   C344 FE 00            cp 0
 90   C346 CA 88 C3         jp z,main_gameover   ; leave the loop if we're done
 91   C349 C3 10 C3         jp main_lifestart    ; otherwise, start a new life
 92   C34C              mloop0:
 93   C34C                  ;
 94   C34C                  ; Check if the player completed the level
 95   C34C                  ;
 96   C34C 21 47 B9         ld hl,player+13
 97   C34F 7E               ld a,(hl)
 98   C350 FE 01            cp 1
 99   C352 C2 2B C3         jp nz,mloop
100   C355 CD 0A BB         call player_checkforexit
101   C358 FE 01            cp 1                        ; look at return, if 1, level has been completed
102   C35A CA 8E C3         jp z,main_endlevel          ; jump to level transition screen
103   C35D C3 2B C3         jp mloop                ; start the loop again
104   C360
105   C360
106   C360              main_loop_processing:
107   C360
108   C360 CD 63 A6         call buffer_buffertoscreen  ; copy buffer to screen
109   C363 CD E3 A5         call buffer_clearlist       ; zero the updated lines list
110   C366 CD 49 B9         call player_getlocation     ; figure out where the player is
111   C369 CD 34 BA         call player_drawplayer      ; delete player
112   C36C CD B7 B4         call control_keyboard       ; check keyboard
113   C36F CD 34 BA         call player_drawplayer      ; draw player
114   C372 CD 91 BC         call tank_process           ; prcoess the tank
115   C375 CD 2B BB         call ship_process           ; proces the ship
116   C378 CD 8B BE         call rocks_processrocks     ; process falling rocks
117   C37B CD DC C1         call missiles_process       ; process missiles
118   C37E CD 66 C1         call diamonds_twinkle       ; make the diamonds twinkle
119   C381 CD FF BF         call scores_printscore      ; update the score on screen
120   C384 CD 21 B9         call game_incrementframe    ; increment the game frame
121   C387
122   C387 C9               ret
123   C388
124   C388              main_gameover:
125   C388 CD 15 AB         call gameover_draw          ; show the game over screen
126   C38B C3 0A C3         jp main_titlescreen         ; go back to title
127   C38E
128   C38E              main_endlevel:
129   C38E CD EA B9         call player_recordcurrentscore
130   C391 CD 03 AC         call endlevel_draw          ; show the end level screen
131   C394 C3 10 C3         jp main_lifestart           ; start a new life
132   C397
133   C397              ;===========================================================================
134   C397              ; Stack.
135   C397              ;===========================================================================
136   C397
137   C397              ; Stack: this area is reserved for the stack
138   C397              STACK_SIZE: equ 100    ; in words
139   C397
140   C397              ; Reserve stack space
141   C397 00 00            defw 0  ; WPMEM, 2
142   C399              stack_bottom:
143   C399 00 00 00...      defs    STACK_SIZE*2, 0
144   C461              stack_top:
145   C461 00 00            defw 0  ; WPMEM, 2
146   C463
147   C463                     SAVESNA "ThePit.sna", main
# file closed: main.asm
