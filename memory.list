# file opened: main.asm
  1   0000                  DEVICE ZXSPECTRUM48
  2   0000
  3   0000                  ORG $8000
  4   8000
  5   8000              ;===========================================================================
  6   8000              ; Persistent watchpoint.
  7   8000              ; Change WPMEMx (remove the 'x' from WPMEMx) below to activate.
  8   8000              ; If you do so the program will hit a breakpoint when it tries to
  9   8000              ; write to the first byte of the 3rd line.
 10   8000              ; When program breaks in the fill_memory sub routine please hover over hl
 11   8000              ; to see that it contains 0x5804 or COLOR_SCREEN+64.
 12   8000              ;===========================================================================
 13   8000
 14   8000              ; WPMEMx 0x5840, 1, w
 15   8000
 16   8000
 17   8000              ;===========================================================================
 18   8000              ; Include modules
 19   8000              ;===========================================================================
 20   8000                  include "init.asm"
# file opened: init.asm
  1+  8000              ;
  2+  8000              ; Set up at start up
  3+  8000              ;
  4+  8000              init_start:
  5+  8000              ; We want a black screen.
  6+  8000 CD 6B 0D         call $0D6B
  7+  8003 3E 47            ld a,71             ; white ink (7) on black paper (0),
  8+  8005                                      ; bright (64).
  9+  8005 32 8D 5C         ld (23693),a        ; set our screen colours.
 10+  8008 AF               xor a               ; quick way to load accumulator with zero.
 11+  8009 CD 9B 22         call 8859           ; set permanent border colours.
 12+  800C CD AF 0D         call 3503           ; ROM routine - clears screen, opens chan 2.
 13+  800F
 14+  800F C9               ret
 15+  8010
 16+  8010              ;
 17+  8010              ;   Start coord
 18+  8010              ;   vert c, horiz b
 19+  8010              start_coord:
 20+  8010 18 30            defb 24,48
 21+  8012
# file closed: init.asm
 21   8012                  include "utilities.asm"
# file opened: utilities.asm
  1+  8012              ; ##########################################################################
  2+  8012              ; Print a character
  3+  8012              ; Inputs:
  4+  8012              ; b - x coord
  5+  8012              ; c - y coord
  6+  8012              ; d - character
  7+  8012              ; e - colour
  8+  8012              ; ##########################################################################
  9+  8012              utilities_print_char:
 10+  8012 7B               ld a,e
 11+  8013 32 8F 5C         ld (23695),a        ; set our temporary screen colours.
 12+  8016 3E 16            ld a,22
 13+  8018 D7               rst 16              ; Calls the Sinclair PRINT AT routine
 14+  8019 78               ld a,b              ; Gets the X co-ordinate
 15+  801A 3D               dec a
 16+  801B D7               rst 16
 17+  801C 79               ld a,c              ; and the Y co-ordinate
 18+  801D D7               rst 16              ; So, essentially PRINT AT X,Y; like in BASIC
 19+  801E 7A               ld a,d              ; ASCII code for udg.
 20+  801F D7               rst 16              ; draw block.
 21+  8020 C9               ret
 22+  8021
 23+  8021
 24+  8021              ;Inputs:
 25+  8021              ;     DE and A are factors
 26+  8021              ;Outputs:
 27+  8021              ;     A is not changed
 28+  8021              ;     B is 0
 29+  8021              ;     C is not changed
 30+  8021              ;     DE is not changed
 31+  8021              ;     HL is the product
 32+  8021              ;Time:
 33+  8021              ;     342+6x
 34+  8021              ;
 35+  8021              utilities_multiply:
 36+  8021 06 08            ld b,8          ;7           7
 37+  8023 21 00 00         ld hl,0         ;10         10
 38+  8026 29               add hl,hl     ;11*8       88
 39+  8027 07               rlca          ;4*8        32
 40+  8028 30 01            jr nc,$+3     ;(12|18)*8  96+6x
 41+  802A 19                   add hl,de   ;--         --
 42+  802B 10 F9            djnz $-5      ;13*7+8     99
 43+  802D C9               ret             ;10         10
 44+  802E
 45+  802E              utilities_waitforkey:
 46+  802E 21 08 5C         ld hl,23560         ; LAST K system variable.
 47+  8031 36 00            ld (hl),0           ; put null value there.
 48+  8033              utilities_waitforkey0:
 49+  8033 7E               ld a,(hl)           ; new value of LAST K.
 50+  8034 FE 00            cp 0                ; is it still zero?
 51+  8036 28 FB            jr z,utilities_waitforkey0           ; yes, so no key pressed.
 52+  8038 C9               ret                 ; key was pressed.
 53+  8039
# file closed: utilities.asm
 22   8039                  include "strings.asm"
# file opened: strings.asm
  1+  8039              string_score1:
  2+  8039 04 00 53 43      defb 4,0,'SCORE1',255
  2+  803D 4F 52 45 31
  2+  8041 FF
  3+  8042              string_scorenumbers1:
  4+  8042 04 01 30 30      defb 4,1,'000000',255
  4+  8046 30 30 30 30
  4+  804A FF
  5+  804B              string_company:
  6+  804B 0C 00 43 45      defb 12,0,'CENTURI',255
  6+  804F 4E 54 55 52
  6+  8053 49 FF
  7+  8055              string_credits:
  8+  8055 0C 01 50 4C      defb 12,1,'PLAYER 1',255
  8+  8059 41 59 45 52
  8+  805D 20 31 FF
  9+  8060              string_score2:
 10+  8060 16 00 53 43      defb 22,0,'SCORE2',255
 10+  8064 4F 52 45 32
 10+  8068 FF
 11+  8069              string_scorenumbers2:
 12+  8069 16 01 30 30      defb 22,1,'000000',255
 12+  806D 30 30 30 30
 12+  8071 FF
 13+  8072              string_titlescreen_copyright:
 14+  8072 04 16 7F 20      defb 4,22, 127,' 1982 AW ZILEC ELC LTD',255
 14+  8076 31 39 38 32
 14+  807A 20 41 57 20
 14+  807E 5A 49 4C 45
 14+  8082 43 20 45 4C
 14+  8086 43 20 4C 54
 14+  808A 44 FF
 15+  808C
 16+  808C              ;
 17+  808C              ; Prints specified string
 18+  808C              ; Inputs:
 19+  808C              ; de: pointer to string
 20+  808C              ; bc: length of string
 21+  808C              ;
 22+  808C              ; Print String Data
 23+  808C              ; First two bytes of string contain X and Y char position, then the string
 24+  808C              ; Individual strings are terminated with 0xFE
 25+  808C              ; End of data is terminated with 0xFF
 26+  808C              ; HL: Address of string
 27+  808C              ;
 28+  808C 5E           string_print:           LD E,(HL)                       ; Fetch the X coordinate
 29+  808D 23                                   INC HL                          ; Increase HL to the next memory location
 30+  808E 56                                   LD D,(HL)                       ; Fetch the Y coordinate
 31+  808F 23                                   INC HL                          ; Increase HL to the next memory location
 32+  8090 CD A3 80                             CALL string_getcharaddress           ; Calculate the screen address (in DE)
 33+  8093 7E           string_print_0:         LD A,(HL)                       ; Fetch the character to print
 34+  8094 23                                   INC HL                          ; Increase HL to the next character
 35+  8095 FE FE                                CP 0xFE                         ; Compare with 0xFE
 36+  8097 28 F3                                JR Z,string_print               ; If it is equal to 0xFE then loop back to print next string
 37+  8099 D0                                   RET NC                          ; If it is greater or equal to (carry bit set) then
 38+  809A E5                                   PUSH HL                         ; Push HL on stack (Print_Char will not preserve HL)
 39+  809B CD B3 80                             CALL Print_Char                 ; Print the character
 40+  809E E1                                   POP HL                          ; Retrieve HL back off the stack
 41+  809F 1C                                   INC E                           ; Go to the next screen address
 42+  80A0 18 F1                                JR string_print_0               ; Loop back to print next character
 43+  80A2 C9                                   RET
 44+  80A3
 45+  80A3              ; Get screen address
 46+  80A3              ; D = Y character position
 47+  80A3              ; E = X character position
 48+  80A3              ; Returns address in DE
 49+  80A3              ;
 50+  80A3 7A           string_getcharaddress:       LD A,D
 51+  80A4 E6 07                                AND %00000111
 52+  80A6 1F                                   RRA
 53+  80A7 1F                                   RRA
 54+  80A8 1F                                   RRA
 55+  80A9 1F                                   RRA
 56+  80AA B3                                   OR E
 57+  80AB 5F                                   LD E,A
 58+  80AC 7A                                   LD A,D
 59+  80AD E6 18                                AND %00011000
 60+  80AF F6 40                                OR %01000000
 61+  80B1 57                                   LD D,A
 62+  80B2 C9                                   RET                             ; Returns screen address in DE
 63+  80B3
 64+  80B3              ; Print a single character out
 65+  80B3              ; A:  Character to print
 66+  80B3              ; DE: Screen address to print character at
 67+  80B3              ;
 68+  80B3 21 00 3C     Print_Char:             LD HL,0x3C00                    ; Address of character set table in ROM
 69+  80B6 06 00                                LD B,0                          ; Set BC to A
 70+  80B8 4F                                   LD C,A
 71+  80B9 E6 FF                                AND 0xFF                        ; Clear the carry bit
 72+  80BB CB 11                                RL C                            ; Multiply BC by 8 (shift left 3 times)
 73+  80BD CB 10                                RL B
 74+  80BF CB 11                                RL C
 75+  80C1 CB 10                                RL B
 76+  80C3 CB 11                                RL C
 77+  80C5 CB 10                                RL B
 78+  80C7 09                                   ADD HL,BC                       ; Get the character address in HL
 79+  80C8 0E 08                                LD C,8                          ; Loop counter
 80+  80CA D5                                   PUSH DE
 81+  80CB 7E           Print_Char_1:           LD A,(HL)                       ; Get the byte from the ROM into A
 82+  80CC 12                                   LD (DE),A                       ; Stick A onto the screen
 83+  80CD 14                                   INC D                           ; Goto next line on screen
 84+  80CE 2C                                   INC L                           ; Goto next byte of character
 85+  80CF 0D                                   DEC C                           ; Decrease the loop counter
 86+  80D0 20 F9                                JR NZ,Print_Char_1              ; Loop around whilst it is Not Zero (NZ)
 87+  80D2 D1                                   POP DE
 88+  80D3 C9                                   RET                             ; Return from the subroutine
# file closed: strings.asm
 23   80D4                  include "screen\screen.asm"
# file opened: screen/screen.asm
  1+  80D4              screen_buffer:
  2+  80D4 00 00 00...      defs 7424                   ; area reserved for screen
  3+  9DD4
  4+  9DD4              screen_attr_buffer:
  5+  9DD4 00 00 00...      defs 928                    ; attrs buffer area
  6+  A174
  7+  A174              screen_offset:
  8+  A174 00               defb 0                      ; offset from top of screen in lines
  9+  A175
 10+  A175              screen_tmp:
 11+  A175 00               defb 0                      ; temporary memory
 12+  A176
 13+  A176              ;
 14+  A176              ; Copies the buffer to the screen. Use stack.
 15+  A176              ; Inputs: none
 16+  A176              ;
 17+  A176              screen_buffertoscreen:
 18+  A176 3A 74 A1         ld a,(screen_offset)          ; load the screen offset, this is in rows, want it *256
 19+  A179 11 00 01         ld de,256
 20+  A17C CD 21 80         call utilities_multiply
 21+  A17F 54 5D            ld de,hl
 22+  A181 21 D4 80         ld hl,screen_buffer
 23+  A184 19               add hl,de                   ; add the offset
 24+  A185 ED 73 F1 A1      ld (screen_buffertoscreen1+1),sp ; this is some self-modifying code; stores the stack pointer in an ld sp,nn instruction at the end
 25+  A189 D9               exx
 26+  A18A 21 50 40         ld hl,16384+80              ; where the actual screen is, but as we're using the stack it's the right hand side of the buffer (16+32+32)
 27+  A18D              screen_buffertoscreen0:
 28+  A18D D9               exx                         ; hl is now buffer
 29+  A18E F9               ld sp,hl                    ; do first sixteen for left hand side
 30+  A18F F1               pop af
 31+  A190 C1               pop bc
 32+  A191 D1               pop de
 33+  A192 DD E1            pop ix
 34+  A194 D9               exx                         ; hl is now screen
 35+  A195 08               ex af,af'
 36+  A196 F1               pop af
 37+  A197 C1               pop bc
 38+  A198 D1               pop de
 39+  A199 FD E1            pop iy
 40+  A19B F9               ld sp,hl
 41+  A19C FD E5            push iy
 42+  A19E D5               push de
 43+  A19F C5               push bc
 44+  A1A0 F5               push af
 45+  A1A1 08               ex af,af'
 46+  A1A2 D9               exx                         ; hl is now buffer
 47+  A1A3 DD E5            push ix
 48+  A1A5 D5               push de
 49+  A1A6 C5               push bc
 50+  A1A7 F5               push af
 51+  A1A8 1E 10            ld e,16                    ; do another sixteen for right hand side
 52+  A1AA 16 00            ld d,0
 53+  A1AC 19               add hl,de
 54+  A1AD F9               ld sp,hl
 55+  A1AE F1               pop af
 56+  A1AF C1               pop bc
 57+  A1B0 D1               pop de
 58+  A1B1 DD E1            pop ix
 59+  A1B3 D9               exx                         ; hl is now screen
 60+  A1B4 08               ex af,af'
 61+  A1B5 1E 10            ld e,16
 62+  A1B7 16 00            ld d,0
 63+  A1B9 19               add hl,de
 64+  A1BA F1               pop af
 65+  A1BB C1               pop bc
 66+  A1BC D1               pop de
 67+  A1BD FD E1            pop iy
 68+  A1BF F9               ld sp,hl
 69+  A1C0 FD E5            push iy
 70+  A1C2 D5               push de
 71+  A1C3 C5               push bc
 72+  A1C4 F5               push af
 73+  A1C5 08               ex af,af'
 74+  A1C6 D9               exx                         ; hl is now buffer
 75+  A1C7 DD E5            push ix
 76+  A1C9 D5               push de
 77+  A1CA C5               push bc
 78+  A1CB F5               push af
 79+  A1CC 1E 10            ld e,16
 80+  A1CE 16 00            ld d,0
 81+  A1D0 19               add hl,de
 82+  A1D1 D9               exx                         ; hl is now screen
 83+  A1D2 1E 10            ld e,16
 84+  A1D4 16 00            ld d,0
 85+  A1D6 ED 52            sbc hl,de
 86+  A1D8 24               inc h
 87+  A1D9 7C               ld a,h
 88+  A1DA E6 07            and 0x07                    ; check if this is multiple of 8, if so, end of cell line
 89+  A1DC 20 AF            jr nz,screen_buffertoscreen0 ; next line in cell
 90+  A1DE 7C               ld a,h
 91+  A1DF D6 08            sub 8
 92+  A1E1 67               ld h,a
 93+  A1E2 7D               ld a,l
 94+  A1E3 C6 20            add a,32
 95+  A1E5 6F               ld l,a
 96+  A1E6 30 A5            jr nc,screen_buffertoscreen0
 97+  A1E8 7C               ld a,h
 98+  A1E9 C6 08            add a,8
 99+  A1EB 67               ld h,a
100+  A1EC FE 58            cp 0x58
101+  A1EE 20 9D            jr nz,screen_buffertoscreen0
102+  A1F0              screen_buffertoscreen1:
103+  A1F0 31 00 00         ld sp,0
104+  A1F3 D9               exx
105+  A1F4 CD F8 A1         call screen_buffertoattrs
106+  A1F7 C9               ret
107+  A1F8
108+  A1F8              screen_buffertoattrs:
109+  A1F8 3A 74 A1         ld a,(screen_offset)            ; get the screen offset in rows, so want *32
110+  A1FB 11 20 00         ld de,32
111+  A1FE CD 21 80         call utilities_multiply
112+  A201 54 5D            ld de,hl
113+  A203 21 D4 9D         ld hl,screen_attr_buffer
114+  A206 19               add hl,de                       ; add the offset
115+  A207 11 40 58         ld de,22528+64                  ; add 32x2 to the attr memory address to account for the top two rows
116+  A20A 01 A0 03         ld bc,928
117+  A20D ED B0            ldir
118+  A20F C9               ret
119+  A210
120+  A210              screen_setscorecolours:
121+  A210 21 52 A9         ld hl,score_colours
122+  A213 11 00 58         ld de,22528                     ; attrs here
123+  A216 01 40 00         ld bc,64
124+  A219 ED B0            ldir
125+  A21B C9               ret
126+  A21C
127+  A21C
128+  A21C              ; Draw the screen
129+  A21C              ; Inputs:
130+  A21C              ; none
131+  A21C              ; Notes:
132+  A21C              ; The value held at screen_offset tells the screen how many rows to scroll down. Set to five to bottom out.
133+  A21C              screen_draw:
134+  A21C                  ;call clear_screen
135+  A21C 0E 00            ld c,0                      ; horiz
136+  A21E 06 00            ld b,0                      ; vert, 0 at top
137+  A220 DD 21 CF A4      ld ix,level01               ; point ix at level data
138+  A224 FD 21 D4 9D      ld iy,screen_attr_buffer    ; point iy at attr data
139+  A228              screen_draw0:
140+  A228 DD 7E 00         ld a,(ix)                   ; load the block number
141+  A22B C5               push bc                     ; store bc, contains loop count
142+  A22C CD 48 A3         call screen_getattr         ; get the memory location for this cell's attr into hl
143+  A22F 7E               ld a,(hl)                   ; get the attr value at the address
144+  A230 FD 77 00         ld (iy),a                   ; load the attr into memory
145+  A233 DD 7E 00         ld a,(ix)                   ; load the block number
146+  A236 CD 3D A3         call screen_getblock        ; get the block data into hl
147+  A239 CD 23 A3         call screen_showchar        ; show this character here
148+  A23C C1               pop bc                      ; get the loop counter back
149+  A23D DD 23            inc ix                      ; increment level location
150+  A23F FD 23            inc iy                      ; increment attr location
151+  A241 0C               inc c                       ; increment horiz
152+  A242 79               ld a,c
153+  A243 FE 20            cp 32                       ; check if horiz has reach edge of screen
154+  A245 C2 28 A2         jp nz,screen_draw0          ; if not, loop
155+  A248 0E 00            ld c,0                      ; if so, reset horiz
156+  A24A 04               inc b                       ; increment vertical
157+  A24B 78               ld a,b
158+  A24C FE 1D            cp 29                       ; check if at bottom
159+  A24E C2 28 A2         jp nz,screen_draw0          ; if not, loop
160+  A251 21 75 A1         ld hl, screen_tmp
161+  A254 36 09            ld (hl),9                   ; load the block number into memory
162+  A256 DD 21 6F A8      ld ix,level01rocks          ; rock memory
163+  A25A CD 95 A2         call screen_initobjects     ; draw rocks
164+  A25D 21 75 A1         ld hl, screen_tmp
165+  A260 36 0C            ld (hl),12                  ; load the block number into memory
166+  A262 DD 21 09 A9      ld ix,level01missiles       ; missile memory
167+  A266 CD 95 A2         call screen_initobjects     ; draw missiles
168+  A269 CD 6D A2         call screen_setuptext       ; draws text on the screen
169+  A26C C9               ret
170+  A26D
171+  A26D              ;
172+  A26D              ; Sets up text on the screen
173+  A26D              ;
174+  A26D              screen_setuptext:
175+  A26D 21 39 80         ld hl, string_score1
176+  A270 CD 8C 80         call string_print
177+  A273 21 42 80         ld hl, string_scorenumbers1
178+  A276 CD 8C 80         call string_print
179+  A279 21 4B 80         ld hl, string_company
180+  A27C CD 8C 80         call string_print
181+  A27F 21 60 80         ld hl, string_score2
182+  A282 CD 8C 80         call string_print
183+  A285 21 69 80         ld hl, string_scorenumbers2
184+  A288 CD 8C 80         call string_print
185+  A28B 21 55 80         ld hl, string_credits
186+  A28E CD 8C 80         call string_print
187+  A291 CD 10 A2         call screen_setscorecolours
188+  A294 C9               ret
189+  A295              ;
190+  A295              ; Draw initial object positions
191+  A295              ; Inputs:
192+  A295              ; ix - memory location of objects
193+  A295              ; a - graphic
194+  A295              screen_initobjects:
195+  A295 DD 4E 00         ld c,(ix)                   ; get the horiz coord
196+  A298 79               ld a,c
197+  A299 FE FF            cp 255
198+  A29B CA C0 A2         jp z,screen_initobjects2
199+  A29E DD 23            inc ix                      ; move to next
200+  A2A0 DD 46 00         ld b,(ix)                   ; get the vert coord
201+  A2A3 DD 23            inc ix
202+  A2A5 CD D2 A2         call screen_getcellattradress ; get the memory address of b,c attr into de
203+  A2A8 D5               push de
204+  A2A9 3A 75 A1         ld a,(screen_tmp)                  ; get the block number back
205+  A2AC CD 48 A3         call screen_getattr         ; get the memory location for this cell's attr into hl
206+  A2AF D1               pop de
207+  A2B0 7E               ld a,(hl)                   ; get the attr value at the address
208+  A2B1 12               ld (de),a                   ; load the attr into memory
209+  A2B2 3A 75 A1         ld a,(screen_tmp)                  ; get the block number back
210+  A2B5 CD 3D A3         call screen_getblock        ; get the block data into hl
211+  A2B8 CD 23 A3         call screen_showchar        ; show this character here
212+  A2BB
213+  A2BB              screen_initobjects1:
214+  A2BB DD 23            inc ix                      ; move past state
215+  A2BD C3 95 A2         jp screen_initobjects
216+  A2C0              screen_initobjects2:
217+  A2C0 C9               ret
218+  A2C1
219+  A2C1
220+  A2C1              ;
221+  A2C1              ; Return character cell address offset of block at (b, c) ready for addition to screen  memory.
222+  A2C1              ; Inputs:
223+  A2C1              ; bc: coords
224+  A2C1              ; Outputs:
225+  A2C1              ; de: memory location
226+  A2C1              ;
227+  A2C1              screen_getcelladdress:
228+  A2C1 78               ld a,b      ; vertical position.
229+  A2C2 E6 18            and 24      ; which segment, 0, 1 or 2?
230+  A2C4 C6 40            add a,64    ; 64*256 = 16384, Spectrum's screen memory.
231+  A2C6 57               ld d,a      ; this is our high byte.
232+  A2C7 78               ld a,b      ; what was that vertical position again?
233+  A2C8 E6 07            and 7       ; which row within segment?
234+  A2CA 0F               rrca        ; multiply row by 32.
235+  A2CB 0F               rrca
236+  A2CC 0F               rrca
237+  A2CD 5F               ld e,a      ; low byte.
238+  A2CE 79               ld a,c      ; add on y coordinate.
239+  A2CF 83               add a,e     ; mix with low byte.
240+  A2D0 5F               ld e,a      ; address of screen position in de.
241+  A2D1 C9               ret
242+  A2D2
243+  A2D2              ;
244+  A2D2              ; Calculate buffer address of attribute for character at (b, c).
245+  A2D2              ; Inputs:
246+  A2D2              ; bc: coords
247+  A2D2              ; Outputs:
248+  A2D2              ; de: memory location
249+  A2D2              ;
250+  A2D2              screen_getcellattradress:
251+  A2D2 11 D4 9D         ld de,screen_attr_buffer ; memory is at base + horiz (c) + vert*32 (b)
252+  A2D5 69               ld l,c      ; x position.
253+  A2D6 26 00            ld h,0      ; 0 h
254+  A2D8 19               add hl,de
255+  A2D9 54 5D            ld de,hl    ; horiz done
256+  A2DB 78               ld a,b      ; do vert
257+  A2DC D5               push de
258+  A2DD C5               push bc
259+  A2DE 11 20 00         ld de,32
260+  A2E1 CD 21 80         call utilities_multiply
261+  A2E4 C1               pop bc
262+  A2E5 D1               pop de
263+  A2E6 19               add hl,de
264+  A2E7 54 5D            ld de,hl    ; vert done
265+  A2E9 C9               ret
266+  A2EA
267+  A2EA              ;
268+  A2EA              ; Calculate buffer address of attribute for character at (b, c).
269+  A2EA              ; Inputs:
270+  A2EA              ; bc: coords
271+  A2EA              ; Outputs:
272+  A2EA              ; de: memory location
273+  A2EA              ;
274+  A2EA              screen_getscreenattradress:
275+  A2EA 11 00 58         ld de,22528 ; memory is at base + horiz (c) + vert*32 (b)
276+  A2ED 69               ld l,c      ; x position.
277+  A2EE 26 00            ld h,0      ; 0 h
278+  A2F0 19               add hl,de
279+  A2F1 54 5D            ld de,hl    ; horiz done
280+  A2F3 78               ld a,b      ; do vert
281+  A2F4 D5               push de
282+  A2F5 C5               push bc
283+  A2F6 11 20 00         ld de,32
284+  A2F9 CD 21 80         call utilities_multiply
285+  A2FC C1               pop bc
286+  A2FD D1               pop de
287+  A2FE 19               add hl,de
288+  A2FF 54 5D            ld de,hl    ; vert done
289+  A301 C9               ret
290+  A302
291+  A302              ;
292+  A302              ; Gets the attr memory location for a screen coord
293+  A302              ; Will overwrite bc
294+  A302              ; Inputs:
295+  A302              ; bc - screen coords
296+  A302              ; Outputs:
297+  A302              ; de - memory location
298+  A302              ; bc - character coords
299+  A302              ;
300+  A302              screen_getattraddressfromscreencoords:
301+  A302 78               ld a,b                          ; get the player block coords of current block
302+  A303 E6 F8            and 248                         ; find closest multiple of eight
303+  A305 0F               rrca
304+  A306 0F               rrca
305+  A307 0F               rrca                ; divide by 8
306+  A308 47               ld b,a
307+  A309 79               ld a,c
308+  A30A 48               ld c,b                         ; swap b and c
309+  A30B E6 F8            and 248
310+  A30D 0F               rrca
311+  A30E 0F               rrca
312+  A30F 0F               rrca                ; divide by 8
313+  A310 47               ld b,a
314+  A311 CD D2 A2         call screen_getcellattradress   ; work out memory location of current block attributes, memory in de
315+  A314 C9               ret
316+  A315
317+  A315              ;
318+  A315              ; Get buffer address for a character at b,c - b vert
319+  A315              ; Buffer memory is stored as sequential block
320+  A315              ; Char at 0,0 is stored 0,32,64...; 0,1 is stored at 1,33,65
321+  A315              ; Inputs:
322+  A315              ; bc - coords
323+  A315              ; Outputs:
324+  A315              ; de - memory location of first byte
325+  A315              screen_getbufferaddress:
326+  A315 21 D4 80         ld hl, screen_buffer    ; first get screen buffer start
327+  A318 50               ld d,b                  ; then work out vertical offset
328+  A319 1E 00            ld e,0                  ; mult by 256, low byte becomes high byte, de now holds result
329+  A31B 19               add hl,de               ; add to base
330+  A31C 59               ld e,c                  ; then add horizontal offset (c)
331+  A31D 16 00            ld d,0
332+  A31F 19               add hl,de               ; add to base
333+  A320 54 5D            ld de,hl
334+  A322 C9               ret
335+  A323
336+  A323              ;
337+  A323              ; Display character hl at (b, c) to buffer.
338+  A323              ; Stored sequentially
339+  A323              ; Inputs:
340+  A323              ; hl: block address
341+  A323              ; bc: coords
342+  A323              ;
343+  A323              screen_showchar:
344+  A323 3E 00            ld a,0
345+  A325 E5               push hl
346+  A326 CD 15 A3         call screen_getbufferaddress ; get the current screen buffer pointer
347+  A329 E1               pop hl
348+  A32A 06 08            ld b,8              ; number of pixels high.
349+  A32C              screen_showchar0:
350+  A32C 7E               ld a,(hl)           ; source graphic.
351+  A32D 12               ld (de),a           ; transfer to screen.
352+  A32E 23               inc hl              ; next piece of data.
353+  A32F E5               push hl             ; store hl
354+  A330 62 6B            ld hl,de            ; put de in hl
355+  A332 1E 20            ld e,32            ; inc memory by 32, so load 32 into de
356+  A334 16 00            ld d,0
357+  A336 19               add hl,de              ; add de to hl
358+  A337 54 5D            ld de,hl            ; load back to de
359+  A339 E1               pop hl              ; restore hl
360+  A33A
361+  A33A 10 F0            djnz screen_showchar0 ; repeat
362+  A33C C9               ret
363+  A33D
364+  A33D
365+  A33D              ;
366+  A33D              ; Get cell graphic.
367+  A33D              ; Inputs:
368+  A33D              ; a: block
369+  A33D              ; Outputs:
370+  A33D              ; hl: memory
371+  A33D              ;
372+  A33D              screen_getblock:
373+  A33D 07               rlca                        ; multiply block number by eight.
374+  A33E 07               rlca
375+  A33F 07               rlca
376+  A340 5F               ld e,a                      ; displacement to graphic address.
377+  A341 16 00            ld d,0                      ; no high byte.
378+  A343 21 92 A9         ld hl,sprites               ; address of character blocks.
379+  A346 19               add hl,de                   ; point to block.
380+  A347 C9               ret
381+  A348
382+  A348              ;
383+  A348              ; Get cell attribute.
384+  A348              ; Inputs:
385+  A348              ; a: block
386+  A348              ; Outputs:
387+  A348              ; hl: memory
388+  A348              ;
389+  A348              screen_getattr:
390+  A348 5F               ld e,a                      ; displacement to attribute address.
391+  A349 16 00            ld d,0                      ; no high byte.
392+  A34B 21 FA A9         ld hl,sprite_attrs          ; address of block attributes.
393+  A34E 19               add hl,de                   ; point to attribute.
394+  A34F C9               ret
395+  A350
# file closed: screen/screen.asm
 24   A350                  include "screen\sprites.asm"
# file opened: screen/sprites.asm
  1+  A350              ;
  2+  A350              ; This is the sprite routine and expects coordinates in (c ,b) form,
  3+  A350              ; where c is the vertical coord from the top of the screen (0-176), and
  4+  A350              ; b is the horizontal coord from the left of the screen (0 to 240).
  5+  A350              ; Sprite data is stored as you'd expect in its unshifted form as this
  6+  A350              ; routine takes care of all the shifting itself. This means that sprite
  7+  A350              ; handling isn't particularly fast but the graphics only take 1/8th of the
  8+  A350              ; space they would require in pre-shifted form.
  9+  A350              ; Inputs:
 10+  A350              ; hl - sprite data
 11+  A350              ; bc - screen coords
 12+  A350              ;
 13+  A350              sprites_drawsprite7:
 14+  A350 EE 07            xor 7               ; complement last 3 bits.
 15+  A352 3C               inc a               ; add one for luck!
 16+  A353              sprites_drawsprite3:
 17+  A353 CB 11            rl c                ; ...into middle byte...
 18+  A355 CB 12            rl d                ; ...and finally into left character cell.
 19+  A357 3D               dec a               ; count shifts we've done.
 20+  A358 20 F9            jr nz,sprites_drawsprite3 ; return until all shifts complete.
 21+  A35A                                      ; Line of sprite image is now in e + c + d, we need it in form c + d + e.
 22+  A35A 79               ld a,c              ; left edge of image is currently in e.
 23+  A35B 4A               ld c,d              ; put right edge there instead.
 24+  A35C 57               ld d,a              ; and the left edge back into c.
 25+  A35D 18 25            jr sprites_drawsprite0   ; we've done the switch so transfer to screen.
 26+  A35F              sprites_drawsprite:
 27+  A35F ED 43 C4 A3      ld (dispx),bc       ; store coords in dispx for now.
 28+  A363 E5               push hl
 29+  A364 CD A2 A3         call sprites_scadd  ; calculate screen address.
 30+  A367 E1               pop hl
 31+  A368 3E 08            ld a,8              ; height of sprite in pixels.
 32+  A36A              sprites_drawsprite1:
 33+  A36A 08               ex af,af'           ; store loop counter.
 34+  A36B D5               push de             ; store screen address.
 35+  A36C 4E               ld c,(hl)           ; first sprite graphic.
 36+  A36D 23               inc hl              ; increment poiinter to sprite data.
 37+  A36E 22 C6 A3         ld (sprtmp),hl      ; store it for later.
 38+  A371 16 00            ld d,0              ; blank right byte for now.
 39+  A373 78               ld a,b              ; b holds y position.
 40+  A374 E6 07            and 7               ; how are we straddling character cells?
 41+  A376 28 0C            jr z,sprites_drawsprite0 ; we're not straddling them, don't bother shifting.
 42+  A378 FE 05            cp 5                ; 5 or more right shifts needed?
 43+  A37A 30 D4            jr nc,sprites_drawsprite7 ; yes, shift from left as it's quicker.
 44+  A37C A7               and a               ; oops, carry flag is set so clear it.
 45+  A37D              sprites_drawsprite2:
 46+  A37D CB 19            rr c                ; rotate left byte right...
 47+  A37F CB 1A            rr d                ; ...into right byte.
 48+  A381 3D               dec a               ; one less shift to do.
 49+  A382 20 F9            jr nz,sprites_drawsprite2 ; return until all shifts complete.
 50+  A384              sprites_drawsprite0:
 51+  A384 E1               pop hl              ; pop screen address from stack.
 52+  A385 7E               ld a,(hl)           ; what's there already.
 53+  A386 A9               xor c               ; merge in image data.
 54+  A387 77               ld (hl),a           ; place onto screen.
 55+  A388 23               inc hl
 56+  A389 7E               ld a,(hl)           ; what's already there.
 57+  A38A AA               xor d               ; right edge of sprite image data.
 58+  A38B 77               ld (hl),a           ; plonk it on screen.
 59+  A38C 3A C4 A3         ld a,(dispx)        ; vertical coordinate.
 60+  A38F 3C               inc a               ; next line down.
 61+  A390 32 C4 A3         ld (dispx),a        ; store new position.
 62+  A393 2B               dec hl
 63+  A394 11 20 00         ld de,32            ; add 32 to get to the next row
 64+  A397 19               add hl,de           ; add 32
 65+  A398              sprites_drawsprite6:
 66+  A398 EB               ex de,hl            ; screen address in de.
 67+  A399 2A C6 A3         ld hl,(sprtmp)      ; restore graphic address.
 68+  A39C 08               ex af,af'           ; restore loop counter.
 69+  A39D 3D               dec a               ; decrement it.
 70+  A39E C2 6A A3         jp nz,sprites_drawsprite1 ; not reached bottom of sprite yet to repeat.
 71+  A3A1 C9               ret                 ; job done.
 72+  A3A2
 73+  A3A2              ;
 74+  A3A2              ; This routine returns a buffer address for (c, b) in de (c vert).
 75+  A3A2              ; For example: 0,0 will be at memory offset 0
 76+  A3A2              ; 1,0 (1 down) will be at memory offset 1
 77+  A3A2              ; 0,7 will be at memory offset 0
 78+  A3A2              ; 9,1 will be at memory offset 8+1
 79+  A3A2              ; 8,0 will be at memory offset 256
 80+  A3A2              ; 9,0 will be at memory offset 257
 81+  A3A2              ; Inputs:
 82+  A3A2              ; de - coords
 83+  A3A2              ;
 84+  A3A2              sprites_scadd:
 85+  A3A2 79               ld a,c               ; calculate vertical offset
 86+  A3A3 E6 F8            and 248             ;  to get nearest multiple of 8
 87+  A3A5 0F               rrca
 88+  A3A6 0F               rrca
 89+  A3A7 0F               rrca                ; divide by 8
 90+  A3A8 67               ld h,a
 91+  A3A9 78               ld a,b               ; calculate horizontal offset
 92+  A3AA E6 F8            and 248             ;  to get nearest multiple of 8
 93+  A3AC 0F               rrca
 94+  A3AD 0F               rrca
 95+  A3AE 0F               rrca                ; divide by 8
 96+  A3AF 6F               ld l,a
 97+  A3B0 C5               push bc             ; store the screen coords
 98+  A3B1 44 4D            ld bc,hl            ; load bc with the character coords
 99+  A3B3 CD 15 A3         call screen_getbufferaddress
100+  A3B6 C1               pop bc              ; get back screen coords, de is now memory of character
101+  A3B7 79               ld a,c              ; now add the vertical within the cell
102+  A3B8 E6 07            and 7
103+  A3BA 0F               rrca                ; multiply by 32.
104+  A3BB 0F               rrca
105+  A3BC 0F               rrca
106+  A3BD 6F               ld l,a
107+  A3BE 26 00            ld h,0
108+  A3C0 19               add hl,de
109+  A3C1 54 5D            ld de,hl
110+  A3C3 C9               ret
111+  A3C4
112+  A3C4 00           dispx   defb 0           ; general-use coordinates.
113+  A3C5 00           dispy   defb 0
114+  A3C6 00           sprtmp  defb 0           ; sprite temporary address.
115+  A3C7
# file closed: screen/sprites.asm
 25   A3C7                  include "screen\titlescreen.asm"
# file opened: screen/titlescreen.asm
  1+  A3C7              ;
  2+  A3C7              ; Draws the title screen
  3+  A3C7              ;
  4+  A3C7              titlescreen_show:
  5+  A3C7 CD ED A3         call titlescreen_init
  6+  A3CA CD D1 A3         call titlescreen_drawtitle
  7+  A3CD CD 2E 80         call utilities_waitforkey   ; wait for keypress
  8+  A3D0 C9               ret
  9+  A3D1
 10+  A3D1              ;
 11+  A3D1              ; Draws the iconic logo
 12+  A3D1              ;
 13+  A3D1              titlescreen_drawtitle:
 14+  A3D1 06 66            ld b,102              ; number of points
 15+  A3D3 DD 21 03 A4      ld ix,titlescreen_logo_data
 16+  A3D7              titlescreen_drawtitle0:
 17+  A3D7 C5               push bc
 18+  A3D8 DD 4E 00         ld c,(ix)                   ; got horiz
 19+  A3DB DD 23            inc ix
 20+  A3DD DD 46 00         ld b,(ix)                   ; got vert
 21+  A3E0 DD 23            inc ix
 22+  A3E2 CD EA A2         call screen_getscreenattradress ; memory in de
 23+  A3E5 13               inc de                      ; slide one to the right, since I'm too lazy to change the data
 24+  A3E6 3E 13            ld a,19
 25+  A3E8 12               ld (de),a
 26+  A3E9 C1               pop bc
 27+  A3EA 10 EB            djnz titlescreen_drawtitle0 ; loop if we're not at the end
 28+  A3EC C9               ret
 29+  A3ED
 30+  A3ED              ;
 31+  A3ED              ; Initialises the screen
 32+  A3ED              ;
 33+  A3ED              titlescreen_init:
 34+  A3ED              ; We want a black screen.
 35+  A3ED CD 6B 0D         call $0D6B
 36+  A3F0 3E 0B            ld a,11             ; magenta ink (7) on blue paper (0),
 37+  A3F2                                      ; bright (64).
 38+  A3F2 32 8D 5C         ld (23693),a        ; set our screen colours.
 39+  A3F5 3E 01            ld a,1              ; 2 is the code for red.
 40+  A3F7 D3 FE            out (254),a         ; write to port 254.
 41+  A3F9 CD AF 0D         call 3503           ; ROM routine - clears screen, opens chan 2.
 42+  A3FC
 43+  A3FC 21 72 80         ld hl,string_titlescreen_copyright
 44+  A3FF CD 8C 80         call string_print
 45+  A402
 46+  A402 C9               ret
 47+  A403
 48+  A403              ;
 49+  A403              ; Horiz, vert
 50+  A403              ;
 51+  A403              titlescreen_logo_data:
 52+  A403 08 00 09 00      defb 8,0,9,0,10,0,12,0,15,0,17,0,18,0,19,0
 52+  A407 0A 00 0C 00
 52+  A40B 0F 00 11 00
 52+  A40F 12 00 13 00
 53+  A413 09 01 0C 01      defb 9,1,12,1,15,1,17,1
 53+  A417 0F 01 11 01
 54+  A41B 09 02 0C 02      defb 9,2,12,2,13,2,14,2,15,2,17,2,18,2,19,2
 54+  A41F 0D 02 0E 02
 54+  A423 0F 02 11 02
 54+  A427 12 02 13 02
 55+  A42B 09 03 0C 03      defb 9,3,12,3,15,3,17,3
 55+  A42F 0F 03 11 03
 56+  A433 09 04 0C 04      defb 9,4,12,4,15,4,17,4,18,4,19,4
 56+  A437 0F 04 11 04
 56+  A43B 12 04 13 04
 57+  A43F 00 06 01 06      defb 0,6,1,6,2,6,3,6,4,6,5,6,6,6,7,6,8,6,9,6,10,6,11,6
 57+  A443 02 06 03 06
 57+  A447 04 06 05 06
 57+  A44B 06 06 07 06
 57+  A44F 08 06 09 06
 57+  A453 0A 06 0B 06
 58+  A457 10 06 11 06      defb 16,6,17,6,18,6,19,6,20,6,21,6,22,6,23,6,24,6,25,6,26,6,27,6
 58+  A45B 12 06 13 06
 58+  A45F 14 06 15 06
 58+  A463 16 06 17 06
 58+  A467 18 06 19 06
 58+  A46B 1A 06 1B 06
 59+  A46F 02 07 02 08      defb 2,7,2,8,2,9,2,10,2,11,2,12,2,13,2,14,2,15,2,16,2,17,2,18,2,19,2,20
 59+  A473 02 09 02 0A
 59+  A477 02 0B 02 0C
 59+  A47B 02 0D 02 0E
 59+  A47F 02 0F 02 10
 59+  A483 02 11 02 12
 59+  A487 02 13 02 14
 60+  A48B 19 07 19 08      defb 25,7,25,8,25,9,25,10,25,11,25,12,25,13,25,14,25,15,25,16,25,17,25,18,25,19,25,20
 60+  A48F 19 09 19 0A
 60+  A493 19 0B 19 0C
 60+  A497 19 0D 19 0E
 60+  A49B 19 0F 19 10
 60+  A49F 19 11 19 12
 60+  A4A3 19 13 19 14
 61+  A4A7 03 0B 04 0B      defb 3,11,4,11,5,11,6,11,7,11,8,11,9,11,10,11,11,11
 61+  A4AB 05 0B 06 0B
 61+  A4AF 07 0B 08 0B
 61+  A4B3 09 0B 0A 0B
 61+  A4B7 0B 0B
 62+  A4B9 0B 07 0B 08      defb 11,7,11,8,11,9,11,10
 62+  A4BD 0B 09 0B 0A
 63+  A4C1 10 0D 10 0F      defb 16,13,16,15,16,16,16,17,16,18,16,19,16,20
 63+  A4C5 10 10 10 11
 63+  A4C9 10 12 10 13
 63+  A4CD 10 14
 64+  A4CF
# file closed: screen/titlescreen.asm
 26   A4CF
 27   A4CF                  include "leveldata\level01.asm"
# file opened: leveldata/level01.asm
  1+  A4CF              ; ###############################################################
  2+  A4CF              ; Data for level 1
  3+  A4CF              ; ###############################################################
  4+  A4CF              level01:
  5+  A4CF
  6+  A4CF 00 00 05 05      defb 00,00,05,05,05,05,05,05,05,05,05,05,05,05,02,01,01,01,03,05,05,05,05,05,05,05,05,05,05,05,00,00
  6+  A4D3 05 05 05 05
  6+  A4D7 05 05 05 05
  6+  A4DB 05 05 02 01
  6+  A4DF 01 01 03 05
  6+  A4E3 05 05 05 05
  6+  A4E7 05 05 05 05
  6+  A4EB 05 05 00 00
  7+  A4EF 00 00 05 05      defb 00,00,05,05,05,05,05,05,05,05,05,05,02,01,01,01,01,01,01,01,03,05,05,05,05,05,05,05,05,05,00,00
  7+  A4F3 05 05 05 05
  7+  A4F7 05 05 05 05
  7+  A4FB 02 01 01 01
  7+  A4FF 01 01 01 01
  7+  A503 03 05 05 05
  7+  A507 05 05 05 05
  7+  A50B 05 05 00 00
  8+  A50F 00 00 05 05      defb 00,00,05,05,05,05,05,05,05,05,02,01,01,01,01,01,01,01,01,01,01,01,03,05,10,10,10,10,10,10,00,00
  8+  A513 05 05 05 05
  8+  A517 05 05 02 01
  8+  A51B 01 01 01 01
  8+  A51F 01 01 01 01
  8+  A523 01 01 03 05
  8+  A527 0A 0A 0A 0A
  8+  A52B 0A 0A 00 00
  9+  A52F 00 00 01 01      defb 00,00,01,01,01,01,00,01,01,01,01,01,01,01,01,01,01,01,01,01,01,01,01,03,05,05,05,05,05,05,00,00
  9+  A533 01 01 00 01
  9+  A537 01 01 01 01
  9+  A53B 01 01 01 01
  9+  A53F 01 01 01 01
  9+  A543 01 01 01 03
  9+  A547 05 05 05 05
  9+  A54B 05 05 00 00
 10+  A54F 00 00 01 01      defb 00,00,01,01,04,04,04,04,04,04,01,01,01,01,01,01,01,01,01,01,01,01,01,01,01,01,01,01,00,01,00,00
 10+  A553 04 04 04 04
 10+  A557 04 04 01 01
 10+  A55B 01 01 01 01
 10+  A55F 01 01 01 01
 10+  A563 01 01 01 01
 10+  A567 01 01 01 01
 10+  A56B 00 01 00 00
 11+  A56F 00 00 01 04      defb 00,00,01,04,04,04,04,04,04,04,04,04,01,01,01,01,01,01,01,01,01,01,01,01,00,00,00,00,00,01,00,00
 11+  A573 04 04 04 04
 11+  A577 04 04 04 04
 11+  A57B 01 01 01 01
 11+  A57F 01 01 01 01
 11+  A583 01 01 01 01
 11+  A587 00 00 00 00
 11+  A58B 00 01 00 00
 12+  A58F 00 00 01 04      defb 00,00,01,04,04,01,01,01,01,01,04,04,04,04,01,01,01,01,01,01,01,00,00,00,00,01,01,01,01,01,00,00
 12+  A593 04 01 01 01
 12+  A597 01 01 04 04
 12+  A59B 04 04 01 01
 12+  A59F 01 01 01 01
 12+  A5A3 01 00 00 00
 12+  A5A7 00 01 01 01
 12+  A5AB 01 01 00 00
 13+  A5AF 00 00 01 04      defb 00,00,01,04,04,04,04,04,04,01,04,04,04,04,04,04,04,04,00,00,00,00,04,04,04,04,04,04,04,01,00,00
 13+  A5B3 04 04 04 04
 13+  A5B7 04 01 04 04
 13+  A5BB 04 04 04 04
 13+  A5BF 04 04 00 00
 13+  A5C3 00 00 04 04
 13+  A5C7 04 04 04 04
 13+  A5CB 04 01 00 00
 14+  A5CF 00 00 01 01      defb 00,00,01,01,01,04,01,01,01,01,04,04,04,04,04,04,04,04,00,04,04,04,04,04,04,04,04,04,04,01,00,00
 14+  A5D3 01 04 01 01
 14+  A5D7 01 01 04 04
 14+  A5DB 04 04 04 04
 14+  A5DF 04 04 00 04
 14+  A5E3 04 04 04 04
 14+  A5E7 04 04 04 04
 14+  A5EB 04 01 00 00
 15+  A5EF 00 00 01 00      defb 00,00,01,00,00,00,00,00,00,04,04,04,04,04,04,04,04,04,00,04,04,04,04,04,04,04,04,04,04,01,00,00
 15+  A5F3 00 00 00 00
 15+  A5F7 00 04 04 04
 15+  A5FB 04 04 04 04
 15+  A5FF 04 04 00 04
 15+  A603 04 04 04 04
 15+  A607 04 04 04 04
 15+  A60B 04 01 00 00
 16+  A60F 00 00 01 07      defb 00,00,01,07,07,07,07,07,07,01,04,04,04,04,04,04,04,04,00,04,04,04,04,04,04,04,04,04,04,01,00,00
 16+  A613 07 07 07 07
 16+  A617 07 01 04 04
 16+  A61B 04 04 04 04
 16+  A61F 04 04 00 04
 16+  A623 04 04 04 04
 16+  A627 04 04 04 04
 16+  A62B 04 01 00 00
 17+  A62F 00 00 01 00      defb 00,00,01,00,00,00,00,00,00,01,04,04,04,04,04,04,04,04,00,04,04,04,04,04,04,00,00,00,00,01,00,00
 17+  A633 00 00 00 00
 17+  A637 00 01 04 04
 17+  A63B 04 04 04 04
 17+  A63F 04 04 00 04
 17+  A643 04 04 04 04
 17+  A647 04 00 00 00
 17+  A64B 00 01 00 00
 18+  A64F 00 00 01 00      defb 00,00,01,00,00,00,00,00,00,01,04,04,04,04,04,04,04,04,00,04,04,04,04,04,04,00,04,04,00,01,00,00
 18+  A653 00 00 00 00
 18+  A657 00 01 04 04
 18+  A65B 04 04 04 04
 18+  A65F 04 04 00 04
 18+  A663 04 04 04 04
 18+  A667 04 00 04 04
 18+  A66B 00 01 00 00
 19+  A66F 00 00 01 06      defb 00,00,01,06,06,06,06,06,06,01,04,04,04,04,04,04,04,04,00,04,04,04,04,04,04,00,04,04,00,01,00,00
 19+  A673 06 06 06 06
 19+  A677 06 01 04 04
 19+  A67B 04 04 04 04
 19+  A67F 04 04 00 04
 19+  A683 04 04 04 04
 19+  A687 04 00 04 04
 19+  A68B 00 01 00 00
 20+  A68F 00 00 01 06      defb 00,00,01,06,06,06,06,06,06,01,04,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,04,04,00,01,00,00
 20+  A693 06 06 06 06
 20+  A697 06 01 04 00
 20+  A69B 00 00 00 00
 20+  A69F 00 00 00 00
 20+  A6A3 00 00 00 00
 20+  A6A7 00 00 04 04
 20+  A6AB 00 01 00 00
 21+  A6AF 00 00 01 06      defb 00,00,01,06,06,06,06,06,06,01,04,00,04,04,04,04,04,04,00,04,04,04,00,04,04,04,04,04,00,01,00,00
 21+  A6B3 06 06 06 06
 21+  A6B7 06 01 04 00
 21+  A6BB 04 04 04 04
 21+  A6BF 04 04 00 04
 21+  A6C3 04 04 00 04
 21+  A6C7 04 04 04 04
 21+  A6CB 00 01 00 00
 22+  A6CF 00 00 01 06      defb 00,00,01,06,06,06,06,06,06,01,04,00,04,04,04,04,04,04,00,04,04,04,00,04,04,04,04,04,00,01,00,00
 22+  A6D3 06 06 06 06
 22+  A6D7 06 01 04 00
 22+  A6DB 04 04 04 04
 22+  A6DF 04 04 00 04
 22+  A6E3 04 04 00 04
 22+  A6E7 04 04 04 04
 22+  A6EB 00 01 00 00
 23+  A6EF 00 00 01 01      defb 00,00,01,01,01,01,01,01,01,01,04,00,04,04,04,04,04,04,00,04,04,04,00,04,04,04,04,04,00,01,00,00
 23+  A6F3 01 01 01 01
 23+  A6F7 01 01 04 00
 23+  A6FB 04 04 04 04
 23+  A6FF 04 04 00 04
 23+  A703 04 04 00 04
 23+  A707 04 04 04 04
 23+  A70B 00 01 00 00
 24+  A70F 00 00 01 04      defb 00,00,01,04,04,04,04,04,04,04,04,00,04,04,04,04,04,04,00,04,04,04,00,00,00,00,04,04,04,01,00,00
 24+  A713 04 04 04 04
 24+  A717 04 04 04 00
 24+  A71B 04 04 04 04
 24+  A71F 04 04 00 04
 24+  A723 04 04 00 00
 24+  A727 00 00 04 04
 24+  A72B 04 01 00 00
 25+  A72F 00 00 01 04      defb 00,00,01,04,04,04,00,00,00,00,00,00,04,04,04,04,04,04,00,04,04,04,04,04,04,00,04,04,04,01,00,00
 25+  A733 04 04 00 00
 25+  A737 00 00 00 00
 25+  A73B 04 04 04 04
 25+  A73F 04 04 00 04
 25+  A743 04 04 04 04
 25+  A747 04 00 04 04
 25+  A74B 04 01 00 00
 26+  A74F 00 00 01 04      defb 00,00,01,04,04,04,00,04,04,04,04,04,04,04,04,04,04,04,00,04,04,04,04,04,04,00,04,04,04,01,00,00
 26+  A753 04 04 00 04
 26+  A757 04 04 04 04
 26+  A75B 04 04 04 04
 26+  A75F 04 04 00 04
 26+  A763 04 04 04 04
 26+  A767 04 00 04 04
 26+  A76B 04 01 00 00
 27+  A76F 00 00 01 04      defb 00,00,01,04,04,04,00,04,04,04,01,01,01,01,01,01,01,01,01,01,01,01,01,01,04,00,04,04,04,01,00,00
 27+  A773 04 04 00 04
 27+  A777 04 04 01 01
 27+  A77B 01 01 01 01
 27+  A77F 01 01 01 01
 27+  A783 01 01 01 01
 27+  A787 04 00 04 04
 27+  A78B 04 01 00 00
 28+  A78F 00 00 01 04      defb 00,00,01,04,04,04,00,04,04,04,01,00,00,00,00,00,00,00,00,00,00,00,00,01,04,00,04,04,04,01,00,00
 28+  A793 04 04 00 04
 28+  A797 04 04 01 00
 28+  A79B 00 00 00 00
 28+  A79F 00 00 00 00
 28+  A7A3 00 00 00 01
 28+  A7A7 04 00 04 04
 28+  A7AB 04 01 00 00
 29+  A7AF 00 00 01 04      defb 00,00,01,04,04,04,00,04,04,04,01,00,00,00,00,00,00,00,00,00,00,00,00,01,04,00,04,04,04,01,00,00
 29+  A7B3 04 04 00 04
 29+  A7B7 04 04 01 00
 29+  A7BB 00 00 00 00
 29+  A7BF 00 00 00 00
 29+  A7C3 00 00 00 01
 29+  A7C7 04 00 04 04
 29+  A7CB 04 01 00 00
 30+  A7CF 00 00 01 04      defb 00,00,01,04,04,04,00,04,04,04,01,00,00,00,00,00,00,00,00,00,00,00,00,01,04,00,04,04,04,01,00,00
 30+  A7D3 04 04 00 04
 30+  A7D7 04 04 01 00
 30+  A7DB 00 00 00 00
 30+  A7DF 00 00 00 00
 30+  A7E3 00 00 00 01
 30+  A7E7 04 00 04 04
 30+  A7EB 04 01 00 00
 31+  A7EF 00 00 01 04      defb 00,00,01,04,04,04,00,04,04,04,04,00,00,00,00,00,00,00,00,00,00,00,00,04,04,04,04,04,04,01,00,00
 31+  A7F3 04 04 00 04
 31+  A7F7 04 04 04 00
 31+  A7FB 00 00 00 00
 31+  A7FF 00 00 00 00
 31+  A803 00 00 00 04
 31+  A807 04 04 04 04
 31+  A80B 04 01 00 00
 32+  A80F 00 00 01 04      defb 00,00,01,04,04,04,04,04,04,04,01,00,00,00,00,00,00,00,00,00,00,00,00,01,04,04,04,04,04,01,00,00
 32+  A813 04 04 04 04
 32+  A817 04 04 01 00
 32+  A81B 00 00 00 00
 32+  A81F 00 00 00 00
 32+  A823 00 00 00 01
 32+  A827 04 04 04 04
 32+  A82B 04 01 00 00
 33+  A82F 00 00 01 04      defb 00,00,01,04,04,04,04,04,04,04,01,00,08,00,01,00,08,00,00,01,00,08,00,01,04,04,04,04,04,01,00,00
 33+  A833 04 04 04 04
 33+  A837 04 04 01 00
 33+  A83B 08 00 01 00
 33+  A83F 08 00 00 01
 33+  A843 00 08 00 01
 33+  A847 04 04 04 04
 33+  A84B 04 01 00 00
 34+  A84F 00 00 01 01      defb 00,00,01,01,01,01,01,01,01,01,01,01,01,01,01,01,01,01,01,01,01,01,01,01,01,01,01,01,01,01,00,00
 34+  A853 01 01 01 01
 34+  A857 01 01 01 01
 34+  A85B 01 01 01 01
 34+  A85F 01 01 01 01
 34+  A863 01 01 01 01
 34+  A867 01 01 01 01
 34+  A86B 01 01 00 00
 35+  A86F
 36+  A86F              ; ###############################################################
 37+  A86F              ; Rock data: horiz, vert, state
 38+  A86F              ; ###############################################################
 39+  A86F              level01rocks:
 40+  A86F 09 04 00         defb 9,4,0
 41+  A872 0C 07 00         defb 12,7,0
 42+  A875 10 07 00         defb 16,7,0
 43+  A878 0B 08 00         defb 11,8,0
 44+  A87B 0A 0A 00         defb 10,10,0
 45+  A87E 0C 0A 00         defb 12,10,0
 46+  A881 0D 09 00         defb 13,9,0
 47+  A884 0E 08 00         defb 14,8,0
 48+  A887 0F 0B 00         defb 15,11,0
 49+  A88A 0B 0C 00         defb 11,12,0
 50+  A88D 11 0C 00         defb 17,12,0
 51+  A890 13 08 00         defb 19,8,0
 52+  A893 16 09 00         defb 22,9,0
 53+  A896 13 0A 00         defb 19,10,0
 54+  A899 15 0A 00         defb 21,10,0
 55+  A89C 15 0C 00         defb 21,12,0
 56+  A89F 16 0C 00         defb 22,12,0
 57+  A8A2 18 0A 00         defb 24,10,0
 58+  A8A5 19 09 00         defb 25,9,0
 59+  A8A8 1C 09 00         defb 28,9,0
 60+  A8AB 1B 0C 00         defb 27,12,0
 61+  A8AE 1A 0D 00         defb 26,13,0
 62+  A8B1 19 0E 00         defb 25,14,0
 63+  A8B4 19 10 00         defb 25,16,0
 64+  A8B7 1A 11 00         defb 26,17,0
 65+  A8BA 1B 11 00         defb 27,17,0
 66+  A8BD 1C 12 00         defb 28,18,0
 67+  A8C0 1A 13 00         defb 26,19,0
 68+  A8C3 1B 15 00         defb 27,21,0
 69+  A8C6 1A 17 00         defb 26,23,0
 70+  A8C9 1B 18 00         defb 27,24,0
 71+  A8CC 19 18 00         defb 25,24,0
 72+  A8CF 18 17 00         defb 24,23,0
 73+  A8D2 13 14 00         defb 19,20,0
 74+  A8D5 14 12 00         defb 20,18,0
 75+  A8D8 14 10 00         defb 20,16,0
 76+  A8DB 15 10 00         defb 21,16,0
 77+  A8DE 16 12 00         defb 22,18,0
 78+  A8E1 11 14 00         defb 17,20,0
 79+  A8E4 0D 11 00         defb 13,17,0
 80+  A8E7 0C 13 00         defb 12,19,0
 81+  A8EA 0B 13 00         defb 11,19,0
 82+  A8ED 0A 11 00         defb 10,17,0
 83+  A8F0 05 12 00         defb 5,18,0
 84+  A8F3 07 16 00         defb 7,22,0
 85+  A8F6 09 17 00         defb 9,23,0
 86+  A8F9 07 18 00         defb 7,24,0
 87+  A8FC 05 18 00         defb 5,24,0
 88+  A8FF 06 19 00         defb 6,25,0
 89+  A902 08 19 00         defb 8,25,0
 90+  A905 04 17 00         defb 4,23,0
 91+  A908 FF               defb 255
 92+  A909
 93+  A909              level01missiles:
 94+  A909 0B 17 00         defb 11,23,0
 95+  A90C 0B 16 00         defb 11,22,0
 96+  A90F 0C 17 00         defb 12,23,0
 97+  A912 0C 16 00         defb 12,22,0
 98+  A915 0D 17 00         defb 13,23,0
 99+  A918 0D 16 00         defb 13,22,0
100+  A91B 0E 17 00         defb 14,23,0
101+  A91E 0E 16 00         defb 14,22,0
102+  A921 0F 17 00         defb 15,23,0
103+  A924 0F 16 00         defb 15,22,0
104+  A927 10 17 00         defb 16,23,0
105+  A92A 10 16 00         defb 16,22,0
106+  A92D 11 17 00         defb 17,23,0
107+  A930 11 16 00         defb 17,22,0
108+  A933 12 17 00         defb 18,23,0
109+  A936 12 16 00         defb 18,22,0
110+  A939 13 17 00         defb 19,23,0
111+  A93C 13 16 00         defb 19,22,0
112+  A93F 14 17 00         defb 20,23,0
113+  A942 14 16 00         defb 20,22,0
114+  A945 15 17 00         defb 21,23,0
115+  A948 15 16 00         defb 21,22,0
116+  A94B 16 17 00         defb 22,23,0
117+  A94E 16 16 00         defb 22,22,0
118+  A951 FF               defb 255
119+  A952
120+  A952              ;
121+  A952              ; Score area colours
122+  A952              ;
123+  A952              score_colours:
124+  A952 47 47 47 47      defb 71,71,71,71,71,71,71,71,71,71,71,66,67,67,67,67,67,67,67,67,66,71,71,71,71,71,71,71,71,71,71,71
124+  A956 47 47 47 47
124+  A95A 47 47 47 42
124+  A95E 43 43 43 43
124+  A962 43 43 43 43
124+  A966 42 47 47 47
124+  A96A 47 47 47 47
124+  A96E 47 47 47 47
125+  A972 47 47 47 47      defb 71,71,71,71,71,71,71,71,71,71,71,70,70,70,70,70,70,70,70,70,70,71,71,71,71,71,71,71,71,71,71,71
125+  A976 47 47 47 47
125+  A97A 47 47 47 46
125+  A97E 46 46 46 46
125+  A982 46 46 46 46
125+  A986 46 47 47 47
125+  A98A 47 47 47 47
125+  A98E 47 47 47 47
# file closed: leveldata/level01.asm
 28   A992                  include "graphics\graphics.asm"
# file opened: graphics/graphics.asm
  1+  A992              ; Tiles graphics.
  2+  A992              sprites:
  3+  A992 00 00 00 00      defb    0  ,  0,  0,  0,  0,  0,  0,  0   ; 0, space
  3+  A996 00 00 00 00
  4+  A99A FF FF FF FF      defb    255,255,255,255,255,255,255,255   ; 1, cyan block
  4+  A99E FF FF FF FF
  5+  A9A2 01 03 07 0F      defb	  1,  3,  7, 15, 31, 63,127,255   ; 2, slope left
  5+  A9A6 1F 3F 7F FF
  6+  A9AA 80 C0 E0 F0      defb    128,192,224,240,248,252,254,255   ; 3, slope right
  6+  A9AE F8 FC FE FF
  7+  A9B2 55 AA 55 AA      defb    85,170, 85,170, 85,170, 85,170    ; 4, dirt
  7+  A9B6 55 AA 55 AA
  8+  A9BA 00 00 00 00      defb    0  ,  0,  0,  0,  0,  0,  0,  0   ; 5, sky block
  8+  A9BE 00 00 00 00
  9+  A9C2 FF FF FF FF      defb    255,255,255,255,255,255,255,255   ; 6, slime block
  9+  A9C6 FF FF FF FF
 10+  A9CA FF FF 00 00      defb    255,255,  0,  0,  0,  0,  0,  0   ; 7, trapdoor
 10+  A9CE 00 00 00 00
 11+  A9D2 18 2C 4E 8F      defb    24, 44, 78,143,241,114, 52,  24    ; 8, gem
 11+  A9D6 F1 72 34 18
 12+  A9DA 1C 7E FF 7F      defb    28,126,255,127,254,252,127,  62    ; 9, rock
 12+  A9DE FE FC 7F 3E
 13+  A9E2 00 00 00 00      defb    0  ,  0,  0,  0,  0,  0,  0,  0   ; 10, sky block, tank background
 13+  A9E6 00 00 00 00
 14+  A9EA 00 00 00 00      defb    0  ,  0,  0,  0,  0,  0,255,255   ; 11, sky block, pixel trapdoor
 14+  A9EE 00 00 FF FF
 15+  A9F2 99 DB 7E 24  	defb    153,219,126, 36,255,126, 60, 24   ; 12, missile
 15+  A9F6 FF 7E 3C 18
 16+  A9FA
 17+  A9FA              sprite_attrs:
 18+  A9FA 46               defb    070 ; 0, space
 19+  A9FB 65               defb    101 ; 1, cyan block
 20+  A9FC 4D               defb    077 ; 2, slope left
 21+  A9FD 4D               defb    077 ; 3, slope right
 22+  A9FE 46               defb    070 ; 4, dirt
 23+  A9FF 4E               defb    078 ; 5, sky
 24+  AA00 4C               defb    076 ; 6, slime
 25+  AA01 42               defb    066 ; 7, trapdoor
 26+  AA02 46               defb    070 ; 8, gem
 27+  AA03 42               defb    066 ; 9, rock
 28+  AA04 4A               defb    074 ; 10, sky, red ink (tank)
 29+  AA05 49           	defb    073 ; 11, sky, trapdoor
 30+  AA06 43           	defb    067 ; 12, missile
 31+  AA07
 32+  AA07              player_sprite:
 33+  AA07 10 39 92 FC  	defb	 16, 57,146,252, 56, 61,195,128 ; 0 up/down 1
 33+  AA0B 38 3D C3 80
 34+  AA0F 08 1C 08 FC  	defb	  8, 28,  8,252, 60, 28, 22, 50 ; 1 left 1
 34+  AA13 3C 1C 16 32
 35+  AA17 10 38 10 3F      defb   	 16, 56, 16, 63, 60, 56,104, 76 ; 2 right 1
 35+  AA1B 3C 38 68 4C
 36+  AA1F 08 9C 49 3F  	defb	  8,156, 73, 63, 28,188,195,  1 ; 3 up/down 2
 36+  AA23 1C BC C3 01
 37+  AA27 08 1C 08 FC  	defb	  8, 28,  8,252, 60, 60,100, 12; 4 left 2
 37+  AA2B 3C 3C 64 0C
 38+  AA2F 10 38 10 3F  	defb	 16, 56, 16, 63, 60, 60, 38, 48 ; 5 right 2
 38+  AA33 3C 3C 26 30
 39+  AA37 3E 1C 08 48  	defb	 62, 28,  8, 72,120, 58,191,250 ; 6 shoot up
 39+  AA3B 78 3A BF FA
 40+  AA3F 02 87 C2 FF  	defb	 2,135,194,255,207,143, 25,  3  ; 7 shoot left
 40+  AA43 CF 8F 19 03
 41+  AA47 40 E1 43 FF  	defb	 64,225, 67,255,243,241,152,192 ; 8 shoot right
 41+  AA4B F3 F1 98 C0
 42+  AA4F 5F FD 5C 1E  	defb	 95,253, 92, 30, 18, 16, 56,124 ; 9 shoot down
 42+  AA53 12 10 38 7C
 43+  AA57
 44+  AA57              ;
 45+  AA57              ; First 4 top half, next 4 bottom 1, next 4 bottom 2
 46+  AA57              ;
 47+  AA57              ship_sprite:
 48+  AA57 00 00 00 01  	defb	  0,  0,  0,  1,  3, 31,127,255
 48+  AA5B 03 1F 7F FF
 49+  AA5F 1F 01 7F FF  	defb	 31,  1,127,255,255,255,255,255
 49+  AA63 FF FF FF FF
 50+  AA67 F8 80 FE FF  	defb	248,128,254,255,255,255,255,255
 50+  AA6B FF FF FF FF
 51+  AA6F 00 00 00 80  	defb	  0,  0,  0,128,192,248,254,255
 51+  AA73 C0 F8 FE FF
 52+  AA77 B3 B3 7F 1F  	defb	179,179,127, 31,  3,  3,  2,  7
 52+  AA7B 03 03 02 07
 53+  AA7F 8F 8F FF FF  	defb	143,143,255,255,255, 15,  7,131
 53+  AA83 FF 0F 07 83
 54+  AA87 0F 0F FF FF  	defb	 15, 15,255,255,255, 16, 32,193
 54+  AA8B FF 10 20 C1
 55+  AA8F 19 19 FE F8  	defb	 25, 25,254,248,192,192, 64,224
 55+  AA93 C0 C0 40 E0
 56+  AA97 98 98 7F 1F  	defb	152,152,127, 31,  3,  3,  2,  7
 56+  AA9B 03 03 02 07
 57+  AA9F F0 F0 FF FF  	defb	240,240,255,255,255,  8,  4,131
 57+  AAA3 FF 08 04 83
 58+  AAA7 F1 F1 FF FF  	defb	241,241,255,255,255,240,224,193
 58+  AAAB FF F0 E0 C1
 59+  AAAF CD CD FE F8  	defb	205,205,254,248,192,192, 64,224
 59+  AAB3 C0 C0 40 E0
 60+  AAB7
 61+  AAB7              ;
 62+  AAB7              ;  First 8 frames are tank, last frame is the gun barrel
 63+  AAB7              ;
 64+  AAB7              tank_sprite:
 65+  AAB7 00 00 00 7F  	defb	  0,  0,  0,127,127,  0,  0,  0
 65+  AABB 7F 00 00 00
 66+  AABF 01 03 FE FC  	defb	  1,  3,254,252,254,255,127, 64
 66+  AAC3 FE FF 7F 40
 67+  AAC7 FF FF 03 F9  	defb	255,255,  3,249,  3,255,255,  1
 67+  AACB 03 FF FF 01
 68+  AACF 00 00 C0 E0  	defb	  0,  0,192,224,224,192,  0,  0
 68+  AAD3 E0 C0 00 00
 69+  AAD7 3F 7F E1 FB  	defb	 63,127,225,251,247,225,127, 63
 69+  AADB F7 E1 7F 3F
 70+  AADF FF FF 16 52  	defb	255,255, 22, 82, 84, 22,255,255
 70+  AAE3 54 16 FF FF
 71+  AAE7 FF FF A8 A9  	defb	255,255,168,169,155,168,255,255
 71+  AAEB 9B A8 FF FF
 72+  AAEF FC FE 8F AF  	defb	252,254,143,175,159,175,254,252
 72+  AAF3 9F AF FE FC
 73+  AAF7 00 00 00 1F  	defb	  0,  0,  0, 31, 31,  0,  0,  0
 73+  AAFB 1F 00 00 00
# file closed: graphics/graphics.asm
 29   AAFF
 30   AAFF                  include "game\control.asm"
# file opened: game/control.asm
  1+  AAFF              ;
  2+  AAFF              ; Check the keyboard then move
  3+  AAFF              ;
  4+  AAFF              control_keyboard:
  5+  AAFF 3A 92 AE         ld a,(player+5)      ; first, check if the player has pixels left to move
  6+  AB02 FE 00            cp 0
  7+  AB04 CA 0B AB         jp z, control_keyboard1
  8+  AB07 CD CD AB         call control_automove
  9+  AB0A C9               ret
 10+  AB0B              control_keyboard1:
 11+  AB0B 3A 93 AE         ld a,(player+6)      ; next, check if the player is digging
 12+  AB0E FE 00            cp 0
 13+  AB10 CA 17 AB         jp z, control_keyboard0
 14+  AB13 CD 3E AB         call control_dig
 15+  AB16 C9               ret
 16+  AB17              control_keyboard0:
 17+  AB17 01 FE FB         ld bc,64510         ; port for keyboard row q-t.
 18+  AB1A ED 78            in a,(c)            ; read keyboard.
 19+  AB1C 47               ld b,a              ; store result in b register.
 20+  AB1D CB 18            rr b                ; check outermost key (q).
 21+  AB1F D4 16 AC         call nc,control_pl_moveup         ; player up.
 22+  AB22 01 FE FD         ld bc,65022         ; port for keyboard row a-f.
 23+  AB25 ED 78            in a,(c)            ; read keyboard.
 24+  AB27 47               ld b,a              ; store result in b register.
 25+  AB28 CB 18            rr b                ; check outermost key (a).
 26+  AB2A D4 45 AC         call nc,control_pl_movedown       ; player down.
 27+  AB2D 01 FE DF         ld bc,57342         ; port for keyboard row y-p.
 28+  AB30 ED 78            in a,(c)            ; read keyboard.
 29+  AB32 47               ld b,a              ; store result in b register.
 30+  AB33 CB 18            rr b                ; check outermost key (p).
 31+  AB35 D4 A2 AC         call nc,control_pl_moveright       ; player left.
 32+  AB38 CB 18            rr b                ; check next key.
 33+  AB3A D4 72 AC         call nc,control_pl_moveleft       ; player right.
 34+  AB3D C9               ret
 35+  AB3E
 36+  AB3E              ;
 37+  AB3E              ; Performs a dig if the counter has reset, otherwise, messes with the graphics
 38+  AB3E              ;
 39+  AB3E              control_dig:
 40+  AB3E ED 4B 8D AE      ld bc,(player)      ; load the current coords into bc
 41+  AB42 C5               push bc
 42+  AB43 3A 8F AE         ld a,(player+2)     ; get the direction
 43+  AB46 FE 01            cp 1                ; left
 44+  AB48 CA 60 AB         jp z,control_dig0
 45+  AB4B FE 02            cp 2                ; right
 46+  AB4D CA 69 AB         jp z,control_dig1
 47+  AB50 FE 03            cp 3                ; down
 48+  AB52 CA 7F AB         jp z,control_dig5
 49+  AB55 FE 00            cp 0                ; up
 50+  AB57 CA 72 AB         jp z,control_dig4
 51+  AB5A 21 93 AE         ld hl,player+6
 52+  AB5D 36 00            ld (hl),0           ; turn off digging
 53+  AB5F C9               ret                 ; return
 54+  AB60              control_dig0:           ; going left
 55+  AB60 CD A2 A3         call sprites_scadd  ; get the current coord
 56+  AB63 62 6B            ld hl,de
 57+  AB65 2B               dec hl              ; move one left
 58+  AB66 C3 88 AB         jp control_dig2
 59+  AB69              control_dig1:
 60+  AB69 CD A2 A3         call sprites_scadd  ; get the current coord
 61+  AB6C 62 6B            ld hl,de
 62+  AB6E 23               inc hl              ; move one right
 63+  AB6F C3 88 AB         jp control_dig2
 64+  AB72              control_dig4:
 65+  AB72 CD A2 A3         call sprites_scadd  ; get the current coord
 66+  AB75 62 6B            ld hl,de
 67+  AB77 11 20 00         ld de,32
 68+  AB7A ED 52            sbc hl,de             ; move one up
 69+  AB7C C3 9A AB         jp control_dig6
 70+  AB7F              control_dig5:
 71+  AB7F CD A2 A3         call sprites_scadd  ; get the current coord
 72+  AB82 62 6B            ld hl,de
 73+  AB84 24               inc h              ; move one down
 74+  AB85 C3 88 AB         jp control_dig2
 75+  AB88              control_dig2:
 76+  AB88 C1               pop bc
 77+  AB89 3A 95 AE         ld a,(player+8)     ; get the number of rows we need to overwrite
 78+  AB8C 47               ld b,a              ; rows to copy over
 79+  AB8D              control_dig3:
 80+  AB8D CD B6 AB         call control_getpixelrow
 81+  AB90 77               ld (hl),a           ; load empty into row
 82+  AB91 11 20 00         ld de,32
 83+  AB94 19               add hl,de           ; move to next row
 84+  AB95 10 F6            djnz control_dig3
 85+  AB97 C3 AA AB         jp control_dig10
 86+  AB9A              control_dig6:           ; special case for going up
 87+  AB9A C1               pop bc
 88+  AB9B 3A 95 AE         ld a,(player+8)     ; get the number of rows we need to overwrite
 89+  AB9E 47               ld b,a              ; rows to copy over
 90+  AB9F              control_dig7:
 91+  AB9F CD B6 AB         call control_getpixelrow
 92+  ABA2              control_dig12:
 93+  ABA2 77               ld (hl),a           ; load empty into row
 94+  ABA3 11 20 00         ld de,32
 95+  ABA6 ED 52            sbc hl,de           ; move up to next row
 96+  ABA8 10 F5            djnz control_dig7
 97+  ABAA              control_dig10:
 98+  ABAA DD 21 94 AE      ld ix,player+7
 99+  ABAE DD 7E 00         ld a,(ix)     ; get the dig frame number
100+  ABB1 3D               dec a
101+  ABB2 DD 77 00         ld (ix),a
102+  ABB5 C9               ret
103+  ABB6
104+  ABB6              ;
105+  ABB6              ; Gets a modified pixel row to overwrite dirt - if this is the last dig, overwrite with nothing, otherwise xor to flip the dirt
106+  ABB6              ; Inputs:
107+  ABB6              ; hl - memory of pixel row
108+  ABB6              ; Outputs:
109+  ABB6              ; a - modified row to write
110+  ABB6              ;
111+  ABB6              control_getpixelrow:
112+  ABB6 3A 94 AE         ld a,(player+7)     ; get the dig frame number
113+  ABB9 FE 00            cp 0                ; is this the last dig
114+  ABBB CA C2 AB         jp z,control_getpixelrow1
115+  ABBE 7E               ld a,(hl)           ; if not, xor with 255 to flip it
116+  ABBF EE FF            xor 255
117+  ABC1 C9               ret
118+  ABC2              control_getpixelrow1:
119+  ABC2 DD 21 93 AE      ld ix,player+6
120+  ABC6 DD 36 00 00      ld (ix),0           ; turn off digging
121+  ABCA 3E 00            ld a,0              ; if it is, load with empty
122+  ABCC C9               ret
123+  ABCD
124+  ABCD              ;
125+  ABCD              ; Auto move the player until pixels is zero
126+  ABCD              ;
127+  ABCD              control_automove:
128+  ABCD 5F               ld e,a              ; store the number of pixels left to move in e
129+  ABCE ED 4B 8D AE      ld bc,(player)      ; load the current coords into bc
130+  ABD2 21 8F AE         ld hl,player+2      ; get the direction
131+  ABD5 7E               ld a,(hl)
132+  ABD6 FE 03            cp 3                ; down
133+  ABD8 CA EC AB         jp z,control_automove3  ; don't need to do anything
134+  ABDB FE 00            cp 0                ; going up
135+  ABDD CA F8 AB         jp z,control_automove2
136+  ABE0 FE 01            cp 1                ; going left?
137+  ABE2 CA 04 AC         jp z,control_automove0
138+  ABE5 78               ld a,b
139+  ABE6 3C               inc a               ; if we're going right, increment a twice for two pixels
140+  ABE7 3C               inc a
141+  ABE8 47               ld b,a
142+  ABE9 C3 08 AC         jp control_automove1
143+  ABEC              control_automove3:
144+  ABEC 79               ld a,c
145+  ABED 3C               inc a
146+  ABEE 3C               inc a               ; if we're going down, increment twice
147+  ABEF 4F               ld c,a
148+  ABF0 FE 90            cp 144
149+  ABF2 CC D0 AC         call z, control_scroll_down
150+  ABF5 C3 08 AC         jp control_automove1
151+  ABF8              control_automove2:
152+  ABF8 79               ld a,c
153+  ABF9 3D               dec a
154+  ABFA 3D               dec a               ; if we're going up, decrement twice
155+  ABFB 4F               ld c,a
156+  ABFC FE 60            cp 96
157+  ABFE CC D8 AC         call z, control_scroll_up
158+  AC01 C3 08 AC         jp control_automove1
159+  AC04              control_automove0:
160+  AC04 78               ld a,b
161+  AC05 3D               dec a               ; if we're going left, decrement a twice
162+  AC06 3D               dec a
163+  AC07 47               ld b,a
164+  AC08              control_automove1:
165+  AC08 ED 43 8D AE      ld (player),bc      ; and back to player
166+  AC0C 7B               ld a,e              ; now get the pixel count back
167+  AC0D 3D               dec a               ; decrease by one
168+  AC0E 21 92 AE         ld hl,player+5
169+  AC11 77               ld (hl),a           ; copy back
170+  AC12 CD D0 AE         call player_justmoved
171+  AC15 C9               ret
172+  AC16
173+  AC16              ;
174+  AC16              ; Moves the player up
175+  AC16              ;
176+  AC16              control_pl_moveup:
177+  AC16 C5               push bc
178+  AC17 ED 4B 8D AE      ld bc,(player)          ; get the current coords, b horiz, c vert
179+  AC1B 79               ld a,c                  ; load c into the acc
180+  AC1C FE 18            cp 24
181+  AC1E CA 3E AC         jp z,control_pl_moveup0 ; are we at the edge of the screen
182+  AC21 FE 60            cp 96
183+  AC23 DC D8 AC         call c, control_scroll_up
184+  AC26 CD FE AD         call movement_checkcanmove_up ; check we can move up, e will be 1 if we can
185+  AC29 F5               push af
186+  AC2A 7B               ld a,e                  ; put e in a
187+  AC2B FE 00            cp 0
188+  AC2D CA 3D AC         jp z,control_pl_moveup1 ; don't move if we can't
189+  AC30 F1               pop af
190+  AC31 D6 01            sub 1                   ; subtract 1
191+  AC33 D6 01            sub 1                   ; subtract 1
192+  AC35 4F               ld c,a                  ; load back to c
193+  AC36 ED 43 8D AE      ld (player),bc          ; load back to player
194+  AC3A C3 3E AC         jp control_pl_moveup0
195+  AC3D              control_pl_moveup1:
196+  AC3D F1               pop af                  ; restore af if needed
197+  AC3E              control_pl_moveup0:
198+  AC3E 3E 00            ld a,0
199+  AC40 32 8F AE         ld (player+2),a        ; set direction to up
200+  AC43 C1               pop bc
201+  AC44 C9               ret
202+  AC45              ;
203+  AC45              ; Moves the player down
204+  AC45              ;
205+  AC45              control_pl_movedown:
206+  AC45 C5               push bc
207+  AC46 ED 4B 8D AE      ld bc,(player)          ; get the current coords, b horiz, c vert
208+  AC4A 79               ld a,c                  ; load c into the acc
209+  AC4B FE E0            cp 224
210+  AC4D CA 6B AC         jp z,control_pl_movedown0 ; are we at the edge of the screen
211+  AC50 FE 90            cp 144
212+  AC52 D4 D0 AC         call nc, control_scroll_down
213+  AC55 CD D6 AD         call movement_checkcanmove_down ; check we can move down, e will be 1 if we can
214+  AC58 F5               push af
215+  AC59 7B               ld a,e                  ; put e in a
216+  AC5A FE 00            cp 0
217+  AC5C CA 6A AC         jp z,control_pl_movedown1 ; don't move if we can't
218+  AC5F F1               pop af
219+  AC60 3C               inc a                   ; add 1
220+  AC61 3C               inc a                   ; add 1
221+  AC62 4F               ld c,a                  ; load back to c
222+  AC63 ED 43 8D AE      ld (player),bc          ; load back to player
223+  AC67 C3 6B AC         jp control_pl_movedown0
224+  AC6A              control_pl_movedown1:
225+  AC6A F1               pop af                  ; restore af if needed
226+  AC6B              control_pl_movedown0:
227+  AC6B 3E 03            ld a,3
228+  AC6D 32 8F AE         ld (player+2),a        ; set direction to down
229+  AC70 C1               pop bc
230+  AC71 C9               ret
231+  AC72              ;
232+  AC72              ; Moves the player left
233+  AC72              ;
234+  AC72              control_pl_moveleft:
235+  AC72 C5               push bc
236+  AC73 ED 4B 8D AE      ld bc,(player)          ; get the current coords, b horiz, c vert
237+  AC77 78               ld a,b                  ; load b into the acc
238+  AC78 FE 10            cp 16
239+  AC7A CA 9B AC         jp z,control_pl_moveleft0 ; are we at the edge of the screen
240+  AC7D CD 58 AE         call movement_checkcanmove_left ; check we can move down, e will be 1 if we can
241+  AC80 F5               push af
242+  AC81 7B               ld a,e                  ; put e in a
243+  AC82 FE 00            cp 0
244+  AC84 CA 9A AC         jp z,control_pl_moveleft1 ; don't move if we can't
245+  AC87 21 92 AE         ld hl,player+5          ; need to store the amount of pixels still left to move in the player status
246+  AC8A 3E 03            ld a,3
247+  AC8C 77               ld (hl),a
248+  AC8D F1               pop af
249+  AC8E D6 01            sub 1                    ; subtract 2
250+  AC90 D6 01            sub 1
251+  AC92 47               ld b,a                  ; load back to c
252+  AC93 ED 43 8D AE      ld (player),bc          ; load back to player
253+  AC97 C3 9B AC         jp control_pl_moveleft0
254+  AC9A              control_pl_moveleft1:
255+  AC9A F1               pop af
256+  AC9B              control_pl_moveleft0:
257+  AC9B 3E 01            ld a,1
258+  AC9D 32 8F AE         ld (player+2),a        ; set direction to left
259+  ACA0 C1               pop bc
260+  ACA1 C9               ret
261+  ACA2              ;
262+  ACA2              ; Moves the player right
263+  ACA2              ;
264+  ACA2              control_pl_moveright:
265+  ACA2 C5               push bc
266+  ACA3 ED 4B 8D AE      ld bc,(player)          ; get the current coords, b horiz, c vert
267+  ACA7 78               ld a,b                  ; load b into the acc
268+  ACA8 FE F0            cp 240
269+  ACAA CA C9 AC         jp z,control_pl_moveright0 ; are we at the edge of the screen
270+  ACAD CD 30 AE         call movement_checkcanmove_right ; check we can move down, e will be 1 if we can
271+  ACB0 F5               push af
272+  ACB1 7B               ld a,e                  ; put e in a
273+  ACB2 FE 00            cp 0
274+  ACB4 CA C8 AC         jp z,control_pl_moveright1 ; don't move if we can't
275+  ACB7 21 92 AE         ld hl,player+5          ; need to store the amount of pixels still left to move in the player status
276+  ACBA 3E 03            ld a,3
277+  ACBC 77               ld (hl),a
278+  ACBD F1               pop af
279+  ACBE 3C               inc a                   ; add 2
280+  ACBF 3C               inc a
281+  ACC0 47               ld b,a                  ; load back to b
282+  ACC1 ED 43 8D AE      ld (player),bc          ; load back to player
283+  ACC5 C3 C9 AC         jp control_pl_moveright0
284+  ACC8              control_pl_moveright1:
285+  ACC8 F1               pop af                  ; restore af if needed
286+  ACC9              control_pl_moveright0:
287+  ACC9 3E 02            ld a,2
288+  ACCB 32 8F AE         ld (player+2),a        ; set direction to right
289+  ACCE C1               pop bc
290+  ACCF C9               ret
291+  ACD0
292+  ACD0              ;
293+  ACD0              ; Scrolls the screen down
294+  ACD0              ;
295+  ACD0              control_scroll_down:
296+  ACD0 F5               push af
297+  ACD1 3E 07            ld a,7
298+  ACD3 32 74 A1         ld (screen_offset),a
299+  ACD6 F1               pop af
300+  ACD7 C9               ret
301+  ACD8
302+  ACD8              ;
303+  ACD8              ; Scrolls the screen up
304+  ACD8              ;
305+  ACD8              control_scroll_up:
306+  ACD8 F5               push af
307+  ACD9 3E 00            ld a,0
308+  ACDB 32 74 A1         ld (screen_offset),a
309+  ACDE F1               pop af
310+  ACDF C9               ret
311+  ACE0
312+  ACE0
313+  ACE0
314+  ACE0
# file closed: game/control.asm
 31   ACE0                  include "game\movement.asm"
# file opened: game/movement.asm
  1+  ACE0              ;
  2+  ACE0              ; Checks the contents of a cell are empty - ie, all pixel rows are zero
  3+  ACE0              ; Inputs:
  4+  ACE0              ; hl - memory location of top pixel row
  5+  ACE0              ; bc - screen coords, b horiz, c vert
  6+  ACE0              ; Outputs:
  7+  ACE0              ; e - 0 if not empty, 1 if empty
  8+  ACE0              ;
  9+  ACE0              movement_spaceisempty:
 10+  ACE0 3E 08            ld a,8                          ; 8 rows to check
 11+  ACE2              movement_spaceisempty0:
 12+  ACE2 08               ex af,af'                       ; store the loop counter
 13+  ACE3 7E               ld a,(hl)                       ; get current pixel row
 14+  ACE4 FE 00            cp 0
 15+  ACE6 C2 FA AC         jp nz, movement_spaceisempty1    ; row is not empty, can't move here
 16+  ACE9 79               ld a,c                          ; load the vertical coord
 17+  ACEA 3C               inc a                           ; next row down
 18+  ACEB 11 20 00         ld de,32
 19+  ACEE 19               add hl,de                       ; otherwise, just go one down for hl, which means add 32, because of course
 20+  ACEF 4F               ld c,a                          ; copy vert coord back to c
 21+  ACF0 08               ex af,af'                       ; get loop counter back
 22+  ACF1 3D               dec a                           ; decrease loop counter
 23+  ACF2 C2 E2 AC         jp nz, movement_spaceisempty0
 24+  ACF5 16 00            ld d,0
 25+  ACF7 1E 01            ld e,1                          ; got to end, so space is empty
 26+  ACF9 C9               ret
 27+  ACFA              movement_spaceisempty1:
 28+  ACFA 16 00            ld d,0
 29+  ACFC 1E 00            ld e,0                          ; returning false, ie space not empty
 30+  ACFE C9               ret
 31+  ACFF
 32+  ACFF              ;
 33+  ACFF              ; Checks the line of a cell below is empty - ie, first pixel rows is zero
 34+  ACFF              ; Inputs:
 35+  ACFF              ; hl - memory location of top pixel row
 36+  ACFF              ; bc - screen coords, b horiz, c vert
 37+  ACFF              ; Outputs:
 38+  ACFF              ; e - 0 if not empty, 1 if empty
 39+  ACFF              ;
 40+  ACFF              movement_linebelowisempty:
 41+  ACFF 7E               ld a,(hl)                       ; get current pixel row
 42+  AD00 FE 00            cp 0
 43+  AD02 C2 0A AD         jp nz, movement_linebelowisempty1    ; row is not empty, can't move here
 44+  AD05 16 00            ld d,0
 45+  AD07 1E 01            ld e,1                          ; got to end, so space is empty
 46+  AD09 C9               ret
 47+  AD0A              movement_linebelowisempty1:
 48+  AD0A 16 00            ld d,0
 49+  AD0C 1E 00            ld e,0                          ; returning false, ie space not empty
 50+  AD0E C9               ret
 51+  AD0F
 52+  AD0F              ;
 53+  AD0F              ; Checks the line of a cell above is empty - ie, last pixel rows are zero
 54+  AD0F              ; Inputs:
 55+  AD0F              ; hl - memory location of top pixel row
 56+  AD0F              ; bc - screen coords, b horiz, c vert
 57+  AD0F              ; Outputs:
 58+  AD0F              ; e - 0 if not empty, 1 if empty
 59+  AD0F              ;
 60+  AD0F              movement_lineaboveisempty:
 61+  AD0F 7E               ld a,(hl)                       ; get current pixel row
 62+  AD10 FE 00            cp 0
 63+  AD12 C2 1A AD         jp nz, movement_lineaboveisempty1    ; row is not empty, can't move here
 64+  AD15 16 00            ld d,0
 65+  AD17 1E 01            ld e,1                          ; got to end, so space is empty
 66+  AD19 C9               ret
 67+  AD1A              movement_lineaboveisempty1:
 68+  AD1A 16 00            ld d,0
 69+  AD1C 1E 00            ld e,0                          ; returning false, ie space not empty
 70+  AD1E C9               ret
 71+  AD1F
 72+  AD1F              ;
 73+  AD1F              ; Checks the contents of a cell are diggable - ie, all pixel rows are dirt or empty
 74+  AD1F              ; Inputs:
 75+  AD1F              ; hl - memory location of top pixel row
 76+  AD1F              ; bc - screen coords, b horiz, c vert
 77+  AD1F              ; Outputs:
 78+  AD1F              ; none - puts player into digging mode
 79+  AD1F              ;
 80+  AD1F              movement_spaceisdiggable:
 81+  AD1F 3E 08            ld a,8                          ; 8 rows to check
 82+  AD21              movement_spaceisdiggable0:
 83+  AD21 08               ex af,af'                       ; store the loop counter
 84+  AD22 7E               ld a,(hl)                       ; get current pixel row
 85+  AD23 FE 00            cp 0
 86+  AD25 CA 35 AD         jp z, movement_spaceisdiggable2  ; row is empty, can dig here
 87+  AD28 FE 55            cp 85
 88+  AD2A CA 35 AD         jp z, movement_spaceisdiggable2  ; row is dirt, can dig here
 89+  AD2D FE AA            cp 170
 90+  AD2F CA 35 AD         jp z, movement_spaceisdiggable2  ; row is dirt, can dig here
 91+  AD32 C3 4D AD         jp movement_spaceisdiggable1     ; otherwise, stop checking
 92+  AD35              movement_spaceisdiggable2:
 93+  AD35 79               ld a,c                          ; load the vertical coord
 94+  AD36 3C               inc a                           ; next row down
 95+  AD37 11 20 00         ld de,32
 96+  AD3A 19               add hl,de                       ; otherwise, just go one down for hl, which means add 32, because of course
 97+  AD3B 4F               ld c,a                          ; copy vert coord back to c
 98+  AD3C 08               ex af,af'                       ; get loop counter back
 99+  AD3D 3D               dec a                           ; decrease loop counter
100+  AD3E C2 21 AD         jp nz, movement_spaceisdiggable0
101+  AD41 21 93 AE         ld hl,player+6
102+  AD44 36 01            ld (hl),1                       ; set the player into digging mode
103+  AD46 23               inc hl
104+  AD47 36 05            ld (hl),5                      ; set the number of frame to dig for
105+  AD49 23               inc hl
106+  AD4A 36 08            ld (hl),8                       ; set the number of pixels to dig
107+  AD4C C9               ret
108+  AD4D              movement_spaceisdiggable1:
109+  AD4D 21 93 AE         ld hl,player+6
110+  AD50 36 00            ld (hl),0                       ; set the player out of digging mode
111+  AD52 C9               ret
112+  AD53
113+  AD53              ;
114+  AD53              ; Checks the contents of a cell below are diggable - ie, at least one pixel row has dirt. If the first one isn't dirt, stop
115+  AD53              ; Inputs:
116+  AD53              ; hl - memory location of top pixel row
117+  AD53              ; bc - screen coords, b horiz, c vert
118+  AD53              ; Outputs:
119+  AD53              ; none - puts player into digging mode
120+  AD53              ;
121+  AD53              movement_spacebelowisdiggable:
122+  AD53 7E               ld a,(hl)                       ; get first pixel row
123+  AD54 FE 55            cp 85
124+  AD56 CA 61 AD         jp z, movement_spacebelowisdiggable3  ; row is dirt, can dig here
125+  AD59 FE AA            cp 170
126+  AD5B CA 61 AD         jp z, movement_spacebelowisdiggable3  ; row is dirt, can dig here
127+  AD5E C3 4D AD         jp movement_spaceisdiggable1    ; the first row is not dirt, so don't bother checking the rest, can't dig
128+  AD61              movement_spacebelowisdiggable3:
129+  AD61 3E 08            ld a,8                          ; rows to check
130+  AD63 1E 00            ld e,0                          ; count of rows to dig
131+  AD65              movement_spacebelowisdiggable0:
132+  AD65 08               ex af,af'                       ; store the loop counter
133+  AD66 7E               ld a,(hl)                       ; get current pixel row
134+  AD67 FE 55            cp 85
135+  AD69 CA 74 AD         jp z, movement_spacebelowisdiggable4  ; row is dirt, can dig here
136+  AD6C FE AA            cp 170
137+  AD6E CA 74 AD         jp z, movement_spacebelowisdiggable4  ; row is dirt, can dig here
138+  AD71 C3 83 AD         jp movement_spacebelowisdiggable5     ; don't count this row and stop counting
139+  AD74              movement_spacebelowisdiggable4:
140+  AD74 1C               inc e                           ; inc count of rows to dig
141+  AD75              movement_spacebelowisdiggable2:
142+  AD75 79               ld a,c                          ; load the vertical coord
143+  AD76 3C               inc a                           ; next row down
144+  AD77 D5               push de                         ; need e for later
145+  AD78 11 20 00         ld de,32
146+  AD7B 19               add hl,de                       ; otherwise, just go one down for hl, which means add 32, because of course
147+  AD7C 4F               ld c,a                          ; copy vert coord back to c
148+  AD7D D1               pop de                          ; get e back
149+  AD7E 08               ex af,af'                       ; get loop counter back
150+  AD7F 3D               dec a                           ; incease loop counter
151+  AD80 C2 65 AD         jp nz, movement_spacebelowisdiggable0
152+  AD83              movement_spacebelowisdiggable5:
153+  AD83 21 93 AE         ld hl,player+6
154+  AD86 36 01            ld (hl),1                       ; set the player into digging mode
155+  AD88 23               inc hl
156+  AD89 36 05            ld (hl),5                      ; set the number of frame to dig for
157+  AD8B 23               inc hl
158+  AD8C 73               ld (hl),e                       ; set the number of pixels to dig
159+  AD8D C9               ret
160+  AD8E              movement_spacebelowisdiggable1:
161+  AD8E 21 93 AE         ld hl,player+6
162+  AD91 36 00            ld (hl),0                       ; set the player out of digging mode
163+  AD93 C9               ret
164+  AD94
165+  AD94              ;
166+  AD94              ; Checks the contents of a cell above are diggable - ie, at least one pixel row has dirt. If the first one isn't dirt, stop
167+  AD94              ; Inputs:
168+  AD94              ; hl - memory location of top pixel row
169+  AD94              ; bc - screen coords, b horiz, c vert
170+  AD94              ; Outputs:
171+  AD94              ; none - puts player into digging mode
172+  AD94              ;
173+  AD94              movement_spaceaboveisdiggable:
174+  AD94 7E               ld a,(hl)                       ; get first pixel row
175+  AD95 FE 55            cp 85
176+  AD97 CA A2 AD         jp z, movement_spaceaboveisdiggable3  ; row is dirt, can dig here
177+  AD9A FE AA            cp 170
178+  AD9C CA A2 AD         jp z, movement_spaceaboveisdiggable3  ; row is dirt, can dig here
179+  AD9F C3 4D AD         jp movement_spaceisdiggable1    ; the first row is not dirt, so don't bother checking the rest, can't dig
180+  ADA2              movement_spaceaboveisdiggable3:
181+  ADA2 3E 08            ld a,8                          ; rows to check
182+  ADA4 1E 00            ld e,0                          ; count of rows to dig
183+  ADA6              movement_spaceaboveisdiggable0:
184+  ADA6 08               ex af,af'                       ; store the loop counter
185+  ADA7 7E               ld a,(hl)                       ; get current pixel row
186+  ADA8 FE 55            cp 85
187+  ADAA CA B5 AD         jp z, movement_spaceaboveisdiggable4  ; row is dirt, can dig here
188+  ADAD FE AA            cp 170
189+  ADAF CA B5 AD         jp z, movement_spaceaboveisdiggable4  ; row is dirt, can dig here
190+  ADB2 C3 C5 AD         jp movement_spaceaboveisdiggable5     ; don't count this row and stop counting
191+  ADB5              movement_spaceaboveisdiggable4:
192+  ADB5 1C               inc e                           ; inc count of rows to dig
193+  ADB6              movement_spaceaboveisdiggable2:
194+  ADB6 79               ld a,c                          ; load the vertical coord
195+  ADB7 3D               dec a                           ; next row up
196+  ADB8 D5               push de                         ; need e for later
197+  ADB9 11 20 00         ld de,32
198+  ADBC ED 52            sbc hl,de                       ; otherwise, just go one up for hl, which means sub 32, because of course
199+  ADBE 4F               ld c,a                          ; copy vert coord back to c
200+  ADBF D1               pop de                          ; get e back
201+  ADC0 08               ex af,af'                       ; get loop counter back
202+  ADC1 3D               dec a                           ; incease loop counter
203+  ADC2 C2 A6 AD         jp nz, movement_spaceaboveisdiggable0
204+  ADC5              movement_spaceaboveisdiggable5:
205+  ADC5 21 93 AE         ld hl,player+6
206+  ADC8 36 01            ld (hl),1                       ; set the player into digging mode
207+  ADCA 23               inc hl
208+  ADCB 36 05            ld (hl),5                       ; set the number of frame to dig for
209+  ADCD 23               inc hl
210+  ADCE 73               ld (hl),e                       ; set the number of pixels to dig
211+  ADCF C9               ret
212+  ADD0              movement_spaceaboveisdiggable1:
213+  ADD0 21 93 AE         ld hl,player+6
214+  ADD3 36 00            ld (hl),0                       ; set the player out of digging mode
215+  ADD5 C9               ret
216+  ADD6
217+  ADD6              ;
218+  ADD6              ; Checks if the player can move down
219+  ADD6              ; Inputs:
220+  ADD6              ; bc - player coords, b horiz, c vert
221+  ADD6              ; Outputs:
222+  ADD6              ; de - 1 can move
223+  ADD6              movement_checkcanmove_down:
224+  ADD6 F5               push af
225+  ADD7 C5               push bc
226+  ADD8 CD A2 A3         call sprites_scadd              ; get the memory location of cell into de
227+  ADDB 62 6B            ld hl,de                        ; look at cell directly underneath (add 256)
228+  ADDD 24               inc h                       ; memory location of cell beneath now in hl
229+  ADDE CD FF AC         call movement_linebelowisempty       ; check space is empty
230+  ADE1 7B               ld a,e                          ; check space empty flag
231+  ADE2 FE 00            cp 0
232+  ADE4 CA ED AD         jp z, movement_checkcanmove_down1 ; can't move
233+  ADE7 CD D0 AE         call player_justmoved
234+  ADEA C1               pop bc
235+  ADEB F1               pop af
236+  ADEC C9               ret
237+  ADED              movement_checkcanmove_down1:
238+  ADED C1               pop bc
239+  ADEE CD A2 A3         call sprites_scadd              ; get the memory location of cell into de
240+  ADF1 62 6B            ld hl,de                        ; look at cell directly underneath (add 256)
241+  ADF3 24               inc h
242+  ADF4 C5               push bc
243+  ADF5 CD 53 AD         call movement_spacebelowisdiggable    ; can't move here, but can we dig
244+  ADF8 11 00 00         ld de,0
245+  ADFB C1               pop bc
246+  ADFC F1               pop af
247+  ADFD C9               ret
248+  ADFE
249+  ADFE              ;
250+  ADFE              ; Checks if the player can move up
251+  ADFE              ; Inputs:
252+  ADFE              ; bc - player coords, b horiz, c vert
253+  ADFE              ; Outputs:
254+  ADFE              ; de - 1 can move
255+  ADFE              movement_checkcanmove_up:
256+  ADFE F5               push af
257+  ADFF C5               push bc
258+  AE00 CD A2 A3         call sprites_scadd              ; get the memory location of cell into de
259+  AE03 62 6B            ld hl,de                        ; look at cell directly above (subtract 32)
260+  AE05 11 20 00         ld de,32
261+  AE08 ED 52            sbc hl,de                       ; memory location of line above now in hl
262+  AE0A CD 0F AD         call movement_lineaboveisempty       ; check space is empty
263+  AE0D 7B               ld a,e                          ; check space empty flag
264+  AE0E FE 00            cp 0
265+  AE10 CA 1B AE         jp z, movement_checkcanmove_up1 ; can't move
266+  AE13 1E 01            ld e,1
267+  AE15 CD D0 AE         call player_justmoved
268+  AE18 C1               pop bc
269+  AE19 F1               pop af
270+  AE1A C9               ret
271+  AE1B              movement_checkcanmove_up1:
272+  AE1B C1               pop bc
273+  AE1C CD A2 A3         call sprites_scadd              ; get the memory location of cell into de
274+  AE1F 62 6B            ld hl,de                        ; look at cell directly above (subtract 32)
275+  AE21 11 20 00         ld de,32
276+  AE24 ED 52            sbc hl,de                       ; memory location of line above now in hl
277+  AE26 C5               push bc
278+  AE27 CD 94 AD         call movement_spaceaboveisdiggable    ; can't move here, but can we dig
279+  AE2A 11 00 00         ld de,0
280+  AE2D C1               pop bc
281+  AE2E F1               pop af
282+  AE2F C9               ret
283+  AE30
284+  AE30              ;
285+  AE30              ; Checks if the player can move right
286+  AE30              ; Inputs:
287+  AE30              ; bc - player coords, b horiz, c vert
288+  AE30              ; Outputs:
289+  AE30              ; de - 1 can move
290+  AE30              movement_checkcanmove_right:
291+  AE30 F5               push af
292+  AE31 C5               push bc
293+  AE32 CD A2 A3         call sprites_scadd              ; get the memory location of cell into de
294+  AE35 62 6B            ld hl,de                        ; look at cell directly to the right (add 1)
295+  AE37 23               inc hl                          ; memory location of cell to the right now in hl
296+  AE38 CD E0 AC         call movement_spaceisempty       ; check space is empty
297+  AE3B 7B               ld a,e                          ; check space empty flag
298+  AE3C FE 00            cp 0
299+  AE3E CA 47 AE         jp z, movement_checkcanmove_right1 ; can't move
300+  AE41 CD D0 AE         call player_justmoved
301+  AE44 C1               pop bc
302+  AE45 F1               pop af
303+  AE46 C9               ret
304+  AE47              movement_checkcanmove_right1:
305+  AE47 C1               pop bc
306+  AE48 CD A2 A3         call sprites_scadd              ; get the memory location of cell into de
307+  AE4B 62 6B            ld hl,de
308+  AE4D 23               inc hl                          ; memory location of cell to the right now in hl
309+  AE4E C5               push bc
310+  AE4F CD 1F AD         call movement_spaceisdiggable    ; can't move here, but can we dig
311+  AE52 11 00 00         ld de,0
312+  AE55 C1               pop bc
313+  AE56 F1               pop af
314+  AE57 C9               ret
315+  AE58
316+  AE58              ;
317+  AE58              ; Checks if the player can move left
318+  AE58              ; Inputs:
319+  AE58              ; bc - player coords, b horiz, c vert
320+  AE58              ; Outputs:
321+  AE58              ; de - 1 can move
322+  AE58              movement_checkcanmove_left:
323+  AE58 F5               push af
324+  AE59 C5               push bc
325+  AE5A CD A2 A3         call sprites_scadd              ; get the memory location of cell into de
326+  AE5D 62 6B            ld hl,de                        ; look at cell directly to the right (add 1)
327+  AE5F 2B               dec hl                          ; memory location of cell to the right now in hl
328+  AE60 CD E0 AC         call movement_spaceisempty       ; check space is empty
329+  AE63 7B               ld a,e                          ; check space empty flag
330+  AE64 FE 00            cp 0
331+  AE66 CA 6F AE         jp z, movement_checkcanmove_left1 ; can't move
332+  AE69 CD D0 AE         call player_justmoved
333+  AE6C C1               pop bc
334+  AE6D F1               pop af
335+  AE6E C9               ret
336+  AE6F              movement_checkcanmove_left1:
337+  AE6F C1               pop bc
338+  AE70 CD A2 A3         call sprites_scadd              ; get the memory location of cell into de
339+  AE73 62 6B            ld hl,de
340+  AE75 2B               dec hl                          ; memory location of cell to the right now in hl
341+  AE76 C5               push bc
342+  AE77 CD 1F AD         call movement_spaceisdiggable    ; can't move here, but can we dig
343+  AE7A 11 00 00         ld de,0
344+  AE7D C1               pop bc
345+  AE7E F1               pop af
346+  AE7F C9               ret
# file closed: game/movement.asm
 32   AE80                  include "game\game.asm"
# file opened: game/game.asm
  1+  AE80              ;
  2+  AE80              ; The current frame count, incremented each frame
  3+  AE80              ;
  4+  AE80              game_framenumber:
  5+  AE80 00               defb    0
  6+  AE81
  7+  AE81              ;
  8+  AE81              ; Increment frame number by 1
  9+  AE81              ;
 10+  AE81              game_incrementframe:
 11+  AE81 3A 80 AE         ld a,(game_framenumber)
 12+  AE84 3C               inc a
 13+  AE85 32 80 AE         ld (game_framenumber),a
 14+  AE88 C9               ret
 15+  AE89
 16+  AE89              ;
 17+  AE89              ; Returns current frame
 18+  AE89              ; Outputs:
 19+  AE89              ; a - current frame
 20+  AE89              ;
 21+  AE89              game_getcurrentframe:
 22+  AE89 3A 80 AE         ld a,(game_framenumber)
 23+  AE8C C9               ret
# file closed: game/game.asm
 33   AE8D                  include "game\player.asm"
# file opened: game/player.asm
  1+  AE8D              ;
  2+  AE8D              ;   Data for current player
  3+  AE8D              ;   horiz,vert,dir (0 up, 1 left, 2 right, 3 down), frame, frame transition count,move remaining, is digging (0 no), digging count, pixels to dig
  4+  AE8D              player:
  5+  AE8D 00 00 02 00      defb    0,0,2,0,1,0,0,0,0
  5+  AE91 01 00 00 00
  5+  AE95 00
  6+  AE96              ;
  7+  AE96              ; Initializes a player
  8+  AE96              ;
  9+  AE96              player_init:
 10+  AE96 ED 4B 10 80      ld bc,(start_coord)
 11+  AE9A ED 43 8D AE      ld (player),bc
 12+  AE9E C9               ret
 13+  AE9F
 14+  AE9F              ;
 15+  AE9F              ; Draws the player at the current position or deletes them
 16+  AE9F              ;
 17+  AE9F              player_drawplayer:
 18+  AE9F 3A 8F AE         ld a,(player+2)             ; get the current direction
 19+  AEA2 FE 03            cp 3
 20+  AEA4 C2 A9 AE         jp nz,player_drawplayer0
 21+  AEA7 3E 00            ld a,0                      ; if 3, then down, so set the direction to 0 since the sprite is the same as up
 22+  AEA9              player_drawplayer0:
 23+  AEA9 5F               ld e,a                      ; store in e
 24+  AEAA 3A 93 AE         ld a,(player+6)             ; get the dig flag
 25+  AEAD FE 01            cp 1
 26+  AEAF CA B9 AE         jp z,player_drawplayer1    ; get dig frame
 27+  AEB2 3A 90 AE         ld a,(player+3)             ; this is normal movement so get the current frame
 28+  AEB5 83               add a,e
 29+  AEB6 C3 BE AE         jp player_drawplayer2
 30+  AEB9              player_drawplayer1
 31+  AEB9 3A 8F AE         ld a,(player+2)             ; get the current direction again, because want all four
 32+  AEBC C6 06            add a,6                     ; add direction to 6 to get frame
 33+  AEBE              player_drawplayer2
 34+  AEBE 07               rlca
 35+  AEBF 07               rlca
 36+  AEC0 07               rlca                        ; multiply by eight
 37+  AEC1 6F               ld l,a
 38+  AEC2 26 00            ld h,0
 39+  AEC4 11 07 AA         ld de,player_sprite
 40+  AEC7 19               add hl,de                   ; load hl with the location of the player sprite data
 41+  AEC8 ED 4B 8D AE      ld bc,(player)              ; load bc with the start coords
 42+  AECC CD 5F A3         call sprites_drawsprite     ; call the routine to draw the sprite
 43+  AECF C9               ret
 44+  AED0
 45+  AED0
 46+  AED0              ;
 47+  AED0              ; Runs after the player just moved. Changes animation frame if required
 48+  AED0              ;
 49+  AED0              player_justmoved:
 50+  AED0 D9               exx
 51+  AED1 3A 91 AE         ld a,(player+4)             ; get the transition count
 52+  AED4 FE 00            cp 0
 53+  AED6 CA DC AE         jp z, player_justmoved2     ; if zero reset and change the frame
 54+  AED9 C3 F6 AE         jp player_justmoved1       ; otherwise decrease and continue
 55+  AEDC              player_justmoved2:
 56+  AEDC                  ; reset and change frame in here
 57+  AEDC 3E 01            ld a,1
 58+  AEDE 32 91 AE         ld (player+4),a            ; reset back to whatever
 59+  AEE1 3A 90 AE         ld a,(player+3)             ; load the frame
 60+  AEE4 FE 03            cp 3                       ; flip between 3 and 0
 61+  AEE6 C2 EE AE         jp nz, player_justmoved4
 62+  AEE9 3E 00            ld a,0
 63+  AEEB C3 F0 AE         jp player_justmoved5
 64+  AEEE              player_justmoved4:
 65+  AEEE 3E 03            ld a,3
 66+  AEF0              player_justmoved5:
 67+  AEF0 32 90 AE         ld (player+3),a           ; save back
 68+  AEF3 C3 FA AE         jp player_justmoved3
 69+  AEF6              player_justmoved1:
 70+  AEF6                  ; decrease count
 71+  AEF6 3D               dec a
 72+  AEF7 32 91 AE         ld (player+4),a
 73+  AEFA              player_justmoved3:
 74+  AEFA D9               exx;
 75+  AEFB C9               ret
# file closed: game/player.asm
 34   AEFC                  include "game\ship.asm"
# file opened: game/ship.asm
  1+  AEFC              ;
  2+  AEFC              ; Ship initial position: vert,horiz
  3+  AEFC              ;
  4+  AEFC              ship_initpos:
  5+  AEFC 00 24            defb 0,36
  6+  AEFE              ship_initpos2:
  7+  AEFE 00 00            defb 0,0
  8+  AF00              ship_frame:
  9+  AF00 00               defb 0
 10+  AF01              ;
 11+  AF01              ; The current memory location
 12+  AF01              ;
 13+  AF01              ship_current_sprite:
 14+  AF01 00 00            defb 0,0
 15+  AF03
 16+  AF03              ship_current_coords:
 17+  AF03 00 00            defb 0,0
 18+  AF05
 19+  AF05              ;
 20+  AF05              ;   Draw and land the ship - first move the ship down, then across, drawing the player in the middle
 21+  AF05              ;
 22+  AF05              ship_land:
 23+  AF05 ED 4B FC AE      ld bc,(ship_initpos)
 24+  AF09 ED 43 FE AE      ld (ship_initpos2),bc        ; save the initial position for later use
 25+  AF0D 1E 00            ld e,0                      ; store a flag to track first time round
 26+  AF0F 06 09            ld b,9                      ; move down 8 pixels
 27+  AF11              ship_land0:
 28+  AF11 C5               push bc
 29+  AF12 7B               ld a,e
 30+  AF13 D5               push de                     ; store de for next time round
 31+  AF14 FE 01            cp 1                        ; check first time flag
 32+  AF16 C2 2B AF         jp nz,ship_land1             ; don't draw over previous one if first time
 33+  AF19 CD 84 AF         call ship_draw_full         ; delete old one
 34+  AF1C CD 68 AF         call ship_change_frame      ; increment the frame
 35+  AF1F ED 4B FE AE      ld bc,(ship_initpos2)       ; get the current coords
 36+  AF23 81 C6 01         add c,1                     ; move down one pixels
 37+  AF26 4F               ld c,a
 38+  AF27 ED 43 FE AE      ld (ship_initpos2),bc
 39+  AF2B              ship_land1:
 40+  AF2B CD 84 AF         call ship_draw_full         ; draw the ship
 41+  AF2E CD 7D AF         call ship_draw_screen
 42+  AF31 D1               pop de
 43+  AF32 1E 01            ld e,1
 44+  AF34 C1               pop bc
 45+  AF35 10 DA            djnz ship_land0             ; repeat for downward movement
 46+  AF37                  ; done moving down
 47+  AF37                  ; now move across
 48+  AF37 CD 9F AE         call player_drawplayer      ; draw player
 49+  AF3A CD 84 AF         call ship_draw_full         ; delete old one
 50+  AF3D 1E 00            ld e,0                      ; store a flag to track first time round
 51+  AF3F 06 14            ld b,20                      ; move back 20 pixels pixels
 52+  AF41              ship_land3:
 53+  AF41 C5               push bc
 54+  AF42 7B               ld a,e
 55+  AF43 D5               push de                     ; store de for next time round
 56+  AF44 FE 01            cp 1                        ; check first time flag
 57+  AF46 C2 5B AF         jp nz,ship_land2             ; don't draw over previous one if first time
 58+  AF49 CD 84 AF         call ship_draw_full         ; delete old one
 59+  AF4C CD 68 AF         call ship_change_frame      ; increment the frame
 60+  AF4F ED 4B FE AE      ld bc,(ship_initpos2)       ; get the current coords
 61+  AF53 78               ld a,b
 62+  AF54 D6 01            sub 1                       ; move back one pixels
 63+  AF56 47               ld b,a
 64+  AF57 ED 43 FE AE      ld (ship_initpos2),bc
 65+  AF5B              ship_land2:
 66+  AF5B CD 84 AF         call ship_draw_full         ; draw the ship
 67+  AF5E CD 7D AF         call ship_draw_screen       ; draw the frame to screen by clearing the buffer
 68+  AF61 D1               pop de
 69+  AF62 1E 01            ld e,1                      ; set e to 1 to indicate >1 time
 70+  AF64 C1               pop bc
 71+  AF65 10 DA            djnz ship_land3             ; repeat for vertical movement
 72+  AF67 C9               ret
 73+  AF68
 74+  AF68              ;
 75+  AF68              ; Swap the animation frame between 0 and 32. This will be added to the memory location later
 76+  AF68              ;
 77+  AF68              ship_change_frame:
 78+  AF68 F5               push af
 79+  AF69 3A 00 AF         ld a,(ship_frame)
 80+  AF6C FE 00            cp 0
 81+  AF6E CA 76 AF         jp z,ship_change_frame0
 82+  AF71 3E 00            ld a,0                      ; flip to 0
 83+  AF73 C3 78 AF         jp ship_change_frame1
 84+  AF76              ship_change_frame0:
 85+  AF76 3E 20            ld a,32                      ; flip to 32
 86+  AF78              ship_change_frame1:
 87+  AF78 32 00 AF         ld (ship_frame),a            ; save the frame
 88+  AF7B F1               pop af
 89+  AF7C C9               ret
 90+  AF7D
 91+  AF7D              ship_draw_screen:
 92+  AF7D 76               halt
 93+  AF7E F3               di
 94+  AF7F CD 76 A1         call screen_buffertoscreen  ; copy buffer to screen
 95+  AF82 FB               ei                          ; enable interupts
 96+  AF83 C9               ret
 97+  AF84
 98+  AF84              ship_draw_full:
 99+  AF84 21 57 AA         ld hl,ship_sprite
100+  AF87 ED 4B FE AE      ld bc,(ship_initpos2)         ; load bc with the start coords
101+  AF8B 22 01 AF         ld (ship_current_sprite),hl  ; put into memory
102+  AF8E ED 43 03 AF      ld (ship_current_coords),bc  ; put into memory
103+  AF92 CD B1 AF         call ship_draw
104+  AF95 08               ex af,af'
105+  AF96 3A 00 AF         ld a,(ship_frame)            ; get the animation frame
106+  AF99 16 00            ld d,0
107+  AF9B 5F               ld e,a
108+  AF9C 19               add hl,de
109+  AF9D 22 01 AF         ld (ship_current_sprite),hl  ; put into memory
110+  AFA0 08               ex af,af'
111+  AFA1 ED 4B FE AE      ld bc,(ship_initpos2)         ; load bc with the start coords
112+  AFA5 81 C6 08         add c,8                      ; move one line down
113+  AFA8 4F               ld c,a
114+  AFA9 ED 43 03 AF      ld (ship_current_coords),bc  ; put into memory
115+  AFAD CD B1 AF         call ship_draw
116+  AFB0 C9               ret
117+  AFB1
118+  AFB1              ;
119+  AFB1              ; Draw the ship
120+  AFB1              ; Inputs:
121+  AFB1              ; None, all in memory
122+  AFB1              ;
123+  AFB1              ship_draw:
124+  AFB1 3E 04            ld a,4                              ; 4 pieces per half
125+  AFB3              ship_draw0:
126+  AFB3 F5               push af
127+  AFB4 2A 01 AF         ld hl,(ship_current_sprite)
128+  AFB7 ED 4B 03 AF      ld bc,(ship_current_coords)         ; load bc with the start coords
129+  AFBB CD 5F A3         call sprites_drawsprite
130+  AFBE 2A 01 AF         ld hl,(ship_current_sprite)
131+  AFC1 ED 4B 03 AF      ld bc,(ship_current_coords)         ; load bc with the start coords
132+  AFC5 11 08 00         ld de,8
133+  AFC8 19               add hl,de
134+  AFC9 80 C6 08         add b,8
135+  AFCC 47               ld b,a
136+  AFCD 22 01 AF         ld (ship_current_sprite),hl         ; put into memory
137+  AFD0 ED 43 03 AF      ld (ship_current_coords),bc         ; put into memory
138+  AFD4 F1               pop af
139+  AFD5 3D               dec a
140+  AFD6 FE 00            cp 0
141+  AFD8 C2 B3 AF         jp nz,ship_draw0
142+  AFDB
143+  AFDB C9               ret
144+  AFDC
# file closed: game/ship.asm
 35   AFDC                  include "game\tank.asm"
# file opened: game/tank.asm
  1+  AFDC              ;
  2+  AFDC              ; tank initial position: vert,horiz
  3+  AFDC              ;
  4+  AFDC              tank_initpos:
  5+  AFDC 10 D0            defb 16,208
  6+  AFDE              tank_initpos2:
  7+  AFDE 00 00            defb 0,0
  8+  AFE0              tank_frame:
  9+  AFE0 00               defb 0
 10+  AFE1              tank_anim:
 11+  AFE1 11               defb 17
 12+  AFE2              ;
 13+  AFE2              ; The current memory location
 14+  AFE2              ;
 15+  AFE2              tank_current_sprite:
 16+  AFE2 00 00            defb 0,0
 17+  AFE4
 18+  AFE4              tank_current_coords:
 19+  AFE4 00 00            defb 0,0
 20+  AFE6
 21+  AFE6              ;
 22+  AFE6              ; Initialise the tank
 23+  AFE6              ;
 24+  AFE6              tank_init:
 25+  AFE6 ED 4B DC AF      ld bc,(tank_initpos)
 26+  AFEA ED 43 DE AF      ld (tank_initpos2),bc       ; save the initial position for later use
 27+  AFEE C9               ret
 28+  AFEF
 29+  AFEF              ;
 30+  AFEF              ;   Draw and move the tank
 31+  AFEF              ;   Start processing at frame 200
 32+  AFEF              ;   Don't move if anim is zero
 33+  AFEF              ;   Decrement frame if moved
 34+  AFEF              ;
 35+  AFEF              tank_process:
 36+  AFEF 3A E1 AF         ld a,(tank_anim)
 37+  AFF2 FE 00            cp 0
 38+  AFF4 C8               ret z                       ; return if we've already moved
 39+  AFF5 CD 89 AE         call game_getcurrentframe   ; get the current frame number into a
 40+  AFF8 FE 4B            cp 75
 41+  AFFA D8               ret c                       ; return if the frame number is below 100
 42+  AFFB CD 06 B0         call tank_move              ; move tank if not
 43+  AFFE 3A E1 AF         ld a,(tank_anim)
 44+  B001 3D               dec a
 45+  B002 32 E1 AF         ld (tank_anim),a            ; decrease the anim count
 46+  B005 C9               ret
 47+  B006
 48+  B006              tank_move:
 49+  B006 ED 4B DE AF      ld bc,(tank_initpos2)
 50+  B00A C5               push bc
 51+  B00B 3A E1 AF         ld a,(tank_anim)
 52+  B00E FE 11            cp 17                       ; check first time flag
 53+  B010 CA 22 B0         jp z,tank_move1             ; don't draw over previous one if first time
 54+  B013 CD 27 B0         call tank_draw_full         ; delete old one
 55+  B016 ED 4B DE AF      ld bc,(tank_initpos2)       ; get the current coords
 56+  B01A 78               ld a,b
 57+  B01B D6 01            sub 1                       ; move back one pixels
 58+  B01D 47               ld b,a
 59+  B01E ED 43 DE AF      ld (tank_initpos2),bc
 60+  B022              tank_move1:
 61+  B022 CD 27 B0         call tank_draw_full         ; draw the tank
 62+  B025 C1               pop bc
 63+  B026 C9               ret
 64+  B027
 65+  B027              tank_draw_full:
 66+  B027 21 B7 AA         ld hl,tank_sprite
 67+  B02A ED 4B DE AF      ld bc,(tank_initpos2)         ; load bc with the start coords
 68+  B02E 22 E2 AF         ld (tank_current_sprite),hl  ; put into memory
 69+  B031 ED 43 E4 AF      ld (tank_current_coords),bc  ; put into memory
 70+  B035 CD 54 B0         call tank_draw
 71+  B038 08               ex af,af'
 72+  B039 3A E0 AF         ld a,(tank_frame)            ; get the animation frame
 73+  B03C 16 00            ld d,0
 74+  B03E 5F               ld e,a
 75+  B03F 19               add hl,de
 76+  B040 22 E2 AF         ld (tank_current_sprite),hl  ; put into memory
 77+  B043 08               ex af,af'
 78+  B044 ED 4B DE AF      ld bc,(tank_initpos2)         ; load bc with the start coords
 79+  B048 81 C6 08         add c,8                      ; move one line down
 80+  B04B 4F               ld c,a
 81+  B04C ED 43 E4 AF      ld (tank_current_coords),bc  ; put into memory
 82+  B050 CD 54 B0         call tank_draw
 83+  B053 C9               ret
 84+  B054
 85+  B054              ;
 86+  B054              ; Draw the tank
 87+  B054              ; Inputs:
 88+  B054              ; None, all in memory
 89+  B054              ;
 90+  B054              tank_draw:
 91+  B054 3E 04            ld a,4                              ; 4 pieces per half
 92+  B056              tank_draw0:
 93+  B056 F5               push af
 94+  B057 2A E2 AF         ld hl,(tank_current_sprite)
 95+  B05A ED 4B E4 AF      ld bc,(tank_current_coords)         ; load bc with the start coords
 96+  B05E CD 5F A3         call sprites_drawsprite
 97+  B061 2A E2 AF         ld hl,(tank_current_sprite)
 98+  B064 ED 4B E4 AF      ld bc,(tank_current_coords)         ; load bc with the start coords
 99+  B068 11 08 00         ld de,8
100+  B06B 19               add hl,de
101+  B06C 80 C6 08         add b,8
102+  B06F 47               ld b,a
103+  B070 22 E2 AF         ld (tank_current_sprite),hl         ; put into memory
104+  B073 ED 43 E4 AF      ld (tank_current_coords),bc         ; put into memory
105+  B077 F1               pop af
106+  B078 3D               dec a
107+  B079 FE 00            cp 0
108+  B07B C2 56 B0         jp nz,tank_draw0
109+  B07E
110+  B07E C9               ret
111+  B07F
# file closed: game/tank.asm
 36   B07F
 37   B07F              ;===========================================================================
 38   B07F              ; main routine - the code execution starts here.
 39   B07F              ; Sets up the new interrupt routine, the memory
 40   B07F              ; banks and jumps to the start loop.
 41   B07F              ;===========================================================================
 42   B07F              main:
 43   B07F
 44   B07F                  ; Setup stack
 45   B07F 31 76 B1         ld sp,stack_top
 46   B082
 47   B082                  ; Draw the title screen
 48   B082 CD C7 A3         call titlescreen_show
 49   B085
 50   B085 CD 00 80         call init_start
 51   B088 CD 1C A2         call screen_draw
 52   B08B CD 96 AE         call player_init
 53   B08E CD 05 AF         call ship_land              ; land the ship
 54   B091 CD E6 AF         call tank_init
 55   B094
 56   B094              mloop:
 57   B094 76               halt
 58   B095 F3               di
 59   B096 CD 76 A1         call screen_buffertoscreen  ; copy buffer to screen
 60   B099 FB               ei                          ; enable interupts
 61   B09A
 62   B09A CD 9F AE         call player_drawplayer      ; delete player
 63   B09D CD FF AA         call control_keyboard       ; check keyboard
 64   B0A0 CD 9F AE         call player_drawplayer      ; draw player
 65   B0A3 CD EF AF         call tank_process           ; prcoess the tank
 66   B0A6
 67   B0A6 CD 81 AE         call game_incrementframe    ; increment the game frame
 68   B0A9
 69   B0A9 C3 94 B0         jp mloop
 70   B0AC
 71   B0AC              ;===========================================================================
 72   B0AC              ; Stack.
 73   B0AC              ;===========================================================================
 74   B0AC
 75   B0AC              ; Stack: this area is reserved for the stack
 76   B0AC              STACK_SIZE: equ 100    ; in words
 77   B0AC
 78   B0AC              ; Reserve stack space
 79   B0AC 00 00            defw 0  ; WPMEM, 2
 80   B0AE              stack_bottom:
 81   B0AE 00 00 00...      defs    STACK_SIZE*2, 0
 82   B176              stack_top:
 83   B176 00 00            defw 0  ; WPMEM, 2
 84   B178
 85   B178                     SAVESNA "ThePit.sna", main
# file closed: main.asm
