# file opened: main.asm
  1   0000                  DEVICE ZXSPECTRUM48
  2   0000
  3   0000                  ORG $8000
  4   8000
  5   8000              ;===========================================================================
  6   8000              ; Persistent watchpoint.
  7   8000              ; Change WPMEMx (remove the 'x' from WPMEMx) below to activate.
  8   8000              ; If you do so the program will hit a breakpoint when it tries to
  9   8000              ; write to the first byte of the 3rd line.
 10   8000              ; When program breaks in the fill_memory sub routine please hover over hl
 11   8000              ; to see that it contains 0x5804 or COLOR_SCREEN+64.
 12   8000              ;===========================================================================
 13   8000
 14   8000              ; WPMEMx 0x5840, 1, w
 15   8000
 16   8000
 17   8000              ;===========================================================================
 18   8000              ; Include modules
 19   8000              ;===========================================================================
 20   8000                  include "init.asm"
# file opened: init.asm
  1+  8000              ;
  2+  8000              ; Set up at start up
  3+  8000              ;
  4+  8000              init_start:
  5+  8000              ; We want a black screen.
  6+  8000
  7+  8000 3E 47            ld a,71             ; white ink (7) on black paper (0),
  8+  8002                                      ; bright (64).
  9+  8002 CD 67 80         call utilities_clearscreen
 10+  8005 32 8D 5C         ld (23693),a        ; set our screen colours.
 11+  8008 AF               xor a               ; quick way to load accumulator with zero.
 12+  8009 CD 9B 22         call 8859           ; set permanent border colours.
 13+  800C
 14+  800C 21 3A A5         ld hl,screen_offset ; reset some temp variables
 15+  800F 36 00            ld (hl),0
 16+  8011 21 3B A5         ld hl,screen_tmp
 17+  8014 36 00            ld (hl),0
 18+  8016 21 D5 A3         ld hl,buffer_tmp
 19+  8019 36 00            ld (hl),0
 20+  801B 23               inc hl
 21+  801C 36 00            ld (hl),0
 22+  801E
 23+  801E CD DE B3         call game_resetcurrentframe ; reset current frame
 24+  8021
 25+  8021 C9               ret
 26+  8022
 27+  8022              ;
 28+  8022              ;   Start coord
 29+  8022              ;   vert c, horiz b
 30+  8022              init_coord:
 31+  8022 18 30            defb 24,48
 32+  8024
 33+  8024              ;
 34+  8024              ; Number of lives to start
 35+  8024              ;
 36+  8024              init_lives:
 37+  8024 03               defb 3
 38+  8025
 39+  8025              ;
 40+  8025              ; Score to start
 41+  8025              ;
 42+  8025              init_score:
 43+  8025 30 30 30 30      defb '000000'
 43+  8029 30 30
# file closed: init.asm
 21   802B                  include "utilities.asm"
# file opened: utilities.asm
  1+  802B              ; ##########################################################################
  2+  802B              ; Print a character
  3+  802B              ; Inputs:
  4+  802B              ; b - x coord
  5+  802B              ; c - y coord
  6+  802B              ; d - character
  7+  802B              ; e - colour
  8+  802B              ; ##########################################################################
  9+  802B              utilities_print_char:
 10+  802B 7B               ld a,e
 11+  802C 32 8F 5C         ld (23695),a        ; set our temporary screen colours.
 12+  802F 3E 16            ld a,22
 13+  8031 D7               rst 16              ; Calls the Sinclair PRINT AT routine
 14+  8032 78               ld a,b              ; Gets the X co-ordinate
 15+  8033 3D               dec a
 16+  8034 D7               rst 16
 17+  8035 79               ld a,c              ; and the Y co-ordinate
 18+  8036 D7               rst 16              ; So, essentially PRINT AT X,Y; like in BASIC
 19+  8037 7A               ld a,d              ; ASCII code for udg.
 20+  8038 D7               rst 16              ; draw block.
 21+  8039 C9               ret
 22+  803A
 23+  803A
 24+  803A              ;Inputs:
 25+  803A              ;     DE and A are factors
 26+  803A              ;Outputs:
 27+  803A              ;     A is not changed
 28+  803A              ;     B is 0
 29+  803A              ;     C is not changed
 30+  803A              ;     DE is not changed
 31+  803A              ;     HL is the product
 32+  803A              ;Time:
 33+  803A              ;     342+6x
 34+  803A              ;
 35+  803A              utilities_multiply:
 36+  803A 06 08            ld b,8          ;7           7
 37+  803C 21 00 00         ld hl,0         ;10         10
 38+  803F 29               add hl,hl     ;11*8       88
 39+  8040 07               rlca          ;4*8        32
 40+  8041 30 01            jr nc,$+3     ;(12|18)*8  96+6x
 41+  8043 19                   add hl,de   ;--         --
 42+  8044 10 F9            djnz $-5      ;13*7+8     99
 43+  8046 C9               ret             ;10         10
 44+  8047
 45+  8047              utilities_waitforkey:
 46+  8047 21 08 5C         ld hl,23560         ; LAST K system variable.
 47+  804A 36 00            ld (hl),0           ; put null value there.
 48+  804C              utilities_waitforkey0:
 49+  804C 7E               ld a,(hl)           ; new value of LAST K.
 50+  804D FE 00            cp 0                ; is it still zero?
 51+  804F 28 FB            jr z,utilities_waitforkey0           ; yes, so no key pressed.
 52+  8051 C9               ret                 ; key was pressed.
 53+  8052
 54+  8052              ;
 55+  8052              ; Waits number of frames for keypress. If got, returns 1, if not 0
 56+  8052              ; Inputs:
 57+  8052              ; a - number of frames to waits
 58+  8052              ; Ouputs:
 59+  8052              ; e - 0 not pressed, 1 pressed
 60+  8052              utilities_waitforkey_forframes:
 61+  8052 21 08 5C         ld hl,23560         ; LAST K system variable.
 62+  8055 36 00            ld (hl),0           ; put null value there.
 63+  8057 47               ld b,a              ; number of frames to wait
 64+  8058              utilities_waitforkey_forframes0:
 65+  8058 7E               ld a,(hl)           ; new value of LAST K.
 66+  8059 FE 00            cp 0                ; is it still zero?
 67+  805B 28 03            jr z,utilities_waitforkey_forframes1           ; yes, so no key pressed.
 68+  805D 1E 01            ld e,1              ; set the pressed flag
 69+  805F C9               ret                 ; key was pressed.
 70+  8060              utilities_waitforkey_forframes1:
 71+  8060 76               halt                ; wait for frame
 72+  8061 76               halt                ; wait for frame
 73+  8062 10 F4            djnz utilities_waitforkey_forframes0 ; loop again
 74+  8064 1E 00            ld e,0              ; nothing pressed in time
 75+  8066 C9               ret
 76+  8067
 77+  8067              ;
 78+  8067              ; Clears the screen
 79+  8067              ; Inputs:
 80+  8067              ; a - attribute colour
 81+  8067              utilities_clearscreen:
 82+  8067 21 00 40         ld hl, 16384        ;pixels
 83+  806A 11 01 40         ld de, 16385        ;pixels + 1
 84+  806D 01 FF 17         ld bc, 6143         ;pixels area length - 1
 85+  8070 36 00            ld (hl), 0          ;set first byte to '0'
 86+  8072 ED B0            ldir                ;copy bytes
 87+  8074
 88+  8074 21 00 58         ld hl,22528         ; attr
 89+  8077 11 01 58         ld de,22529         ; attr+1
 90+  807A 01 FF 02         ld bc,767
 91+  807D 77               ld (hl),a
 92+  807E ED B0            ldir
 93+  8080 C9               ret
 94+  8081
# file closed: utilities.asm
 22   8081                  include "strings.asm"
# file opened: strings.asm
  1+  8081              string_score1:
  2+  8081 04 00 53 43      defb 4,0,'SCORE1',255
  2+  8085 4F 52 45 31
  2+  8089 FF
  3+  808A              string_scorenumbers1:
  4+  808A 04 01 30 30      defb 4,1,'000000',255
  4+  808E 30 30 30 30
  4+  8092 FF
  5+  8093              string_company:
  6+  8093 0E 00 45 4E      defb 14,0,'ENV',255
  6+  8097 56 FF
  7+  8099              string_credits:
  8+  8099 0C 01 50 4C      defb 12,1,'PLAYER 1',255
  8+  809D 41 59 45 52
  8+  80A1 20 31 FF
  9+  80A4              string_score2:
 10+  80A4 16 00 53 43      defb 22,0,'SCORE2',255
 10+  80A8 4F 52 45 32
 10+  80AC FF
 11+  80AD              string_scorenumbers2:
 12+  80AD 16 01 30 30      defb 22,1,'000000',255
 12+  80B1 30 30 30 30
 12+  80B5 FF
 13+  80B6              string_titlescreen_copyright:
 14+  80B6 04 16 7F 20      defb 4,22, 127,' 1982 AW ZILEC ELC LTD',255
 14+  80BA 31 39 38 32
 14+  80BE 20 41 57 20
 14+  80C2 5A 49 4C 45
 14+  80C6 43 20 45 4C
 14+  80CA 43 20 4C 54
 14+  80CE 44 FF
 15+  80D0
 16+  80D0
 17+  80D0              string_alttitlescreen_1:
 18+  80D0 0C 00 43 52      defb 12,0,'CREDITS 1',255
 18+  80D4 45 44 49 54
 18+  80D8 53 20 31 FF
 19+  80DC              string_alttitlescreen_2:
 20+  80DC 00 02 20 20      defb 0,2,'           THE OBJECT',254
 20+  80E0 20 20 20 20
 20+  80E4 20 20 20 20
 20+  80E8 20 54 48 45
 20+  80EC 20 4F 42 4A
 20+  80F0 45 43 54 FE
 21+  80F4 00 03 20 20      defb 0,3,'          OF THIS GAME',254
 21+  80F8 20 20 20 20
 21+  80FC 20 20 20 20
 21+  8100 4F 46 20 54
 21+  8104 48 49 53 20
 21+  8108 47 41 4D 45
 21+  810C FE
 22+  810D 00 04 20 20      defb 0,4,'         IS TO DIG DOWN',254
 22+  8111 20 20 20 20
 22+  8115 20 20 20 49
 22+  8119 53 20 54 4F
 22+  811D 20 44 49 47
 22+  8121 20 44 4F 57
 22+  8125 4E FE
 23+  8127 00 05 20 20      defb 0,5,'        TO THE BOTTOM PIT',254
 23+  812B 20 20 20 20
 23+  812F 20 20 54 4F
 23+  8133 20 54 48 45
 23+  8137 20 42 4F 54
 23+  813B 54 4F 4D 20
 23+  813F 50 49 54 FE
 24+  8143 00 06 20 20      defb 0,6,'               AND',254
 24+  8147 20 20 20 20
 24+  814B 20 20 20 20
 24+  814F 20 20 20 20
 24+  8153 20 41 4E 44
 24+  8157 FE
 25+  8158 00 07 20 20      defb 0,7,'        COLLECT AT LEAST',254
 25+  815C 20 20 20 20
 25+  8160 20 20 43 4F
 25+  8164 4C 4C 45 43
 25+  8168 54 20 41 54
 25+  816C 20 4C 45 41
 25+  8170 53 54 FE
 26+  8173 00 08 20 20      defb 0,8,'         ONE LARGE JEWEL',254
 26+  8177 20 20 20 20
 26+  817B 20 20 20 4F
 26+  817F 4E 45 20 4C
 26+  8183 41 52 47 45
 26+  8187 20 4A 45 57
 26+  818B 45 4C FE
 27+  818E 00 09 20 20      defb 0,9,'              THEN',254
 27+  8192 20 20 20 20
 27+  8196 20 20 20 20
 27+  819A 20 20 20 20
 27+  819E 54 48 45 4E
 27+  81A2 FE
 28+  81A3 00 0A 20 20      defb 0,10,'         RETURN TO SHIP',254
 28+  81A7 20 20 20 20
 28+  81AB 20 20 20 52
 28+  81AF 45 54 55 52
 28+  81B3 4E 20 54 4F
 28+  81B7 20 53 48 49
 28+  81BB 50 FE
 29+  81BD 00 0B 20 20      defb 0,11,'         THRU UPPER PIT',255
 29+  81C1 20 20 20 20
 29+  81C5 20 20 20 54
 29+  81C9 48 52 55 20
 29+  81CD 55 50 50 45
 29+  81D1 52 20 50 49
 29+  81D5 54 FF
 30+  81D7              string_alttitlescreen_3:
 31+  81D7 00 0D 20 20      defb 0,13,'    SINGLE BONUS  5000 POINTS',254
 31+  81DB 20 20 53 49
 31+  81DF 4E 47 4C 45
 31+  81E3 20 42 4F 4E
 31+  81E7 55 53 20 20
 31+  81EB 35 30 30 30
 31+  81EF 20 50 4F 49
 31+  81F3 4E 54 53 FE
 32+  81F7 00 0E 20 20      defb 0,14,'      COLLECT 1 LARGE JEWEL',254
 32+  81FB 20 20 20 20
 32+  81FF 43 4F 4C 4C
 32+  8203 45 43 54 20
 32+  8207 31 20 4C 41
 32+  820B 52 47 45 20
 32+  820F 4A 45 57 45
 32+  8213 4C FE
 33+  8215 00 0F 20 20      defb 0,15,'       AND RETURN TO SHIP',254
 33+  8219 20 20 20 20
 33+  821D 20 41 4E 44
 33+  8221 20 52 45 54
 33+  8225 55 52 4E 20
 33+  8229 54 4F 20 53
 33+  822D 48 49 50 FE
 34+  8231 00 11 20 20      defb 0,17,'    DOUBLE BONUS  10000 POINTS',254
 34+  8235 20 20 44 4F
 34+  8239 55 42 4C 45
 34+  823D 20 42 4F 4E
 34+  8241 55 53 20 20
 34+  8245 31 30 30 30
 34+  8249 30 20 50 4F
 34+  824D 49 4E 54 53
 34+  8251 FE
 35+  8252 00 12 20 20      defb 0,18,'    COLLECT ALL 3 LARGE JEWELS',254
 35+  8256 20 20 43 4F
 35+  825A 4C 4C 45 43
 35+  825E 54 20 41 4C
 35+  8262 4C 20 33 20
 35+  8266 4C 41 52 47
 35+  826A 45 20 4A 45
 35+  826E 57 45 4C 53
 35+  8272 FE
 36+  8273 00 13 20 20      defb 0,19,'       OR   ALL 4 SMALL JEWELS',254
 36+  8277 20 20 20 20
 36+  827B 20 4F 52 20
 36+  827F 20 20 41 4C
 36+  8283 4C 20 34 20
 36+  8287 53 4D 41 4C
 36+  828B 4C 20 4A 45
 36+  828F 57 45 4C 53
 36+  8293 FE
 37+  8294 00 15 20 20      defb 0,21,'    TRIPLE BONUS  15000 POINTS',254
 37+  8298 20 20 54 52
 37+  829C 49 50 4C 45
 37+  82A0 20 42 4F 4E
 37+  82A4 55 53 20 20
 37+  82A8 31 35 30 30
 37+  82AC 30 20 50 4F
 37+  82B0 49 4E 54 53
 37+  82B4 FE
 38+  82B5 00 16 20 20      defb 0,22,'       COLLECT ALL 7 JEWELS',255
 38+  82B9 20 20 20 20
 38+  82BD 20 43 4F 4C
 38+  82C1 4C 45 43 54
 38+  82C5 20 41 4C 4C
 38+  82C9 20 37 20 4A
 38+  82CD 45 57 45 4C
 38+  82D1 53 FF
 39+  82D3
 40+  82D3              string_lifescreen_player:
 41+  82D3 0B 00 20 50      defb 11,0,' PLAYER 1 ',255
 41+  82D7 4C 41 59 45
 41+  82DB 52 20 31 20
 41+  82DF FF
 42+  82E0              string_lifescreen_lives:
 43+  82E0 0B 03 30 20      defb 11,3,48,' MEN LEFT',255
 43+  82E4 4D 45 4E 20
 43+  82E8 4C 45 46 54
 43+  82EC FF
 44+  82ED
 45+  82ED              ;
 46+  82ED              ; Prints specified string
 47+  82ED              ; Inputs:
 48+  82ED              ; de: pointer to string
 49+  82ED              ; bc: length of string
 50+  82ED              ;
 51+  82ED              ; Print String Data
 52+  82ED              ; First two bytes of string contain X and Y char position, then the string
 53+  82ED              ; Individual strings are terminated with 0xFE
 54+  82ED              ; End of data is terminated with 0xFF
 55+  82ED              ; HL: Address of string
 56+  82ED              ;
 57+  82ED 5E           string_print:           LD E,(HL)                       ; Fetch the X coordinate
 58+  82EE 23                                   INC HL                          ; Increase HL to the next memory location
 59+  82EF 56                                   LD D,(HL)                       ; Fetch the Y coordinate
 60+  82F0 23                                   INC HL                          ; Increase HL to the next memory location
 61+  82F1 CD 04 83                             CALL string_getcharaddress           ; Calculate the screen address (in DE)
 62+  82F4 7E           string_print_0:         LD A,(HL)                       ; Fetch the character to print
 63+  82F5 23                                   INC HL                          ; Increase HL to the next character
 64+  82F6 FE FE                                CP 0xFE                         ; Compare with 0xFE
 65+  82F8 28 F3                                JR Z,string_print               ; If it is equal to 0xFE then loop back to print next string
 66+  82FA D0                                   RET NC                          ; If it is greater or equal to (carry bit set) then
 67+  82FB E5                                   PUSH HL                         ; Push HL on stack (Print_Char will not preserve HL)
 68+  82FC CD 14 83                             CALL Print_Char                 ; Print the character
 69+  82FF E1                                   POP HL                          ; Retrieve HL back off the stack
 70+  8300 1C                                   INC E                           ; Go to the next screen address
 71+  8301 18 F1                                JR string_print_0               ; Loop back to print next character
 72+  8303 C9                                   RET
 73+  8304
 74+  8304              ; Get screen address
 75+  8304              ; D = Y character position
 76+  8304              ; E = X character position
 77+  8304              ; Returns address in DE
 78+  8304              ;
 79+  8304 7A           string_getcharaddress:       LD A,D
 80+  8305 E6 07                                AND %00000111
 81+  8307 1F                                   RRA
 82+  8308 1F                                   RRA
 83+  8309 1F                                   RRA
 84+  830A 1F                                   RRA
 85+  830B B3                                   OR E
 86+  830C 5F                                   LD E,A
 87+  830D 7A                                   LD A,D
 88+  830E E6 18                                AND %00011000
 89+  8310 F6 40                                OR %01000000
 90+  8312 57                                   LD D,A
 91+  8313 C9                                   RET                             ; Returns screen address in DE
 92+  8314
 93+  8314              ; Print a single character out
 94+  8314              ; A:  Character to print
 95+  8314              ; DE: Screen address to print character at
 96+  8314              ;
 97+  8314 21 00 3C     Print_Char:             LD HL,0x3C00                    ; Address of character set table in ROM
 98+  8317 06 00                                LD B,0                          ; Set BC to A
 99+  8319 4F                                   LD C,A
100+  831A E6 FF                                AND 0xFF                        ; Clear the carry bit
101+  831C CB 11                                RL C                            ; Multiply BC by 8 (shift left 3 times)
102+  831E CB 10                                RL B
103+  8320 CB 11                                RL C
104+  8322 CB 10                                RL B
105+  8324 CB 11                                RL C
106+  8326 CB 10                                RL B
107+  8328 09                                   ADD HL,BC                       ; Get the character address in HL
108+  8329 0E 08                                LD C,8                          ; Loop counter
109+  832B D5                                   PUSH DE
110+  832C 7E           Print_Char_1:           LD A,(HL)                       ; Get the byte from the ROM into A
111+  832D 12                                   LD (DE),A                       ; Stick A onto the screen
112+  832E 14                                   INC D                           ; Goto next line on screen
113+  832F 2C                                   INC L                           ; Goto next byte of character
114+  8330 0D                                   DEC C                           ; Decrease the loop counter
115+  8331 20 F9                                JR NZ,Print_Char_1              ; Loop around whilst it is Not Zero (NZ)
116+  8333 D1                                   POP DE
117+  8334 C9                                   RET                             ; Return from the subroutine
# file closed: strings.asm
 23   8335                  include "screen\buffer.asm"
# file opened: screen/buffer.asm
  1+  8335              buffer_buffer:
  2+  8335 00 00 00...      defs 7424                   ; area reserved for screen
  3+  A035
  4+  A035              buffer_attr_buffer:
  5+  A035 00 00 00...      defs 928                    ; attrs buffer area
  6+  A3D5
  7+  A3D5              buffer_tmp:
  8+  A3D5 00 00            defb 0,0                    ; temp area
  9+  A3D7
 10+  A3D7              buffer_updatedlines:
 11+  A3D7 FF FF FF...      defs 21,255
 12+  A3EC
 13+  A3EC              buffer_updateall:
 14+  A3EC 00               defb 0
 15+  A3ED
 16+  A3ED              ;
 17+  A3ED              ; Stores a line number in the update list
 18+  A3ED              ; Inputs:
 19+  A3ED              ; a - row number
 20+  A3ED              buffer_marklineforupdate:
 21+  A3ED 5F               ld e,a                          ; store in e
 22+  A3EE 06 15            ld b,21
 23+  A3F0 21 D7 A3         ld hl,buffer_updatedlines
 24+  A3F3              buffer_marklineforupdate0:
 25+  A3F3 7E               ld a,(hl)                       ; get the line stored in updated lines
 26+  A3F4 BB               cp e                            ; is this the same as the row number passed in?
 27+  A3F5 C8               ret z                           ; if so, don't need to do anything
 28+  A3F6 FE FF            cp 255                          ; is this 255, ie the end of the buffer
 29+  A3F8 C2 FD A3         jp nz,buffer_marklineforupdate1 ; if not, move to next
 30+  A3FB 73               ld (hl),e                       ; if it is, this spot is empty, so store the row number
 31+  A3FC C9               ret                             ; and finish
 32+  A3FD              buffer_marklineforupdate1:
 33+  A3FD 23               inc hl
 34+  A3FE 10 F3            djnz buffer_marklineforupdate0
 35+  A400 C9               ret
 36+  A401
 37+  A401              ;
 38+  A401              ; Zeroes the updated lines list
 39+  A401              ;
 40+  A401              buffer_clearlist:
 41+  A401 06 15            ld b,21
 42+  A403 21 D7 A3         ld hl,buffer_updatedlines
 43+  A406              buffer_clearlist0:
 44+  A406 36 FF            ld (hl),255
 45+  A408 23               inc hl
 46+  A409 10 FB            djnz buffer_clearlist0
 47+  A40B C9               ret
 48+  A40C
 49+  A40C              ;
 50+  A40C              ; Copies the buffer to the screen. Use stack.
 51+  A40C              ; Inputs:
 52+  A40C              ; a - row number to display - 0 is first line
 53+  A40C              ;
 54+  A40C              buffer_bufferlinetoscreen:
 55+  A40C 4F               ld c,a                          ; store a
 56+  A40D ED 5B 3A A5      ld de,(screen_offset)          ; load the screen offset, this is in rows, want it *256
 57+  A411 83               add a,e                       ; add the row number
 58+  A412 11 00 01         ld de,256
 59+  A415 CD 3A 80         call utilities_multiply
 60+  A418 54 5D            ld de,hl
 61+  A41A 21 35 83         ld hl,buffer_buffer
 62+  A41D 19               add hl,de                   ; add the offset
 63+  A41E 79               ld a,c                      ; get original row back
 64+  A41F ED 73 7D A4      ld (buffer_bufferlinetoscreen1+1),sp ; this is some self-modifying code; stores the stack pointer in an ld sp,nn instruction at the end
 65+  A423 D9               exx
 66+  A424 0E 00            ld c,0                      ; zero horizontal
 67+  A426 47               ld b,a                      ; load the row number into vertical coord
 68+  A427 04               inc b
 69+  A428 04               inc b                       ; move forward 2 to allow for scores
 70+  A429 CD 1C A6         call screen_getcelladdress  ; get the memory into de
 71+  A42C 21 10 00         ld hl,16                    ; offset by 16 chars to get to the centre, since populating stack from right
 72+  A42F 19               add hl,de
 73+  A430              buffer_bufferlinetoscreen0:
 74+  A430 D9               exx                         ; hl is now buffer
 75+  A431 23               inc hl
 76+  A432 23               inc hl                      ; move hl forward 2 to skip first two blocks
 77+  A433 F9               ld sp,hl                    ; do first fourteen for left hand side, sp pointing at buffer
 78+  A434 F1               pop af
 79+  A435 C1               pop bc
 80+  A436 D1               pop de
 81+  A437 DD E1            pop ix
 82+  A439 D9               exx                         ; hl is now screen
 83+  A43A 08               ex af,af'
 84+  A43B F1               pop af
 85+  A43C C1               pop bc
 86+  A43D D1               pop de
 87+  A43E F9               ld sp,hl                    ; sp pointing at screen
 88+  A43F D5               push de
 89+  A440 C5               push bc
 90+  A441 F5               push af
 91+  A442 08               ex af,af'
 92+  A443 D9               exx                         ; hl is now buffer
 93+  A444 DD E5            push ix
 94+  A446 D5               push de
 95+  A447 C5               push bc
 96+  A448 F5               push af
 97+  A449 1E 0E            ld e,14                    ; do another fourteen for right hand side
 98+  A44B 16 00            ld d,0
 99+  A44D 19               add hl,de
100+  A44E F9               ld sp,hl                    ; sp pointing at buffer
101+  A44F F1               pop af
102+  A450 C1               pop bc
103+  A451 D1               pop de
104+  A452 DD E1            pop ix
105+  A454                  ;pop ix
106+  A454 D9               exx                         ; hl is now screen
107+  A455 08               ex af,af'
108+  A456 1E 0E            ld e,14
109+  A458 16 00            ld d,0
110+  A45A 19               add hl,de
111+  A45B F1               pop af
112+  A45C C1               pop bc
113+  A45D D1               pop de
114+  A45E                  ;pop iy
115+  A45E F9               ld sp,hl                    ; sp pointing at screen
116+  A45F                  ;push iy
117+  A45F D5               push de
118+  A460 C5               push bc
119+  A461 F5               push af
120+  A462 08               ex af,af'
121+  A463 D9               exx                         ; hl is now buffer
122+  A464 DD E5            push ix
123+  A466 D5               push de
124+  A467 C5               push bc
125+  A468 F5               push af
126+  A469 1E 10            ld e,16
127+  A46B 16 00            ld d,0
128+  A46D 19               add hl,de
129+  A46E D9               exx                         ; hl is now screen
130+  A46F 1E 0E            ld e,14
131+  A471 16 00            ld d,0
132+  A473 ED 52            sbc hl,de
133+  A475 24               inc h
134+  A476 7C               ld a,h
135+  A477 E6 07            and 0x07                    ; check if this is multiple of 8, if so, end of cell line
136+  A479 C2 30 A4         jp nz,buffer_bufferlinetoscreen0 ; next line in cell
137+  A47C              buffer_bufferlinetoscreen1:
138+  A47C 31 00 00         ld sp,0
139+  A47F D9               exx
140+  A480 C9               ret
141+  A481
142+  A481              ;
143+  A481              ; Copies the buffer to the screen for updated lines. Use stack.
144+  A481              ; Inputs: none
145+  A481              ;
146+  A481              buffer_buffertoscreen:
147+  A481 3A EC A3         ld a,(buffer_updateall)      ; get the all update flag
148+  A484 FE 00            cp 0
149+  A486 CA 92 A4         jp z,buffer_buffertoscreen2  ; if not set, draw only updated
150+  A489 CD B3 A4         call buffer_allbuffertoscreen ; otherwise, draw whole screen
151+  A48C 21 EC A3         ld hl,buffer_updateall
152+  A48F 36 00            ld (hl),0                    ; reset flag
153+  A491 C9               ret
154+  A492              buffer_buffertoscreen2:
155+  A492 06 15            ld b,21
156+  A494 FD 21 D7 A3      ld iy,buffer_updatedlines    ; the location of the updated lines
157+  A498              buffer_buffertoscreen0:
158+  A498 FD 7E 00         ld a,(iy)
159+  A49B FE FF            cp 255
160+  A49D CA AF A4         jp z,buffer_buffertoscreen1                       ; if this is 255, then we're at the end of the updated list
161+  A4A0 C5               push bc
162+  A4A1 FD E5            push iy
163+  A4A3 F3               di
164+  A4A4 CD 0C A4         call buffer_bufferlinetoscreen
165+  A4A7 FB               ei
166+  A4A8 FD E1            pop iy
167+  A4AA C1               pop bc
168+  A4AB FD 23            inc iy
169+  A4AD 10 E9            djnz buffer_buffertoscreen0
170+  A4AF              buffer_buffertoscreen1:
171+  A4AF CD C7 A4         call buffer_buffertoattrsfast
172+  A4B2 C9               ret
173+  A4B3
174+  A4B3              ;
175+  A4B3              ; Copies the buffer to the screen. Use stack.
176+  A4B3              ; Inputs: none
177+  A4B3              ;
178+  A4B3              buffer_allbuffertoscreen:
179+  A4B3 06 15            ld b,21
180+  A4B5 3E 00            ld a,0
181+  A4B7              buffer_allbuffertoscreen0:
182+  A4B7 C5               push bc
183+  A4B8 F5               push af
184+  A4B9 F3               di
185+  A4BA CD 0C A4         call buffer_bufferlinetoscreen
186+  A4BD FB               ei
187+  A4BE F1               pop af
188+  A4BF C1               pop bc
189+  A4C0 3C               inc a
190+  A4C1 10 F4            djnz buffer_allbuffertoscreen0
191+  A4C3
192+  A4C3 CD C7 A4         call buffer_buffertoattrsfast
193+  A4C6 C9               ret
194+  A4C7
195+  A4C7              ;
196+  A4C7              ; Copies the attrs buffer to screen with the stack
197+  A4C7              ;
198+  A4C7              buffer_buffertoattrsfast:
199+  A4C7 ED 73 36 A5      ld (buffer_buffertoattrsfast1+1),sp ; this is some self-modifying code; stores the stack pointer in an ld sp,nn instruction at the end
200+  A4CB 3A 3A A5         ld a,(screen_offset)            ; get the screen offset in rows, so want *32
201+  A4CE 11 20 00         ld de,32
202+  A4D1 CD 3A 80         call utilities_multiply
203+  A4D4 54 5D            ld de,hl
204+  A4D6 21 35 A0         ld hl,buffer_attr_buffer
205+  A4D9 19               add hl,de                       ; add the offset, start of attr buffer now in hl
206+  A4DA D9               exx
207+  A4DB 21 50 58         ld hl,22528+80                  ; start of attr memory + 2 lines for score + 16 to start at right side
208+  A4DE FD 21 D5 A3      ld iy,buffer_tmp
209+  A4E2 FD 36 00 15      ld (iy),21              ; number of times to loop
210+  A4E6              buffer_buffertoattrsfast0:
211+  A4E6 D9               exx                         ; hl is now buffer
212+  A4E7 23               inc hl
213+  A4E8 23               inc hl                      ; move hl forward 2 to skip first two blocks
214+  A4E9 F9               ld sp,hl                    ; do first fourteen for left hand side, sp pointing at buffer
215+  A4EA F1               pop af
216+  A4EB C1               pop bc
217+  A4EC D1               pop de
218+  A4ED DD E1            pop ix
219+  A4EF D9               exx                         ; hl is now screen
220+  A4F0 08               ex af,af'
221+  A4F1 F1               pop af
222+  A4F2 C1               pop bc
223+  A4F3 D1               pop de
224+  A4F4 F9               ld sp,hl                    ; sp pointing at screen
225+  A4F5 D5               push de
226+  A4F6 C5               push bc
227+  A4F7 F5               push af
228+  A4F8 08               ex af,af'
229+  A4F9 D9               exx                         ; hl is now buffer
230+  A4FA DD E5            push ix
231+  A4FC D5               push de
232+  A4FD C5               push bc
233+  A4FE F5               push af
234+  A4FF 1E 0E            ld e,14                    ; do another fourteen for right hand side
235+  A501 16 00            ld d,0
236+  A503 19               add hl,de
237+  A504 F9               ld sp,hl                    ; sp pointing at buffer
238+  A505 F1               pop af
239+  A506 C1               pop bc
240+  A507 D1               pop de
241+  A508 DD E1            pop ix
242+  A50A D9               exx                         ; hl is now screen
243+  A50B 08               ex af,af'
244+  A50C 1E 0E            ld e,14
245+  A50E 16 00            ld d,0
246+  A510 19               add hl,de
247+  A511 F1               pop af
248+  A512 C1               pop bc
249+  A513 D1               pop de
250+  A514 F9               ld sp,hl                    ; sp pointing at screen
251+  A515 D5               push de
252+  A516 C5               push bc
253+  A517 F5               push af
254+  A518 08               ex af,af'
255+  A519 D9               exx                         ; hl is now buffer
256+  A51A DD E5            push ix
257+  A51C D5               push de
258+  A51D C5               push bc
259+  A51E F5               push af
260+  A51F 1E 10            ld e,16
261+  A521 16 00            ld d,0
262+  A523 19               add hl,de
263+  A524 D9               exx                         ; hl is now screen
264+  A525 11 12 00         ld de,18
265+  A528 19               add hl,de
266+  A529 FD 7E 00         ld a,(iy)
267+  A52C 3D               dec a
268+  A52D FE 00            cp 0
269+  A52F FD 77 00         ld (iy),a
270+  A532 C2 E6 A4         jp nz,buffer_buffertoattrsfast0 ; do another row
271+  A535              buffer_buffertoattrsfast1:
272+  A535 31 00 00         ld sp,0
273+  A538 D9               exx
274+  A539 C9               ret
# file closed: screen/buffer.asm
 24   A53A                  include "screen\screen.asm"
# file opened: screen/screen.asm
  1+  A53A              screen_offset:
  2+  A53A 00               defb 0                      ; offset from top of screen in lines
  3+  A53B
  4+  A53B              screen_tmp:
  5+  A53B 00 00            defb 0,0                      ; temporary memory
  6+  A53D
  7+  A53D              screen_setscorecolours:
  8+  A53D 21 07 AE         ld hl,score_colours
  9+  A540 11 00 58         ld de,22528                     ; attrs here
 10+  A543 01 40 00         ld bc,64
 11+  A546 ED B0            ldir
 12+  A548 C9               ret
 13+  A549
 14+  A549              screen_sethighscorecolours:
 15+  A549 21 47 AE         ld hl,high_score_colours
 16+  A54C 11 E0 5A         ld de,22528+736                 ; attrs here
 17+  A54F 01 20 00         ld bc,32
 18+  A552 ED B0            ldir
 19+  A554 C9               ret
 20+  A555
 21+  A555              ; Draw the screen
 22+  A555              ; Inputs:
 23+  A555              ; none
 24+  A555              ; Notes:
 25+  A555              ; The value held at screen_offset tells the screen how many rows to scroll down. Set to five to bottom out.
 26+  A555              screen_draw:
 27+  A555                  ;call clear_screen
 28+  A555 0E 00            ld c,0                      ; horiz
 29+  A557 06 00            ld b,0                      ; vert, 0 at top
 30+  A559 DD 21 C9 A8      ld ix,level01               ; point ix at level data
 31+  A55D FD 21 35 A0      ld iy,buffer_attr_buffer    ; point iy at attr data
 32+  A561              screen_draw0:
 33+  A561 DD 7E 00         ld a,(ix)                   ; load the block number
 34+  A564 C5               push bc                     ; store bc, contains loop count
 35+  A565 CD A3 A6         call screen_getattr         ; get the memory location for this cell's attr into hl
 36+  A568 7E               ld a,(hl)                   ; get the attr value at the address
 37+  A569 FD 77 00         ld (iy),a                   ; load the attr into memory
 38+  A56C DD 7E 00         ld a,(ix)                   ; load the block number
 39+  A56F CD 98 A6         call screen_getblock        ; get the block data into hl
 40+  A572 CD 7E A6         call screen_showchar        ; show this character here
 41+  A575 C1               pop bc                      ; get the loop counter back
 42+  A576 DD 23            inc ix                      ; increment level location
 43+  A578 FD 23            inc iy                      ; increment attr location
 44+  A57A 0C               inc c                       ; increment horiz
 45+  A57B 79               ld a,c
 46+  A57C FE 20            cp 32                       ; check if horiz has reach edge of screen
 47+  A57E C2 61 A5         jp nz,screen_draw0          ; if not, loop
 48+  A581 0E 00            ld c,0                      ; if so, reset horiz
 49+  A583 04               inc b                       ; increment vertical
 50+  A584 78               ld a,b
 51+  A585 FE 1D            cp 29                       ; check if at bottom
 52+  A587 C2 61 A5         jp nz,screen_draw0          ; if not, loop
 53+  A58A 21 3B A5         ld hl, screen_tmp
 54+  A58D 36 09            ld (hl),9                   ; load the block number into memory
 55+  A58F DD 21 69 AC      ld ix,level01rocks          ; rock memory
 56+  A593 CD EC A5         call screen_initobjects     ; draw rocks
 57+  A596 21 3B A5         ld hl, screen_tmp
 58+  A599 36 0C            ld (hl),12                  ; load the block number into memory
 59+  A59B DD 21 69 AD      ld ix,level01missiles       ; missile memory
 60+  A59F CD EC A5         call screen_initobjects     ; draw missiles
 61+  A5A2 21 3B A5         ld hl, screen_tmp
 62+  A5A5 36 08            ld (hl),08                  ; load the block number into memory
 63+  A5A7 DD 21 E2 AD      ld ix,level01diamonds       ; diamond memory
 64+  A5AB CD EC A5         call screen_initobjects     ; draw diamonds
 65+  A5AE 21 3B A5         ld hl, screen_tmp
 66+  A5B1 36 0E            ld (hl),14                  ; load the block number into memory
 67+  A5B3 DD 21 F2 AD      ld ix,level01gems           ; gems memory
 68+  A5B7 CD EC A5         call screen_initobjects     ; draw gems
 69+  A5BA CD BE A5         call screen_setuptext       ; draws text on the screen
 70+  A5BD C9               ret
 71+  A5BE
 72+  A5BE              ;
 73+  A5BE              ; Sets up text on the screen
 74+  A5BE              ;
 75+  A5BE              screen_setuptext:
 76+  A5BE CD FB B7         call scores_showtable
 77+  A5C1 CD 49 A5         call screen_sethighscorecolours
 78+  A5C4 21 81 80         ld hl, string_score1
 79+  A5C7 CD ED 82         call string_print
 80+  A5CA 21 8A 80         ld hl, string_scorenumbers1
 81+  A5CD CD ED 82         call string_print
 82+  A5D0 21 93 80         ld hl, string_company
 83+  A5D3 CD ED 82         call string_print
 84+  A5D6 21 A4 80         ld hl, string_score2
 85+  A5D9 CD ED 82         call string_print
 86+  A5DC 21 AD 80         ld hl, string_scorenumbers2
 87+  A5DF CD ED 82         call string_print
 88+  A5E2 21 99 80         ld hl, string_credits
 89+  A5E5 CD ED 82         call string_print
 90+  A5E8 CD 3D A5         call screen_setscorecolours
 91+  A5EB C9               ret
 92+  A5EC              ;
 93+  A5EC              ; Draw initial object positions
 94+  A5EC              ; Inputs:
 95+  A5EC              ; ix - memory location of objects
 96+  A5EC              ; a - graphic
 97+  A5EC              screen_initobjects:
 98+  A5EC DD 4E 00         ld c,(ix)                   ; get the horiz coord
 99+  A5EF 79               ld a,c
100+  A5F0 FE FF            cp 255
101+  A5F2 CA 1B A6         jp z,screen_initobjects2
102+  A5F5 DD 23            inc ix                      ; move to next
103+  A5F7 DD 46 00         ld b,(ix)                   ; get the vert coord
104+  A5FA DD 23            inc ix
105+  A5FC CD 2D A6         call screen_getcellattradress ; get the memory address of b,c attr into de
106+  A5FF D5               push de
107+  A600 3A 3B A5         ld a,(screen_tmp)                  ; get the block number back
108+  A603 CD A3 A6         call screen_getattr         ; get the memory location for this cell's attr into hl
109+  A606 D1               pop de
110+  A607 7E               ld a,(hl)                   ; get the attr value at the address
111+  A608 12               ld (de),a                   ; load the attr into memory
112+  A609 3A 3B A5         ld a,(screen_tmp)                  ; get the block number back
113+  A60C CD 98 A6         call screen_getblock        ; get the block data into hl
114+  A60F CD 7E A6         call screen_showchar        ; show this character here
115+  A612
116+  A612              screen_initobjects1:
117+  A612 DD 23            inc ix                      ; move past state
118+  A614 DD 23            inc ix
119+  A616 DD 23            inc ix                      ; move past mem
120+  A618 C3 EC A5         jp screen_initobjects
121+  A61B              screen_initobjects2:
122+  A61B C9               ret
123+  A61C
124+  A61C
125+  A61C              ;
126+  A61C              ; Return character cell address offset of block at (b, c) ready for addition to screen  memory.
127+  A61C              ; Inputs:
128+  A61C              ; bc: coords
129+  A61C              ; Outputs:
130+  A61C              ; de: memory location
131+  A61C              ;
132+  A61C              screen_getcelladdress:
133+  A61C 78               ld a,b      ; vertical position.
134+  A61D E6 18            and 24      ; which segment, 0, 1 or 2?
135+  A61F C6 40            add a,64    ; 64*256 = 16384, Spectrum's screen memory.
136+  A621 57               ld d,a      ; this is our high byte.
137+  A622 78               ld a,b      ; what was that vertical position again?
138+  A623 E6 07            and 7       ; which row within segment?
139+  A625 0F               rrca        ; multiply row by 32.
140+  A626 0F               rrca
141+  A627 0F               rrca
142+  A628 5F               ld e,a      ; low byte.
143+  A629 79               ld a,c      ; add on y coordinate.
144+  A62A 83               add a,e     ; mix with low byte.
145+  A62B 5F               ld e,a      ; address of screen position in de.
146+  A62C C9               ret
147+  A62D
148+  A62D              ;
149+  A62D              ; Calculate buffer address of attribute for character at (b, c).
150+  A62D              ; Inputs:
151+  A62D              ; bc: coords
152+  A62D              ; Outputs:
153+  A62D              ; de: memory location
154+  A62D              ;
155+  A62D              screen_getcellattradress:
156+  A62D 11 35 A0         ld de,buffer_attr_buffer ; memory is at base + horiz (c) + vert*32 (b)
157+  A630 69               ld l,c      ; x position.
158+  A631 26 00            ld h,0      ; 0 h
159+  A633 19               add hl,de
160+  A634 54 5D            ld de,hl    ; horiz done
161+  A636 78               ld a,b      ; do vert
162+  A637 D5               push de
163+  A638 C5               push bc
164+  A639 11 20 00         ld de,32
165+  A63C CD 3A 80         call utilities_multiply
166+  A63F C1               pop bc
167+  A640 D1               pop de
168+  A641 19               add hl,de
169+  A642 54 5D            ld de,hl    ; vert done
170+  A644 C9               ret
171+  A645
172+  A645              ;
173+  A645              ; Calculate buffer address of attribute for character at (b, c).
174+  A645              ; Inputs:
175+  A645              ; bc: coords
176+  A645              ; Outputs:
177+  A645              ; de: memory location
178+  A645              ;
179+  A645              screen_getscreenattradress:
180+  A645 11 00 58         ld de,22528 ; memory is at base + horiz (c) + vert*32 (b)
181+  A648 69               ld l,c      ; x position.
182+  A649 26 00            ld h,0      ; 0 h
183+  A64B 19               add hl,de
184+  A64C 54 5D            ld de,hl    ; horiz done
185+  A64E 78               ld a,b      ; do vert
186+  A64F D5               push de
187+  A650 C5               push bc
188+  A651 11 20 00         ld de,32
189+  A654 CD 3A 80         call utilities_multiply
190+  A657 C1               pop bc
191+  A658 D1               pop de
192+  A659 19               add hl,de
193+  A65A 54 5D            ld de,hl    ; vert done
194+  A65C C9               ret
195+  A65D
196+  A65D              ;
197+  A65D              ; Gets the attr memory location for a screen coord
198+  A65D              ; Will overwrite bc
199+  A65D              ; Inputs:
200+  A65D              ; bc - screen coords
201+  A65D              ; Outputs:
202+  A65D              ; de - memory location
203+  A65D              ; bc - character coords
204+  A65D              ;
205+  A65D              screen_getattraddressfromscreencoords:
206+  A65D 78               ld a,b                          ; get the player block coords of current block
207+  A65E E6 F8            and 248                         ; find closest multiple of eight
208+  A660 0F               rrca
209+  A661 0F               rrca
210+  A662 0F               rrca                ; divide by 8
211+  A663 47               ld b,a
212+  A664 79               ld a,c
213+  A665 48               ld c,b                         ; swap b and c
214+  A666 E6 F8            and 248
215+  A668 0F               rrca
216+  A669 0F               rrca
217+  A66A 0F               rrca                ; divide by 8
218+  A66B 47               ld b,a
219+  A66C CD 2D A6         call screen_getcellattradress   ; work out memory location of current block attributes, memory in de
220+  A66F C9               ret
221+  A670
222+  A670              ;
223+  A670              ; Get buffer address for a character at b,c - b vert
224+  A670              ; Buffer memory is stored as sequential block
225+  A670              ; Char at 0,0 is stored 0,32,64...; 0,1 is stored at 1,33,65
226+  A670              ; Inputs:
227+  A670              ; bc - coords
228+  A670              ; Outputs:
229+  A670              ; de - memory location of first byte
230+  A670              screen_getbufferaddress:
231+  A670 21 35 83         ld hl, buffer_buffer    ; first get screen buffer start
232+  A673 50               ld d,b                  ; then work out vertical offset
233+  A674 1E 00            ld e,0                  ; mult by 256, low byte becomes high byte, de now holds result
234+  A676 19               add hl,de               ; add to base
235+  A677 59               ld e,c                  ; then add horizontal offset (c)
236+  A678 16 00            ld d,0
237+  A67A 19               add hl,de               ; add to base
238+  A67B 54 5D            ld de,hl
239+  A67D C9               ret
240+  A67E
241+  A67E              ;
242+  A67E              ; Display character hl at (b, c) to buffer.
243+  A67E              ; Stored sequentially
244+  A67E              ; Inputs:
245+  A67E              ; hl: block address
246+  A67E              ; bc: coords
247+  A67E              ;
248+  A67E              screen_showchar:
249+  A67E 3E 00            ld a,0
250+  A680 E5               push hl
251+  A681 CD 70 A6         call screen_getbufferaddress ; get the current screen buffer pointer
252+  A684 E1               pop hl
253+  A685 06 08            ld b,8              ; number of pixels high.
254+  A687              screen_showchar0:
255+  A687 7E               ld a,(hl)           ; source graphic.
256+  A688 12               ld (de),a           ; transfer to screen.
257+  A689 23               inc hl              ; next piece of data.
258+  A68A E5               push hl             ; store hl
259+  A68B 62 6B            ld hl,de            ; put de in hl
260+  A68D 1E 20            ld e,32            ; inc memory by 32, so load 32 into de
261+  A68F 16 00            ld d,0
262+  A691 19               add hl,de              ; add de to hl
263+  A692 54 5D            ld de,hl            ; load back to de
264+  A694 E1               pop hl              ; restore hl
265+  A695
266+  A695 10 F0            djnz screen_showchar0 ; repeat
267+  A697 C9               ret
268+  A698
269+  A698
270+  A698              ;
271+  A698              ; Get cell graphic.
272+  A698              ; Inputs:
273+  A698              ; a: block
274+  A698              ; Outputs:
275+  A698              ; hl: memory
276+  A698              ;
277+  A698              screen_getblock:
278+  A698 07               rlca                        ; multiply block number by eight.
279+  A699 07               rlca
280+  A69A 07               rlca
281+  A69B 5F               ld e,a                      ; displacement to graphic address.
282+  A69C 16 00            ld d,0                      ; no high byte.
283+  A69E 21 67 AE         ld hl,sprites               ; address of character blocks.
284+  A6A1 19               add hl,de                   ; point to block.
285+  A6A2 C9               ret
286+  A6A3
287+  A6A3              ;
288+  A6A3              ; Get cell attribute.
289+  A6A3              ; Inputs:
290+  A6A3              ; a: block
291+  A6A3              ; Outputs:
292+  A6A3              ; hl: memory
293+  A6A3              ;
294+  A6A3              screen_getattr:
295+  A6A3 5F               ld e,a                      ; displacement to attribute address.
296+  A6A4 16 00            ld d,0                      ; no high byte.
297+  A6A6 21 DF AE         ld hl,sprite_attrs          ; address of block attributes.
298+  A6A9 19               add hl,de                   ; point to attribute.
299+  A6AA C9               ret
300+  A6AB
# file closed: screen/screen.asm
 25   A6AB                  include "screen\sprites.asm"
# file opened: screen/sprites.asm
  1+  A6AB              ;
  2+  A6AB              ; This is the sprite routine and expects coordinates in (c ,b) form,
  3+  A6AB              ; where c is the vertical coord from the top of the screen (0-176), and
  4+  A6AB              ; b is the horizontal coord from the left of the screen (0 to 240).
  5+  A6AB              ; Sprite data is stored as you'd expect in its unshifted form as this
  6+  A6AB              ; routine takes care of all the shifting itself. This means that sprite
  7+  A6AB              ; handling isn't particularly fast but the graphics only take 1/8th of the
  8+  A6AB              ; space they would require in pre-shifted form.
  9+  A6AB              ; Inputs:
 10+  A6AB              ; hl - sprite data
 11+  A6AB              ; bc - screen coords
 12+  A6AB              ;
 13+  A6AB              sprites_drawsprite7:
 14+  A6AB EE 07            xor 7               ; complement last 3 bits.
 15+  A6AD 3C               inc a               ; add one for luck!
 16+  A6AE              sprites_drawsprite3:
 17+  A6AE CB 11            rl c                ; ...into middle byte...
 18+  A6B0 CB 12            rl d                ; ...and finally into left character cell.
 19+  A6B2 3D               dec a               ; count shifts we've done.
 20+  A6B3 20 F9            jr nz,sprites_drawsprite3 ; return until all shifts complete.
 21+  A6B5                                      ; Line of sprite image is now in e + c + d, we need it in form c + d + e.
 22+  A6B5 79               ld a,c              ; left edge of image is currently in e.
 23+  A6B6 4A               ld c,d              ; put right edge there instead.
 24+  A6B7 57               ld d,a              ; and the left edge back into c.
 25+  A6B8 18 25            jr sprites_drawsprite0   ; we've done the switch so transfer to screen.
 26+  A6BA              sprites_drawsprite:
 27+  A6BA ED 43 1F A7      ld (dispx),bc       ; store coords in dispx for now.
 28+  A6BE E5               push hl
 29+  A6BF CD FD A6         call sprites_scadd  ; calculate screen address.
 30+  A6C2 E1               pop hl
 31+  A6C3 3E 08            ld a,8              ; height of sprite in pixels.
 32+  A6C5              sprites_drawsprite1:
 33+  A6C5 08               ex af,af'           ; store loop counter.
 34+  A6C6 D5               push de             ; store screen address.
 35+  A6C7 4E               ld c,(hl)           ; first sprite graphic.
 36+  A6C8 23               inc hl              ; increment poiinter to sprite data.
 37+  A6C9 22 21 A7         ld (sprtmp),hl      ; store it for later.
 38+  A6CC 16 00            ld d,0              ; blank right byte for now.
 39+  A6CE 78               ld a,b              ; b holds y position.
 40+  A6CF E6 07            and 7               ; how are we straddling character cells?
 41+  A6D1 28 0C            jr z,sprites_drawsprite0 ; we're not straddling them, don't bother shifting.
 42+  A6D3 FE 05            cp 5                ; 5 or more right shifts needed?
 43+  A6D5 30 D4            jr nc,sprites_drawsprite7 ; yes, shift from left as it's quicker.
 44+  A6D7 A7               and a               ; oops, carry flag is set so clear it.
 45+  A6D8              sprites_drawsprite2:
 46+  A6D8 CB 19            rr c                ; rotate left byte right...
 47+  A6DA CB 1A            rr d                ; ...into right byte.
 48+  A6DC 3D               dec a               ; one less shift to do.
 49+  A6DD 20 F9            jr nz,sprites_drawsprite2 ; return until all shifts complete.
 50+  A6DF              sprites_drawsprite0:
 51+  A6DF E1               pop hl              ; pop screen address from stack.
 52+  A6E0 7E               ld a,(hl)           ; what's there already.
 53+  A6E1 A9               xor c               ; merge in image data.
 54+  A6E2 77               ld (hl),a           ; place onto screen.
 55+  A6E3 23               inc hl
 56+  A6E4 7E               ld a,(hl)           ; what's already there.
 57+  A6E5 AA               xor d               ; right edge of sprite image data.
 58+  A6E6 77               ld (hl),a           ; plonk it on screen.
 59+  A6E7 3A 1F A7         ld a,(dispx)        ; vertical coordinate.
 60+  A6EA 3C               inc a               ; next line down.
 61+  A6EB 32 1F A7         ld (dispx),a        ; store new position.
 62+  A6EE 2B               dec hl
 63+  A6EF 11 20 00         ld de,32            ; add 32 to get to the next row
 64+  A6F2 19               add hl,de           ; add 32
 65+  A6F3              sprites_drawsprite6:
 66+  A6F3 EB               ex de,hl            ; screen address in de.
 67+  A6F4 2A 21 A7         ld hl,(sprtmp)      ; restore graphic address.
 68+  A6F7 08               ex af,af'           ; restore loop counter.
 69+  A6F8 3D               dec a               ; decrement it.
 70+  A6F9 C2 C5 A6         jp nz,sprites_drawsprite1 ; not reached bottom of sprite yet to repeat.
 71+  A6FC C9               ret                 ; job done.
 72+  A6FD
 73+  A6FD              ;
 74+  A6FD              ; This routine returns a buffer address for (c, b) in de (c vert).
 75+  A6FD              ; For example: 0,0 will be at memory offset 0
 76+  A6FD              ; 1,0 (1 down) will be at memory offset 1
 77+  A6FD              ; 0,7 will be at memory offset 0
 78+  A6FD              ; 9,1 will be at memory offset 8+1
 79+  A6FD              ; 8,0 will be at memory offset 256
 80+  A6FD              ; 9,0 will be at memory offset 257
 81+  A6FD              ; Outputs:
 82+  A6FD              ; de - coords
 83+  A6FD              ;
 84+  A6FD              sprites_scadd:
 85+  A6FD 79               ld a,c               ; calculate vertical offset
 86+  A6FE E6 F8            and 248             ;  to get nearest multiple of 8
 87+  A700 0F               rrca
 88+  A701 0F               rrca
 89+  A702 0F               rrca                ; divide by 8
 90+  A703 67               ld h,a
 91+  A704 78               ld a,b               ; calculate horizontal offset
 92+  A705 E6 F8            and 248             ;  to get nearest multiple of 8
 93+  A707 0F               rrca
 94+  A708 0F               rrca
 95+  A709 0F               rrca                ; divide by 8
 96+  A70A 6F               ld l,a
 97+  A70B C5               push bc             ; store the screen coords
 98+  A70C 44 4D            ld bc,hl            ; load bc with the character coords
 99+  A70E CD 70 A6         call screen_getbufferaddress
100+  A711 C1               pop bc              ; get back screen coords, de is now memory of character
101+  A712 79               ld a,c              ; now add the vertical within the cell
102+  A713 E6 07            and 7
103+  A715 0F               rrca                ; multiply by 32.
104+  A716 0F               rrca
105+  A717 0F               rrca
106+  A718 6F               ld l,a
107+  A719 26 00            ld h,0
108+  A71B 19               add hl,de
109+  A71C 54 5D            ld de,hl
110+  A71E C9               ret
111+  A71F
112+  A71F 00           dispx   defb 0           ; general-use coordinates.
113+  A720 00           dispy   defb 0
114+  A721 00 00        sprtmp  defb 0,0           ; sprite temporary address.
115+  A723
# file closed: screen/sprites.asm
 26   A723                  include "screen\titlescreen.asm"
# file opened: screen/titlescreen.asm
  1+  A723              ;
  2+  A723              ; Draws the title screen
  3+  A723              ;
  4+  A723              titlescreen_show:
  5+  A723 CD 9A A7         call titlescreen_init
  6+  A726 CD 44 A7         call titlescreen_drawtitle
  7+  A729 3E FA            ld a,250                              ; wait for 200 frames
  8+  A72B CD 52 80         call utilities_waitforkey_forframes   ; wait for keypress
  9+  A72E 7B               ld a,e
 10+  A72F FE 01            cp 1                                  ; was anything pressed?
 11+  A731 C8               ret z                                 ; end titlescreen if so
 12+  A732
 13+  A732 CD AD A7         call titlescreen_alt_init             ; otherwise, draw alt screen
 14+  A735 CD 60 A7         call titlescreen_alt_drawtitle
 15+  A738 3E FA            ld a,250                              ; wait for 200 frames
 16+  A73A CD 52 80         call utilities_waitforkey_forframes   ; wait for keypress
 17+  A73D 7B               ld a,e
 18+  A73E FE 01            cp 1                                  ; was anything pressed?
 19+  A740 C2 23 A7         jp nz,titlescreen_show                ; start again if not
 20+  A743 C9               ret
 21+  A744
 22+  A744              ;
 23+  A744              ; Draws the iconic logo
 24+  A744              ;
 25+  A744              titlescreen_drawtitle:
 26+  A744 06 66            ld b,102              ; number of points
 27+  A746 DD 21 BA A7      ld ix,titlescreen_logo_data
 28+  A74A              titlescreen_drawtitle0:
 29+  A74A C5               push bc
 30+  A74B DD 4E 00         ld c,(ix)                   ; got horiz
 31+  A74E DD 23            inc ix
 32+  A750 DD 46 00         ld b,(ix)                   ; got vert
 33+  A753 DD 23            inc ix
 34+  A755 CD 45 A6         call screen_getscreenattradress ; memory in de
 35+  A758 13               inc de                      ; slide one to the right, since I'm too lazy to change the data
 36+  A759 3E 13            ld a,19
 37+  A75B 12               ld (de),a
 38+  A75C C1               pop bc
 39+  A75D 10 EB            djnz titlescreen_drawtitle0 ; loop if we're not at the end
 40+  A75F C9               ret
 41+  A760
 42+  A760              ;
 43+  A760              ; Draws the alternate title screen
 44+  A760              ;
 45+  A760              titlescreen_alt_drawtitle:
 46+  A760 21 D0 80         ld hl,string_alttitlescreen_1
 47+  A763 CD ED 82         call string_print
 48+  A766 21 DC 80         ld hl,string_alttitlescreen_2
 49+  A769 CD ED 82         call string_print
 50+  A76C 21 D7 81         ld hl,string_alttitlescreen_3
 51+  A76F CD ED 82         call string_print
 52+  A772 3E 43            ld a,67
 53+  A774 11 00 58         ld de,22528                         ; top row attrs here
 54+  A777 CD 93 A7         call titlescreen_alt_setcolours
 55+  A77A 3E 46            ld a,70
 56+  A77C 11 A0 59         ld de,22528+416                     ; 13th row attrs here
 57+  A77F CD 93 A7         call titlescreen_alt_setcolours
 58+  A782 3E 43            ld a,67
 59+  A784 11 20 5A         ld de,22528+544                         ; 17th row attrs here
 60+  A787 CD 93 A7         call titlescreen_alt_setcolours
 61+  A78A 3E 42            ld a,66
 62+  A78C 11 A0 5A         ld de,22528+672                         ; 21st row attrs here
 63+  A78F CD 93 A7         call titlescreen_alt_setcolours
 64+  A792 C9               ret
 65+  A793
 66+  A793              titlescreen_alt_setcolours:
 67+  A793 06 20            ld b,32
 68+  A795              titlescreen_alt_setcolours0:
 69+  A795 12               ld (de),a
 70+  A796 13               inc de
 71+  A797 10 FC            djnz titlescreen_alt_setcolours0
 72+  A799 C9               ret
 73+  A79A
 74+  A79A              ;
 75+  A79A              ; Initialises the screen
 76+  A79A              ;
 77+  A79A              titlescreen_init:
 78+  A79A              ; We want a black screen.
 79+  A79A 3E 0B            ld a,11             ; magenta ink (7) on blue paper (0),
 80+  A79C                                      ; bright (64).
 81+  A79C CD 67 80         call utilities_clearscreen
 82+  A79F 32 8D 5C         ld (23693),a        ; set our screen colours.
 83+  A7A2 3E 01            ld a,1              ; 2 is the code for red.
 84+  A7A4 D3 FE            out (254),a         ; write to port 254.
 85+  A7A6
 86+  A7A6 21 B6 80         ld hl,string_titlescreen_copyright
 87+  A7A9 CD ED 82         call string_print
 88+  A7AC
 89+  A7AC C9               ret
 90+  A7AD
 91+  A7AD              ;
 92+  A7AD              ; Initialises the screen
 93+  A7AD              ;
 94+  A7AD              titlescreen_alt_init:
 95+  A7AD              ; We want a black screen.
 96+  A7AD 3E 47            ld a,71             ; white ink (7) on black paper (0),
 97+  A7AF                                      ; bright (64).
 98+  A7AF CD 67 80         call utilities_clearscreen
 99+  A7B2 32 8D 5C         ld (23693),a        ; set our screen colours.
100+  A7B5 3E 00            ld a,0              ; 2 is the code for red.
101+  A7B7 D3 FE            out (254),a         ; write to port 254.
102+  A7B9
103+  A7B9 C9               ret
104+  A7BA
105+  A7BA              ;
106+  A7BA              ; Horiz, vert
107+  A7BA              ;
108+  A7BA              titlescreen_logo_data:
109+  A7BA 08 00 09 00      defb 8,0,9,0,10,0,12,0,15,0,17,0,18,0,19,0
109+  A7BE 0A 00 0C 00
109+  A7C2 0F 00 11 00
109+  A7C6 12 00 13 00
110+  A7CA 09 01 0C 01      defb 9,1,12,1,15,1,17,1
110+  A7CE 0F 01 11 01
111+  A7D2 09 02 0C 02      defb 9,2,12,2,13,2,14,2,15,2,17,2,18,2,19,2
111+  A7D6 0D 02 0E 02
111+  A7DA 0F 02 11 02
111+  A7DE 12 02 13 02
112+  A7E2 09 03 0C 03      defb 9,3,12,3,15,3,17,3
112+  A7E6 0F 03 11 03
113+  A7EA 09 04 0C 04      defb 9,4,12,4,15,4,17,4,18,4,19,4
113+  A7EE 0F 04 11 04
113+  A7F2 12 04 13 04
114+  A7F6 00 06 01 06      defb 0,6,1,6,2,6,3,6,4,6,5,6,6,6,7,6,8,6,9,6,10,6,11,6
114+  A7FA 02 06 03 06
114+  A7FE 04 06 05 06
114+  A802 06 06 07 06
114+  A806 08 06 09 06
114+  A80A 0A 06 0B 06
115+  A80E 10 06 11 06      defb 16,6,17,6,18,6,19,6,20,6,21,6,22,6,23,6,24,6,25,6,26,6,27,6
115+  A812 12 06 13 06
115+  A816 14 06 15 06
115+  A81A 16 06 17 06
115+  A81E 18 06 19 06
115+  A822 1A 06 1B 06
116+  A826 02 07 02 08      defb 2,7,2,8,2,9,2,10,2,11,2,12,2,13,2,14,2,15,2,16,2,17,2,18,2,19,2,20
116+  A82A 02 09 02 0A
116+  A82E 02 0B 02 0C
116+  A832 02 0D 02 0E
116+  A836 02 0F 02 10
116+  A83A 02 11 02 12
116+  A83E 02 13 02 14
117+  A842 19 07 19 08      defb 25,7,25,8,25,9,25,10,25,11,25,12,25,13,25,14,25,15,25,16,25,17,25,18,25,19,25,20
117+  A846 19 09 19 0A
117+  A84A 19 0B 19 0C
117+  A84E 19 0D 19 0E
117+  A852 19 0F 19 10
117+  A856 19 11 19 12
117+  A85A 19 13 19 14
118+  A85E 03 0B 04 0B      defb 3,11,4,11,5,11,6,11,7,11,8,11,9,11,10,11,11,11
118+  A862 05 0B 06 0B
118+  A866 07 0B 08 0B
118+  A86A 09 0B 0A 0B
118+  A86E 0B 0B
119+  A870 0B 07 0B 08      defb 11,7,11,8,11,9,11,10
119+  A874 0B 09 0B 0A
120+  A878 10 0D 10 0F      defb 16,13,16,15,16,16,16,17,16,18,16,19,16,20
120+  A87C 10 10 10 11
120+  A880 10 12 10 13
120+  A884 10 14
121+  A886
# file closed: screen/titlescreen.asm
 27   A886                  include "screen\lifescreen.asm"
# file opened: screen/lifescreen.asm
  1+  A886              ;
  2+  A886              ; Draws the life remaining screen
  3+  A886              ;
  4+  A886              lifescreen_draw:
  5+  A886 CD BC A8         call lifescreen_init
  6+  A889
  7+  A889 3A B6 B3         ld a,(game_currentplayer)             ; get the current player
  8+  A88C C6 30            add 48                                ; add 48 to get char
  9+  A88E 21 DD 82         ld hl,string_lifescreen_player+10
 10+  A891 77               ld (hl),a                             ; load this to the string we're about to show
 11+  A892
 12+  A892 21 D3 82         ld hl,string_lifescreen_player
 13+  A895 CD ED 82         call string_print
 14+  A898
 15+  A898 3A ED B3         ld a,(player+9)                       ; get the current player lives
 16+  A89B C6 30            add 48                                ; add 48 to get the character
 17+  A89D 21 E2 82         ld hl,string_lifescreen_lives+2
 18+  A8A0 77               ld (hl),a                             ; load this to the string we're about to show
 19+  A8A1
 20+  A8A1
 21+  A8A1 21 E0 82         ld hl,string_lifescreen_lives
 22+  A8A4 CD ED 82         call string_print
 23+  A8A7
 24+  A8A7 3E 86            ld a,134
 25+  A8A9 11 0B 58         ld de, 22528+11     ; get the colour for the top text
 26+  A8AC CD B5 A8         call lifescreen_alt_setcolours
 27+  A8AF
 28+  A8AF 3E 64            ld a,100                              ; wait for 200 frames
 29+  A8B1 CD 52 80         call utilities_waitforkey_forframes   ; wait for keypress
 30+  A8B4
 31+  A8B4 C9               ret
 32+  A8B5
 33+  A8B5              lifescreen_alt_setcolours:
 34+  A8B5 06 0A            ld b,10
 35+  A8B7              lifescreen_alt_setcolours0:
 36+  A8B7 12               ld (de),a
 37+  A8B8 13               inc de
 38+  A8B9 10 FC            djnz lifescreen_alt_setcolours0
 39+  A8BB C9               ret
 40+  A8BC
 41+  A8BC              ;
 42+  A8BC              ; Initialises the screen
 43+  A8BC              ;
 44+  A8BC              lifescreen_init:
 45+  A8BC              ; We want a blue screen.
 46+  A8BC                  ;call $0D6B
 47+  A8BC 3E 0E            ld a,14             ; yellow ink (6) on blue paper (1),
 48+  A8BE                                      ; bright (64).
 49+  A8BE CD 67 80         call utilities_clearscreen
 50+  A8C1 32 8D 5C         ld (23693),a        ; set our screen colours.
 51+  A8C4 3E 01            ld a,1              ; 1 is the code for blue.
 52+  A8C6 D3 FE            out (254),a         ; write to port 254.
 53+  A8C8                  ;call 3503           ; ROM routine - clears screen, opens chan 2.
 54+  A8C8
 55+  A8C8 C9               ret
# file closed: screen/lifescreen.asm
 28   A8C9
 29   A8C9                  include "leveldata\level01.asm"
# file opened: leveldata/level01.asm
  1+  A8C9              ; ###############################################################
  2+  A8C9              ; Data for level 1
  3+  A8C9              ; ###############################################################
  4+  A8C9              level01:
  5+  A8C9
  6+  A8C9                  ;defb 09,04,04,04,04,04,04,04,04,04,04,04,04,04,04,09,09,04,04,04,04,04,04,04,04,04,04,04,04,04,04,09
  7+  A8C9
  8+  A8C9 00 00 05 05      defb 00,00,05,05,05,05,05,05,05,05,05,05,05,05,02,01,01,01,03,05,05,05,05,05,05,05,05,05,05,05,00,00
  8+  A8CD 05 05 05 05
  8+  A8D1 05 05 05 05
  8+  A8D5 05 05 02 01
  8+  A8D9 01 01 03 05
  8+  A8DD 05 05 05 05
  8+  A8E1 05 05 05 05
  8+  A8E5 05 05 00 00
  9+  A8E9 00 00 05 05      defb 00,00,05,05,05,05,05,05,05,05,05,05,02,01,01,01,01,01,01,01,03,05,05,05,05,05,05,05,05,05,00,00
  9+  A8ED 05 05 05 05
  9+  A8F1 05 05 05 05
  9+  A8F5 02 01 01 01
  9+  A8F9 01 01 01 01
  9+  A8FD 03 05 05 05
  9+  A901 05 05 05 05
  9+  A905 05 05 00 00
 10+  A909 00 00 05 05      defb 00,00,05,05,05,05,05,05,05,05,02,01,01,01,01,01,01,01,01,01,01,01,03,05,13,13,13,13,13,13,00,00
 10+  A90D 05 05 05 05
 10+  A911 05 05 02 01
 10+  A915 01 01 01 01
 10+  A919 01 01 01 01
 10+  A91D 01 01 03 05
 10+  A921 0D 0D 0D 0D
 10+  A925 0D 0D 00 00
 11+  A929 00 00 01 01      defb 00,00,01,01,01,01,00,01,01,01,01,01,01,01,01,01,01,01,01,01,01,01,01,03,05,05,05,05,05,05,00,00
 11+  A92D 01 01 00 01
 11+  A931 01 01 01 01
 11+  A935 01 01 01 01
 11+  A939 01 01 01 01
 11+  A93D 01 01 01 03
 11+  A941 05 05 05 05
 11+  A945 05 05 00 00
 12+  A949 00 00 01 01      defb 00,00,01,01,04,04,04,04,04,04,01,01,01,01,01,01,01,01,01,01,01,01,01,01,01,01,01,01,00,01,00,00
 12+  A94D 04 04 04 04
 12+  A951 04 04 01 01
 12+  A955 01 01 01 01
 12+  A959 01 01 01 01
 12+  A95D 01 01 01 01
 12+  A961 01 01 01 01
 12+  A965 00 01 00 00
 13+  A969 00 00 01 04      defb 00,00,01,04,04,04,04,04,04,04,04,04,01,01,01,01,01,01,01,01,01,01,01,01,00,00,00,00,00,01,00,00
 13+  A96D 04 04 04 04
 13+  A971 04 04 04 04
 13+  A975 01 01 01 01
 13+  A979 01 01 01 01
 13+  A97D 01 01 01 01
 13+  A981 00 00 00 00
 13+  A985 00 01 00 00
 14+  A989 00 00 01 04      defb 00,00,01,04,04,01,01,01,01,01,04,04,04,04,01,01,01,01,01,01,01,00,00,00,00,01,01,01,01,01,00,00
 14+  A98D 04 01 01 01
 14+  A991 01 01 04 04
 14+  A995 04 04 01 01
 14+  A999 01 01 01 01
 14+  A99D 01 00 00 00
 14+  A9A1 00 01 01 01
 14+  A9A5 01 01 00 00
 15+  A9A9 00 00 01 04      defb 00,00,01,04,04,04,04,04,04,01,04,04,04,04,04,04,04,04,00,00,00,00,04,04,04,04,04,04,04,01,00,00
 15+  A9AD 04 04 04 04
 15+  A9B1 04 01 04 04
 15+  A9B5 04 04 04 04
 15+  A9B9 04 04 00 00
 15+  A9BD 00 00 04 04
 15+  A9C1 04 04 04 04
 15+  A9C5 04 01 00 00
 16+  A9C9 00 00 01 01      defb 00,00,01,01,01,04,01,01,01,01,04,04,04,04,04,04,04,04,00,04,04,04,04,04,04,04,04,04,04,01,00,00
 16+  A9CD 01 04 01 01
 16+  A9D1 01 01 04 04
 16+  A9D5 04 04 04 04
 16+  A9D9 04 04 00 04
 16+  A9DD 04 04 04 04
 16+  A9E1 04 04 04 04
 16+  A9E5 04 01 00 00
 17+  A9E9 00 00 01 00      defb 00,00,01,00,00,00,00,00,00,04,04,04,04,04,04,04,04,04,00,04,04,04,04,04,04,04,04,04,04,01,00,00
 17+  A9ED 00 00 00 00
 17+  A9F1 00 04 04 04
 17+  A9F5 04 04 04 04
 17+  A9F9 04 04 00 04
 17+  A9FD 04 04 04 04
 17+  AA01 04 04 04 04
 17+  AA05 04 01 00 00
 18+  AA09 00 00 01 07      defb 00,00,01,07,07,07,07,07,07,01,04,04,04,04,04,04,04,04,00,04,04,04,04,04,04,04,04,04,04,01,00,00
 18+  AA0D 07 07 07 07
 18+  AA11 07 01 04 04
 18+  AA15 04 04 04 04
 18+  AA19 04 04 00 04
 18+  AA1D 04 04 04 04
 18+  AA21 04 04 04 04
 18+  AA25 04 01 00 00
 19+  AA29 00 00 01 00      defb 00,00,01,00,00,00,00,00,00,01,04,04,04,04,04,04,04,04,00,04,04,04,04,04,04,00,00,00,00,01,00,00
 19+  AA2D 00 00 00 00
 19+  AA31 00 01 04 04
 19+  AA35 04 04 04 04
 19+  AA39 04 04 00 04
 19+  AA3D 04 04 04 04
 19+  AA41 04 00 00 00
 19+  AA45 00 01 00 00
 20+  AA49 00 00 01 00      defb 00,00,01,00,00,00,00,00,00,01,04,04,04,04,04,04,04,04,00,04,04,04,04,04,04,00,04,04,00,01,00,00
 20+  AA4D 00 00 00 00
 20+  AA51 00 01 04 04
 20+  AA55 04 04 04 04
 20+  AA59 04 04 00 04
 20+  AA5D 04 04 04 04
 20+  AA61 04 00 04 04
 20+  AA65 00 01 00 00
 21+  AA69 00 00 01 06      defb 00,00,01,06,06,06,06,06,06,01,04,04,04,04,04,04,04,04,00,04,04,04,04,04,04,00,04,04,00,01,00,00
 21+  AA6D 06 06 06 06
 21+  AA71 06 01 04 04
 21+  AA75 04 04 04 04
 21+  AA79 04 04 00 04
 21+  AA7D 04 04 04 04
 21+  AA81 04 00 04 04
 21+  AA85 00 01 00 00
 22+  AA89 00 00 01 06      defb 00,00,01,06,06,06,06,06,06,01,04,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,04,04,00,01,00,00
 22+  AA8D 06 06 06 06
 22+  AA91 06 01 04 00
 22+  AA95 00 00 00 00
 22+  AA99 00 00 00 00
 22+  AA9D 00 00 00 00
 22+  AAA1 00 00 04 04
 22+  AAA5 00 01 00 00
 23+  AAA9 00 00 01 06      defb 00,00,01,06,06,06,06,06,06,01,04,00,04,04,04,04,04,04,00,04,04,04,00,04,04,04,04,04,00,01,00,00
 23+  AAAD 06 06 06 06
 23+  AAB1 06 01 04 00
 23+  AAB5 04 04 04 04
 23+  AAB9 04 04 00 04
 23+  AABD 04 04 00 04
 23+  AAC1 04 04 04 04
 23+  AAC5 00 01 00 00
 24+  AAC9 00 00 01 06      defb 00,00,01,06,06,06,06,06,06,01,04,00,04,04,04,04,04,04,00,04,04,04,00,04,04,04,04,04,00,01,00,00
 24+  AACD 06 06 06 06
 24+  AAD1 06 01 04 00
 24+  AAD5 04 04 04 04
 24+  AAD9 04 04 00 04
 24+  AADD 04 04 00 04
 24+  AAE1 04 04 04 04
 24+  AAE5 00 01 00 00
 25+  AAE9 00 00 01 01      defb 00,00,01,01,01,01,01,01,01,01,04,00,04,04,04,04,04,04,00,04,04,04,00,04,04,04,04,04,00,01,00,00
 25+  AAED 01 01 01 01
 25+  AAF1 01 01 04 00
 25+  AAF5 04 04 04 04
 25+  AAF9 04 04 00 04
 25+  AAFD 04 04 00 04
 25+  AB01 04 04 04 04
 25+  AB05 00 01 00 00
 26+  AB09 00 00 01 04      defb 00,00,01,04,04,04,04,04,04,04,04,00,04,04,04,04,04,04,00,04,04,04,00,00,00,00,04,04,04,01,00,00
 26+  AB0D 04 04 04 04
 26+  AB11 04 04 04 00
 26+  AB15 04 04 04 04
 26+  AB19 04 04 00 04
 26+  AB1D 04 04 00 00
 26+  AB21 00 00 04 04
 26+  AB25 04 01 00 00
 27+  AB29 00 00 01 04      defb 00,00,01,04,04,04,00,00,00,00,00,00,04,04,04,04,04,04,00,04,04,04,04,04,04,00,04,04,04,01,00,00
 27+  AB2D 04 04 00 00
 27+  AB31 00 00 00 00
 27+  AB35 04 04 04 04
 27+  AB39 04 04 00 04
 27+  AB3D 04 04 04 04
 27+  AB41 04 00 04 04
 27+  AB45 04 01 00 00
 28+  AB49 00 00 01 04      defb 00,00,01,04,04,04,00,04,04,04,04,04,04,04,04,04,04,04,00,04,04,04,04,04,04,00,04,04,04,01,00,00
 28+  AB4D 04 04 00 04
 28+  AB51 04 04 04 04
 28+  AB55 04 04 04 04
 28+  AB59 04 04 00 04
 28+  AB5D 04 04 04 04
 28+  AB61 04 00 04 04
 28+  AB65 04 01 00 00
 29+  AB69 00 00 01 04      defb 00,00,01,04,04,04,00,04,04,04,01,01,01,01,01,01,01,01,01,01,01,01,01,01,04,00,04,04,04,01,00,00
 29+  AB6D 04 04 00 04
 29+  AB71 04 04 01 01
 29+  AB75 01 01 01 01
 29+  AB79 01 01 01 01
 29+  AB7D 01 01 01 01
 29+  AB81 04 00 04 04
 29+  AB85 04 01 00 00
 30+  AB89 00 00 01 04      defb 00,00,01,04,04,04,00,04,04,04,01,00,00,00,00,00,00,00,00,00,00,00,00,01,04,00,04,04,04,01,00,00
 30+  AB8D 04 04 00 04
 30+  AB91 04 04 01 00
 30+  AB95 00 00 00 00
 30+  AB99 00 00 00 00
 30+  AB9D 00 00 00 01
 30+  ABA1 04 00 04 04
 30+  ABA5 04 01 00 00
 31+  ABA9 00 00 01 04      defb 00,00,01,04,04,04,00,04,04,04,01,00,00,00,00,00,00,00,00,00,00,00,00,01,04,00,04,04,04,01,00,00
 31+  ABAD 04 04 00 04
 31+  ABB1 04 04 01 00
 31+  ABB5 00 00 00 00
 31+  ABB9 00 00 00 00
 31+  ABBD 00 00 00 01
 31+  ABC1 04 00 04 04
 31+  ABC5 04 01 00 00
 32+  ABC9 00 00 01 04      defb 00,00,01,04,04,04,00,04,04,04,01,00,00,00,00,00,00,00,00,00,00,00,00,01,04,00,04,04,04,01,00,00
 32+  ABCD 04 04 00 04
 32+  ABD1 04 04 01 00
 32+  ABD5 00 00 00 00
 32+  ABD9 00 00 00 00
 32+  ABDD 00 00 00 01
 32+  ABE1 04 00 04 04
 32+  ABE5 04 01 00 00
 33+  ABE9 00 00 01 04      defb 00,00,01,04,04,04,00,04,04,04,04,00,00,00,00,00,00,00,00,00,00,00,00,04,04,04,04,04,04,01,00,00
 33+  ABED 04 04 00 04
 33+  ABF1 04 04 04 00
 33+  ABF5 00 00 00 00
 33+  ABF9 00 00 00 00
 33+  ABFD 00 00 00 04
 33+  AC01 04 04 04 04
 33+  AC05 04 01 00 00
 34+  AC09 00 00 01 04      defb 00,00,01,04,04,04,04,04,04,04,01,00,00,00,00,00,00,00,00,00,00,00,00,01,04,04,04,04,04,01,00,00
 34+  AC0D 04 04 04 04
 34+  AC11 04 04 01 00
 34+  AC15 00 00 00 00
 34+  AC19 00 00 00 00
 34+  AC1D 00 00 00 01
 34+  AC21 04 04 04 04
 34+  AC25 04 01 00 00
 35+  AC29 00 00 01 04      defb 00,00,01,04,04,04,04,04,04,04,01,00,00,00,01,00,00,00,00,01,00,00,00,01,04,04,04,04,04,01,00,00
 35+  AC2D 04 04 04 04
 35+  AC31 04 04 01 00
 35+  AC35 00 00 01 00
 35+  AC39 00 00 00 01
 35+  AC3D 00 00 00 01
 35+  AC41 04 04 04 04
 35+  AC45 04 01 00 00
 36+  AC49 00 00 01 01      defb 00,00,01,01,01,01,01,01,01,01,01,01,01,01,01,01,01,01,01,01,01,01,01,01,01,01,01,01,01,01,00,00
 36+  AC4D 01 01 01 01
 36+  AC51 01 01 01 01
 36+  AC55 01 01 01 01
 36+  AC59 01 01 01 01
 36+  AC5D 01 01 01 01
 36+  AC61 01 01 01 01
 36+  AC65 01 01 00 00
 37+  AC69
 38+  AC69              ; ###############################################################
 39+  AC69              ; Object data: horiz, vert, state, memh, meml
 40+  AC69              ; ###############################################################
 41+  AC69              level01rocks:
 42+  AC69 09 04 00 00      defb 9,4,0,0,0
 42+  AC6D 00
 43+  AC6E 0C 07 00 00      defb 12,7,0,0,0
 43+  AC72 00
 44+  AC73 10 07 00 00      defb 16,7,0,0,0
 44+  AC77 00
 45+  AC78 0B 08 00 00      defb 11,8,0,0,0
 45+  AC7C 00
 46+  AC7D 0A 0A 00 00      defb 10,10,0,0,0
 46+  AC81 00
 47+  AC82 0C 0A 00 00      defb 12,10,0,0,0
 47+  AC86 00
 48+  AC87 0D 09 00 00      defb 13,9,0,0,0
 48+  AC8B 00
 49+  AC8C 0E 08 00 00      defb 14,8,0,0,0
 49+  AC90 00
 50+  AC91 0F 0B 00 00      defb 15,11,0,0,0
 50+  AC95 00
 51+  AC96 0B 0C 00 00      defb 11,12,0,0,0
 51+  AC9A 00
 52+  AC9B 11 0C 00 00      defb 17,12,0,0,0
 52+  AC9F 00
 53+  ACA0 13 08 00 00      defb 19,8,0,0,0
 53+  ACA4 00
 54+  ACA5 16 09 00 00      defb 22,9,0,0,0
 54+  ACA9 00
 55+  ACAA 13 0A 00 00      defb 19,10,0,0,0
 55+  ACAE 00
 56+  ACAF 15 0A 00 00      defb 21,10,0,0,0
 56+  ACB3 00
 57+  ACB4 15 0C 00 00      defb 21,12,0,0,0
 57+  ACB8 00
 58+  ACB9 16 0C 00 00      defb 22,12,0,0,0
 58+  ACBD 00
 59+  ACBE 18 0A 00 00      defb 24,10,0,0,0
 59+  ACC2 00
 60+  ACC3 19 09 00 00      defb 25,9,0,0,0
 60+  ACC7 00
 61+  ACC8 1C 09 00 00      defb 28,9,0,0,0
 61+  ACCC 00
 62+  ACCD 1B 0C 00 00      defb 27,12,0,0,0
 62+  ACD1 00
 63+  ACD2 1A 0D 00 00      defb 26,13,0,0,0
 63+  ACD6 00
 64+  ACD7 19 0E 00 00      defb 25,14,0,0,0
 64+  ACDB 00
 65+  ACDC 19 10 00 00      defb 25,16,0,0,0
 65+  ACE0 00
 66+  ACE1 1A 11 00 00      defb 26,17,0,0,0
 66+  ACE5 00
 67+  ACE6 1B 11 00 00      defb 27,17,0,0,0
 67+  ACEA 00
 68+  ACEB 1C 12 00 00      defb 28,18,0,0,0
 68+  ACEF 00
 69+  ACF0 1A 13 00 00      defb 26,19,0,0,0
 69+  ACF4 00
 70+  ACF5 1B 15 00 00      defb 27,21,0,0,0
 70+  ACF9 00
 71+  ACFA 1A 17 00 00      defb 26,23,0,0,0
 71+  ACFE 00
 72+  ACFF 1B 18 00 00      defb 27,24,0,0,0
 72+  AD03 00
 73+  AD04 19 18 00 00      defb 25,24,0,0,0
 73+  AD08 00
 74+  AD09 18 17 00 00      defb 24,23,0,0,0
 74+  AD0D 00
 75+  AD0E 13 14 00 00      defb 19,20,0,0,0
 75+  AD12 00
 76+  AD13 14 12 00 00      defb 20,18,0,0,0
 76+  AD17 00
 77+  AD18 14 10 00 00      defb 20,16,0,0,0
 77+  AD1C 00
 78+  AD1D 15 10 00 00      defb 21,16,0,0,0
 78+  AD21 00
 79+  AD22 16 12 00 00      defb 22,18,0,0,0
 79+  AD26 00
 80+  AD27 11 14 00 00      defb 17,20,0,0,0
 80+  AD2B 00
 81+  AD2C 0D 11 00 00      defb 13,17,0,0,0
 81+  AD30 00
 82+  AD31 0C 13 00 00      defb 12,19,0,0,0
 82+  AD35 00
 83+  AD36 0B 13 00 00      defb 11,19,0,0,0
 83+  AD3A 00
 84+  AD3B 0A 11 00 00      defb 10,17,0,0,0
 84+  AD3F 00
 85+  AD40 05 12 00 00      defb 5,18,0,0,0
 85+  AD44 00
 86+  AD45 07 16 00 00      defb 7,22,0,0,0
 86+  AD49 00
 87+  AD4A 09 17 00 00      defb 9,23,0,0,0
 87+  AD4E 00
 88+  AD4F 07 18 00 00      defb 7,24,0,0,0
 88+  AD53 00
 89+  AD54 05 18 00 00      defb 5,24,0,0,0
 89+  AD58 00
 90+  AD59 06 19 00 00      defb 6,25,0,0,0
 90+  AD5D 00
 91+  AD5E 08 19 00 00      defb 8,25,0,0,0
 91+  AD62 00
 92+  AD63 04 17 00 00      defb 4,23,0,0,0
 92+  AD67 00
 93+  AD68 FF               defb 255
 94+  AD69
 95+  AD69              level01missiles:
 96+  AD69 0B 17 00 00      defb 11,23,0,0,0
 96+  AD6D 00
 97+  AD6E 0B 16 00 00      defb 11,22,0,0,0
 97+  AD72 00
 98+  AD73 0C 17 00 00      defb 12,23,0,0,0
 98+  AD77 00
 99+  AD78 0C 16 00 00      defb 12,22,0,0,0
 99+  AD7C 00
100+  AD7D 0D 17 00 00      defb 13,23,0,0,0
100+  AD81 00
101+  AD82 0D 16 00 00      defb 13,22,0,0,0
101+  AD86 00
102+  AD87 0E 17 00 00      defb 14,23,0,0,0
102+  AD8B 00
103+  AD8C 0E 16 00 00      defb 14,22,0,0,0
103+  AD90 00
104+  AD91 0F 17 00 00      defb 15,23,0,0,0
104+  AD95 00
105+  AD96 0F 16 00 00      defb 15,22,0,0,0
105+  AD9A 00
106+  AD9B 10 17 00 00      defb 16,23,0,0,0
106+  AD9F 00
107+  ADA0 10 16 00 00      defb 16,22,0,0,0
107+  ADA4 00
108+  ADA5 11 17 00 00      defb 17,23,0,0,0
108+  ADA9 00
109+  ADAA 11 16 00 00      defb 17,22,0,0,0
109+  ADAE 00
110+  ADAF 12 17 00 00      defb 18,23,0,0,0
110+  ADB3 00
111+  ADB4 12 16 00 00      defb 18,22,0,0,0
111+  ADB8 00
112+  ADB9 13 17 00 00      defb 19,23,0,0,0
112+  ADBD 00
113+  ADBE 13 16 00 00      defb 19,22,0,0,0
113+  ADC2 00
114+  ADC3 14 17 00 00      defb 20,23,0,0,0
114+  ADC7 00
115+  ADC8 14 16 00 00      defb 20,22,0,0,0
115+  ADCC 00
116+  ADCD 15 17 00 00      defb 21,23,0,0,0
116+  ADD1 00
117+  ADD2 15 16 00 00      defb 21,22,0,0,0
117+  ADD6 00
118+  ADD7 16 17 00 00      defb 22,23,0,0,0
118+  ADDB 00
119+  ADDC 16 16 00 00      defb 22,22,0,0,0
119+  ADE0 00
120+  ADE1 FF               defb 255
121+  ADE2
122+  ADE2              level01diamonds:
123+  ADE2 0C 1B 00 00      defb 12,27,0,0,0
123+  ADE6 00
124+  ADE7 10 1B 00 00      defb 16,27,0,0,0
124+  ADEB 00
125+  ADEC 15 1B 00 00      defb 21,27,0,0,0
125+  ADF0 00
126+  ADF1 FF               defb 255
127+  ADF2
128+  ADF2              level01gems:
129+  ADF2 12 14 00 00      defb 18,20,0,0,0
129+  ADF6 00
130+  ADF7 06 18 00 00      defb 6,24,0,0,0
130+  ADFB 00
131+  ADFC 19 17 00 00      defb 25,23,0,0,0
131+  AE00 00
132+  AE01 1C 11 00 00      defb 28,17,0,0,0
132+  AE05 00
133+  AE06 FF               defb 255
134+  AE07              ;
135+  AE07              ; Score area colours
136+  AE07              ;
137+  AE07              score_colours:
138+  AE07 47 47 47 47      defb 71,71,71,71,71,71,71,71,71,71,71,66,67,67,67,67,67,67,67,67,66,71,71,71,71,71,71,71,71,71,71,71
138+  AE0B 47 47 47 47
138+  AE0F 47 47 47 42
138+  AE13 43 43 43 43
138+  AE17 43 43 43 43
138+  AE1B 42 47 47 47
138+  AE1F 47 47 47 47
138+  AE23 47 47 47 47
139+  AE27 47 47 47 47      defb 71,71,71,71,71,71,71,71,71,71,71,70,70,70,70,70,70,70,70,70,70,71,71,71,71,71,71,71,71,71,71,71
139+  AE2B 47 47 47 47
139+  AE2F 47 47 47 46
139+  AE33 46 46 46 46
139+  AE37 46 46 46 46
139+  AE3B 46 47 47 47
139+  AE3F 47 47 47 47
139+  AE43 47 47 47 47
140+  AE47
141+  AE47              high_score_colours:
142+  AE47 00 00 00 42      defb  0, 0, 0,66,66,66,71,71,71,71,71,71,67,67,67,71,71,71,71,71,71,70,70,70,71,71,71,71,71,71,0,0
142+  AE4B 42 42 47 47
142+  AE4F 47 47 47 47
142+  AE53 43 43 43 47
142+  AE57 47 47 47 47
142+  AE5B 47 46 46 46
142+  AE5F 47 47 47 47
142+  AE63 47 47 00 00
# file closed: leveldata/level01.asm
 30   AE67                  include "graphics\graphics.asm"
# file opened: graphics/graphics.asm
  1+  AE67              ; Tiles graphics.
  2+  AE67              sprites:
  3+  AE67 00 00 00 00      defb    0  ,  0,  0,  0,  0,  0,  0,  0   ; 0, space
  3+  AE6B 00 00 00 00
  4+  AE6F FF FF FF FF      defb    255,255,255,255,255,255,255,255   ; 1, cyan block
  4+  AE73 FF FF FF FF
  5+  AE77 01 03 07 0F      defb	  1,  3,  7, 15, 31, 63,127,255   ; 2, slope left
  5+  AE7B 1F 3F 7F FF
  6+  AE7F 80 C0 E0 F0      defb    128,192,224,240,248,252,254,255   ; 3, slope right
  6+  AE83 F8 FC FE FF
  7+  AE87 55 AA 55 AA      defb    85,170, 85,170, 85,170, 85,170    ; 4, dirt
  7+  AE8B 55 AA 55 AA
  8+  AE8F 00 00 00 00      defb    0  ,  0,  0,  0,  0,  0,  0,  0   ; 5, sky block
  8+  AE93 00 00 00 00
  9+  AE97 FF FF FF FF      defb    255,255,255,255,255,255,255,255   ; 6, slime block
  9+  AE9B FF FF FF FF
 10+  AE9F FF FF 00 00      defb    255,255,  0,  0,  0,  0,  0,  0   ; 7, trapdoor
 10+  AEA3 00 00 00 00
 11+  AEA7 18 2C 4E 8F      defb    24, 44, 78,143,241,114, 52,  24    ; 8, diamond
 11+  AEAB F1 72 34 18
 12+  AEAF 3C 7E FF 7F      defb    60,126,255,127,254,254,255,126    ; 9, rock
 12+  AEB3 FE FE FF 7E
 13+  AEB7 7E FF 7F 7F  	defb	126,255,127,127,254,255,126, 60    ; 10, rock 2
 13+  AEBB FE FF 7E 3C
 14+  AEBF 00 00 00 00      defb    0  ,  0,  0,  0,  0,  0,255,255   ; 11, sky block, pixel trapdoor
 14+  AEC3 00 00 FF FF
 15+  AEC7 99 DB 7E 24  	defb    153,219,126, 36,255,126, 60, 24   ; 12, missile
 15+  AECB FF 7E 3C 18
 16+  AECF 00 00 00 00      defb    0  ,  0,  0,  0,  0,  0,  0,  0   ; 13, sky block, tank background
 16+  AED3 00 00 00 00
 17+  AED7 00 00 00 00  	defb    0,  0,  0,  0,  0, 60, 90, 52     ; 14, gem
 17+  AEDB 00 3C 5A 34
 18+  AEDF
 19+  AEDF              sprite_attrs:
 20+  AEDF 46               defb    070 ; 0, space
 21+  AEE0 65               defb    101 ; 1, cyan block
 22+  AEE1 4D               defb    077 ; 2, slope left
 23+  AEE2 4D               defb    077 ; 3, slope right
 24+  AEE3 46               defb    070 ; 4, dirt
 25+  AEE4 4E               defb    078 ; 5, sky
 26+  AEE5 4C               defb    076 ; 6, slime
 27+  AEE6 42               defb    066 ; 7, trapdoor
 28+  AEE7 46               defb    070 ; 8, diamond
 29+  AEE8 42               defb    066 ; 9, rock
 30+  AEE9 42               defb    066 ; 10, rock 2
 31+  AEEA 49           	defb    073 ; 11, sky, trapdoor
 32+  AEEB 43           	defb    067 ; 12, missile
 33+  AEEC 4A               defb    074 ; 13, sky, red ink (tank)
 34+  AEED 46               defb    070 ; 14, gem
 35+  AEEE
 36+  AEEE              player_sprite:
 37+  AEEE 10 39 92 FC  	defb	 16, 57,146,252, 56, 61,195,128 ; 0 up/down 1
 37+  AEF2 38 3D C3 80
 38+  AEF6 08 1C 08 FC  	defb	  8, 28,  8,252, 60, 28, 22, 50 ; 1 left 1
 38+  AEFA 3C 1C 16 32
 39+  AEFE 10 38 10 3F      defb   	 16, 56, 16, 63, 60, 56,104, 76 ; 2 right 1
 39+  AF02 3C 38 68 4C
 40+  AF06 08 9C 49 3F  	defb	  8,156, 73, 63, 28,188,195,  1 ; 3 up/down 2
 40+  AF0A 1C BC C3 01
 41+  AF0E 08 1C 08 FC  	defb	  8, 28,  8,252, 60, 60,100, 12; 4 left 2
 41+  AF12 3C 3C 64 0C
 42+  AF16 10 38 10 3F  	defb	 16, 56, 16, 63, 60, 60, 38, 48 ; 5 right 2
 42+  AF1A 3C 3C 26 30
 43+  AF1E 54 28 10 12  	defb	 84, 40, 16, 18, 30, 92,253, 95 ; 6 shoot up
 43+  AF22 1E 5C FD 5F
 44+  AF26 02 87 42 BF  	defb	 2,135, 66,191, 79,143, 25,  3  ; 7 shoot left
 44+  AF2A 4F 8F 19 03
 45+  AF2E 40 E1 42 FD  	defb	 64,225, 66,253,242,241,152,192 ; 8 shoot right
 45+  AF32 F2 F1 98 C0
 46+  AF36 FA BF 3A 78  	defb	 250,191, 58,120, 72,  8, 20, 42 ; 9 shoot down
 46+  AF3A 48 08 14 2A
 47+  AF3E
 48+  AF3E              ;
 49+  AF3E              ; First 4 top half, next 4 bottom 1, next 4 bottom 2
 50+  AF3E              ;
 51+  AF3E              ship_sprite:
 52+  AF3E 00 00 00 01  	defb	  0,  0,  0,  1,  3, 31,127,255
 52+  AF42 03 1F 7F FF
 53+  AF46 1F 01 7F FF  	defb	 31,  1,127,255,255,255,255,255
 53+  AF4A FF FF FF FF
 54+  AF4E F8 80 FE FF  	defb	248,128,254,255,255,255,255,255
 54+  AF52 FF FF FF FF
 55+  AF56 00 00 00 80  	defb	  0,  0,  0,128,192,248,254,255
 55+  AF5A C0 F8 FE FF
 56+  AF5E B3 B3 7F 1F  	defb	179,179,127, 31,  3,  3,  2,  7
 56+  AF62 03 03 02 07
 57+  AF66 8F 8F FF FF  	defb	143,143,255,255,255, 15,  7,131
 57+  AF6A FF 0F 07 83
 58+  AF6E 0F 0F FF FF  	defb	 15, 15,255,255,255, 16, 32,193
 58+  AF72 FF 10 20 C1
 59+  AF76 19 19 FE F8  	defb	 25, 25,254,248,192,192, 64,224
 59+  AF7A C0 C0 40 E0
 60+  AF7E 98 98 7F 1F  	defb	152,152,127, 31,  3,  3,  2,  7
 60+  AF82 03 03 02 07
 61+  AF86 F0 F0 FF FF  	defb	240,240,255,255,255,  8,  4,131
 61+  AF8A FF 08 04 83
 62+  AF8E F1 F1 FF FF  	defb	241,241,255,255,255,240,224,193
 62+  AF92 FF F0 E0 C1
 63+  AF96 CD CD FE F8  	defb	205,205,254,248,192,192, 64,224
 63+  AF9A C0 C0 40 E0
 64+  AF9E
 65+  AF9E              ;
 66+  AF9E              ;  First 8 frames are tank, last frame is the gun barrel
 67+  AF9E              ;
 68+  AF9E              tank_sprite:
 69+  AF9E 00 00 00 7F  	defb	  0,  0,  0,127,127,  0,  0,  0
 69+  AFA2 7F 00 00 00
 70+  AFA6 01 03 FE FC  	defb	  1,  3,254,252,254,255,127, 64
 70+  AFAA FE FF 7F 40
 71+  AFAE FF FF 03 F9  	defb	255,255,  3,249,  3,255,255,  1
 71+  AFB2 03 FF FF 01
 72+  AFB6 00 00 C0 E0  	defb	  0,  0,192,224,224,192,  0,  0
 72+  AFBA E0 C0 00 00
 73+  AFBE 3F 7F E1 FB  	defb	 63,127,225,251,247,225,127, 63
 73+  AFC2 F7 E1 7F 3F
 74+  AFC6 FF FF 16 52  	defb	255,255, 22, 82, 84, 22,255,255
 74+  AFCA 54 16 FF FF
 75+  AFCE FF FF A8 A9  	defb	255,255,168,169,155,168,255,255
 75+  AFD2 9B A8 FF FF
 76+  AFD6 FC FE 8F AF  	defb	252,254,143,175,159,175,254,252
 76+  AFDA 9F AF FE FC
 77+  AFDE 00 00 00 1F  	defb	  0,  0,  0, 31, 31,  0,  0,  0
 77+  AFE2 1F 00 00 00
# file closed: graphics/graphics.asm
 31   AFE6
 32   AFE6                  include "game\control.asm"
# file opened: game/control.asm
  1+  AFE6              ;
  2+  AFE6              ; Check the keyboard then move
  3+  AFE6              ;
  4+  AFE6              control_keyboard:
  5+  AFE6 3A E9 B3         ld a,(player+5)      ; first, check if the player has pixels left to move
  6+  AFE9 FE 00            cp 0
  7+  AFEB CA F2 AF         jp z, control_keyboard5
  8+  AFEE CD F7 B0         call control_automove
  9+  AFF1 C9               ret
 10+  AFF2              control_keyboard5:
 11+  AFF2 3A EA B3         ld a,(player+6)      ; next, check if the player is digging
 12+  AFF5 FE 00            cp 0
 13+  AFF7 CA FE AF         jp z, control_keyboard0
 14+  AFFA CD 35 B0         call control_dig
 15+  AFFD C9               ret
 16+  AFFE              control_keyboard0:
 17+  AFFE 01 FE FB         ld bc,64510         ; port for keyboard row q-t.
 18+  B001 ED 78            in a,(c)            ; read keyboard.
 19+  B003 47               ld b,a              ; store result in b register.
 20+  B004 CB 18            rr b                ; check outermost key (q).
 21+  B006 D2 25 B0         jp nc,control_keyboard1
 22+  B009 01 FE FD         ld bc,65022         ; port for keyboard row a-f.
 23+  B00C ED 78            in a,(c)            ; read keyboard.
 24+  B00E 47               ld b,a              ; store result in b register.
 25+  B00F CB 18            rr b                ; check outermost key (a).
 26+  B011 D2 29 B0         jp nc,control_keyboard2
 27+  B014 01 FE DF         ld bc,57342         ; port for keyboard row y-p.
 28+  B017 ED 78            in a,(c)            ; read keyboard.
 29+  B019 47               ld b,a              ; store result in b register.
 30+  B01A CB 18            rr b                ; check outermost key (p).
 31+  B01C D2 2D B0         jp nc,control_keyboard3
 32+  B01F CB 18            rr b                ; check next key.
 33+  B021 D2 31 B0         jp nc,control_keyboard4
 34+  B024 C9               ret
 35+  B025              control_keyboard1:
 36+  B025 CD 40 B1         call control_pl_moveup         ; player up.
 37+  B028 C9               ret
 38+  B029              control_keyboard2:
 39+  B029 CD 6F B1         call control_pl_movedown       ; player down.
 40+  B02C C9               ret
 41+  B02D              control_keyboard3:
 42+  B02D CD CC B1         call control_pl_moveright       ; player left.
 43+  B030 C9               ret
 44+  B031              control_keyboard4:
 45+  B031 CD 9C B1         call control_pl_moveleft       ; player right.
 46+  B034 C9               ret
 47+  B035
 48+  B035              ;
 49+  B035              ; Performs a dig if the counter has reset, otherwise, messes with the graphics
 50+  B035              ;
 51+  B035              control_dig:
 52+  B035 ED 4B E4 B3      ld bc,(player)      ; load the current coords into bc
 53+  B039 C5               push bc
 54+  B03A 3A E6 B3         ld a,(player+2)     ; get the direction
 55+  B03D FE 01            cp 1                ; left
 56+  B03F CA 57 B0         jp z,control_dig0
 57+  B042 FE 02            cp 2                ; right
 58+  B044 CA 6C B0         jp z,control_dig1
 59+  B047 FE 03            cp 3                ; down
 60+  B049 CA 90 B0         jp z,control_dig5
 61+  B04C FE 00            cp 0                ; up
 62+  B04E CA 80 B0         jp z,control_dig4
 63+  B051 21 EA B3         ld hl,player+6
 64+  B054 36 00            ld (hl),0           ; turn off digging
 65+  B056 C9               ret                 ; return
 66+  B057              control_dig0:           ; going left
 67+  B057 CD FD A6         call sprites_scadd  ; get the current coord
 68+  B05A 62 6B            ld hl,de
 69+  B05C 2B               dec hl              ; move one left
 70+  B05D C1               pop bc              ; get the coords back, subtract 8 from horiz, 8 from vert, store (will be coords of space above dug dirt)
 71+  B05E 78               ld a,b
 72+  B05F 06 08            ld b,8
 73+  B061 90               sub b
 74+  B062 47               ld b,a
 75+  B063 79               ld a,c
 76+  B064 0E 08            ld c,8
 77+  B066 91               sub c
 78+  B067 4F               ld c,a
 79+  B068 C5               push bc
 80+  B069 C3 99 B0         jp control_dig2
 81+  B06C              control_dig1:
 82+  B06C CD FD A6         call sprites_scadd  ; get the current coord
 83+  B06F 62 6B            ld hl,de
 84+  B071 23               inc hl              ; move one right
 85+  B072 C1               pop bc              ; get the coords back, add 8 to horiz, subtract 8 from vert store (will be coords of space above dug dirt)
 86+  B073 3E 08            ld a,8
 87+  B075 80               add a,b
 88+  B076 47               ld b,a
 89+  B077 79               ld a,c
 90+  B078 0E 08            ld c,8
 91+  B07A 91               sub c
 92+  B07B 4F               ld c,a
 93+  B07C C5               push bc
 94+  B07D C3 99 B0         jp control_dig2
 95+  B080              control_dig4:
 96+  B080 CD FD A6         call sprites_scadd  ; get the current coord
 97+  B083 62 6B            ld hl,de
 98+  B085 11 20 00         ld de,32
 99+  B088 ED 52            sbc hl,de             ; move one up
100+  B08A C1               pop bc              ; get the coords back, 1 from vert, store, then we'll sub 1 from c for each row later
101+  B08B 0D               dec c
102+  B08C C5               push bc
103+  B08D C3 B1 B0         jp control_dig6
104+  B090              control_dig5:
105+  B090 CD FD A6         call sprites_scadd  ; get the current coord
106+  B093 62 6B            ld hl,de
107+  B095 24               inc h              ; move one down
108+  B096                                     ; not bothered about working out bc here, since rock will never fall if digging down
109+  B096 C3 99 B0         jp control_dig2
110+  B099              ; Normal (not up) digging
111+  B099              control_dig2:
112+  B099 3A EC B3         ld a,(player+8)     ; get the number of rows we need to overwrite
113+  B09C 47               ld b,a              ; rows to copy over
114+  B09D E5               push hl             ; store the memory location of the first row for later
115+  B09E              control_dig3:
116+  B09E CD E0 B0         call control_getpixelrow
117+  B0A1 77               ld (hl),a           ; load contents into row
118+  B0A2 11 20 00         ld de,32
119+  B0A5 19               add hl,de           ; move to next row
120+  B0A6 10 F6            djnz control_dig3
121+  B0A8 E1               pop hl              ; get the original memory location back
122+  B0A9 11 20 00         ld de,32
123+  B0AC ED 52            sbc hl,de           ; move to above row, ready for checking for rock
124+  B0AE C3 C7 B0         jp control_dig10
125+  B0B1              ; Special case for going up
126+  B0B1              control_dig6:
127+  B0B1 3A EC B3         ld a,(player+8)     ; get the number of rows we need to overwrite
128+  B0B4 47               ld b,a              ; rows to copy over
129+  B0B5              control_dig7:
130+  B0B5 CD E0 B0         call control_getpixelrow
131+  B0B8              control_dig12:
132+  B0B8 77               ld (hl),a           ; load empty into row
133+  B0B9 11 20 00         ld de,32
134+  B0BC ED 52            sbc hl,de           ; move up to next row
135+  B0BE 0D               dec c               ; decrease c to track rows
136+  B0BF 10 F4            djnz control_dig7
137+  B0C1 79               ld a,c
138+  B0C2 D6 07            sub 7
139+  B0C4 C1               pop bc
140+  B0C5 4F               ld c,a
141+  B0C6 C5               push bc             ; store the decreased c coord
142+  B0C7              control_dig10:
143+  B0C7 DD 21 EB B3      ld ix,player+7
144+  B0CB DD 7E 00         ld a,(ix)     ; get the dig frame number
145+  B0CE 3D               dec a
146+  B0CF DD 77 00         ld (ix),a
147+  B0D2                  ; call the check for rocks above the removed dirt
148+  B0D2 DD 21 EA B3      ld ix,player+6
149+  B0D6 DD 7E 00         ld a,(ix)     ; get the dig state
150+  B0D9 FE 00            cp 0
151+  B0DB C1               pop bc
152+  B0DC CC 75 B6         call z, rocks_checkforfalling ; make the check if we're no longer digging
153+  B0DF C9               ret
154+  B0E0
155+  B0E0              ;
156+  B0E0              ; Gets a modified pixel row to overwrite dirt - if this is the last dig, overwrite with nothing, otherwise xor to flip the dirt
157+  B0E0              ; Inputs:
158+  B0E0              ; hl - memory of pixel row
159+  B0E0              ; Outputs:
160+  B0E0              ; a - modified row to write
161+  B0E0              ;
162+  B0E0              control_getpixelrow:
163+  B0E0 3A EB B3         ld a,(player+7)     ; get the dig frame number
164+  B0E3 FE 00            cp 0                ; is this the last dig
165+  B0E5 CA EC B0         jp z,control_getpixelrow1
166+  B0E8 7E               ld a,(hl)           ; if not, xor with 255 to flip it
167+  B0E9 EE FF            xor 255
168+  B0EB C9               ret
169+  B0EC              control_getpixelrow1:
170+  B0EC DD 21 EA B3      ld ix,player+6
171+  B0F0 DD 36 00 00      ld (ix),0           ; turn off digging
172+  B0F4 3E 00            ld a,0              ; if it is, load with empty
173+  B0F6 C9               ret
174+  B0F7
175+  B0F7              ;
176+  B0F7              ; Auto move the player until pixels is zero
177+  B0F7              ;
178+  B0F7              control_automove:
179+  B0F7 5F               ld e,a              ; store the number of pixels left to move in e
180+  B0F8 ED 4B E4 B3      ld bc,(player)      ; load the current coords into bc
181+  B0FC 21 E6 B3         ld hl,player+2      ; get the direction
182+  B0FF 7E               ld a,(hl)
183+  B100 FE 03            cp 3                ; down
184+  B102 CA 16 B1         jp z,control_automove3  ; don't need to do anything
185+  B105 FE 00            cp 0                ; going up
186+  B107 CA 22 B1         jp z,control_automove2
187+  B10A FE 01            cp 1                ; going left?
188+  B10C CA 2E B1         jp z,control_automove0
189+  B10F 78               ld a,b
190+  B110 3C               inc a               ; if we're going right, increment a twice for two pixels
191+  B111 3C               inc a
192+  B112 47               ld b,a
193+  B113 C3 32 B1         jp control_automove1
194+  B116              control_automove3:
195+  B116 79               ld a,c
196+  B117 3C               inc a
197+  B118 3C               inc a               ; if we're going down, increment twice
198+  B119 4F               ld c,a
199+  B11A FE 90            cp 144
200+  B11C CC FA B1         call z, control_scroll_down
201+  B11F C3 32 B1         jp control_automove1
202+  B122              control_automove2:
203+  B122 79               ld a,c
204+  B123 3D               dec a
205+  B124 3D               dec a               ; if we're going up, decrement twice
206+  B125 4F               ld c,a
207+  B126 FE 60            cp 96
208+  B128 CC 07 B2         call z, control_scroll_up
209+  B12B C3 32 B1         jp control_automove1
210+  B12E              control_automove0:
211+  B12E 78               ld a,b
212+  B12F 3D               dec a               ; if we're going left, decrement a twice
213+  B130 3D               dec a
214+  B131 47               ld b,a
215+  B132              control_automove1:
216+  B132 ED 43 E4 B3      ld (player),bc      ; and back to player
217+  B136 7B               ld a,e              ; now get the pixel count back
218+  B137 3D               dec a               ; decrease by one
219+  B138 21 E9 B3         ld hl,player+5
220+  B13B 77               ld (hl),a           ; copy back
221+  B13C CD 70 B4         call player_justmoved
222+  B13F C9               ret
223+  B140
224+  B140              ;
225+  B140              ; Moves the player up
226+  B140              ;
227+  B140              control_pl_moveup:
228+  B140 C5               push bc
229+  B141 ED 4B E4 B3      ld bc,(player)          ; get the current coords, b horiz, c vert
230+  B145 79               ld a,c                  ; load c into the acc
231+  B146 FE 18            cp 24
232+  B148 CA 68 B1         jp z,control_pl_moveup0 ; are we at the edge of the screen
233+  B14B FE 60            cp 96
234+  B14D CC 07 B2         call z, control_scroll_up
235+  B150 CD 32 B3         call movement_checkcanmove_up ; check we can move up, e will be 1 if we can
236+  B153 F5               push af
237+  B154 7B               ld a,e                  ; put e in a
238+  B155 FE 00            cp 0
239+  B157 CA 67 B1         jp z,control_pl_moveup1 ; don't move if we can't
240+  B15A F1               pop af
241+  B15B D6 01            sub 1                   ; subtract 1
242+  B15D D6 01            sub 1                   ; subtract 1
243+  B15F 4F               ld c,a                  ; load back to c
244+  B160 ED 43 E4 B3      ld (player),bc          ; load back to player
245+  B164 C3 68 B1         jp control_pl_moveup0
246+  B167              control_pl_moveup1:
247+  B167 F1               pop af                  ; restore af if needed
248+  B168              control_pl_moveup0:
249+  B168 3E 00            ld a,0
250+  B16A 32 E6 B3         ld (player+2),a        ; set direction to up
251+  B16D C1               pop bc
252+  B16E C9               ret
253+  B16F              ;
254+  B16F              ; Moves the player down
255+  B16F              ;
256+  B16F              control_pl_movedown:
257+  B16F C5               push bc
258+  B170 ED 4B E4 B3      ld bc,(player)          ; get the current coords, b horiz, c vert
259+  B174 79               ld a,c                  ; load c into the acc
260+  B175 FE E0            cp 224
261+  B177 CA 95 B1         jp z,control_pl_movedown0 ; are we at the edge of the screen
262+  B17A FE 80            cp 128
263+  B17C CC FA B1         call z, control_scroll_down
264+  B17F CD 0A B3         call movement_checkcanmove_down ; check we can move down, e will be 1 if we can
265+  B182 F5               push af
266+  B183 7B               ld a,e                  ; put e in a
267+  B184 FE 00            cp 0
268+  B186 CA 94 B1         jp z,control_pl_movedown1 ; don't move if we can't
269+  B189 F1               pop af
270+  B18A 3C               inc a                   ; add 1
271+  B18B 3C               inc a                   ; add 1
272+  B18C 4F               ld c,a                  ; load back to c
273+  B18D ED 43 E4 B3      ld (player),bc          ; load back to player
274+  B191 C3 95 B1         jp control_pl_movedown0
275+  B194              control_pl_movedown1:
276+  B194 F1               pop af                  ; restore af if needed
277+  B195              control_pl_movedown0:
278+  B195 3E 03            ld a,3
279+  B197 32 E6 B3         ld (player+2),a        ; set direction to down
280+  B19A C1               pop bc
281+  B19B C9               ret
282+  B19C              ;
283+  B19C              ; Moves the player left
284+  B19C              ;
285+  B19C              control_pl_moveleft:
286+  B19C C5               push bc
287+  B19D ED 4B E4 B3      ld bc,(player)          ; get the current coords, b horiz, c vert
288+  B1A1 78               ld a,b                  ; load b into the acc
289+  B1A2 FE 10            cp 16
290+  B1A4 CA C5 B1         jp z,control_pl_moveleft0 ; are we at the edge of the screen
291+  B1A7 CD 8C B3         call movement_checkcanmove_left ; check we can move down, e will be 1 if we can
292+  B1AA F5               push af
293+  B1AB 7B               ld a,e                  ; put e in a
294+  B1AC FE 00            cp 0
295+  B1AE CA C4 B1         jp z,control_pl_moveleft1 ; don't move if we can't
296+  B1B1 21 E9 B3         ld hl,player+5          ; need to store the amount of pixels still left to move in the player status
297+  B1B4 3E 03            ld a,3
298+  B1B6 77               ld (hl),a
299+  B1B7 F1               pop af
300+  B1B8 D6 01            sub 1                    ; subtract 2
301+  B1BA D6 01            sub 1
302+  B1BC 47               ld b,a                  ; load back to c
303+  B1BD ED 43 E4 B3      ld (player),bc          ; load back to player
304+  B1C1 C3 C5 B1         jp control_pl_moveleft0
305+  B1C4              control_pl_moveleft1:
306+  B1C4 F1               pop af
307+  B1C5              control_pl_moveleft0:
308+  B1C5 3E 01            ld a,1
309+  B1C7 32 E6 B3         ld (player+2),a        ; set direction to left
310+  B1CA C1               pop bc
311+  B1CB C9               ret
312+  B1CC              ;
313+  B1CC              ; Moves the player right
314+  B1CC              ;
315+  B1CC              control_pl_moveright:
316+  B1CC C5               push bc
317+  B1CD ED 4B E4 B3      ld bc,(player)          ; get the current coords, b horiz, c vert
318+  B1D1 78               ld a,b                  ; load b into the acc
319+  B1D2 FE F0            cp 240
320+  B1D4 CA F3 B1         jp z,control_pl_moveright0 ; are we at the edge of the screen
321+  B1D7 CD 64 B3         call movement_checkcanmove_right ; check we can move down, e will be 1 if we can
322+  B1DA F5               push af
323+  B1DB 7B               ld a,e                  ; put e in a
324+  B1DC FE 00            cp 0
325+  B1DE CA F2 B1         jp z,control_pl_moveright1 ; don't move if we can't
326+  B1E1 21 E9 B3         ld hl,player+5          ; need to store the amount of pixels still left to move in the player status
327+  B1E4 3E 03            ld a,3
328+  B1E6 77               ld (hl),a
329+  B1E7 F1               pop af
330+  B1E8 3C               inc a                   ; add 2
331+  B1E9 3C               inc a
332+  B1EA 47               ld b,a                  ; load back to b
333+  B1EB ED 43 E4 B3      ld (player),bc          ; load back to player
334+  B1EF C3 F3 B1         jp control_pl_moveright0
335+  B1F2              control_pl_moveright1:
336+  B1F2 F1               pop af                  ; restore af if needed
337+  B1F3              control_pl_moveright0:
338+  B1F3 3E 02            ld a,2
339+  B1F5 32 E6 B3         ld (player+2),a        ; set direction to right
340+  B1F8 C1               pop bc
341+  B1F9 C9               ret
342+  B1FA
343+  B1FA              ;
344+  B1FA              ; Scrolls the screen down
345+  B1FA              ;
346+  B1FA              control_scroll_down:
347+  B1FA F5               push af
348+  B1FB 3E 08            ld a,8
349+  B1FD 32 3A A5         ld (screen_offset),a
350+  B200 F1               pop af
351+  B201 21 EC A3         ld hl,buffer_updateall
352+  B204 36 01            ld (hl),1         ; flag as screen needing update
353+  B206 C9               ret
354+  B207
355+  B207              ;
356+  B207              ; Scrolls the screen up
357+  B207              ;
358+  B207              control_scroll_up:
359+  B207 F5               push af
360+  B208 3E 00            ld a,0
361+  B20A 32 3A A5         ld (screen_offset),a
362+  B20D F1               pop af
363+  B20E 21 EC A3         ld hl,buffer_updateall
364+  B211 36 01            ld (hl),1         ; flag as screen needing update
365+  B213 C9               ret
366+  B214
367+  B214
368+  B214
369+  B214
# file closed: game/control.asm
 33   B214                  include "game\movement.asm"
# file opened: game/movement.asm
  1+  B214              ;
  2+  B214              ; Checks the contents of a cell are empty - ie, all pixel rows are zero
  3+  B214              ; Inputs:
  4+  B214              ; hl - memory location of top pixel row
  5+  B214              ; bc - screen coords, b horiz, c vert
  6+  B214              ; Outputs:
  7+  B214              ; e - 0 if not empty, 1 if empty
  8+  B214              ;
  9+  B214              movement_spaceisempty:
 10+  B214 3E 08            ld a,8                          ; 8 rows to check
 11+  B216              movement_spaceisempty0:
 12+  B216 08               ex af,af'                       ; store the loop counter
 13+  B217 7E               ld a,(hl)                       ; get current pixel row
 14+  B218 FE 00            cp 0
 15+  B21A C2 2E B2         jp nz, movement_spaceisempty1    ; row is not empty, can't move here
 16+  B21D 79               ld a,c                          ; load the vertical coord
 17+  B21E 3C               inc a                           ; next row down
 18+  B21F 11 20 00         ld de,32
 19+  B222 19               add hl,de                       ; otherwise, just go one down for hl, which means add 32, because of course
 20+  B223 4F               ld c,a                          ; copy vert coord back to c
 21+  B224 08               ex af,af'                       ; get loop counter back
 22+  B225 3D               dec a                           ; decrease loop counter
 23+  B226 C2 16 B2         jp nz, movement_spaceisempty0
 24+  B229 16 00            ld d,0
 25+  B22B 1E 01            ld e,1                          ; got to end, so space is empty
 26+  B22D C9               ret
 27+  B22E              movement_spaceisempty1:
 28+  B22E 16 00            ld d,0
 29+  B230 1E 00            ld e,0                          ; returning false, ie space not empty
 30+  B232 C9               ret
 31+  B233
 32+  B233              ;
 33+  B233              ; Checks the line of a cell below is empty - ie, first pixel rows is zero
 34+  B233              ; Inputs:
 35+  B233              ; hl - memory location of top pixel row
 36+  B233              ; bc - screen coords, b horiz, c vert
 37+  B233              ; Outputs:
 38+  B233              ; e - 0 if not empty, 1 if empty
 39+  B233              ;
 40+  B233              movement_linebelowisempty:
 41+  B233 7E               ld a,(hl)                       ; get current pixel row
 42+  B234 FE 00            cp 0
 43+  B236 C2 3E B2         jp nz, movement_linebelowisempty1    ; row is not empty, can't move here
 44+  B239 16 00            ld d,0
 45+  B23B 1E 01            ld e,1                          ; got to end, so space is empty
 46+  B23D C9               ret
 47+  B23E              movement_linebelowisempty1:
 48+  B23E 16 00            ld d,0
 49+  B240 1E 00            ld e,0                          ; returning false, ie space not empty
 50+  B242 C9               ret
 51+  B243
 52+  B243              ;
 53+  B243              ; Checks the line of a cell above is empty - ie, last pixel rows are zero
 54+  B243              ; Inputs:
 55+  B243              ; hl - memory location of top pixel row
 56+  B243              ; bc - screen coords, b horiz, c vert
 57+  B243              ; Outputs:
 58+  B243              ; e - 0 if not empty, 1 if empty
 59+  B243              ;
 60+  B243              movement_lineaboveisempty:
 61+  B243 7E               ld a,(hl)                       ; get current pixel row
 62+  B244 FE 00            cp 0
 63+  B246 C2 4E B2         jp nz, movement_lineaboveisempty1    ; row is not empty, can't move here
 64+  B249 16 00            ld d,0
 65+  B24B 1E 01            ld e,1                          ; got to end, so space is empty
 66+  B24D C9               ret
 67+  B24E              movement_lineaboveisempty1:
 68+  B24E 16 00            ld d,0
 69+  B250 1E 00            ld e,0                          ; returning false, ie space not empty
 70+  B252 C9               ret
 71+  B253
 72+  B253              ;
 73+  B253              ; Checks the contents of a cell are diggable - ie, all pixel rows are dirt or empty
 74+  B253              ; Inputs:
 75+  B253              ; hl - memory location of top pixel row
 76+  B253              ; bc - screen coords, b horiz, c vert
 77+  B253              ; Outputs:
 78+  B253              ; none - puts player into digging mode
 79+  B253              ;
 80+  B253              movement_spaceisdiggable:
 81+  B253 3E 08            ld a,8                          ; 8 rows to check
 82+  B255              movement_spaceisdiggable0:
 83+  B255 08               ex af,af'                       ; store the loop counter
 84+  B256 7E               ld a,(hl)                       ; get current pixel row
 85+  B257 FE 00            cp 0
 86+  B259 CA 69 B2         jp z, movement_spaceisdiggable2  ; row is empty, can dig here
 87+  B25C FE 55            cp 85
 88+  B25E CA 69 B2         jp z, movement_spaceisdiggable2  ; row is dirt, can dig here
 89+  B261 FE AA            cp 170
 90+  B263 CA 69 B2         jp z, movement_spaceisdiggable2  ; row is dirt, can dig here
 91+  B266 C3 81 B2         jp movement_spaceisdiggable1     ; otherwise, stop checking
 92+  B269              movement_spaceisdiggable2:
 93+  B269 79               ld a,c                          ; load the vertical coord
 94+  B26A 3C               inc a                           ; next row down
 95+  B26B 11 20 00         ld de,32
 96+  B26E 19               add hl,de                       ; otherwise, just go one down for hl, which means add 32, because of course
 97+  B26F 4F               ld c,a                          ; copy vert coord back to c
 98+  B270 08               ex af,af'                       ; get loop counter back
 99+  B271 3D               dec a                           ; decrease loop counter
100+  B272 C2 55 B2         jp nz, movement_spaceisdiggable0
101+  B275 21 EA B3         ld hl,player+6
102+  B278 36 01            ld (hl),1                       ; set the player into digging mode
103+  B27A 23               inc hl
104+  B27B 36 05            ld (hl),5                      ; set the number of frame to dig for
105+  B27D 23               inc hl
106+  B27E 36 08            ld (hl),8                       ; set the number of pixels to dig
107+  B280 C9               ret
108+  B281              movement_spaceisdiggable1:
109+  B281 21 EA B3         ld hl,player+6
110+  B284 36 00            ld (hl),0                       ; set the player out of digging mode
111+  B286 C9               ret
112+  B287
113+  B287              ;
114+  B287              ; Checks the contents of a cell below are diggable - ie, at least one pixel row has dirt. If the first one isn't dirt, stop
115+  B287              ; Inputs:
116+  B287              ; hl - memory location of top pixel row
117+  B287              ; bc - screen coords, b horiz, c vert
118+  B287              ; Outputs:
119+  B287              ; none - puts player into digging mode
120+  B287              ;
121+  B287              movement_spacebelowisdiggable:
122+  B287 7E               ld a,(hl)                       ; get first pixel row
123+  B288 FE 55            cp 85
124+  B28A CA 95 B2         jp z, movement_spacebelowisdiggable3  ; row is dirt, can dig here
125+  B28D FE AA            cp 170
126+  B28F CA 95 B2         jp z, movement_spacebelowisdiggable3  ; row is dirt, can dig here
127+  B292 C3 81 B2         jp movement_spaceisdiggable1    ; the first row is not dirt, so don't bother checking the rest, can't dig
128+  B295              movement_spacebelowisdiggable3:
129+  B295 3E 08            ld a,8                          ; rows to check
130+  B297 1E 00            ld e,0                          ; count of rows to dig
131+  B299              movement_spacebelowisdiggable0:
132+  B299 08               ex af,af'                       ; store the loop counter
133+  B29A 7E               ld a,(hl)                       ; get current pixel row
134+  B29B FE 55            cp 85
135+  B29D CA A8 B2         jp z, movement_spacebelowisdiggable4  ; row is dirt, can dig here
136+  B2A0 FE AA            cp 170
137+  B2A2 CA A8 B2         jp z, movement_spacebelowisdiggable4  ; row is dirt, can dig here
138+  B2A5 C3 B7 B2         jp movement_spacebelowisdiggable5     ; don't count this row and stop counting
139+  B2A8              movement_spacebelowisdiggable4:
140+  B2A8 1C               inc e                           ; inc count of rows to dig
141+  B2A9              movement_spacebelowisdiggable2:
142+  B2A9 79               ld a,c                          ; load the vertical coord
143+  B2AA 3C               inc a                           ; next row down
144+  B2AB D5               push de                         ; need e for later
145+  B2AC 11 20 00         ld de,32
146+  B2AF 19               add hl,de                       ; otherwise, just go one down for hl, which means add 32, because of course
147+  B2B0 4F               ld c,a                          ; copy vert coord back to c
148+  B2B1 D1               pop de                          ; get e back
149+  B2B2 08               ex af,af'                       ; get loop counter back
150+  B2B3 3D               dec a                           ; incease loop counter
151+  B2B4 C2 99 B2         jp nz, movement_spacebelowisdiggable0
152+  B2B7              movement_spacebelowisdiggable5:
153+  B2B7 21 EA B3         ld hl,player+6
154+  B2BA 36 01            ld (hl),1                       ; set the player into digging mode
155+  B2BC 23               inc hl
156+  B2BD 36 03            ld (hl),3                      ; set the number of frame to dig for
157+  B2BF 23               inc hl
158+  B2C0 73               ld (hl),e                       ; set the number of pixels to dig
159+  B2C1 C9               ret
160+  B2C2              movement_spacebelowisdiggable1:
161+  B2C2 21 EA B3         ld hl,player+6
162+  B2C5 36 00            ld (hl),0                       ; set the player out of digging mode
163+  B2C7 C9               ret
164+  B2C8
165+  B2C8              ;
166+  B2C8              ; Checks the contents of a cell above are diggable - ie, at least one pixel row has dirt. If the first one isn't dirt, stop
167+  B2C8              ; Inputs:
168+  B2C8              ; hl - memory location of top pixel row
169+  B2C8              ; bc - screen coords, b horiz, c vert
170+  B2C8              ; Outputs:
171+  B2C8              ; none - puts player into digging mode
172+  B2C8              ;
173+  B2C8              movement_spaceaboveisdiggable:
174+  B2C8 7E               ld a,(hl)                       ; get first pixel row
175+  B2C9 FE 55            cp 85
176+  B2CB CA D6 B2         jp z, movement_spaceaboveisdiggable3  ; row is dirt, can dig here
177+  B2CE FE AA            cp 170
178+  B2D0 CA D6 B2         jp z, movement_spaceaboveisdiggable3  ; row is dirt, can dig here
179+  B2D3 C3 81 B2         jp movement_spaceisdiggable1    ; the first row is not dirt, so don't bother checking the rest, can't dig
180+  B2D6              movement_spaceaboveisdiggable3:
181+  B2D6 3E 08            ld a,8                          ; rows to check
182+  B2D8 1E 00            ld e,0                          ; count of rows to dig
183+  B2DA              movement_spaceaboveisdiggable0:
184+  B2DA 08               ex af,af'                       ; store the loop counter
185+  B2DB 7E               ld a,(hl)                       ; get current pixel row
186+  B2DC FE 55            cp 85
187+  B2DE CA E9 B2         jp z, movement_spaceaboveisdiggable4  ; row is dirt, can dig here
188+  B2E1 FE AA            cp 170
189+  B2E3 CA E9 B2         jp z, movement_spaceaboveisdiggable4  ; row is dirt, can dig here
190+  B2E6 C3 F9 B2         jp movement_spaceaboveisdiggable5     ; don't count this row and stop counting
191+  B2E9              movement_spaceaboveisdiggable4:
192+  B2E9 1C               inc e                           ; inc count of rows to dig
193+  B2EA              movement_spaceaboveisdiggable2:
194+  B2EA 79               ld a,c                          ; load the vertical coord
195+  B2EB 3D               dec a                           ; next row up
196+  B2EC D5               push de                         ; need e for later
197+  B2ED 11 20 00         ld de,32
198+  B2F0 ED 52            sbc hl,de                       ; otherwise, just go one up for hl, which means sub 32, because of course
199+  B2F2 4F               ld c,a                          ; copy vert coord back to c
200+  B2F3 D1               pop de                          ; get e back
201+  B2F4 08               ex af,af'                       ; get loop counter back
202+  B2F5 3D               dec a                           ; incease loop counter
203+  B2F6 C2 DA B2         jp nz, movement_spaceaboveisdiggable0
204+  B2F9              movement_spaceaboveisdiggable5:
205+  B2F9 21 EA B3         ld hl,player+6
206+  B2FC 36 01            ld (hl),1                       ; set the player into digging mode
207+  B2FE 23               inc hl
208+  B2FF 36 05            ld (hl),5                       ; set the number of frame to dig for
209+  B301 23               inc hl
210+  B302 73               ld (hl),e                       ; set the number of pixels to dig
211+  B303 C9               ret
212+  B304              movement_spaceaboveisdiggable1:
213+  B304 21 EA B3         ld hl,player+6
214+  B307 36 00            ld (hl),0                       ; set the player out of digging mode
215+  B309 C9               ret
216+  B30A
217+  B30A              ;
218+  B30A              ; Checks if the player can move down
219+  B30A              ; Inputs:
220+  B30A              ; bc - player coords, b horiz, c vert
221+  B30A              ; Outputs:
222+  B30A              ; de - 1 can move
223+  B30A              movement_checkcanmove_down:
224+  B30A F5               push af
225+  B30B C5               push bc
226+  B30C CD FD A6         call sprites_scadd              ; get the memory location of cell into de
227+  B30F 62 6B            ld hl,de                        ; look at cell directly underneath (add 256)
228+  B311 24               inc h                       ; memory location of cell beneath now in hl
229+  B312 CD 33 B2         call movement_linebelowisempty       ; check space is empty
230+  B315 7B               ld a,e                          ; check space empty flag
231+  B316 FE 00            cp 0
232+  B318 CA 21 B3         jp z, movement_checkcanmove_down1 ; can't move
233+  B31B CD 70 B4         call player_justmoved
234+  B31E C1               pop bc
235+  B31F F1               pop af
236+  B320 C9               ret
237+  B321              movement_checkcanmove_down1:
238+  B321 C1               pop bc
239+  B322 CD FD A6         call sprites_scadd              ; get the memory location of cell into de
240+  B325 62 6B            ld hl,de                        ; look at cell directly underneath (add 256)
241+  B327 24               inc h
242+  B328 C5               push bc
243+  B329 CD 87 B2         call movement_spacebelowisdiggable    ; can't move here, but can we dig
244+  B32C 11 00 00         ld de,0
245+  B32F C1               pop bc
246+  B330 F1               pop af
247+  B331 C9               ret
248+  B332
249+  B332              ;
250+  B332              ; Checks if the player can move up
251+  B332              ; Inputs:
252+  B332              ; bc - player coords, b horiz, c vert
253+  B332              ; Outputs:
254+  B332              ; de - 1 can move
255+  B332              movement_checkcanmove_up:
256+  B332 F5               push af
257+  B333 C5               push bc
258+  B334 CD FD A6         call sprites_scadd              ; get the memory location of cell into de
259+  B337 62 6B            ld hl,de                        ; look at cell directly above (subtract 32)
260+  B339 11 20 00         ld de,32
261+  B33C ED 52            sbc hl,de                       ; memory location of line above now in hl
262+  B33E CD 43 B2         call movement_lineaboveisempty       ; check space is empty
263+  B341 7B               ld a,e                          ; check space empty flag
264+  B342 FE 00            cp 0
265+  B344 CA 4F B3         jp z, movement_checkcanmove_up1 ; can't move
266+  B347 1E 01            ld e,1
267+  B349 CD 70 B4         call player_justmoved
268+  B34C C1               pop bc
269+  B34D F1               pop af
270+  B34E C9               ret
271+  B34F              movement_checkcanmove_up1:
272+  B34F C1               pop bc
273+  B350 CD FD A6         call sprites_scadd              ; get the memory location of cell into de
274+  B353 62 6B            ld hl,de                        ; look at cell directly above (subtract 32)
275+  B355 11 20 00         ld de,32
276+  B358 ED 52            sbc hl,de                       ; memory location of line above now in hl
277+  B35A C5               push bc
278+  B35B CD C8 B2         call movement_spaceaboveisdiggable    ; can't move here, but can we dig
279+  B35E 11 00 00         ld de,0
280+  B361 C1               pop bc
281+  B362 F1               pop af
282+  B363 C9               ret
283+  B364
284+  B364              ;
285+  B364              ; Checks if the player can move right
286+  B364              ; Inputs:
287+  B364              ; bc - player coords, b horiz, c vert
288+  B364              ; Outputs:
289+  B364              ; de - 1 can move
290+  B364              movement_checkcanmove_right:
291+  B364 F5               push af
292+  B365 C5               push bc
293+  B366 CD FD A6         call sprites_scadd              ; get the memory location of cell into de
294+  B369 62 6B            ld hl,de                        ; look at cell directly to the right (add 1)
295+  B36B 23               inc hl                          ; memory location of cell to the right now in hl
296+  B36C CD 14 B2         call movement_spaceisempty       ; check space is empty
297+  B36F 7B               ld a,e                          ; check space empty flag
298+  B370 FE 00            cp 0
299+  B372 CA 7B B3         jp z, movement_checkcanmove_right1 ; can't move
300+  B375 CD 70 B4         call player_justmoved
301+  B378 C1               pop bc
302+  B379 F1               pop af
303+  B37A C9               ret
304+  B37B              movement_checkcanmove_right1:
305+  B37B C1               pop bc
306+  B37C CD FD A6         call sprites_scadd              ; get the memory location of cell into de
307+  B37F 62 6B            ld hl,de
308+  B381 23               inc hl                          ; memory location of cell to the right now in hl
309+  B382 C5               push bc
310+  B383 CD 53 B2         call movement_spaceisdiggable    ; can't move here, but can we dig
311+  B386 11 00 00         ld de,0
312+  B389 C1               pop bc
313+  B38A F1               pop af
314+  B38B C9               ret
315+  B38C
316+  B38C              ;
317+  B38C              ; Checks if the player can move left
318+  B38C              ; Inputs:
319+  B38C              ; bc - player coords, b horiz, c vert
320+  B38C              ; Outputs:
321+  B38C              ; de - 1 can move
322+  B38C              movement_checkcanmove_left:
323+  B38C F5               push af
324+  B38D C5               push bc
325+  B38E CD FD A6         call sprites_scadd              ; get the memory location of cell into de
326+  B391 62 6B            ld hl,de                        ; look at cell directly to the right (add 1)
327+  B393 2B               dec hl                          ; memory location of cell to the right now in hl
328+  B394 CD 14 B2         call movement_spaceisempty       ; check space is empty
329+  B397 7B               ld a,e                          ; check space empty flag
330+  B398 FE 00            cp 0
331+  B39A CA A3 B3         jp z, movement_checkcanmove_left1 ; can't move
332+  B39D CD 70 B4         call player_justmoved
333+  B3A0 C1               pop bc
334+  B3A1 F1               pop af
335+  B3A2 C9               ret
336+  B3A3              movement_checkcanmove_left1:
337+  B3A3 C1               pop bc
338+  B3A4 CD FD A6         call sprites_scadd              ; get the memory location of cell into de
339+  B3A7 62 6B            ld hl,de
340+  B3A9 2B               dec hl                          ; memory location of cell to the right now in hl
341+  B3AA C5               push bc
342+  B3AB CD 53 B2         call movement_spaceisdiggable    ; can't move here, but can we dig
343+  B3AE 11 00 00         ld de,0
344+  B3B1 C1               pop bc
345+  B3B2 F1               pop af
346+  B3B3 C9               ret
# file closed: game/movement.asm
 34   B3B4                  include "game\game.asm"
# file opened: game/game.asm
  1+  B3B4              ;
  2+  B3B4              ; The current frame count, incremented each frame
  3+  B3B4              ;
  4+  B3B4              game_framenumber:
  5+  B3B4 00               defb    0
  6+  B3B5
  7+  B3B5              ;
  8+  B3B5              ; The number of players
  9+  B3B5              ;
 10+  B3B5              game_numberplayers:
 11+  B3B5 01               defb 1
 12+  B3B6
 13+  B3B6              ;
 14+  B3B6              ; The current player
 15+  B3B6              ;
 16+  B3B6              game_currentplayer:
 17+  B3B6 01               defb 1
 18+  B3B7
 19+  B3B7              ;
 20+  B3B7              ; The default number of lives
 21+  B3B7              ;
 22+  B3B7              game_numberlives:
 23+  B3B7 03               defb 3
 24+  B3B8
 25+  B3B8              ;
 26+  B3B8              ; Moves to the next player
 27+  B3B8              ;
 28+  B3B8              game_changeplayer:
 29+  B3B8 3A B6 B3         ld a,(game_currentplayer)
 30+  B3BB FE 01            cp 1
 31+  B3BD C8               ret z                       ; if just one player, no need to change
 32+  B3BE 3D               dec a                       ; otherwise decrease by one
 33+  B3BF EE 01            xor 1                       ; xor with one to flip
 34+  B3C1 3C               inc a                       ; increment
 35+  B3C2 21 B6 B3         ld hl,game_currentplayer
 36+  B3C5 77               ld (hl),a                   ; store
 37+  B3C6 C9               ret
 38+  B3C7
 39+  B3C7              ;
 40+  B3C7              ; Sets the number of players at the start of the game
 41+  B3C7              ; Inputs:
 42+  B3C7              ; a - number of players
 43+  B3C7              game_setnumberofplayers:
 44+  B3C7 21 B5 B3         ld hl,game_numberplayers
 45+  B3CA 77               ld (hl),a
 46+  B3CB
 47+  B3CB              ;
 48+  B3CB              ; Increment frame number by 1
 49+  B3CB              ;
 50+  B3CB              game_incrementframe:
 51+  B3CB 3A B4 B3         ld a,(game_framenumber)
 52+  B3CE FE FF            cp 255
 53+  B3D0 C2 D5 B3         jp nz,game_incrementframe0
 54+  B3D3 3E 00            ld a,0
 55+  B3D5              game_incrementframe0:
 56+  B3D5 3C               inc a
 57+  B3D6 32 B4 B3         ld (game_framenumber),a
 58+  B3D9 C9               ret
 59+  B3DA
 60+  B3DA              ;
 61+  B3DA              ; Returns current frame
 62+  B3DA              ; Outputs:
 63+  B3DA              ; a - current frame
 64+  B3DA              ;
 65+  B3DA              game_getcurrentframe:
 66+  B3DA 3A B4 B3         ld a,(game_framenumber)
 67+  B3DD C9               ret
 68+  B3DE
 69+  B3DE              ;
 70+  B3DE              ; Resets current frame
 71+  B3DE              ;
 72+  B3DE              game_resetcurrentframe:
 73+  B3DE 21 B4 B3         ld hl,game_framenumber
 74+  B3E1 36 00            ld (hl),0
 75+  B3E3 C9               ret
# file closed: game/game.asm
 35   B3E4                  include "game\player.asm"
# file opened: game/player.asm
  1+  B3E4              ;
  2+  B3E4              ;   Data for current player
  3+  B3E4              ;
  4+  B3E4              player:
  5+  B3E4 00 00            defb    0,0                 ; horiz,vert (+0,+1)
  6+  B3E6 02 00 01         defb    2,0,1               ; dir (0 up, 1 left, 2 right, 3 down), frame, frame transition count (+2,+3,+4)
  7+  B3E9 00               defb    0                   ; auto move remaining (+5)
  8+  B3EA 00 00 00         defb    0,0,0               ; is digging (0 no), digging count, pixels to di (+6,+7,+8)
  9+  B3ED 00               defb    0                   ; lives remaining (+9)
 10+  B3EE 00               defb    0                   ; died this life (+10)
 11+  B3EF
 12+  B3EF              ;
 13+  B3EF              ; Score for the current player
 14+  B3EF              ;
 15+  B3EF              player_score:
 16+  B3EF 30 30 30 30      defb '000000'
 16+  B3F3 30 30
 17+  B3F5              ;
 18+  B3F5              ; Initializes a player at start of game
 19+  B3F5              ; Copy initial coords, copy lives, copy score
 20+  B3F5              ;
 21+  B3F5              player_init_gamestart:
 22+  B3F5 3A B7 B3         ld a,(game_numberlives)
 23+  B3F8 32 28 B4         ld (player1_lives),a
 24+  B3FB 32 29 B4         ld (player2_lives),a                        ; set the initial number of lives at game start
 25+  B3FE C9               ret
 26+  B3FF
 27+  B3FF              ;
 28+  B3FF              ; Initializes a player at start of a life
 29+  B3FF              ; Copy initial coords, copy lives, copy score
 30+  B3FF              ;
 31+  B3FF              player_init_lifestart:
 32+  B3FF ED 4B 22 80      ld bc,(init_coord)
 33+  B403 ED 43 E4 B3      ld (player),bc
 34+  B407 01 ED B3         ld bc,player+9
 35+  B40A 3A 28 B4         ld a,(player1_lives)
 36+  B40D 02               ld (bc),a
 37+  B40E 01 EE B3         ld bc,player+10
 38+  B411 3E 00            ld a,0
 39+  B413 02               ld (bc),a
 40+  B414 C9               ret
 41+  B415
 42+  B415              ;
 43+  B415              ; Finalises a player at end of a life
 44+  B415              ; Copy lives, copy score
 45+  B415              ;
 46+  B415              player_lifeend:
 47+  B415 01 ED B3         ld bc,player+9
 48+  B418 0A               ld a,(bc)
 49+  B419 01 28 B4         ld bc,player1_lives
 50+  B41C 02               ld (bc),a
 51+  B41D C9               ret
 52+  B41E
 53+  B41E              ;
 54+  B41E              ; Player just died, subtract a life
 55+  B41E              ;
 56+  B41E              player_died:
 57+  B41E 01 ED B3         ld bc,player+9
 58+  B421 0A               ld a,(bc)
 59+  B422 3D               dec a
 60+  B423 02               ld (bc),a
 61+  B424 CD 15 B4         call player_lifeend
 62+  B427 C9               ret
 63+  B428
 64+  B428              ;
 65+  B428              ; Player lives
 66+  B428              ;
 67+  B428              player1_lives:
 68+  B428 03               defb 3
 69+  B429              player2_lives:
 70+  B429 03               defb 3
 71+  B42A
 72+  B42A              ;
 73+  B42A              ; Player scores
 74+  B42A              ;
 75+  B42A              player1_score:
 76+  B42A 30 30 30 30      defb '000000'
 76+  B42E 30 30
 77+  B430              player2_score:
 78+  B430 30 30 30 30      defb '000000'
 78+  B434 30 30
 79+  B436
 80+  B436              ;
 81+  B436              ; Kills a player this life
 82+  B436              ;
 83+  B436              player_killplayer:
 84+  B436 21 EE B3         ld hl,player+10
 85+  B439 36 01            ld (hl),1
 86+  B43B C9               ret
 87+  B43C
 88+  B43C              ;
 89+  B43C              ; Draws the player at the current position or deletes them
 90+  B43C              ;
 91+  B43C              player_drawplayer:
 92+  B43C 3A E6 B3         ld a,(player+2)             ; get the current direction
 93+  B43F FE 03            cp 3
 94+  B441 C2 46 B4         jp nz,player_drawplayer0
 95+  B444 3E 00            ld a,0                      ; if 3, then down, so set the direction to 0 since the sprite is the same as up
 96+  B446              player_drawplayer0:
 97+  B446 5F               ld e,a                      ; store in e
 98+  B447 3A EA B3         ld a,(player+6)             ; get the dig flag
 99+  B44A FE 01            cp 1
100+  B44C CA 56 B4         jp z,player_drawplayer1    ; get dig frame
101+  B44F 3A E7 B3         ld a,(player+3)             ; this is normal movement so get the current frame
102+  B452 83               add a,e
103+  B453 C3 5B B4         jp player_drawplayer2
104+  B456              player_drawplayer1
105+  B456 3A E6 B3         ld a,(player+2)             ; get the current direction again, because want all four
106+  B459 C6 06            add a,6                     ; add direction to 6 to get frame
107+  B45B              player_drawplayer2
108+  B45B 07               rlca
109+  B45C 07               rlca
110+  B45D 07               rlca                        ; multiply by eight
111+  B45E 6F               ld l,a
112+  B45F 26 00            ld h,0
113+  B461 11 EE AE         ld de,player_sprite
114+  B464 19               add hl,de                   ; load hl with the location of the player sprite data
115+  B465 ED 4B E4 B3      ld bc,(player)              ; load bc with the start coords
116+  B469 CD BA A6         call sprites_drawsprite     ; call the routine to draw the sprite
117+  B46C CD 9C B4         call player_storeupdatedlines ; log updated rows
118+  B46F C9               ret
119+  B470
120+  B470
121+  B470              ;
122+  B470              ; Runs after the player just moved. Changes animation frame if required
123+  B470              ;
124+  B470              player_justmoved:
125+  B470 D9               exx
126+  B471 3A E8 B3         ld a,(player+4)             ; get the transition count
127+  B474 FE 00            cp 0
128+  B476 CA 7C B4         jp z, player_justmoved2     ; if zero reset and change the frame
129+  B479 C3 96 B4         jp player_justmoved1       ; otherwise decrease and continue
130+  B47C              player_justmoved2:
131+  B47C                  ; reset and change frame in here
132+  B47C 3E 01            ld a,1
133+  B47E 32 E8 B3         ld (player+4),a            ; reset back to whatever
134+  B481 3A E7 B3         ld a,(player+3)             ; load the frame
135+  B484 FE 03            cp 3                       ; flip between 3 and 0
136+  B486 C2 8E B4         jp nz, player_justmoved4
137+  B489 3E 00            ld a,0
138+  B48B C3 90 B4         jp player_justmoved5
139+  B48E              player_justmoved4:
140+  B48E 3E 03            ld a,3
141+  B490              player_justmoved5:
142+  B490 32 E7 B3         ld (player+3),a           ; save back
143+  B493 C3 9A B4         jp player_justmoved3
144+  B496              player_justmoved1:
145+  B496                  ; decrease count
146+  B496 3D               dec a
147+  B497 32 E8 B3         ld (player+4),a
148+  B49A              player_justmoved3:
149+  B49A D9               exx;
150+  B49B C9               ret
151+  B49C
152+  B49C              ;
153+  B49C              ; Stores the updated rows associated with the player
154+  B49C              ;
155+  B49C              player_storeupdatedlines:
156+  B49C ED 4B E4 B3      ld bc,(player)          ; get the screen coords into bc
157+  B4A0 79               ld a,c                  ; get the player block coords of current block
158+  B4A1 E6 F8            and 248                 ; find closest multiple of eight
159+  B4A3 0F               rrca
160+  B4A4 0F               rrca
161+  B4A5 0F               rrca                    ; divide by 8
162+  B4A6 ED 5B 3A A5      ld de,(screen_offset)          ; load the screen offset, this is in rows
163+  B4AA 93               sub e
164+  B4AB F5               push af
165+  B4AC CD ED A3         call buffer_marklineforupdate  ; store current row in updated lines
166+  B4AF F1               pop af
167+  B4B0 3D               dec a
168+  B4B1 F5               push af
169+  B4B2 CD ED A3         call buffer_marklineforupdate  ; store line above
170+  B4B5 F1               pop af
171+  B4B6 3C               inc a
172+  B4B7 3C               inc a
173+  B4B8 CD ED A3         call buffer_marklineforupdate  ; store line beneath
174+  B4BB C9               ret
# file closed: game/player.asm
 36   B4BC                  include "game\ship.asm"
# file opened: game/ship.asm
  1+  B4BC              ;
  2+  B4BC              ; Ship initial position: vert,horiz
  3+  B4BC              ;
  4+  B4BC              ship_initpos:
  5+  B4BC 00 24            defb 0,36
  6+  B4BE              ship_initpos2:
  7+  B4BE 00 00            defb 0,0
  8+  B4C0              ship_frame:
  9+  B4C0 00               defb 0
 10+  B4C1              ;
 11+  B4C1              ; The current memory location
 12+  B4C1              ;
 13+  B4C1              ship_current_sprite:
 14+  B4C1 00 00            defb 0,0
 15+  B4C3
 16+  B4C3              ship_current_coords:
 17+  B4C3 00 00            defb 0,0
 18+  B4C5
 19+  B4C5              ;
 20+  B4C5              ;   Draw and land the ship - first move the ship down, then across, drawing the player in the middle
 21+  B4C5              ;
 22+  B4C5              ship_land:
 23+  B4C5 ED 4B BC B4      ld bc,(ship_initpos)
 24+  B4C9 ED 43 BE B4      ld (ship_initpos2),bc        ; save the initial position for later use
 25+  B4CD 1E 00            ld e,0                      ; store a flag to track first time round
 26+  B4CF 06 09            ld b,9                      ; move down 8 pixels
 27+  B4D1              ship_land0:
 28+  B4D1 C5               push bc
 29+  B4D2 7B               ld a,e
 30+  B4D3 D5               push de                     ; store de for next time round
 31+  B4D4 FE 01            cp 1                        ; check first time flag
 32+  B4D6 C2 EB B4         jp nz,ship_land1             ; don't draw over previous one if first time
 33+  B4D9 CD 53 B5         call ship_draw_full         ; delete old one
 34+  B4DC CD 28 B5         call ship_change_frame      ; increment the frame
 35+  B4DF ED 4B BE B4      ld bc,(ship_initpos2)       ; get the current coords
 36+  B4E3 81 C6 01         add c,1                     ; move down one pixels
 37+  B4E6 4F               ld c,a
 38+  B4E7 ED 43 BE B4      ld (ship_initpos2),bc
 39+  B4EB              ship_land1:
 40+  B4EB CD 53 B5         call ship_draw_full         ; draw the ship
 41+  B4EE CD 3D B5         call ship_draw_screen
 42+  B4F1 D1               pop de
 43+  B4F2 1E 01            ld e,1
 44+  B4F4 C1               pop bc
 45+  B4F5 10 DA            djnz ship_land0             ; repeat for downward movement
 46+  B4F7                  ; done moving down
 47+  B4F7                  ; now move across
 48+  B4F7 CD 3C B4         call player_drawplayer      ; draw player
 49+  B4FA CD 53 B5         call ship_draw_full         ; delete old one
 50+  B4FD 1E 00            ld e,0                      ; store a flag to track first time round
 51+  B4FF 06 14            ld b,20                      ; move back 20 pixels pixels
 52+  B501              ship_land3:
 53+  B501 C5               push bc
 54+  B502 7B               ld a,e
 55+  B503 D5               push de                     ; store de for next time round
 56+  B504 FE 01            cp 1                        ; check first time flag
 57+  B506 C2 1B B5         jp nz,ship_land2             ; don't draw over previous one if first time
 58+  B509 CD 53 B5         call ship_draw_full         ; delete old one
 59+  B50C CD 28 B5         call ship_change_frame      ; increment the frame
 60+  B50F ED 4B BE B4      ld bc,(ship_initpos2)       ; get the current coords
 61+  B513 78               ld a,b
 62+  B514 D6 01            sub 1                       ; move back one pixels
 63+  B516 47               ld b,a
 64+  B517 ED 43 BE B4      ld (ship_initpos2),bc
 65+  B51B              ship_land2:
 66+  B51B CD 53 B5         call ship_draw_full         ; draw the ship
 67+  B51E CD 3D B5         call ship_draw_screen       ; draw the frame to screen by clearing the buffer
 68+  B521 D1               pop de
 69+  B522 1E 01            ld e,1                      ; set e to 1 to indicate >1 time
 70+  B524 C1               pop bc
 71+  B525 10 DA            djnz ship_land3             ; repeat for vertical movement
 72+  B527 C9               ret
 73+  B528
 74+  B528              ;
 75+  B528              ; Swap the animation frame between 0 and 32. This will be added to the memory location later
 76+  B528              ;
 77+  B528              ship_change_frame:
 78+  B528 F5               push af
 79+  B529 3A C0 B4         ld a,(ship_frame)
 80+  B52C FE 00            cp 0
 81+  B52E CA 36 B5         jp z,ship_change_frame0
 82+  B531 3E 00            ld a,0                      ; flip to 0
 83+  B533 C3 38 B5         jp ship_change_frame1
 84+  B536              ship_change_frame0:
 85+  B536 3E 20            ld a,32                      ; flip to 32
 86+  B538              ship_change_frame1:
 87+  B538 32 C0 B4         ld (ship_frame),a            ; save the frame
 88+  B53B F1               pop af
 89+  B53C C9               ret
 90+  B53D
 91+  B53D              ship_draw_screen:
 92+  B53D 3E 00            ld a,0
 93+  B53F CD ED A3         call buffer_marklineforupdate
 94+  B542 3E 01            ld a,1
 95+  B544 CD ED A3         call buffer_marklineforupdate
 96+  B547 3E 02            ld a,2
 97+  B549 CD ED A3         call buffer_marklineforupdate   ; mark the first three rows for update
 98+  B54C 76               halt
 99+  B54D F3               di
100+  B54E CD 81 A4         call buffer_buffertoscreen  ; copy buffer to screen
101+  B551 FB               ei                          ; enable interupts
102+  B552 C9               ret
103+  B553
104+  B553              ship_draw_full:
105+  B553 21 3E AF         ld hl,ship_sprite
106+  B556 ED 4B BE B4      ld bc,(ship_initpos2)         ; load bc with the start coords
107+  B55A 22 C1 B4         ld (ship_current_sprite),hl  ; put into memory
108+  B55D ED 43 C3 B4      ld (ship_current_coords),bc  ; put into memory
109+  B561 CD 80 B5         call ship_draw
110+  B564 08               ex af,af'
111+  B565 3A C0 B4         ld a,(ship_frame)            ; get the animation frame
112+  B568 16 00            ld d,0
113+  B56A 5F               ld e,a
114+  B56B 19               add hl,de
115+  B56C 22 C1 B4         ld (ship_current_sprite),hl  ; put into memory
116+  B56F 08               ex af,af'
117+  B570 ED 4B BE B4      ld bc,(ship_initpos2)         ; load bc with the start coords
118+  B574 81 C6 08         add c,8                      ; move one line down
119+  B577 4F               ld c,a
120+  B578 ED 43 C3 B4      ld (ship_current_coords),bc  ; put into memory
121+  B57C CD 80 B5         call ship_draw
122+  B57F C9               ret
123+  B580
124+  B580              ;
125+  B580              ; Draw the ship
126+  B580              ; Inputs:
127+  B580              ; None, all in memory
128+  B580              ;
129+  B580              ship_draw:
130+  B580 3E 04            ld a,4                              ; 4 pieces per half
131+  B582              ship_draw0:
132+  B582 F5               push af
133+  B583 2A C1 B4         ld hl,(ship_current_sprite)
134+  B586 ED 4B C3 B4      ld bc,(ship_current_coords)         ; load bc with the start coords
135+  B58A CD BA A6         call sprites_drawsprite
136+  B58D 2A C1 B4         ld hl,(ship_current_sprite)
137+  B590 ED 4B C3 B4      ld bc,(ship_current_coords)         ; load bc with the start coords
138+  B594 11 08 00         ld de,8
139+  B597 19               add hl,de
140+  B598 80 C6 08         add b,8
141+  B59B 47               ld b,a
142+  B59C 22 C1 B4         ld (ship_current_sprite),hl         ; put into memory
143+  B59F ED 43 C3 B4      ld (ship_current_coords),bc         ; put into memory
144+  B5A3 F1               pop af
145+  B5A4 3D               dec a
146+  B5A5 FE 00            cp 0
147+  B5A7 C2 82 B5         jp nz,ship_draw0
148+  B5AA
149+  B5AA C9               ret
150+  B5AB
# file closed: game/ship.asm
 37   B5AB                  include "game\tank.asm"
# file opened: game/tank.asm
  1+  B5AB              ;
  2+  B5AB              ; tank initial position: vert,horiz
  3+  B5AB              ;
  4+  B5AB              tank_initpos:
  5+  B5AB 10 D0            defb 16,208
  6+  B5AD              tank_initpos2:
  7+  B5AD 00 00            defb 0,0
  8+  B5AF              tank_frame:
  9+  B5AF 00               defb 0
 10+  B5B0              tank_anim:
 11+  B5B0 11               defb 17
 12+  B5B1              ;
 13+  B5B1              ; The current memory location
 14+  B5B1              ;
 15+  B5B1              tank_current_sprite:
 16+  B5B1 00 00            defb 0,0
 17+  B5B3
 18+  B5B3              tank_current_coords:
 19+  B5B3 00 00            defb 0,0
 20+  B5B5
 21+  B5B5              ;
 22+  B5B5              ; Initialise the tank
 23+  B5B5              ;
 24+  B5B5              tank_init:
 25+  B5B5 ED 4B AB B5      ld bc,(tank_initpos)
 26+  B5B9 ED 43 AD B5      ld (tank_initpos2),bc       ; save the initial position for later use
 27+  B5BD 21 AF B5         ld hl,tank_frame
 28+  B5C0 36 00            ld (hl),0
 29+  B5C2 21 B0 B5         ld hl,tank_anim
 30+  B5C5 36 11            ld (hl),17                  ; reset tank
 31+  B5C7 C9               ret
 32+  B5C8
 33+  B5C8              ;
 34+  B5C8              ;   Draw and move the tank
 35+  B5C8              ;   Start processing at frame 200
 36+  B5C8              ;   Don't move if anim is zero
 37+  B5C8              ;   Decrement frame if moved
 38+  B5C8              ;
 39+  B5C8              tank_process:
 40+  B5C8 3A B0 B5         ld a,(tank_anim)
 41+  B5CB FE 00            cp 0
 42+  B5CD C8               ret z                       ; return if we've already moved
 43+  B5CE CD DA B3         call game_getcurrentframe   ; get the current frame number into a
 44+  B5D1 FE 4B            cp 75
 45+  B5D3 D8               ret c                       ; return if the frame number is below 100
 46+  B5D4 CD DF B5         call tank_move              ; move tank if not
 47+  B5D7 3A B0 B5         ld a,(tank_anim)
 48+  B5DA 3D               dec a
 49+  B5DB 32 B0 B5         ld (tank_anim),a            ; decrease the anim count
 50+  B5DE C9               ret
 51+  B5DF
 52+  B5DF              tank_move:
 53+  B5DF ED 4B AD B5      ld bc,(tank_initpos2)
 54+  B5E3 C5               push bc
 55+  B5E4 3A B0 B5         ld a,(tank_anim)
 56+  B5E7 FE 11            cp 17                       ; check first time flag
 57+  B5E9 CA FB B5         jp z,tank_move1             ; don't draw over previous one if first time
 58+  B5EC CD 00 B6         call tank_draw_full         ; delete old one
 59+  B5EF ED 4B AD B5      ld bc,(tank_initpos2)       ; get the current coords
 60+  B5F3 78               ld a,b
 61+  B5F4 D6 01            sub 1                       ; move back one pixels
 62+  B5F6 47               ld b,a
 63+  B5F7 ED 43 AD B5      ld (tank_initpos2),bc
 64+  B5FB              tank_move1:
 65+  B5FB CD 00 B6         call tank_draw_full         ; draw the tank
 66+  B5FE C1               pop bc
 67+  B5FF C9               ret
 68+  B600
 69+  B600              tank_draw_full:
 70+  B600 21 9E AF         ld hl,tank_sprite
 71+  B603 ED 4B AD B5      ld bc,(tank_initpos2)         ; load bc with the start coords
 72+  B607 22 B1 B5         ld (tank_current_sprite),hl  ; put into memory
 73+  B60A ED 43 B3 B5      ld (tank_current_coords),bc  ; put into memory
 74+  B60E CD 37 B6         call tank_draw
 75+  B611 08               ex af,af'
 76+  B612 3A AF B5         ld a,(tank_frame)            ; get the animation frame
 77+  B615 16 00            ld d,0
 78+  B617 5F               ld e,a
 79+  B618 19               add hl,de
 80+  B619 22 B1 B5         ld (tank_current_sprite),hl  ; put into memory
 81+  B61C 08               ex af,af'
 82+  B61D ED 4B AD B5      ld bc,(tank_initpos2)         ; load bc with the start coords
 83+  B621 81 C6 08         add c,8                      ; move one line down
 84+  B624 4F               ld c,a
 85+  B625 ED 43 B3 B5      ld (tank_current_coords),bc  ; put into memory
 86+  B629 CD 37 B6         call tank_draw
 87+  B62C 3E 02            ld a,2
 88+  B62E CD ED A3         call buffer_marklineforupdate
 89+  B631 3E 03            ld a,3
 90+  B633 CD ED A3         call buffer_marklineforupdate   ; mark the first two rows for update
 91+  B636 C9               ret
 92+  B637
 93+  B637              ;
 94+  B637              ; Draw the tank
 95+  B637              ; Inputs:
 96+  B637              ; None, all in memory
 97+  B637              ;
 98+  B637              tank_draw:
 99+  B637 3E 04            ld a,4                              ; 4 pieces per half
100+  B639              tank_draw0:
101+  B639 F5               push af
102+  B63A 2A B1 B5         ld hl,(tank_current_sprite)
103+  B63D ED 4B B3 B5      ld bc,(tank_current_coords)         ; load bc with the start coords
104+  B641 CD BA A6         call sprites_drawsprite
105+  B644 2A B1 B5         ld hl,(tank_current_sprite)
106+  B647 ED 4B B3 B5      ld bc,(tank_current_coords)         ; load bc with the start coords
107+  B64B 11 08 00         ld de,8
108+  B64E 19               add hl,de
109+  B64F 80 C6 08         add b,8
110+  B652 47               ld b,a
111+  B653 22 B1 B5         ld (tank_current_sprite),hl         ; put into memory
112+  B656 ED 43 B3 B5      ld (tank_current_coords),bc         ; put into memory
113+  B65A F1               pop af
114+  B65B 3D               dec a
115+  B65C FE 00            cp 0
116+  B65E C2 39 B6         jp nz,tank_draw0
117+  B661
118+  B661 C9               ret
119+  B662
# file closed: game/tank.asm
 38   B662                  include "game\rocks.asm"
# file opened: game/rocks.asm
  1+  B662              ;
  2+  B662              ; A structure of falling rocks
  3+  B662              ; Assume we'll never have more than 4 falling at any one time
  4+  B662              ; (1,2 - 16 bit memory location for rock graphic),state (0 fell, 1 falling, 2 wobbling), countdown
  5+  B662              ;
  6+  B662              rocks_falling:
  7+  B662 00 00 00 00      defb 0,0,0,0
  8+  B666 00 00 00 00      defb 0,0,0,0
  9+  B66A 00 00 00 00      defb 0,0,0,0
 10+  B66E 00 00 00 00      defb 0,0,0,0
 11+  B672
 12+  B672              rocks_tmp:
 13+  B672 00               defb 0
 14+  B673
 15+  B673              rocks_tmp2:
 16+  B673 00 00            defb 0,0
 17+  B675
 18+  B675              ;
 19+  B675              ; Checks for a rock that needs to start falling. Takes a memory location of the first line at the bottom of the space.
 20+  B675              ; Checks to see if the pixel row in that location is a rock bottom. If it is, mark this rock as ready to fall.
 21+  B675              ; If the pixel row is not the rock bottom, stop checking.
 22+  B675              ; Inputs:
 23+  B675              ; hl- memory location
 24+  B675              ;
 25+  B675              rocks_checkforfalling:
 26+  B675 7E               ld a,(hl)           ; get the pixel row in this memory location
 27+  B676 FE 7E            cp 126              ; check against the bottom pixel row of the rock graphic
 28+  B678 C2 7E B6         jp nz,rocks_checkforfalling2 ; not a rock, stop
 29+  B67B CD 7F B6         call rocks_addrocktofalling ; mark the rock as falling
 30+  B67E              rocks_checkforfalling2:
 31+  B67E C9               ret
 32+  B67F
 33+  B67F              ;
 34+  B67F              ; Adds the rock to the structure that tracks falling rocks
 35+  B67F              ; Inputs:
 36+  B67F              ; hl - memory location of falling rock graphic
 37+  B67F              ; bc - coords of rock, c vert
 38+  B67F              rocks_addrocktofalling:
 39+  B67F C5               push bc             ; store the coords
 40+  B680 11 62 B6         ld de,rocks_falling
 41+  B683 06 04            ld b,4              ; number of possible falling rocks
 42+  B685              rocks_addrocktofalling0:
 43+  B685 13               inc de
 44+  B686 13               inc de
 45+  B687 13               inc de              ; move three along to get the state
 46+  B688 1A               ld a,(de)           ; load the state
 47+  B689 FE 00            cp 0                ; check if this is not falling
 48+  B68B C2 A0 B6         jp nz,rocks_addrocktofalling1 ; continue the loop if not 0
 49+  B68E 3E 10            ld a,16             ; load the number of frames to wobble
 50+  B690 12               ld (de),a
 51+  B691 1B               dec de              ; move de back to state
 52+  B692 3E 02            ld a,2
 53+  B694 12               ld (de),a           ; set the state to wobbling
 54+  B695 1B               dec de              ; move back coords
 55+  B696 C1               pop bc              ; get back coords
 56+  B697 78               ld a,b
 57+  B698 12               ld (de),a           ; store the vertical
 58+  B699 1B               dec de
 59+  B69A 79               ld a,c
 60+  B69B 12               ld (de),a           ; store the horizontal
 61+  B69C C5               push bc
 62+  B69D C3 A3 B6         jp rocks_addrocktofalling2 ; done
 63+  B6A0              rocks_addrocktofalling1:
 64+  B6A0 13               inc de              ; move memory along to next rock
 65+  B6A1 10 E2            djnz rocks_addrocktofalling0 ; try the next rock
 66+  B6A3              rocks_addrocktofalling2: ; done, return
 67+  B6A3 C1               pop bc              ; to tidy up
 68+  B6A4 C9               ret
 69+  B6A5
 70+  B6A5              ;
 71+  B6A5              ; Processes any falling rocks
 72+  B6A5              ;
 73+  B6A5              rocks_processrocks:
 74+  B6A5 DD 21 62 B6      ld ix,rocks_falling
 75+  B6A9 06 04            ld b,4              ; the number of rocks to check
 76+  B6AB              rocks_processrocks0:
 77+  B6AB C5               push bc             ; store loop count
 78+  B6AC DD 4E 00 DD      ld bc,(ix)          ; load the coords for this rock into bc
 78+  B6B0 46 01
 79+  B6B2 DD 23            inc ix
 80+  B6B4 DD 23            inc ix              ; move to the state
 81+  B6B6 DD 7E 00         ld a,(ix)           ; load the state into a
 82+  B6B9 FE 00            cp 0
 83+  B6BB CA DF B6         jp z,rocks_processrocks3 ; if not falling, check next
 84+  B6BE FE 02            cp 2
 85+  B6C0 C2 D0 B6         jp nz, rocks_processrocks2
 86+  B6C3                  ; we're wobbling
 87+  B6C3 DD 23            inc ix              ; get frame number for wobble
 88+  B6C5 DD 7E 00         ld a,(ix)           ; get wobble frame into a
 89+  B6C8 CD 95 B7         call rocks_wobble
 90+  B6CB DD 23            inc ix              ; increment for next
 91+  B6CD C3 E3 B6         jp rocks_processrocks1  ; do next rock
 92+  B6D0              rocks_processrocks2:
 93+  B6D0                  ; we're falling
 94+  B6D0 C5               push bc
 95+  B6D1 CD FC B6         call rocks_fall
 96+  B6D4 C1               pop bc
 97+  B6D5 CD E7 B6         call rocks_storeupdatedlines
 98+  B6D8 DD 23            inc ix
 99+  B6DA DD 23            inc ix              ; inc ix to get to next
100+  B6DC C3 E3 B6         jp rocks_processrocks1
101+  B6DF              rocks_processrocks3:
102+  B6DF DD 23            inc ix
103+  B6E1 DD 23            inc ix
104+  B6E3              rocks_processrocks1:
105+  B6E3 C1               pop bc              ; get loop count back
106+  B6E4 10 C5            djnz rocks_processrocks0
107+  B6E6 C9               ret
108+  B6E7
109+  B6E7              ;
110+  B6E7              ; Stores the updated rows associated with the rock
111+  B6E7              ; Inputs:
112+  B6E7              ; bc - coords
113+  B6E7              ;
114+  B6E7              rocks_storeupdatedlines:
115+  B6E7 79               ld a,c                  ; get the player block coords of current block
116+  B6E8 E6 F8            and 248                 ; find closest multiple of eight
117+  B6EA 0F               rrca
118+  B6EB 0F               rrca
119+  B6EC 0F               rrca                    ; divide by 8
120+  B6ED ED 5B 3A A5      ld de,(screen_offset)          ; load the screen offset, this is in rows
121+  B6F1 93               sub e
122+  B6F2 F5               push af
123+  B6F3 CD ED A3         call buffer_marklineforupdate  ; store current row in updated lines
124+  B6F6 F1               pop af
125+  B6F7 3C               inc a
126+  B6F8 CD ED A3         call buffer_marklineforupdate  ; store line beneath
127+  B6FB C9               ret
128+  B6FC
129+  B6FC              ;
130+  B6FC              ; Falls a rock one pixel, checks the next square down to see if it is empty, if not, stop falling
131+  B6FC              ; bc - coord of current rock graphic on screen
132+  B6FC              ; ix - memory location of current rock in rock list, currently at the 3rd position (rock state)
133+  B6FC              ;
134+  B6FC              rocks_fall:
135+  B6FC DD 2B            dec ix
136+  B6FE DD 2B            dec ix              ; decrease ix back to coords
137+  B700 ED 43 73 B6      ld (rocks_tmp2),bc  ; store original coords
138+  B704 3E 03            ld a,3              ; move this number of pixels
139+  B706              rocks_fall1:
140+  B706 08               ex af,af'
141+  B707 DD 4E 00 DD      ld bc,(ix)          ; get current coords
141+  B70B 46 01
142+  B70D CD FD A6         call sprites_scadd  ; get the memory of the coords into de
143+  B710 14               inc d               ; add 256 to get next row
144+  B711 1A               ld a,(de)           ; get the contents of the next row
145+  B712 FE 00            cp 0
146+  B714 C2 6D B7         jp nz,rocks_fall3    ; move the rock if the row is empty
147+  B717 0C               inc c               ; increment the vertical
148+  B718 DD 71 00 DD      ld (ix),bc          ; store the new coords
148+  B71C 70 01
149+  B71E 79               ld a,c              ; get the vertical coord into a
150+  B71F E6 07            and 7               ; divisible by 8?
151+  B721 FE 00            cp 0
152+  B723 C2 3E B7         jp nz,rocks_fall4   ; if not, carry on
153+  B726 CD 5D A6         call screen_getattraddressfromscreencoords ; get the attr address into de
154+  B729 62 6B            ld hl,de
155+  B72B 36 42            ld (hl),66          ; load this square with the yellow colour
156+  B72D DD 4E 00 DD      ld bc,(ix)
156+  B731 46 01
157+  B733 79               ld a,c              ; get vertical
158+  B734 D6 08            sub 8               ; look up one square
159+  B736 4F               ld c,a              ; put a back in c
160+  B737 CD 5D A6         call screen_getattraddressfromscreencoords ; get the attr address into de
161+  B73A 62 6B            ld hl,de
162+  B73C 36 46            ld (hl),70          ; load this square with the yellow colour
163+  B73E              rocks_fall4:
164+  B73E 08               ex af,af'
165+  B73F 3D               dec a
166+  B740 FE 00            cp 0
167+  B742 C2 06 B7         jp nz,rocks_fall1   ; do another pixel if needed
168+  B745              rocks_fall2:
169+  B745 3E 09            ld a,9              ; rock graphic
170+  B747 ED 4B 73 B6      ld bc,(rocks_tmp2)  ; get the original coords
171+  B74B CD 98 A6         call screen_getblock     ; get the memory into hl
172+  B74E CD BA A6         call sprites_drawsprite  ; draw the sprite - over the top of the current one
173+  B751 3E 09            ld a,9
174+  B753 DD 4E 00 DD      ld bc,(ix)          ; get the new coords
174+  B757 46 01
175+  B759 CD 98 A6         call screen_getblock     ; get the memory into hl
176+  B75C CD BA A6         call sprites_drawsprite  ; draw the sprite - over the top of the current one
177+  B75F DD 4E 00 DD      ld bc,(ix)          ; get the coords again
177+  B763 46 01
178+  B765 CD 82 B7         call rocks_checkforplayer ; check to see if we hit a player
179+  B768 DD 23            inc ix
180+  B76A DD 23            inc ix                  ; get ix back to state
181+  B76C C9               ret
182+  B76D              rocks_fall3:
183+  B76D 3E 00            ld a,0              ; set the state to fell
184+  B76F DD 77 02         ld (ix+2),a           ; store the falling state
185+  B772 DD 4E 00 DD      ld bc,(ix)          ; get the coords
185+  B776 46 01
186+  B778 CD 5D A6         call screen_getattraddressfromscreencoords ; get the attr address into de
187+  B77B 62 6B            ld hl,de
188+  B77D 36 42            ld (hl),66
189+  B77F C3 45 B7         jp rocks_fall2      ; rejoin main loop
190+  B782
191+  B782              ;
192+  B782              ; Checks to see if the rock is hitting a player
193+  B782              ; Inputs:
194+  B782              ; bc - coords of rock we're checking
195+  B782              rocks_checkforplayer:
196+  B782 ED 5B E4 B3      ld de,(player)       ; get the player coords
197+  B786 7B               ld a,e               ; get the vert coord first
198+  B787 91               sub c                ; subtract the rock vertical coord from players
199+  B788 FE 08            cp 8                 ; the rock will only hit a player if the player is directly underneath, so this must be 8
200+  B78A C0               ret nz               ; if not, hasn't hit
201+  B78B 7A               ld a,d               ; get the player horiz coord
202+  B78C 90               sub b                ; subtract rock coord
203+  B78D C6 07            add 7                ; add max distance
204+  B78F FE 0D            cp 13                ; compare to 13? if carry flag set, they've hit
205+  B791 DC 36 B4         call c, player_killplayer ; if so, jump out
206+  B794 C9               ret
207+  B795
208+  B795              ;
209+  B795              ; Wobbles a rocks
210+  B795              ; Inputs:
211+  B795              ; bc - coord of current rock graphic on screen
212+  B795              ; ix - memory location of current rock in rock list, currently at the 4th position (wobble count)
213+  B795              ; a - wobble frame
214+  B795              rocks_wobble:
215+  B795 3A 72 B6         ld a,(rocks_tmp)    ; get the frame toggle
216+  B798 1E 09            ld e,9              ; this is the rock frame
217+  B79A 83               add a,e             ; add the frame toggle
218+  B79B C5               push bc
219+  B79C CD 98 A6         call screen_getblock     ; get the memory into hl
220+  B79F CD BA A6         call sprites_drawsprite  ; draw the sprite - over the top of the current one
221+  B7A2 3A 72 B6         ld a,(rocks_tmp)    ; get the frame toggle against
222+  B7A5 EE 01            xor 1               ; flip to other state
223+  B7A7 32 72 B6         ld (rocks_tmp),a    ; store
224+  B7AA 1E 09            ld e,9              ; this is the rock frame
225+  B7AC 83               add a,e             ; add the frame toggle
226+  B7AD CD 98 A6         call screen_getblock     ; get the memory into hl
227+  B7B0 C1               pop bc
228+  B7B1 CD BA A6         call sprites_drawsprite  ; draw the sprite again with the new frame - next time it will do the opposite
229+  B7B4 DD 7E 00         ld a,(ix)           ; get the wobble count back
230+  B7B7 3D               dec a               ; decrease
231+  B7B8 DD 77 00         ld (ix),a           ; store
232+  B7BB FE 00            cp 0
233+  B7BD C0               ret nz              ; if we're not at zero, return
234+  B7BE DD 2B            dec ix              ; otherwise look to state location
235+  B7C0 3E 01            ld a,1              ; set the state to falling
236+  B7C2 DD 77 00         ld (ix),a           ; store the falling state
237+  B7C5 DD 23            inc ix              ; set ix back to location of wobble count, and we're done
238+  B7C7 C9               ret
239+  B7C8
# file closed: game/rocks.asm
 39   B7C8                  include "game\scores.asm"
# file opened: game/scores.asm
  1+  B7C8              ;
  2+  B7C8              ; The score of the current player
  3+  B7C8              ;
  4+  B7C8              scores_current:
  5+  B7C8 30 30 30 30      defb '000000'
  5+  B7CC 30 30
  6+  B7CE
  7+  B7CE              ;
  8+  B7CE              ; The current high score table
  9+  B7CE              ;
 10+  B7CE              scores_table:
 11+  B7CE 03 17 47 41      defb 3,23,'GAM',255
 11+  B7D2 4D FF
 12+  B7D4 06 17 30 30      defb 6,23,'00000 ',255
 12+  B7D8 30 30 30 20
 12+  B7DC FF
 13+  B7DD 0C 17 47 41      defb 12,23,'GAM',255
 13+  B7E1 4D FF
 14+  B7E3 0F 17 30 30      defb 15,23,'00000 ',255
 14+  B7E7 30 30 30 20
 14+  B7EB FF
 15+  B7EC 15 17 47 41      defb 21,23,'GAM',255
 15+  B7F0 4D FF
 16+  B7F2 18 17 30 30      defb 24,23,'00000 ',255
 16+  B7F6 30 30 30 20
 16+  B7FA FF
 17+  B7FB
 18+  B7FB              ;
 19+  B7FB              ; Displays the high score table at the bottom of the screen
 20+  B7FB              ;
 21+  B7FB              scores_showtable:
 22+  B7FB 21 CE B7         ld hl, scores_table
 23+  B7FE CD ED 82         call string_print
 24+  B801 21 D4 B7         ld hl, scores_table+6
 25+  B804 CD ED 82         call string_print
 26+  B807 21 DD B7         ld hl, scores_table+15
 27+  B80A CD ED 82         call string_print
 28+  B80D 21 E3 B7         ld hl, scores_table+21
 29+  B810 CD ED 82         call string_print
 30+  B813 21 EC B7         ld hl, scores_table+30
 31+  B816 CD ED 82         call string_print
 32+  B819 21 F2 B7         ld hl, scores_table+36
 33+  B81C CD ED 82         call string_print
 34+  B81F C9               ret
# file closed: game/scores.asm
 40   B820                  include "game\diamonds.asm"
# file opened: game/diamonds.asm
  1+  B820              ;
  2+  B820              ; Changes the attribute of gem and diamond cells based on the frame count
  3+  B820              ; Inputs:
  4+  B820              ; hl - memory location of gem type
  5+  B820              diamonds_twinkle_type:
  6+  B820 CD DA B3         call game_getcurrentframe       ; get current frame number
  7+  B823 E6 07            and 7                           ; want a number from 0-7
  8+  B825 C6 40            add 64                          ; add to 60 to get attr colour
  9+  B827              diamonds_twinkle_type0:
 10+  B827 4E               ld c,(hl)                      ; get coords into bc
 11+  B828 08               ex af, af'
 12+  B829 79               ld a,c                          ; load c into add
 13+  B82A FE FF            cp 255                          ; is this the end?
 14+  B82C CA 43 B8         jp z,diamonds_twinkle_type1           ; step out if so
 15+  B82F 23               inc hl
 16+  B830 23               inc hl
 17+  B831 7E               ld a,(hl)                       ; check the state, don't process if collection
 18+  B832 FE 01            cp 1
 19+  B834 CA 43 B8         jp z,diamonds_twinkle_type1           ; step out if so
 20+  B837 23               inc hl
 21+  B838 08               ex af,af'
 22+  B839 5E 23 56 2B      ld de,(hl)                      ; get the memory location into de
 23+  B83D 12               ld (de),a                       ; set the value of attr
 24+  B83E 23               inc hl
 25+  B83F 23               inc hl                          ; move to next diamond
 26+  B840 C3 27 B8         jp diamonds_twinkle_type0
 27+  B843              diamonds_twinkle_type1:
 28+  B843 C9               ret
 29+  B844
 30+  B844              ;
 31+  B844              ; Initialise diamonds and gems
 32+  B844              ;
 33+  B844              diamonds_twinkle
 34+  B844 21 E2 AD         ld hl, level01diamonds
 35+  B847 CD 20 B8         call diamonds_twinkle_type
 36+  B84A 21 F2 AD         ld hl, level01gems
 37+  B84D CD 20 B8         call diamonds_twinkle_type
 38+  B850 C9               ret
 39+  B851
 40+  B851              ;
 41+  B851              ; Initialise diamonds and gems
 42+  B851              ;
 43+  B851              diamonds_init:
 44+  B851 21 E2 AD         ld hl, level01diamonds
 45+  B854 CD 5E B8         call diamonds_init_type
 46+  B857 21 F2 AD         ld hl, level01gems
 47+  B85A CD 5E B8         call diamonds_init_type
 48+  B85D C9               ret
 49+  B85E
 50+  B85E              ;
 51+  B85E              ; Initialise diamonds or gems, get memory addresses
 52+  B85E              ; Inputs:
 53+  B85E              ; hl - memory location
 54+  B85E              diamonds_init_type:
 55+  B85E 4E               ld c,(hl)                      ; get coords into c
 56+  B85F 79               ld a,c                          ; load c into add
 57+  B860 FE FF            cp 255                          ; is this the end?
 58+  B862 CA 77 B8         jp z,diamonds_init_type1             ; step out if so
 59+  B865 23               inc hl
 60+  B866 46               ld b,(hl)                       ; get coords into b
 61+  B867 E5               push hl
 62+  B868 CD 2D A6         call screen_getcellattradress ; get memory of attr for this diamond into de
 63+  B86B E1               pop hl
 64+  B86C 23               inc hl                          ; move to state
 65+  B86D 23               inc hl                          ; move to memory
 66+  B86E 73 23 72 2B      ld (hl),de                      ; store the memory location
 67+  B872 23               inc hl                          ; move to next diamond
 68+  B873 23               inc hl
 69+  B874 C3 5E B8         jp diamonds_init_type
 70+  B877              diamonds_init_type1:
 71+  B877 C9               ret
# file closed: game/diamonds.asm
 41   B878
 42   B878              ;===========================================================================
 43   B878              ; main routine - the code execution starts here.
 44   B878              ; Sets up the new interrupt routine, the memory
 45   B878              ; banks and jumps to the start loop.
 46   B878              ;===========================================================================
 47   B878              main:
 48   B878
 49   B878                  ; Setup stack
 50   B878 31 9B B9         ld sp,stack_top
 51   B87B
 52   B87B                  ; Draw the title screen
 53   B87B              main_titlescreen:
 54   B87B CD 23 A7         call titlescreen_show
 55   B87E CD F5 B3         call player_init_gamestart
 56   B881
 57   B881              main_lifestart:
 58   B881
 59   B881 CD FF B3         call player_init_lifestart
 60   B884
 61   B884 CD 86 A8         call lifescreen_draw        ; show the lives remaining screen
 62   B887
 63   B887 CD 00 80         call init_start
 64   B88A CD 55 A5         call screen_draw
 65   B88D CD B3 A4         call buffer_allbuffertoscreen
 66   B890
 67   B890 CD C5 B4         call ship_land              ; land the ship
 68   B893 CD B5 B5         call tank_init
 69   B896 CD 51 B8         call diamonds_init
 70   B899              mloop:
 71   B899 76               halt
 72   B89A CD B5 B8         call main_loop_processing
 73   B89D
 74   B89D 21 EE B3         ld hl,player+10
 75   B8A0 7E               ld a,(hl)                   ; check if the player died this frame
 76   B8A1 FE 01            cp 1
 77   B8A3 C2 99 B8         jp nz,mloop
 78   B8A6 CD 1E B4         call player_died        ; do end of life housekeeping
 79   B8A9 21 ED B3         ld hl,player+9        ; check lives remaining
 80   B8AC 7E               ld a,(hl)
 81   B8AD FE 00            cp 0
 82   B8AF CA 7B B8         jp z,main_titlescreen   ; leave the loop if we're done
 83   B8B2 C3 81 B8         jp main_lifestart
 84   B8B5
 85   B8B5              main_loop_processing:
 86   B8B5 CD 81 A4         call buffer_buffertoscreen  ; copy buffer to screen
 87   B8B8 CD 01 A4         call buffer_clearlist       ; zero the updated lines list
 88   B8BB CD 3C B4         call player_drawplayer      ; delete player
 89   B8BE CD E6 AF         call control_keyboard       ; check keyboard
 90   B8C1 CD 3C B4         call player_drawplayer      ; draw player
 91   B8C4 CD C8 B5         call tank_process           ; prcoess the tank
 92   B8C7 CD A5 B6         call rocks_processrocks     ; process falling rocks
 93   B8CA CD 44 B8         call diamonds_twinkle       ; make the diamonds twinkle
 94   B8CD
 95   B8CD CD CB B3         call game_incrementframe    ; increment the game frame
 96   B8D0
 97   B8D0 C9               ret
 98   B8D1
 99   B8D1              ;===========================================================================
100   B8D1              ; Stack.
101   B8D1              ;===========================================================================
102   B8D1
103   B8D1              ; Stack: this area is reserved for the stack
104   B8D1              STACK_SIZE: equ 100    ; in words
105   B8D1
106   B8D1              ; Reserve stack space
107   B8D1 00 00            defw 0  ; WPMEM, 2
108   B8D3              stack_bottom:
109   B8D3 00 00 00...      defs    STACK_SIZE*2, 0
110   B99B              stack_top:
111   B99B 00 00            defw 0  ; WPMEM, 2
112   B99D
113   B99D                     SAVESNA "ThePit.sna", main
# file closed: main.asm
