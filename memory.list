# file opened: main.asm
  1   0000                  DEVICE ZXSPECTRUM48
  2   0000
  3   0000                  ORG $8000
  4   8000
  5   8000              ;===========================================================================
  6   8000              ; Persistent watchpoint.
  7   8000              ; Change WPMEMx (remove the 'x' from WPMEMx) below to activate.
  8   8000              ; If you do so the program will hit a breakpoint when it tries to
  9   8000              ; write to the first byte of the 3rd line.
 10   8000              ; When program breaks in the fill_memory sub routine please hover over hl
 11   8000              ; to see that it contains 0x5804 or COLOR_SCREEN+64.
 12   8000              ;===========================================================================
 13   8000
 14   8000              ; WPMEMx 0x5840, 1, w
 15   8000
 16   8000
 17   8000              ;===========================================================================
 18   8000              ; Include modules
 19   8000              ;===========================================================================
 20   8000                  include "init.asm"
# file opened: init.asm
  1+  8000              ;
  2+  8000              ; Set up at start up
  3+  8000              ;
  4+  8000              init_start:
  5+  8000              ; We want a black screen.
  6+  8000 CD 6B 0D         call $0D6B
  7+  8003 3E 47            ld a,71             ; white ink (7) on black paper (0),
  8+  8005                                      ; bright (64).
  9+  8005 32 8D 5C         ld (23693),a        ; set our screen colours.
 10+  8008 AF               xor a               ; quick way to load accumulator with zero.
 11+  8009 CD 9B 22         call 8859           ; set permanent border colours.
 12+  800C CD AF 0D         call 3503           ; ROM routine - clears screen, opens chan 2.
 13+  800F
 14+  800F C9               ret
 15+  8010
 16+  8010              ;
 17+  8010              ;   Start coord
 18+  8010              ;   vert c, horiz b
 19+  8010              start_coord:
 20+  8010 18 30            defb 24,48
 21+  8012
# file closed: init.asm
 21   8012                  include "utilities.asm"
# file opened: utilities.asm
  1+  8012              ; ##########################################################################
  2+  8012              ; Print a character
  3+  8012              ; Inputs:
  4+  8012              ; b - x coord
  5+  8012              ; c - y coord
  6+  8012              ; d - character
  7+  8012              ; e - colour
  8+  8012              ; ##########################################################################
  9+  8012              utilities_print_char:
 10+  8012 7B               ld a,e
 11+  8013 32 8F 5C         ld (23695),a        ; set our temporary screen colours.
 12+  8016 3E 16            ld a,22
 13+  8018 D7               rst 16              ; Calls the Sinclair PRINT AT routine
 14+  8019 78               ld a,b              ; Gets the X co-ordinate
 15+  801A 3D               dec a
 16+  801B D7               rst 16
 17+  801C 79               ld a,c              ; and the Y co-ordinate
 18+  801D D7               rst 16              ; So, essentially PRINT AT X,Y; like in BASIC
 19+  801E 7A               ld a,d              ; ASCII code for udg.
 20+  801F D7               rst 16              ; draw block.
 21+  8020 C9               ret
 22+  8021
 23+  8021
 24+  8021              ;Inputs:
 25+  8021              ;     DE and A are factors
 26+  8021              ;Outputs:
 27+  8021              ;     A is not changed
 28+  8021              ;     B is 0
 29+  8021              ;     C is not changed
 30+  8021              ;     DE is not changed
 31+  8021              ;     HL is the product
 32+  8021              ;Time:
 33+  8021              ;     342+6x
 34+  8021              ;
 35+  8021              utilities_multiply:
 36+  8021 06 08            ld b,8          ;7           7
 37+  8023 21 00 00         ld hl,0         ;10         10
 38+  8026 29               add hl,hl     ;11*8       88
 39+  8027 07               rlca          ;4*8        32
 40+  8028 30 01            jr nc,$+3     ;(12|18)*8  96+6x
 41+  802A 19                   add hl,de   ;--         --
 42+  802B 10 F9            djnz $-5      ;13*7+8     99
 43+  802D C9               ret             ;10         10
 44+  802E
 45+  802E              utilities_waitforkey:
 46+  802E 21 08 5C         ld hl,23560         ; LAST K system variable.
 47+  8031 36 00            ld (hl),0           ; put null value there.
 48+  8033              utilities_waitforkey0:
 49+  8033 7E               ld a,(hl)           ; new value of LAST K.
 50+  8034 FE 00            cp 0                ; is it still zero?
 51+  8036 28 FB            jr z,utilities_waitforkey0           ; yes, so no key pressed.
 52+  8038 C9               ret                 ; key was pressed.
 53+  8039
 54+  8039              ;
 55+  8039              ; Waits number of frames for keypress. If got, returns 1, if not 0
 56+  8039              ; Inputs:
 57+  8039              ; a - number of frames to waits
 58+  8039              ; Ouputs:
 59+  8039              ; e - 0 not pressed, 1 pressed
 60+  8039              utilities_waitforkey_forframes:
 61+  8039 21 08 5C         ld hl,23560         ; LAST K system variable.
 62+  803C 36 00            ld (hl),0           ; put null value there.
 63+  803E 47               ld b,a              ; number of frames to wait
 64+  803F              utilities_waitforkey_forframes0:
 65+  803F 7E               ld a,(hl)           ; new value of LAST K.
 66+  8040 FE 00            cp 0                ; is it still zero?
 67+  8042 28 03            jr z,utilities_waitforkey_forframes1           ; yes, so no key pressed.
 68+  8044 1E 01            ld e,1              ; set the pressed flag
 69+  8046 C9               ret                 ; key was pressed.
 70+  8047              utilities_waitforkey_forframes1:
 71+  8047 76               halt                ; wait for frame
 72+  8048 76               halt                ; wait for frame
 73+  8049 10 F4            djnz utilities_waitforkey_forframes0 ; loop again
 74+  804B 1E 00            ld e,0              ; nothing pressed in time
 75+  804D C9               ret
 76+  804E
# file closed: utilities.asm
 22   804E                  include "strings.asm"
# file opened: strings.asm
  1+  804E              string_score1:
  2+  804E 04 00 53 43      defb 4,0,'SCORE1',255
  2+  8052 4F 52 45 31
  2+  8056 FF
  3+  8057              string_scorenumbers1:
  4+  8057 04 01 30 30      defb 4,1,'000000',255
  4+  805B 30 30 30 30
  4+  805F FF
  5+  8060              string_company:
  6+  8060 0C 00 43 45      defb 12,0,'CENTURI',255
  6+  8064 4E 54 55 52
  6+  8068 49 FF
  7+  806A              string_credits:
  8+  806A 0C 01 50 4C      defb 12,1,'PLAYER 1',255
  8+  806E 41 59 45 52
  8+  8072 20 31 FF
  9+  8075              string_score2:
 10+  8075 16 00 53 43      defb 22,0,'SCORE2',255
 10+  8079 4F 52 45 32
 10+  807D FF
 11+  807E              string_scorenumbers2:
 12+  807E 16 01 30 30      defb 22,1,'000000',255
 12+  8082 30 30 30 30
 12+  8086 FF
 13+  8087              string_titlescreen_copyright:
 14+  8087 04 16 7F 20      defb 4,22, 127,' 1982 AW ZILEC ELC LTD',255
 14+  808B 31 39 38 32
 14+  808F 20 41 57 20
 14+  8093 5A 49 4C 45
 14+  8097 43 20 45 4C
 14+  809B 43 20 4C 54
 14+  809F 44 FF
 15+  80A1
 16+  80A1
 17+  80A1              string_alttitlescreen_1:
 18+  80A1 0C 00 43 52      defb 12,0,'CREDITS 1',255
 18+  80A5 45 44 49 54
 18+  80A9 53 20 31 FF
 19+  80AD              string_alttitlescreen_2:
 20+  80AD 00 02 20 20      defb 0,2,'           THE OBJECT',254
 20+  80B1 20 20 20 20
 20+  80B5 20 20 20 20
 20+  80B9 20 54 48 45
 20+  80BD 20 4F 42 4A
 20+  80C1 45 43 54 FE
 21+  80C5 00 03 20 20      defb 0,3,'          OF THIS GAME',254
 21+  80C9 20 20 20 20
 21+  80CD 20 20 20 20
 21+  80D1 4F 46 20 54
 21+  80D5 48 49 53 20
 21+  80D9 47 41 4D 45
 21+  80DD FE
 22+  80DE 00 04 20 20      defb 0,4,'         IS TO DIG DOWN',254
 22+  80E2 20 20 20 20
 22+  80E6 20 20 20 49
 22+  80EA 53 20 54 4F
 22+  80EE 20 44 49 47
 22+  80F2 20 44 4F 57
 22+  80F6 4E FE
 23+  80F8 00 05 20 20      defb 0,5,'        TO THE BOTTOM PIT',254
 23+  80FC 20 20 20 20
 23+  8100 20 20 54 4F
 23+  8104 20 54 48 45
 23+  8108 20 42 4F 54
 23+  810C 54 4F 4D 20
 23+  8110 50 49 54 FE
 24+  8114 00 06 20 20      defb 0,6,'               AND',254
 24+  8118 20 20 20 20
 24+  811C 20 20 20 20
 24+  8120 20 20 20 20
 24+  8124 20 41 4E 44
 24+  8128 FE
 25+  8129 00 07 20 20      defb 0,7,'        COLLECT AT LEAST',254
 25+  812D 20 20 20 20
 25+  8131 20 20 43 4F
 25+  8135 4C 4C 45 43
 25+  8139 54 20 41 54
 25+  813D 20 4C 45 41
 25+  8141 53 54 FE
 26+  8144 00 08 20 20      defb 0,8,'         ONE LARGE JEWEL',254
 26+  8148 20 20 20 20
 26+  814C 20 20 20 4F
 26+  8150 4E 45 20 4C
 26+  8154 41 52 47 45
 26+  8158 20 4A 45 57
 26+  815C 45 4C FE
 27+  815F 00 09 20 20      defb 0,9,'              THEN',254
 27+  8163 20 20 20 20
 27+  8167 20 20 20 20
 27+  816B 20 20 20 20
 27+  816F 54 48 45 4E
 27+  8173 FE
 28+  8174 00 0A 20 20      defb 0,10,'         RETURN TO SHIP',254
 28+  8178 20 20 20 20
 28+  817C 20 20 20 52
 28+  8180 45 54 55 52
 28+  8184 4E 20 54 4F
 28+  8188 20 53 48 49
 28+  818C 50 FE
 29+  818E 00 0B 20 20      defb 0,11,'         THRU UPPER PIT',255
 29+  8192 20 20 20 20
 29+  8196 20 20 20 54
 29+  819A 48 52 55 20
 29+  819E 55 50 50 45
 29+  81A2 52 20 50 49
 29+  81A6 54 FF
 30+  81A8              string_alttitlescreen_3:
 31+  81A8 00 0D 20 20      defb 0,13,'    SINGLE BONUS  5000 POINTS',254
 31+  81AC 20 20 53 49
 31+  81B0 4E 47 4C 45
 31+  81B4 20 42 4F 4E
 31+  81B8 55 53 20 20
 31+  81BC 35 30 30 30
 31+  81C0 20 50 4F 49
 31+  81C4 4E 54 53 FE
 32+  81C8 00 0E 20 20      defb 0,14,'      COLLECT 1 LARGE JEWEL',254
 32+  81CC 20 20 20 20
 32+  81D0 43 4F 4C 4C
 32+  81D4 45 43 54 20
 32+  81D8 31 20 4C 41
 32+  81DC 52 47 45 20
 32+  81E0 4A 45 57 45
 32+  81E4 4C FE
 33+  81E6 00 0F 20 20      defb 0,15,'       AND RETURN TO SHIP',254
 33+  81EA 20 20 20 20
 33+  81EE 20 41 4E 44
 33+  81F2 20 52 45 54
 33+  81F6 55 52 4E 20
 33+  81FA 54 4F 20 53
 33+  81FE 48 49 50 FE
 34+  8202 00 11 20 20      defb 0,17,'    DOUBLE BONUS  10000 POINTS',254
 34+  8206 20 20 44 4F
 34+  820A 55 42 4C 45
 34+  820E 20 42 4F 4E
 34+  8212 55 53 20 20
 34+  8216 31 30 30 30
 34+  821A 30 20 50 4F
 34+  821E 49 4E 54 53
 34+  8222 FE
 35+  8223 00 12 20 20      defb 0,18,'    COLLECT ALL 3 LARGE JEWELS',254
 35+  8227 20 20 43 4F
 35+  822B 4C 4C 45 43
 35+  822F 54 20 41 4C
 35+  8233 4C 20 33 20
 35+  8237 4C 41 52 47
 35+  823B 45 20 4A 45
 35+  823F 57 45 4C 53
 35+  8243 FE
 36+  8244 00 13 20 20      defb 0,19,'       OR   ALL 4 SMALL JEWELS',254
 36+  8248 20 20 20 20
 36+  824C 20 4F 52 20
 36+  8250 20 20 41 4C
 36+  8254 4C 20 34 20
 36+  8258 53 4D 41 4C
 36+  825C 4C 20 4A 45
 36+  8260 57 45 4C 53
 36+  8264 FE
 37+  8265 00 15 20 20      defb 0,21,'    TRIPLE BONUS  15000 POINTS',254
 37+  8269 20 20 54 52
 37+  826D 49 50 4C 45
 37+  8271 20 42 4F 4E
 37+  8275 55 53 20 20
 37+  8279 31 35 30 30
 37+  827D 30 20 50 4F
 37+  8281 49 4E 54 53
 37+  8285 FE
 38+  8286 00 16 20 20      defb 0,22,'       COLLECT ALL 7 JEWELS',255
 38+  828A 20 20 20 20
 38+  828E 20 43 4F 4C
 38+  8292 4C 45 43 54
 38+  8296 20 41 4C 4C
 38+  829A 20 37 20 4A
 38+  829E 45 57 45 4C
 38+  82A2 53 FF
 39+  82A4
 40+  82A4              ;
 41+  82A4              ; Prints specified string
 42+  82A4              ; Inputs:
 43+  82A4              ; de: pointer to string
 44+  82A4              ; bc: length of string
 45+  82A4              ;
 46+  82A4              ; Print String Data
 47+  82A4              ; First two bytes of string contain X and Y char position, then the string
 48+  82A4              ; Individual strings are terminated with 0xFE
 49+  82A4              ; End of data is terminated with 0xFF
 50+  82A4              ; HL: Address of string
 51+  82A4              ;
 52+  82A4 5E           string_print:           LD E,(HL)                       ; Fetch the X coordinate
 53+  82A5 23                                   INC HL                          ; Increase HL to the next memory location
 54+  82A6 56                                   LD D,(HL)                       ; Fetch the Y coordinate
 55+  82A7 23                                   INC HL                          ; Increase HL to the next memory location
 56+  82A8 CD BB 82                             CALL string_getcharaddress           ; Calculate the screen address (in DE)
 57+  82AB 7E           string_print_0:         LD A,(HL)                       ; Fetch the character to print
 58+  82AC 23                                   INC HL                          ; Increase HL to the next character
 59+  82AD FE FE                                CP 0xFE                         ; Compare with 0xFE
 60+  82AF 28 F3                                JR Z,string_print               ; If it is equal to 0xFE then loop back to print next string
 61+  82B1 D0                                   RET NC                          ; If it is greater or equal to (carry bit set) then
 62+  82B2 E5                                   PUSH HL                         ; Push HL on stack (Print_Char will not preserve HL)
 63+  82B3 CD CB 82                             CALL Print_Char                 ; Print the character
 64+  82B6 E1                                   POP HL                          ; Retrieve HL back off the stack
 65+  82B7 1C                                   INC E                           ; Go to the next screen address
 66+  82B8 18 F1                                JR string_print_0               ; Loop back to print next character
 67+  82BA C9                                   RET
 68+  82BB
 69+  82BB              ; Get screen address
 70+  82BB              ; D = Y character position
 71+  82BB              ; E = X character position
 72+  82BB              ; Returns address in DE
 73+  82BB              ;
 74+  82BB 7A           string_getcharaddress:       LD A,D
 75+  82BC E6 07                                AND %00000111
 76+  82BE 1F                                   RRA
 77+  82BF 1F                                   RRA
 78+  82C0 1F                                   RRA
 79+  82C1 1F                                   RRA
 80+  82C2 B3                                   OR E
 81+  82C3 5F                                   LD E,A
 82+  82C4 7A                                   LD A,D
 83+  82C5 E6 18                                AND %00011000
 84+  82C7 F6 40                                OR %01000000
 85+  82C9 57                                   LD D,A
 86+  82CA C9                                   RET                             ; Returns screen address in DE
 87+  82CB
 88+  82CB              ; Print a single character out
 89+  82CB              ; A:  Character to print
 90+  82CB              ; DE: Screen address to print character at
 91+  82CB              ;
 92+  82CB 21 00 3C     Print_Char:             LD HL,0x3C00                    ; Address of character set table in ROM
 93+  82CE 06 00                                LD B,0                          ; Set BC to A
 94+  82D0 4F                                   LD C,A
 95+  82D1 E6 FF                                AND 0xFF                        ; Clear the carry bit
 96+  82D3 CB 11                                RL C                            ; Multiply BC by 8 (shift left 3 times)
 97+  82D5 CB 10                                RL B
 98+  82D7 CB 11                                RL C
 99+  82D9 CB 10                                RL B
100+  82DB CB 11                                RL C
101+  82DD CB 10                                RL B
102+  82DF 09                                   ADD HL,BC                       ; Get the character address in HL
103+  82E0 0E 08                                LD C,8                          ; Loop counter
104+  82E2 D5                                   PUSH DE
105+  82E3 7E           Print_Char_1:           LD A,(HL)                       ; Get the byte from the ROM into A
106+  82E4 12                                   LD (DE),A                       ; Stick A onto the screen
107+  82E5 14                                   INC D                           ; Goto next line on screen
108+  82E6 2C                                   INC L                           ; Goto next byte of character
109+  82E7 0D                                   DEC C                           ; Decrease the loop counter
110+  82E8 20 F9                                JR NZ,Print_Char_1              ; Loop around whilst it is Not Zero (NZ)
111+  82EA D1                                   POP DE
112+  82EB C9                                   RET                             ; Return from the subroutine
# file closed: strings.asm
 23   82EC                  include "screen\screen.asm"
# file opened: screen/screen.asm
  1+  82EC              screen_buffer:
  2+  82EC 00 00 00...      defs 7424                   ; area reserved for screen
  3+  9FEC
  4+  9FEC              screen_attr_buffer:
  5+  9FEC 00 00 00...      defs 928                    ; attrs buffer area
  6+  A38C
  7+  A38C              screen_offset:
  8+  A38C 00               defb 0                      ; offset from top of screen in lines
  9+  A38D
 10+  A38D              screen_tmp:
 11+  A38D 00               defb 0                      ; temporary memory
 12+  A38E
 13+  A38E              ;
 14+  A38E              ; Copies the buffer to the screen. Use stack.
 15+  A38E              ; Inputs: none
 16+  A38E              ;
 17+  A38E              screen_buffertoscreen:
 18+  A38E 3A 8C A3         ld a,(screen_offset)          ; load the screen offset, this is in rows, want it *256
 19+  A391 11 00 01         ld de,256
 20+  A394 CD 21 80         call utilities_multiply
 21+  A397 54 5D            ld de,hl
 22+  A399 21 EC 82         ld hl,screen_buffer
 23+  A39C 19               add hl,de                   ; add the offset
 24+  A39D ED 73 11 A4      ld (screen_buffertoscreen1+1),sp ; this is some self-modifying code; stores the stack pointer in an ld sp,nn instruction at the end
 25+  A3A1 D9               exx
 26+  A3A2 21 50 40         ld hl,16384+80              ; where the actual screen is, but as we're using the stack it's the right hand side of the buffer (16+32+32)
 27+  A3A5              screen_buffertoscreen0:
 28+  A3A5 D9               exx                         ; hl is now buffer
 29+  A3A6 23               inc hl
 30+  A3A7 23               inc hl                      ; move hl forward 2 to skip first two blocks
 31+  A3A8 F9               ld sp,hl                    ; do first fourteen for left hand side, sp pointing at buffer
 32+  A3A9 F1               pop af
 33+  A3AA C1               pop bc
 34+  A3AB D1               pop de
 35+  A3AC DD E1            pop ix
 36+  A3AE D9               exx                         ; hl is now screen
 37+  A3AF 08               ex af,af'
 38+  A3B0 F1               pop af
 39+  A3B1 C1               pop bc
 40+  A3B2 D1               pop de
 41+  A3B3 F9               ld sp,hl                    ; sp pointing at screen
 42+  A3B4 D5               push de
 43+  A3B5 C5               push bc
 44+  A3B6 F5               push af
 45+  A3B7 08               ex af,af'
 46+  A3B8 D9               exx                         ; hl is now buffer
 47+  A3B9 DD E5            push ix
 48+  A3BB D5               push de
 49+  A3BC C5               push bc
 50+  A3BD F5               push af
 51+  A3BE 1E 0E            ld e,14                    ; do another fourteen for right hand side
 52+  A3C0 16 00            ld d,0
 53+  A3C2 19               add hl,de
 54+  A3C3 F9               ld sp,hl                    ; sp pointing at buffer
 55+  A3C4 F1               pop af
 56+  A3C5 C1               pop bc
 57+  A3C6 D1               pop de
 58+  A3C7 DD E1            pop ix
 59+  A3C9                  ;pop ix
 60+  A3C9 D9               exx                         ; hl is now screen
 61+  A3CA 08               ex af,af'
 62+  A3CB 1E 0E            ld e,14
 63+  A3CD 16 00            ld d,0
 64+  A3CF 19               add hl,de
 65+  A3D0 F1               pop af
 66+  A3D1 C1               pop bc
 67+  A3D2 D1               pop de
 68+  A3D3                  ;pop iy
 69+  A3D3 F9               ld sp,hl                    ; sp pointing at screen
 70+  A3D4                  ;push iy
 71+  A3D4 D5               push de
 72+  A3D5 C5               push bc
 73+  A3D6 F5               push af
 74+  A3D7 08               ex af,af'
 75+  A3D8 D9               exx                         ; hl is now buffer
 76+  A3D9 DD E5            push ix
 77+  A3DB D5               push de
 78+  A3DC C5               push bc
 79+  A3DD F5               push af
 80+  A3DE 1E 10            ld e,16
 81+  A3E0 16 00            ld d,0
 82+  A3E2 19               add hl,de
 83+  A3E3 D9               exx                         ; hl is now screen
 84+  A3E4 1E 0E            ld e,14
 85+  A3E6 16 00            ld d,0
 86+  A3E8 ED 52            sbc hl,de
 87+  A3EA 24               inc h
 88+  A3EB 7C               ld a,h
 89+  A3EC E6 07            and 0x07                    ; check if this is multiple of 8, if so, end of cell line
 90+  A3EE C2 A5 A3         jp nz,screen_buffertoscreen0 ; next line in cell
 91+  A3F1 7C               ld a,h
 92+  A3F2 D6 08            sub 8
 93+  A3F4 67               ld h,a
 94+  A3F5                                              ; check h for the bottom segment
 95+  A3F5 FE 50            cp 80                       ; 80 is the bottom segment
 96+  A3F7 C2 00 A4         jp nz, screen_buffertoscreen2 ; no need to check if not
 97+  A3FA 7D               ld a,l                      ; check if a is 144
 98+  A3FB FE D0            cp 208                      ; means we're at the bottom row which we leave blank for high score_colours
 99+  A3FD CA 10 A4         jp z,screen_buffertoscreen1 ; if so, end
100+  A400              screen_buffertoscreen2:
101+  A400 7D               ld a,l
102+  A401 C6 20            add a,32
103+  A403 6F               ld l,a
104+  A404 D2 A5 A3         jp nc,screen_buffertoscreen0
105+  A407 7C               ld a,h
106+  A408 C6 08            add a,8
107+  A40A 67               ld h,a
108+  A40B FE 58            cp 0x58                     ; 88 in dec
109+  A40D C2 A5 A3         jp nz,screen_buffertoscreen0
110+  A410              screen_buffertoscreen1:
111+  A410 31 00 00         ld sp,0
112+  A413 D9               exx
113+  A414 CD 18 A4         call screen_buffertoattrs
114+  A417 C9               ret
115+  A418
116+  A418              screen_buffertoattrs:
117+  A418 3A 8C A3         ld a,(screen_offset)            ; get the screen offset in rows, so want *32
118+  A41B 11 20 00         ld de,32
119+  A41E CD 21 80         call utilities_multiply
120+  A421 54 5D            ld de,hl
121+  A423 21 EC 9F         ld hl,screen_attr_buffer
122+  A426 19               add hl,de                       ; add the offset
123+  A427 11 40 58         ld de,22528+64                  ; add 32x2 to the attr memory address to account for the top two rows
124+  A42A 01 A0 02         ld bc,672
125+  A42D ED B0            ldir
126+  A42F C9               ret
127+  A430
128+  A430              screen_setscorecolours:
129+  A430 21 BC AC         ld hl,score_colours
130+  A433 11 00 58         ld de,22528                     ; attrs here
131+  A436 01 40 00         ld bc,64
132+  A439 ED B0            ldir
133+  A43B C9               ret
134+  A43C
135+  A43C              screen_sethighscorecolours:
136+  A43C 21 FC AC         ld hl,high_score_colours
137+  A43F 11 E0 5A         ld de,22528+736                 ; attrs here
138+  A442 01 20 00         ld bc,32
139+  A445 ED B0            ldir
140+  A447 C9               ret
141+  A448
142+  A448              ; Draw the screen
143+  A448              ; Inputs:
144+  A448              ; none
145+  A448              ; Notes:
146+  A448              ; The value held at screen_offset tells the screen how many rows to scroll down. Set to five to bottom out.
147+  A448              screen_draw:
148+  A448                  ;call clear_screen
149+  A448 0E 00            ld c,0                      ; horiz
150+  A44A 06 00            ld b,0                      ; vert, 0 at top
151+  A44C DD 21 7E A7      ld ix,level01               ; point ix at level data
152+  A450 FD 21 EC 9F      ld iy,screen_attr_buffer    ; point iy at attr data
153+  A454              screen_draw0:
154+  A454 DD 7E 00         ld a,(ix)                   ; load the block number
155+  A457 C5               push bc                     ; store bc, contains loop count
156+  A458 CD 96 A5         call screen_getattr         ; get the memory location for this cell's attr into hl
157+  A45B 7E               ld a,(hl)                   ; get the attr value at the address
158+  A45C FD 77 00         ld (iy),a                   ; load the attr into memory
159+  A45F DD 7E 00         ld a,(ix)                   ; load the block number
160+  A462 CD 8B A5         call screen_getblock        ; get the block data into hl
161+  A465 CD 71 A5         call screen_showchar        ; show this character here
162+  A468 C1               pop bc                      ; get the loop counter back
163+  A469 DD 23            inc ix                      ; increment level location
164+  A46B FD 23            inc iy                      ; increment attr location
165+  A46D 0C               inc c                       ; increment horiz
166+  A46E 79               ld a,c
167+  A46F FE 20            cp 32                       ; check if horiz has reach edge of screen
168+  A471 C2 54 A4         jp nz,screen_draw0          ; if not, loop
169+  A474 0E 00            ld c,0                      ; if so, reset horiz
170+  A476 04               inc b                       ; increment vertical
171+  A477 78               ld a,b
172+  A478 FE 1D            cp 29                       ; check if at bottom
173+  A47A C2 54 A4         jp nz,screen_draw0          ; if not, loop
174+  A47D 21 8D A3         ld hl, screen_tmp
175+  A480 36 09            ld (hl),9                   ; load the block number into memory
176+  A482 DD 21 1E AB      ld ix,level01rocks          ; rock memory
177+  A486 CD DF A4         call screen_initobjects     ; draw rocks
178+  A489 21 8D A3         ld hl, screen_tmp
179+  A48C 36 0C            ld (hl),12                  ; load the block number into memory
180+  A48E DD 21 1E AC      ld ix,level01missiles       ; missile memory
181+  A492 CD DF A4         call screen_initobjects     ; draw missiles
182+  A495 21 8D A3         ld hl, screen_tmp
183+  A498 36 08            ld (hl),08                  ; load the block number into memory
184+  A49A DD 21 97 AC      ld ix,level01diamonds       ; diamond memory
185+  A49E CD DF A4         call screen_initobjects     ; draw diamonds
186+  A4A1 21 8D A3         ld hl, screen_tmp
187+  A4A4 36 0E            ld (hl),14                  ; load the block number into memory
188+  A4A6 DD 21 A7 AC      ld ix,level01gems           ; gems memory
189+  A4AA CD DF A4         call screen_initobjects     ; draw gems
190+  A4AD CD B1 A4         call screen_setuptext       ; draws text on the screen
191+  A4B0 C9               ret
192+  A4B1
193+  A4B1              ;
194+  A4B1              ; Sets up text on the screen
195+  A4B1              ;
196+  A4B1              screen_setuptext:
197+  A4B1 CD B1 B5         call scores_showtable
198+  A4B4 CD 3C A4         call screen_sethighscorecolours
199+  A4B7 21 4E 80         ld hl, string_score1
200+  A4BA CD A4 82         call string_print
201+  A4BD 21 57 80         ld hl, string_scorenumbers1
202+  A4C0 CD A4 82         call string_print
203+  A4C3 21 60 80         ld hl, string_company
204+  A4C6 CD A4 82         call string_print
205+  A4C9 21 75 80         ld hl, string_score2
206+  A4CC CD A4 82         call string_print
207+  A4CF 21 7E 80         ld hl, string_scorenumbers2
208+  A4D2 CD A4 82         call string_print
209+  A4D5 21 6A 80         ld hl, string_credits
210+  A4D8 CD A4 82         call string_print
211+  A4DB CD 30 A4         call screen_setscorecolours
212+  A4DE C9               ret
213+  A4DF              ;
214+  A4DF              ; Draw initial object positions
215+  A4DF              ; Inputs:
216+  A4DF              ; ix - memory location of objects
217+  A4DF              ; a - graphic
218+  A4DF              screen_initobjects:
219+  A4DF DD 4E 00         ld c,(ix)                   ; get the horiz coord
220+  A4E2 79               ld a,c
221+  A4E3 FE FF            cp 255
222+  A4E5 CA 0E A5         jp z,screen_initobjects2
223+  A4E8 DD 23            inc ix                      ; move to next
224+  A4EA DD 46 00         ld b,(ix)                   ; get the vert coord
225+  A4ED DD 23            inc ix
226+  A4EF CD 20 A5         call screen_getcellattradress ; get the memory address of b,c attr into de
227+  A4F2 D5               push de
228+  A4F3 3A 8D A3         ld a,(screen_tmp)                  ; get the block number back
229+  A4F6 CD 96 A5         call screen_getattr         ; get the memory location for this cell's attr into hl
230+  A4F9 D1               pop de
231+  A4FA 7E               ld a,(hl)                   ; get the attr value at the address
232+  A4FB 12               ld (de),a                   ; load the attr into memory
233+  A4FC 3A 8D A3         ld a,(screen_tmp)                  ; get the block number back
234+  A4FF CD 8B A5         call screen_getblock        ; get the block data into hl
235+  A502 CD 71 A5         call screen_showchar        ; show this character here
236+  A505
237+  A505              screen_initobjects1:
238+  A505 DD 23            inc ix                      ; move past state
239+  A507 DD 23            inc ix
240+  A509 DD 23            inc ix                      ; move past mem
241+  A50B C3 DF A4         jp screen_initobjects
242+  A50E              screen_initobjects2:
243+  A50E C9               ret
244+  A50F
245+  A50F
246+  A50F              ;
247+  A50F              ; Return character cell address offset of block at (b, c) ready for addition to screen  memory.
248+  A50F              ; Inputs:
249+  A50F              ; bc: coords
250+  A50F              ; Outputs:
251+  A50F              ; de: memory location
252+  A50F              ;
253+  A50F              screen_getcelladdress:
254+  A50F 78               ld a,b      ; vertical position.
255+  A510 E6 18            and 24      ; which segment, 0, 1 or 2?
256+  A512 C6 40            add a,64    ; 64*256 = 16384, Spectrum's screen memory.
257+  A514 57               ld d,a      ; this is our high byte.
258+  A515 78               ld a,b      ; what was that vertical position again?
259+  A516 E6 07            and 7       ; which row within segment?
260+  A518 0F               rrca        ; multiply row by 32.
261+  A519 0F               rrca
262+  A51A 0F               rrca
263+  A51B 5F               ld e,a      ; low byte.
264+  A51C 79               ld a,c      ; add on y coordinate.
265+  A51D 83               add a,e     ; mix with low byte.
266+  A51E 5F               ld e,a      ; address of screen position in de.
267+  A51F C9               ret
268+  A520
269+  A520              ;
270+  A520              ; Calculate buffer address of attribute for character at (b, c).
271+  A520              ; Inputs:
272+  A520              ; bc: coords
273+  A520              ; Outputs:
274+  A520              ; de: memory location
275+  A520              ;
276+  A520              screen_getcellattradress:
277+  A520 11 EC 9F         ld de,screen_attr_buffer ; memory is at base + horiz (c) + vert*32 (b)
278+  A523 69               ld l,c      ; x position.
279+  A524 26 00            ld h,0      ; 0 h
280+  A526 19               add hl,de
281+  A527 54 5D            ld de,hl    ; horiz done
282+  A529 78               ld a,b      ; do vert
283+  A52A D5               push de
284+  A52B C5               push bc
285+  A52C 11 20 00         ld de,32
286+  A52F CD 21 80         call utilities_multiply
287+  A532 C1               pop bc
288+  A533 D1               pop de
289+  A534 19               add hl,de
290+  A535 54 5D            ld de,hl    ; vert done
291+  A537 C9               ret
292+  A538
293+  A538              ;
294+  A538              ; Calculate buffer address of attribute for character at (b, c).
295+  A538              ; Inputs:
296+  A538              ; bc: coords
297+  A538              ; Outputs:
298+  A538              ; de: memory location
299+  A538              ;
300+  A538              screen_getscreenattradress:
301+  A538 11 00 58         ld de,22528 ; memory is at base + horiz (c) + vert*32 (b)
302+  A53B 69               ld l,c      ; x position.
303+  A53C 26 00            ld h,0      ; 0 h
304+  A53E 19               add hl,de
305+  A53F 54 5D            ld de,hl    ; horiz done
306+  A541 78               ld a,b      ; do vert
307+  A542 D5               push de
308+  A543 C5               push bc
309+  A544 11 20 00         ld de,32
310+  A547 CD 21 80         call utilities_multiply
311+  A54A C1               pop bc
312+  A54B D1               pop de
313+  A54C 19               add hl,de
314+  A54D 54 5D            ld de,hl    ; vert done
315+  A54F C9               ret
316+  A550
317+  A550              ;
318+  A550              ; Gets the attr memory location for a screen coord
319+  A550              ; Will overwrite bc
320+  A550              ; Inputs:
321+  A550              ; bc - screen coords
322+  A550              ; Outputs:
323+  A550              ; de - memory location
324+  A550              ; bc - character coords
325+  A550              ;
326+  A550              screen_getattraddressfromscreencoords:
327+  A550 78               ld a,b                          ; get the player block coords of current block
328+  A551 E6 F8            and 248                         ; find closest multiple of eight
329+  A553 0F               rrca
330+  A554 0F               rrca
331+  A555 0F               rrca                ; divide by 8
332+  A556 47               ld b,a
333+  A557 79               ld a,c
334+  A558 48               ld c,b                         ; swap b and c
335+  A559 E6 F8            and 248
336+  A55B 0F               rrca
337+  A55C 0F               rrca
338+  A55D 0F               rrca                ; divide by 8
339+  A55E 47               ld b,a
340+  A55F CD 20 A5         call screen_getcellattradress   ; work out memory location of current block attributes, memory in de
341+  A562 C9               ret
342+  A563
343+  A563              ;
344+  A563              ; Get buffer address for a character at b,c - b vert
345+  A563              ; Buffer memory is stored as sequential block
346+  A563              ; Char at 0,0 is stored 0,32,64...; 0,1 is stored at 1,33,65
347+  A563              ; Inputs:
348+  A563              ; bc - coords
349+  A563              ; Outputs:
350+  A563              ; de - memory location of first byte
351+  A563              screen_getbufferaddress:
352+  A563 21 EC 82         ld hl, screen_buffer    ; first get screen buffer start
353+  A566 50               ld d,b                  ; then work out vertical offset
354+  A567 1E 00            ld e,0                  ; mult by 256, low byte becomes high byte, de now holds result
355+  A569 19               add hl,de               ; add to base
356+  A56A 59               ld e,c                  ; then add horizontal offset (c)
357+  A56B 16 00            ld d,0
358+  A56D 19               add hl,de               ; add to base
359+  A56E 54 5D            ld de,hl
360+  A570 C9               ret
361+  A571
362+  A571              ;
363+  A571              ; Display character hl at (b, c) to buffer.
364+  A571              ; Stored sequentially
365+  A571              ; Inputs:
366+  A571              ; hl: block address
367+  A571              ; bc: coords
368+  A571              ;
369+  A571              screen_showchar:
370+  A571 3E 00            ld a,0
371+  A573 E5               push hl
372+  A574 CD 63 A5         call screen_getbufferaddress ; get the current screen buffer pointer
373+  A577 E1               pop hl
374+  A578 06 08            ld b,8              ; number of pixels high.
375+  A57A              screen_showchar0:
376+  A57A 7E               ld a,(hl)           ; source graphic.
377+  A57B 12               ld (de),a           ; transfer to screen.
378+  A57C 23               inc hl              ; next piece of data.
379+  A57D E5               push hl             ; store hl
380+  A57E 62 6B            ld hl,de            ; put de in hl
381+  A580 1E 20            ld e,32            ; inc memory by 32, so load 32 into de
382+  A582 16 00            ld d,0
383+  A584 19               add hl,de              ; add de to hl
384+  A585 54 5D            ld de,hl            ; load back to de
385+  A587 E1               pop hl              ; restore hl
386+  A588
387+  A588 10 F0            djnz screen_showchar0 ; repeat
388+  A58A C9               ret
389+  A58B
390+  A58B
391+  A58B              ;
392+  A58B              ; Get cell graphic.
393+  A58B              ; Inputs:
394+  A58B              ; a: block
395+  A58B              ; Outputs:
396+  A58B              ; hl: memory
397+  A58B              ;
398+  A58B              screen_getblock:
399+  A58B 07               rlca                        ; multiply block number by eight.
400+  A58C 07               rlca
401+  A58D 07               rlca
402+  A58E 5F               ld e,a                      ; displacement to graphic address.
403+  A58F 16 00            ld d,0                      ; no high byte.
404+  A591 21 1C AD         ld hl,sprites               ; address of character blocks.
405+  A594 19               add hl,de                   ; point to block.
406+  A595 C9               ret
407+  A596
408+  A596              ;
409+  A596              ; Get cell attribute.
410+  A596              ; Inputs:
411+  A596              ; a: block
412+  A596              ; Outputs:
413+  A596              ; hl: memory
414+  A596              ;
415+  A596              screen_getattr:
416+  A596 5F               ld e,a                      ; displacement to attribute address.
417+  A597 16 00            ld d,0                      ; no high byte.
418+  A599 21 94 AD         ld hl,sprite_attrs          ; address of block attributes.
419+  A59C 19               add hl,de                   ; point to attribute.
420+  A59D C9               ret
421+  A59E
# file closed: screen/screen.asm
 24   A59E                  include "screen\sprites.asm"
# file opened: screen/sprites.asm
  1+  A59E              ;
  2+  A59E              ; This is the sprite routine and expects coordinates in (c ,b) form,
  3+  A59E              ; where c is the vertical coord from the top of the screen (0-176), and
  4+  A59E              ; b is the horizontal coord from the left of the screen (0 to 240).
  5+  A59E              ; Sprite data is stored as you'd expect in its unshifted form as this
  6+  A59E              ; routine takes care of all the shifting itself. This means that sprite
  7+  A59E              ; handling isn't particularly fast but the graphics only take 1/8th of the
  8+  A59E              ; space they would require in pre-shifted form.
  9+  A59E              ; Inputs:
 10+  A59E              ; hl - sprite data
 11+  A59E              ; bc - screen coords
 12+  A59E              ;
 13+  A59E              sprites_drawsprite7:
 14+  A59E EE 07            xor 7               ; complement last 3 bits.
 15+  A5A0 3C               inc a               ; add one for luck!
 16+  A5A1              sprites_drawsprite3:
 17+  A5A1 CB 11            rl c                ; ...into middle byte...
 18+  A5A3 CB 12            rl d                ; ...and finally into left character cell.
 19+  A5A5 3D               dec a               ; count shifts we've done.
 20+  A5A6 20 F9            jr nz,sprites_drawsprite3 ; return until all shifts complete.
 21+  A5A8                                      ; Line of sprite image is now in e + c + d, we need it in form c + d + e.
 22+  A5A8 79               ld a,c              ; left edge of image is currently in e.
 23+  A5A9 4A               ld c,d              ; put right edge there instead.
 24+  A5AA 57               ld d,a              ; and the left edge back into c.
 25+  A5AB 18 25            jr sprites_drawsprite0   ; we've done the switch so transfer to screen.
 26+  A5AD              sprites_drawsprite:
 27+  A5AD ED 43 12 A6      ld (dispx),bc       ; store coords in dispx for now.
 28+  A5B1 E5               push hl
 29+  A5B2 CD F0 A5         call sprites_scadd  ; calculate screen address.
 30+  A5B5 E1               pop hl
 31+  A5B6 3E 08            ld a,8              ; height of sprite in pixels.
 32+  A5B8              sprites_drawsprite1:
 33+  A5B8 08               ex af,af'           ; store loop counter.
 34+  A5B9 D5               push de             ; store screen address.
 35+  A5BA 4E               ld c,(hl)           ; first sprite graphic.
 36+  A5BB 23               inc hl              ; increment poiinter to sprite data.
 37+  A5BC 22 14 A6         ld (sprtmp),hl      ; store it for later.
 38+  A5BF 16 00            ld d,0              ; blank right byte for now.
 39+  A5C1 78               ld a,b              ; b holds y position.
 40+  A5C2 E6 07            and 7               ; how are we straddling character cells?
 41+  A5C4 28 0C            jr z,sprites_drawsprite0 ; we're not straddling them, don't bother shifting.
 42+  A5C6 FE 05            cp 5                ; 5 or more right shifts needed?
 43+  A5C8 30 D4            jr nc,sprites_drawsprite7 ; yes, shift from left as it's quicker.
 44+  A5CA A7               and a               ; oops, carry flag is set so clear it.
 45+  A5CB              sprites_drawsprite2:
 46+  A5CB CB 19            rr c                ; rotate left byte right...
 47+  A5CD CB 1A            rr d                ; ...into right byte.
 48+  A5CF 3D               dec a               ; one less shift to do.
 49+  A5D0 20 F9            jr nz,sprites_drawsprite2 ; return until all shifts complete.
 50+  A5D2              sprites_drawsprite0:
 51+  A5D2 E1               pop hl              ; pop screen address from stack.
 52+  A5D3 7E               ld a,(hl)           ; what's there already.
 53+  A5D4 A9               xor c               ; merge in image data.
 54+  A5D5 77               ld (hl),a           ; place onto screen.
 55+  A5D6 23               inc hl
 56+  A5D7 7E               ld a,(hl)           ; what's already there.
 57+  A5D8 AA               xor d               ; right edge of sprite image data.
 58+  A5D9 77               ld (hl),a           ; plonk it on screen.
 59+  A5DA 3A 12 A6         ld a,(dispx)        ; vertical coordinate.
 60+  A5DD 3C               inc a               ; next line down.
 61+  A5DE 32 12 A6         ld (dispx),a        ; store new position.
 62+  A5E1 2B               dec hl
 63+  A5E2 11 20 00         ld de,32            ; add 32 to get to the next row
 64+  A5E5 19               add hl,de           ; add 32
 65+  A5E6              sprites_drawsprite6:
 66+  A5E6 EB               ex de,hl            ; screen address in de.
 67+  A5E7 2A 14 A6         ld hl,(sprtmp)      ; restore graphic address.
 68+  A5EA 08               ex af,af'           ; restore loop counter.
 69+  A5EB 3D               dec a               ; decrement it.
 70+  A5EC C2 B8 A5         jp nz,sprites_drawsprite1 ; not reached bottom of sprite yet to repeat.
 71+  A5EF C9               ret                 ; job done.
 72+  A5F0
 73+  A5F0              ;
 74+  A5F0              ; This routine returns a buffer address for (c, b) in de (c vert).
 75+  A5F0              ; For example: 0,0 will be at memory offset 0
 76+  A5F0              ; 1,0 (1 down) will be at memory offset 1
 77+  A5F0              ; 0,7 will be at memory offset 0
 78+  A5F0              ; 9,1 will be at memory offset 8+1
 79+  A5F0              ; 8,0 will be at memory offset 256
 80+  A5F0              ; 9,0 will be at memory offset 257
 81+  A5F0              ; Outputs:
 82+  A5F0              ; de - coords
 83+  A5F0              ;
 84+  A5F0              sprites_scadd:
 85+  A5F0 79               ld a,c               ; calculate vertical offset
 86+  A5F1 E6 F8            and 248             ;  to get nearest multiple of 8
 87+  A5F3 0F               rrca
 88+  A5F4 0F               rrca
 89+  A5F5 0F               rrca                ; divide by 8
 90+  A5F6 67               ld h,a
 91+  A5F7 78               ld a,b               ; calculate horizontal offset
 92+  A5F8 E6 F8            and 248             ;  to get nearest multiple of 8
 93+  A5FA 0F               rrca
 94+  A5FB 0F               rrca
 95+  A5FC 0F               rrca                ; divide by 8
 96+  A5FD 6F               ld l,a
 97+  A5FE C5               push bc             ; store the screen coords
 98+  A5FF 44 4D            ld bc,hl            ; load bc with the character coords
 99+  A601 CD 63 A5         call screen_getbufferaddress
100+  A604 C1               pop bc              ; get back screen coords, de is now memory of character
101+  A605 79               ld a,c              ; now add the vertical within the cell
102+  A606 E6 07            and 7
103+  A608 0F               rrca                ; multiply by 32.
104+  A609 0F               rrca
105+  A60A 0F               rrca
106+  A60B 6F               ld l,a
107+  A60C 26 00            ld h,0
108+  A60E 19               add hl,de
109+  A60F 54 5D            ld de,hl
110+  A611 C9               ret
111+  A612
112+  A612 00           dispx   defb 0           ; general-use coordinates.
113+  A613 00           dispy   defb 0
114+  A614 00           sprtmp  defb 0           ; sprite temporary address.
115+  A615
# file closed: screen/sprites.asm
 25   A615                  include "screen\titlescreen.asm"
# file opened: screen/titlescreen.asm
  1+  A615              ;
  2+  A615              ; Draws the title screen
  3+  A615              ;
  4+  A615              titlescreen_show:
  5+  A615 CD 8C A6         call titlescreen_init
  6+  A618 CD 36 A6         call titlescreen_drawtitle
  7+  A61B 3E FA            ld a,250                              ; wait for 200 frames
  8+  A61D CD 39 80         call utilities_waitforkey_forframes   ; wait for keypress
  9+  A620 7B               ld a,e
 10+  A621 FE 01            cp 1                                  ; was anything pressed?
 11+  A623 C8               ret z                                 ; end titlescreen if so
 12+  A624
 13+  A624 CD A2 A6         call titlescreen_alt_init             ; otherwise, draw alt screen
 14+  A627 CD 52 A6         call titlescreen_alt_drawtitle
 15+  A62A 3E FA            ld a,250                              ; wait for 200 frames
 16+  A62C CD 39 80         call utilities_waitforkey_forframes   ; wait for keypress
 17+  A62F 7B               ld a,e
 18+  A630 FE 01            cp 1                                  ; was anything pressed?
 19+  A632 C2 15 A6         jp nz,titlescreen_show                ; start again if not
 20+  A635 C9               ret
 21+  A636
 22+  A636              ;
 23+  A636              ; Draws the iconic logo
 24+  A636              ;
 25+  A636              titlescreen_drawtitle:
 26+  A636 06 66            ld b,102              ; number of points
 27+  A638 DD 21 B2 A6      ld ix,titlescreen_logo_data
 28+  A63C              titlescreen_drawtitle0:
 29+  A63C C5               push bc
 30+  A63D DD 4E 00         ld c,(ix)                   ; got horiz
 31+  A640 DD 23            inc ix
 32+  A642 DD 46 00         ld b,(ix)                   ; got vert
 33+  A645 DD 23            inc ix
 34+  A647 CD 38 A5         call screen_getscreenattradress ; memory in de
 35+  A64A 13               inc de                      ; slide one to the right, since I'm too lazy to change the data
 36+  A64B 3E 13            ld a,19
 37+  A64D 12               ld (de),a
 38+  A64E C1               pop bc
 39+  A64F 10 EB            djnz titlescreen_drawtitle0 ; loop if we're not at the end
 40+  A651 C9               ret
 41+  A652
 42+  A652              ;
 43+  A652              ; Draws the alternate title screen
 44+  A652              ;
 45+  A652              titlescreen_alt_drawtitle:
 46+  A652 21 A1 80         ld hl,string_alttitlescreen_1
 47+  A655 CD A4 82         call string_print
 48+  A658 21 AD 80         ld hl,string_alttitlescreen_2
 49+  A65B CD A4 82         call string_print
 50+  A65E 21 A8 81         ld hl,string_alttitlescreen_3
 51+  A661 CD A4 82         call string_print
 52+  A664 3E 43            ld a,67
 53+  A666 11 00 58         ld de,22528                         ; top row attrs here
 54+  A669 CD 85 A6         call titlescreen_alt_setcolours
 55+  A66C 3E 46            ld a,70
 56+  A66E 11 A0 59         ld de,22528+416                     ; 13th row attrs here
 57+  A671 CD 85 A6         call titlescreen_alt_setcolours
 58+  A674 3E 43            ld a,67
 59+  A676 11 20 5A         ld de,22528+544                         ; 17th row attrs here
 60+  A679 CD 85 A6         call titlescreen_alt_setcolours
 61+  A67C 3E 42            ld a,66
 62+  A67E 11 A0 5A         ld de,22528+672                         ; 21st row attrs here
 63+  A681 CD 85 A6         call titlescreen_alt_setcolours
 64+  A684 C9               ret
 65+  A685
 66+  A685              titlescreen_alt_setcolours:
 67+  A685 06 20            ld b,32
 68+  A687              titlescreen_alt_setcolours0:
 69+  A687 12               ld (de),a
 70+  A688 13               inc de
 71+  A689 10 FC            djnz titlescreen_alt_setcolours0
 72+  A68B C9               ret
 73+  A68C
 74+  A68C              ;
 75+  A68C              ; Initialises the screen
 76+  A68C              ;
 77+  A68C              titlescreen_init:
 78+  A68C              ; We want a black screen.
 79+  A68C CD 6B 0D         call $0D6B
 80+  A68F 3E 0B            ld a,11             ; magenta ink (7) on blue paper (0),
 81+  A691                                      ; bright (64).
 82+  A691 32 8D 5C         ld (23693),a        ; set our screen colours.
 83+  A694 3E 01            ld a,1              ; 2 is the code for red.
 84+  A696 D3 FE            out (254),a         ; write to port 254.
 85+  A698 CD AF 0D         call 3503           ; ROM routine - clears screen, opens chan 2.
 86+  A69B
 87+  A69B 21 87 80         ld hl,string_titlescreen_copyright
 88+  A69E CD A4 82         call string_print
 89+  A6A1
 90+  A6A1 C9               ret
 91+  A6A2
 92+  A6A2              ;
 93+  A6A2              ; Initialises the screen
 94+  A6A2              ;
 95+  A6A2              titlescreen_alt_init:
 96+  A6A2              ; We want a black screen.
 97+  A6A2 CD 6B 0D         call $0D6B
 98+  A6A5 3E 47            ld a,71             ; white ink (7) on black paper (0),
 99+  A6A7                                      ; bright (64).
100+  A6A7 32 8D 5C         ld (23693),a        ; set our screen colours.
101+  A6AA 3E 00            ld a,0              ; 2 is the code for red.
102+  A6AC D3 FE            out (254),a         ; write to port 254.
103+  A6AE CD AF 0D         call 3503           ; ROM routine - clears screen, opens chan 2.
104+  A6B1
105+  A6B1 C9               ret
106+  A6B2
107+  A6B2              ;
108+  A6B2              ; Horiz, vert
109+  A6B2              ;
110+  A6B2              titlescreen_logo_data:
111+  A6B2 08 00 09 00      defb 8,0,9,0,10,0,12,0,15,0,17,0,18,0,19,0
111+  A6B6 0A 00 0C 00
111+  A6BA 0F 00 11 00
111+  A6BE 12 00 13 00
112+  A6C2 09 01 0C 01      defb 9,1,12,1,15,1,17,1
112+  A6C6 0F 01 11 01
113+  A6CA 09 02 0C 02      defb 9,2,12,2,13,2,14,2,15,2,17,2,18,2,19,2
113+  A6CE 0D 02 0E 02
113+  A6D2 0F 02 11 02
113+  A6D6 12 02 13 02
114+  A6DA 09 03 0C 03      defb 9,3,12,3,15,3,17,3
114+  A6DE 0F 03 11 03
115+  A6E2 09 04 0C 04      defb 9,4,12,4,15,4,17,4,18,4,19,4
115+  A6E6 0F 04 11 04
115+  A6EA 12 04 13 04
116+  A6EE 00 06 01 06      defb 0,6,1,6,2,6,3,6,4,6,5,6,6,6,7,6,8,6,9,6,10,6,11,6
116+  A6F2 02 06 03 06
116+  A6F6 04 06 05 06
116+  A6FA 06 06 07 06
116+  A6FE 08 06 09 06
116+  A702 0A 06 0B 06
117+  A706 10 06 11 06      defb 16,6,17,6,18,6,19,6,20,6,21,6,22,6,23,6,24,6,25,6,26,6,27,6
117+  A70A 12 06 13 06
117+  A70E 14 06 15 06
117+  A712 16 06 17 06
117+  A716 18 06 19 06
117+  A71A 1A 06 1B 06
118+  A71E 02 07 02 08      defb 2,7,2,8,2,9,2,10,2,11,2,12,2,13,2,14,2,15,2,16,2,17,2,18,2,19,2,20
118+  A722 02 09 02 0A
118+  A726 02 0B 02 0C
118+  A72A 02 0D 02 0E
118+  A72E 02 0F 02 10
118+  A732 02 11 02 12
118+  A736 02 13 02 14
119+  A73A 19 07 19 08      defb 25,7,25,8,25,9,25,10,25,11,25,12,25,13,25,14,25,15,25,16,25,17,25,18,25,19,25,20
119+  A73E 19 09 19 0A
119+  A742 19 0B 19 0C
119+  A746 19 0D 19 0E
119+  A74A 19 0F 19 10
119+  A74E 19 11 19 12
119+  A752 19 13 19 14
120+  A756 03 0B 04 0B      defb 3,11,4,11,5,11,6,11,7,11,8,11,9,11,10,11,11,11
120+  A75A 05 0B 06 0B
120+  A75E 07 0B 08 0B
120+  A762 09 0B 0A 0B
120+  A766 0B 0B
121+  A768 0B 07 0B 08      defb 11,7,11,8,11,9,11,10
121+  A76C 0B 09 0B 0A
122+  A770 10 0D 10 0F      defb 16,13,16,15,16,16,16,17,16,18,16,19,16,20
122+  A774 10 10 10 11
122+  A778 10 12 10 13
122+  A77C 10 14
123+  A77E
# file closed: screen/titlescreen.asm
 26   A77E
 27   A77E                  include "leveldata\level01.asm"
# file opened: leveldata/level01.asm
  1+  A77E              ; ###############################################################
  2+  A77E              ; Data for level 1
  3+  A77E              ; ###############################################################
  4+  A77E              level01:
  5+  A77E
  6+  A77E 00 00 05 05      defb 00,00,05,05,05,05,05,05,05,05,05,05,05,05,02,01,01,01,03,05,05,05,05,05,05,05,05,05,05,05,00,00
  6+  A782 05 05 05 05
  6+  A786 05 05 05 05
  6+  A78A 05 05 02 01
  6+  A78E 01 01 03 05
  6+  A792 05 05 05 05
  6+  A796 05 05 05 05
  6+  A79A 05 05 00 00
  7+  A79E 00 00 05 05      defb 00,00,05,05,05,05,05,05,05,05,05,05,02,01,01,01,01,01,01,01,03,05,05,05,05,05,05,05,05,05,00,00
  7+  A7A2 05 05 05 05
  7+  A7A6 05 05 05 05
  7+  A7AA 02 01 01 01
  7+  A7AE 01 01 01 01
  7+  A7B2 03 05 05 05
  7+  A7B6 05 05 05 05
  7+  A7BA 05 05 00 00
  8+  A7BE 00 00 05 05      defb 00,00,05,05,05,05,05,05,05,05,02,01,01,01,01,01,01,01,01,01,01,01,03,05,13,13,13,13,13,13,00,00
  8+  A7C2 05 05 05 05
  8+  A7C6 05 05 02 01
  8+  A7CA 01 01 01 01
  8+  A7CE 01 01 01 01
  8+  A7D2 01 01 03 05
  8+  A7D6 0D 0D 0D 0D
  8+  A7DA 0D 0D 00 00
  9+  A7DE 00 00 01 01      defb 00,00,01,01,01,01,00,01,01,01,01,01,01,01,01,01,01,01,01,01,01,01,01,03,05,05,05,05,05,05,00,00
  9+  A7E2 01 01 00 01
  9+  A7E6 01 01 01 01
  9+  A7EA 01 01 01 01
  9+  A7EE 01 01 01 01
  9+  A7F2 01 01 01 03
  9+  A7F6 05 05 05 05
  9+  A7FA 05 05 00 00
 10+  A7FE 00 00 01 01      defb 00,00,01,01,04,04,04,04,04,04,01,01,01,01,01,01,01,01,01,01,01,01,01,01,01,01,01,01,00,01,00,00
 10+  A802 04 04 04 04
 10+  A806 04 04 01 01
 10+  A80A 01 01 01 01
 10+  A80E 01 01 01 01
 10+  A812 01 01 01 01
 10+  A816 01 01 01 01
 10+  A81A 00 01 00 00
 11+  A81E 00 00 01 04      defb 00,00,01,04,04,04,04,04,04,04,04,04,01,01,01,01,01,01,01,01,01,01,01,01,00,00,00,00,00,01,00,00
 11+  A822 04 04 04 04
 11+  A826 04 04 04 04
 11+  A82A 01 01 01 01
 11+  A82E 01 01 01 01
 11+  A832 01 01 01 01
 11+  A836 00 00 00 00
 11+  A83A 00 01 00 00
 12+  A83E 00 00 01 04      defb 00,00,01,04,04,01,01,01,01,01,04,04,04,04,01,01,01,01,01,01,01,00,00,00,00,01,01,01,01,01,00,00
 12+  A842 04 01 01 01
 12+  A846 01 01 04 04
 12+  A84A 04 04 01 01
 12+  A84E 01 01 01 01
 12+  A852 01 00 00 00
 12+  A856 00 01 01 01
 12+  A85A 01 01 00 00
 13+  A85E 00 00 01 04      defb 00,00,01,04,04,04,04,04,04,01,04,04,04,04,04,04,04,04,00,00,00,00,04,04,04,04,04,04,04,01,00,00
 13+  A862 04 04 04 04
 13+  A866 04 01 04 04
 13+  A86A 04 04 04 04
 13+  A86E 04 04 00 00
 13+  A872 00 00 04 04
 13+  A876 04 04 04 04
 13+  A87A 04 01 00 00
 14+  A87E 00 00 01 01      defb 00,00,01,01,01,04,01,01,01,01,04,04,04,04,04,04,04,04,00,04,04,04,04,04,04,04,04,04,04,01,00,00
 14+  A882 01 04 01 01
 14+  A886 01 01 04 04
 14+  A88A 04 04 04 04
 14+  A88E 04 04 00 04
 14+  A892 04 04 04 04
 14+  A896 04 04 04 04
 14+  A89A 04 01 00 00
 15+  A89E 00 00 01 00      defb 00,00,01,00,00,00,00,00,00,04,04,04,04,04,04,04,04,04,00,04,04,04,04,04,04,04,04,04,04,01,00,00
 15+  A8A2 00 00 00 00
 15+  A8A6 00 04 04 04
 15+  A8AA 04 04 04 04
 15+  A8AE 04 04 00 04
 15+  A8B2 04 04 04 04
 15+  A8B6 04 04 04 04
 15+  A8BA 04 01 00 00
 16+  A8BE 00 00 01 07      defb 00,00,01,07,07,07,07,07,07,01,04,04,04,04,04,04,04,04,00,04,04,04,04,04,04,04,04,04,04,01,00,00
 16+  A8C2 07 07 07 07
 16+  A8C6 07 01 04 04
 16+  A8CA 04 04 04 04
 16+  A8CE 04 04 00 04
 16+  A8D2 04 04 04 04
 16+  A8D6 04 04 04 04
 16+  A8DA 04 01 00 00
 17+  A8DE 00 00 01 00      defb 00,00,01,00,00,00,00,00,00,01,04,04,04,04,04,04,04,04,00,04,04,04,04,04,04,00,00,00,00,01,00,00
 17+  A8E2 00 00 00 00
 17+  A8E6 00 01 04 04
 17+  A8EA 04 04 04 04
 17+  A8EE 04 04 00 04
 17+  A8F2 04 04 04 04
 17+  A8F6 04 00 00 00
 17+  A8FA 00 01 00 00
 18+  A8FE 00 00 01 00      defb 00,00,01,00,00,00,00,00,00,01,04,04,04,04,04,04,04,04,00,04,04,04,04,04,04,00,04,04,00,01,00,00
 18+  A902 00 00 00 00
 18+  A906 00 01 04 04
 18+  A90A 04 04 04 04
 18+  A90E 04 04 00 04
 18+  A912 04 04 04 04
 18+  A916 04 00 04 04
 18+  A91A 00 01 00 00
 19+  A91E 00 00 01 06      defb 00,00,01,06,06,06,06,06,06,01,04,04,04,04,04,04,04,04,00,04,04,04,04,04,04,00,04,04,00,01,00,00
 19+  A922 06 06 06 06
 19+  A926 06 01 04 04
 19+  A92A 04 04 04 04
 19+  A92E 04 04 00 04
 19+  A932 04 04 04 04
 19+  A936 04 00 04 04
 19+  A93A 00 01 00 00
 20+  A93E 00 00 01 06      defb 00,00,01,06,06,06,06,06,06,01,04,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,04,04,00,01,00,00
 20+  A942 06 06 06 06
 20+  A946 06 01 04 00
 20+  A94A 00 00 00 00
 20+  A94E 00 00 00 00
 20+  A952 00 00 00 00
 20+  A956 00 00 04 04
 20+  A95A 00 01 00 00
 21+  A95E 00 00 01 06      defb 00,00,01,06,06,06,06,06,06,01,04,00,04,04,04,04,04,04,00,04,04,04,00,04,04,04,04,04,00,01,00,00
 21+  A962 06 06 06 06
 21+  A966 06 01 04 00
 21+  A96A 04 04 04 04
 21+  A96E 04 04 00 04
 21+  A972 04 04 00 04
 21+  A976 04 04 04 04
 21+  A97A 00 01 00 00
 22+  A97E 00 00 01 06      defb 00,00,01,06,06,06,06,06,06,01,04,00,04,04,04,04,04,04,00,04,04,04,00,04,04,04,04,04,00,01,00,00
 22+  A982 06 06 06 06
 22+  A986 06 01 04 00
 22+  A98A 04 04 04 04
 22+  A98E 04 04 00 04
 22+  A992 04 04 00 04
 22+  A996 04 04 04 04
 22+  A99A 00 01 00 00
 23+  A99E 00 00 01 01      defb 00,00,01,01,01,01,01,01,01,01,04,00,04,04,04,04,04,04,00,04,04,04,00,04,04,04,04,04,00,01,00,00
 23+  A9A2 01 01 01 01
 23+  A9A6 01 01 04 00
 23+  A9AA 04 04 04 04
 23+  A9AE 04 04 00 04
 23+  A9B2 04 04 00 04
 23+  A9B6 04 04 04 04
 23+  A9BA 00 01 00 00
 24+  A9BE 00 00 01 04      defb 00,00,01,04,04,04,04,04,04,04,04,00,04,04,04,04,04,04,00,04,04,04,00,00,00,00,04,04,04,01,00,00
 24+  A9C2 04 04 04 04
 24+  A9C6 04 04 04 00
 24+  A9CA 04 04 04 04
 24+  A9CE 04 04 00 04
 24+  A9D2 04 04 00 00
 24+  A9D6 00 00 04 04
 24+  A9DA 04 01 00 00
 25+  A9DE 00 00 01 04      defb 00,00,01,04,04,04,00,00,00,00,00,00,04,04,04,04,04,04,00,04,04,04,04,04,04,00,04,04,04,01,00,00
 25+  A9E2 04 04 00 00
 25+  A9E6 00 00 00 00
 25+  A9EA 04 04 04 04
 25+  A9EE 04 04 00 04
 25+  A9F2 04 04 04 04
 25+  A9F6 04 00 04 04
 25+  A9FA 04 01 00 00
 26+  A9FE 00 00 01 04      defb 00,00,01,04,04,04,00,04,04,04,04,04,04,04,04,04,04,04,00,04,04,04,04,04,04,00,04,04,04,01,00,00
 26+  AA02 04 04 00 04
 26+  AA06 04 04 04 04
 26+  AA0A 04 04 04 04
 26+  AA0E 04 04 00 04
 26+  AA12 04 04 04 04
 26+  AA16 04 00 04 04
 26+  AA1A 04 01 00 00
 27+  AA1E 00 00 01 04      defb 00,00,01,04,04,04,00,04,04,04,01,01,01,01,01,01,01,01,01,01,01,01,01,01,04,00,04,04,04,01,00,00
 27+  AA22 04 04 00 04
 27+  AA26 04 04 01 01
 27+  AA2A 01 01 01 01
 27+  AA2E 01 01 01 01
 27+  AA32 01 01 01 01
 27+  AA36 04 00 04 04
 27+  AA3A 04 01 00 00
 28+  AA3E 00 00 01 04      defb 00,00,01,04,04,04,00,04,04,04,01,00,00,00,00,00,00,00,00,00,00,00,00,01,04,00,04,04,04,01,00,00
 28+  AA42 04 04 00 04
 28+  AA46 04 04 01 00
 28+  AA4A 00 00 00 00
 28+  AA4E 00 00 00 00
 28+  AA52 00 00 00 01
 28+  AA56 04 00 04 04
 28+  AA5A 04 01 00 00
 29+  AA5E 00 00 01 04      defb 00,00,01,04,04,04,00,04,04,04,01,00,00,00,00,00,00,00,00,00,00,00,00,01,04,00,04,04,04,01,00,00
 29+  AA62 04 04 00 04
 29+  AA66 04 04 01 00
 29+  AA6A 00 00 00 00
 29+  AA6E 00 00 00 00
 29+  AA72 00 00 00 01
 29+  AA76 04 00 04 04
 29+  AA7A 04 01 00 00
 30+  AA7E 00 00 01 04      defb 00,00,01,04,04,04,00,04,04,04,01,00,00,00,00,00,00,00,00,00,00,00,00,01,04,00,04,04,04,01,00,00
 30+  AA82 04 04 00 04
 30+  AA86 04 04 01 00
 30+  AA8A 00 00 00 00
 30+  AA8E 00 00 00 00
 30+  AA92 00 00 00 01
 30+  AA96 04 00 04 04
 30+  AA9A 04 01 00 00
 31+  AA9E 00 00 01 04      defb 00,00,01,04,04,04,00,04,04,04,04,00,00,00,00,00,00,00,00,00,00,00,00,04,04,04,04,04,04,01,00,00
 31+  AAA2 04 04 00 04
 31+  AAA6 04 04 04 00
 31+  AAAA 00 00 00 00
 31+  AAAE 00 00 00 00
 31+  AAB2 00 00 00 04
 31+  AAB6 04 04 04 04
 31+  AABA 04 01 00 00
 32+  AABE 00 00 01 04      defb 00,00,01,04,04,04,04,04,04,04,01,00,00,00,00,00,00,00,00,00,00,00,00,01,04,04,04,04,04,01,00,00
 32+  AAC2 04 04 04 04
 32+  AAC6 04 04 01 00
 32+  AACA 00 00 00 00
 32+  AACE 00 00 00 00
 32+  AAD2 00 00 00 01
 32+  AAD6 04 04 04 04
 32+  AADA 04 01 00 00
 33+  AADE 00 00 01 04      defb 00,00,01,04,04,04,04,04,04,04,01,00,00,00,01,00,00,00,00,01,00,00,00,01,04,04,04,04,04,01,00,00
 33+  AAE2 04 04 04 04
 33+  AAE6 04 04 01 00
 33+  AAEA 00 00 01 00
 33+  AAEE 00 00 00 01
 33+  AAF2 00 00 00 01
 33+  AAF6 04 04 04 04
 33+  AAFA 04 01 00 00
 34+  AAFE 00 00 01 01      defb 00,00,01,01,01,01,01,01,01,01,01,01,01,01,01,01,01,01,01,01,01,01,01,01,01,01,01,01,01,01,00,00
 34+  AB02 01 01 01 01
 34+  AB06 01 01 01 01
 34+  AB0A 01 01 01 01
 34+  AB0E 01 01 01 01
 34+  AB12 01 01 01 01
 34+  AB16 01 01 01 01
 34+  AB1A 01 01 00 00
 35+  AB1E
 36+  AB1E              ; ###############################################################
 37+  AB1E              ; Object data: horiz, vert, state, memh, meml
 38+  AB1E              ; ###############################################################
 39+  AB1E              level01rocks:
 40+  AB1E 09 04 00 00      defb 9,4,0,0,0
 40+  AB22 00
 41+  AB23 0C 07 00 00      defb 12,7,0,0,0
 41+  AB27 00
 42+  AB28 10 07 00 00      defb 16,7,0,0,0
 42+  AB2C 00
 43+  AB2D 0B 08 00 00      defb 11,8,0,0,0
 43+  AB31 00
 44+  AB32 0A 0A 00 00      defb 10,10,0,0,0
 44+  AB36 00
 45+  AB37 0C 0A 00 00      defb 12,10,0,0,0
 45+  AB3B 00
 46+  AB3C 0D 09 00 00      defb 13,9,0,0,0
 46+  AB40 00
 47+  AB41 0E 08 00 00      defb 14,8,0,0,0
 47+  AB45 00
 48+  AB46 0F 0B 00 00      defb 15,11,0,0,0
 48+  AB4A 00
 49+  AB4B 0B 0C 00 00      defb 11,12,0,0,0
 49+  AB4F 00
 50+  AB50 11 0C 00 00      defb 17,12,0,0,0
 50+  AB54 00
 51+  AB55 13 08 00 00      defb 19,8,0,0,0
 51+  AB59 00
 52+  AB5A 16 09 00 00      defb 22,9,0,0,0
 52+  AB5E 00
 53+  AB5F 13 0A 00 00      defb 19,10,0,0,0
 53+  AB63 00
 54+  AB64 15 0A 00 00      defb 21,10,0,0,0
 54+  AB68 00
 55+  AB69 15 0C 00 00      defb 21,12,0,0,0
 55+  AB6D 00
 56+  AB6E 16 0C 00 00      defb 22,12,0,0,0
 56+  AB72 00
 57+  AB73 18 0A 00 00      defb 24,10,0,0,0
 57+  AB77 00
 58+  AB78 19 09 00 00      defb 25,9,0,0,0
 58+  AB7C 00
 59+  AB7D 1C 09 00 00      defb 28,9,0,0,0
 59+  AB81 00
 60+  AB82 1B 0C 00 00      defb 27,12,0,0,0
 60+  AB86 00
 61+  AB87 1A 0D 00 00      defb 26,13,0,0,0
 61+  AB8B 00
 62+  AB8C 19 0E 00 00      defb 25,14,0,0,0
 62+  AB90 00
 63+  AB91 19 10 00 00      defb 25,16,0,0,0
 63+  AB95 00
 64+  AB96 1A 11 00 00      defb 26,17,0,0,0
 64+  AB9A 00
 65+  AB9B 1B 11 00 00      defb 27,17,0,0,0
 65+  AB9F 00
 66+  ABA0 1C 12 00 00      defb 28,18,0,0,0
 66+  ABA4 00
 67+  ABA5 1A 13 00 00      defb 26,19,0,0,0
 67+  ABA9 00
 68+  ABAA 1B 15 00 00      defb 27,21,0,0,0
 68+  ABAE 00
 69+  ABAF 1A 17 00 00      defb 26,23,0,0,0
 69+  ABB3 00
 70+  ABB4 1B 18 00 00      defb 27,24,0,0,0
 70+  ABB8 00
 71+  ABB9 19 18 00 00      defb 25,24,0,0,0
 71+  ABBD 00
 72+  ABBE 18 17 00 00      defb 24,23,0,0,0
 72+  ABC2 00
 73+  ABC3 13 14 00 00      defb 19,20,0,0,0
 73+  ABC7 00
 74+  ABC8 14 12 00 00      defb 20,18,0,0,0
 74+  ABCC 00
 75+  ABCD 14 10 00 00      defb 20,16,0,0,0
 75+  ABD1 00
 76+  ABD2 15 10 00 00      defb 21,16,0,0,0
 76+  ABD6 00
 77+  ABD7 16 12 00 00      defb 22,18,0,0,0
 77+  ABDB 00
 78+  ABDC 11 14 00 00      defb 17,20,0,0,0
 78+  ABE0 00
 79+  ABE1 0D 11 00 00      defb 13,17,0,0,0
 79+  ABE5 00
 80+  ABE6 0C 13 00 00      defb 12,19,0,0,0
 80+  ABEA 00
 81+  ABEB 0B 13 00 00      defb 11,19,0,0,0
 81+  ABEF 00
 82+  ABF0 0A 11 00 00      defb 10,17,0,0,0
 82+  ABF4 00
 83+  ABF5 05 12 00 00      defb 5,18,0,0,0
 83+  ABF9 00
 84+  ABFA 07 16 00 00      defb 7,22,0,0,0
 84+  ABFE 00
 85+  ABFF 09 17 00 00      defb 9,23,0,0,0
 85+  AC03 00
 86+  AC04 07 18 00 00      defb 7,24,0,0,0
 86+  AC08 00
 87+  AC09 05 18 00 00      defb 5,24,0,0,0
 87+  AC0D 00
 88+  AC0E 06 19 00 00      defb 6,25,0,0,0
 88+  AC12 00
 89+  AC13 08 19 00 00      defb 8,25,0,0,0
 89+  AC17 00
 90+  AC18 04 17 00 00      defb 4,23,0,0,0
 90+  AC1C 00
 91+  AC1D FF               defb 255
 92+  AC1E
 93+  AC1E              level01missiles:
 94+  AC1E 0B 17 00 00      defb 11,23,0,0,0
 94+  AC22 00
 95+  AC23 0B 16 00 00      defb 11,22,0,0,0
 95+  AC27 00
 96+  AC28 0C 17 00 00      defb 12,23,0,0,0
 96+  AC2C 00
 97+  AC2D 0C 16 00 00      defb 12,22,0,0,0
 97+  AC31 00
 98+  AC32 0D 17 00 00      defb 13,23,0,0,0
 98+  AC36 00
 99+  AC37 0D 16 00 00      defb 13,22,0,0,0
 99+  AC3B 00
100+  AC3C 0E 17 00 00      defb 14,23,0,0,0
100+  AC40 00
101+  AC41 0E 16 00 00      defb 14,22,0,0,0
101+  AC45 00
102+  AC46 0F 17 00 00      defb 15,23,0,0,0
102+  AC4A 00
103+  AC4B 0F 16 00 00      defb 15,22,0,0,0
103+  AC4F 00
104+  AC50 10 17 00 00      defb 16,23,0,0,0
104+  AC54 00
105+  AC55 10 16 00 00      defb 16,22,0,0,0
105+  AC59 00
106+  AC5A 11 17 00 00      defb 17,23,0,0,0
106+  AC5E 00
107+  AC5F 11 16 00 00      defb 17,22,0,0,0
107+  AC63 00
108+  AC64 12 17 00 00      defb 18,23,0,0,0
108+  AC68 00
109+  AC69 12 16 00 00      defb 18,22,0,0,0
109+  AC6D 00
110+  AC6E 13 17 00 00      defb 19,23,0,0,0
110+  AC72 00
111+  AC73 13 16 00 00      defb 19,22,0,0,0
111+  AC77 00
112+  AC78 14 17 00 00      defb 20,23,0,0,0
112+  AC7C 00
113+  AC7D 14 16 00 00      defb 20,22,0,0,0
113+  AC81 00
114+  AC82 15 17 00 00      defb 21,23,0,0,0
114+  AC86 00
115+  AC87 15 16 00 00      defb 21,22,0,0,0
115+  AC8B 00
116+  AC8C 16 17 00 00      defb 22,23,0,0,0
116+  AC90 00
117+  AC91 16 16 00 00      defb 22,22,0,0,0
117+  AC95 00
118+  AC96 FF               defb 255
119+  AC97
120+  AC97              level01diamonds:
121+  AC97 0C 1B 00 00      defb 12,27,0,0,0
121+  AC9B 00
122+  AC9C 10 1B 00 00      defb 16,27,0,0,0
122+  ACA0 00
123+  ACA1 15 1B 00 00      defb 21,27,0,0,0
123+  ACA5 00
124+  ACA6 FF               defb 255
125+  ACA7
126+  ACA7              level01gems:
127+  ACA7 12 14 00 00      defb 18,20,0,0,0
127+  ACAB 00
128+  ACAC 06 18 00 00      defb 6,24,0,0,0
128+  ACB0 00
129+  ACB1 19 17 00 00      defb 25,23,0,0,0
129+  ACB5 00
130+  ACB6 1C 11 00 00      defb 28,17,0,0,0
130+  ACBA 00
131+  ACBB FF               defb 255
132+  ACBC              ;
133+  ACBC              ; Score area colours
134+  ACBC              ;
135+  ACBC              score_colours:
136+  ACBC 47 47 47 47      defb 71,71,71,71,71,71,71,71,71,71,71,66,67,67,67,67,67,67,67,67,66,71,71,71,71,71,71,71,71,71,71,71
136+  ACC0 47 47 47 47
136+  ACC4 47 47 47 42
136+  ACC8 43 43 43 43
136+  ACCC 43 43 43 43
136+  ACD0 42 47 47 47
136+  ACD4 47 47 47 47
136+  ACD8 47 47 47 47
137+  ACDC 47 47 47 47      defb 71,71,71,71,71,71,71,71,71,71,71,70,70,70,70,70,70,70,70,70,70,71,71,71,71,71,71,71,71,71,71,71
137+  ACE0 47 47 47 47
137+  ACE4 47 47 47 46
137+  ACE8 46 46 46 46
137+  ACEC 46 46 46 46
137+  ACF0 46 47 47 47
137+  ACF4 47 47 47 47
137+  ACF8 47 47 47 47
138+  ACFC
139+  ACFC              high_score_colours:
140+  ACFC 00 00 00 42      defb  0, 0, 0,66,66,66,71,71,71,71,71,71,67,67,67,71,71,71,71,71,71,70,70,70,71,71,71,71,71,71,0,0
140+  AD00 42 42 47 47
140+  AD04 47 47 47 47
140+  AD08 43 43 43 47
140+  AD0C 47 47 47 47
140+  AD10 47 46 46 46
140+  AD14 47 47 47 47
140+  AD18 47 47 00 00
# file closed: leveldata/level01.asm
 28   AD1C                  include "graphics\graphics.asm"
# file opened: graphics/graphics.asm
  1+  AD1C              ; Tiles graphics.
  2+  AD1C              sprites:
  3+  AD1C 00 00 00 00      defb    0  ,  0,  0,  0,  0,  0,  0,  0   ; 0, space
  3+  AD20 00 00 00 00
  4+  AD24 FF FF FF FF      defb    255,255,255,255,255,255,255,255   ; 1, cyan block
  4+  AD28 FF FF FF FF
  5+  AD2C 01 03 07 0F      defb	  1,  3,  7, 15, 31, 63,127,255   ; 2, slope left
  5+  AD30 1F 3F 7F FF
  6+  AD34 80 C0 E0 F0      defb    128,192,224,240,248,252,254,255   ; 3, slope right
  6+  AD38 F8 FC FE FF
  7+  AD3C 55 AA 55 AA      defb    85,170, 85,170, 85,170, 85,170    ; 4, dirt
  7+  AD40 55 AA 55 AA
  8+  AD44 00 00 00 00      defb    0  ,  0,  0,  0,  0,  0,  0,  0   ; 5, sky block
  8+  AD48 00 00 00 00
  9+  AD4C FF FF FF FF      defb    255,255,255,255,255,255,255,255   ; 6, slime block
  9+  AD50 FF FF FF FF
 10+  AD54 FF FF 00 00      defb    255,255,  0,  0,  0,  0,  0,  0   ; 7, trapdoor
 10+  AD58 00 00 00 00
 11+  AD5C 18 2C 4E 8F      defb    24, 44, 78,143,241,114, 52,  24    ; 8, diamond
 11+  AD60 F1 72 34 18
 12+  AD64 3C 7E FF 7F      defb    60,126,255,127,254,254,255,126    ; 9, rock
 12+  AD68 FE FE FF 7E
 13+  AD6C 7E FF 7F 7F  	defb	126,255,127,127,254,255,126, 60    ; 10, rock 2
 13+  AD70 FE FF 7E 3C
 14+  AD74 00 00 00 00      defb    0  ,  0,  0,  0,  0,  0,255,255   ; 11, sky block, pixel trapdoor
 14+  AD78 00 00 FF FF
 15+  AD7C 99 DB 7E 24  	defb    153,219,126, 36,255,126, 60, 24   ; 12, missile
 15+  AD80 FF 7E 3C 18
 16+  AD84 00 00 00 00      defb    0  ,  0,  0,  0,  0,  0,  0,  0   ; 13, sky block, tank background
 16+  AD88 00 00 00 00
 17+  AD8C 00 00 00 00  	defb    0,  0,  0,  0,  0, 60, 90, 52     ; 14, gem
 17+  AD90 00 3C 5A 34
 18+  AD94
 19+  AD94              sprite_attrs:
 20+  AD94 46               defb    070 ; 0, space
 21+  AD95 65               defb    101 ; 1, cyan block
 22+  AD96 4D               defb    077 ; 2, slope left
 23+  AD97 4D               defb    077 ; 3, slope right
 24+  AD98 46               defb    070 ; 4, dirt
 25+  AD99 4E               defb    078 ; 5, sky
 26+  AD9A 4C               defb    076 ; 6, slime
 27+  AD9B 42               defb    066 ; 7, trapdoor
 28+  AD9C 46               defb    070 ; 8, diamond
 29+  AD9D 42               defb    066 ; 9, rock
 30+  AD9E 42               defb    066 ; 10, rock 2
 31+  AD9F 49           	defb    073 ; 11, sky, trapdoor
 32+  ADA0 43           	defb    067 ; 12, missile
 33+  ADA1 4A               defb    074 ; 13, sky, red ink (tank)
 34+  ADA2 46               defb    070 ; 14, gem
 35+  ADA3
 36+  ADA3              player_sprite:
 37+  ADA3 10 39 92 FC  	defb	 16, 57,146,252, 56, 61,195,128 ; 0 up/down 1
 37+  ADA7 38 3D C3 80
 38+  ADAB 08 1C 08 FC  	defb	  8, 28,  8,252, 60, 28, 22, 50 ; 1 left 1
 38+  ADAF 3C 1C 16 32
 39+  ADB3 10 38 10 3F      defb   	 16, 56, 16, 63, 60, 56,104, 76 ; 2 right 1
 39+  ADB7 3C 38 68 4C
 40+  ADBB 08 9C 49 3F  	defb	  8,156, 73, 63, 28,188,195,  1 ; 3 up/down 2
 40+  ADBF 1C BC C3 01
 41+  ADC3 08 1C 08 FC  	defb	  8, 28,  8,252, 60, 60,100, 12; 4 left 2
 41+  ADC7 3C 3C 64 0C
 42+  ADCB 10 38 10 3F  	defb	 16, 56, 16, 63, 60, 60, 38, 48 ; 5 right 2
 42+  ADCF 3C 3C 26 30
 43+  ADD3 54 28 10 12  	defb	 84, 40, 16, 18, 30, 92,253, 95 ; 6 shoot up
 43+  ADD7 1E 5C FD 5F
 44+  ADDB 02 87 42 BF  	defb	 2,135, 66,191, 79,143, 25,  3  ; 7 shoot left
 44+  ADDF 4F 8F 19 03
 45+  ADE3 40 E1 42 FD  	defb	 64,225, 66,253,242,241,152,192 ; 8 shoot right
 45+  ADE7 F2 F1 98 C0
 46+  ADEB FA BF 3A 78  	defb	 250,191, 58,120, 72,  8, 20, 42 ; 9 shoot down
 46+  ADEF 48 08 14 2A
 47+  ADF3
 48+  ADF3              ;
 49+  ADF3              ; First 4 top half, next 4 bottom 1, next 4 bottom 2
 50+  ADF3              ;
 51+  ADF3              ship_sprite:
 52+  ADF3 00 00 00 01  	defb	  0,  0,  0,  1,  3, 31,127,255
 52+  ADF7 03 1F 7F FF
 53+  ADFB 1F 01 7F FF  	defb	 31,  1,127,255,255,255,255,255
 53+  ADFF FF FF FF FF
 54+  AE03 F8 80 FE FF  	defb	248,128,254,255,255,255,255,255
 54+  AE07 FF FF FF FF
 55+  AE0B 00 00 00 80  	defb	  0,  0,  0,128,192,248,254,255
 55+  AE0F C0 F8 FE FF
 56+  AE13 B3 B3 7F 1F  	defb	179,179,127, 31,  3,  3,  2,  7
 56+  AE17 03 03 02 07
 57+  AE1B 8F 8F FF FF  	defb	143,143,255,255,255, 15,  7,131
 57+  AE1F FF 0F 07 83
 58+  AE23 0F 0F FF FF  	defb	 15, 15,255,255,255, 16, 32,193
 58+  AE27 FF 10 20 C1
 59+  AE2B 19 19 FE F8  	defb	 25, 25,254,248,192,192, 64,224
 59+  AE2F C0 C0 40 E0
 60+  AE33 98 98 7F 1F  	defb	152,152,127, 31,  3,  3,  2,  7
 60+  AE37 03 03 02 07
 61+  AE3B F0 F0 FF FF  	defb	240,240,255,255,255,  8,  4,131
 61+  AE3F FF 08 04 83
 62+  AE43 F1 F1 FF FF  	defb	241,241,255,255,255,240,224,193
 62+  AE47 FF F0 E0 C1
 63+  AE4B CD CD FE F8  	defb	205,205,254,248,192,192, 64,224
 63+  AE4F C0 C0 40 E0
 64+  AE53
 65+  AE53              ;
 66+  AE53              ;  First 8 frames are tank, last frame is the gun barrel
 67+  AE53              ;
 68+  AE53              tank_sprite:
 69+  AE53 00 00 00 7F  	defb	  0,  0,  0,127,127,  0,  0,  0
 69+  AE57 7F 00 00 00
 70+  AE5B 01 03 FE FC  	defb	  1,  3,254,252,254,255,127, 64
 70+  AE5F FE FF 7F 40
 71+  AE63 FF FF 03 F9  	defb	255,255,  3,249,  3,255,255,  1
 71+  AE67 03 FF FF 01
 72+  AE6B 00 00 C0 E0  	defb	  0,  0,192,224,224,192,  0,  0
 72+  AE6F E0 C0 00 00
 73+  AE73 3F 7F E1 FB  	defb	 63,127,225,251,247,225,127, 63
 73+  AE77 F7 E1 7F 3F
 74+  AE7B FF FF 16 52  	defb	255,255, 22, 82, 84, 22,255,255
 74+  AE7F 54 16 FF FF
 75+  AE83 FF FF A8 A9  	defb	255,255,168,169,155,168,255,255
 75+  AE87 9B A8 FF FF
 76+  AE8B FC FE 8F AF  	defb	252,254,143,175,159,175,254,252
 76+  AE8F 9F AF FE FC
 77+  AE93 00 00 00 1F  	defb	  0,  0,  0, 31, 31,  0,  0,  0
 77+  AE97 1F 00 00 00
# file closed: graphics/graphics.asm
 29   AE9B
 30   AE9B                  include "game\control.asm"
# file opened: game/control.asm
  1+  AE9B              ;
  2+  AE9B              ; Check the keyboard then move
  3+  AE9B              ;
  4+  AE9B              control_keyboard:
  5+  AE9B 3A 61 B2         ld a,(player+5)      ; first, check if the player has pixels left to move
  6+  AE9E FE 00            cp 0
  7+  AEA0 CA A7 AE         jp z, control_keyboard1
  8+  AEA3 CD 9C AF         call control_automove
  9+  AEA6 C9               ret
 10+  AEA7              control_keyboard1:
 11+  AEA7 3A 62 B2         ld a,(player+6)      ; next, check if the player is digging
 12+  AEAA FE 00            cp 0
 13+  AEAC CA B3 AE         jp z, control_keyboard0
 14+  AEAF CD DA AE         call control_dig
 15+  AEB2 C9               ret
 16+  AEB3              control_keyboard0:
 17+  AEB3 01 FE FB         ld bc,64510         ; port for keyboard row q-t.
 18+  AEB6 ED 78            in a,(c)            ; read keyboard.
 19+  AEB8 47               ld b,a              ; store result in b register.
 20+  AEB9 CB 18            rr b                ; check outermost key (q).
 21+  AEBB D4 E5 AF         call nc,control_pl_moveup         ; player up.
 22+  AEBE 01 FE FD         ld bc,65022         ; port for keyboard row a-f.
 23+  AEC1 ED 78            in a,(c)            ; read keyboard.
 24+  AEC3 47               ld b,a              ; store result in b register.
 25+  AEC4 CB 18            rr b                ; check outermost key (a).
 26+  AEC6 D4 14 B0         call nc,control_pl_movedown       ; player down.
 27+  AEC9 01 FE DF         ld bc,57342         ; port for keyboard row y-p.
 28+  AECC ED 78            in a,(c)            ; read keyboard.
 29+  AECE 47               ld b,a              ; store result in b register.
 30+  AECF CB 18            rr b                ; check outermost key (p).
 31+  AED1 D4 71 B0         call nc,control_pl_moveright       ; player left.
 32+  AED4 CB 18            rr b                ; check next key.
 33+  AED6 D4 41 B0         call nc,control_pl_moveleft       ; player right.
 34+  AED9 C9               ret
 35+  AEDA
 36+  AEDA              ;
 37+  AEDA              ; Performs a dig if the counter has reset, otherwise, messes with the graphics
 38+  AEDA              ;
 39+  AEDA              control_dig:
 40+  AEDA ED 4B 5C B2      ld bc,(player)      ; load the current coords into bc
 41+  AEDE C5               push bc
 42+  AEDF 3A 5E B2         ld a,(player+2)     ; get the direction
 43+  AEE2 FE 01            cp 1                ; left
 44+  AEE4 CA FC AE         jp z,control_dig0
 45+  AEE7 FE 02            cp 2                ; right
 46+  AEE9 CA 11 AF         jp z,control_dig1
 47+  AEEC FE 03            cp 3                ; down
 48+  AEEE CA 35 AF         jp z,control_dig5
 49+  AEF1 FE 00            cp 0                ; up
 50+  AEF3 CA 25 AF         jp z,control_dig4
 51+  AEF6 21 62 B2         ld hl,player+6
 52+  AEF9 36 00            ld (hl),0           ; turn off digging
 53+  AEFB C9               ret                 ; return
 54+  AEFC              control_dig0:           ; going left
 55+  AEFC CD F0 A5         call sprites_scadd  ; get the current coord
 56+  AEFF 62 6B            ld hl,de
 57+  AF01 2B               dec hl              ; move one left
 58+  AF02 C1               pop bc              ; get the coords back, subtract 8 from horiz, 8 from vert, store (will be coords of space above dug dirt)
 59+  AF03 78               ld a,b
 60+  AF04 06 08            ld b,8
 61+  AF06 90               sub b
 62+  AF07 47               ld b,a
 63+  AF08 79               ld a,c
 64+  AF09 0E 08            ld c,8
 65+  AF0B 91               sub c
 66+  AF0C 4F               ld c,a
 67+  AF0D C5               push bc
 68+  AF0E C3 3E AF         jp control_dig2
 69+  AF11              control_dig1:
 70+  AF11 CD F0 A5         call sprites_scadd  ; get the current coord
 71+  AF14 62 6B            ld hl,de
 72+  AF16 23               inc hl              ; move one right
 73+  AF17 C1               pop bc              ; get the coords back, add 8 to horiz, subtract 8 from vert store (will be coords of space above dug dirt)
 74+  AF18 3E 08            ld a,8
 75+  AF1A 80               add a,b
 76+  AF1B 47               ld b,a
 77+  AF1C 79               ld a,c
 78+  AF1D 0E 08            ld c,8
 79+  AF1F 91               sub c
 80+  AF20 4F               ld c,a
 81+  AF21 C5               push bc
 82+  AF22 C3 3E AF         jp control_dig2
 83+  AF25              control_dig4:
 84+  AF25 CD F0 A5         call sprites_scadd  ; get the current coord
 85+  AF28 62 6B            ld hl,de
 86+  AF2A 11 20 00         ld de,32
 87+  AF2D ED 52            sbc hl,de             ; move one up
 88+  AF2F C1               pop bc              ; get the coords back, 1 from vert, store, then we'll sub 1 from c for each row later
 89+  AF30 0D               dec c
 90+  AF31 C5               push bc
 91+  AF32 C3 56 AF         jp control_dig6
 92+  AF35              control_dig5:
 93+  AF35 CD F0 A5         call sprites_scadd  ; get the current coord
 94+  AF38 62 6B            ld hl,de
 95+  AF3A 24               inc h              ; move one down
 96+  AF3B                                     ; not bothered about working out bc here, since rock will never fall if digging down
 97+  AF3B C3 3E AF         jp control_dig2
 98+  AF3E              ; Normal (not up) digging
 99+  AF3E              control_dig2:
100+  AF3E 3A 64 B2         ld a,(player+8)     ; get the number of rows we need to overwrite
101+  AF41 47               ld b,a              ; rows to copy over
102+  AF42 E5               push hl             ; store the memory location of the first row for later
103+  AF43              control_dig3:
104+  AF43 CD 85 AF         call control_getpixelrow
105+  AF46 77               ld (hl),a           ; load contents into row
106+  AF47 11 20 00         ld de,32
107+  AF4A 19               add hl,de           ; move to next row
108+  AF4B 10 F6            djnz control_dig3
109+  AF4D E1               pop hl              ; get the original memory location back
110+  AF4E 11 20 00         ld de,32
111+  AF51 ED 52            sbc hl,de           ; move to above row, ready for checking for rock
112+  AF53 C3 6C AF         jp control_dig10
113+  AF56              ; Special case for going up
114+  AF56              control_dig6:
115+  AF56 3A 64 B2         ld a,(player+8)     ; get the number of rows we need to overwrite
116+  AF59 47               ld b,a              ; rows to copy over
117+  AF5A              control_dig7:
118+  AF5A CD 85 AF         call control_getpixelrow
119+  AF5D              control_dig12:
120+  AF5D 77               ld (hl),a           ; load empty into row
121+  AF5E 11 20 00         ld de,32
122+  AF61 ED 52            sbc hl,de           ; move up to next row
123+  AF63 0D               dec c               ; decrease c to track rows
124+  AF64 10 F4            djnz control_dig7
125+  AF66 79               ld a,c
126+  AF67 D6 07            sub 7
127+  AF69 C1               pop bc
128+  AF6A 4F               ld c,a
129+  AF6B C5               push bc             ; store the decreased c coord
130+  AF6C              control_dig10:
131+  AF6C DD 21 63 B2      ld ix,player+7
132+  AF70 DD 7E 00         ld a,(ix)     ; get the dig frame number
133+  AF73 3D               dec a
134+  AF74 DD 77 00         ld (ix),a
135+  AF77                  ; call the check for rocks above the removed dirt
136+  AF77 DD 21 62 B2      ld ix,player+6
137+  AF7B DD 7E 00         ld a,(ix)     ; get the dig state
138+  AF7E FE 00            cp 0
139+  AF80 C1               pop bc
140+  AF81 CC 61 B4         call z, rocks_checkforfalling ; make the check if we're no longer digging
141+  AF84 C9               ret
142+  AF85
143+  AF85              ;
144+  AF85              ; Gets a modified pixel row to overwrite dirt - if this is the last dig, overwrite with nothing, otherwise xor to flip the dirt
145+  AF85              ; Inputs:
146+  AF85              ; hl - memory of pixel row
147+  AF85              ; Outputs:
148+  AF85              ; a - modified row to write
149+  AF85              ;
150+  AF85              control_getpixelrow:
151+  AF85 3A 63 B2         ld a,(player+7)     ; get the dig frame number
152+  AF88 FE 00            cp 0                ; is this the last dig
153+  AF8A CA 91 AF         jp z,control_getpixelrow1
154+  AF8D 7E               ld a,(hl)           ; if not, xor with 255 to flip it
155+  AF8E EE FF            xor 255
156+  AF90 C9               ret
157+  AF91              control_getpixelrow1:
158+  AF91 DD 21 62 B2      ld ix,player+6
159+  AF95 DD 36 00 00      ld (ix),0           ; turn off digging
160+  AF99 3E 00            ld a,0              ; if it is, load with empty
161+  AF9B C9               ret
162+  AF9C
163+  AF9C              ;
164+  AF9C              ; Auto move the player until pixels is zero
165+  AF9C              ;
166+  AF9C              control_automove:
167+  AF9C 5F               ld e,a              ; store the number of pixels left to move in e
168+  AF9D ED 4B 5C B2      ld bc,(player)      ; load the current coords into bc
169+  AFA1 21 5E B2         ld hl,player+2      ; get the direction
170+  AFA4 7E               ld a,(hl)
171+  AFA5 FE 03            cp 3                ; down
172+  AFA7 CA BB AF         jp z,control_automove3  ; don't need to do anything
173+  AFAA FE 00            cp 0                ; going up
174+  AFAC CA C7 AF         jp z,control_automove2
175+  AFAF FE 01            cp 1                ; going left?
176+  AFB1 CA D3 AF         jp z,control_automove0
177+  AFB4 78               ld a,b
178+  AFB5 3C               inc a               ; if we're going right, increment a twice for two pixels
179+  AFB6 3C               inc a
180+  AFB7 47               ld b,a
181+  AFB8 C3 D7 AF         jp control_automove1
182+  AFBB              control_automove3:
183+  AFBB 79               ld a,c
184+  AFBC 3C               inc a
185+  AFBD 3C               inc a               ; if we're going down, increment twice
186+  AFBE 4F               ld c,a
187+  AFBF FE 90            cp 144
188+  AFC1 CC 9F B0         call z, control_scroll_down
189+  AFC4 C3 D7 AF         jp control_automove1
190+  AFC7              control_automove2:
191+  AFC7 79               ld a,c
192+  AFC8 3D               dec a
193+  AFC9 3D               dec a               ; if we're going up, decrement twice
194+  AFCA 4F               ld c,a
195+  AFCB FE 60            cp 96
196+  AFCD CC A7 B0         call z, control_scroll_up
197+  AFD0 C3 D7 AF         jp control_automove1
198+  AFD3              control_automove0:
199+  AFD3 78               ld a,b
200+  AFD4 3D               dec a               ; if we're going left, decrement a twice
201+  AFD5 3D               dec a
202+  AFD6 47               ld b,a
203+  AFD7              control_automove1:
204+  AFD7 ED 43 5C B2      ld (player),bc      ; and back to player
205+  AFDB 7B               ld a,e              ; now get the pixel count back
206+  AFDC 3D               dec a               ; decrease by one
207+  AFDD 21 61 B2         ld hl,player+5
208+  AFE0 77               ld (hl),a           ; copy back
209+  AFE1 CD 9F B2         call player_justmoved
210+  AFE4 C9               ret
211+  AFE5
212+  AFE5              ;
213+  AFE5              ; Moves the player up
214+  AFE5              ;
215+  AFE5              control_pl_moveup:
216+  AFE5 C5               push bc
217+  AFE6 ED 4B 5C B2      ld bc,(player)          ; get the current coords, b horiz, c vert
218+  AFEA 79               ld a,c                  ; load c into the acc
219+  AFEB FE 18            cp 24
220+  AFED CA 0D B0         jp z,control_pl_moveup0 ; are we at the edge of the screen
221+  AFF0 FE 60            cp 96
222+  AFF2 DC A7 B0         call c, control_scroll_up
223+  AFF5 CD CD B1         call movement_checkcanmove_up ; check we can move up, e will be 1 if we can
224+  AFF8 F5               push af
225+  AFF9 7B               ld a,e                  ; put e in a
226+  AFFA FE 00            cp 0
227+  AFFC CA 0C B0         jp z,control_pl_moveup1 ; don't move if we can't
228+  AFFF F1               pop af
229+  B000 D6 01            sub 1                   ; subtract 1
230+  B002 D6 01            sub 1                   ; subtract 1
231+  B004 4F               ld c,a                  ; load back to c
232+  B005 ED 43 5C B2      ld (player),bc          ; load back to player
233+  B009 C3 0D B0         jp control_pl_moveup0
234+  B00C              control_pl_moveup1:
235+  B00C F1               pop af                  ; restore af if needed
236+  B00D              control_pl_moveup0:
237+  B00D 3E 00            ld a,0
238+  B00F 32 5E B2         ld (player+2),a        ; set direction to up
239+  B012 C1               pop bc
240+  B013 C9               ret
241+  B014              ;
242+  B014              ; Moves the player down
243+  B014              ;
244+  B014              control_pl_movedown:
245+  B014 C5               push bc
246+  B015 ED 4B 5C B2      ld bc,(player)          ; get the current coords, b horiz, c vert
247+  B019 79               ld a,c                  ; load c into the acc
248+  B01A FE E0            cp 224
249+  B01C CA 3A B0         jp z,control_pl_movedown0 ; are we at the edge of the screen
250+  B01F FE 80            cp 128
251+  B021 D4 9F B0         call nc, control_scroll_down
252+  B024 CD A5 B1         call movement_checkcanmove_down ; check we can move down, e will be 1 if we can
253+  B027 F5               push af
254+  B028 7B               ld a,e                  ; put e in a
255+  B029 FE 00            cp 0
256+  B02B CA 39 B0         jp z,control_pl_movedown1 ; don't move if we can't
257+  B02E F1               pop af
258+  B02F 3C               inc a                   ; add 1
259+  B030 3C               inc a                   ; add 1
260+  B031 4F               ld c,a                  ; load back to c
261+  B032 ED 43 5C B2      ld (player),bc          ; load back to player
262+  B036 C3 3A B0         jp control_pl_movedown0
263+  B039              control_pl_movedown1:
264+  B039 F1               pop af                  ; restore af if needed
265+  B03A              control_pl_movedown0:
266+  B03A 3E 03            ld a,3
267+  B03C 32 5E B2         ld (player+2),a        ; set direction to down
268+  B03F C1               pop bc
269+  B040 C9               ret
270+  B041              ;
271+  B041              ; Moves the player left
272+  B041              ;
273+  B041              control_pl_moveleft:
274+  B041 C5               push bc
275+  B042 ED 4B 5C B2      ld bc,(player)          ; get the current coords, b horiz, c vert
276+  B046 78               ld a,b                  ; load b into the acc
277+  B047 FE 10            cp 16
278+  B049 CA 6A B0         jp z,control_pl_moveleft0 ; are we at the edge of the screen
279+  B04C CD 27 B2         call movement_checkcanmove_left ; check we can move down, e will be 1 if we can
280+  B04F F5               push af
281+  B050 7B               ld a,e                  ; put e in a
282+  B051 FE 00            cp 0
283+  B053 CA 69 B0         jp z,control_pl_moveleft1 ; don't move if we can't
284+  B056 21 61 B2         ld hl,player+5          ; need to store the amount of pixels still left to move in the player status
285+  B059 3E 03            ld a,3
286+  B05B 77               ld (hl),a
287+  B05C F1               pop af
288+  B05D D6 01            sub 1                    ; subtract 2
289+  B05F D6 01            sub 1
290+  B061 47               ld b,a                  ; load back to c
291+  B062 ED 43 5C B2      ld (player),bc          ; load back to player
292+  B066 C3 6A B0         jp control_pl_moveleft0
293+  B069              control_pl_moveleft1:
294+  B069 F1               pop af
295+  B06A              control_pl_moveleft0:
296+  B06A 3E 01            ld a,1
297+  B06C 32 5E B2         ld (player+2),a        ; set direction to left
298+  B06F C1               pop bc
299+  B070 C9               ret
300+  B071              ;
301+  B071              ; Moves the player right
302+  B071              ;
303+  B071              control_pl_moveright:
304+  B071 C5               push bc
305+  B072 ED 4B 5C B2      ld bc,(player)          ; get the current coords, b horiz, c vert
306+  B076 78               ld a,b                  ; load b into the acc
307+  B077 FE F0            cp 240
308+  B079 CA 98 B0         jp z,control_pl_moveright0 ; are we at the edge of the screen
309+  B07C CD FF B1         call movement_checkcanmove_right ; check we can move down, e will be 1 if we can
310+  B07F F5               push af
311+  B080 7B               ld a,e                  ; put e in a
312+  B081 FE 00            cp 0
313+  B083 CA 97 B0         jp z,control_pl_moveright1 ; don't move if we can't
314+  B086 21 61 B2         ld hl,player+5          ; need to store the amount of pixels still left to move in the player status
315+  B089 3E 03            ld a,3
316+  B08B 77               ld (hl),a
317+  B08C F1               pop af
318+  B08D 3C               inc a                   ; add 2
319+  B08E 3C               inc a
320+  B08F 47               ld b,a                  ; load back to b
321+  B090 ED 43 5C B2      ld (player),bc          ; load back to player
322+  B094 C3 98 B0         jp control_pl_moveright0
323+  B097              control_pl_moveright1:
324+  B097 F1               pop af                  ; restore af if needed
325+  B098              control_pl_moveright0:
326+  B098 3E 02            ld a,2
327+  B09A 32 5E B2         ld (player+2),a        ; set direction to right
328+  B09D C1               pop bc
329+  B09E C9               ret
330+  B09F
331+  B09F              ;
332+  B09F              ; Scrolls the screen down
333+  B09F              ;
334+  B09F              control_scroll_down:
335+  B09F F5               push af
336+  B0A0 3E 08            ld a,8
337+  B0A2 32 8C A3         ld (screen_offset),a
338+  B0A5 F1               pop af
339+  B0A6 C9               ret
340+  B0A7
341+  B0A7              ;
342+  B0A7              ; Scrolls the screen up
343+  B0A7              ;
344+  B0A7              control_scroll_up:
345+  B0A7 F5               push af
346+  B0A8 3E 00            ld a,0
347+  B0AA 32 8C A3         ld (screen_offset),a
348+  B0AD F1               pop af
349+  B0AE C9               ret
350+  B0AF
351+  B0AF
352+  B0AF
353+  B0AF
# file closed: game/control.asm
 31   B0AF                  include "game\movement.asm"
# file opened: game/movement.asm
  1+  B0AF              ;
  2+  B0AF              ; Checks the contents of a cell are empty - ie, all pixel rows are zero
  3+  B0AF              ; Inputs:
  4+  B0AF              ; hl - memory location of top pixel row
  5+  B0AF              ; bc - screen coords, b horiz, c vert
  6+  B0AF              ; Outputs:
  7+  B0AF              ; e - 0 if not empty, 1 if empty
  8+  B0AF              ;
  9+  B0AF              movement_spaceisempty:
 10+  B0AF 3E 08            ld a,8                          ; 8 rows to check
 11+  B0B1              movement_spaceisempty0:
 12+  B0B1 08               ex af,af'                       ; store the loop counter
 13+  B0B2 7E               ld a,(hl)                       ; get current pixel row
 14+  B0B3 FE 00            cp 0
 15+  B0B5 C2 C9 B0         jp nz, movement_spaceisempty1    ; row is not empty, can't move here
 16+  B0B8 79               ld a,c                          ; load the vertical coord
 17+  B0B9 3C               inc a                           ; next row down
 18+  B0BA 11 20 00         ld de,32
 19+  B0BD 19               add hl,de                       ; otherwise, just go one down for hl, which means add 32, because of course
 20+  B0BE 4F               ld c,a                          ; copy vert coord back to c
 21+  B0BF 08               ex af,af'                       ; get loop counter back
 22+  B0C0 3D               dec a                           ; decrease loop counter
 23+  B0C1 C2 B1 B0         jp nz, movement_spaceisempty0
 24+  B0C4 16 00            ld d,0
 25+  B0C6 1E 01            ld e,1                          ; got to end, so space is empty
 26+  B0C8 C9               ret
 27+  B0C9              movement_spaceisempty1:
 28+  B0C9 16 00            ld d,0
 29+  B0CB 1E 00            ld e,0                          ; returning false, ie space not empty
 30+  B0CD C9               ret
 31+  B0CE
 32+  B0CE              ;
 33+  B0CE              ; Checks the line of a cell below is empty - ie, first pixel rows is zero
 34+  B0CE              ; Inputs:
 35+  B0CE              ; hl - memory location of top pixel row
 36+  B0CE              ; bc - screen coords, b horiz, c vert
 37+  B0CE              ; Outputs:
 38+  B0CE              ; e - 0 if not empty, 1 if empty
 39+  B0CE              ;
 40+  B0CE              movement_linebelowisempty:
 41+  B0CE 7E               ld a,(hl)                       ; get current pixel row
 42+  B0CF FE 00            cp 0
 43+  B0D1 C2 D9 B0         jp nz, movement_linebelowisempty1    ; row is not empty, can't move here
 44+  B0D4 16 00            ld d,0
 45+  B0D6 1E 01            ld e,1                          ; got to end, so space is empty
 46+  B0D8 C9               ret
 47+  B0D9              movement_linebelowisempty1:
 48+  B0D9 16 00            ld d,0
 49+  B0DB 1E 00            ld e,0                          ; returning false, ie space not empty
 50+  B0DD C9               ret
 51+  B0DE
 52+  B0DE              ;
 53+  B0DE              ; Checks the line of a cell above is empty - ie, last pixel rows are zero
 54+  B0DE              ; Inputs:
 55+  B0DE              ; hl - memory location of top pixel row
 56+  B0DE              ; bc - screen coords, b horiz, c vert
 57+  B0DE              ; Outputs:
 58+  B0DE              ; e - 0 if not empty, 1 if empty
 59+  B0DE              ;
 60+  B0DE              movement_lineaboveisempty:
 61+  B0DE 7E               ld a,(hl)                       ; get current pixel row
 62+  B0DF FE 00            cp 0
 63+  B0E1 C2 E9 B0         jp nz, movement_lineaboveisempty1    ; row is not empty, can't move here
 64+  B0E4 16 00            ld d,0
 65+  B0E6 1E 01            ld e,1                          ; got to end, so space is empty
 66+  B0E8 C9               ret
 67+  B0E9              movement_lineaboveisempty1:
 68+  B0E9 16 00            ld d,0
 69+  B0EB 1E 00            ld e,0                          ; returning false, ie space not empty
 70+  B0ED C9               ret
 71+  B0EE
 72+  B0EE              ;
 73+  B0EE              ; Checks the contents of a cell are diggable - ie, all pixel rows are dirt or empty
 74+  B0EE              ; Inputs:
 75+  B0EE              ; hl - memory location of top pixel row
 76+  B0EE              ; bc - screen coords, b horiz, c vert
 77+  B0EE              ; Outputs:
 78+  B0EE              ; none - puts player into digging mode
 79+  B0EE              ;
 80+  B0EE              movement_spaceisdiggable:
 81+  B0EE 3E 08            ld a,8                          ; 8 rows to check
 82+  B0F0              movement_spaceisdiggable0:
 83+  B0F0 08               ex af,af'                       ; store the loop counter
 84+  B0F1 7E               ld a,(hl)                       ; get current pixel row
 85+  B0F2 FE 00            cp 0
 86+  B0F4 CA 04 B1         jp z, movement_spaceisdiggable2  ; row is empty, can dig here
 87+  B0F7 FE 55            cp 85
 88+  B0F9 CA 04 B1         jp z, movement_spaceisdiggable2  ; row is dirt, can dig here
 89+  B0FC FE AA            cp 170
 90+  B0FE CA 04 B1         jp z, movement_spaceisdiggable2  ; row is dirt, can dig here
 91+  B101 C3 1C B1         jp movement_spaceisdiggable1     ; otherwise, stop checking
 92+  B104              movement_spaceisdiggable2:
 93+  B104 79               ld a,c                          ; load the vertical coord
 94+  B105 3C               inc a                           ; next row down
 95+  B106 11 20 00         ld de,32
 96+  B109 19               add hl,de                       ; otherwise, just go one down for hl, which means add 32, because of course
 97+  B10A 4F               ld c,a                          ; copy vert coord back to c
 98+  B10B 08               ex af,af'                       ; get loop counter back
 99+  B10C 3D               dec a                           ; decrease loop counter
100+  B10D C2 F0 B0         jp nz, movement_spaceisdiggable0
101+  B110 21 62 B2         ld hl,player+6
102+  B113 36 01            ld (hl),1                       ; set the player into digging mode
103+  B115 23               inc hl
104+  B116 36 05            ld (hl),5                      ; set the number of frame to dig for
105+  B118 23               inc hl
106+  B119 36 08            ld (hl),8                       ; set the number of pixels to dig
107+  B11B C9               ret
108+  B11C              movement_spaceisdiggable1:
109+  B11C 21 62 B2         ld hl,player+6
110+  B11F 36 00            ld (hl),0                       ; set the player out of digging mode
111+  B121 C9               ret
112+  B122
113+  B122              ;
114+  B122              ; Checks the contents of a cell below are diggable - ie, at least one pixel row has dirt. If the first one isn't dirt, stop
115+  B122              ; Inputs:
116+  B122              ; hl - memory location of top pixel row
117+  B122              ; bc - screen coords, b horiz, c vert
118+  B122              ; Outputs:
119+  B122              ; none - puts player into digging mode
120+  B122              ;
121+  B122              movement_spacebelowisdiggable:
122+  B122 7E               ld a,(hl)                       ; get first pixel row
123+  B123 FE 55            cp 85
124+  B125 CA 30 B1         jp z, movement_spacebelowisdiggable3  ; row is dirt, can dig here
125+  B128 FE AA            cp 170
126+  B12A CA 30 B1         jp z, movement_spacebelowisdiggable3  ; row is dirt, can dig here
127+  B12D C3 1C B1         jp movement_spaceisdiggable1    ; the first row is not dirt, so don't bother checking the rest, can't dig
128+  B130              movement_spacebelowisdiggable3:
129+  B130 3E 08            ld a,8                          ; rows to check
130+  B132 1E 00            ld e,0                          ; count of rows to dig
131+  B134              movement_spacebelowisdiggable0:
132+  B134 08               ex af,af'                       ; store the loop counter
133+  B135 7E               ld a,(hl)                       ; get current pixel row
134+  B136 FE 55            cp 85
135+  B138 CA 43 B1         jp z, movement_spacebelowisdiggable4  ; row is dirt, can dig here
136+  B13B FE AA            cp 170
137+  B13D CA 43 B1         jp z, movement_spacebelowisdiggable4  ; row is dirt, can dig here
138+  B140 C3 52 B1         jp movement_spacebelowisdiggable5     ; don't count this row and stop counting
139+  B143              movement_spacebelowisdiggable4:
140+  B143 1C               inc e                           ; inc count of rows to dig
141+  B144              movement_spacebelowisdiggable2:
142+  B144 79               ld a,c                          ; load the vertical coord
143+  B145 3C               inc a                           ; next row down
144+  B146 D5               push de                         ; need e for later
145+  B147 11 20 00         ld de,32
146+  B14A 19               add hl,de                       ; otherwise, just go one down for hl, which means add 32, because of course
147+  B14B 4F               ld c,a                          ; copy vert coord back to c
148+  B14C D1               pop de                          ; get e back
149+  B14D 08               ex af,af'                       ; get loop counter back
150+  B14E 3D               dec a                           ; incease loop counter
151+  B14F C2 34 B1         jp nz, movement_spacebelowisdiggable0
152+  B152              movement_spacebelowisdiggable5:
153+  B152 21 62 B2         ld hl,player+6
154+  B155 36 01            ld (hl),1                       ; set the player into digging mode
155+  B157 23               inc hl
156+  B158 36 03            ld (hl),3                      ; set the number of frame to dig for
157+  B15A 23               inc hl
158+  B15B 73               ld (hl),e                       ; set the number of pixels to dig
159+  B15C C9               ret
160+  B15D              movement_spacebelowisdiggable1:
161+  B15D 21 62 B2         ld hl,player+6
162+  B160 36 00            ld (hl),0                       ; set the player out of digging mode
163+  B162 C9               ret
164+  B163
165+  B163              ;
166+  B163              ; Checks the contents of a cell above are diggable - ie, at least one pixel row has dirt. If the first one isn't dirt, stop
167+  B163              ; Inputs:
168+  B163              ; hl - memory location of top pixel row
169+  B163              ; bc - screen coords, b horiz, c vert
170+  B163              ; Outputs:
171+  B163              ; none - puts player into digging mode
172+  B163              ;
173+  B163              movement_spaceaboveisdiggable:
174+  B163 7E               ld a,(hl)                       ; get first pixel row
175+  B164 FE 55            cp 85
176+  B166 CA 71 B1         jp z, movement_spaceaboveisdiggable3  ; row is dirt, can dig here
177+  B169 FE AA            cp 170
178+  B16B CA 71 B1         jp z, movement_spaceaboveisdiggable3  ; row is dirt, can dig here
179+  B16E C3 1C B1         jp movement_spaceisdiggable1    ; the first row is not dirt, so don't bother checking the rest, can't dig
180+  B171              movement_spaceaboveisdiggable3:
181+  B171 3E 08            ld a,8                          ; rows to check
182+  B173 1E 00            ld e,0                          ; count of rows to dig
183+  B175              movement_spaceaboveisdiggable0:
184+  B175 08               ex af,af'                       ; store the loop counter
185+  B176 7E               ld a,(hl)                       ; get current pixel row
186+  B177 FE 55            cp 85
187+  B179 CA 84 B1         jp z, movement_spaceaboveisdiggable4  ; row is dirt, can dig here
188+  B17C FE AA            cp 170
189+  B17E CA 84 B1         jp z, movement_spaceaboveisdiggable4  ; row is dirt, can dig here
190+  B181 C3 94 B1         jp movement_spaceaboveisdiggable5     ; don't count this row and stop counting
191+  B184              movement_spaceaboveisdiggable4:
192+  B184 1C               inc e                           ; inc count of rows to dig
193+  B185              movement_spaceaboveisdiggable2:
194+  B185 79               ld a,c                          ; load the vertical coord
195+  B186 3D               dec a                           ; next row up
196+  B187 D5               push de                         ; need e for later
197+  B188 11 20 00         ld de,32
198+  B18B ED 52            sbc hl,de                       ; otherwise, just go one up for hl, which means sub 32, because of course
199+  B18D 4F               ld c,a                          ; copy vert coord back to c
200+  B18E D1               pop de                          ; get e back
201+  B18F 08               ex af,af'                       ; get loop counter back
202+  B190 3D               dec a                           ; incease loop counter
203+  B191 C2 75 B1         jp nz, movement_spaceaboveisdiggable0
204+  B194              movement_spaceaboveisdiggable5:
205+  B194 21 62 B2         ld hl,player+6
206+  B197 36 01            ld (hl),1                       ; set the player into digging mode
207+  B199 23               inc hl
208+  B19A 36 05            ld (hl),5                       ; set the number of frame to dig for
209+  B19C 23               inc hl
210+  B19D 73               ld (hl),e                       ; set the number of pixels to dig
211+  B19E C9               ret
212+  B19F              movement_spaceaboveisdiggable1:
213+  B19F 21 62 B2         ld hl,player+6
214+  B1A2 36 00            ld (hl),0                       ; set the player out of digging mode
215+  B1A4 C9               ret
216+  B1A5
217+  B1A5              ;
218+  B1A5              ; Checks if the player can move down
219+  B1A5              ; Inputs:
220+  B1A5              ; bc - player coords, b horiz, c vert
221+  B1A5              ; Outputs:
222+  B1A5              ; de - 1 can move
223+  B1A5              movement_checkcanmove_down:
224+  B1A5 F5               push af
225+  B1A6 C5               push bc
226+  B1A7 CD F0 A5         call sprites_scadd              ; get the memory location of cell into de
227+  B1AA 62 6B            ld hl,de                        ; look at cell directly underneath (add 256)
228+  B1AC 24               inc h                       ; memory location of cell beneath now in hl
229+  B1AD CD CE B0         call movement_linebelowisempty       ; check space is empty
230+  B1B0 7B               ld a,e                          ; check space empty flag
231+  B1B1 FE 00            cp 0
232+  B1B3 CA BC B1         jp z, movement_checkcanmove_down1 ; can't move
233+  B1B6 CD 9F B2         call player_justmoved
234+  B1B9 C1               pop bc
235+  B1BA F1               pop af
236+  B1BB C9               ret
237+  B1BC              movement_checkcanmove_down1:
238+  B1BC C1               pop bc
239+  B1BD CD F0 A5         call sprites_scadd              ; get the memory location of cell into de
240+  B1C0 62 6B            ld hl,de                        ; look at cell directly underneath (add 256)
241+  B1C2 24               inc h
242+  B1C3 C5               push bc
243+  B1C4 CD 22 B1         call movement_spacebelowisdiggable    ; can't move here, but can we dig
244+  B1C7 11 00 00         ld de,0
245+  B1CA C1               pop bc
246+  B1CB F1               pop af
247+  B1CC C9               ret
248+  B1CD
249+  B1CD              ;
250+  B1CD              ; Checks if the player can move up
251+  B1CD              ; Inputs:
252+  B1CD              ; bc - player coords, b horiz, c vert
253+  B1CD              ; Outputs:
254+  B1CD              ; de - 1 can move
255+  B1CD              movement_checkcanmove_up:
256+  B1CD F5               push af
257+  B1CE C5               push bc
258+  B1CF CD F0 A5         call sprites_scadd              ; get the memory location of cell into de
259+  B1D2 62 6B            ld hl,de                        ; look at cell directly above (subtract 32)
260+  B1D4 11 20 00         ld de,32
261+  B1D7 ED 52            sbc hl,de                       ; memory location of line above now in hl
262+  B1D9 CD DE B0         call movement_lineaboveisempty       ; check space is empty
263+  B1DC 7B               ld a,e                          ; check space empty flag
264+  B1DD FE 00            cp 0
265+  B1DF CA EA B1         jp z, movement_checkcanmove_up1 ; can't move
266+  B1E2 1E 01            ld e,1
267+  B1E4 CD 9F B2         call player_justmoved
268+  B1E7 C1               pop bc
269+  B1E8 F1               pop af
270+  B1E9 C9               ret
271+  B1EA              movement_checkcanmove_up1:
272+  B1EA C1               pop bc
273+  B1EB CD F0 A5         call sprites_scadd              ; get the memory location of cell into de
274+  B1EE 62 6B            ld hl,de                        ; look at cell directly above (subtract 32)
275+  B1F0 11 20 00         ld de,32
276+  B1F3 ED 52            sbc hl,de                       ; memory location of line above now in hl
277+  B1F5 C5               push bc
278+  B1F6 CD 63 B1         call movement_spaceaboveisdiggable    ; can't move here, but can we dig
279+  B1F9 11 00 00         ld de,0
280+  B1FC C1               pop bc
281+  B1FD F1               pop af
282+  B1FE C9               ret
283+  B1FF
284+  B1FF              ;
285+  B1FF              ; Checks if the player can move right
286+  B1FF              ; Inputs:
287+  B1FF              ; bc - player coords, b horiz, c vert
288+  B1FF              ; Outputs:
289+  B1FF              ; de - 1 can move
290+  B1FF              movement_checkcanmove_right:
291+  B1FF F5               push af
292+  B200 C5               push bc
293+  B201 CD F0 A5         call sprites_scadd              ; get the memory location of cell into de
294+  B204 62 6B            ld hl,de                        ; look at cell directly to the right (add 1)
295+  B206 23               inc hl                          ; memory location of cell to the right now in hl
296+  B207 CD AF B0         call movement_spaceisempty       ; check space is empty
297+  B20A 7B               ld a,e                          ; check space empty flag
298+  B20B FE 00            cp 0
299+  B20D CA 16 B2         jp z, movement_checkcanmove_right1 ; can't move
300+  B210 CD 9F B2         call player_justmoved
301+  B213 C1               pop bc
302+  B214 F1               pop af
303+  B215 C9               ret
304+  B216              movement_checkcanmove_right1:
305+  B216 C1               pop bc
306+  B217 CD F0 A5         call sprites_scadd              ; get the memory location of cell into de
307+  B21A 62 6B            ld hl,de
308+  B21C 23               inc hl                          ; memory location of cell to the right now in hl
309+  B21D C5               push bc
310+  B21E CD EE B0         call movement_spaceisdiggable    ; can't move here, but can we dig
311+  B221 11 00 00         ld de,0
312+  B224 C1               pop bc
313+  B225 F1               pop af
314+  B226 C9               ret
315+  B227
316+  B227              ;
317+  B227              ; Checks if the player can move left
318+  B227              ; Inputs:
319+  B227              ; bc - player coords, b horiz, c vert
320+  B227              ; Outputs:
321+  B227              ; de - 1 can move
322+  B227              movement_checkcanmove_left:
323+  B227 F5               push af
324+  B228 C5               push bc
325+  B229 CD F0 A5         call sprites_scadd              ; get the memory location of cell into de
326+  B22C 62 6B            ld hl,de                        ; look at cell directly to the right (add 1)
327+  B22E 2B               dec hl                          ; memory location of cell to the right now in hl
328+  B22F CD AF B0         call movement_spaceisempty       ; check space is empty
329+  B232 7B               ld a,e                          ; check space empty flag
330+  B233 FE 00            cp 0
331+  B235 CA 3E B2         jp z, movement_checkcanmove_left1 ; can't move
332+  B238 CD 9F B2         call player_justmoved
333+  B23B C1               pop bc
334+  B23C F1               pop af
335+  B23D C9               ret
336+  B23E              movement_checkcanmove_left1:
337+  B23E C1               pop bc
338+  B23F CD F0 A5         call sprites_scadd              ; get the memory location of cell into de
339+  B242 62 6B            ld hl,de
340+  B244 2B               dec hl                          ; memory location of cell to the right now in hl
341+  B245 C5               push bc
342+  B246 CD EE B0         call movement_spaceisdiggable    ; can't move here, but can we dig
343+  B249 11 00 00         ld de,0
344+  B24C C1               pop bc
345+  B24D F1               pop af
346+  B24E C9               ret
# file closed: game/movement.asm
 32   B24F                  include "game\game.asm"
# file opened: game/game.asm
  1+  B24F              ;
  2+  B24F              ; The current frame count, incremented each frame
  3+  B24F              ;
  4+  B24F              game_framenumber:
  5+  B24F 00               defb    0
  6+  B250
  7+  B250              ;
  8+  B250              ; Increment frame number by 1
  9+  B250              ;
 10+  B250              game_incrementframe:
 11+  B250 3A 4F B2         ld a,(game_framenumber)
 12+  B253 3C               inc a
 13+  B254 32 4F B2         ld (game_framenumber),a
 14+  B257 C9               ret
 15+  B258
 16+  B258              ;
 17+  B258              ; Returns current frame
 18+  B258              ; Outputs:
 19+  B258              ; a - current frame
 20+  B258              ;
 21+  B258              game_getcurrentframe:
 22+  B258 3A 4F B2         ld a,(game_framenumber)
 23+  B25B C9               ret
# file closed: game/game.asm
 33   B25C                  include "game\player.asm"
# file opened: game/player.asm
  1+  B25C              ;
  2+  B25C              ;   Data for current player
  3+  B25C              ;   horiz,vert,dir (0 up, 1 left, 2 right, 3 down), frame, frame transition count,move remaining, is digging (0 no), digging count, pixels to dig
  4+  B25C              player:
  5+  B25C 00 00 02 00      defb    0,0,2,0,1,0,0,0,0
  5+  B260 01 00 00 00
  5+  B264 00
  6+  B265              ;
  7+  B265              ; Initializes a player
  8+  B265              ;
  9+  B265              player_init:
 10+  B265 ED 4B 10 80      ld bc,(start_coord)
 11+  B269 ED 43 5C B2      ld (player),bc
 12+  B26D C9               ret
 13+  B26E
 14+  B26E              ;
 15+  B26E              ; Draws the player at the current position or deletes them
 16+  B26E              ;
 17+  B26E              player_drawplayer:
 18+  B26E 3A 5E B2         ld a,(player+2)             ; get the current direction
 19+  B271 FE 03            cp 3
 20+  B273 C2 78 B2         jp nz,player_drawplayer0
 21+  B276 3E 00            ld a,0                      ; if 3, then down, so set the direction to 0 since the sprite is the same as up
 22+  B278              player_drawplayer0:
 23+  B278 5F               ld e,a                      ; store in e
 24+  B279 3A 62 B2         ld a,(player+6)             ; get the dig flag
 25+  B27C FE 01            cp 1
 26+  B27E CA 88 B2         jp z,player_drawplayer1    ; get dig frame
 27+  B281 3A 5F B2         ld a,(player+3)             ; this is normal movement so get the current frame
 28+  B284 83               add a,e
 29+  B285 C3 8D B2         jp player_drawplayer2
 30+  B288              player_drawplayer1
 31+  B288 3A 5E B2         ld a,(player+2)             ; get the current direction again, because want all four
 32+  B28B C6 06            add a,6                     ; add direction to 6 to get frame
 33+  B28D              player_drawplayer2
 34+  B28D 07               rlca
 35+  B28E 07               rlca
 36+  B28F 07               rlca                        ; multiply by eight
 37+  B290 6F               ld l,a
 38+  B291 26 00            ld h,0
 39+  B293 11 A3 AD         ld de,player_sprite
 40+  B296 19               add hl,de                   ; load hl with the location of the player sprite data
 41+  B297 ED 4B 5C B2      ld bc,(player)              ; load bc with the start coords
 42+  B29B CD AD A5         call sprites_drawsprite     ; call the routine to draw the sprite
 43+  B29E C9               ret
 44+  B29F
 45+  B29F
 46+  B29F              ;
 47+  B29F              ; Runs after the player just moved. Changes animation frame if required
 48+  B29F              ;
 49+  B29F              player_justmoved:
 50+  B29F D9               exx
 51+  B2A0 3A 60 B2         ld a,(player+4)             ; get the transition count
 52+  B2A3 FE 00            cp 0
 53+  B2A5 CA AB B2         jp z, player_justmoved2     ; if zero reset and change the frame
 54+  B2A8 C3 C5 B2         jp player_justmoved1       ; otherwise decrease and continue
 55+  B2AB              player_justmoved2:
 56+  B2AB                  ; reset and change frame in here
 57+  B2AB 3E 01            ld a,1
 58+  B2AD 32 60 B2         ld (player+4),a            ; reset back to whatever
 59+  B2B0 3A 5F B2         ld a,(player+3)             ; load the frame
 60+  B2B3 FE 03            cp 3                       ; flip between 3 and 0
 61+  B2B5 C2 BD B2         jp nz, player_justmoved4
 62+  B2B8 3E 00            ld a,0
 63+  B2BA C3 BF B2         jp player_justmoved5
 64+  B2BD              player_justmoved4:
 65+  B2BD 3E 03            ld a,3
 66+  B2BF              player_justmoved5:
 67+  B2BF 32 5F B2         ld (player+3),a           ; save back
 68+  B2C2 C3 C9 B2         jp player_justmoved3
 69+  B2C5              player_justmoved1:
 70+  B2C5                  ; decrease count
 71+  B2C5 3D               dec a
 72+  B2C6 32 60 B2         ld (player+4),a
 73+  B2C9              player_justmoved3:
 74+  B2C9 D9               exx;
 75+  B2CA C9               ret
# file closed: game/player.asm
 34   B2CB                  include "game\ship.asm"
# file opened: game/ship.asm
  1+  B2CB              ;
  2+  B2CB              ; Ship initial position: vert,horiz
  3+  B2CB              ;
  4+  B2CB              ship_initpos:
  5+  B2CB 00 24            defb 0,36
  6+  B2CD              ship_initpos2:
  7+  B2CD 00 00            defb 0,0
  8+  B2CF              ship_frame:
  9+  B2CF 00               defb 0
 10+  B2D0              ;
 11+  B2D0              ; The current memory location
 12+  B2D0              ;
 13+  B2D0              ship_current_sprite:
 14+  B2D0 00 00            defb 0,0
 15+  B2D2
 16+  B2D2              ship_current_coords:
 17+  B2D2 00 00            defb 0,0
 18+  B2D4
 19+  B2D4              ;
 20+  B2D4              ;   Draw and land the ship - first move the ship down, then across, drawing the player in the middle
 21+  B2D4              ;
 22+  B2D4              ship_land:
 23+  B2D4 ED 4B CB B2      ld bc,(ship_initpos)
 24+  B2D8 ED 43 CD B2      ld (ship_initpos2),bc        ; save the initial position for later use
 25+  B2DC 1E 00            ld e,0                      ; store a flag to track first time round
 26+  B2DE 06 09            ld b,9                      ; move down 8 pixels
 27+  B2E0              ship_land0:
 28+  B2E0 C5               push bc
 29+  B2E1 7B               ld a,e
 30+  B2E2 D5               push de                     ; store de for next time round
 31+  B2E3 FE 01            cp 1                        ; check first time flag
 32+  B2E5 C2 FA B2         jp nz,ship_land1             ; don't draw over previous one if first time
 33+  B2E8 CD 53 B3         call ship_draw_full         ; delete old one
 34+  B2EB CD 37 B3         call ship_change_frame      ; increment the frame
 35+  B2EE ED 4B CD B2      ld bc,(ship_initpos2)       ; get the current coords
 36+  B2F2 81 C6 01         add c,1                     ; move down one pixels
 37+  B2F5 4F               ld c,a
 38+  B2F6 ED 43 CD B2      ld (ship_initpos2),bc
 39+  B2FA              ship_land1:
 40+  B2FA CD 53 B3         call ship_draw_full         ; draw the ship
 41+  B2FD CD 4C B3         call ship_draw_screen
 42+  B300 D1               pop de
 43+  B301 1E 01            ld e,1
 44+  B303 C1               pop bc
 45+  B304 10 DA            djnz ship_land0             ; repeat for downward movement
 46+  B306                  ; done moving down
 47+  B306                  ; now move across
 48+  B306 CD 6E B2         call player_drawplayer      ; draw player
 49+  B309 CD 53 B3         call ship_draw_full         ; delete old one
 50+  B30C 1E 00            ld e,0                      ; store a flag to track first time round
 51+  B30E 06 14            ld b,20                      ; move back 20 pixels pixels
 52+  B310              ship_land3:
 53+  B310 C5               push bc
 54+  B311 7B               ld a,e
 55+  B312 D5               push de                     ; store de for next time round
 56+  B313 FE 01            cp 1                        ; check first time flag
 57+  B315 C2 2A B3         jp nz,ship_land2             ; don't draw over previous one if first time
 58+  B318 CD 53 B3         call ship_draw_full         ; delete old one
 59+  B31B CD 37 B3         call ship_change_frame      ; increment the frame
 60+  B31E ED 4B CD B2      ld bc,(ship_initpos2)       ; get the current coords
 61+  B322 78               ld a,b
 62+  B323 D6 01            sub 1                       ; move back one pixels
 63+  B325 47               ld b,a
 64+  B326 ED 43 CD B2      ld (ship_initpos2),bc
 65+  B32A              ship_land2:
 66+  B32A CD 53 B3         call ship_draw_full         ; draw the ship
 67+  B32D CD 4C B3         call ship_draw_screen       ; draw the frame to screen by clearing the buffer
 68+  B330 D1               pop de
 69+  B331 1E 01            ld e,1                      ; set e to 1 to indicate >1 time
 70+  B333 C1               pop bc
 71+  B334 10 DA            djnz ship_land3             ; repeat for vertical movement
 72+  B336 C9               ret
 73+  B337
 74+  B337              ;
 75+  B337              ; Swap the animation frame between 0 and 32. This will be added to the memory location later
 76+  B337              ;
 77+  B337              ship_change_frame:
 78+  B337 F5               push af
 79+  B338 3A CF B2         ld a,(ship_frame)
 80+  B33B FE 00            cp 0
 81+  B33D CA 45 B3         jp z,ship_change_frame0
 82+  B340 3E 00            ld a,0                      ; flip to 0
 83+  B342 C3 47 B3         jp ship_change_frame1
 84+  B345              ship_change_frame0:
 85+  B345 3E 20            ld a,32                      ; flip to 32
 86+  B347              ship_change_frame1:
 87+  B347 32 CF B2         ld (ship_frame),a            ; save the frame
 88+  B34A F1               pop af
 89+  B34B C9               ret
 90+  B34C
 91+  B34C              ship_draw_screen:
 92+  B34C 76               halt
 93+  B34D F3               di
 94+  B34E CD 8E A3         call screen_buffertoscreen  ; copy buffer to screen
 95+  B351 FB               ei                          ; enable interupts
 96+  B352 C9               ret
 97+  B353
 98+  B353              ship_draw_full:
 99+  B353 21 F3 AD         ld hl,ship_sprite
100+  B356 ED 4B CD B2      ld bc,(ship_initpos2)         ; load bc with the start coords
101+  B35A 22 D0 B2         ld (ship_current_sprite),hl  ; put into memory
102+  B35D ED 43 D2 B2      ld (ship_current_coords),bc  ; put into memory
103+  B361 CD 80 B3         call ship_draw
104+  B364 08               ex af,af'
105+  B365 3A CF B2         ld a,(ship_frame)            ; get the animation frame
106+  B368 16 00            ld d,0
107+  B36A 5F               ld e,a
108+  B36B 19               add hl,de
109+  B36C 22 D0 B2         ld (ship_current_sprite),hl  ; put into memory
110+  B36F 08               ex af,af'
111+  B370 ED 4B CD B2      ld bc,(ship_initpos2)         ; load bc with the start coords
112+  B374 81 C6 08         add c,8                      ; move one line down
113+  B377 4F               ld c,a
114+  B378 ED 43 D2 B2      ld (ship_current_coords),bc  ; put into memory
115+  B37C CD 80 B3         call ship_draw
116+  B37F C9               ret
117+  B380
118+  B380              ;
119+  B380              ; Draw the ship
120+  B380              ; Inputs:
121+  B380              ; None, all in memory
122+  B380              ;
123+  B380              ship_draw:
124+  B380 3E 04            ld a,4                              ; 4 pieces per half
125+  B382              ship_draw0:
126+  B382 F5               push af
127+  B383 2A D0 B2         ld hl,(ship_current_sprite)
128+  B386 ED 4B D2 B2      ld bc,(ship_current_coords)         ; load bc with the start coords
129+  B38A CD AD A5         call sprites_drawsprite
130+  B38D 2A D0 B2         ld hl,(ship_current_sprite)
131+  B390 ED 4B D2 B2      ld bc,(ship_current_coords)         ; load bc with the start coords
132+  B394 11 08 00         ld de,8
133+  B397 19               add hl,de
134+  B398 80 C6 08         add b,8
135+  B39B 47               ld b,a
136+  B39C 22 D0 B2         ld (ship_current_sprite),hl         ; put into memory
137+  B39F ED 43 D2 B2      ld (ship_current_coords),bc         ; put into memory
138+  B3A3 F1               pop af
139+  B3A4 3D               dec a
140+  B3A5 FE 00            cp 0
141+  B3A7 C2 82 B3         jp nz,ship_draw0
142+  B3AA
143+  B3AA C9               ret
144+  B3AB
# file closed: game/ship.asm
 35   B3AB                  include "game\tank.asm"
# file opened: game/tank.asm
  1+  B3AB              ;
  2+  B3AB              ; tank initial position: vert,horiz
  3+  B3AB              ;
  4+  B3AB              tank_initpos:
  5+  B3AB 10 D0            defb 16,208
  6+  B3AD              tank_initpos2:
  7+  B3AD 00 00            defb 0,0
  8+  B3AF              tank_frame:
  9+  B3AF 00               defb 0
 10+  B3B0              tank_anim:
 11+  B3B0 11               defb 17
 12+  B3B1              ;
 13+  B3B1              ; The current memory location
 14+  B3B1              ;
 15+  B3B1              tank_current_sprite:
 16+  B3B1 00 00            defb 0,0
 17+  B3B3
 18+  B3B3              tank_current_coords:
 19+  B3B3 00 00            defb 0,0
 20+  B3B5
 21+  B3B5              ;
 22+  B3B5              ; Initialise the tank
 23+  B3B5              ;
 24+  B3B5              tank_init:
 25+  B3B5 ED 4B AB B3      ld bc,(tank_initpos)
 26+  B3B9 ED 43 AD B3      ld (tank_initpos2),bc       ; save the initial position for later use
 27+  B3BD C9               ret
 28+  B3BE
 29+  B3BE              ;
 30+  B3BE              ;   Draw and move the tank
 31+  B3BE              ;   Start processing at frame 200
 32+  B3BE              ;   Don't move if anim is zero
 33+  B3BE              ;   Decrement frame if moved
 34+  B3BE              ;
 35+  B3BE              tank_process:
 36+  B3BE 3A B0 B3         ld a,(tank_anim)
 37+  B3C1 FE 00            cp 0
 38+  B3C3 C8               ret z                       ; return if we've already moved
 39+  B3C4 CD 58 B2         call game_getcurrentframe   ; get the current frame number into a
 40+  B3C7 FE 4B            cp 75
 41+  B3C9 D8               ret c                       ; return if the frame number is below 100
 42+  B3CA CD D5 B3         call tank_move              ; move tank if not
 43+  B3CD 3A B0 B3         ld a,(tank_anim)
 44+  B3D0 3D               dec a
 45+  B3D1 32 B0 B3         ld (tank_anim),a            ; decrease the anim count
 46+  B3D4 C9               ret
 47+  B3D5
 48+  B3D5              tank_move:
 49+  B3D5 ED 4B AD B3      ld bc,(tank_initpos2)
 50+  B3D9 C5               push bc
 51+  B3DA 3A B0 B3         ld a,(tank_anim)
 52+  B3DD FE 11            cp 17                       ; check first time flag
 53+  B3DF CA F1 B3         jp z,tank_move1             ; don't draw over previous one if first time
 54+  B3E2 CD F6 B3         call tank_draw_full         ; delete old one
 55+  B3E5 ED 4B AD B3      ld bc,(tank_initpos2)       ; get the current coords
 56+  B3E9 78               ld a,b
 57+  B3EA D6 01            sub 1                       ; move back one pixels
 58+  B3EC 47               ld b,a
 59+  B3ED ED 43 AD B3      ld (tank_initpos2),bc
 60+  B3F1              tank_move1:
 61+  B3F1 CD F6 B3         call tank_draw_full         ; draw the tank
 62+  B3F4 C1               pop bc
 63+  B3F5 C9               ret
 64+  B3F6
 65+  B3F6              tank_draw_full:
 66+  B3F6 21 53 AE         ld hl,tank_sprite
 67+  B3F9 ED 4B AD B3      ld bc,(tank_initpos2)         ; load bc with the start coords
 68+  B3FD 22 B1 B3         ld (tank_current_sprite),hl  ; put into memory
 69+  B400 ED 43 B3 B3      ld (tank_current_coords),bc  ; put into memory
 70+  B404 CD 23 B4         call tank_draw
 71+  B407 08               ex af,af'
 72+  B408 3A AF B3         ld a,(tank_frame)            ; get the animation frame
 73+  B40B 16 00            ld d,0
 74+  B40D 5F               ld e,a
 75+  B40E 19               add hl,de
 76+  B40F 22 B1 B3         ld (tank_current_sprite),hl  ; put into memory
 77+  B412 08               ex af,af'
 78+  B413 ED 4B AD B3      ld bc,(tank_initpos2)         ; load bc with the start coords
 79+  B417 81 C6 08         add c,8                      ; move one line down
 80+  B41A 4F               ld c,a
 81+  B41B ED 43 B3 B3      ld (tank_current_coords),bc  ; put into memory
 82+  B41F CD 23 B4         call tank_draw
 83+  B422 C9               ret
 84+  B423
 85+  B423              ;
 86+  B423              ; Draw the tank
 87+  B423              ; Inputs:
 88+  B423              ; None, all in memory
 89+  B423              ;
 90+  B423              tank_draw:
 91+  B423 3E 04            ld a,4                              ; 4 pieces per half
 92+  B425              tank_draw0:
 93+  B425 F5               push af
 94+  B426 2A B1 B3         ld hl,(tank_current_sprite)
 95+  B429 ED 4B B3 B3      ld bc,(tank_current_coords)         ; load bc with the start coords
 96+  B42D CD AD A5         call sprites_drawsprite
 97+  B430 2A B1 B3         ld hl,(tank_current_sprite)
 98+  B433 ED 4B B3 B3      ld bc,(tank_current_coords)         ; load bc with the start coords
 99+  B437 11 08 00         ld de,8
100+  B43A 19               add hl,de
101+  B43B 80 C6 08         add b,8
102+  B43E 47               ld b,a
103+  B43F 22 B1 B3         ld (tank_current_sprite),hl         ; put into memory
104+  B442 ED 43 B3 B3      ld (tank_current_coords),bc         ; put into memory
105+  B446 F1               pop af
106+  B447 3D               dec a
107+  B448 FE 00            cp 0
108+  B44A C2 25 B4         jp nz,tank_draw0
109+  B44D
110+  B44D C9               ret
111+  B44E
# file closed: game/tank.asm
 36   B44E                  include "game\rocks.asm"
# file opened: game/rocks.asm
  1+  B44E              ;
  2+  B44E              ; A structure of falling rocks
  3+  B44E              ; Assume we'll never have more than 4 falling at any one time
  4+  B44E              ; (1,2 - 16 bit memory location for rock graphic),state (0 fell, 1 falling, 2 wobbling), countdown
  5+  B44E              ;
  6+  B44E              rocks_falling:
  7+  B44E 00 00 00 00      defb 0,0,0,0
  8+  B452 00 00 00 00      defb 0,0,0,0
  9+  B456 00 00 00 00      defb 0,0,0,0
 10+  B45A 00 00 00 00      defb 0,0,0,0
 11+  B45E
 12+  B45E              rocks_tmp:
 13+  B45E 00               defb 0
 14+  B45F
 15+  B45F              rocks_tmp2:
 16+  B45F 00 00            defb 0,0
 17+  B461
 18+  B461              ;
 19+  B461              ; Checks for a rock that needs to start falling. Takes a memory location of the first line at the bottom of the space.
 20+  B461              ; Checks to see if the pixel row in that location is a rock bottom. If it is, mark this rock as ready to fall.
 21+  B461              ; If the pixel row is not the rock bottom, stop checking.
 22+  B461              ; Inputs:
 23+  B461              ; hl- memory location
 24+  B461              ;
 25+  B461              rocks_checkforfalling:
 26+  B461 7E               ld a,(hl)           ; get the pixel row in this memory location
 27+  B462 FE 7E            cp 126              ; check against the bottom pixel row of the rock graphic
 28+  B464 C2 6A B4         jp nz,rocks_checkforfalling2 ; not a rock, stop
 29+  B467 CD 6B B4         call rocks_addrocktofalling ; mark the rock as falling
 30+  B46A              rocks_checkforfalling2:
 31+  B46A C9               ret
 32+  B46B
 33+  B46B              ;
 34+  B46B              ; Adds the rock to the structure that tracks falling rocks
 35+  B46B              ; Inputs:
 36+  B46B              ; hl - memory location of falling rock graphic
 37+  B46B              ; bc - coords of rock, c vert
 38+  B46B              rocks_addrocktofalling:
 39+  B46B C5               push bc             ; store the coords
 40+  B46C 11 4E B4         ld de,rocks_falling
 41+  B46F 06 04            ld b,4              ; number of possible falling rocks
 42+  B471              rocks_addrocktofalling0:
 43+  B471 13               inc de
 44+  B472 13               inc de
 45+  B473 13               inc de              ; move three along to get the state
 46+  B474 1A               ld a,(de)           ; load the state
 47+  B475 FE 00            cp 0                ; check if this is not falling
 48+  B477 C2 8C B4         jp nz,rocks_addrocktofalling1 ; continue the loop if not 0
 49+  B47A 3E 10            ld a,16             ; load the number of frames to wobble
 50+  B47C 12               ld (de),a
 51+  B47D 1B               dec de              ; move de back to state
 52+  B47E 3E 02            ld a,2
 53+  B480 12               ld (de),a           ; set the state to wobbling
 54+  B481 1B               dec de              ; move back coords
 55+  B482 C1               pop bc              ; get back coords
 56+  B483 78               ld a,b
 57+  B484 12               ld (de),a           ; store the vertical
 58+  B485 1B               dec de
 59+  B486 79               ld a,c
 60+  B487 12               ld (de),a           ; store the horizontal
 61+  B488 C5               push bc
 62+  B489 C3 8F B4         jp rocks_addrocktofalling2 ; done
 63+  B48C              rocks_addrocktofalling1:
 64+  B48C 13               inc de              ; move memory along to next rock
 65+  B48D 10 E2            djnz rocks_addrocktofalling0 ; try the next rock
 66+  B48F              rocks_addrocktofalling2: ; done, return
 67+  B48F C1               pop bc              ; to tidy up
 68+  B490 C9               ret
 69+  B491
 70+  B491              ;
 71+  B491              ; Processes any falling rocks
 72+  B491              ;
 73+  B491              rocks_processrocks:
 74+  B491 DD 21 4E B4      ld ix,rocks_falling
 75+  B495 06 04            ld b,4              ; the number of rocks to check
 76+  B497              rocks_processrocks0:
 77+  B497 C5               push bc             ; store loop count
 78+  B498 DD 4E 00 DD      ld bc,(ix)          ; load the coords for this rock into bc
 78+  B49C 46 01
 79+  B49E DD 23            inc ix
 80+  B4A0 DD 23            inc ix              ; move to the state
 81+  B4A2 DD 7E 00         ld a,(ix)           ; load the state into a
 82+  B4A5 FE 00            cp 0
 83+  B4A7 CA C6 B4         jp z,rocks_processrocks3 ; if not falling, check next
 84+  B4AA FE 02            cp 2
 85+  B4AC C2 BC B4         jp nz, rocks_processrocks2
 86+  B4AF                  ; we're wobbling
 87+  B4AF DD 23            inc ix              ; get frame number for wobble
 88+  B4B1 DD 7E 00         ld a,(ix)           ; get wobble frame into a
 89+  B4B4 CD 4B B5         call rocks_wobble
 90+  B4B7 DD 23            inc ix              ; increment for next
 91+  B4B9 C3 CA B4         jp rocks_processrocks1  ; do next rock
 92+  B4BC              rocks_processrocks2:
 93+  B4BC                  ; we're falling
 94+  B4BC CD CE B4         call rocks_fall
 95+  B4BF DD 23            inc ix
 96+  B4C1 DD 23            inc ix              ; inc ix to get to next
 97+  B4C3 C3 CA B4         jp rocks_processrocks1
 98+  B4C6              rocks_processrocks3:
 99+  B4C6 DD 23            inc ix
100+  B4C8 DD 23            inc ix
101+  B4CA              rocks_processrocks1:
102+  B4CA C1               pop bc              ; get loop count back
103+  B4CB 10 CA            djnz rocks_processrocks0
104+  B4CD C9               ret
105+  B4CE
106+  B4CE              ;
107+  B4CE              ; Falls a rock one pixel, checks the next square down to see if it is empty, if not, stop falling
108+  B4CE              ; bc - coord of current rock graphic on screen
109+  B4CE              ; ix - memory location of current rock in rock list, currently at the 3rd position (rock state)
110+  B4CE              ;
111+  B4CE              rocks_fall:
112+  B4CE DD 2B            dec ix
113+  B4D0 DD 2B            dec ix              ; decrease ix back to coords
114+  B4D2 ED 43 5F B4      ld (rocks_tmp2),bc  ; store original coords
115+  B4D6 3E 03            ld a,3              ; move this number of pixels
116+  B4D8              rocks_fall1:
117+  B4D8 08               ex af,af'
118+  B4D9 DD 4E 00 DD      ld bc,(ix)          ; get current coords
118+  B4DD 46 01
119+  B4DF CD F0 A5         call sprites_scadd  ; get the memory of the coords into de
120+  B4E2 14               inc d               ; add 256 to get next row
121+  B4E3 1A               ld a,(de)           ; get the contents of the next row
122+  B4E4 FE 00            cp 0
123+  B4E6 C2 36 B5         jp nz,rocks_fall3    ; move the rock if the row is empty
124+  B4E9 0C               inc c               ; increment the vertical
125+  B4EA DD 71 00 DD      ld (ix),bc          ; store the new coords
125+  B4EE 70 01
126+  B4F0 79               ld a,c              ; get the vertical coord into a
127+  B4F1 E6 07            and 7               ; divisible by 8?
128+  B4F3 FE 00            cp 0
129+  B4F5 C2 10 B5         jp nz,rocks_fall4   ; if not, carry on
130+  B4F8 CD 50 A5         call screen_getattraddressfromscreencoords ; get the attr address into de
131+  B4FB 62 6B            ld hl,de
132+  B4FD 36 42            ld (hl),66          ; load this square with the yellow colour
133+  B4FF DD 4E 00 DD      ld bc,(ix)
133+  B503 46 01
134+  B505 79               ld a,c              ; get vertical
135+  B506 D6 08            sub 8               ; look up one square
136+  B508 4F               ld c,a              ; put a back in c
137+  B509 CD 50 A5         call screen_getattraddressfromscreencoords ; get the attr address into de
138+  B50C 62 6B            ld hl,de
139+  B50E 36 46            ld (hl),70          ; load this square with the yellow colour
140+  B510              rocks_fall4:
141+  B510 08               ex af,af'
142+  B511 3D               dec a
143+  B512 FE 00            cp 0
144+  B514 C2 D8 B4         jp nz,rocks_fall1   ; do another pixel if needed
145+  B517              rocks_fall2:
146+  B517 3E 09            ld a,9              ; rock graphic
147+  B519 ED 4B 5F B4      ld bc,(rocks_tmp2)  ; get the original coords
148+  B51D CD 8B A5         call screen_getblock     ; get the memory into hl
149+  B520 CD AD A5         call sprites_drawsprite  ; draw the sprite - over the top of the current one
150+  B523 3E 09            ld a,9
151+  B525 DD 4E 00 DD      ld bc,(ix)          ; get the new coords
151+  B529 46 01
152+  B52B CD 8B A5         call screen_getblock     ; get the memory into hl
153+  B52E CD AD A5         call sprites_drawsprite  ; draw the sprite - over the top of the current one
154+  B531 DD 23            inc ix
155+  B533 DD 23            inc ix                  ; get ix back to state
156+  B535 C9               ret
157+  B536              rocks_fall3:
158+  B536 3E 00            ld a,0              ; set the state to fell
159+  B538 DD 77 02         ld (ix+2),a           ; store the falling state
160+  B53B DD 4E 00 DD      ld bc,(ix)          ; get the coords
160+  B53F 46 01
161+  B541 CD 50 A5         call screen_getattraddressfromscreencoords ; get the attr address into de
162+  B544 62 6B            ld hl,de
163+  B546 36 42            ld (hl),66
164+  B548 C3 17 B5         jp rocks_fall2      ; rejoin main loop
165+  B54B
166+  B54B              ;
167+  B54B              ; Wobbles a rocks
168+  B54B              ; Inputs:
169+  B54B              ; bc - coord of current rock graphic on screen
170+  B54B              ; ix - memory location of current rock in rock list, currently at the 4th position (wobble count)
171+  B54B              ; a - wobble frame
172+  B54B              rocks_wobble:
173+  B54B 3A 5E B4         ld a,(rocks_tmp)    ; get the frame toggle
174+  B54E 1E 09            ld e,9              ; this is the rock frame
175+  B550 83               add a,e             ; add the frame toggle
176+  B551 C5               push bc
177+  B552 CD 8B A5         call screen_getblock     ; get the memory into hl
178+  B555 CD AD A5         call sprites_drawsprite  ; draw the sprite - over the top of the current one
179+  B558 3A 5E B4         ld a,(rocks_tmp)    ; get the frame toggle against
180+  B55B EE 01            xor 1               ; flip to other state
181+  B55D 32 5E B4         ld (rocks_tmp),a    ; store
182+  B560 1E 09            ld e,9              ; this is the rock frame
183+  B562 83               add a,e             ; add the frame toggle
184+  B563 CD 8B A5         call screen_getblock     ; get the memory into hl
185+  B566 C1               pop bc
186+  B567 CD AD A5         call sprites_drawsprite  ; draw the sprite again with the new frame - next time it will do the opposite
187+  B56A DD 7E 00         ld a,(ix)           ; get the wobble count back
188+  B56D 3D               dec a               ; decrease
189+  B56E DD 77 00         ld (ix),a           ; store
190+  B571 FE 00            cp 0
191+  B573 C0               ret nz              ; if we're not at zero, return
192+  B574 DD 2B            dec ix              ; otherwise look to state location
193+  B576 3E 01            ld a,1              ; set the state to falling
194+  B578 DD 77 00         ld (ix),a           ; store the falling state
195+  B57B DD 23            inc ix              ; set ix back to location of wobble count, and we're done
196+  B57D C9               ret
197+  B57E
# file closed: game/rocks.asm
 37   B57E                  include "game\scores.asm"
# file opened: game/scores.asm
  1+  B57E              ;
  2+  B57E              ; The score of the current player
  3+  B57E              ;
  4+  B57E              scores_current:
  5+  B57E 30 30 30 30      defb '000000'
  5+  B582 30 30
  6+  B584
  7+  B584              ;
  8+  B584              ; The current high score table
  9+  B584              ;
 10+  B584              scores_table:
 11+  B584 03 17 47 41      defb 3,23,'GAM',255
 11+  B588 4D FF
 12+  B58A 06 17 30 30      defb 6,23,'00000 ',255
 12+  B58E 30 30 30 20
 12+  B592 FF
 13+  B593 0C 17 47 41      defb 12,23,'GAM',255
 13+  B597 4D FF
 14+  B599 0F 17 30 30      defb 15,23,'00000 ',255
 14+  B59D 30 30 30 20
 14+  B5A1 FF
 15+  B5A2 15 17 47 41      defb 21,23,'GAM',255
 15+  B5A6 4D FF
 16+  B5A8 18 17 30 30      defb 24,23,'00000 ',255
 16+  B5AC 30 30 30 20
 16+  B5B0 FF
 17+  B5B1
 18+  B5B1              ;
 19+  B5B1              ; Displays the high score table at the bottom of the screen
 20+  B5B1              ;
 21+  B5B1              scores_showtable:
 22+  B5B1 21 84 B5         ld hl, scores_table
 23+  B5B4 CD A4 82         call string_print
 24+  B5B7 21 8A B5         ld hl, scores_table+6
 25+  B5BA CD A4 82         call string_print
 26+  B5BD 21 93 B5         ld hl, scores_table+15
 27+  B5C0 CD A4 82         call string_print
 28+  B5C3 21 99 B5         ld hl, scores_table+21
 29+  B5C6 CD A4 82         call string_print
 30+  B5C9 21 A2 B5         ld hl, scores_table+30
 31+  B5CC CD A4 82         call string_print
 32+  B5CF 21 A8 B5         ld hl, scores_table+36
 33+  B5D2 CD A4 82         call string_print
 34+  B5D5 C9               ret
# file closed: game/scores.asm
 38   B5D6                  include "game\diamonds.asm"
# file opened: game/diamonds.asm
  1+  B5D6              ;
  2+  B5D6              ; Changes the attribute of gem and diamond cells based on the frame count
  3+  B5D6              ; Inputs:
  4+  B5D6              ; hl - memory location of gem type
  5+  B5D6              diamonds_twinkle_type:
  6+  B5D6 CD 58 B2         call game_getcurrentframe       ; get current frame number
  7+  B5D9 E6 07            and 7                           ; want a number from 0-7
  8+  B5DB C6 40            add 64                          ; add to 60 to get attr colour
  9+  B5DD              diamonds_twinkle_type0:
 10+  B5DD 4E               ld c,(hl)                      ; get coords into bc
 11+  B5DE 08               ex af, af'
 12+  B5DF 79               ld a,c                          ; load c into add
 13+  B5E0 FE FF            cp 255                          ; is this the end?
 14+  B5E2 CA F9 B5         jp z,diamonds_twinkle_type1           ; step out if so
 15+  B5E5 23               inc hl
 16+  B5E6 23               inc hl
 17+  B5E7 7E               ld a,(hl)                       ; check the state, don't process if collection
 18+  B5E8 FE 01            cp 1
 19+  B5EA CA F9 B5         jp z,diamonds_twinkle_type1           ; step out if so
 20+  B5ED 23               inc hl
 21+  B5EE 08               ex af,af'
 22+  B5EF 5E 23 56 2B      ld de,(hl)                      ; get the memory location into de
 23+  B5F3 12               ld (de),a                       ; set the value of attr
 24+  B5F4 23               inc hl
 25+  B5F5 23               inc hl                          ; move to next diamond
 26+  B5F6 C3 DD B5         jp diamonds_twinkle_type0
 27+  B5F9              diamonds_twinkle_type1:
 28+  B5F9 C9               ret
 29+  B5FA
 30+  B5FA              ;
 31+  B5FA              ; Initialise diamonds and gems
 32+  B5FA              ;
 33+  B5FA              diamonds_twinkle
 34+  B5FA 21 97 AC         ld hl, level01diamonds
 35+  B5FD CD D6 B5         call diamonds_twinkle_type
 36+  B600 21 A7 AC         ld hl, level01gems
 37+  B603 CD D6 B5         call diamonds_twinkle_type
 38+  B606 C9               ret
 39+  B607
 40+  B607              ;
 41+  B607              ; Initialise diamonds and gems
 42+  B607              ;
 43+  B607              diamonds_init:
 44+  B607 21 97 AC         ld hl, level01diamonds
 45+  B60A CD 14 B6         call diamonds_init_type
 46+  B60D 21 A7 AC         ld hl, level01gems
 47+  B610 CD 14 B6         call diamonds_init_type
 48+  B613 C9               ret
 49+  B614
 50+  B614              ;
 51+  B614              ; Initialise diamonds or gems, get memory addresses
 52+  B614              ; Inputs:
 53+  B614              ; hl - memory location
 54+  B614              diamonds_init_type:
 55+  B614 4E               ld c,(hl)                      ; get coords into c
 56+  B615 79               ld a,c                          ; load c into add
 57+  B616 FE FF            cp 255                          ; is this the end?
 58+  B618 CA 2D B6         jp z,diamonds_init_type1             ; step out if so
 59+  B61B 23               inc hl
 60+  B61C 46               ld b,(hl)                       ; get coords into b
 61+  B61D E5               push hl
 62+  B61E CD 20 A5         call screen_getcellattradress ; get memory of attr for this diamond into de
 63+  B621 E1               pop hl
 64+  B622 23               inc hl                          ; move to state
 65+  B623 23               inc hl                          ; move to memory
 66+  B624 73 23 72 2B      ld (hl),de                      ; store the memory location
 67+  B628 23               inc hl                          ; move to next diamond
 68+  B629 23               inc hl
 69+  B62A C3 14 B6         jp diamonds_init_type
 70+  B62D              diamonds_init_type1:
 71+  B62D C9               ret
# file closed: game/diamonds.asm
 39   B62E
 40   B62E              ;===========================================================================
 41   B62E              ; main routine - the code execution starts here.
 42   B62E              ; Sets up the new interrupt routine, the memory
 43   B62E              ; banks and jumps to the start loop.
 44   B62E              ;===========================================================================
 45   B62E              main:
 46   B62E
 47   B62E                  ; Setup stack
 48   B62E 31 32 B7         ld sp,stack_top
 49   B631
 50   B631                  ; Draw the title screen
 51   B631 CD 15 A6         call titlescreen_show
 52   B634
 53   B634 CD 00 80         call init_start
 54   B637 CD 48 A4         call screen_draw
 55   B63A CD 65 B2         call player_init
 56   B63D CD D4 B2         call ship_land              ; land the ship
 57   B640 CD B5 B3         call tank_init
 58   B643 CD 07 B6         call diamonds_init
 59   B646
 60   B646              mloop:
 61   B646 76               halt
 62   B647 CD 4D B6         call main_loop_processing
 63   B64A C3 46 B6         jp mloop
 64   B64D
 65   B64D              main_loop_processing:
 66   B64D F3               di
 67   B64E CD 8E A3         call screen_buffertoscreen  ; copy buffer to screen
 68   B651 FB               ei                          ; enable interupts
 69   B652
 70   B652 CD 6E B2         call player_drawplayer      ; delete player
 71   B655 CD 9B AE         call control_keyboard       ; check keyboard
 72   B658 CD 6E B2         call player_drawplayer      ; draw player
 73   B65B CD BE B3         call tank_process           ; prcoess the tank
 74   B65E CD 91 B4         call rocks_processrocks     ; process falling rocks
 75   B661 CD FA B5         call diamonds_twinkle       ; make the diamonds twinkle
 76   B664
 77   B664 CD 50 B2         call game_incrementframe    ; increment the game frame
 78   B667
 79   B667 C9               ret
 80   B668
 81   B668              ;===========================================================================
 82   B668              ; Stack.
 83   B668              ;===========================================================================
 84   B668
 85   B668              ; Stack: this area is reserved for the stack
 86   B668              STACK_SIZE: equ 100    ; in words
 87   B668
 88   B668              ; Reserve stack space
 89   B668 00 00            defw 0  ; WPMEM, 2
 90   B66A              stack_bottom:
 91   B66A 00 00 00...      defs    STACK_SIZE*2, 0
 92   B732              stack_top:
 93   B732 00 00            defw 0  ; WPMEM, 2
 94   B734
 95   B734                     SAVESNA "ThePit.sna", main
# file closed: main.asm
