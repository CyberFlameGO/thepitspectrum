# file opened: main.asm
  1   0000                  DEVICE ZXSPECTRUM48
  2   0000
  3   0000                  ORG $8000
  4   8000
  5   8000              ;===========================================================================
  6   8000              ; Persistent watchpoint.
  7   8000              ; Change WPMEMx (remove the 'x' from WPMEMx) below to activate.
  8   8000              ; If you do so the program will hit a breakpoint when it tries to
  9   8000              ; write to the first byte of the 3rd line.
 10   8000              ; When program breaks in the fill_memory sub routine please hover over hl
 11   8000              ; to see that it contains 0x5804 or COLOR_SCREEN+64.
 12   8000              ;===========================================================================
 13   8000
 14   8000              ; WPMEMx 0x5840, 1, w
 15   8000
 16   8000
 17   8000              ;===========================================================================
 18   8000              ; Include modules
 19   8000              ;===========================================================================
 20   8000                  include "init.asm"
# file opened: init.asm
  1+  8000              ;
  2+  8000              ; Set up at start up
  3+  8000              ;
  4+  8000              init_start:
  5+  8000              ; We want a black screen.
  6+  8000 CD 6B 0D         call $0D6B
  7+  8003 3E 47            ld a,71             ; white ink (7) on black paper (0),
  8+  8005                                      ; bright (64).
  9+  8005 32 8D 5C         ld (23693),a        ; set our screen colours.
 10+  8008 AF               xor a               ; quick way to load accumulator with zero.
 11+  8009 CD 9B 22         call 8859           ; set permanent border colours.
 12+  800C CD AF 0D         call 3503           ; ROM routine - clears screen, opens chan 2.
 13+  800F
 14+  800F C9               ret
 15+  8010
 16+  8010              ;
 17+  8010              ;   Start coord
 18+  8010              ;   vert c, horiz b
 19+  8010              start_coord:
 20+  8010 18 30            defb 24,48
 21+  8012
# file closed: init.asm
 21   8012                  include "utilities.asm"
# file opened: utilities.asm
  1+  8012              ; ##########################################################################
  2+  8012              ; Print a character
  3+  8012              ; Inputs:
  4+  8012              ; b - x coord
  5+  8012              ; c - y coord
  6+  8012              ; d - character
  7+  8012              ; e - colour
  8+  8012              ; ##########################################################################
  9+  8012              utilities_print_char:
 10+  8012 7B               ld a,e
 11+  8013 32 8F 5C         ld (23695),a        ; set our temporary screen colours.
 12+  8016 3E 16            ld a,22
 13+  8018 D7               rst 16              ; Calls the Sinclair PRINT AT routine
 14+  8019 78               ld a,b              ; Gets the X co-ordinate
 15+  801A 3D               dec a
 16+  801B D7               rst 16
 17+  801C 79               ld a,c              ; and the Y co-ordinate
 18+  801D D7               rst 16              ; So, essentially PRINT AT X,Y; like in BASIC
 19+  801E 7A               ld a,d              ; ASCII code for udg.
 20+  801F D7               rst 16              ; draw block.
 21+  8020 C9               ret
 22+  8021
 23+  8021
 24+  8021              ;Inputs:
 25+  8021              ;     DE and A are factors
 26+  8021              ;Outputs:
 27+  8021              ;     A is not changed
 28+  8021              ;     B is 0
 29+  8021              ;     C is not changed
 30+  8021              ;     DE is not changed
 31+  8021              ;     HL is the product
 32+  8021              ;Time:
 33+  8021              ;     342+6x
 34+  8021              ;
 35+  8021              utilities_multiply:
 36+  8021 06 08            ld b,8          ;7           7
 37+  8023 21 00 00         ld hl,0         ;10         10
 38+  8026 29               add hl,hl     ;11*8       88
 39+  8027 07               rlca          ;4*8        32
 40+  8028 30 01            jr nc,$+3     ;(12|18)*8  96+6x
 41+  802A 19                   add hl,de   ;--         --
 42+  802B 10 F9            djnz $-5      ;13*7+8     99
 43+  802D C9               ret             ;10         10
 44+  802E
 45+  802E              utilities_waitforkey:
 46+  802E 21 08 5C         ld hl,23560         ; LAST K system variable.
 47+  8031 36 00            ld (hl),0           ; put null value there.
 48+  8033              utilities_waitforkey0:
 49+  8033 7E               ld a,(hl)           ; new value of LAST K.
 50+  8034 FE 00            cp 0                ; is it still zero?
 51+  8036 28 FB            jr z,utilities_waitforkey0           ; yes, so no key pressed.
 52+  8038 C9               ret                 ; key was pressed.
 53+  8039
# file closed: utilities.asm
 22   8039                  include "strings.asm"
# file opened: strings.asm
  1+  8039              string_score1:
  2+  8039 04 00 53 43      defb 4,0,'SCORE1',255
  2+  803D 4F 52 45 31
  2+  8041 FF
  3+  8042              string_scorenumbers1:
  4+  8042 04 01 30 30      defb 4,1,'000000',255
  4+  8046 30 30 30 30
  4+  804A FF
  5+  804B              string_company:
  6+  804B 0D 00 43 45      defb 13,0,'CENTURI',255
  6+  804F 4E 54 55 52
  6+  8053 49 FF
  7+  8055              string_credits:
  8+  8055 0C 01 43 52      defb 12,1,'CREDITS 1',255
  8+  8059 45 44 49 54
  8+  805D 53 20 31 FF
  9+  8061              string_score2:
 10+  8061 17 00 53 43      defb 23,0,'SCORE2',255
 10+  8065 4F 52 45 32
 10+  8069 FF
 11+  806A              string_scorenumbers2:
 12+  806A 17 01 30 30      defb 23,1,'000000',255
 12+  806E 30 30 30 30
 12+  8072 FF
 13+  8073              string_titlescreen_copyright:
 14+  8073 04 16 7F 20      defb 4,22, 127,' 1982 AW ZILEC ELC LTD',255
 14+  8077 31 39 38 32
 14+  807B 20 41 57 20
 14+  807F 5A 49 4C 45
 14+  8083 43 20 45 4C
 14+  8087 43 20 4C 54
 14+  808B 44 FF
 15+  808D
 16+  808D              ;
 17+  808D              ; Prints specified string
 18+  808D              ; Inputs:
 19+  808D              ; de: pointer to string
 20+  808D              ; bc: length of string
 21+  808D              ;
 22+  808D              ; Print String Data
 23+  808D              ; First two bytes of string contain X and Y char position, then the string
 24+  808D              ; Individual strings are terminated with 0xFE
 25+  808D              ; End of data is terminated with 0xFF
 26+  808D              ; HL: Address of string
 27+  808D              ;
 28+  808D 5E           string_print:           LD E,(HL)                       ; Fetch the X coordinate
 29+  808E 23                                   INC HL                          ; Increase HL to the next memory location
 30+  808F 56                                   LD D,(HL)                       ; Fetch the Y coordinate
 31+  8090 23                                   INC HL                          ; Increase HL to the next memory location
 32+  8091 CD A4 80                             CALL string_getcharaddress           ; Calculate the screen address (in DE)
 33+  8094 7E           string_print_0:         LD A,(HL)                       ; Fetch the character to print
 34+  8095 23                                   INC HL                          ; Increase HL to the next character
 35+  8096 FE FE                                CP 0xFE                         ; Compare with 0xFE
 36+  8098 28 F3                                JR Z,string_print               ; If it is equal to 0xFE then loop back to print next string
 37+  809A D0                                   RET NC                          ; If it is greater or equal to (carry bit set) then
 38+  809B E5                                   PUSH HL                         ; Push HL on stack (Print_Char will not preserve HL)
 39+  809C CD B4 80                             CALL Print_Char                 ; Print the character
 40+  809F E1                                   POP HL                          ; Retrieve HL back off the stack
 41+  80A0 1C                                   INC E                           ; Go to the next screen address
 42+  80A1 18 F1                                JR string_print_0               ; Loop back to print next character
 43+  80A3 C9                                   RET
 44+  80A4
 45+  80A4              ; Get screen address
 46+  80A4              ; D = Y character position
 47+  80A4              ; E = X character position
 48+  80A4              ; Returns address in DE
 49+  80A4              ;
 50+  80A4 7A           string_getcharaddress:       LD A,D
 51+  80A5 E6 07                                AND %00000111
 52+  80A7 1F                                   RRA
 53+  80A8 1F                                   RRA
 54+  80A9 1F                                   RRA
 55+  80AA 1F                                   RRA
 56+  80AB B3                                   OR E
 57+  80AC 5F                                   LD E,A
 58+  80AD 7A                                   LD A,D
 59+  80AE E6 18                                AND %00011000
 60+  80B0 F6 40                                OR %01000000
 61+  80B2 57                                   LD D,A
 62+  80B3 C9                                   RET                             ; Returns screen address in DE
 63+  80B4
 64+  80B4              ; Print a single character out
 65+  80B4              ; A:  Character to print
 66+  80B4              ; DE: Screen address to print character at
 67+  80B4              ;
 68+  80B4 21 00 3C     Print_Char:             LD HL,0x3C00                    ; Address of character set table in ROM
 69+  80B7 06 00                                LD B,0                          ; Set BC to A
 70+  80B9 4F                                   LD C,A
 71+  80BA E6 FF                                AND 0xFF                        ; Clear the carry bit
 72+  80BC CB 11                                RL C                            ; Multiply BC by 8 (shift left 3 times)
 73+  80BE CB 10                                RL B
 74+  80C0 CB 11                                RL C
 75+  80C2 CB 10                                RL B
 76+  80C4 CB 11                                RL C
 77+  80C6 CB 10                                RL B
 78+  80C8 09                                   ADD HL,BC                       ; Get the character address in HL
 79+  80C9 0E 08                                LD C,8                          ; Loop counter
 80+  80CB D5                                   PUSH DE
 81+  80CC 7E           Print_Char_1:           LD A,(HL)                       ; Get the byte from the ROM into A
 82+  80CD 12                                   LD (DE),A                       ; Stick A onto the screen
 83+  80CE 14                                   INC D                           ; Goto next line on screen
 84+  80CF 2C                                   INC L                           ; Goto next byte of character
 85+  80D0 0D                                   DEC C                           ; Decrease the loop counter
 86+  80D1 20 F9                                JR NZ,Print_Char_1              ; Loop around whilst it is Not Zero (NZ)
 87+  80D3 D1                                   POP DE
 88+  80D4 C9                                   RET                             ; Return from the subroutine
# file closed: strings.asm
 23   80D5                  include "screen\screen.asm"
# file opened: screen/screen.asm
  1+  80D5              screen_buffer:
  2+  80D5 00 00 00...      defs 7424                   ; area reserved for screen
  3+  9DD5
  4+  9DD5              screen_attr_buffer:
  5+  9DD5 00 00 00...      defs 928                    ; attrs buffer area
  6+  A175
  7+  A175              screen_offset:
  8+  A175 00               defb 0                      ; offset from top of screen in lines
  9+  A176
 10+  A176              ;
 11+  A176              ; Copies the buffer to the screen. Use stack.
 12+  A176              ; Inputs: none
 13+  A176              ;
 14+  A176              screen_buffertoscreen:
 15+  A176 3A 75 A1         ld a,(screen_offset)          ; load the screen offset, this is in rows, want it *256
 16+  A179 11 00 01         ld de,256
 17+  A17C CD 21 80         call utilities_multiply
 18+  A17F 54 5D            ld de,hl
 19+  A181 21 D5 80         ld hl,screen_buffer
 20+  A184 19               add hl,de                   ; add the offset
 21+  A185 ED 73 F1 A1      ld (screen_buffertoscreen1+1),sp ; this is some self-modifying code; stores the stack pointer in an ld sp,nn instruction at the end
 22+  A189 D9               exx
 23+  A18A 21 50 40         ld hl,16384+80              ; where the actual screen is, but as we're using the stack it's the right hand side of the buffer (16+32+32)
 24+  A18D              screen_buffertoscreen0:
 25+  A18D D9               exx                         ; hl is now buffer
 26+  A18E F9               ld sp,hl                    ; do first sixteen for left hand side
 27+  A18F F1               pop af
 28+  A190 C1               pop bc
 29+  A191 D1               pop de
 30+  A192 DD E1            pop ix
 31+  A194 D9               exx                         ; hl is now screen
 32+  A195 08               ex af,af'
 33+  A196 F1               pop af
 34+  A197 C1               pop bc
 35+  A198 D1               pop de
 36+  A199 FD E1            pop iy
 37+  A19B F9               ld sp,hl
 38+  A19C FD E5            push iy
 39+  A19E D5               push de
 40+  A19F C5               push bc
 41+  A1A0 F5               push af
 42+  A1A1 08               ex af,af'
 43+  A1A2 D9               exx                         ; hl is now buffer
 44+  A1A3 DD E5            push ix
 45+  A1A5 D5               push de
 46+  A1A6 C5               push bc
 47+  A1A7 F5               push af
 48+  A1A8 1E 10            ld e,16                    ; do another sixteen for right hand side
 49+  A1AA 16 00            ld d,0
 50+  A1AC 19               add hl,de
 51+  A1AD F9               ld sp,hl
 52+  A1AE F1               pop af
 53+  A1AF C1               pop bc
 54+  A1B0 D1               pop de
 55+  A1B1 DD E1            pop ix
 56+  A1B3 D9               exx                         ; hl is now screen
 57+  A1B4 08               ex af,af'
 58+  A1B5 1E 10            ld e,16
 59+  A1B7 16 00            ld d,0
 60+  A1B9 19               add hl,de
 61+  A1BA F1               pop af
 62+  A1BB C1               pop bc
 63+  A1BC D1               pop de
 64+  A1BD FD E1            pop iy
 65+  A1BF F9               ld sp,hl
 66+  A1C0 FD E5            push iy
 67+  A1C2 D5               push de
 68+  A1C3 C5               push bc
 69+  A1C4 F5               push af
 70+  A1C5 08               ex af,af'
 71+  A1C6 D9               exx                         ; hl is now buffer
 72+  A1C7 DD E5            push ix
 73+  A1C9 D5               push de
 74+  A1CA C5               push bc
 75+  A1CB F5               push af
 76+  A1CC 1E 10            ld e,16
 77+  A1CE 16 00            ld d,0
 78+  A1D0 19               add hl,de
 79+  A1D1 D9               exx                         ; hl is now screen
 80+  A1D2 1E 10            ld e,16
 81+  A1D4 16 00            ld d,0
 82+  A1D6 ED 52            sbc hl,de
 83+  A1D8 24               inc h
 84+  A1D9 7C               ld a,h
 85+  A1DA E6 07            and 0x07                    ; check if this is multiple of 8, if so, end of cell line
 86+  A1DC 20 AF            jr nz,screen_buffertoscreen0 ; next line in cell
 87+  A1DE 7C               ld a,h
 88+  A1DF D6 08            sub 8
 89+  A1E1 67               ld h,a
 90+  A1E2 7D               ld a,l
 91+  A1E3 C6 20            add a,32
 92+  A1E5 6F               ld l,a
 93+  A1E6 30 A5            jr nc,screen_buffertoscreen0
 94+  A1E8 7C               ld a,h
 95+  A1E9 C6 08            add a,8
 96+  A1EB 67               ld h,a
 97+  A1EC FE 58            cp 0x58
 98+  A1EE 20 9D            jr nz,screen_buffertoscreen0
 99+  A1F0              screen_buffertoscreen1:
100+  A1F0 31 00 00         ld sp,0
101+  A1F3 D9               exx
102+  A1F4 CD F8 A1         call screen_buffertoattrs
103+  A1F7 C9               ret
104+  A1F8
105+  A1F8              screen_buffertoattrs:
106+  A1F8 3A 75 A1         ld a,(screen_offset)            ; get the screen offset in rows, so want *32
107+  A1FB 11 20 00         ld de,32
108+  A1FE CD 21 80         call utilities_multiply
109+  A201 54 5D            ld de,hl
110+  A203 21 D5 9D         ld hl,screen_attr_buffer
111+  A206 19               add hl,de                       ; add the offset
112+  A207 11 40 58         ld de,22528+64                  ; add 32x2 to the attr memory address to account for the top two rows
113+  A20A 01 A0 03         ld bc,928
114+  A20D ED B0            ldir
115+  A20F C9               ret
116+  A210
117+  A210              screen_setscorecolours:
118+  A210 21 6B A8         ld hl,score_colours
119+  A213 11 00 58         ld de,22528                     ; attrs here
120+  A216 01 40 00         ld bc,64
121+  A219 ED B0            ldir
122+  A21B C9               ret
123+  A21C
124+  A21C
125+  A21C              ; Draw the screen
126+  A21C              ; Inputs:
127+  A21C              ; none
128+  A21C              ; Notes:
129+  A21C              ; The value held at screen_offset tells the screen how many rows to scroll down. Set to five to bottom out.
130+  A21C              screen_draw:
131+  A21C                  ;call clear_screen
132+  A21C 0E 00            ld c,0                      ; horiz
133+  A21E 06 00            ld b,0                      ; vert, 0 at top
134+  A220 DD 21 BF A4      ld ix,level01               ; point ix at level data
135+  A224 FD 21 D5 9D      ld iy,screen_attr_buffer    ; point iy at attr data
136+  A228              screen_draw0:
137+  A228 DD 7E 00         ld a,(ix)                   ; load the block number
138+  A22B C5               push bc                     ; store bc, contains loop count
139+  A22C CD 32 A3         call screen_getattr         ; get the memory location for this cell's attr into hl
140+  A22F 7E               ld a,(hl)                   ; get the attr value at the address
141+  A230 FD 77 00         ld (iy),a                   ; load the attr into memory
142+  A233 DD 7E 00         ld a,(ix)                   ; load the block number
143+  A236 CD 27 A3         call screen_getblock        ; get the block data into hl
144+  A239 CD 0D A3         call screen_showchar        ; show this character here
145+  A23C C1               pop bc                      ; get the loop counter back
146+  A23D DD 23            inc ix                      ; increment level location
147+  A23F FD 23            inc iy                      ; increment attr location
148+  A241 0C               inc c                       ; increment horiz
149+  A242 79               ld a,c
150+  A243 FE 20            cp 32                       ; check if horiz has reach edge of screen
151+  A245 C2 28 A2         jp nz,screen_draw0          ; if not, loop
152+  A248 0E 00            ld c,0                      ; if so, reset horiz
153+  A24A 04               inc b                       ; increment vertical
154+  A24B 78               ld a,b
155+  A24C FE 1D            cp 29                       ; check if at bottom
156+  A24E C2 28 A2         jp nz,screen_draw0          ; if not, loop
157+  A251 CD 80 A2         call screen_initrocks       ; draw rocks
158+  A254
159+  A254 CD 58 A2         call screen_setuptext       ; draws text on the screen
160+  A257 C9               ret
161+  A258
162+  A258              ;
163+  A258              ; Sets up text on the screen
164+  A258              ;
165+  A258              screen_setuptext:
166+  A258 21 39 80         ld hl, string_score1
167+  A25B CD 8D 80         call string_print
168+  A25E 21 42 80         ld hl, string_scorenumbers1
169+  A261 CD 8D 80         call string_print
170+  A264 21 4B 80         ld hl, string_company
171+  A267 CD 8D 80         call string_print
172+  A26A 21 61 80         ld hl, string_score2
173+  A26D CD 8D 80         call string_print
174+  A270 21 6A 80         ld hl, string_scorenumbers2
175+  A273 CD 8D 80         call string_print
176+  A276 21 55 80         ld hl, string_credits
177+  A279 CD 8D 80         call string_print
178+  A27C CD 10 A2         call screen_setscorecolours
179+  A27F C9               ret
180+  A280              ;
181+  A280              ; Draw initial rock positions
182+  A280              ; Inputs:
183+  A280              ;
184+  A280              screen_initrocks:
185+  A280 DD 21 5F A8      ld ix,level01rocks          ; load the location of the rock into ix
186+  A284 06 04            ld b,4                      ; length of data
187+  A286              screen_initrocks0:
188+  A286 C5               push bc
189+  A287 DD 4E 00         ld c,(ix)                   ; get the horiz coord
190+  A28A DD 23            inc ix                      ; move to next
191+  A28C DD 46 00         ld b,(ix)                   ; get the vert coord
192+  A28F DD 23            inc ix
193+  A291 CD BC A2         call screen_getcellattradress ; get the memory address of b,c attr into de
194+  A294 3E 09            ld a,9                      ; load the block number for rock
195+  A296 D5               push de
196+  A297 CD 32 A3         call screen_getattr         ; get the memory location for this cell's attr into hl
197+  A29A D1               pop de
198+  A29B 7E               ld a,(hl)                   ; get the attr value at the address
199+  A29C 12               ld (de),a                   ; load the attr into memory
200+  A29D 3E 09            ld a,9                      ; load the block number for rock
201+  A29F CD 27 A3         call screen_getblock        ; get the block data into hl
202+  A2A2 CD 0D A3         call screen_showchar        ; show this character here
203+  A2A5              screen_initrocks1:
204+  A2A5 DD 23            inc ix                      ; move past state
205+  A2A7 C1               pop bc
206+  A2A8 10 DC            djnz screen_initrocks0      ; decrease b and check if zero
207+  A2AA C9               ret
208+  A2AB
209+  A2AB
210+  A2AB              ;
211+  A2AB              ; Return character cell address offset of block at (b, c) ready for addition to screen  memory.
212+  A2AB              ; Inputs:
213+  A2AB              ; bc: coords
214+  A2AB              ; Outputs:
215+  A2AB              ; de: memory location
216+  A2AB              ;
217+  A2AB              screen_getcelladdress:
218+  A2AB 78               ld a,b      ; vertical position.
219+  A2AC E6 18            and 24      ; which segment, 0, 1 or 2?
220+  A2AE C6 40            add a,64    ; 64*256 = 16384, Spectrum's screen memory.
221+  A2B0 57               ld d,a      ; this is our high byte.
222+  A2B1 78               ld a,b      ; what was that vertical position again?
223+  A2B2 E6 07            and 7       ; which row within segment?
224+  A2B4 0F               rrca        ; multiply row by 32.
225+  A2B5 0F               rrca
226+  A2B6 0F               rrca
227+  A2B7 5F               ld e,a      ; low byte.
228+  A2B8 79               ld a,c      ; add on y coordinate.
229+  A2B9 83               add a,e     ; mix with low byte.
230+  A2BA 5F               ld e,a      ; address of screen position in de.
231+  A2BB C9               ret
232+  A2BC
233+  A2BC              ;
234+  A2BC              ; Calculate buffer address of attribute for character at (b, c).
235+  A2BC              ; Inputs:
236+  A2BC              ; bc: coords
237+  A2BC              ; Outputs:
238+  A2BC              ; de: memory location
239+  A2BC              ;
240+  A2BC              screen_getcellattradress:
241+  A2BC 11 D5 9D         ld de,screen_attr_buffer ; memory is at base + horiz (c) + vert*32 (b)
242+  A2BF 69               ld l,c      ; x position.
243+  A2C0 26 00            ld h,0      ; 0 h
244+  A2C2 19               add hl,de
245+  A2C3 54 5D            ld de,hl    ; horiz done
246+  A2C5 78               ld a,b      ; do vert
247+  A2C6 D5               push de
248+  A2C7 C5               push bc
249+  A2C8 11 20 00         ld de,32
250+  A2CB CD 21 80         call utilities_multiply
251+  A2CE C1               pop bc
252+  A2CF D1               pop de
253+  A2D0 19               add hl,de
254+  A2D1 54 5D            ld de,hl    ; vert done
255+  A2D3 C9               ret
256+  A2D4
257+  A2D4              ;
258+  A2D4              ; Calculate buffer address of attribute for character at (b, c).
259+  A2D4              ; Inputs:
260+  A2D4              ; bc: coords
261+  A2D4              ; Outputs:
262+  A2D4              ; de: memory location
263+  A2D4              ;
264+  A2D4              screen_getscreenattradress:
265+  A2D4 11 00 58         ld de,22528 ; memory is at base + horiz (c) + vert*32 (b)
266+  A2D7 69               ld l,c      ; x position.
267+  A2D8 26 00            ld h,0      ; 0 h
268+  A2DA 19               add hl,de
269+  A2DB 54 5D            ld de,hl    ; horiz done
270+  A2DD 78               ld a,b      ; do vert
271+  A2DE D5               push de
272+  A2DF C5               push bc
273+  A2E0 11 20 00         ld de,32
274+  A2E3 CD 21 80         call utilities_multiply
275+  A2E6 C1               pop bc
276+  A2E7 D1               pop de
277+  A2E8 19               add hl,de
278+  A2E9 54 5D            ld de,hl    ; vert done
279+  A2EB C9               ret
280+  A2EC
281+  A2EC              ;
282+  A2EC              ; Gets the attr memory location for a screen coord
283+  A2EC              ; Will overwrite bc
284+  A2EC              ; Inputs:
285+  A2EC              ; bc - screen coords
286+  A2EC              ; Outputs:
287+  A2EC              ; de - memory location
288+  A2EC              ; bc - character coords
289+  A2EC              ;
290+  A2EC              screen_getattraddressfromscreencoords:
291+  A2EC 78               ld a,b                          ; get the player block coords of current block
292+  A2ED E6 F8            and 248                         ; find closest multiple of eight
293+  A2EF 0F               rrca
294+  A2F0 0F               rrca
295+  A2F1 0F               rrca                ; divide by 8
296+  A2F2 47               ld b,a
297+  A2F3 79               ld a,c
298+  A2F4 48               ld c,b                         ; swap b and c
299+  A2F5 E6 F8            and 248
300+  A2F7 0F               rrca
301+  A2F8 0F               rrca
302+  A2F9 0F               rrca                ; divide by 8
303+  A2FA 47               ld b,a
304+  A2FB CD BC A2         call screen_getcellattradress   ; work out memory location of current block attributes, memory in de
305+  A2FE C9               ret
306+  A2FF
307+  A2FF              ;
308+  A2FF              ; Get buffer address for a character at b,c - b vert
309+  A2FF              ; Buffer memory is stored as sequential block
310+  A2FF              ; Char at 0,0 is stored 0,32,64...; 0,1 is stored at 1,33,65
311+  A2FF              ; Inputs:
312+  A2FF              ; bc - coords
313+  A2FF              ; Outputs:
314+  A2FF              ; de - memory location of first byte
315+  A2FF              screen_getbufferaddress:
316+  A2FF 21 D5 80         ld hl, screen_buffer    ; first get screen buffer start
317+  A302 50               ld d,b                  ; then work out vertical offset
318+  A303 1E 00            ld e,0                  ; mult by 256, low byte becomes high byte, de now holds result
319+  A305 19               add hl,de               ; add to base
320+  A306 59               ld e,c                  ; then add horizontal offset (c)
321+  A307 16 00            ld d,0
322+  A309 19               add hl,de               ; add to base
323+  A30A 54 5D            ld de,hl
324+  A30C C9               ret
325+  A30D
326+  A30D              ;
327+  A30D              ; Display character hl at (b, c) to buffer.
328+  A30D              ; Stored sequentially
329+  A30D              ; Inputs:
330+  A30D              ; hl: block address
331+  A30D              ; bc: coords
332+  A30D              ;
333+  A30D              screen_showchar:
334+  A30D 3E 00            ld a,0
335+  A30F E5               push hl
336+  A310 CD FF A2         call screen_getbufferaddress ; get the current screen buffer pointer
337+  A313 E1               pop hl
338+  A314 06 08            ld b,8              ; number of pixels high.
339+  A316              screen_showchar0:
340+  A316 7E               ld a,(hl)           ; source graphic.
341+  A317 12               ld (de),a           ; transfer to screen.
342+  A318 23               inc hl              ; next piece of data.
343+  A319 E5               push hl             ; store hl
344+  A31A 62 6B            ld hl,de            ; put de in hl
345+  A31C 1E 20            ld e,32            ; inc memory by 32, so load 32 into de
346+  A31E 16 00            ld d,0
347+  A320 19               add hl,de              ; add de to hl
348+  A321 54 5D            ld de,hl            ; load back to de
349+  A323 E1               pop hl              ; restore hl
350+  A324
351+  A324 10 F0            djnz screen_showchar0 ; repeat
352+  A326 C9               ret
353+  A327
354+  A327
355+  A327              ;
356+  A327              ; Get cell graphic.
357+  A327              ; Inputs:
358+  A327              ; a: block
359+  A327              ; Outputs:
360+  A327              ; hl: memory
361+  A327              ;
362+  A327              screen_getblock:
363+  A327 07               rlca                        ; multiply block number by eight.
364+  A328 07               rlca
365+  A329 07               rlca
366+  A32A 5F               ld e,a                      ; displacement to graphic address.
367+  A32B 16 00            ld d,0                      ; no high byte.
368+  A32D 21 AB A8         ld hl,sprites               ; address of character blocks.
369+  A330 19               add hl,de                   ; point to block.
370+  A331 C9               ret
371+  A332
372+  A332              ;
373+  A332              ; Get cell attribute.
374+  A332              ; Inputs:
375+  A332              ; a: block
376+  A332              ; Outputs:
377+  A332              ; hl: memory
378+  A332              ;
379+  A332              screen_getattr:
380+  A332 5F               ld e,a                      ; displacement to attribute address.
381+  A333 16 00            ld d,0                      ; no high byte.
382+  A335 21 FB A8         ld hl,sprite_attrs          ; address of block attributes.
383+  A338 19               add hl,de                   ; point to attribute.
384+  A339 C9               ret
385+  A33A
# file closed: screen/screen.asm
 24   A33A                  include "screen\sprites.asm"
# file opened: screen/sprites.asm
  1+  A33A              ;
  2+  A33A              ; This is the sprite routine and expects coordinates in (c ,b) form,
  3+  A33A              ; where c is the vertical coord from the top of the screen (0-176), and
  4+  A33A              ; b is the horizontal coord from the left of the screen (0 to 240).
  5+  A33A              ; Sprite data is stored as you'd expect in its unshifted form as this
  6+  A33A              ; routine takes care of all the shifting itself. This means that sprite
  7+  A33A              ; handling isn't particularly fast but the graphics only take 1/8th of the
  8+  A33A              ; space they would require in pre-shifted form.
  9+  A33A              ; Inputs:
 10+  A33A              ; hl - sprite data
 11+  A33A              ; bc - screen coords
 12+  A33A              ;
 13+  A33A              sprites_drawsprite7:
 14+  A33A EE 07            xor 7               ; complement last 3 bits.
 15+  A33C 3C               inc a               ; add one for luck!
 16+  A33D              sprites_drawsprite3:
 17+  A33D CB 11            rl c                ; ...into middle byte...
 18+  A33F CB 12            rl d                ; ...and finally into left character cell.
 19+  A341 3D               dec a               ; count shifts we've done.
 20+  A342 20 F9            jr nz,sprites_drawsprite3 ; return until all shifts complete.
 21+  A344                                      ; Line of sprite image is now in e + c + d, we need it in form c + d + e.
 22+  A344 79               ld a,c              ; left edge of image is currently in e.
 23+  A345 4A               ld c,d              ; put right edge there instead.
 24+  A346 57               ld d,a              ; and the left edge back into c.
 25+  A347 18 25            jr sprites_drawsprite0   ; we've done the switch so transfer to screen.
 26+  A349              sprites_drawsprite:
 27+  A349 ED 43 AE A3      ld (dispx),bc       ; store coords in dispx for now.
 28+  A34D E5               push hl
 29+  A34E CD 8C A3         call sprites_scadd  ; calculate screen address.
 30+  A351 E1               pop hl
 31+  A352 3E 08            ld a,8              ; height of sprite in pixels.
 32+  A354              sprites_drawsprite1:
 33+  A354 08               ex af,af'           ; store loop counter.
 34+  A355 D5               push de             ; store screen address.
 35+  A356 4E               ld c,(hl)           ; first sprite graphic.
 36+  A357 23               inc hl              ; increment poiinter to sprite data.
 37+  A358 22 B0 A3         ld (sprtmp),hl      ; store it for later.
 38+  A35B 16 00            ld d,0              ; blank right byte for now.
 39+  A35D 78               ld a,b              ; b holds y position.
 40+  A35E E6 07            and 7               ; how are we straddling character cells?
 41+  A360 28 0C            jr z,sprites_drawsprite0 ; we're not straddling them, don't bother shifting.
 42+  A362 FE 05            cp 5                ; 5 or more right shifts needed?
 43+  A364 30 D4            jr nc,sprites_drawsprite7 ; yes, shift from left as it's quicker.
 44+  A366 A7               and a               ; oops, carry flag is set so clear it.
 45+  A367              sprites_drawsprite2:
 46+  A367 CB 19            rr c                ; rotate left byte right...
 47+  A369 CB 1A            rr d                ; ...into right byte.
 48+  A36B 3D               dec a               ; one less shift to do.
 49+  A36C 20 F9            jr nz,sprites_drawsprite2 ; return until all shifts complete.
 50+  A36E              sprites_drawsprite0:
 51+  A36E E1               pop hl              ; pop screen address from stack.
 52+  A36F 7E               ld a,(hl)           ; what's there already.
 53+  A370 A9               xor c               ; merge in image data.
 54+  A371 77               ld (hl),a           ; place onto screen.
 55+  A372 23               inc hl
 56+  A373 7E               ld a,(hl)           ; what's already there.
 57+  A374 AA               xor d               ; right edge of sprite image data.
 58+  A375 77               ld (hl),a           ; plonk it on screen.
 59+  A376 3A AE A3         ld a,(dispx)        ; vertical coordinate.
 60+  A379 3C               inc a               ; next line down.
 61+  A37A 32 AE A3         ld (dispx),a        ; store new position.
 62+  A37D 2B               dec hl
 63+  A37E 11 20 00         ld de,32            ; add 32 to get to the next row
 64+  A381 19               add hl,de           ; add 32
 65+  A382              sprites_drawsprite6:
 66+  A382 EB               ex de,hl            ; screen address in de.
 67+  A383 2A B0 A3         ld hl,(sprtmp)      ; restore graphic address.
 68+  A386 08               ex af,af'           ; restore loop counter.
 69+  A387 3D               dec a               ; decrement it.
 70+  A388 C2 54 A3         jp nz,sprites_drawsprite1 ; not reached bottom of sprite yet to repeat.
 71+  A38B C9               ret                 ; job done.
 72+  A38C
 73+  A38C              ;
 74+  A38C              ; This routine returns a buffer address for (c, b) in de (c vert).
 75+  A38C              ; For example: 0,0 will be at memory offset 0
 76+  A38C              ; 1,0 (1 down) will be at memory offset 1
 77+  A38C              ; 0,7 will be at memory offset 0
 78+  A38C              ; 9,1 will be at memory offset 8+1
 79+  A38C              ; 8,0 will be at memory offset 256
 80+  A38C              ; 9,0 will be at memory offset 257
 81+  A38C              ; Inputs:
 82+  A38C              ; de - coords
 83+  A38C              ;
 84+  A38C              sprites_scadd:
 85+  A38C 79               ld a,c               ; calculate vertical offset
 86+  A38D E6 F8            and 248             ;  to get nearest multiple of 8
 87+  A38F 0F               rrca
 88+  A390 0F               rrca
 89+  A391 0F               rrca                ; divide by 8
 90+  A392 67               ld h,a
 91+  A393 78               ld a,b               ; calculate horizontal offset
 92+  A394 E6 F8            and 248             ;  to get nearest multiple of 8
 93+  A396 0F               rrca
 94+  A397 0F               rrca
 95+  A398 0F               rrca                ; divide by 8
 96+  A399 6F               ld l,a
 97+  A39A C5               push bc             ; store the screen coords
 98+  A39B 44 4D            ld bc,hl            ; load bc with the character coords
 99+  A39D CD FF A2         call screen_getbufferaddress
100+  A3A0 C1               pop bc              ; get back screen coords, de is now memory of character
101+  A3A1 79               ld a,c              ; now add the vertical within the cell
102+  A3A2 E6 07            and 7
103+  A3A4 0F               rrca                ; multiply by 32.
104+  A3A5 0F               rrca
105+  A3A6 0F               rrca
106+  A3A7 6F               ld l,a
107+  A3A8 26 00            ld h,0
108+  A3AA 19               add hl,de
109+  A3AB 54 5D            ld de,hl
110+  A3AD C9               ret
111+  A3AE
112+  A3AE 00           dispx   defb 0           ; general-use coordinates.
113+  A3AF 00           dispy   defb 0
114+  A3B0 00           sprtmp  defb 0           ; sprite temporary address.
115+  A3B1
# file closed: screen/sprites.asm
 25   A3B1                  include "screen\titlescreen.asm"
# file opened: screen/titlescreen.asm
  1+  A3B1              ;
  2+  A3B1              ; Draws the title screen
  3+  A3B1              ;
  4+  A3B1              titlescreen_show:
  5+  A3B1 CD D7 A3         call titlescreen_init
  6+  A3B4 CD BB A3         call titlescreen_drawtitle
  7+  A3B7 CD 2E 80         call utilities_waitforkey   ; wait for keypress
  8+  A3BA C9               ret
  9+  A3BB
 10+  A3BB              ;
 11+  A3BB              ; Draws the iconic logo
 12+  A3BB              ;
 13+  A3BB              titlescreen_drawtitle:
 14+  A3BB 06 69            ld b,105              ; number of points
 15+  A3BD DD 21 ED A3      ld ix,titlescreen_logo_data
 16+  A3C1              titlescreen_drawtitle0:
 17+  A3C1 C5               push bc
 18+  A3C2 DD 4E 00         ld c,(ix)                   ; got horiz
 19+  A3C5 DD 23            inc ix
 20+  A3C7 DD 46 00         ld b,(ix)                   ; got vert
 21+  A3CA DD 23            inc ix
 22+  A3CC CD D4 A2         call screen_getscreenattradress ; memory in de
 23+  A3CF 13               inc de                      ; slide one to the right, since I'm too lazy to change the data
 24+  A3D0 3E 13            ld a,19
 25+  A3D2 12               ld (de),a
 26+  A3D3 C1               pop bc
 27+  A3D4 10 EB            djnz titlescreen_drawtitle0 ; loop if we're not at the end
 28+  A3D6 C9               ret
 29+  A3D7
 30+  A3D7              ;
 31+  A3D7              ; Initialises the screen
 32+  A3D7              ;
 33+  A3D7              titlescreen_init:
 34+  A3D7              ; We want a black screen.
 35+  A3D7 CD 6B 0D         call $0D6B
 36+  A3DA 3E 0B            ld a,11             ; magenta ink (7) on blue paper (0),
 37+  A3DC                                      ; bright (64).
 38+  A3DC 32 8D 5C         ld (23693),a        ; set our screen colours.
 39+  A3DF 3E 01            ld a,1              ; 2 is the code for red.
 40+  A3E1 D3 FE            out (254),a         ; write to port 254.
 41+  A3E3 CD AF 0D         call 3503           ; ROM routine - clears screen, opens chan 2.
 42+  A3E6
 43+  A3E6 21 73 80         ld hl,string_titlescreen_copyright
 44+  A3E9 CD 8D 80         call string_print
 45+  A3EC
 46+  A3EC C9               ret
 47+  A3ED
 48+  A3ED              ;
 49+  A3ED              ; Horiz, vert
 50+  A3ED              ;
 51+  A3ED              titlescreen_logo_data:
 52+  A3ED 08 00 09 00      defb 8,0,9,0,10,0,12,0,15,0,17,0,18,0,19,0,20,0
 52+  A3F1 0A 00 0C 00
 52+  A3F5 0F 00 11 00
 52+  A3F9 12 00 13 00
 52+  A3FD 14 00
 53+  A3FF 09 01 0C 01      defb 9,1,12,1,15,1,17,1
 53+  A403 0F 01 11 01
 54+  A407 09 02 0C 02      defb 9,2,12,2,13,2,14,2,15,2,17,2,18,2,19,2,20,2
 54+  A40B 0D 02 0E 02
 54+  A40F 0F 02 11 02
 54+  A413 12 02 13 02
 54+  A417 14 02
 55+  A419 09 03 0C 03      defb 9,3,12,3,15,3,17,3
 55+  A41D 0F 03 11 03
 56+  A421 09 04 0C 04      defb 9,4,12,4,15,4,17,4,18,4,19,4,20,4
 56+  A425 0F 04 11 04
 56+  A429 12 04 13 04
 56+  A42D 14 04
 57+  A42F 00 06 01 06      defb 0,6,1,6,2,6,3,6,4,6,5,6,6,6,7,6,8,6,9,6,10,6,11,6
 57+  A433 02 06 03 06
 57+  A437 04 06 05 06
 57+  A43B 06 06 07 06
 57+  A43F 08 06 09 06
 57+  A443 0A 06 0B 06
 58+  A447 10 06 11 06      defb 16,6,17,6,18,6,19,6,20,6,21,6,22,6,23,6,24,6,25,6,26,6,27,6
 58+  A44B 12 06 13 06
 58+  A44F 14 06 15 06
 58+  A453 16 06 17 06
 58+  A457 18 06 19 06
 58+  A45B 1A 06 1B 06
 59+  A45F 02 07 02 08      defb 2,7,2,8,2,9,2,10,2,11,2,12,2,13,2,14,2,15,2,16,2,17,2,18,2,19,2,20
 59+  A463 02 09 02 0A
 59+  A467 02 0B 02 0C
 59+  A46B 02 0D 02 0E
 59+  A46F 02 0F 02 10
 59+  A473 02 11 02 12
 59+  A477 02 13 02 14
 60+  A47B 19 07 19 08      defb 25,7,25,8,25,9,25,10,25,11,25,12,25,13,25,14,25,15,25,16,25,17,25,18,25,19,25,20
 60+  A47F 19 09 19 0A
 60+  A483 19 0B 19 0C
 60+  A487 19 0D 19 0E
 60+  A48B 19 0F 19 10
 60+  A48F 19 11 19 12
 60+  A493 19 13 19 14
 61+  A497 03 0B 04 0B      defb 3,11,4,11,5,11,6,11,7,11,8,11,9,11,10,11,11,11
 61+  A49B 05 0B 06 0B
 61+  A49F 07 0B 08 0B
 61+  A4A3 09 0B 0A 0B
 61+  A4A7 0B 0B
 62+  A4A9 0B 07 0B 08      defb 11,7,11,8,11,9,11,10
 62+  A4AD 0B 09 0B 0A
 63+  A4B1 10 0D 10 0F      defb 16,13,16,15,16,16,16,17,16,18,16,19,16,20
 63+  A4B5 10 10 10 11
 63+  A4B9 10 12 10 13
 63+  A4BD 10 14
 64+  A4BF
# file closed: screen/titlescreen.asm
 26   A4BF
 27   A4BF                  include "leveldata\level01.asm"
# file opened: leveldata/level01.asm
  1+  A4BF              ; ###############################################################
  2+  A4BF              ; Data for level 1
  3+  A4BF              ; ###############################################################
  4+  A4BF              level01:
  5+  A4BF
  6+  A4BF 00 00 05 05      defb 0,0,5,5,5,5,5,5,5,5,5,5,5,5,2,1,1,1,1,3,5,5,5,5,5,5,5,5,5,5,5,0
  6+  A4C3 05 05 05 05
  6+  A4C7 05 05 05 05
  6+  A4CB 05 05 02 01
  6+  A4CF 01 01 01 03
  6+  A4D3 05 05 05 05
  6+  A4D7 05 05 05 05
  6+  A4DB 05 05 05 00
  7+  A4DF 00 00 05 05      defb 0,0,5,5,5,5,5,5,5,5,5,5,2,1,1,1,1,1,1,1,1,3,5,5,5,5,5,5,5,5,5,0
  7+  A4E3 05 05 05 05
  7+  A4E7 05 05 05 05
  7+  A4EB 02 01 01 01
  7+  A4EF 01 01 01 01
  7+  A4F3 01 03 05 05
  7+  A4F7 05 05 05 05
  7+  A4FB 05 05 05 00
  8+  A4FF 00 00 05 05      defb 0,0,5,5,5,5,5,5,5,5,2,1,1,1,1,1,1,1,1,1,1,1,1,3,5,5,5,5,5,5,5,0
  8+  A503 05 05 05 05
  8+  A507 05 05 02 01
  8+  A50B 01 01 01 01
  8+  A50F 01 01 01 01
  8+  A513 01 01 01 03
  8+  A517 05 05 05 05
  8+  A51B 05 05 05 00
  9+  A51F 00 00 01 01      defb 0,0,1,1,1,1,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,3,5,5,5,5,5,5,0
  9+  A523 01 01 00 01
  9+  A527 01 01 01 01
  9+  A52B 01 01 01 01
  9+  A52F 01 01 01 01
  9+  A533 01 01 01 01
  9+  A537 03 05 05 05
  9+  A53B 05 05 05 00
 10+  A53F 00 00 01 01      defb 0,0,1,1,4,4,0,4,4,4,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,1,0
 10+  A543 04 04 00 04
 10+  A547 04 04 01 01
 10+  A54B 01 01 01 01
 10+  A54F 01 01 01 01
 10+  A553 01 01 01 01
 10+  A557 01 01 01 01
 10+  A55B 01 00 01 00
 11+  A55F 00 00 01 04      defb 0,0,1,4,4,4,0,0,0,0,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,0,0,0,1,0
 11+  A563 04 04 00 00
 11+  A567 00 00 00 00
 11+  A56B 01 01 01 01
 11+  A56F 01 01 01 01
 11+  A573 01 01 01 01
 11+  A577 01 00 00 00
 11+  A57B 00 00 01 00
 12+  A57F 00 00 01 04      defb 0,0,1,4,4,1,1,1,1,1,4,0,4,4,1,1,1,1,1,1,1,0,0,0,0,0,1,1,1,1,1,0
 12+  A583 04 01 01 01
 12+  A587 01 01 04 00
 12+  A58B 04 04 01 01
 12+  A58F 01 01 01 01
 12+  A593 01 00 00 00
 12+  A597 00 00 01 01
 12+  A59B 01 01 01 00
 13+  A59F 00 00 01 04      defb 0,0,1,4,4,4,4,4,4,1,4,0,4,4,4,4,4,4,0,0,0,0,4,4,4,4,4,4,4,4,1,0
 13+  A5A3 04 04 04 04
 13+  A5A7 04 01 04 00
 13+  A5AB 04 04 04 04
 13+  A5AF 04 04 00 00
 13+  A5B3 00 00 04 04
 13+  A5B7 04 04 04 04
 13+  A5BB 04 04 01 00
 14+  A5BF 00 00 01 01      defb 0,0,1,1,1,4,1,1,1,1,0,0,4,4,4,4,4,4,0,4,4,4,4,4,4,4,4,4,4,4,1,0
 14+  A5C3 01 04 01 01
 14+  A5C7 01 01 00 00
 14+  A5CB 04 04 04 04
 14+  A5CF 04 04 00 04
 14+  A5D3 04 04 04 04
 14+  A5D7 04 04 04 04
 14+  A5DB 04 04 01 00
 15+  A5DF 00 00 01 00      defb 0,0,1,0,0,0,0,0,0,4,0,0,4,4,4,4,4,4,0,4,4,4,4,4,4,4,0,0,0,0,1,0
 15+  A5E3 00 00 00 00
 15+  A5E7 00 04 00 00
 15+  A5EB 04 04 04 04
 15+  A5EF 04 04 00 04
 15+  A5F3 04 04 04 04
 15+  A5F7 04 04 00 00
 15+  A5FB 00 00 01 00
 16+  A5FF 00 00 01 07      defb 0,0,1,7,7,7,7,7,7,1,0,0,4,4,4,4,4,4,0,4,4,4,4,4,4,4,0,4,4,0,1,0
 16+  A603 07 07 07 07
 16+  A607 07 01 00 00
 16+  A60B 04 04 04 04
 16+  A60F 04 04 00 04
 16+  A613 04 04 04 04
 16+  A617 04 04 00 04
 16+  A61B 04 00 01 00
 17+  A61F 00 00 01 00      defb 0,0,1,0,0,0,0,0,0,1,4,0,4,4,4,4,4,4,0,4,4,4,4,4,4,4,0,4,4,0,1,0
 17+  A623 00 00 00 00
 17+  A627 00 01 04 00
 17+  A62B 04 04 04 04
 17+  A62F 04 04 00 04
 17+  A633 04 04 04 04
 17+  A637 04 04 00 04
 17+  A63B 04 00 01 00
 18+  A63F 00 00 01 00      defb 0,0,1,0,0,0,0,0,0,1,4,0,4,4,4,4,4,4,0,4,4,4,4,4,4,4,0,4,4,0,1,0
 18+  A643 00 00 00 00
 18+  A647 00 01 04 00
 18+  A64B 04 04 04 04
 18+  A64F 04 04 00 04
 18+  A653 04 04 04 04
 18+  A657 04 04 00 04
 18+  A65B 04 00 01 00
 19+  A65F 00 00 01 06      defb 0,0,1,6,6,6,6,6,6,1,4,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,4,4,0,1,0
 19+  A663 06 06 06 06
 19+  A667 06 01 04 00
 19+  A66B 00 00 00 00
 19+  A66F 00 00 00 00
 19+  A673 00 00 00 00
 19+  A677 00 00 00 04
 19+  A67B 04 00 01 00
 20+  A67F 00 00 01 06      defb 0,0,1,6,6,6,6,6,6,1,4,0,4,4,4,4,4,4,0,4,4,4,0,4,4,4,4,4,4,0,1,0
 20+  A683 06 06 06 06
 20+  A687 06 01 04 00
 20+  A68B 04 04 04 04
 20+  A68F 04 04 00 04
 20+  A693 04 04 00 04
 20+  A697 04 04 04 04
 20+  A69B 04 00 01 00
 21+  A69F 00 00 01 06      defb 0,0,1,6,6,6,6,6,6,1,4,0,4,4,4,4,4,4,0,4,4,4,0,4,4,4,4,4,4,0,1,0
 21+  A6A3 06 06 06 06
 21+  A6A7 06 01 04 00
 21+  A6AB 04 04 04 04
 21+  A6AF 04 04 00 04
 21+  A6B3 04 04 00 04
 21+  A6B7 04 04 04 04
 21+  A6BB 04 00 01 00
 22+  A6BF 00 00 01 06      defb 0,0,1,6,6,6,6,6,6,1,4,0,4,4,4,4,4,4,0,4,4,4,0,4,4,4,4,4,4,0,1,0
 22+  A6C3 06 06 06 06
 22+  A6C7 06 01 04 00
 22+  A6CB 04 04 04 04
 22+  A6CF 04 04 00 04
 22+  A6D3 04 04 00 04
 22+  A6D7 04 04 04 04
 22+  A6DB 04 00 01 00
 23+  A6DF 00 00 01 01      defb 0,0,1,1,1,1,1,1,1,1,4,0,4,4,4,4,4,4,0,4,4,4,0,4,4,4,4,4,4,0,1,0
 23+  A6E3 01 01 01 01
 23+  A6E7 01 01 04 00
 23+  A6EB 04 04 04 04
 23+  A6EF 04 04 00 04
 23+  A6F3 04 04 00 04
 23+  A6F7 04 04 04 04
 23+  A6FB 04 00 01 00
 24+  A6FF 00 00 01 04      defb 0,0,1,4,4,4,4,4,4,4,4,0,4,4,4,4,4,4,0,4,4,4,0,0,0,0,4,4,4,4,1,0
 24+  A703 04 04 04 04
 24+  A707 04 04 04 00
 24+  A70B 04 04 04 04
 24+  A70F 04 04 00 04
 24+  A713 04 04 00 00
 24+  A717 00 00 04 04
 24+  A71B 04 04 01 00
 25+  A71F 00 00 01 04      defb 0,0,1,4,4,4,0,0,0,0,0,0,4,4,4,4,4,4,0,4,4,4,4,4,4,0,4,4,4,4,1,0
 25+  A723 04 04 00 00
 25+  A727 00 00 00 00
 25+  A72B 04 04 04 04
 25+  A72F 04 04 00 04
 25+  A733 04 04 04 04
 25+  A737 04 00 04 04
 25+  A73B 04 04 01 00
 26+  A73F 00 00 01 04      defb 0,0,1,4,4,4,0,4,4,4,4,4,4,4,4,4,4,4,0,4,4,4,4,4,4,0,4,4,4,4,1,0
 26+  A743 04 04 00 04
 26+  A747 04 04 04 04
 26+  A74B 04 04 04 04
 26+  A74F 04 04 00 04
 26+  A753 04 04 04 04
 26+  A757 04 00 04 04
 26+  A75B 04 04 01 00
 27+  A75F 00 00 01 04      defb 0,0,1,4,4,4,0,4,4,4,1,1,1,1,1,1,1,1,1,1,1,1,1,1,4,0,4,4,4,4,1,0
 27+  A763 04 04 00 04
 27+  A767 04 04 01 01
 27+  A76B 01 01 01 01
 27+  A76F 01 01 01 01
 27+  A773 01 01 01 01
 27+  A777 04 00 04 04
 27+  A77B 04 04 01 00
 28+  A77F 00 00 01 04      defb 0,0,1,4,4,4,0,4,4,4,1,0,0,0,0,0,0,0,0,0,0,0,0,1,4,0,4,4,4,4,1,0
 28+  A783 04 04 00 04
 28+  A787 04 04 01 00
 28+  A78B 00 00 00 00
 28+  A78F 00 00 00 00
 28+  A793 00 00 00 01
 28+  A797 04 00 04 04
 28+  A79B 04 04 01 00
 29+  A79F 00 00 01 04      defb 0,0,1,4,4,4,0,4,4,4,1,0,0,0,0,0,0,0,0,0,0,0,0,1,4,0,4,4,4,4,1,0
 29+  A7A3 04 04 00 04
 29+  A7A7 04 04 01 00
 29+  A7AB 00 00 00 00
 29+  A7AF 00 00 00 00
 29+  A7B3 00 00 00 01
 29+  A7B7 04 00 04 04
 29+  A7BB 04 04 01 00
 30+  A7BF 00 00 01 04      defb 0,0,1,4,4,4,0,4,4,4,1,0,0,0,0,0,0,0,0,0,0,0,0,1,4,0,4,4,4,4,1,0
 30+  A7C3 04 04 00 04
 30+  A7C7 04 04 01 00
 30+  A7CB 00 00 00 00
 30+  A7CF 00 00 00 00
 30+  A7D3 00 00 00 01
 30+  A7D7 04 00 04 04
 30+  A7DB 04 04 01 00
 31+  A7DF 00 00 01 04      defb 0,0,1,4,4,4,0,4,4,4,4,0,0,0,0,0,0,0,0,0,0,0,0,4,4,4,4,4,4,4,1,0
 31+  A7E3 04 04 00 04
 31+  A7E7 04 04 04 00
 31+  A7EB 00 00 00 00
 31+  A7EF 00 00 00 00
 31+  A7F3 00 00 00 04
 31+  A7F7 04 04 04 04
 31+  A7FB 04 04 01 00
 32+  A7FF 00 00 01 04      defb 0,0,1,4,4,4,4,4,4,4,1,0,0,0,0,0,0,0,0,0,0,0,0,1,4,4,4,4,4,4,1,0
 32+  A803 04 04 04 04
 32+  A807 04 04 01 00
 32+  A80B 00 00 00 00
 32+  A80F 00 00 00 00
 32+  A813 00 00 00 01
 32+  A817 04 04 04 04
 32+  A81B 04 04 01 00
 33+  A81F 00 00 01 04      defb 0,0,1,4,4,4,4,4,4,4,1,0,8,0,1,0,8,0,0,1,0,8,0,1,4,4,4,4,4,4,1,0
 33+  A823 04 04 04 04
 33+  A827 04 04 01 00
 33+  A82B 08 00 01 00
 33+  A82F 08 00 00 01
 33+  A833 00 08 00 01
 33+  A837 04 04 04 04
 33+  A83B 04 04 01 00
 34+  A83F 00 00 01 01      defb 0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0
 34+  A843 01 01 01 01
 34+  A847 01 01 01 01
 34+  A84B 01 01 01 01
 34+  A84F 01 01 01 01
 34+  A853 01 01 01 01
 34+  A857 01 01 01 01
 34+  A85B 01 01 01 00
 35+  A85F
 36+  A85F              ; ###############################################################
 37+  A85F              ; Rock data: horiz, vert, state
 38+  A85F              ; ###############################################################
 39+  A85F              level01rocks:
 40+  A85F 09 04 00         defb 9,4,0
 41+  A862 0C 07 00         defb 12,7,0
 42+  A865 10 07 00         defb 16,7,0
 43+  A868 0B 09 00         defb 11,9,0
 44+  A86B
 45+  A86B              ;
 46+  A86B              ; Score area colours
 47+  A86B              ;
 48+  A86B              score_colours:
 49+  A86B 47 47 47 47      defb 71,71,71,71,71,71,71,71,71,71,71,66,66,67,67,67,67,67,67,67,66,71,71,71,71,71,71,71,71,71,71,71
 49+  A86F 47 47 47 47
 49+  A873 47 47 47 42
 49+  A877 42 43 43 43
 49+  A87B 43 43 43 43
 49+  A87F 42 47 47 47
 49+  A883 47 47 47 47
 49+  A887 47 47 47 47
 50+  A88B 47 47 47 47      defb 71,71,71,71,71,71,71,71,71,71,71,66,66,66,66,66,66,66,66,66,66,66,66,71,71,71,71,71,71,71,71,71
 50+  A88F 47 47 47 47
 50+  A893 47 47 47 42
 50+  A897 42 42 42 42
 50+  A89B 42 42 42 42
 50+  A89F 42 42 42 47
 50+  A8A3 47 47 47 47
 50+  A8A7 47 47 47 47
# file closed: leveldata/level01.asm
 28   A8AB                  include "graphics\graphics.asm"
# file opened: graphics/graphics.asm
  1+  A8AB              ; Tiles graphics.
  2+  A8AB              sprites:
  3+  A8AB 00 00 00 00      defb    0  ,  0,  0,  0,  0,  0,  0,  0   ; 0, space
  3+  A8AF 00 00 00 00
  4+  A8B3 FF FF FF FF      defb    255,255,255,255,255,255,255,255   ; 1, cyan block
  4+  A8B7 FF FF FF FF
  5+  A8BB 01 03 07 0F      defb	  1,  3,  7, 15, 31, 63,127,255   ; 2, slope left
  5+  A8BF 1F 3F 7F FF
  6+  A8C3 80 C0 E0 F0      defb    128,192,224,240,248,252,254,255   ; 3, slope right
  6+  A8C7 F8 FC FE FF
  7+  A8CB 55 AA 55 AA      defb    85,170, 85,170, 85,170, 85,170    ; 4, dirt
  7+  A8CF 55 AA 55 AA
  8+  A8D3 00 00 00 00      defb    0  ,  0,  0,  0,  0,  0,  0,  0   ; 5, sky block
  8+  A8D7 00 00 00 00
  9+  A8DB FF FF FF FF      defb    255,255,255,255,255,255,255,255   ; 6, slime block
  9+  A8DF FF FF FF FF
 10+  A8E3 FF FF 00 00      defb    255,255,  0,  0,  0,  0,  0,  0   ; 7, trapdoor
 10+  A8E7 00 00 00 00
 11+  A8EB 18 2C 4E 8F      defb    24, 44, 78,143,241,114, 52, 24    ; 8, gem
 11+  A8EF F1 72 34 18
 12+  A8F3 1C 7E FF 7F      defb    28,126,255,127,254,252,127, 62    ; 9, rock
 12+  A8F7 FE FC 7F 3E
 13+  A8FB
 14+  A8FB              sprite_attrs:
 15+  A8FB 47               defb    071 ; 0, space
 16+  A8FC 65               defb    101 ; 1, cyan block
 17+  A8FD 4D               defb    077 ; 2, slope left
 18+  A8FE 4D               defb    077 ; 3, slope right
 19+  A8FF 46               defb    070 ; 4, dirt
 20+  A900 4E               defb    078 ; 5, sky
 21+  A901 4C               defb    076 ; 6, slime
 22+  A902 42               defb    066 ; 7, trapdoor
 23+  A903 46               defb    070 ; 8, gem
 24+  A904 42               defb    066 ; 9, rock
 25+  A905
 26+  A905              player_sprite:
 27+  A905 10 39 92 FC  	defb	 16, 57,146,252, 56, 61,195,128 ; 0 up/down 1
 27+  A909 38 3D C3 80
 28+  A90D 08 1C 08 FC  	defb	  8, 28,  8,252, 60, 28, 22, 50 ; 1 left 1
 28+  A911 3C 1C 16 32
 29+  A915 10 38 10 3F      defb   	 16, 56, 16, 63, 60, 56,104, 76 ; 2 right 1
 29+  A919 3C 38 68 4C
 30+  A91D 08 9C 49 3F  	defb	  8,156, 73, 63, 28,188,195,  1 ; 3 up/down 2
 30+  A921 1C BC C3 01
 31+  A925 08 1C 08 FC  	defb	  8, 28,  8,252, 60, 60,100, 12; 4 left 2
 31+  A929 3C 3C 64 0C
 32+  A92D 10 38 10 3F  	defb	 16, 56, 16, 63, 60, 60, 38, 48 ; 5 right 2
 32+  A931 3C 3C 26 30
 33+  A935 02 07 02 3F  	defb	 2,  7,  2, 63, 15, 15, 25,  3  ; 6 shoot left
 33+  A939 0F 0F 19 03
 34+  A93D 40 E0 40 FC  	defb	 64,224, 64,252,240,240,152,192 ; 7 shoot right
 34+  A941 F0 F0 98 C0
 35+  A945
 36+  A945              ;
 37+  A945              ; First 4 top half, next 4 bottom 1, next 4 bottom 2
 38+  A945              ;
 39+  A945              ship_sprite:
 40+  A945 00 00 00 01  	DEFB	  0,  0,  0,  1,  3, 31,127,255
 40+  A949 03 1F 7F FF
 41+  A94D 1F 01 7F FF  	DEFB	 31,  1,127,255,255,255,255,255
 41+  A951 FF FF FF FF
 42+  A955 F8 80 FE FF  	DEFB	248,128,254,255,255,255,255,255
 42+  A959 FF FF FF FF
 43+  A95D 00 00 00 80  	DEFB	  0,  0,  0,128,192,248,254,255
 43+  A961 C0 F8 FE FF
 44+  A965 B3 B3 7F 1F  	DEFB	179,179,127, 31,  3,  3,  2,  7
 44+  A969 03 03 02 07
 45+  A96D 8F 8F FF FF  	DEFB	143,143,255,255,255, 15,  7,131
 45+  A971 FF 0F 07 83
 46+  A975 0F 0F FF FF  	DEFB	 15, 15,255,255,255, 16, 32,193
 46+  A979 FF 10 20 C1
 47+  A97D 19 19 FE F8  	DEFB	 25, 25,254,248,192,192, 64,224
 47+  A981 C0 C0 40 E0
 48+  A985 98 98 7F 1F  	DEFB	152,152,127, 31,  3,  3,  2,  7
 48+  A989 03 03 02 07
 49+  A98D F0 F0 FF FF  	DEFB	240,240,255,255,255,  8,  4,131
 49+  A991 FF 08 04 83
 50+  A995 F1 F1 FF FF  	DEFB	241,241,255,255,255,240,224,193
 50+  A999 FF F0 E0 C1
 51+  A99D CD CD FE F8  	DEFB	205,205,254,248,192,192, 64,224
 51+  A9A1 C0 C0 40 E0
# file closed: graphics/graphics.asm
 29   A9A5
 30   A9A5                  include "game\control.asm"
# file opened: game/control.asm
  1+  A9A5              ;
  2+  A9A5              ; Check the keyboard then move
  3+  A9A5              ;
  4+  A9A5              control_keyboard:
  5+  A9A5 01 FE FB         ld bc,64510         ; port for keyboard row q-t.
  6+  A9A8 ED 78            in a,(c)            ; read keyboard.
  7+  A9AA 47               ld b,a              ; store result in b register.
  8+  A9AB CB 18            rr b                ; check outermost key (q).
  9+  A9AD D4 CC A9         call nc,control_pl_moveup         ; player up.
 10+  A9B0 01 FE FD         ld bc,65022         ; port for keyboard row a-f.
 11+  A9B3 ED 78            in a,(c)            ; read keyboard.
 12+  A9B5 47               ld b,a              ; store result in b register.
 13+  A9B6 CB 18            rr b                ; check outermost key (a).
 14+  A9B8 D4 FB A9         call nc,control_pl_movedown       ; player down.
 15+  A9BB 01 FE DF         ld bc,57342         ; port for keyboard row y-p.
 16+  A9BE ED 78            in a,(c)            ; read keyboard.
 17+  A9C0 47               ld b,a              ; store result in b register.
 18+  A9C1 CB 18            rr b                ; check outermost key (p).
 19+  A9C3 D4 55 AA         call nc,control_pl_moveright       ; player left.
 20+  A9C6 CB 18            rr b                ; check next key.
 21+  A9C8 D4 28 AA         call nc,control_pl_moveleft       ; player right.
 22+  A9CB C9               ret
 23+  A9CC
 24+  A9CC              ;
 25+  A9CC              ; Moves the player up
 26+  A9CC              ;
 27+  A9CC              control_pl_moveup:
 28+  A9CC C5               push bc
 29+  A9CD ED 4B 5E AB      ld bc,(player)          ; get the current coords, b horiz, c vert
 30+  A9D1 79               ld a,c                  ; load c into the acc
 31+  A9D2 FE 00            cp 0
 32+  A9D4 CA F4 A9         jp z,control_pl_moveup0 ; are we at the edge of the screen
 33+  A9D7 FE 82            cp 130
 34+  A9D9 CC 85 AA         call z, control_scroll_up
 35+  A9DC CD B9 AA         call control_checkcanmove_up ; check we can move up, e will be 1 if we can
 36+  A9DF F5               push af
 37+  A9E0 7B               ld a,e                  ; put e in a
 38+  A9E1 FE 00            cp 0
 39+  A9E3 CA F3 A9         jp z,control_pl_moveup1 ; don't move if we can't
 40+  A9E6 F1               pop af
 41+  A9E7 D6 01            sub 1                   ; subtract 2
 42+  A9E9 D6 01            sub 1
 43+  A9EB 4F               ld c,a                  ; load back to c
 44+  A9EC ED 43 5E AB      ld (player),bc          ; load back to player
 45+  A9F0 C3 F4 A9         jp control_pl_moveup0
 46+  A9F3              control_pl_moveup1:
 47+  A9F3 F1               pop af                  ; restore af if needed
 48+  A9F4              control_pl_moveup0:
 49+  A9F4 3E 00            ld a,0
 50+  A9F6 32 60 AB         ld (player+2),a        ; set direction to up
 51+  A9F9 C1               pop bc
 52+  A9FA C9               ret
 53+  A9FB              ;
 54+  A9FB              ; Moves the player down
 55+  A9FB              ;
 56+  A9FB              control_pl_movedown:
 57+  A9FB C5               push bc
 58+  A9FC ED 4B 5E AB      ld bc,(player)          ; get the current coords, b horiz, c vert
 59+  AA00 79               ld a,c                  ; load c into the acc
 60+  AA01 FE E0            cp 224
 61+  AA03 CA 21 AA         jp z,control_pl_movedown0 ; are we at the edge of the screen
 62+  AA06 FE 82            cp 130
 63+  AA08 CC 7D AA         call z, control_scroll_down
 64+  AA0B CD 8D AA         call control_checkcanmove_down ; check we can move down, e will be 1 if we can
 65+  AA0E F5               push af
 66+  AA0F 7B               ld a,e                  ; put e in a
 67+  AA10 FE 00            cp 0
 68+  AA12 CA 20 AA         jp z,control_pl_movedown1 ; don't move if we can't
 69+  AA15 F1               pop af
 70+  AA16 3C               inc a                   ; add 2
 71+  AA17 3C               inc a
 72+  AA18 4F               ld c,a                  ; load back to c
 73+  AA19 ED 43 5E AB      ld (player),bc          ; load back to player
 74+  AA1D C3 21 AA         jp control_pl_movedown0
 75+  AA20              control_pl_movedown1:
 76+  AA20 F1               pop af                  ; restore af if needed
 77+  AA21              control_pl_movedown0:
 78+  AA21 3E 00            ld a,0
 79+  AA23 32 60 AB         ld (player+2),a        ; set direction to down
 80+  AA26 C1               pop bc
 81+  AA27 C9               ret
 82+  AA28              ;
 83+  AA28              ; Moves the player left
 84+  AA28              ;
 85+  AA28              control_pl_moveleft:
 86+  AA28 C5               push bc
 87+  AA29 ED 4B 5E AB      ld bc,(player)          ; get the current coords, b horiz, c vert
 88+  AA2D 78               ld a,b                  ; load b into the acc
 89+  AA2E FE 10            cp 16
 90+  AA30 CA 4E AA         jp z,control_pl_moveleft0 ; are we at the edge of the screen
 91+  AA33 CA 4E AA         jp z,control_pl_moveleft0 ; are we at the edge of the screen
 92+  AA36 CD 22 AB         call control_checkcanmove_left ; check we can move down, e will be 1 if we can
 93+  AA39 F5               push af
 94+  AA3A 7B               ld a,e                  ; put e in a
 95+  AA3B FE 00            cp 0
 96+  AA3D CA 75 AA         jp z,control_pl_moveright1 ; don't move if we can't
 97+  AA40 F1               pop af
 98+  AA41 D6 01            sub 1                    ; subtract 2
 99+  AA43 D6 01            sub 1
100+  AA45 47               ld b,a                  ; load back to c
101+  AA46 ED 43 5E AB      ld (player),bc          ; load back to player
102+  AA4A C3 4E AA         jp control_pl_moveleft0
103+  AA4D              control_pl_moveleft1:
104+  AA4D F1               pop af
105+  AA4E              control_pl_moveleft0:
106+  AA4E 3E 01            ld a,1
107+  AA50 32 60 AB         ld (player+2),a        ; set direction to left
108+  AA53 C1               pop bc
109+  AA54 C9               ret
110+  AA55              ;
111+  AA55              ; Moves the player right
112+  AA55              ;
113+  AA55              control_pl_moveright:
114+  AA55 C5               push bc
115+  AA56 ED 4B 5E AB      ld bc,(player)          ; get the current coords, b horiz, c vert
116+  AA5A 78               ld a,b                  ; load b into the acc
117+  AA5B FE F0            cp 240
118+  AA5D CA 76 AA         jp z,control_pl_moveright0 ; are we at the edge of the screen
119+  AA60 CD F2 AA         call control_checkcanmove_right ; check we can move down, e will be 1 if we can
120+  AA63 F5               push af
121+  AA64 7B               ld a,e                  ; put e in a
122+  AA65 FE 00            cp 0
123+  AA67 CA 75 AA         jp z,control_pl_moveright1 ; don't move if we can't
124+  AA6A F1               pop af
125+  AA6B 3C               inc a                   ; add 2
126+  AA6C 3C               inc a
127+  AA6D 47               ld b,a                  ; load back to b
128+  AA6E ED 43 5E AB      ld (player),bc          ; load back to player
129+  AA72 C3 76 AA         jp control_pl_moveright0
130+  AA75              control_pl_moveright1:
131+  AA75 F1               pop af                  ; restore af if needed
132+  AA76              control_pl_moveright0:
133+  AA76 3E 02            ld a,2
134+  AA78 32 60 AB         ld (player+2),a        ; set direction to right
135+  AA7B C1               pop bc
136+  AA7C C9               ret
137+  AA7D
138+  AA7D              ;
139+  AA7D              ; Scrolls the screen down
140+  AA7D              ;
141+  AA7D              control_scroll_down:
142+  AA7D F5               push af
143+  AA7E 3E 07            ld a,7
144+  AA80 32 75 A1         ld (screen_offset),a
145+  AA83 F1               pop af
146+  AA84 C9               ret
147+  AA85
148+  AA85              ;
149+  AA85              ; Scrolls the screen up
150+  AA85              ;
151+  AA85              control_scroll_up:
152+  AA85 F5               push af
153+  AA86 3E 00            ld a,0
154+  AA88 32 75 A1         ld (screen_offset),a
155+  AA8B F1               pop af
156+  AA8C C9               ret
157+  AA8D
158+  AA8D              ;
159+  AA8D              ; Checks if the player can move down
160+  AA8D              ; Inputs:
161+  AA8D              ; bc - player coords, b horiz, c vert
162+  AA8D              ; Outputs:
163+  AA8D              ; de - 1 can move
164+  AA8D              control_checkcanmove_down:
165+  AA8D F5               push af
166+  AA8E C5               push bc
167+  AA8F CD EC A2         call screen_getattraddressfromscreencoords ; get the memory location of cell into de
168+  AA92 21 20 00         ld hl,32                        ; look at cell directly underneath (add 32)
169+  AA95 19               add hl,de                       ; memory location of cell beneath now in hl
170+  AA96 1E 00            ld e,0                          ; zero de
171+  AA98 16 00            ld d,0
172+  AA9A 7E               ld a,(hl)                       ; get attr of cell below
173+  AA9B FE 47            cp 71
174+  AA9D C2 B6 AA         jp nz, control_checkcanmove_down1 ; don't set flag if not black
175+  AAA0 C1               pop bc                          ; get bc back briefly
176+  AAA1 78               ld a,b                         ; screen coord
177+  AAA2 C5               push bc                         ; put it back for later
178+  AAA3 E6 07            and 7                           ; and with 7
179+  AAA5 FE 00            cp 0
180+  AAA7 CA B1 AA         jp z, control_checkcanmove_down0   ; is multiple of 8 so no need to check next block
181+  AAAA 23               inc hl                          ; check the next cell across if stradling a block - if b/horiz not multiple of 8
182+  AAAB 7E               ld a,(hl)                       ; get attr of cell below
183+  AAAC FE 47            cp 71
184+  AAAE C2 B6 AA         jp nz, control_checkcanmove_down1 ; don't set flag if not black
185+  AAB1              control_checkcanmove_down0:
186+  AAB1 1E 01            ld e,1
187+  AAB3 CD 86 AB         call player_justmoved
188+  AAB6              control_checkcanmove_down1:
189+  AAB6 C1               pop bc
190+  AAB7 F1               pop af
191+  AAB8 C9               ret
192+  AAB9
193+  AAB9              ;
194+  AAB9              ; Checks if the player can move up
195+  AAB9              ; Inputs:
196+  AAB9              ; bc - player coords, b horiz, c vert
197+  AAB9              ; Outputs:
198+  AAB9              ; de - 1 can move
199+  AAB9              control_checkcanmove_up:
200+  AAB9 F5               push af
201+  AABA C5               push bc
202+  AABB CD EC A2         call screen_getattraddressfromscreencoords ; get the memory location of cell into de
203+  AABE 62 6B            ld hl,de
204+  AAC0 C1               pop bc                          ; get bc back briefly
205+  AAC1 79               ld a,c                         ; screen coord
206+  AAC2 C5               push bc                         ; put it back for later
207+  AAC3 E6 07            and 7                           ; and with 7
208+  AAC5 FE 00            cp 0                            ; need to check if the vert coord is multiple of 8, if it is, subtract 32 from memory address
209+  AAC7 C2 CF AA         jp nz,control_checkcanmove_up2
210+  AACA 11 20 00         ld de,32                        ; look at cell directly above (sub 32)
211+  AACD ED 52            sbc hl,de                       ; memory location of cell above now in hl
212+  AACF              control_checkcanmove_up2:
213+  AACF 1E 00            ld e,0                          ; zero de
214+  AAD1 16 00            ld d,0
215+  AAD3 7E               ld a,(hl)                       ; get attr of cell above
216+  AAD4 FE 47            cp 71
217+  AAD6 C2 EF AA         jp nz, control_checkcanmove_up1 ; don't set flag if not black
218+  AAD9 C1               pop bc                          ; get bc back briefly
219+  AADA 78               ld a,b                         ; screen coord
220+  AADB C5               push bc                         ; put it back for later
221+  AADC E6 07            and 7                           ; and with 7
222+  AADE FE 00            cp 0
223+  AAE0 CA EA AA         jp z, control_checkcanmove_up0   ; is multiple of 8 so no need to check next block
224+  AAE3 23               inc hl                          ; check the next cell across if stradling a block - if b/horiz not multiple of 8
225+  AAE4 7E               ld a,(hl)                       ; get attr of cell below
226+  AAE5 FE 47            cp 71
227+  AAE7 C2 EF AA         jp nz, control_checkcanmove_up1 ; don't set flag if not black
228+  AAEA              control_checkcanmove_up0:
229+  AAEA 1E 01            ld e,1
230+  AAEC CD 86 AB         call player_justmoved
231+  AAEF              control_checkcanmove_up1:
232+  AAEF C1               pop bc
233+  AAF0 F1               pop af
234+  AAF1 C9               ret
235+  AAF2
236+  AAF2              ;
237+  AAF2              ; Checks if the player can move right
238+  AAF2              ; Inputs:
239+  AAF2              ; bc - player coords, b horiz, c vert
240+  AAF2              ; Outputs:
241+  AAF2              ; de - 1 can move
242+  AAF2              control_checkcanmove_right:
243+  AAF2 F5               push af
244+  AAF3 C5               push bc
245+  AAF4 CD EC A2         call screen_getattraddressfromscreencoords ; get the memory location of cell into de
246+  AAF7 23               inc hl                        ; look at cell directly to the right (add 1)
247+  AAF8 1E 00            ld e,0                          ; zero de
248+  AAFA 16 00            ld d,0
249+  AAFC 7E               ld a,(hl)                       ; get attr of cell to the right
250+  AAFD FE 47            cp 71
251+  AAFF C2 1F AB         jp nz, control_checkcanmove_right1 ; don't set flag if not black
252+  AB02 C1               pop bc                          ; get bc back briefly
253+  AB03 79               ld a,c                         ; screen coord
254+  AB04 C5               push bc                         ; put it back for later
255+  AB05 E6 07            and 7                           ; and with 7
256+  AB07 FE 00            cp 0
257+  AB09 CA 1A AB         jp z, control_checkcanmove_right0   ; is multiple of 8 so no need to check next block
258+  AB0C 11 20 00         ld de,32                          ; check the next cell down if stradling a block - if c/vert not multiple of 8
259+  AB0F 19               add hl,de
260+  AB10 1E 00            ld e,0
261+  AB12 16 00            ld d,0                          ; zero de again
262+  AB14 7E               ld a,(hl)                       ; get attr of cell below
263+  AB15 FE 47            cp 71
264+  AB17 C2 1F AB         jp nz, control_checkcanmove_right1 ; don't set flag if not black
265+  AB1A              control_checkcanmove_right0:
266+  AB1A 1E 01            ld e,1
267+  AB1C CD 86 AB         call player_justmoved
268+  AB1F              control_checkcanmove_right1:
269+  AB1F C1               pop bc
270+  AB20 F1               pop af
271+  AB21 C9               ret
272+  AB22
273+  AB22              ;
274+  AB22              ; Checks if the player can move left
275+  AB22              ; Inputs:
276+  AB22              ; bc - player coords, b horiz, c vert
277+  AB22              ; Outputs:
278+  AB22              ; de - 1 can move
279+  AB22              control_checkcanmove_left:
280+  AB22 F5               push af
281+  AB23 C5               push bc
282+  AB24 CD EC A2         call screen_getattraddressfromscreencoords ; get the memory location of cell into de
283+  AB27 62 6B            ld hl,de
284+  AB29 C1               pop bc                          ; get bc back briefly
285+  AB2A 78               ld a,b                         ; screen coord
286+  AB2B C5               push bc                         ; put it back for later
287+  AB2C E6 07            and 7                           ; and with 7
288+  AB2E FE 00            cp 0                            ; need to check if the horiz coord is multiple of 8, if it is, subtract 32 from memory address
289+  AB30 C2 34 AB         jp nz,control_checkcanmove_left2
290+  AB33 2B               dec hl                       ; memory location of cell left now in hl
291+  AB34              control_checkcanmove_left2:
292+  AB34 1E 00            ld e,0                          ; zero de
293+  AB36 16 00            ld d,0
294+  AB38 7E               ld a,(hl)                       ; get attr of cell to the right
295+  AB39 FE 47            cp 71
296+  AB3B C2 5B AB         jp nz, control_checkcanmove_left1 ; don't set flag if not black
297+  AB3E C1               pop bc                          ; get bc back briefly
298+  AB3F 79               ld a,c                         ; screen coord
299+  AB40 C5               push bc                         ; put it back for later
300+  AB41 E6 07            and 7                           ; and with 7
301+  AB43 FE 00            cp 0
302+  AB45 CA 56 AB         jp z, control_checkcanmove_left0   ; is multiple of 8 so no need to check next block
303+  AB48 11 20 00         ld de,32                          ; check the next cell down if stradling a block - if c/vert not multiple of 8
304+  AB4B 19               add hl,de
305+  AB4C 1E 00            ld e,0
306+  AB4E 16 00            ld d,0                          ; zero de again
307+  AB50 7E               ld a,(hl)                       ; get attr of cell below
308+  AB51 FE 47            cp 71
309+  AB53 C2 5B AB         jp nz, control_checkcanmove_left1 ; don't set flag if not black
310+  AB56              control_checkcanmove_left0:
311+  AB56 1E 01            ld e,1
312+  AB58 CD 86 AB         call player_justmoved
313+  AB5B              control_checkcanmove_left1:
314+  AB5B C1               pop bc
315+  AB5C F1               pop af
316+  AB5D C9               ret
317+  AB5E
318+  AB5E
# file closed: game/control.asm
 31   AB5E                  include "game\game.asm"
# file opened: game/game.asm
# file closed: game/game.asm
 32   AB5E                  include "game\player.asm"
# file opened: game/player.asm
  1+  AB5E              ;
  2+  AB5E              ;   Data for current player
  3+  AB5E              ;   horiz,vert,dir (0 up/down, 1 left, 2 right), frame, frame transition count
  4+  AB5E              player:
  5+  AB5E 00 00 02 00      defb    0,0,2,0,1
  5+  AB62 01
  6+  AB63              ;
  7+  AB63              ; Initializes a player
  8+  AB63              ;
  9+  AB63              player_init:
 10+  AB63 ED 4B 10 80      ld bc,(start_coord)
 11+  AB67 ED 43 5E AB      ld (player),bc
 12+  AB6B C9               ret
 13+  AB6C
 14+  AB6C              ;
 15+  AB6C              ; Draws the player at the current position or deletes them
 16+  AB6C              ;
 17+  AB6C              player_drawplayer:
 18+  AB6C 3A 60 AB         ld a,(player+2)             ; get the current direction
 19+  AB6F 5F               ld e,a                      ; store in e
 20+  AB70 3A 61 AB         ld a,(player+3)             ; get the current frame
 21+  AB73 83               add a,e
 22+  AB74 07               rlca
 23+  AB75 07               rlca
 24+  AB76 07               rlca                        ; multiply by eight
 25+  AB77 6F               ld l,a
 26+  AB78 26 00            ld h,0
 27+  AB7A 11 05 A9         ld de,player_sprite
 28+  AB7D 19               add hl,de                   ; load hl with the location of the player sprite data
 29+  AB7E              player_drawplayer0:
 30+  AB7E ED 4B 5E AB      ld bc,(player)         ; load bc with the start coords
 31+  AB82 CD 49 A3         call sprites_drawsprite     ; call the routine to draw the sprite
 32+  AB85 C9               ret
 33+  AB86
 34+  AB86              ;
 35+  AB86              ; Runs after the player just moved. Changes animation frame if required
 36+  AB86              ;
 37+  AB86              player_justmoved:
 38+  AB86 D9               exx
 39+  AB87 3A 62 AB         ld a,(player+4)             ; get the transition count
 40+  AB8A FE 00            cp 0
 41+  AB8C CA 92 AB         jp z, player_justmoved2     ; if zero reset and change the frame
 42+  AB8F C3 AC AB         jp player_justmoved1       ; otherwise decrease and continue
 43+  AB92              player_justmoved2:
 44+  AB92                  ; reset and change frame in here
 45+  AB92 3E 01            ld a,1
 46+  AB94 32 62 AB         ld (player+4),a            ; reset back to whatever
 47+  AB97 3A 61 AB         ld a,(player+3)             ; load the frame
 48+  AB9A FE 03            cp 3                       ; flip between 3 and 0
 49+  AB9C C2 A4 AB         jp nz, player_justmoved4
 50+  AB9F 3E 00            ld a,0
 51+  ABA1 C3 A6 AB         jp player_justmoved5
 52+  ABA4              player_justmoved4:
 53+  ABA4 3E 03            ld a,3
 54+  ABA6              player_justmoved5:
 55+  ABA6 32 61 AB         ld (player+3),a           ; save back
 56+  ABA9 C3 B0 AB         jp player_justmoved3
 57+  ABAC              player_justmoved1:
 58+  ABAC                  ; decrease count
 59+  ABAC 3D               dec a
 60+  ABAD 32 62 AB         ld (player+4),a
 61+  ABB0              player_justmoved3:
 62+  ABB0 D9               exx;
 63+  ABB1 C9               ret
# file closed: game/player.asm
 33   ABB2                  include "game\ship.asm"
# file opened: game/ship.asm
  1+  ABB2              ;
  2+  ABB2              ; Ship initial position: vert,horiz
  3+  ABB2              ;
  4+  ABB2              ship_initpos:
  5+  ABB2 00 24            defb 0,36
  6+  ABB4              ship_initpos2:
  7+  ABB4 00 00            defb 0,0
  8+  ABB6              ship_frame:
  9+  ABB6 00               defb 0
 10+  ABB7              ;
 11+  ABB7              ; The current memory location
 12+  ABB7              ;
 13+  ABB7              ship_current_sprite:
 14+  ABB7 00 00            defb 0,0
 15+  ABB9
 16+  ABB9              ship_current_coords:
 17+  ABB9 00 00            defb 0,0
 18+  ABBB
 19+  ABBB              ;
 20+  ABBB              ;   Draw and land the ship - first move the ship down, then across, drawing the player in the middle
 21+  ABBB              ;
 22+  ABBB              ship_land:
 23+  ABBB ED 4B B2 AB      ld bc,(ship_initpos)
 24+  ABBF ED 43 B4 AB      ld (ship_initpos2),bc        ; save the initial position for later use
 25+  ABC3 1E 00            ld e,0                      ; store a flag to track first time round
 26+  ABC5 06 08            ld b,8                      ; move down 8 pixels
 27+  ABC7              ship_land0:
 28+  ABC7 C5               push bc
 29+  ABC8 7B               ld a,e
 30+  ABC9 D5               push de                     ; store de for next time round
 31+  ABCA FE 01            cp 1                        ; check first time flag
 32+  ABCC C2 E1 AB         jp nz,ship_land1             ; don't draw over previous one if first time
 33+  ABCF CD 3A AC         call ship_draw_full         ; delete old one
 34+  ABD2 CD 1E AC         call ship_change_frame      ; increment the frame
 35+  ABD5 ED 4B B4 AB      ld bc,(ship_initpos2) ; get the current coords
 36+  ABD9 81 C6 01         add c,1                     ; move down one pixels
 37+  ABDC 4F               ld c,a
 38+  ABDD ED 43 B4 AB      ld (ship_initpos2),bc
 39+  ABE1              ship_land1:
 40+  ABE1 CD 3A AC         call ship_draw_full         ; draw the ship
 41+  ABE4 CD 33 AC         call ship_draw_screen
 42+  ABE7 D1               pop de
 43+  ABE8 1E 01            ld e,1
 44+  ABEA C1               pop bc
 45+  ABEB 10 DA            djnz ship_land0
 46+  ABED                  ; done moving down
 47+  ABED                  ; now move across
 48+  ABED CD 6C AB         call player_drawplayer      ; draw player
 49+  ABF0 CD 3A AC         call ship_draw_full         ; delete old one
 50+  ABF3 1E 00            ld e,0                      ; store a flag to track first time round
 51+  ABF5 06 14            ld b,20                      ; move down 8 pixels
 52+  ABF7              ship_land3:
 53+  ABF7 C5               push bc
 54+  ABF8 7B               ld a,e
 55+  ABF9 D5               push de                     ; store de for next time round
 56+  ABFA FE 01            cp 1                        ; check first time flag
 57+  ABFC C2 11 AC         jp nz,ship_land2             ; don't draw over previous one if first time
 58+  ABFF CD 3A AC         call ship_draw_full         ; delete old one
 59+  AC02 CD 1E AC         call ship_change_frame      ; increment the frame
 60+  AC05 ED 4B B4 AB      ld bc,(ship_initpos2)       ; get the current coords
 61+  AC09 78               ld a,b
 62+  AC0A D6 01            sub 1                       ; move back one pixels
 63+  AC0C 47               ld b,a
 64+  AC0D ED 43 B4 AB      ld (ship_initpos2),bc
 65+  AC11              ship_land2:
 66+  AC11 CD 3A AC         call ship_draw_full         ; draw the ship
 67+  AC14 CD 33 AC         call ship_draw_screen
 68+  AC17 D1               pop de
 69+  AC18 1E 01            ld e,1
 70+  AC1A C1               pop bc
 71+  AC1B 10 DA            djnz ship_land3
 72+  AC1D C9               ret
 73+  AC1E
 74+  AC1E              ;
 75+  AC1E              ; Swap the animation frame between 0 and 32. This will be added to the memory location later
 76+  AC1E              ;
 77+  AC1E              ship_change_frame:
 78+  AC1E F5               push af
 79+  AC1F 3A B6 AB         ld a,(ship_frame)
 80+  AC22 FE 00            cp 0
 81+  AC24 CA 2C AC         jp z,ship_change_frame0
 82+  AC27 3E 00            ld a,0                      ; flip to 0
 83+  AC29 C3 2E AC         jp ship_change_frame1
 84+  AC2C              ship_change_frame0:
 85+  AC2C 3E 20            ld a,32                      ; flip to 32
 86+  AC2E              ship_change_frame1:
 87+  AC2E 32 B6 AB         ld (ship_frame),a            ; save the frame
 88+  AC31 F1               pop af
 89+  AC32 C9               ret
 90+  AC33
 91+  AC33              ship_draw_screen:
 92+  AC33 76               halt
 93+  AC34 F3               di
 94+  AC35 CD 76 A1         call screen_buffertoscreen  ; copy buffer to screen
 95+  AC38 FB               ei                          ; enable interupts
 96+  AC39 C9               ret
 97+  AC3A
 98+  AC3A              ship_draw_full:
 99+  AC3A 21 45 A9         ld hl,ship_sprite
100+  AC3D ED 4B B4 AB      ld bc,(ship_initpos2)         ; load bc with the start coords
101+  AC41 22 B7 AB         ld (ship_current_sprite),hl  ; put into memory
102+  AC44 ED 43 B9 AB      ld (ship_current_coords),bc  ; put into memory
103+  AC48 CD 67 AC         call ship_draw
104+  AC4B 08               ex af,af'
105+  AC4C 3A B6 AB         ld a,(ship_frame)            ; get the animation frame
106+  AC4F 16 00            ld d,0
107+  AC51 5F               ld e,a
108+  AC52 19               add hl,de
109+  AC53 22 B7 AB         ld (ship_current_sprite),hl  ; put into memory
110+  AC56 08               ex af,af'
111+  AC57 ED 4B B4 AB      ld bc,(ship_initpos2)         ; load bc with the start coords
112+  AC5B 81 C6 08         add c,8                      ; move one line down
113+  AC5E 4F               ld c,a
114+  AC5F ED 43 B9 AB      ld (ship_current_coords),bc  ; put into memory
115+  AC63 CD 67 AC         call ship_draw
116+  AC66 C9               ret
117+  AC67
118+  AC67              ;
119+  AC67              ; Draw the ship
120+  AC67              ; Inputs:
121+  AC67              ; None, all in memory
122+  AC67              ;
123+  AC67              ship_draw:
124+  AC67 3E 04            ld a,4                              ; 4 pieces per half
125+  AC69              ship_draw0:
126+  AC69 F5               push af
127+  AC6A 2A B7 AB         ld hl,(ship_current_sprite)
128+  AC6D ED 4B B9 AB      ld bc,(ship_current_coords)         ; load bc with the start coords
129+  AC71 CD 49 A3         call sprites_drawsprite
130+  AC74 2A B7 AB         ld hl,(ship_current_sprite)
131+  AC77 ED 4B B9 AB      ld bc,(ship_current_coords)         ; load bc with the start coords
132+  AC7B 11 08 00         ld de,8
133+  AC7E 19               add hl,de
134+  AC7F 80 C6 08         add b,8
135+  AC82 47               ld b,a
136+  AC83 22 B7 AB         ld (ship_current_sprite),hl         ; put into memory
137+  AC86 ED 43 B9 AB      ld (ship_current_coords),bc         ; put into memory
138+  AC8A F1               pop af
139+  AC8B 3D               dec a
140+  AC8C FE 00            cp 0
141+  AC8E C2 69 AC         jp nz,ship_draw0
142+  AC91
143+  AC91 C9               ret
144+  AC92
# file closed: game/ship.asm
 34   AC92
 35   AC92              ;===========================================================================
 36   AC92              ; main routine - the code execution starts here.
 37   AC92              ; Sets up the new interrupt routine, the memory
 38   AC92              ; banks and jumps to the start loop.
 39   AC92              ;===========================================================================
 40   AC92              main:
 41   AC92
 42   AC92                  ; Setup stack
 43   AC92 31 80 AD         ld sp,stack_top
 44   AC95
 45   AC95                  ; Draw the title screen
 46   AC95 CD B1 A3         call titlescreen_show
 47   AC98
 48   AC98 CD 00 80         call init_start
 49   AC9B CD 1C A2         call screen_draw
 50   AC9E CD 63 AB         call player_init
 51   ACA1 CD BB AB         call ship_land              ; land the ship
 52   ACA4
 53   ACA4              mloop:
 54   ACA4 76               halt
 55   ACA5 F3               di
 56   ACA6 CD 76 A1         call screen_buffertoscreen  ; copy buffer to screen
 57   ACA9 FB               ei                          ; enable interupts
 58   ACAA
 59   ACAA CD 6C AB         call player_drawplayer      ; delete player
 60   ACAD CD A5 A9         call control_keyboard       ; check keyboard
 61   ACB0 CD 6C AB         call player_drawplayer      ; draw player
 62   ACB3
 63   ACB3 C3 A4 AC         jp mloop
 64   ACB6
 65   ACB6              ;===========================================================================
 66   ACB6              ; Stack.
 67   ACB6              ;===========================================================================
 68   ACB6
 69   ACB6              ; Stack: this area is reserved for the stack
 70   ACB6              STACK_SIZE: equ 100    ; in words
 71   ACB6
 72   ACB6              ; Reserve stack space
 73   ACB6 00 00            defw 0  ; WPMEM, 2
 74   ACB8              stack_bottom:
 75   ACB8 00 00 00...      defs    STACK_SIZE*2, 0
 76   AD80              stack_top:
 77   AD80 00 00            defw 0  ; WPMEM, 2
 78   AD82
 79   AD82                     SAVESNA "ThePit.sna", main
# file closed: main.asm
