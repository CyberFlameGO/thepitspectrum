# file opened: main.asm
  1   0000                  DEVICE ZXSPECTRUM48
  2   0000
  3   0000                  ORG $8000
  4   8000
  5   8000              ;===========================================================================
  6   8000              ; Persistent watchpoint.
  7   8000              ; Change WPMEMx (remove the 'x' from WPMEMx) below to activate.
  8   8000              ; If you do so the program will hit a breakpoint when it tries to
  9   8000              ; write to the first byte of the 3rd line.
 10   8000              ; When program breaks in the fill_memory sub routine please hover over hl
 11   8000              ; to see that it contains 0x5804 or COLOR_SCREEN+64.
 12   8000              ;===========================================================================
 13   8000
 14   8000              ; WPMEMx 0x5840, 1, w
 15   8000
 16   8000
 17   8000              ;===========================================================================
 18   8000              ; Include modules
 19   8000              ;===========================================================================
 20   8000                  include "init.asm"
# file opened: init.asm
  1+  8000              ;
  2+  8000              ; Set up at start up
  3+  8000              ;
  4+  8000              init_start:
  5+  8000              ; We want a black screen.
  6+  8000
  7+  8000 3E 47            ld a,71             ; white ink (7) on black paper (0),
  8+  8002                                      ; bright (64).
  9+  8002 CD 67 80         call utilities_clearscreen
 10+  8005 32 8D 5C         ld (23693),a        ; set our screen colours.
 11+  8008 AF               xor a               ; quick way to load accumulator with zero.
 12+  8009 CD 9B 22         call 8859           ; set permanent border colours.
 13+  800C
 14+  800C 21 F6 A6         ld hl,screen_offset ; reset some temp variables
 15+  800F 36 00            ld (hl),0
 16+  8011 21 F7 A6         ld hl,screen_tmp
 17+  8014 36 00            ld (hl),0
 18+  8016 21 8E A5         ld hl,buffer_tmp
 19+  8019 36 00            ld (hl),0
 20+  801B 23               inc hl
 21+  801C 36 00            ld (hl),0
 22+  801E
 23+  801E CD 4D B8         call game_resetcurrentframe ; reset current frame
 24+  8021
 25+  8021 C9               ret
 26+  8022
 27+  8022              ;
 28+  8022              ;   Start coord
 29+  8022              ;   vert c, horiz b
 30+  8022              init_coord:
 31+  8022 18 30            defb 24,48
 32+  8024
 33+  8024              ;
 34+  8024              ; Number of lives to start
 35+  8024              ;
 36+  8024              init_lives:
 37+  8024 03               defb 3
 38+  8025
 39+  8025              ;
 40+  8025              ; Score to start
 41+  8025              ;
 42+  8025              init_score:
 43+  8025 30 30 30 30      defb '000000'
 43+  8029 30 30
# file closed: init.asm
 21   802B                  include "utilities.asm"
# file opened: utilities.asm
  1+  802B              ; ##########################################################################
  2+  802B              ; Print a character
  3+  802B              ; Inputs:
  4+  802B              ; b - x coord
  5+  802B              ; c - y coord
  6+  802B              ; d - character
  7+  802B              ; e - colour
  8+  802B              ; ##########################################################################
  9+  802B              utilities_print_char:
 10+  802B 7B               ld a,e
 11+  802C 32 8F 5C         ld (23695),a        ; set our temporary screen colours.
 12+  802F 3E 16            ld a,22
 13+  8031 D7               rst 16              ; Calls the Sinclair PRINT AT routine
 14+  8032 78               ld a,b              ; Gets the X co-ordinate
 15+  8033 3D               dec a
 16+  8034 D7               rst 16
 17+  8035 79               ld a,c              ; and the Y co-ordinate
 18+  8036 D7               rst 16              ; So, essentially PRINT AT X,Y; like in BASIC
 19+  8037 7A               ld a,d              ; ASCII code for udg.
 20+  8038 D7               rst 16              ; draw block.
 21+  8039 C9               ret
 22+  803A
 23+  803A
 24+  803A              ;Inputs:
 25+  803A              ;     DE and A are factors
 26+  803A              ;Outputs:
 27+  803A              ;     A is not changed
 28+  803A              ;     B is 0
 29+  803A              ;     C is not changed
 30+  803A              ;     DE is not changed
 31+  803A              ;     HL is the product
 32+  803A              ;Time:
 33+  803A              ;     342+6x
 34+  803A              ;
 35+  803A              utilities_multiply:
 36+  803A 06 08            ld b,8          ;7           7
 37+  803C 21 00 00         ld hl,0         ;10         10
 38+  803F 29               add hl,hl     ;11*8       88
 39+  8040 07               rlca          ;4*8        32
 40+  8041 30 01            jr nc,$+3     ;(12|18)*8  96+6x
 41+  8043 19                   add hl,de   ;--         --
 42+  8044 10 F9            djnz $-5      ;13*7+8     99
 43+  8046 C9               ret             ;10         10
 44+  8047
 45+  8047              utilities_waitforkey:
 46+  8047 21 08 5C         ld hl,23560         ; LAST K system variable.
 47+  804A 36 00            ld (hl),0           ; put null value there.
 48+  804C              utilities_waitforkey0:
 49+  804C 7E               ld a,(hl)           ; new value of LAST K.
 50+  804D FE 00            cp 0                ; is it still zero?
 51+  804F 28 FB            jr z,utilities_waitforkey0           ; yes, so no key pressed.
 52+  8051 C9               ret                 ; key was pressed.
 53+  8052
 54+  8052              ;
 55+  8052              ; Waits number of frames for keypress. If got, returns 1, if not 0
 56+  8052              ; Inputs:
 57+  8052              ; a - number of frames to waits
 58+  8052              ; Ouputs:
 59+  8052              ; e - 0 not pressed, 1 pressed
 60+  8052              utilities_waitforkey_forframes:
 61+  8052 21 08 5C         ld hl,23560         ; LAST K system variable.
 62+  8055 36 00            ld (hl),0           ; put null value there.
 63+  8057 47               ld b,a              ; number of frames to wait
 64+  8058              utilities_waitforkey_forframes0:
 65+  8058 7E               ld a,(hl)           ; new value of LAST K.
 66+  8059 FE 00            cp 0                ; is it still zero?
 67+  805B 28 03            jr z,utilities_waitforkey_forframes1           ; yes, so no key pressed.
 68+  805D 1E 01            ld e,1              ; set the pressed flag
 69+  805F C9               ret                 ; key was pressed.
 70+  8060              utilities_waitforkey_forframes1:
 71+  8060 76               halt                ; wait for frame
 72+  8061 76               halt                ; wait for frame
 73+  8062 10 F4            djnz utilities_waitforkey_forframes0 ; loop again
 74+  8064 1E 00            ld e,0              ; nothing pressed in time
 75+  8066 C9               ret
 76+  8067
 77+  8067              ;
 78+  8067              ; Clears the screen
 79+  8067              ; Inputs:
 80+  8067              ; a - attribute colour
 81+  8067              utilities_clearscreen:
 82+  8067 76               halt
 83+  8068 21 00 58         ld hl,22528         ; attr
 84+  806B 11 01 58         ld de,22529         ; attr+1
 85+  806E 01 FF 02         ld bc,767
 86+  8071 77               ld (hl),a
 87+  8072 ED B0            ldir
 88+  8074
 89+  8074 21 00 40         ld hl, 16384        ;pixels
 90+  8077 11 01 40         ld de, 16385        ;pixels + 1
 91+  807A 01 FF 17         ld bc, 6143         ;pixels area length - 1
 92+  807D 36 00            ld (hl), 0          ;set first byte to '0'
 93+  807F ED B0            ldir                ;copy bytes
 94+  8081
 95+  8081 C9               ret
 96+  8082
 97+  8082              ;
 98+  8082              ; Wait for a number of frames
 99+  8082              ; Inputs:
100+  8082              ; b - number of frames
101+  8082              utilities_pauseforframes:
102+  8082 76               halt
103+  8083 10 FD            djnz utilities_pauseforframes
104+  8085 C9               ret
105+  8086
106+  8086              utilities_readkey:
107+  8086 21 A6 80         LD HL,utilties_keymap              ; Point HL at the keyboard list
108+  8089 16 08            LD D,8                                  ; This is the number of ports (rows) to check
109+  808B 0E FE            LD C,$FE                            ; C is always FEh for reading keyboard ports
110+  808D              utilities_readkey_0:
111+  808D 46               LD B,(HL)                               ; Get the keyboard port address from table
112+  808E 23               INC HL                                  ; Increment to list of keys
113+  808F ED 78            IN A,(C)                                ; Read the row of keys in
114+  8091 E6 1F            AND $1F                                     ; We are only interested in the first five bits
115+  8093 1E 05            LD E,5                                  ; This is the number of keys in the row
116+  8095              utilities_readkey_1:
117+  8095 CB 3F            SRL A                                   ; Shift A right; bit 0 sets carry bit
118+  8097 30 0B            JR NC,utilities_readkey_2   ; If the bit is 0, we've found our key
119+  8099 23               INC HL                                  ; Go to next table address
120+  809A 1D               DEC E                                   ; Decrement key loop counter
121+  809B 20 F8            JR NZ,utilities_readkey_1   ; Loop around until this row finished
122+  809D 15               DEC D                                   ; Decrement row loop counter
123+  809E 20 ED            JR NZ,utilities_readkey_0   ; Loop around until we are done
124+  80A0 A7               AND A                                   ; Clear A (no key found)
125+  80A1 C3 86 80         jp utilities_readkey
126+  80A4              utilities_readkey_2:
127+  80A4 7E               LD A,(HL)                               ; We've found a key at this point; fetch the character code!
128+  80A5 C9               RET
129+  80A6
130+  80A6              utilties_keymap:
131+  80A6 FE 23 5A 58      defb $FE,"#","Z","X","C","V"
131+  80AA 43 56
132+  80AC FD 41 53 44      defb $FD,"A","S","D","F","G"
132+  80B0 46 47
133+  80B2 FB 51 57 45      defb $FB,"Q","W","E","R","T"
133+  80B6 52 54
134+  80B8 F7 31 32 33      defb $F7,"1","2","3","4","5"
134+  80BC 34 35
135+  80BE EF 30 39 38      defb $EF,"0","9","8","7","6"
135+  80C2 37 36
136+  80C4 DF 50 4F 49      defb $DF,"P","O","I","U","Y"
136+  80C8 55 59
137+  80CA BF 23 4C 4B      defb $BF,"#","L","K","J","H"
137+  80CE 4A 48
138+  80D0 7F 20 23 4D      defb $7F," ","#","M","N","B"
138+  80D4 4E 42
# file closed: utilities.asm
 22   80D6                  include "strings.asm"
# file opened: strings.asm
  1+  80D6              string_score1:
  2+  80D6 04 00 53 43      defb 4,0,'SCORE1',255
  2+  80DA 4F 52 45 31
  2+  80DE FF
  3+  80DF              string_scorenumbers1:
  4+  80DF 04 01 30 30      defb 4,1,'000000',255
  4+  80E3 30 30 30 30
  4+  80E7 FF
  5+  80E8              string_company:
  6+  80E8 0E 00 45 4E      defb 14,0,'ENV',255
  6+  80EC 56 FF
  7+  80EE              string_credits:
  8+  80EE 0C 01 50 4C      defb 12,1,'PLAYER 1',255
  8+  80F2 41 59 45 52
  8+  80F6 20 31 FF
  9+  80F9              string_score2:
 10+  80F9 16 00 53 43      defb 22,0,'SCORE2',255
 10+  80FD 4F 52 45 32
 10+  8101 FF
 11+  8102              string_scorenumbers2:
 12+  8102 16 01 30 30      defb 22,1,'000000',255
 12+  8106 30 30 30 30
 12+  810A FF
 13+  810B              string_titlescreen_copyright:
 14+  810B 04 16 7F 20      defb 4,22, 127,' 1982 AW ZILEC ELC LTD',255
 14+  810F 31 39 38 32
 14+  8113 20 41 57 20
 14+  8117 5A 49 4C 45
 14+  811B 43 20 45 4C
 14+  811F 43 20 4C 54
 14+  8123 44 FF
 15+  8125
 16+  8125
 17+  8125              string_alttitlescreen_1:
 18+  8125 0C 00 43 52      defb 12,0,'CREDITS 1',255
 18+  8129 45 44 49 54
 18+  812D 53 20 31 FF
 19+  8131              string_alttitlescreen_2:
 20+  8131 00 02 20 20      defb 0,2,'           THE OBJECT',254
 20+  8135 20 20 20 20
 20+  8139 20 20 20 20
 20+  813D 20 54 48 45
 20+  8141 20 4F 42 4A
 20+  8145 45 43 54 FE
 21+  8149 00 03 20 20      defb 0,3,'          OF THIS GAME',254
 21+  814D 20 20 20 20
 21+  8151 20 20 20 20
 21+  8155 4F 46 20 54
 21+  8159 48 49 53 20
 21+  815D 47 41 4D 45
 21+  8161 FE
 22+  8162 00 04 20 20      defb 0,4,'         IS TO DIG DOWN',254
 22+  8166 20 20 20 20
 22+  816A 20 20 20 49
 22+  816E 53 20 54 4F
 22+  8172 20 44 49 47
 22+  8176 20 44 4F 57
 22+  817A 4E FE
 23+  817C 00 05 20 20      defb 0,5,'        TO THE BOTTOM PIT',254
 23+  8180 20 20 20 20
 23+  8184 20 20 54 4F
 23+  8188 20 54 48 45
 23+  818C 20 42 4F 54
 23+  8190 54 4F 4D 20
 23+  8194 50 49 54 FE
 24+  8198 00 06 20 20      defb 0,6,'               AND',254
 24+  819C 20 20 20 20
 24+  81A0 20 20 20 20
 24+  81A4 20 20 20 20
 24+  81A8 20 41 4E 44
 24+  81AC FE
 25+  81AD 00 07 20 20      defb 0,7,'        COLLECT AT LEAST',254
 25+  81B1 20 20 20 20
 25+  81B5 20 20 43 4F
 25+  81B9 4C 4C 45 43
 25+  81BD 54 20 41 54
 25+  81C1 20 4C 45 41
 25+  81C5 53 54 FE
 26+  81C8 00 08 20 20      defb 0,8,'         ONE LARGE JEWEL',254
 26+  81CC 20 20 20 20
 26+  81D0 20 20 20 4F
 26+  81D4 4E 45 20 4C
 26+  81D8 41 52 47 45
 26+  81DC 20 4A 45 57
 26+  81E0 45 4C FE
 27+  81E3 00 09 20 20      defb 0,9,'              THEN',254
 27+  81E7 20 20 20 20
 27+  81EB 20 20 20 20
 27+  81EF 20 20 20 20
 27+  81F3 54 48 45 4E
 27+  81F7 FE
 28+  81F8 00 0A 20 20      defb 0,10,'         RETURN TO SHIP',254
 28+  81FC 20 20 20 20
 28+  8200 20 20 20 52
 28+  8204 45 54 55 52
 28+  8208 4E 20 54 4F
 28+  820C 20 53 48 49
 28+  8210 50 FE
 29+  8212 00 0B 20 20      defb 0,11,'         THRU UPPER PIT',255
 29+  8216 20 20 20 20
 29+  821A 20 20 20 54
 29+  821E 48 52 55 20
 29+  8222 55 50 50 45
 29+  8226 52 20 50 49
 29+  822A 54 FF
 30+  822C              string_alttitlescreen_3:
 31+  822C 00 0D 20 20      defb 0,13,'    SINGLE BONUS  5000 POINTS',254
 31+  8230 20 20 53 49
 31+  8234 4E 47 4C 45
 31+  8238 20 42 4F 4E
 31+  823C 55 53 20 20
 31+  8240 35 30 30 30
 31+  8244 20 50 4F 49
 31+  8248 4E 54 53 FE
 32+  824C 00 0E 20 20      defb 0,14,'      COLLECT 1 LARGE JEWEL',254
 32+  8250 20 20 20 20
 32+  8254 43 4F 4C 4C
 32+  8258 45 43 54 20
 32+  825C 31 20 4C 41
 32+  8260 52 47 45 20
 32+  8264 4A 45 57 45
 32+  8268 4C FE
 33+  826A 00 0F 20 20      defb 0,15,'       AND RETURN TO SHIP',254
 33+  826E 20 20 20 20
 33+  8272 20 41 4E 44
 33+  8276 20 52 45 54
 33+  827A 55 52 4E 20
 33+  827E 54 4F 20 53
 33+  8282 48 49 50 FE
 34+  8286 00 11 20 20      defb 0,17,'    DOUBLE BONUS  10000 POINTS',254
 34+  828A 20 20 44 4F
 34+  828E 55 42 4C 45
 34+  8292 20 42 4F 4E
 34+  8296 55 53 20 20
 34+  829A 31 30 30 30
 34+  829E 30 20 50 4F
 34+  82A2 49 4E 54 53
 34+  82A6 FE
 35+  82A7 00 12 20 20      defb 0,18,'    COLLECT ALL 3 LARGE JEWELS',254
 35+  82AB 20 20 43 4F
 35+  82AF 4C 4C 45 43
 35+  82B3 54 20 41 4C
 35+  82B7 4C 20 33 20
 35+  82BB 4C 41 52 47
 35+  82BF 45 20 4A 45
 35+  82C3 57 45 4C 53
 35+  82C7 FE
 36+  82C8 00 13 20 20      defb 0,19,'       OR   ALL 4 SMALL JEWELS',254
 36+  82CC 20 20 20 20
 36+  82D0 20 4F 52 20
 36+  82D4 20 20 41 4C
 36+  82D8 4C 20 34 20
 36+  82DC 53 4D 41 4C
 36+  82E0 4C 20 4A 45
 36+  82E4 57 45 4C 53
 36+  82E8 FE
 37+  82E9 00 15 20 20      defb 0,21,'    TRIPLE BONUS  15000 POINTS',254
 37+  82ED 20 20 54 52
 37+  82F1 49 50 4C 45
 37+  82F5 20 42 4F 4E
 37+  82F9 55 53 20 20
 37+  82FD 31 35 30 30
 37+  8301 30 20 50 4F
 37+  8305 49 4E 54 53
 37+  8309 FE
 38+  830A 00 16 20 20      defb 0,22,'       COLLECT ALL 7 JEWELS',255
 38+  830E 20 20 20 20
 38+  8312 20 43 4F 4C
 38+  8316 4C 45 43 54
 38+  831A 20 41 4C 4C
 38+  831E 20 37 20 4A
 38+  8322 45 57 45 4C
 38+  8326 53 FF
 39+  8328
 40+  8328              string_lifescreen_player:
 41+  8328 0B 00 20 50      defb 11,0,' PLAYER 1 ',255
 41+  832C 4C 41 59 45
 41+  8330 52 20 31 20
 41+  8334 FF
 42+  8335              string_lifescreen_lives:
 43+  8335 0B 03 30 20      defb 11,3,48,' MEN LEFT',255
 43+  8339 4D 45 4E 20
 43+  833D 4C 45 46 54
 43+  8341 FF
 44+  8342              string_lifescreen_lastman:
 45+  8342 0C 03 4C 41      defb 12,3,'LAST MAN',255
 45+  8346 53 54 20 4D
 45+  834A 41 4E FF
 46+  834D
 47+  834D              string_gameoverscreen_gameover:
 48+  834D 0C 06 47 41      defb 12,6,'GAME OVER',255
 48+  8351 4D 45 20 4F
 48+  8355 56 45 52 FF
 49+  8359              string_gameoverscreen_copyright:
 50+  8359 05 12 7F 20      defb 5,18,127,' 1982 AW ZILEC ELC LTD',255
 50+  835D 31 39 38 32
 50+  8361 20 41 57 20
 50+  8365 5A 49 4C 45
 50+  8369 43 20 45 4C
 50+  836D 43 20 4C 54
 50+  8371 44 FF
 51+  8373              string_gameoverscreen_bestscores:
 52+  8373 07 16 42 45      defb 7,22,'BEST SCORES TODAY',255
 52+  8377 53 54 20 53
 52+  837B 43 4F 52 45
 52+  837F 53 20 54 4F
 52+  8383 44 41 59 FF
 53+  8387              string_gameover_credits:
 54+  8387 0C 01 43 52      defb 12,1,'CREDITS 0',255
 54+  838B 45 44 49 54
 54+  838F 53 20 30 FF
 55+  8393
 56+  8393              string_highscore_congratulations:
 57+  8393 08 05 43 4F      defb 8,5,'CONGRATULATIONS',255
 57+  8397 4E 47 52 41
 57+  839B 54 55 4C 41
 57+  839F 54 49 4F 4E
 57+  83A3 53 FF
 58+  83A5              string_highscore_player1:
 59+  83A5 0C 07 50 4C      defb 12,7,'PLAYER 1',255
 59+  83A9 41 59 45 52
 59+  83AD 20 31 FF
 60+  83B0              string_highscore_player2:
 61+  83B0 0C 07 50 4C      defb 12,7,'PLAYER 2',255
 61+  83B4 41 59 45 52
 61+  83B8 20 32 FF
 62+  83BB              string_highscore_youhaveearned:
 63+  83BB 08 0A 59 4F      defb 8,10,'YOU HAVE EARNED',255
 63+  83BF 55 20 48 41
 63+  83C3 56 45 20 45
 63+  83C7 41 52 4E 45
 63+  83CB 44 FF
 64+  83CD              string_highscore_place1:
 65+  83CD 06 0C 54 48      defb 6,12,'THE GREATEST SCORE',255
 65+  83D1 45 20 47 52
 65+  83D5 45 41 54 45
 65+  83D9 53 54 20 53
 65+  83DD 43 4F 52 45
 65+  83E1 FF
 66+  83E2              string_highscore_place2:
 67+  83E2 06 0C 54 48      defb 6,12,'THE 2ND BEST SCORE',255
 67+  83E6 45 20 32 4E
 67+  83EA 44 20 42 45
 67+  83EE 53 54 20 53
 67+  83F2 43 4F 52 45
 67+  83F6 FF
 68+  83F7              string_highscore_place3:
 69+  83F7 06 0C 54 48      defb 6,12,'THE 3RD BEST SCORE',255
 69+  83FB 45 20 33 52
 69+  83FF 44 20 42 45
 69+  8403 53 54 20 53
 69+  8407 43 4F 52 45
 69+  840B FF
 70+  840C              string_highscore_pleaseenter
 71+  840C 03 0F 52 45      defb 3,15,'RECORD YOUR INITIALS BELOW',255
 71+  8410 43 4F 52 44
 71+  8414 20 59 4F 55
 71+  8418 52 20 49 4E
 71+  841C 49 54 49 41
 71+  8420 4C 53 20 42
 71+  8424 45 4C 4F 57
 71+  8428 FF
 72+  8429
 73+  8429              string_endlevel_youhaveearned:
 74+  8429 08 0B 59 4F      defb 8,11,'YOU HAVE EARNED',255
 74+  842D 55 20 48 41
 74+  8431 56 45 20 45
 74+  8435 41 52 4E 45
 74+  8439 44 FF
 75+  843B              string_endlevel_bonus1:
 76+  843B 09 0D 53 49      defb 9,13,'SINGLE BONUS',255
 76+  843F 4E 47 4C 45
 76+  8443 20 42 4F 4E
 76+  8447 55 53 FF
 77+  844A              string_endlevel_bonus2:
 78+  844A 09 0D 44 4F      defb 9,13,'DOUBLE BONUS',255
 78+  844E 55 42 4C 45
 78+  8452 20 42 4F 4E
 78+  8456 55 53 FF
 79+  8459              string_endlevel_bonus3:
 80+  8459 09 0D 54 52      defb 9,13,'TRIPLE BONUS',255
 80+  845D 49 50 4C 45
 80+  8461 20 42 4F 4E
 80+  8465 55 53 FF
 81+  8468              string_endlevel_points1:
 82+  8468 0A 0F 35 30      defb 10,15,'5000 POINTS',255
 82+  846C 30 30 20 50
 82+  8470 4F 49 4E 54
 82+  8474 53 FF
 83+  8476              string_endlevel_points2:
 84+  8476 09 0F 31 30      defb 9,15,'10000 POINTS',255
 84+  847A 30 30 30 20
 84+  847E 50 4F 49 4E
 84+  8482 54 53 FF
 85+  8485              string_endlevel_points3:
 86+  8485 09 0F 31 35      defb 9,15,'15000 POINTS',255
 86+  8489 30 30 30 20
 86+  848D 50 4F 49 4E
 86+  8491 54 53 FF
 87+  8494              string_endlevel_anothergo:
 88+  8494 08 12 48 41      defb 8,18,'HAVE ANOTHER GO',255
 88+  8498 56 45 20 41
 88+  849C 4E 4F 54 48
 88+  84A0 45 52 20 47
 88+  84A4 4F FF
 89+  84A6              ;
 90+  84A6              ; Prints specified string
 91+  84A6              ; Inputs:
 92+  84A6              ; de: pointer to string
 93+  84A6              ; bc: length of string
 94+  84A6              ;
 95+  84A6              ; Print String Data
 96+  84A6              ; First two bytes of string contain X and Y char position, then the string
 97+  84A6              ; Individual strings are terminated with 0xFE
 98+  84A6              ; End of data is terminated with 0xFF
 99+  84A6              ; HL: Address of string
100+  84A6              ;
101+  84A6 5E           string_print:           LD E,(HL)                       ; Fetch the X coordinate
102+  84A7 23                                   INC HL                          ; Increase HL to the next memory location
103+  84A8 56                                   LD D,(HL)                       ; Fetch the Y coordinate
104+  84A9 23                                   INC HL                          ; Increase HL to the next memory location
105+  84AA CD BD 84                             CALL string_getcharaddress           ; Calculate the screen address (in DE)
106+  84AD 7E           string_print_0:         LD A,(HL)                       ; Fetch the character to print
107+  84AE 23                                   INC HL                          ; Increase HL to the next character
108+  84AF FE FE                                CP 0xFE                         ; Compare with 0xFE
109+  84B1 28 F3                                JR Z,string_print               ; If it is equal to 0xFE then loop back to print next string
110+  84B3 D0                                   RET NC                          ; If it is greater or equal to (carry bit set) then
111+  84B4 E5                                   PUSH HL                         ; Push HL on stack (Print_Char will not preserve HL)
112+  84B5 CD CD 84                             CALL Print_Char                 ; Print the character
113+  84B8 E1                                   POP HL                          ; Retrieve HL back off the stack
114+  84B9 1C                                   INC E                           ; Go to the next screen address
115+  84BA 18 F1                                JR string_print_0               ; Loop back to print next character
116+  84BC C9                                   RET
117+  84BD
118+  84BD              ; Get screen address
119+  84BD              ; D = Y character position
120+  84BD              ; E = X character position
121+  84BD              ; Returns address in DE
122+  84BD              ;
123+  84BD 7A           string_getcharaddress:       LD A,D
124+  84BE E6 07                                AND %00000111
125+  84C0 1F                                   RRA
126+  84C1 1F                                   RRA
127+  84C2 1F                                   RRA
128+  84C3 1F                                   RRA
129+  84C4 B3                                   OR E
130+  84C5 5F                                   LD E,A
131+  84C6 7A                                   LD A,D
132+  84C7 E6 18                                AND %00011000
133+  84C9 F6 40                                OR %01000000
134+  84CB 57                                   LD D,A
135+  84CC C9                                   RET                             ; Returns screen address in DE
136+  84CD
137+  84CD              ; Print a single character out
138+  84CD              ; A:  Character to print
139+  84CD              ; DE: Screen address to print character at
140+  84CD              ;
141+  84CD 21 00 3C     Print_Char:             LD HL,0x3C00                    ; Address of character set table in ROM
142+  84D0 06 00                                LD B,0                          ; Set BC to A
143+  84D2 4F                                   LD C,A
144+  84D3 E6 FF                                AND 0xFF                        ; Clear the carry bit
145+  84D5 CB 11                                RL C                            ; Multiply BC by 8 (shift left 3 times)
146+  84D7 CB 10                                RL B
147+  84D9 CB 11                                RL C
148+  84DB CB 10                                RL B
149+  84DD CB 11                                RL C
150+  84DF CB 10                                RL B
151+  84E1 09                                   ADD HL,BC                       ; Get the character address in HL
152+  84E2 0E 08                                LD C,8                          ; Loop counter
153+  84E4 D5                                   PUSH DE
154+  84E5 7E           Print_Char_1:           LD A,(HL)                       ; Get the byte from the ROM into A
155+  84E6 12                                   LD (DE),A                       ; Stick A onto the screen
156+  84E7 14                                   INC D                           ; Goto next line on screen
157+  84E8 2C                                   INC L                           ; Goto next byte of character
158+  84E9 0D                                   DEC C                           ; Decrease the loop counter
159+  84EA 20 F9                                JR NZ,Print_Char_1              ; Loop around whilst it is Not Zero (NZ)
160+  84EC D1                                   POP DE
161+  84ED C9                                   RET                             ; Return from the subroutine
# file closed: strings.asm
 23   84EE                  include "screen\buffer.asm"
# file opened: screen/buffer.asm
  1+  84EE              buffer_buffer:
  2+  84EE 00 00 00...      defs 7424                   ; area reserved for screen
  3+  A1EE
  4+  A1EE              buffer_attr_buffer:
  5+  A1EE 00 00 00...      defs 928                    ; attrs buffer area
  6+  A58E
  7+  A58E              buffer_tmp:
  8+  A58E 00 00            defb 0,0                    ; temp area
  9+  A590
 10+  A590              buffer_updatedlines:
 11+  A590 FF FF FF...      defs 21,255
 12+  A5A5
 13+  A5A5              buffer_updateall:
 14+  A5A5 00               defb 0
 15+  A5A6
 16+  A5A6              ;
 17+  A5A6              ; Stores a line number in the update list
 18+  A5A6              ; Inputs:
 19+  A5A6              ; a - row number
 20+  A5A6              buffer_marklineforupdate:
 21+  A5A6 FE 15            cp 21
 22+  A5A8 D0               ret nc                          ; dont store lines that we shouldn't draw
 23+  A5A9 5F               ld e,a                          ; store in e
 24+  A5AA 06 15            ld b,21
 25+  A5AC 21 90 A5         ld hl,buffer_updatedlines
 26+  A5AF              buffer_marklineforupdate0:
 27+  A5AF 7E               ld a,(hl)                       ; get the line stored in updated lines
 28+  A5B0 BB               cp e                            ; is this the same as the row number passed in?
 29+  A5B1 C8               ret z                           ; if so, don't need to do anything
 30+  A5B2 FE FF            cp 255                          ; is this 255, ie the end of the buffer
 31+  A5B4 C2 B9 A5         jp nz,buffer_marklineforupdate1 ; if not, move to next
 32+  A5B7 73               ld (hl),e                       ; if it is, this spot is empty, so store the row number
 33+  A5B8 C9               ret                             ; and finish
 34+  A5B9              buffer_marklineforupdate1:
 35+  A5B9 23               inc hl
 36+  A5BA 10 F3            djnz buffer_marklineforupdate0
 37+  A5BC C9               ret
 38+  A5BD
 39+  A5BD              ;
 40+  A5BD              ; Zeroes the updated lines list
 41+  A5BD              ;
 42+  A5BD              buffer_clearlist:
 43+  A5BD 06 15            ld b,21
 44+  A5BF 21 90 A5         ld hl,buffer_updatedlines
 45+  A5C2              buffer_clearlist0:
 46+  A5C2 36 FF            ld (hl),255
 47+  A5C4 23               inc hl
 48+  A5C5 10 FB            djnz buffer_clearlist0
 49+  A5C7 C9               ret
 50+  A5C8
 51+  A5C8              ;
 52+  A5C8              ; Copies the buffer to the screen. Use stack.
 53+  A5C8              ; Inputs:
 54+  A5C8              ; a - row number to display - 0 is first line
 55+  A5C8              ;
 56+  A5C8              buffer_bufferlinetoscreen:
 57+  A5C8 4F               ld c,a                          ; store a
 58+  A5C9 ED 5B F6 A6      ld de,(screen_offset)          ; load the screen offset, this is in rows, want it *256
 59+  A5CD 83               add a,e                       ; add the row number
 60+  A5CE 11 00 01         ld de,256
 61+  A5D1 CD 3A 80         call utilities_multiply
 62+  A5D4 54 5D            ld de,hl
 63+  A5D6 21 EE 84         ld hl,buffer_buffer
 64+  A5D9 19               add hl,de                   ; add the offset
 65+  A5DA 79               ld a,c                      ; get original row back
 66+  A5DB ED 73 39 A6      ld (buffer_bufferlinetoscreen1+1),sp ; this is some self-modifying code; stores the stack pointer in an ld sp,nn instruction at the end
 67+  A5DF D9               exx
 68+  A5E0 0E 00            ld c,0                      ; zero horizontal
 69+  A5E2 47               ld b,a                      ; load the row number into vertical coord
 70+  A5E3 04               inc b
 71+  A5E4 04               inc b                       ; move forward 2 to allow for scores
 72+  A5E5 CD E0 A7         call screen_getcelladdress  ; get the memory into de
 73+  A5E8 21 10 00         ld hl,16                    ; offset by 16 chars to get to the centre, since populating stack from right
 74+  A5EB 19               add hl,de
 75+  A5EC              buffer_bufferlinetoscreen0:
 76+  A5EC D9               exx                         ; hl is now buffer
 77+  A5ED 23               inc hl
 78+  A5EE 23               inc hl                      ; move hl forward 2 to skip first two blocks
 79+  A5EF F9               ld sp,hl                    ; do first fourteen for left hand side, sp pointing at buffer
 80+  A5F0 F1               pop af
 81+  A5F1 C1               pop bc
 82+  A5F2 D1               pop de
 83+  A5F3 DD E1            pop ix
 84+  A5F5 D9               exx                         ; hl is now screen
 85+  A5F6 08               ex af,af'
 86+  A5F7 F1               pop af
 87+  A5F8 C1               pop bc
 88+  A5F9 D1               pop de
 89+  A5FA F9               ld sp,hl                    ; sp pointing at screen
 90+  A5FB D5               push de
 91+  A5FC C5               push bc
 92+  A5FD F5               push af
 93+  A5FE 08               ex af,af'
 94+  A5FF D9               exx                         ; hl is now buffer
 95+  A600 DD E5            push ix
 96+  A602 D5               push de
 97+  A603 C5               push bc
 98+  A604 F5               push af
 99+  A605 1E 0E            ld e,14                    ; do another fourteen for right hand side
100+  A607 16 00            ld d,0
101+  A609 19               add hl,de
102+  A60A F9               ld sp,hl                    ; sp pointing at buffer
103+  A60B F1               pop af
104+  A60C C1               pop bc
105+  A60D D1               pop de
106+  A60E DD E1            pop ix
107+  A610                  ;pop ix
108+  A610 D9               exx                         ; hl is now screen
109+  A611 08               ex af,af'
110+  A612 1E 0E            ld e,14
111+  A614 16 00            ld d,0
112+  A616 19               add hl,de
113+  A617 F1               pop af
114+  A618 C1               pop bc
115+  A619 D1               pop de
116+  A61A                  ;pop iy
117+  A61A F9               ld sp,hl                    ; sp pointing at screen
118+  A61B                  ;push iy
119+  A61B D5               push de
120+  A61C C5               push bc
121+  A61D F5               push af
122+  A61E 08               ex af,af'
123+  A61F D9               exx                         ; hl is now buffer
124+  A620 DD E5            push ix
125+  A622 D5               push de
126+  A623 C5               push bc
127+  A624 F5               push af
128+  A625 1E 10            ld e,16
129+  A627 16 00            ld d,0
130+  A629 19               add hl,de
131+  A62A D9               exx                         ; hl is now screen
132+  A62B 1E 0E            ld e,14
133+  A62D 16 00            ld d,0
134+  A62F ED 52            sbc hl,de
135+  A631 24               inc h
136+  A632 7C               ld a,h
137+  A633 E6 07            and 0x07                    ; check if this is multiple of 8, if so, end of cell line
138+  A635 C2 EC A5         jp nz,buffer_bufferlinetoscreen0 ; next line in cell
139+  A638              buffer_bufferlinetoscreen1:
140+  A638 31 00 00         ld sp,0
141+  A63B D9               exx
142+  A63C C9               ret
143+  A63D
144+  A63D              ;
145+  A63D              ; Copies the buffer to the screen for updated lines. Use stack.
146+  A63D              ; Inputs: none
147+  A63D              ;
148+  A63D              buffer_buffertoscreen:
149+  A63D 3A A5 A5         ld a,(buffer_updateall)      ; get the all update flag
150+  A640 FE 00            cp 0
151+  A642 CA 4E A6         jp z,buffer_buffertoscreen2  ; if not set, draw only updated
152+  A645 CD 6F A6         call buffer_allbuffertoscreen ; otherwise, draw whole screen
153+  A648 21 A5 A5         ld hl,buffer_updateall
154+  A64B 36 00            ld (hl),0                    ; reset flag
155+  A64D C9               ret
156+  A64E              buffer_buffertoscreen2:
157+  A64E 06 15            ld b,21
158+  A650 FD 21 90 A5      ld iy,buffer_updatedlines    ; the location of the updated lines
159+  A654              buffer_buffertoscreen0:
160+  A654 FD 7E 00         ld a,(iy)
161+  A657 FE FF            cp 255
162+  A659 CA 6B A6         jp z,buffer_buffertoscreen1                       ; if this is 255, then we're at the end of the updated list
163+  A65C C5               push bc
164+  A65D FD E5            push iy
165+  A65F F3               di
166+  A660 CD C8 A5         call buffer_bufferlinetoscreen
167+  A663 FB               ei
168+  A664 FD E1            pop iy
169+  A666 C1               pop bc
170+  A667 FD 23            inc iy
171+  A669 10 E9            djnz buffer_buffertoscreen0
172+  A66B              buffer_buffertoscreen1:
173+  A66B CD 83 A6         call buffer_buffertoattrsfast
174+  A66E C9               ret
175+  A66F
176+  A66F              ;
177+  A66F              ; Copies the buffer to the screen. Use stack.
178+  A66F              ; Inputs: none
179+  A66F              ;
180+  A66F              buffer_allbuffertoscreen:
181+  A66F 06 15            ld b,21
182+  A671 3E 00            ld a,0
183+  A673              buffer_allbuffertoscreen0:
184+  A673 C5               push bc
185+  A674 F5               push af
186+  A675 F3               di
187+  A676 CD C8 A5         call buffer_bufferlinetoscreen
188+  A679 FB               ei
189+  A67A F1               pop af
190+  A67B C1               pop bc
191+  A67C 3C               inc a
192+  A67D 10 F4            djnz buffer_allbuffertoscreen0
193+  A67F
194+  A67F CD 83 A6         call buffer_buffertoattrsfast
195+  A682 C9               ret
196+  A683
197+  A683              ;
198+  A683              ; Copies the attrs buffer to screen with the stack
199+  A683              ;
200+  A683              buffer_buffertoattrsfast:
201+  A683 ED 73 F2 A6      ld (buffer_buffertoattrsfast1+1),sp ; this is some self-modifying code; stores the stack pointer in an ld sp,nn instruction at the end
202+  A687 3A F6 A6         ld a,(screen_offset)            ; get the screen offset in rows, so want *32
203+  A68A 11 20 00         ld de,32
204+  A68D CD 3A 80         call utilities_multiply
205+  A690 54 5D            ld de,hl
206+  A692 21 EE A1         ld hl,buffer_attr_buffer
207+  A695 19               add hl,de                       ; add the offset, start of attr buffer now in hl
208+  A696 D9               exx
209+  A697 21 50 58         ld hl,22528+80                  ; start of attr memory + 2 lines for score + 16 to start at right side
210+  A69A FD 21 8E A5      ld iy,buffer_tmp
211+  A69E FD 36 00 15      ld (iy),21              ; number of times to loop
212+  A6A2              buffer_buffertoattrsfast0:
213+  A6A2 D9               exx                         ; hl is now buffer
214+  A6A3 23               inc hl
215+  A6A4 23               inc hl                      ; move hl forward 2 to skip first two blocks
216+  A6A5 F9               ld sp,hl                    ; do first fourteen for left hand side, sp pointing at buffer
217+  A6A6 F1               pop af
218+  A6A7 C1               pop bc
219+  A6A8 D1               pop de
220+  A6A9 DD E1            pop ix
221+  A6AB D9               exx                         ; hl is now screen
222+  A6AC 08               ex af,af'
223+  A6AD F1               pop af
224+  A6AE C1               pop bc
225+  A6AF D1               pop de
226+  A6B0 F9               ld sp,hl                    ; sp pointing at screen
227+  A6B1 D5               push de
228+  A6B2 C5               push bc
229+  A6B3 F5               push af
230+  A6B4 08               ex af,af'
231+  A6B5 D9               exx                         ; hl is now buffer
232+  A6B6 DD E5            push ix
233+  A6B8 D5               push de
234+  A6B9 C5               push bc
235+  A6BA F5               push af
236+  A6BB 1E 0E            ld e,14                    ; do another fourteen for right hand side
237+  A6BD 16 00            ld d,0
238+  A6BF 19               add hl,de
239+  A6C0 F9               ld sp,hl                    ; sp pointing at buffer
240+  A6C1 F1               pop af
241+  A6C2 C1               pop bc
242+  A6C3 D1               pop de
243+  A6C4 DD E1            pop ix
244+  A6C6 D9               exx                         ; hl is now screen
245+  A6C7 08               ex af,af'
246+  A6C8 1E 0E            ld e,14
247+  A6CA 16 00            ld d,0
248+  A6CC 19               add hl,de
249+  A6CD F1               pop af
250+  A6CE C1               pop bc
251+  A6CF D1               pop de
252+  A6D0 F9               ld sp,hl                    ; sp pointing at screen
253+  A6D1 D5               push de
254+  A6D2 C5               push bc
255+  A6D3 F5               push af
256+  A6D4 08               ex af,af'
257+  A6D5 D9               exx                         ; hl is now buffer
258+  A6D6 DD E5            push ix
259+  A6D8 D5               push de
260+  A6D9 C5               push bc
261+  A6DA F5               push af
262+  A6DB 1E 10            ld e,16
263+  A6DD 16 00            ld d,0
264+  A6DF 19               add hl,de
265+  A6E0 D9               exx                         ; hl is now screen
266+  A6E1 11 12 00         ld de,18
267+  A6E4 19               add hl,de
268+  A6E5 FD 7E 00         ld a,(iy)
269+  A6E8 3D               dec a
270+  A6E9 FE 00            cp 0
271+  A6EB FD 77 00         ld (iy),a
272+  A6EE C2 A2 A6         jp nz,buffer_buffertoattrsfast0 ; do another row
273+  A6F1              buffer_buffertoattrsfast1:
274+  A6F1 31 00 00         ld sp,0
275+  A6F4 D9               exx
276+  A6F5 C9               ret
# file closed: screen/buffer.asm
 24   A6F6                  include "screen\screen.asm"
# file opened: screen/screen.asm
  1+  A6F6              screen_offset:
  2+  A6F6 00               defb 0                      ; offset from top of screen in lines
  3+  A6F7
  4+  A6F7              screen_tmp:
  5+  A6F7 00 00            defb 0,0                      ; temporary memory
  6+  A6F9
  7+  A6F9              screen_setscorecolours:
  8+  A6F9 21 B5 B1         ld hl,score_colours
  9+  A6FC 11 00 58         ld de,22528                     ; attrs here
 10+  A6FF 01 40 00         ld bc,64
 11+  A702 ED B0            ldir
 12+  A704 C9               ret
 13+  A705
 14+  A705              screen_sethighscorecolours:
 15+  A705 21 F5 B1         ld hl,high_score_colours
 16+  A708 11 E0 5A         ld de,22528+736                 ; attrs here
 17+  A70B 01 20 00         ld bc,32
 18+  A70E ED B0            ldir
 19+  A710 C9               ret
 20+  A711
 21+  A711              ; Draw the screen
 22+  A711              ; Inputs:
 23+  A711              ; none
 24+  A711              ; Notes:
 25+  A711              ; The value held at screen_offset tells the screen how many rows to scroll down. Set to five to bottom out.
 26+  A711              screen_draw:
 27+  A711                  ;call clear_screen
 28+  A711 0E 00            ld c,0                      ; horiz
 29+  A713 06 00            ld b,0                      ; vert, 0 at top
 30+  A715 DD 21 62 AC      ld ix,level01               ; point ix at level data
 31+  A719 FD 21 EE A1      ld iy,buffer_attr_buffer    ; point iy at attr data
 32+  A71D              screen_draw0:
 33+  A71D DD 7E 00         ld a,(ix)                   ; load the block number
 34+  A720 C5               push bc                     ; store bc, contains loop count
 35+  A721 CD 83 A8         call screen_getattr         ; get the memory location for this cell's attr into hl
 36+  A724 7E               ld a,(hl)                   ; get the attr value at the address
 37+  A725 FD 77 00         ld (iy),a                   ; load the attr into memory
 38+  A728 DD 7E 00         ld a,(ix)                   ; load the block number
 39+  A72B CD 78 A8         call screen_getblock        ; get the block data into hl
 40+  A72E CD 5E A8         call screen_showchar        ; show this character here
 41+  A731 C1               pop bc                      ; get the loop counter back
 42+  A732 DD 23            inc ix                      ; increment level location
 43+  A734 FD 23            inc iy                      ; increment attr location
 44+  A736 0C               inc c                       ; increment horiz
 45+  A737 79               ld a,c
 46+  A738 FE 20            cp 32                       ; check if horiz has reach edge of screen
 47+  A73A C2 1D A7         jp nz,screen_draw0          ; if not, loop
 48+  A73D 0E 00            ld c,0                      ; if so, reset horiz
 49+  A73F 04               inc b                       ; increment vertical
 50+  A740 78               ld a,b
 51+  A741 FE 1D            cp 29                       ; check if at bottom
 52+  A743 C2 1D A7         jp nz,screen_draw0          ; if not, loop
 53+  A746 21 F7 A6         ld hl, screen_tmp
 54+  A749 36 09            ld (hl),9                   ; load the block number into memory
 55+  A74B DD 21 17 B0      ld ix,level01rocks          ; rock memory
 56+  A74F CD B0 A7         call screen_initobjects     ; draw rocks
 57+  A752 21 F7 A6         ld hl, screen_tmp
 58+  A755 36 0C            ld (hl),12                  ; load the block number into memory
 59+  A757 DD 21 17 B1      ld ix,level01missiles       ; missile memory
 60+  A75B CD B0 A7         call screen_initobjects     ; draw missiles
 61+  A75E 21 F7 A6         ld hl, screen_tmp
 62+  A761 36 08            ld (hl),08                  ; load the block number into memory
 63+  A763 DD 21 90 B1      ld ix,level01diamonds       ; diamond memory
 64+  A767 CD B0 A7         call screen_initobjects     ; draw diamonds
 65+  A76A 21 F7 A6         ld hl, screen_tmp
 66+  A76D 36 0E            ld (hl),14                  ; load the block number into memory
 67+  A76F DD 21 A0 B1      ld ix,level01gems           ; gems memory
 68+  A773 CD B0 A7         call screen_initobjects     ; draw gems
 69+  A776 CD 7D A7         call screen_setuptext       ; draws text on the screen
 70+  A779 CD D7 BE         call scores_printscores     ; print the current scores
 71+  A77C C9               ret
 72+  A77D
 73+  A77D              ;
 74+  A77D              ; Sets up text on the screen
 75+  A77D              ;
 76+  A77D              screen_setuptext:
 77+  A77D CD F9 BE         call scores_showtable
 78+  A780 CD 05 A7         call screen_sethighscorecolours
 79+  A783 21 D6 80         ld hl, string_score1
 80+  A786 CD A6 84         call string_print
 81+  A789 21 DF 80         ld hl, string_scorenumbers1
 82+  A78C CD A6 84         call string_print
 83+  A78F 21 E8 80         ld hl, string_company
 84+  A792 CD A6 84         call string_print
 85+  A795 21 F9 80         ld hl, string_score2
 86+  A798 CD A6 84         call string_print
 87+  A79B 21 02 81         ld hl, string_scorenumbers2
 88+  A79E CD A6 84         call string_print
 89+  A7A1 21 EE 80         ld hl, string_credits
 90+  A7A4 CD A6 84         call string_print
 91+  A7A7 CD F9 A6         call screen_setscorecolours
 92+  A7AA C9               ret
 93+  A7AB
 94+  A7AB              ;
 95+  A7AB              ; Sets a line of colours
 96+  A7AB              ; Inputs:
 97+  A7AB              ; a - colour to set
 98+  A7AB              ; b - number to set
 99+  A7AB              ; de - start memory location
100+  A7AB              ;
101+  A7AB              screen_setcolours:
102+  A7AB 12               ld (de),a
103+  A7AC 13               inc de
104+  A7AD 10 FC            djnz screen_setcolours
105+  A7AF C9               ret
106+  A7B0
107+  A7B0              ;
108+  A7B0              ; Draw initial object positions
109+  A7B0              ; Inputs:
110+  A7B0              ; ix - memory location of objects
111+  A7B0              ; a - graphic
112+  A7B0              screen_initobjects:
113+  A7B0 DD 4E 00         ld c,(ix)                   ; get the horiz coord
114+  A7B3 79               ld a,c
115+  A7B4 FE FF            cp 255
116+  A7B6 CA DF A7         jp z,screen_initobjects2
117+  A7B9 DD 23            inc ix                      ; move to next
118+  A7BB DD 46 00         ld b,(ix)                   ; get the vert coord
119+  A7BE DD 23            inc ix
120+  A7C0 CD F1 A7         call screen_getcellattradress ; get the memory address of b,c attr into de
121+  A7C3 D5               push de
122+  A7C4 3A F7 A6         ld a,(screen_tmp)                  ; get the block number back
123+  A7C7 CD 83 A8         call screen_getattr         ; get the memory location for this cell's attr into hl
124+  A7CA D1               pop de
125+  A7CB 7E               ld a,(hl)                   ; get the attr value at the address
126+  A7CC 12               ld (de),a                   ; load the attr into memory
127+  A7CD 3A F7 A6         ld a,(screen_tmp)                  ; get the block number back
128+  A7D0 CD 78 A8         call screen_getblock        ; get the block data into hl
129+  A7D3 CD 5E A8         call screen_showchar        ; show this character here
130+  A7D6
131+  A7D6              screen_initobjects1:
132+  A7D6 DD 23            inc ix                      ; move past state
133+  A7D8 DD 23            inc ix
134+  A7DA DD 23            inc ix                      ; move past mem
135+  A7DC C3 B0 A7         jp screen_initobjects
136+  A7DF              screen_initobjects2:
137+  A7DF C9               ret
138+  A7E0
139+  A7E0
140+  A7E0              ;
141+  A7E0              ; Return character cell address offset of block at (b, c) ready for addition to screen  memory.
142+  A7E0              ; Inputs:
143+  A7E0              ; bc: coords
144+  A7E0              ; Outputs:
145+  A7E0              ; de: memory location
146+  A7E0              ;
147+  A7E0              screen_getcelladdress:
148+  A7E0 78               ld a,b      ; vertical position.
149+  A7E1 E6 18            and 24      ; which segment, 0, 1 or 2?
150+  A7E3 C6 40            add a,64    ; 64*256 = 16384, Spectrum's screen memory.
151+  A7E5 57               ld d,a      ; this is our high byte.
152+  A7E6 78               ld a,b      ; what was that vertical position again?
153+  A7E7 E6 07            and 7       ; which row within segment?
154+  A7E9 0F               rrca        ; multiply row by 32.
155+  A7EA 0F               rrca
156+  A7EB 0F               rrca
157+  A7EC 5F               ld e,a      ; low byte.
158+  A7ED 79               ld a,c      ; add on y coordinate.
159+  A7EE 83               add a,e     ; mix with low byte.
160+  A7EF 5F               ld e,a      ; address of screen position in de.
161+  A7F0 C9               ret
162+  A7F1
163+  A7F1              ;
164+  A7F1              ; Calculate buffer address of attribute for character at (b, c).
165+  A7F1              ; Inputs:
166+  A7F1              ; bc: coords
167+  A7F1              ; Outputs:
168+  A7F1              ; de: memory location
169+  A7F1              ;
170+  A7F1              screen_getcellattradress:
171+  A7F1 11 EE A1         ld de,buffer_attr_buffer ; memory is at base + horiz (c) + vert*32 (b)
172+  A7F4 69               ld l,c      ; x position.
173+  A7F5 26 00            ld h,0      ; 0 h
174+  A7F7 19               add hl,de
175+  A7F8 54 5D            ld de,hl    ; horiz done
176+  A7FA 78               ld a,b      ; do vert
177+  A7FB D5               push de
178+  A7FC C5               push bc
179+  A7FD 11 20 00         ld de,32
180+  A800 CD 3A 80         call utilities_multiply
181+  A803 C1               pop bc
182+  A804 D1               pop de
183+  A805 19               add hl,de
184+  A806 54 5D            ld de,hl    ; vert done
185+  A808 C9               ret
186+  A809
187+  A809              ;
188+  A809              ; Calculate buffer address of attribute for character at (b, c).
189+  A809              ; Inputs:
190+  A809              ; bc: coords
191+  A809              ; Outputs:
192+  A809              ; de: memory location
193+  A809              ;
194+  A809              screen_getscreenattradress:
195+  A809 11 00 58         ld de,22528 ; memory is at base + horiz (c) + vert*32 (b)
196+  A80C 69               ld l,c      ; x position.
197+  A80D 26 00            ld h,0      ; 0 h
198+  A80F 19               add hl,de
199+  A810 54 5D            ld de,hl    ; horiz done
200+  A812 78               ld a,b      ; do vert
201+  A813 D5               push de
202+  A814 C5               push bc
203+  A815 11 20 00         ld de,32
204+  A818 CD 3A 80         call utilities_multiply
205+  A81B C1               pop bc
206+  A81C D1               pop de
207+  A81D 19               add hl,de
208+  A81E 54 5D            ld de,hl    ; vert done
209+  A820 C9               ret
210+  A821
211+  A821              ;
212+  A821              ; Gets the attr memory location for a screen coord
213+  A821              ; Will overwrite bc
214+  A821              ; Inputs:
215+  A821              ; bc - screen coords
216+  A821              ; Outputs:
217+  A821              ; de - memory location
218+  A821              ; bc - character coords
219+  A821              ;
220+  A821              screen_getattraddressfromscreencoords:
221+  A821 78               ld a,b                          ; get the player block coords of current block
222+  A822 E6 F8            and 248                         ; find closest multiple of eight
223+  A824 0F               rrca
224+  A825 0F               rrca
225+  A826 0F               rrca                ; divide by 8
226+  A827 47               ld b,a
227+  A828 79               ld a,c
228+  A829 48               ld c,b                         ; swap b and c
229+  A82A E6 F8            and 248
230+  A82C 0F               rrca
231+  A82D 0F               rrca
232+  A82E 0F               rrca                ; divide by 8
233+  A82F 47               ld b,a
234+  A830 CD F1 A7         call screen_getcellattradress   ; work out memory location of current block attributes, memory in de
235+  A833 C9               ret
236+  A834
237+  A834
238+  A834              ; Gets the nearest cell coords for a screen coord
239+  A834              ; Will overwrite bc
240+  A834              ; Inputs:
241+  A834              ; bc - screen coords
242+  A834              ; Outputs:
243+  A834              ; bc - character coords
244+  A834              ;
245+  A834              screen_getcharcoordsfromscreencoords:
246+  A834 78               ld a,b                          ; get the player block coords of current block
247+  A835 E6 F8            and 248                         ; find closest multiple of eight
248+  A837 0F               rrca
249+  A838 0F               rrca
250+  A839 0F               rrca                ; divide by 8
251+  A83A 47               ld b,a
252+  A83B 79               ld a,c
253+  A83C 48               ld c,b                         ; swap b and c
254+  A83D E6 F8            and 248
255+  A83F 0F               rrca
256+  A840 0F               rrca
257+  A841 0F               rrca                ; divide by 8
258+  A842 47               ld b,a
259+  A843 C9               ret
260+  A844
261+  A844              ; Gets the screen coords for a cell coord
262+  A844              ; Will overwrite bc
263+  A844              ; Inputs:
264+  A844              ; bc - char coords
265+  A844              ; Outputs:
266+  A844              ; bc - screen coords
267+  A844              ;
268+  A844              screen_getscreencoordsfromcharcoords:
269+  A844 78               ld a,b                          ; get the player block coords of current block
270+  A845 07               rlca
271+  A846 07               rlca
272+  A847 07               rlca                ; multiply by 8
273+  A848 47               ld b,a
274+  A849 79               ld a,c
275+  A84A 48               ld c,b                         ; swap b and c
276+  A84B 07               rlca
277+  A84C 07               rlca
278+  A84D 07               rlca                ; divide by 8
279+  A84E 47               ld b,a
280+  A84F C9               ret
281+  A850
282+  A850              ;
283+  A850              ; Get buffer address for a character at b,c - b vert
284+  A850              ; Buffer memory is stored as sequential block
285+  A850              ; Char at 0,0 is stored 0,32,64...; 0,1 is stored at 1,33,65
286+  A850              ; Inputs:
287+  A850              ; bc - coords
288+  A850              ; Outputs:
289+  A850              ; de - memory location of first byte
290+  A850              screen_getbufferaddress:
291+  A850 21 EE 84         ld hl, buffer_buffer    ; first get screen buffer start
292+  A853 50               ld d,b                  ; then work out vertical offset
293+  A854 1E 00            ld e,0                  ; mult by 256, low byte becomes high byte, de now holds result
294+  A856 19               add hl,de               ; add to base
295+  A857 59               ld e,c                  ; then add horizontal offset (c)
296+  A858 16 00            ld d,0
297+  A85A 19               add hl,de               ; add to base
298+  A85B 54 5D            ld de,hl
299+  A85D C9               ret
300+  A85E
301+  A85E              ;
302+  A85E              ; Display character hl at (b, c) to buffer.
303+  A85E              ; Stored sequentially
304+  A85E              ; Inputs:
305+  A85E              ; hl: block address
306+  A85E              ; bc: coords
307+  A85E              ;
308+  A85E              screen_showchar:
309+  A85E 3E 00            ld a,0
310+  A860 E5               push hl
311+  A861 CD 50 A8         call screen_getbufferaddress ; get the current screen buffer pointer
312+  A864 E1               pop hl
313+  A865 06 08            ld b,8              ; number of pixels high.
314+  A867              screen_showchar0:
315+  A867 7E               ld a,(hl)           ; source graphic.
316+  A868 12               ld (de),a           ; transfer to screen.
317+  A869 23               inc hl              ; next piece of data.
318+  A86A E5               push hl             ; store hl
319+  A86B 62 6B            ld hl,de            ; put de in hl
320+  A86D 1E 20            ld e,32            ; inc memory by 32, so load 32 into de
321+  A86F 16 00            ld d,0
322+  A871 19               add hl,de              ; add de to hl
323+  A872 54 5D            ld de,hl            ; load back to de
324+  A874 E1               pop hl              ; restore hl
325+  A875
326+  A875 10 F0            djnz screen_showchar0 ; repeat
327+  A877 C9               ret
328+  A878
329+  A878
330+  A878              ;
331+  A878              ; Get cell graphic.
332+  A878              ; Inputs:
333+  A878              ; a: block
334+  A878              ; Outputs:
335+  A878              ; hl: memory
336+  A878              ;
337+  A878              screen_getblock:
338+  A878 07               rlca                        ; multiply block number by eight.
339+  A879 07               rlca
340+  A87A 07               rlca
341+  A87B 5F               ld e,a                      ; displacement to graphic address.
342+  A87C 16 00            ld d,0                      ; no high byte.
343+  A87E 21 15 B2         ld hl,sprites               ; address of character blocks.
344+  A881 19               add hl,de                   ; point to block.
345+  A882 C9               ret
346+  A883
347+  A883              ;
348+  A883              ; Get cell attribute.
349+  A883              ; Inputs:
350+  A883              ; a: block
351+  A883              ; Outputs:
352+  A883              ; hl: memory
353+  A883              ;
354+  A883              screen_getattr:
355+  A883 5F               ld e,a                      ; displacement to attribute address.
356+  A884 16 00            ld d,0                      ; no high byte.
357+  A886 21 B5 B2         ld hl,sprite_attrs          ; address of block attributes.
358+  A889 19               add hl,de                   ; point to attribute.
359+  A88A C9               ret
360+  A88B
361+  A88B              ;
362+  A88B              ; Checks whether a character block has anything in it
363+  A88B              ; Inputs:
364+  A88B              ; bc - char coords
365+  A88B              ; Outputs:
366+  A88B              ; a - 1, empty
367+  A88B              screen_ischarempty:
368+  A88B CD 50 A8         call screen_getbufferaddress ; get the current screen buffer pointer
369+  A88E 06 08            ld b,8                      ; check 8 rows
370+  A890              screen_ischarempty2:
371+  A890 1A               ld a,(de)                   ; check line
372+  A891 FE 00            cp 0
373+  A893 C2 A1 A8         jp nz,screen_ischarempty1   ; if not zero, jump out with false
374+  A896 21 20 00         ld hl,32
375+  A899 19               add hl,de
376+  A89A 54 5D            ld de,hl                    ; move to next row
377+  A89C 10 F2            djnz screen_ischarempty2
378+  A89E              screen_ischarempty0:
379+  A89E 3E 01            ld a,1
380+  A8A0 C9               ret
381+  A8A1              screen_ischarempty1:
382+  A8A1 3E 00            ld a,0
383+  A8A3 C9               ret
384+  A8A4
385+  A8A4              ;
386+  A8A4              ; Copies a block from one place to another directly underneath, leaves the original empty
387+  A8A4              ; Inputs:
388+  A8A4              ; bc - coords of block to copy from
389+  A8A4              screen_copyblockdown
390+  A8A4 CD 50 A8         call screen_getbufferaddress ; get the current screen buffer pointer for source
391+  A8A7 06 08            ld b,8                      ; copy 8 rows
392+  A8A9              screen_copyblock0:
393+  A8A9 1A               ld a,(de)                    ; get what we're copying
394+  A8AA 08               ex af,af'
395+  A8AB 3E 00            ld a,0
396+  A8AD 12               ld (de),a                    ; replace with empty
397+  A8AE 08               ex af,af'
398+  A8AF 14               inc d                        ; add 256 to get to the next row
399+  A8B0 12               ld (de),a                    ; copy to the next row
400+  A8B1 15               dec d
401+  A8B2 21 20 00         ld hl,32
402+  A8B5 19               add hl,de                       ; return back to source, next row down
403+  A8B6 54 5D            ld de,hl
404+  A8B8 10 EF            djnz screen_copyblock0
405+  A8BA C9               ret
406+  A8BB
407+  A8BB              ;
408+  A8BB              ; Returns the first byte of a character. Useful for figuring out what's there
409+  A8BB              ; Inputs:
410+  A8BB              ; bc - coords
411+  A8BB              ; Outputs:
412+  A8BB              ; a - first byte
413+  A8BB              ;
414+  A8BB              screen_getcharfirstbyte:
415+  A8BB CD 50 A8         call screen_getbufferaddress ; get the current screen buffer pointer for source
416+  A8BE 1A               ld a,(de)
417+  A8BF C9               ret
418+  A8C0
# file closed: screen/screen.asm
 25   A8C0                  include "screen\sprites.asm"
# file opened: screen/sprites.asm
  1+  A8C0              ;
  2+  A8C0              ; This is the sprite routine and expects coordinates in (c ,b) form,
  3+  A8C0              ; where c is the vertical coord from the top of the screen (0-176), and
  4+  A8C0              ; b is the horizontal coord from the left of the screen (0 to 240).
  5+  A8C0              ; Sprite data is stored as you'd expect in its unshifted form as this
  6+  A8C0              ; routine takes care of all the shifting itself. This means that sprite
  7+  A8C0              ; handling isn't particularly fast but the graphics only take 1/8th of the
  8+  A8C0              ; space they would require in pre-shifted form.
  9+  A8C0              ; Inputs:
 10+  A8C0              ; hl - sprite data
 11+  A8C0              ; bc - screen coords
 12+  A8C0              ;
 13+  A8C0              sprites_drawsprite7:
 14+  A8C0 EE 07            xor 7               ; complement last 3 bits.
 15+  A8C2 3C               inc a               ; add one for luck!
 16+  A8C3              sprites_drawsprite3:
 17+  A8C3 CB 11            rl c                ; ...into middle byte...
 18+  A8C5 CB 12            rl d                ; ...and finally into left character cell.
 19+  A8C7 3D               dec a               ; count shifts we've done.
 20+  A8C8 20 F9            jr nz,sprites_drawsprite3 ; return until all shifts complete.
 21+  A8CA                                      ; Line of sprite image is now in e + c + d, we need it in form c + d + e.
 22+  A8CA 79               ld a,c              ; left edge of image is currently in e.
 23+  A8CB 4A               ld c,d              ; put right edge there instead.
 24+  A8CC 57               ld d,a              ; and the left edge back into c.
 25+  A8CD 18 25            jr sprites_drawsprite0   ; we've done the switch so transfer to screen.
 26+  A8CF              sprites_drawsprite:
 27+  A8CF ED 43 34 A9      ld (dispx),bc       ; store coords in dispx for now.
 28+  A8D3 E5               push hl
 29+  A8D4 CD 12 A9         call sprites_scadd  ; calculate screen address.
 30+  A8D7 E1               pop hl
 31+  A8D8 3E 08            ld a,8              ; height of sprite in pixels.
 32+  A8DA              sprites_drawsprite1:
 33+  A8DA 08               ex af,af'           ; store loop counter.
 34+  A8DB D5               push de             ; store screen address.
 35+  A8DC 4E               ld c,(hl)           ; first sprite graphic.
 36+  A8DD 23               inc hl              ; increment poiinter to sprite data.
 37+  A8DE 22 36 A9         ld (sprtmp),hl      ; store it for later.
 38+  A8E1 16 00            ld d,0              ; blank right byte for now.
 39+  A8E3 78               ld a,b              ; b holds y position.
 40+  A8E4 E6 07            and 7               ; how are we straddling character cells?
 41+  A8E6 28 0C            jr z,sprites_drawsprite0 ; we're not straddling them, don't bother shifting.
 42+  A8E8 FE 05            cp 5                ; 5 or more right shifts needed?
 43+  A8EA 30 D4            jr nc,sprites_drawsprite7 ; yes, shift from left as it's quicker.
 44+  A8EC A7               and a               ; oops, carry flag is set so clear it.
 45+  A8ED              sprites_drawsprite2:
 46+  A8ED CB 19            rr c                ; rotate left byte right...
 47+  A8EF CB 1A            rr d                ; ...into right byte.
 48+  A8F1 3D               dec a               ; one less shift to do.
 49+  A8F2 20 F9            jr nz,sprites_drawsprite2 ; return until all shifts complete.
 50+  A8F4              sprites_drawsprite0:
 51+  A8F4 E1               pop hl              ; pop screen address from stack.
 52+  A8F5 7E               ld a,(hl)           ; what's there already.
 53+  A8F6 A9               xor c               ; merge in image data.
 54+  A8F7 77               ld (hl),a           ; place onto screen.
 55+  A8F8 23               inc hl
 56+  A8F9 7E               ld a,(hl)           ; what's already there.
 57+  A8FA AA               xor d               ; right edge of sprite image data.
 58+  A8FB 77               ld (hl),a           ; plonk it on screen.
 59+  A8FC 3A 34 A9         ld a,(dispx)        ; vertical coordinate.
 60+  A8FF 3C               inc a               ; next line down.
 61+  A900 32 34 A9         ld (dispx),a        ; store new position.
 62+  A903 2B               dec hl
 63+  A904 11 20 00         ld de,32            ; add 32 to get to the next row
 64+  A907 19               add hl,de           ; add 32
 65+  A908              sprites_drawsprite6:
 66+  A908 EB               ex de,hl            ; screen address in de.
 67+  A909 2A 36 A9         ld hl,(sprtmp)      ; restore graphic address.
 68+  A90C 08               ex af,af'           ; restore loop counter.
 69+  A90D 3D               dec a               ; decrement it.
 70+  A90E C2 DA A8         jp nz,sprites_drawsprite1 ; not reached bottom of sprite yet to repeat.
 71+  A911 C9               ret                 ; job done.
 72+  A912
 73+  A912              ;
 74+  A912              ; This routine returns a buffer address for (c, b) in de (c vert).
 75+  A912              ; For example: 0,0 will be at memory offset 0
 76+  A912              ; 1,0 (1 down) will be at memory offset 1
 77+  A912              ; 0,7 will be at memory offset 0
 78+  A912              ; 9,1 will be at memory offset 8+1
 79+  A912              ; 8,0 will be at memory offset 256
 80+  A912              ; 9,0 will be at memory offset 257
 81+  A912              ; Outputs:
 82+  A912              ; de - coords
 83+  A912              ;
 84+  A912              sprites_scadd:
 85+  A912 79               ld a,c               ; calculate vertical offset
 86+  A913 E6 F8            and 248             ;  to get nearest multiple of 8
 87+  A915 0F               rrca
 88+  A916 0F               rrca
 89+  A917 0F               rrca                ; divide by 8
 90+  A918 67               ld h,a
 91+  A919 78               ld a,b               ; calculate horizontal offset
 92+  A91A E6 F8            and 248             ;  to get nearest multiple of 8
 93+  A91C 0F               rrca
 94+  A91D 0F               rrca
 95+  A91E 0F               rrca                ; divide by 8
 96+  A91F 6F               ld l,a
 97+  A920 C5               push bc             ; store the screen coords
 98+  A921 44 4D            ld bc,hl            ; load bc with the character coords
 99+  A923 CD 50 A8         call screen_getbufferaddress
100+  A926 C1               pop bc              ; get back screen coords, de is now memory of character
101+  A927 79               ld a,c              ; now add the vertical within the cell
102+  A928 E6 07            and 7
103+  A92A 0F               rrca                ; multiply by 32.
104+  A92B 0F               rrca
105+  A92C 0F               rrca
106+  A92D 6F               ld l,a
107+  A92E 26 00            ld h,0
108+  A930 19               add hl,de
109+  A931 54 5D            ld de,hl
110+  A933 C9               ret
111+  A934
112+  A934 00           dispx   defb 0           ; general-use coordinates.
113+  A935 00           dispy   defb 0
114+  A936 00 00        sprtmp  defb 0,0           ; sprite temporary address.
115+  A938
# file closed: screen/sprites.asm
 26   A938                  include "screen\titlescreen.asm"
# file opened: screen/titlescreen.asm
  1+  A938              ;
  2+  A938              ; Draws the title screen
  3+  A938              ;
  4+  A938              titlescreen_show:
  5+  A938 CD B0 A9         call titlescreen_init
  6+  A93B CD 59 A9         call titlescreen_drawtitle
  7+  A93E 3E FA            ld a,250                              ; wait for 200 frames
  8+  A940 CD 52 80         call utilities_waitforkey_forframes   ; wait for keypress
  9+  A943 7B               ld a,e
 10+  A944 FE 01            cp 1                                  ; was anything pressed?
 11+  A946 C8               ret z                                 ; end titlescreen if so
 12+  A947
 13+  A947 CD C3 A9         call titlescreen_alt_init             ; otherwise, draw alt screen
 14+  A94A CD 75 A9         call titlescreen_alt_drawtitle
 15+  A94D 3E FA            ld a,250                              ; wait for 200 frames
 16+  A94F CD 52 80         call utilities_waitforkey_forframes   ; wait for keypress
 17+  A952 7B               ld a,e
 18+  A953 FE 01            cp 1                                  ; was anything pressed?
 19+  A955 C2 38 A9         jp nz,titlescreen_show                ; start again if not
 20+  A958 C9               ret
 21+  A959
 22+  A959              ;
 23+  A959              ; Draws the iconic logo
 24+  A959              ;
 25+  A959              titlescreen_drawtitle:
 26+  A959 06 66            ld b,102              ; number of points
 27+  A95B DD 21 D0 A9      ld ix,titlescreen_logo_data
 28+  A95F              titlescreen_drawtitle0:
 29+  A95F C5               push bc
 30+  A960 DD 4E 00         ld c,(ix)                   ; got horiz
 31+  A963 DD 23            inc ix
 32+  A965 DD 46 00         ld b,(ix)                   ; got vert
 33+  A968 DD 23            inc ix
 34+  A96A CD 09 A8         call screen_getscreenattradress ; memory in de
 35+  A96D 13               inc de                      ; slide one to the right, since I'm too lazy to change the data
 36+  A96E 3E 13            ld a,19
 37+  A970 12               ld (de),a
 38+  A971 C1               pop bc
 39+  A972 10 EB            djnz titlescreen_drawtitle0 ; loop if we're not at the end
 40+  A974 C9               ret
 41+  A975
 42+  A975              ;
 43+  A975              ; Draws the alternate title screen
 44+  A975              ;
 45+  A975              titlescreen_alt_drawtitle:
 46+  A975 21 25 81         ld hl,string_alttitlescreen_1
 47+  A978 CD A6 84         call string_print
 48+  A97B 21 31 81         ld hl,string_alttitlescreen_2
 49+  A97E CD A6 84         call string_print
 50+  A981 21 2C 82         ld hl,string_alttitlescreen_3
 51+  A984 CD A6 84         call string_print
 52+  A987 06 20            ld b,32
 53+  A989 3E 43            ld a,67
 54+  A98B 11 00 58         ld de,22528                         ; top row attrs here
 55+  A98E CD AB A7         call screen_setcolours
 56+  A991 06 20            ld b,32
 57+  A993 3E 46            ld a,70
 58+  A995 11 A0 59         ld de,22528+416                     ; 13th row attrs here
 59+  A998 CD AB A7         call screen_setcolours
 60+  A99B 06 20            ld b,32
 61+  A99D 3E 43            ld a,67
 62+  A99F 11 20 5A         ld de,22528+544                         ; 17th row attrs here
 63+  A9A2 CD AB A7         call screen_setcolours
 64+  A9A5 06 20            ld b,32
 65+  A9A7 3E 42            ld a,66
 66+  A9A9 11 A0 5A         ld de,22528+672                         ; 21st row attrs here
 67+  A9AC CD AB A7         call screen_setcolours
 68+  A9AF C9               ret
 69+  A9B0
 70+  A9B0              ;
 71+  A9B0              ; Initialises the screen
 72+  A9B0              ;
 73+  A9B0              titlescreen_init:
 74+  A9B0              ; We want a black screen.
 75+  A9B0 3E 0B            ld a,11             ; magenta ink (7) on blue paper (0),
 76+  A9B2                                      ; bright (64).
 77+  A9B2 CD 67 80         call utilities_clearscreen
 78+  A9B5 32 8D 5C         ld (23693),a        ; set our screen colours.
 79+  A9B8 3E 01            ld a,1              ; 2 is the code for red.
 80+  A9BA D3 FE            out (254),a         ; write to port 254.
 81+  A9BC
 82+  A9BC 21 0B 81         ld hl,string_titlescreen_copyright
 83+  A9BF CD A6 84         call string_print
 84+  A9C2
 85+  A9C2 C9               ret
 86+  A9C3
 87+  A9C3              ;
 88+  A9C3              ; Initialises the screen
 89+  A9C3              ;
 90+  A9C3              titlescreen_alt_init:
 91+  A9C3              ; We want a black screen.
 92+  A9C3 3E 47            ld a,71             ; white ink (7) on black paper (0),
 93+  A9C5                                      ; bright (64).
 94+  A9C5 CD 67 80         call utilities_clearscreen
 95+  A9C8 32 8D 5C         ld (23693),a        ; set our screen colours.
 96+  A9CB 3E 00            ld a,0              ; 2 is the code for red.
 97+  A9CD D3 FE            out (254),a         ; write to port 254.
 98+  A9CF
 99+  A9CF C9               ret
100+  A9D0
101+  A9D0              ;
102+  A9D0              ; Horiz, vert
103+  A9D0              ;
104+  A9D0              titlescreen_logo_data:
105+  A9D0 08 00 09 00      defb 8,0,9,0,10,0,12,0,15,0,17,0,18,0,19,0
105+  A9D4 0A 00 0C 00
105+  A9D8 0F 00 11 00
105+  A9DC 12 00 13 00
106+  A9E0 09 01 0C 01      defb 9,1,12,1,15,1,17,1
106+  A9E4 0F 01 11 01
107+  A9E8 09 02 0C 02      defb 9,2,12,2,13,2,14,2,15,2,17,2,18,2,19,2
107+  A9EC 0D 02 0E 02
107+  A9F0 0F 02 11 02
107+  A9F4 12 02 13 02
108+  A9F8 09 03 0C 03      defb 9,3,12,3,15,3,17,3
108+  A9FC 0F 03 11 03
109+  AA00 09 04 0C 04      defb 9,4,12,4,15,4,17,4,18,4,19,4
109+  AA04 0F 04 11 04
109+  AA08 12 04 13 04
110+  AA0C 00 06 01 06      defb 0,6,1,6,2,6,3,6,4,6,5,6,6,6,7,6,8,6,9,6,10,6,11,6
110+  AA10 02 06 03 06
110+  AA14 04 06 05 06
110+  AA18 06 06 07 06
110+  AA1C 08 06 09 06
110+  AA20 0A 06 0B 06
111+  AA24 10 06 11 06      defb 16,6,17,6,18,6,19,6,20,6,21,6,22,6,23,6,24,6,25,6,26,6,27,6
111+  AA28 12 06 13 06
111+  AA2C 14 06 15 06
111+  AA30 16 06 17 06
111+  AA34 18 06 19 06
111+  AA38 1A 06 1B 06
112+  AA3C 02 07 02 08      defb 2,7,2,8,2,9,2,10,2,11,2,12,2,13,2,14,2,15,2,16,2,17,2,18,2,19,2,20
112+  AA40 02 09 02 0A
112+  AA44 02 0B 02 0C
112+  AA48 02 0D 02 0E
112+  AA4C 02 0F 02 10
112+  AA50 02 11 02 12
112+  AA54 02 13 02 14
113+  AA58 19 07 19 08      defb 25,7,25,8,25,9,25,10,25,11,25,12,25,13,25,14,25,15,25,16,25,17,25,18,25,19,25,20
113+  AA5C 19 09 19 0A
113+  AA60 19 0B 19 0C
113+  AA64 19 0D 19 0E
113+  AA68 19 0F 19 10
113+  AA6C 19 11 19 12
113+  AA70 19 13 19 14
114+  AA74 03 0B 04 0B      defb 3,11,4,11,5,11,6,11,7,11,8,11,9,11,10,11,11,11
114+  AA78 05 0B 06 0B
114+  AA7C 07 0B 08 0B
114+  AA80 09 0B 0A 0B
114+  AA84 0B 0B
115+  AA86 0B 07 0B 08      defb 11,7,11,8,11,9,11,10
115+  AA8A 0B 09 0B 0A
116+  AA8E 10 0D 10 0F      defb 16,13,16,15,16,16,16,17,16,18,16,19,16,20
116+  AA92 10 10 10 11
116+  AA96 10 12 10 13
116+  AA9A 10 14
117+  AA9C
# file closed: screen/titlescreen.asm
 27   AA9C                  include "screen\lifescreen.asm"
# file opened: screen/lifescreen.asm
  1+  AA9C              ;
  2+  AA9C              ; Draws the life remaining screen
  3+  AA9C              ;
  4+  AA9C              lifescreen_draw:
  5+  AA9C CD E2 AA         call lifescreen_init
  6+  AA9F
  7+  AA9F 3A 25 B8         ld a,(game_currentplayer)             ; get the current player
  8+  AAA2 C6 30            add 48                                ; add 48 to get char
  9+  AAA4 21 32 83         ld hl,string_lifescreen_player+10
 10+  AAA7 77               ld (hl),a                             ; load this to the string we're about to show
 11+  AAA8
 12+  AAA8 21 28 83         ld hl,string_lifescreen_player
 13+  AAAB CD A6 84         call string_print
 14+  AAAE
 15+  AAAE 3A 5C B8         ld a,(player+9)                       ; get the current player lives
 16+  AAB1 C6 30            add 48                                ; add 48 to get the character
 17+  AAB3 FE 31            cp 49
 18+  AAB5 C2 C8 AA         jp nz,lifescreen_draw0
 19+  AAB8 21 42 83         ld hl,string_lifescreen_lastman
 20+  AABB
 21+  AABB 06 08            ld b,8
 22+  AABD 3E 0A            ld a,10                                ; set red
 23+  AABF 11 6C 58         ld de,22528+108                        ; attrs here
 24+  AAC2 CD AB A7         call screen_setcolours
 25+  AAC5
 26+  AAC5 C3 CF AA         jp lifescreen_draw1
 27+  AAC8              lifescreen_draw0:
 28+  AAC8 21 37 83         ld hl,string_lifescreen_lives+2       ; not last man, so use the normal view
 29+  AACB 77               ld (hl),a                             ; load this to the string we're about to show
 30+  AACC 21 35 83         ld hl,string_lifescreen_lives
 31+  AACF              lifescreen_draw1:
 32+  AACF CD A6 84         call string_print
 33+  AAD2
 34+  AAD2 3E 86            ld a,134
 35+  AAD4 11 0B 58         ld de, 22528+11     ; get the colour for the top text
 36+  AAD7 06 0A            ld b,10
 37+  AAD9 CD AB A7         call screen_setcolours
 38+  AADC
 39+  AADC 3E 64            ld a,100                              ; wait for 200 frames
 40+  AADE CD 52 80         call utilities_waitforkey_forframes   ; wait for keypress
 41+  AAE1
 42+  AAE1 C9               ret
 43+  AAE2
 44+  AAE2              ;
 45+  AAE2              ; Initialises the screen
 46+  AAE2              ;
 47+  AAE2              lifescreen_init:
 48+  AAE2              ; We want a blue screen.
 49+  AAE2                  ;call $0D6B
 50+  AAE2 3E 0E            ld a,14             ; yellow ink (6) on blue paper (1),
 51+  AAE4                                      ; bright (64).
 52+  AAE4 CD 67 80         call utilities_clearscreen
 53+  AAE7 32 8D 5C         ld (23693),a        ; set our screen colours.
 54+  AAEA 3E 01            ld a,1              ; 1 is the code for blue.
 55+  AAEC D3 FE            out (254),a         ; write to port 254.
 56+  AAEE                  ;call 3503           ; ROM routine - clears screen, opens chan 2.
 57+  AAEE
 58+  AAEE C9               ret
# file closed: screen/lifescreen.asm
 28   AAEF                  include "screen\gameover.asm"
# file opened: screen/gameover.asm
  1+  AAEF              ;
  2+  AAEF              ; Draws the game over screen
  3+  AAEF              ;
  4+  AAEF              gameover_draw:
  5+  AAEF CD 0D BF         call scores_processhighscores
  6+  AAF2
  7+  AAF2              gameover_draw0:
  8+  AAF2 CD 32 AB         call gameover_enterhighscores
  9+  AAF5
 10+  AAF5 CD D0 AB         call gameover_init
 11+  AAF8
 12+  AAF8 21 4D 83         ld hl,string_gameoverscreen_gameover
 13+  AAFB CD A6 84         call string_print
 14+  AAFE
 15+  AAFE 21 59 83         ld hl,string_gameoverscreen_copyright
 16+  AB01 CD A6 84         call string_print
 17+  AB04
 18+  AB04 CD 15 AB         call gameover_commontext
 19+  AB07
 20+  AB07 06 0B            ld b,11
 21+  AB09 3E 42            ld a,66
 22+  AB0B 11 2B 58         ld de,22528+43                         ; attrs here
 23+  AB0E CD AB A7         call screen_setcolours
 24+  AB11 CD 47 80         call utilities_waitforkey   ; wait for keypress
 25+  AB14
 26+  AB14 C9               ret
 27+  AB15
 28+  AB15              ;
 29+  AB15              ; Draws text shared by the game over and high score screens
 30+  AB15              ;
 31+  AB15              gameover_commontext:
 32+  AB15 CD 7D A7         call screen_setuptext       ; show scores
 33+  AB18 CD D7 BE         call scores_printscores     ; print the current scores
 34+  AB1B
 35+  AB1B 21 87 83         ld hl,string_gameover_credits
 36+  AB1E CD A6 84         call string_print
 37+  AB21
 38+  AB21 21 73 83         ld hl,string_gameoverscreen_bestscores
 39+  AB24 CD A6 84         call string_print
 40+  AB27
 41+  AB27 06 20            ld b,32
 42+  AB29 3E 45            ld a,69
 43+  AB2B 11 C0 5A         ld de,22528+704                         ; attrs here
 44+  AB2E CD AB A7         call screen_setcolours
 45+  AB31
 46+  AB31 C9               ret
 47+  AB32
 48+  AB32              ;
 49+  AB32              ; If required, enter highscore
 50+  AB32              ;
 51+  AB32              gameover_enterhighscores:
 52+  AB32                  ; check if we need to enter initial
 53+  AB32 3A 0C BF         ld a,(scores_highscoretmp)
 54+  AB35 FE 00            cp 0
 55+  AB37 C8               ret z
 56+  AB38 CD 66 AB         call gameover_enterhighscores_init
 57+  AB3B 3A 0C BF         ld a,(scores_highscoretmp)
 58+  AB3E 3D               dec a
 59+  AB3F 3D               dec a
 60+  AB40 3D               dec a                                   ; get high score location back to position of name
 61+  AB41 16 00            ld d,0
 62+  AB43 5F               ld e,a
 63+  AB44 21 93 BE         ld hl,scores_table
 64+  AB47 19               add hl,de                               ; load memory into hl
 65+  AB48 08               ex af,af'
 66+  AB49 06 0F            ld b,15
 67+  AB4B CD 82 80         call utilities_pauseforframes           ; pause for a little bit
 68+  AB4E 06 03            ld b,3                                  ; collect three chars
 69+  AB50              gameover_draw2:
 70+  AB50 C5               push bc
 71+  AB51 E5               push hl
 72+  AB52 CD 86 80         call utilities_readkey               ; get key into a
 73+  AB55 E1               pop hl
 74+  AB56 77               ld (hl),a
 75+  AB57 23               inc hl
 76+  AB58 E5               push hl
 77+  AB59 CD F9 BE         call scores_showtable
 78+  AB5C E1               pop hl
 79+  AB5D 06 0F            ld b,15
 80+  AB5F CD 82 80         call utilities_pauseforframes
 81+  AB62 C1               pop bc
 82+  AB63 10 EB            djnz gameover_draw2
 83+  AB65 C9               ret
 84+  AB66
 85+  AB66              ;
 86+  AB66              ; Displays the screen text for high score entry
 87+  AB66              ;
 88+  AB66              gameover_enterhighscores_init:
 89+  AB66
 90+  AB66 CD D0 AB         call gameover_init
 91+  AB69 CD 15 AB         call gameover_commontext
 92+  AB6C
 93+  AB6C 21 93 83         ld hl,string_highscore_congratulations
 94+  AB6F CD A6 84         call string_print
 95+  AB72
 96+  AB72 3A 25 B8         ld a,(game_currentplayer)
 97+  AB75 FE 01            cp 1
 98+  AB77 21 A5 83         ld hl,string_highscore_player1
 99+  AB7A C3 80 AB         jp gameover_enterhighscores_init1
100+  AB7D              gameover_enterhighscores_init0:
101+  AB7D 21 B0 83         ld hl,string_highscore_player2
102+  AB80              gameover_enterhighscores_init1:
103+  AB80 CD A6 84         call string_print
104+  AB83 06 60            ld b,96
105+  AB85 3E 43            ld a,67
106+  AB87 11 A0 58         ld de,22528+160                         ; attrs here
107+  AB8A CD AB A7         call screen_setcolours
108+  AB8D
109+  AB8D 21 BB 83         ld hl,string_highscore_youhaveearned
110+  AB90 CD A6 84         call string_print
111+  AB93
112+  AB93 3A 0C BF         ld a,(scores_highscoretmp)
113+  AB96 FE 05            cp 5
114+  AB98 CA A6 AB         jp z, gameover_enterhighscores_init2    ; first place
115+  AB9B FE 11            cp 17
116+  AB9D CA AC AB         jp z, gameover_enterhighscores_init3    ; 2nd place
117+  ABA0 21 F7 83         ld hl,string_highscore_place3           ; 3rd place
118+  ABA3 C3 B2 AB         jp gameover_enterhighscores_init4
119+  ABA6              gameover_enterhighscores_init2
120+  ABA6 21 CD 83         ld hl,string_highscore_place1
121+  ABA9 C3 B2 AB         jp gameover_enterhighscores_init4
122+  ABAC              gameover_enterhighscores_init3
123+  ABAC 21 E2 83         ld hl,string_highscore_place2
124+  ABAF C3 B2 AB         jp gameover_enterhighscores_init4
125+  ABB2              gameover_enterhighscores_init4
126+  ABB2 CD A6 84         call string_print
127+  ABB5
128+  ABB5 06 60            ld b,96
129+  ABB7 3E 42            ld a,66
130+  ABB9 11 40 59         ld de,22528+320                         ; attrs here
131+  ABBC CD AB A7         call screen_setcolours
132+  ABBF
133+  ABBF 21 0C 84         ld hl,string_highscore_pleaseenter
134+  ABC2 CD A6 84         call string_print
135+  ABC5
136+  ABC5 06 60            ld b,96
137+  ABC7 3E 46            ld a,70
138+  ABC9 11 E0 59         ld de,22528+480                         ; attrs here
139+  ABCC CD AB A7         call screen_setcolours
140+  ABCF C9               ret
141+  ABD0
142+  ABD0              ;
143+  ABD0              ; Initialises the screen
144+  ABD0              ;
145+  ABD0              gameover_init:
146+  ABD0              ; We want a black screen.
147+  ABD0 3E 47            ld a,71             ; white ink (7) on black paper (0),
148+  ABD2                                      ; bright (64).
149+  ABD2 CD 67 80         call utilities_clearscreen
150+  ABD5 32 8D 5C         ld (23693),a        ; set our screen colours.
151+  ABD8 3E 00            ld a,0              ; 2 is the code for red.
152+  ABDA D3 FE            out (254),a         ; write to port 254.
153+  ABDC C9               ret
# file closed: screen/gameover.asm
 29   ABDD                  include "screen\endlevel.asm"
# file opened: screen/endlevel.asm
  1+  ABDD              ;
  2+  ABDD              ; Draws the level transition screen
  3+  ABDD              ;
  4+  ABDD              endlevel_draw:
  5+  ABDD CD 55 AC         call endlevel_init
  6+  ABE0 CD 3E AC         call endlevel_commontext
  7+  ABE3
  8+  ABE3 21 93 83         ld hl,string_highscore_congratulations
  9+  ABE6 CD A6 84         call string_print
 10+  ABE9
 11+  ABE9 3A 25 B8         ld a,(game_currentplayer)
 12+  ABEC FE 01            cp 1
 13+  ABEE 21 A5 83         ld hl,string_highscore_player1
 14+  ABF1 C3 F7 AB         jp endlevel_init1
 15+  ABF4              endlevel_init0:
 16+  ABF4 21 B0 83         ld hl,string_highscore_player2
 17+  ABF7              endlevel_init1:
 18+  ABF7 CD A6 84         call string_print
 19+  ABFA
 20+  ABFA 21 29 84         ld hl,string_endlevel_youhaveearned
 21+  ABFD CD A6 84         call string_print
 22+  AC00 21 3B 84         ld hl, string_endlevel_bonus1
 23+  AC03 CD A6 84         call string_print
 24+  AC06 21 68 84         ld hl, string_endlevel_points1
 25+  AC09 CD A6 84         call string_print
 26+  AC0C 21 94 84         ld hl, string_endlevel_anothergo
 27+  AC0F CD A6 84         call string_print
 28+  AC12
 29+  AC12 06 20            ld b,32
 30+  AC14 3E 63            ld a,99
 31+  AC16 11 60 59         ld de,22528+352                         ; attrs here
 32+  AC19 CD AB A7         call screen_setcolours
 33+  AC1C
 34+  AC1C 06 20            ld b,32
 35+  AC1E 3E 65            ld a,101
 36+  AC20 11 A0 59         ld de,22528+416                         ; attrs here
 37+  AC23 CD AB A7         call screen_setcolours
 38+  AC26
 39+  AC26 06 20            ld b,32
 40+  AC28 3E 63            ld a,99
 41+  AC2A 11 E0 59         ld de,22528+480                         ; attrs here
 42+  AC2D CD AB A7         call screen_setcolours
 43+  AC30
 44+  AC30 06 20            ld b,32
 45+  AC32 3E 62            ld a,98
 46+  AC34 11 40 5A         ld de,22528+576                         ; attrs here
 47+  AC37 CD AB A7         call screen_setcolours
 48+  AC3A
 49+  AC3A CD 47 80         call utilities_waitforkey   ; wait for keypress
 50+  AC3D
 51+  AC3D C9               ret
 52+  AC3E
 53+  AC3E              ;
 54+  AC3E              ; Draws text shared by the game over and high score screens
 55+  AC3E              ;
 56+  AC3E              endlevel_commontext:
 57+  AC3E CD 7D A7         call screen_setuptext       ; show scores
 58+  AC41 CD D7 BE         call scores_printscores     ; print the current scores
 59+  AC44
 60+  AC44 21 73 83         ld hl,string_gameoverscreen_bestscores
 61+  AC47 CD A6 84         call string_print
 62+  AC4A
 63+  AC4A 06 20            ld b,32
 64+  AC4C 3E 45            ld a,69
 65+  AC4E 11 C0 5A         ld de,22528+704                         ; attrs here
 66+  AC51 CD AB A7         call screen_setcolours
 67+  AC54
 68+  AC54 C9               ret
 69+  AC55
 70+  AC55              ;
 71+  AC55              ; Initialises the screen
 72+  AC55              ;
 73+  AC55              endlevel_init:
 74+  AC55              ; We want a green screen.
 75+  AC55 3E 61            ld a,97             ; white ink (7) on black paper (0),
 76+  AC57                                      ; bright (64).
 77+  AC57 CD 67 80         call utilities_clearscreen
 78+  AC5A 32 8D 5C         ld (23693),a        ; set our screen colours.
 79+  AC5D 3E 00            ld a,0              ; 2 is the code for red.
 80+  AC5F D3 FE            out (254),a         ; write to port 254.
 81+  AC61 C9               ret
# file closed: screen/endlevel.asm
 30   AC62
 31   AC62                  include "leveldata\level01.asm"
# file opened: leveldata/level01.asm
  1+  AC62              ; ###############################################################
  2+  AC62              ; Data for level 1
  3+  AC62              ; ###############################################################
  4+  AC62              level01:
  5+  AC62
  6+  AC62                  ;defb 09,04,04,04,04,04,04,04,04,04,04,04,04,04,04,09,09,04,04,04,04,04,04,04,04,04,04,04,04,04,04,09
  7+  AC62
  8+  AC62 00 00 05 05      defb 00,00,05,05,05,05,05,05,05,05,05,05,05,05,02,01,01,01,03,05,05,05,05,05,05,05,05,05,05,05,00,00
  8+  AC66 05 05 05 05
  8+  AC6A 05 05 05 05
  8+  AC6E 05 05 02 01
  8+  AC72 01 01 03 05
  8+  AC76 05 05 05 05
  8+  AC7A 05 05 05 05
  8+  AC7E 05 05 00 00
  9+  AC82 00 00 05 05      defb 00,00,05,05,05,05,05,05,05,05,05,05,02,01,01,01,01,01,01,01,03,05,05,05,05,05,05,05,05,05,00,00
  9+  AC86 05 05 05 05
  9+  AC8A 05 05 05 05
  9+  AC8E 02 01 01 01
  9+  AC92 01 01 01 01
  9+  AC96 03 05 05 05
  9+  AC9A 05 05 05 05
  9+  AC9E 05 05 00 00
 10+  ACA2 00 00 05 05      defb 00,00,05,05,05,05,05,05,05,05,02,01,01,01,01,01,01,01,01,01,01,01,03,05,13,13,13,13,13,13,00,00
 10+  ACA6 05 05 05 05
 10+  ACAA 05 05 02 01
 10+  ACAE 01 01 01 01
 10+  ACB2 01 01 01 01
 10+  ACB6 01 01 03 05
 10+  ACBA 0D 0D 0D 0D
 10+  ACBE 0D 0D 00 00
 11+  ACC2 00 00 01 01      defb 00,00,01,01,01,01,00,01,01,01,01,01,01,01,01,01,01,01,01,01,01,01,01,03,05,05,05,05,05,05,00,00
 11+  ACC6 01 01 00 01
 11+  ACCA 01 01 01 01
 11+  ACCE 01 01 01 01
 11+  ACD2 01 01 01 01
 11+  ACD6 01 01 01 03
 11+  ACDA 05 05 05 05
 11+  ACDE 05 05 00 00
 12+  ACE2 00 00 01 01      defb 00,00,01,01,04,04,04,04,04,04,01,01,01,01,01,01,01,01,01,01,01,01,01,01,01,01,01,01,00,01,00,00
 12+  ACE6 04 04 04 04
 12+  ACEA 04 04 01 01
 12+  ACEE 01 01 01 01
 12+  ACF2 01 01 01 01
 12+  ACF6 01 01 01 01
 12+  ACFA 01 01 01 01
 12+  ACFE 00 01 00 00
 13+  AD02 00 00 01 04      defb 00,00,01,04,04,04,04,04,04,04,04,04,01,01,01,01,01,01,01,01,01,01,01,01,00,00,00,00,00,01,00,00
 13+  AD06 04 04 04 04
 13+  AD0A 04 04 04 04
 13+  AD0E 01 01 01 01
 13+  AD12 01 01 01 01
 13+  AD16 01 01 01 01
 13+  AD1A 00 00 00 00
 13+  AD1E 00 01 00 00
 14+  AD22 00 00 01 04      defb 00,00,01,04,04,01,01,01,01,01,04,04,04,04,01,01,01,01,01,01,01,00,00,00,00,01,01,01,01,01,00,00
 14+  AD26 04 01 01 01
 14+  AD2A 01 01 04 04
 14+  AD2E 04 04 01 01
 14+  AD32 01 01 01 01
 14+  AD36 01 00 00 00
 14+  AD3A 00 01 01 01
 14+  AD3E 01 01 00 00
 15+  AD42 00 00 01 04      defb 00,00,01,04,04,04,04,04,04,01,04,04,04,04,04,04,04,04,00,00,00,00,04,04,04,04,04,04,04,01,00,00
 15+  AD46 04 04 04 04
 15+  AD4A 04 01 04 04
 15+  AD4E 04 04 04 04
 15+  AD52 04 04 00 00
 15+  AD56 00 00 04 04
 15+  AD5A 04 04 04 04
 15+  AD5E 04 01 00 00
 16+  AD62 00 00 01 01      defb 00,00,01,01,01,04,01,01,01,01,04,04,04,04,04,04,04,04,00,04,04,04,04,04,04,04,04,04,04,01,00,00
 16+  AD66 01 04 01 01
 16+  AD6A 01 01 04 04
 16+  AD6E 04 04 04 04
 16+  AD72 04 04 00 04
 16+  AD76 04 04 04 04
 16+  AD7A 04 04 04 04
 16+  AD7E 04 01 00 00
 17+  AD82 00 00 01 00      defb 00,00,01,00,00,00,00,00,00,04,04,04,04,04,04,04,04,04,00,04,04,04,04,04,04,04,04,04,04,01,00,00
 17+  AD86 00 00 00 00
 17+  AD8A 00 04 04 04
 17+  AD8E 04 04 04 04
 17+  AD92 04 04 00 04
 17+  AD96 04 04 04 04
 17+  AD9A 04 04 04 04
 17+  AD9E 04 01 00 00
 18+  ADA2 00 00 01 07      defb 00,00,01,07,07,07,07,07,07,01,04,04,04,04,04,04,04,04,00,04,04,04,04,04,04,04,04,04,04,01,00,00
 18+  ADA6 07 07 07 07
 18+  ADAA 07 01 04 04
 18+  ADAE 04 04 04 04
 18+  ADB2 04 04 00 04
 18+  ADB6 04 04 04 04
 18+  ADBA 04 04 04 04
 18+  ADBE 04 01 00 00
 19+  ADC2 00 00 01 00      defb 00,00,01,00,00,00,00,00,00,01,04,04,04,04,04,04,04,04,00,04,04,04,04,04,04,00,00,00,00,01,00,00
 19+  ADC6 00 00 00 00
 19+  ADCA 00 01 04 04
 19+  ADCE 04 04 04 04
 19+  ADD2 04 04 00 04
 19+  ADD6 04 04 04 04
 19+  ADDA 04 00 00 00
 19+  ADDE 00 01 00 00
 20+  ADE2 00 00 01 00      defb 00,00,01,00,00,00,00,00,00,01,04,04,04,04,04,04,04,04,00,04,04,04,04,04,04,00,04,04,00,01,00,00
 20+  ADE6 00 00 00 00
 20+  ADEA 00 01 04 04
 20+  ADEE 04 04 04 04
 20+  ADF2 04 04 00 04
 20+  ADF6 04 04 04 04
 20+  ADFA 04 00 04 04
 20+  ADFE 00 01 00 00
 21+  AE02 00 00 01 06      defb 00,00,01,06,06,06,06,06,06,01,04,04,04,04,04,04,04,04,00,04,04,04,04,04,04,00,04,04,00,01,00,00
 21+  AE06 06 06 06 06
 21+  AE0A 06 01 04 04
 21+  AE0E 04 04 04 04
 21+  AE12 04 04 00 04
 21+  AE16 04 04 04 04
 21+  AE1A 04 00 04 04
 21+  AE1E 00 01 00 00
 22+  AE22 00 00 01 06      defb 00,00,01,06,06,06,06,06,06,01,04,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,04,04,00,01,00,00
 22+  AE26 06 06 06 06
 22+  AE2A 06 01 04 00
 22+  AE2E 00 00 00 00
 22+  AE32 00 00 00 00
 22+  AE36 00 00 00 00
 22+  AE3A 00 00 04 04
 22+  AE3E 00 01 00 00
 23+  AE42 00 00 01 06      defb 00,00,01,06,06,06,06,06,06,01,04,00,04,04,04,04,04,04,00,04,04,04,00,04,04,04,04,04,00,01,00,00
 23+  AE46 06 06 06 06
 23+  AE4A 06 01 04 00
 23+  AE4E 04 04 04 04
 23+  AE52 04 04 00 04
 23+  AE56 04 04 00 04
 23+  AE5A 04 04 04 04
 23+  AE5E 00 01 00 00
 24+  AE62 00 00 01 06      defb 00,00,01,06,06,06,06,06,06,01,04,00,04,04,04,04,04,04,00,04,04,04,00,04,04,04,04,04,00,01,00,00
 24+  AE66 06 06 06 06
 24+  AE6A 06 01 04 00
 24+  AE6E 04 04 04 04
 24+  AE72 04 04 00 04
 24+  AE76 04 04 00 04
 24+  AE7A 04 04 04 04
 24+  AE7E 00 01 00 00
 25+  AE82 00 00 01 01      defb 00,00,01,01,01,01,01,01,01,01,04,00,04,04,04,04,04,04,00,04,04,04,00,04,04,04,04,04,00,01,00,00
 25+  AE86 01 01 01 01
 25+  AE8A 01 01 04 00
 25+  AE8E 04 04 04 04
 25+  AE92 04 04 00 04
 25+  AE96 04 04 00 04
 25+  AE9A 04 04 04 04
 25+  AE9E 00 01 00 00
 26+  AEA2 00 00 01 04      defb 00,00,01,04,04,04,04,04,04,04,04,00,04,04,04,04,04,04,00,04,04,04,00,00,00,00,04,04,04,01,00,00
 26+  AEA6 04 04 04 04
 26+  AEAA 04 04 04 00
 26+  AEAE 04 04 04 04
 26+  AEB2 04 04 00 04
 26+  AEB6 04 04 00 00
 26+  AEBA 00 00 04 04
 26+  AEBE 04 01 00 00
 27+  AEC2 00 00 01 04      defb 00,00,01,04,04,04,00,00,00,00,00,00,04,04,04,04,04,04,00,04,04,04,04,04,04,00,04,04,04,01,00,00
 27+  AEC6 04 04 00 00
 27+  AECA 00 00 00 00
 27+  AECE 04 04 04 04
 27+  AED2 04 04 00 04
 27+  AED6 04 04 04 04
 27+  AEDA 04 00 04 04
 27+  AEDE 04 01 00 00
 28+  AEE2 00 00 01 04      defb 00,00,01,04,04,04,00,04,04,04,04,04,04,04,04,04,04,04,00,04,04,04,04,04,04,00,04,04,04,01,00,00
 28+  AEE6 04 04 00 04
 28+  AEEA 04 04 04 04
 28+  AEEE 04 04 04 04
 28+  AEF2 04 04 00 04
 28+  AEF6 04 04 04 04
 28+  AEFA 04 00 04 04
 28+  AEFE 04 01 00 00
 29+  AF02 00 00 01 04      defb 00,00,01,04,04,04,00,04,04,04,01,01,01,01,01,01,01,01,01,01,01,01,01,01,04,00,04,04,04,01,00,00
 29+  AF06 04 04 00 04
 29+  AF0A 04 04 01 01
 29+  AF0E 01 01 01 01
 29+  AF12 01 01 01 01
 29+  AF16 01 01 01 01
 29+  AF1A 04 00 04 04
 29+  AF1E 04 01 00 00
 30+  AF22 00 00 01 04      defb 00,00,01,04,04,04,00,04,04,04,01,00,00,00,00,00,00,00,00,00,00,00,00,01,04,00,04,04,04,01,00,00
 30+  AF26 04 04 00 04
 30+  AF2A 04 04 01 00
 30+  AF2E 00 00 00 00
 30+  AF32 00 00 00 00
 30+  AF36 00 00 00 01
 30+  AF3A 04 00 04 04
 30+  AF3E 04 01 00 00
 31+  AF42 00 00 01 04      defb 00,00,01,04,04,04,00,04,04,04,01,00,00,00,00,00,00,00,00,00,00,00,00,01,04,00,04,04,04,01,00,00
 31+  AF46 04 04 00 04
 31+  AF4A 04 04 01 00
 31+  AF4E 00 00 00 00
 31+  AF52 00 00 00 00
 31+  AF56 00 00 00 01
 31+  AF5A 04 00 04 04
 31+  AF5E 04 01 00 00
 32+  AF62 00 00 01 04      defb 00,00,01,04,04,04,00,04,04,04,01,00,00,00,00,00,00,00,00,00,00,00,00,01,04,00,04,04,04,01,00,00
 32+  AF66 04 04 00 04
 32+  AF6A 04 04 01 00
 32+  AF6E 00 00 00 00
 32+  AF72 00 00 00 00
 32+  AF76 00 00 00 01
 32+  AF7A 04 00 04 04
 32+  AF7E 04 01 00 00
 33+  AF82 00 00 01 04      defb 00,00,01,04,04,04,00,04,04,04,04,00,00,00,00,00,00,00,00,00,00,00,00,04,04,04,04,04,04,01,00,00
 33+  AF86 04 04 00 04
 33+  AF8A 04 04 04 00
 33+  AF8E 00 00 00 00
 33+  AF92 00 00 00 00
 33+  AF96 00 00 00 04
 33+  AF9A 04 04 04 04
 33+  AF9E 04 01 00 00
 34+  AFA2 00 00 01 04      defb 00,00,01,04,04,04,04,04,04,04,01,00,00,00,00,00,00,00,00,00,00,00,00,01,04,04,04,04,04,01,00,00
 34+  AFA6 04 04 04 04
 34+  AFAA 04 04 01 00
 34+  AFAE 00 00 00 00
 34+  AFB2 00 00 00 00
 34+  AFB6 00 00 00 01
 34+  AFBA 04 04 04 04
 34+  AFBE 04 01 00 00
 35+  AFC2 00 00 01 04      defb 00,00,01,04,04,04,04,04,04,04,01,00,00,00,01,00,00,00,00,01,00,00,00,01,04,04,04,04,04,01,00,00
 35+  AFC6 04 04 04 04
 35+  AFCA 04 04 01 00
 35+  AFCE 00 00 01 00
 35+  AFD2 00 00 00 01
 35+  AFD6 00 00 00 01
 35+  AFDA 04 04 04 04
 35+  AFDE 04 01 00 00
 36+  AFE2 00 00 01 01      defb 00,00,01,01,01,01,01,01,01,01,01,01,01,01,01,01,01,01,01,01,01,01,01,01,01,01,01,01,01,01,00,00
 36+  AFE6 01 01 01 01
 36+  AFEA 01 01 01 01
 36+  AFEE 01 01 01 01
 36+  AFF2 01 01 01 01
 36+  AFF6 01 01 01 01
 36+  AFFA 01 01 01 01
 36+  AFFE 01 01 00 00
 37+  B002
 38+  B002              ; ###############################################################
 39+  B002              ; Object data: horiz, vert, state, memh, meml
 40+  B002              ; ###############################################################
 41+  B002              level01rocks1:
 42+  B002 1C 09 00 00      defb 28,9,0,0,0
 42+  B006 00
 43+  B007 1B 0C 00 00      defb 27,12,0,0,0
 43+  B00B 00
 44+  B00C 1B 11 00 00      defb 27,17,0,0,0
 44+  B010 00
 45+  B011 1C 12 00 00      defb 28,18,0,0,0
 45+  B015 00
 46+  B016 FF               defb 255
 47+  B017
 48+  B017              level01rocks:
 49+  B017 09 04 00 00      defb 9,4,0,0,0
 49+  B01B 00
 50+  B01C 0C 07 00 00      defb 12,7,0,0,0
 50+  B020 00
 51+  B021 10 07 00 00      defb 16,7,0,0,0
 51+  B025 00
 52+  B026 0B 08 00 00      defb 11,8,0,0,0
 52+  B02A 00
 53+  B02B 0A 0A 00 00      defb 10,10,0,0,0
 53+  B02F 00
 54+  B030 0C 0A 00 00      defb 12,10,0,0,0
 54+  B034 00
 55+  B035 0D 09 00 00      defb 13,9,0,0,0
 55+  B039 00
 56+  B03A 0E 08 00 00      defb 14,8,0,0,0
 56+  B03E 00
 57+  B03F 0F 0B 00 00      defb 15,11,0,0,0
 57+  B043 00
 58+  B044 0B 0C 00 00      defb 11,12,0,0,0
 58+  B048 00
 59+  B049 11 0C 00 00      defb 17,12,0,0,0
 59+  B04D 00
 60+  B04E 13 08 00 00      defb 19,8,0,0,0
 60+  B052 00
 61+  B053 16 09 00 00      defb 22,9,0,0,0
 61+  B057 00
 62+  B058 13 0A 00 00      defb 19,10,0,0,0
 62+  B05C 00
 63+  B05D 15 0A 00 00      defb 21,10,0,0,0
 63+  B061 00
 64+  B062 15 0C 00 00      defb 21,12,0,0,0
 64+  B066 00
 65+  B067 16 0C 00 00      defb 22,12,0,0,0
 65+  B06B 00
 66+  B06C 18 0A 00 00      defb 24,10,0,0,0
 66+  B070 00
 67+  B071 19 09 00 00      defb 25,9,0,0,0
 67+  B075 00
 68+  B076 1C 09 00 00      defb 28,9,0,0,0
 68+  B07A 00
 69+  B07B 1B 0C 00 00      defb 27,12,0,0,0
 69+  B07F 00
 70+  B080 1A 0D 00 00      defb 26,13,0,0,0
 70+  B084 00
 71+  B085 19 0E 00 00      defb 25,14,0,0,0
 71+  B089 00
 72+  B08A 19 10 00 00      defb 25,16,0,0,0
 72+  B08E 00
 73+  B08F 1A 11 00 00      defb 26,17,0,0,0
 73+  B093 00
 74+  B094 1B 11 00 00      defb 27,17,0,0,0
 74+  B098 00
 75+  B099 1C 12 00 00      defb 28,18,0,0,0
 75+  B09D 00
 76+  B09E 1A 13 00 00      defb 26,19,0,0,0
 76+  B0A2 00
 77+  B0A3 1B 15 00 00      defb 27,21,0,0,0
 77+  B0A7 00
 78+  B0A8 1A 17 00 00      defb 26,23,0,0,0
 78+  B0AC 00
 79+  B0AD 1B 18 00 00      defb 27,24,0,0,0
 79+  B0B1 00
 80+  B0B2 19 18 00 00      defb 25,24,0,0,0
 80+  B0B6 00
 81+  B0B7 18 17 00 00      defb 24,23,0,0,0
 81+  B0BB 00
 82+  B0BC 13 14 00 00      defb 19,20,0,0,0
 82+  B0C0 00
 83+  B0C1 14 12 00 00      defb 20,18,0,0,0
 83+  B0C5 00
 84+  B0C6 14 10 00 00      defb 20,16,0,0,0
 84+  B0CA 00
 85+  B0CB 15 10 00 00      defb 21,16,0,0,0
 85+  B0CF 00
 86+  B0D0 16 12 00 00      defb 22,18,0,0,0
 86+  B0D4 00
 87+  B0D5 11 14 00 00      defb 17,20,0,0,0
 87+  B0D9 00
 88+  B0DA 0D 11 00 00      defb 13,17,0,0,0
 88+  B0DE 00
 89+  B0DF 0C 13 00 00      defb 12,19,0,0,0
 89+  B0E3 00
 90+  B0E4 0B 13 00 00      defb 11,19,0,0,0
 90+  B0E8 00
 91+  B0E9 0A 11 00 00      defb 10,17,0,0,0
 91+  B0ED 00
 92+  B0EE 05 12 00 00      defb 5,18,0,0,0
 92+  B0F2 00
 93+  B0F3 07 16 00 00      defb 7,22,0,0,0
 93+  B0F7 00
 94+  B0F8 09 17 00 00      defb 9,23,0,0,0
 94+  B0FC 00
 95+  B0FD 07 18 00 00      defb 7,24,0,0,0
 95+  B101 00
 96+  B102 05 18 00 00      defb 5,24,0,0,0
 96+  B106 00
 97+  B107 06 19 00 00      defb 6,25,0,0,0
 97+  B10B 00
 98+  B10C 08 19 00 00      defb 8,25,0,0,0
 98+  B110 00
 99+  B111 04 17 00 00      defb 4,23,0,0,0
 99+  B115 00
100+  B116 FF               defb 255
101+  B117
102+  B117              level01missiles:
103+  B117 0B 17 00 00      defb 11,23,0,0,0
103+  B11B 00
104+  B11C 0B 16 00 00      defb 11,22,0,0,0
104+  B120 00
105+  B121 0C 17 00 00      defb 12,23,0,0,0
105+  B125 00
106+  B126 0C 16 00 00      defb 12,22,0,0,0
106+  B12A 00
107+  B12B 0D 17 00 00      defb 13,23,0,0,0
107+  B12F 00
108+  B130 0D 16 00 00      defb 13,22,0,0,0
108+  B134 00
109+  B135 0E 17 00 00      defb 14,23,0,0,0
109+  B139 00
110+  B13A 0E 16 00 00      defb 14,22,0,0,0
110+  B13E 00
111+  B13F 0F 17 00 00      defb 15,23,0,0,0
111+  B143 00
112+  B144 0F 16 00 00      defb 15,22,0,0,0
112+  B148 00
113+  B149 10 17 00 00      defb 16,23,0,0,0
113+  B14D 00
114+  B14E 10 16 00 00      defb 16,22,0,0,0
114+  B152 00
115+  B153 11 17 00 00      defb 17,23,0,0,0
115+  B157 00
116+  B158 11 16 00 00      defb 17,22,0,0,0
116+  B15C 00
117+  B15D 12 17 00 00      defb 18,23,0,0,0
117+  B161 00
118+  B162 12 16 00 00      defb 18,22,0,0,0
118+  B166 00
119+  B167 13 17 00 00      defb 19,23,0,0,0
119+  B16B 00
120+  B16C 13 16 00 00      defb 19,22,0,0,0
120+  B170 00
121+  B171 14 17 00 00      defb 20,23,0,0,0
121+  B175 00
122+  B176 14 16 00 00      defb 20,22,0,0,0
122+  B17A 00
123+  B17B 15 17 00 00      defb 21,23,0,0,0
123+  B17F 00
124+  B180 15 16 00 00      defb 21,22,0,0,0
124+  B184 00
125+  B185 16 17 00 00      defb 22,23,0,0,0
125+  B189 00
126+  B18A 16 16 00 00      defb 22,22,0,0,0
126+  B18E 00
127+  B18F FF               defb 255
128+  B190
129+  B190              ;
130+  B190              ; Diamonds: x,y,state,mem1+mem2
131+  B190              ;
132+  B190              level01diamonds:
133+  B190 0C 1B 00 00      defb 12,27,0,0,0
133+  B194 00
134+  B195 10 1B 00 00      defb 16,27,0,0,0
134+  B199 00
135+  B19A 15 1B 00 00      defb 21,27,0,0,0
135+  B19E 00
136+  B19F FF               defb 255
137+  B1A0
138+  B1A0              level01gems:
139+  B1A0 12 14 00 00      defb 18,20,0,0,0
139+  B1A4 00
140+  B1A5 06 18 00 00      defb 6,24,0,0,0
140+  B1A9 00
141+  B1AA 19 17 00 00      defb 25,23,0,0,0
141+  B1AE 00
142+  B1AF 1C 11 00 00      defb 28,17,0,0,0
142+  B1B3 00
143+  B1B4 FF               defb 255
144+  B1B5              ;
145+  B1B5              ; Score area colours
146+  B1B5              ;
147+  B1B5              score_colours:
148+  B1B5 47 47 47 47      defb 71,71,71,71,71,71,71,71,71,71,71,66,67,67,67,67,67,67,67,67,66,71,71,71,71,71,71,71,71,71,71,71
148+  B1B9 47 47 47 47
148+  B1BD 47 47 47 42
148+  B1C1 43 43 43 43
148+  B1C5 43 43 43 43
148+  B1C9 42 47 47 47
148+  B1CD 47 47 47 47
148+  B1D1 47 47 47 47
149+  B1D5 47 47 47 47      defb 71,71,71,71,71,71,71,71,71,71,71,70,70,70,70,70,70,70,70,70,70,71,71,71,71,71,71,71,71,71,71,71
149+  B1D9 47 47 47 47
149+  B1DD 47 47 47 46
149+  B1E1 46 46 46 46
149+  B1E5 46 46 46 46
149+  B1E9 46 47 47 47
149+  B1ED 47 47 47 47
149+  B1F1 47 47 47 47
150+  B1F5
151+  B1F5              high_score_colours:
152+  B1F5 00 00 00 42      defb  0, 0, 0,66,66,66,71,71,71,71,71,71,67,67,67,71,71,71,71,71,71,70,70,70,71,71,71,71,71,71,0,0
152+  B1F9 42 42 47 47
152+  B1FD 47 47 47 47
152+  B201 43 43 43 47
152+  B205 47 47 47 47
152+  B209 47 46 46 46
152+  B20D 47 47 47 47
152+  B211 47 47 00 00
# file closed: leveldata/level01.asm
 32   B215                  include "graphics\graphics.asm"
# file opened: graphics/graphics.asm
  1+  B215              ; Tiles graphics.
  2+  B215              sprites:
  3+  B215 00 00 00 00      defb    0  ,  0,  0,  0,  0,  0,  0,  0   ; 0, space
  3+  B219 00 00 00 00
  4+  B21D FF FF FF FF      defb    255,255,255,255,255,255,255,255   ; 1, cyan block
  4+  B221 FF FF FF FF
  5+  B225 01 03 07 0F      defb	  1,  3,  7, 15, 31, 63,127,255   ; 2, slope left
  5+  B229 1F 3F 7F FF
  6+  B22D 80 C0 E0 F0      defb    128,192,224,240,248,252,254,255   ; 3, slope right
  6+  B231 F8 FC FE FF
  7+  B235 55 AA 55 AA      defb    85,170, 85,170, 85,170, 85,170    ; 4, dirt
  7+  B239 55 AA 55 AA
  8+  B23D 00 00 00 00      defb    0  ,  0,  0,  0,  0,  0,  0,  0   ; 5, sky block
  8+  B241 00 00 00 00
  9+  B245 FF FF FF FF      defb    255,255,255,255,255,255,255,255   ; 6, slime block
  9+  B249 FF FF FF FF
 10+  B24D FF FF 00 00      defb    255,255,  0,  0,  0,  0,  0,  0   ; 7, trapdoor
 10+  B251 00 00 00 00
 11+  B255 18 2C 4E 8F      defb    24, 44, 78,143,241,114, 52,  24    ; 8, diamond
 11+  B259 F1 72 34 18
 12+  B25D 3C 7E FF 7F      defb    60,126,255,127,254,254,255,126    ; 9, rock
 12+  B261 FE FE FF 7E
 13+  B265 7E FF 7F 7F  	defb	126,255,127,127,254,255,126, 60    ; 10, rock 2
 13+  B269 FE FF 7E 3C
 14+  B26D 00 00 00 00      defb    0  ,  0,  0,  0,  0,  0,255,255   ; 11, sky block, pixel trapdoor
 14+  B271 00 00 FF FF
 15+  B275 99 DB 7E 24  	defb    153,219,126, 36,255,126, 60, 24   ; 12, missile
 15+  B279 FF 7E 3C 18
 16+  B27D 00 00 00 00      defb    0  ,  0,  0,  0,  0,  0,  0,  0   ; 13, sky block, tank background
 16+  B281 00 00 00 00
 17+  B285 00 00 00 00  	defb    0,  0,  0,  0,  0, 60, 90, 52     ; 14, gem
 17+  B289 00 3C 5A 34
 18+  B28D FD FE FD FE  	defb	253,254,253,254,253,254,253,254   ; 15, damaged mountain
 18+  B291 FD FE FD FE
 19+  B295 F4 F8 F4 F8  	defb	244,248,244,248,244,248,244,248   ; 16, damaged mountain 2
 19+  B299 F4 F8 F4 F8
 20+  B29D D0 E0 D0 E0  	defb	208,224,208,224,208,224,208,224   ; 17, damaged mountain 3
 20+  B2A1 D0 E0 D0 E0
 21+  B2A5 40 80 40 80  	defb	 64,128, 64,128, 64,128, 64,128   ; 18, damaged mountain 4
 21+  B2A9 40 80 40 80
 22+  B2AD 00 00 00 ED  	defb	0,  0,  0,237,237,  0,  0,  0	  ; 19, tank missile
 22+  B2B1 ED 00 00 00
 23+  B2B5
 24+  B2B5
 25+  B2B5              sprite_attrs:
 26+  B2B5 46               defb    070 ; 0, space
 27+  B2B6 4D               defb    077 ; 1, cyan block
 28+  B2B7 4D               defb    077 ; 2, slope left
 29+  B2B8 4D               defb    077 ; 3, slope right
 30+  B2B9 46               defb    070 ; 4, dirt
 31+  B2BA 4E               defb    078 ; 5, sky
 32+  B2BB 4C               defb    076 ; 6, slime
 33+  B2BC 42               defb    066 ; 7, trapdoor
 34+  B2BD 46               defb    070 ; 8, diamond
 35+  B2BE 42               defb    066 ; 9, rock
 36+  B2BF 42               defb    066 ; 10, rock 2
 37+  B2C0 49           	defb    073 ; 11, sky, trapdoor
 38+  B2C1 43           	defb    067 ; 12, missile
 39+  B2C2 4A               defb    074 ; 13, sky, red ink (tank)
 40+  B2C3 46               defb    070 ; 14, gem
 41+  B2C4 4D               defb    077 ; 15, damaged mountain
 42+  B2C5 4D               defb    077 ; 16, damaged mountain 2
 43+  B2C6 4D               defb    077 ; 17, damaged mountain 3
 44+  B2C7 4D               defb    077 ; 18, damaged mountain 4
 45+  B2C8
 46+  B2C8              player_sprite:
 47+  B2C8 10 39 92 FC  	defb	 16, 57,146,252, 56, 61,195,128 ; 0 up/down 1
 47+  B2CC 38 3D C3 80
 48+  B2D0 08 1C 08 FC  	defb	  8, 28,  8,252, 60, 28, 22, 50 ; 1 left 1
 48+  B2D4 3C 1C 16 32
 49+  B2D8 10 38 10 3F      defb   	 16, 56, 16, 63, 60, 56,104, 76 ; 2 right 1
 49+  B2DC 3C 38 68 4C
 50+  B2E0 08 9C 49 3F  	defb	  8,156, 73, 63, 28,188,195,  1 ; 3 up/down 2
 50+  B2E4 1C BC C3 01
 51+  B2E8 08 1C 08 FC  	defb	  8, 28,  8,252, 60, 60,100, 12; 4 left 2
 51+  B2EC 3C 3C 64 0C
 52+  B2F0 10 38 10 3F  	defb	 16, 56, 16, 63, 60, 60, 38, 48 ; 5 right 2
 52+  B2F4 3C 3C 26 30
 53+  B2F8 54 28 10 12  	defb	 84, 40, 16, 18, 30, 92,253, 95 ; 6 shoot up
 53+  B2FC 1E 5C FD 5F
 54+  B300 02 87 42 BF  	defb	 2,135, 66,191, 79,143, 25,  3  ; 7 shoot left
 54+  B304 4F 8F 19 03
 55+  B308 40 E1 42 FD  	defb	 64,225, 66,253,242,241,152,192 ; 8 shoot right
 55+  B30C F2 F1 98 C0
 56+  B310 FA BF 3A 78  	defb	 250,191, 58,120, 72,  8, 20, 42 ; 9 shoot down
 56+  B314 48 08 14 2A
 57+  B318 92 BA 94 78  	defb 	 146,186,148,120, 56,120, 68,195 ; 10 crushed 1
 57+  B31C 38 78 44 C3
 58+  B320 49 5D 29 1E  	defb	  73, 93, 41, 30, 28, 30, 34,195 ; 11 crushed 2
 58+  B324 1C 1E 22 C3
 59+  B328
 60+  B328              ;
 61+  B328              ; First 4 top half, next 4 bottom 1, next 4 bottom 2
 62+  B328              ;
 63+  B328              ship_sprite:
 64+  B328 00 00 00 01  	defb	  0,  0,  0,  1,  3, 31,127,255
 64+  B32C 03 1F 7F FF
 65+  B330 1F 01 7F FF  	defb	 31,  1,127,255,255,255,255,255
 65+  B334 FF FF FF FF
 66+  B338 F8 80 FE FF  	defb	248,128,254,255,255,255,255,255
 66+  B33C FF FF FF FF
 67+  B340 00 00 00 80  	defb	  0,  0,  0,128,192,248,254,255
 67+  B344 C0 F8 FE FF
 68+  B348 B3 B3 7F 1F  	defb	179,179,127, 31,  3,  3,  2,  7
 68+  B34C 03 03 02 07
 69+  B350 8F 8F FF FF  	defb	143,143,255,255,255, 15,  7,131
 69+  B354 FF 0F 07 83
 70+  B358 0F 0F FF FF  	defb	 15, 15,255,255,255, 16, 32,193
 70+  B35C FF 10 20 C1
 71+  B360 19 19 FE F8  	defb	 25, 25,254,248,192,192, 64,224
 71+  B364 C0 C0 40 E0
 72+  B368 98 98 7F 1F  	defb	152,152,127, 31,  3,  3,  2,  7
 72+  B36C 03 03 02 07
 73+  B370 F0 F0 FF FF  	defb	240,240,255,255,255,  8,  4,131
 73+  B374 FF 08 04 83
 74+  B378 F1 F1 FF FF  	defb	241,241,255,255,255,240,224,193
 74+  B37C FF F0 E0 C1
 75+  B380 CD CD FE F8  	defb	205,205,254,248,192,192, 64,224
 75+  B384 C0 C0 40 E0
 76+  B388
 77+  B388              ;
 78+  B388              ;  First 8 frames are tank, last frame is the gun barrel
 79+  B388              ;
 80+  B388              tank_sprite:
 81+  B388 00 00 00 7F  	defb	  0,  0,  0,127,127,  0,  0,  0
 81+  B38C 7F 00 00 00
 82+  B390 01 03 FE FC  	defb	  1,  3,254,252,254,255,127, 64
 82+  B394 FE FF 7F 40
 83+  B398 FF FF 03 F9  	defb	255,255,  3,249,  3,255,255,  1
 83+  B39C 03 FF FF 01
 84+  B3A0 00 00 C0 E0  	defb	  0,  0,192,224,224,192,  0,  0
 84+  B3A4 E0 C0 00 00
 85+  B3A8 3F 7F E1 FB  	defb	 63,127,225,251,247,225,127, 63
 85+  B3AC F7 E1 7F 3F
 86+  B3B0 FF FF 16 52  	defb	255,255, 22, 82, 84, 22,255,255
 86+  B3B4 54 16 FF FF
 87+  B3B8 FF FF A8 A9  	defb	255,255,168,169,155,168,255,255
 87+  B3BC 9B A8 FF FF
 88+  B3C0 FC FE 8F AF  	defb	252,254,143,175,159,175,254,252
 88+  B3C4 9F AF FE FC
 89+  B3C8 00 00 00 1F  	defb	  0,  0,  0, 31, 31,  0,  0,  0 ; +64
 89+  B3CC 1F 00 00 00
# file closed: graphics/graphics.asm
 33   B3D0
 34   B3D0                  include "game\control.asm"
# file opened: game/control.asm
  1+  B3D0              ;
  2+  B3D0              ; Check the keyboard then move
  3+  B3D0              ;
  4+  B3D0              control_keyboard:
  5+  B3D0 3A 5E B8         ld a,(player+11)    ; first, check if player is dying
  6+  B3D3 FE 00            cp 0
  7+  B3D5 C0               ret nz               ; if so, can't move
  8+  B3D6 3A 58 B8         ld a,(player+5)      ; next, check if the player has pixels left to move
  9+  B3D9 FE 00            cp 0
 10+  B3DB CA E2 B3         jp z, control_keyboard5
 11+  B3DE CD E7 B4         call control_automove
 12+  B3E1 C9               ret
 13+  B3E2              control_keyboard5:
 14+  B3E2 3A 59 B8         ld a,(player+6)      ; next, check if the player is digging
 15+  B3E5 FE 00            cp 0
 16+  B3E7 CA EE B3         jp z, control_keyboard0
 17+  B3EA CD 25 B4         call control_dig
 18+  B3ED C9               ret
 19+  B3EE              control_keyboard0:
 20+  B3EE 01 FE FB         ld bc,64510         ; port for keyboard row q-t.
 21+  B3F1 ED 78            in a,(c)            ; read keyboard.
 22+  B3F3 47               ld b,a              ; store result in b register.
 23+  B3F4 CB 18            rr b                ; check outermost key (q).
 24+  B3F6 D2 15 B4         jp nc,control_keyboard1
 25+  B3F9 01 FE FD         ld bc,65022         ; port for keyboard row a-f.
 26+  B3FC ED 78            in a,(c)            ; read keyboard.
 27+  B3FE 47               ld b,a              ; store result in b register.
 28+  B3FF CB 18            rr b                ; check outermost key (a).
 29+  B401 D2 19 B4         jp nc,control_keyboard2
 30+  B404 01 FE DF         ld bc,57342         ; port for keyboard row y-p.
 31+  B407 ED 78            in a,(c)            ; read keyboard.
 32+  B409 47               ld b,a              ; store result in b register.
 33+  B40A CB 18            rr b                ; check outermost key (p).
 34+  B40C D2 1D B4         jp nc,control_keyboard3
 35+  B40F CB 18            rr b                ; check next key.
 36+  B411 D2 21 B4         jp nc,control_keyboard4
 37+  B414 C9               ret
 38+  B415              control_keyboard1:
 39+  B415 CD 30 B5         call control_pl_moveup         ; player up.
 40+  B418 C9               ret
 41+  B419              control_keyboard2:
 42+  B419 CD 5F B5         call control_pl_movedown       ; player down.
 43+  B41C C9               ret
 44+  B41D              control_keyboard3:
 45+  B41D CD BC B5         call control_pl_moveright       ; player left.
 46+  B420 C9               ret
 47+  B421              control_keyboard4:
 48+  B421 CD 8C B5         call control_pl_moveleft       ; player right.
 49+  B424 C9               ret
 50+  B425
 51+  B425              ;
 52+  B425              ; Performs a dig if the counter has reset, otherwise, messes with the graphics
 53+  B425              ;
 54+  B425              control_dig:
 55+  B425 ED 4B 53 B8      ld bc,(player)      ; load the current coords into bc
 56+  B429 C5               push bc
 57+  B42A 3A 55 B8         ld a,(player+2)     ; get the direction
 58+  B42D FE 01            cp 1                ; left
 59+  B42F CA 47 B4         jp z,control_dig0
 60+  B432 FE 02            cp 2                ; right
 61+  B434 CA 5C B4         jp z,control_dig1
 62+  B437 FE 03            cp 3                ; down
 63+  B439 CA 80 B4         jp z,control_dig5
 64+  B43C FE 00            cp 0                ; up
 65+  B43E CA 70 B4         jp z,control_dig4
 66+  B441 21 59 B8         ld hl,player+6
 67+  B444 36 00            ld (hl),0           ; turn off digging
 68+  B446 C9               ret                 ; return
 69+  B447              control_dig0:           ; going left
 70+  B447 CD 12 A9         call sprites_scadd  ; get the current coord
 71+  B44A 62 6B            ld hl,de
 72+  B44C 2B               dec hl              ; move one left
 73+  B44D C1               pop bc              ; get the coords back, subtract 8 from horiz, 8 from vert, store (will be coords of space above dug dirt)
 74+  B44E 78               ld a,b
 75+  B44F 06 08            ld b,8
 76+  B451 90               sub b
 77+  B452 47               ld b,a
 78+  B453 79               ld a,c
 79+  B454 0E 08            ld c,8
 80+  B456 91               sub c
 81+  B457 4F               ld c,a
 82+  B458 C5               push bc
 83+  B459 C3 89 B4         jp control_dig2
 84+  B45C              control_dig1:
 85+  B45C CD 12 A9         call sprites_scadd  ; get the current coord
 86+  B45F 62 6B            ld hl,de
 87+  B461 23               inc hl              ; move one right
 88+  B462 C1               pop bc              ; get the coords back, add 8 to horiz, subtract 8 from vert store (will be coords of space above dug dirt)
 89+  B463 3E 08            ld a,8
 90+  B465 80               add a,b
 91+  B466 47               ld b,a
 92+  B467 79               ld a,c
 93+  B468 0E 08            ld c,8
 94+  B46A 91               sub c
 95+  B46B 4F               ld c,a
 96+  B46C C5               push bc
 97+  B46D C3 89 B4         jp control_dig2
 98+  B470              control_dig4:
 99+  B470 CD 12 A9         call sprites_scadd  ; get the current coord
100+  B473 62 6B            ld hl,de
101+  B475 11 20 00         ld de,32
102+  B478 ED 52            sbc hl,de             ; move one up
103+  B47A C1               pop bc              ; get the coords back, 1 from vert, store, then we'll sub 1 from c for each row later
104+  B47B 0D               dec c
105+  B47C C5               push bc
106+  B47D C3 A1 B4         jp control_dig6
107+  B480              control_dig5:
108+  B480 CD 12 A9         call sprites_scadd  ; get the current coord
109+  B483 62 6B            ld hl,de
110+  B485 24               inc h              ; move one down
111+  B486                                     ; not bothered about working out bc here, since rock will never fall if digging down
112+  B486 C3 89 B4         jp control_dig2
113+  B489              ; Normal (not up) digging
114+  B489              control_dig2:
115+  B489 3A 5B B8         ld a,(player+8)     ; get the number of rows we need to overwrite
116+  B48C 47               ld b,a              ; rows to copy over
117+  B48D E5               push hl             ; store the memory location of the first row for later
118+  B48E              control_dig3:
119+  B48E CD D0 B4         call control_getpixelrow
120+  B491 77               ld (hl),a           ; load contents into row
121+  B492 11 20 00         ld de,32
122+  B495 19               add hl,de           ; move to next row
123+  B496 10 F6            djnz control_dig3
124+  B498 E1               pop hl              ; get the original memory location back
125+  B499 11 20 00         ld de,32
126+  B49C ED 52            sbc hl,de           ; move to above row, ready for checking for rock
127+  B49E C3 B7 B4         jp control_dig10
128+  B4A1              ; Special case for going up
129+  B4A1              control_dig6:
130+  B4A1 3A 5B B8         ld a,(player+8)     ; get the number of rows we need to overwrite
131+  B4A4 47               ld b,a              ; rows to copy over
132+  B4A5              control_dig7:
133+  B4A5 CD D0 B4         call control_getpixelrow
134+  B4A8              control_dig12:
135+  B4A8 77               ld (hl),a           ; load empty into row
136+  B4A9 11 20 00         ld de,32
137+  B4AC ED 52            sbc hl,de           ; move up to next row
138+  B4AE 0D               dec c               ; decrease c to track rows
139+  B4AF 10 F4            djnz control_dig7
140+  B4B1 79               ld a,c
141+  B4B2 D6 07            sub 7
142+  B4B4 C1               pop bc
143+  B4B5 4F               ld c,a
144+  B4B6 C5               push bc             ; store the decreased c coord
145+  B4B7              control_dig10:
146+  B4B7 DD 21 5A B8      ld ix,player+7
147+  B4BB DD 7E 00         ld a,(ix)     ; get the dig frame number
148+  B4BE 3D               dec a
149+  B4BF DD 77 00         ld (ix),a
150+  B4C2                  ; call the check for rocks above the removed dirt
151+  B4C2 DD 21 59 B8      ld ix,player+6
152+  B4C6 DD 7E 00         ld a,(ix)     ; get the dig state
153+  B4C9 FE 00            cp 0
154+  B4CB C1               pop bc
155+  B4CC CC 2C BD         call z, rocks_checkforfalling ; make the check if we're no longer digging
156+  B4CF C9               ret
157+  B4D0
158+  B4D0              ;
159+  B4D0              ; Gets a modified pixel row to overwrite dirt - if this is the last dig, overwrite with nothing, otherwise xor to flip the dirt
160+  B4D0              ; Inputs:
161+  B4D0              ; hl - memory of pixel row
162+  B4D0              ; Outputs:
163+  B4D0              ; a - modified row to write
164+  B4D0              ;
165+  B4D0              control_getpixelrow:
166+  B4D0 3A 5A B8         ld a,(player+7)     ; get the dig frame number
167+  B4D3 FE 00            cp 0                ; is this the last dig
168+  B4D5 CA DC B4         jp z,control_getpixelrow1
169+  B4D8 7E               ld a,(hl)           ; if not, xor with 255 to flip it
170+  B4D9 EE FF            xor 255
171+  B4DB C9               ret
172+  B4DC              control_getpixelrow1:
173+  B4DC DD 21 59 B8      ld ix,player+6
174+  B4E0 DD 36 00 00      ld (ix),0           ; turn off digging
175+  B4E4 3E 00            ld a,0              ; if it is, load with empty
176+  B4E6 C9               ret
177+  B4E7
178+  B4E7              ;
179+  B4E7              ; Auto move the player until pixels is zero
180+  B4E7              ;
181+  B4E7              control_automove:
182+  B4E7 5F               ld e,a              ; store the number of pixels left to move in e
183+  B4E8 ED 4B 53 B8      ld bc,(player)      ; load the current coords into bc
184+  B4EC 21 55 B8         ld hl,player+2      ; get the direction
185+  B4EF 7E               ld a,(hl)
186+  B4F0 FE 03            cp 3                ; down
187+  B4F2 CA 06 B5         jp z,control_automove3  ; don't need to do anything
188+  B4F5 FE 00            cp 0                ; going up
189+  B4F7 CA 12 B5         jp z,control_automove2
190+  B4FA FE 01            cp 1                ; going left?
191+  B4FC CA 1E B5         jp z,control_automove0
192+  B4FF 78               ld a,b
193+  B500 3C               inc a               ; if we're going right, increment a twice for two pixels
194+  B501 3C               inc a
195+  B502 47               ld b,a
196+  B503 C3 22 B5         jp control_automove1
197+  B506              control_automove3:
198+  B506 79               ld a,c
199+  B507 3C               inc a
200+  B508 3C               inc a               ; if we're going down, increment twice
201+  B509 4F               ld c,a
202+  B50A FE 90            cp 144
203+  B50C CC EA B5         call z, control_scroll_down
204+  B50F C3 22 B5         jp control_automove1
205+  B512              control_automove2:
206+  B512 79               ld a,c
207+  B513 3D               dec a
208+  B514 3D               dec a               ; if we're going up, decrement twice
209+  B515 4F               ld c,a
210+  B516 FE 60            cp 96
211+  B518 CC F7 B5         call z, control_scroll_up
212+  B51B C3 22 B5         jp control_automove1
213+  B51E              control_automove0:
214+  B51E 78               ld a,b
215+  B51F 3D               dec a               ; if we're going left, decrement a twice
216+  B520 3D               dec a
217+  B521 47               ld b,a
218+  B522              control_automove1:
219+  B522 ED 43 53 B8      ld (player),bc      ; and back to player
220+  B526 7B               ld a,e              ; now get the pixel count back
221+  B527 3D               dec a               ; decrease by one
222+  B528 21 58 B8         ld hl,player+5
223+  B52B 77               ld (hl),a           ; copy back
224+  B52C CD 90 B9         call player_justmoved
225+  B52F C9               ret
226+  B530
227+  B530              ;
228+  B530              ; Moves the player up
229+  B530              ;
230+  B530              control_pl_moveup:
231+  B530 C5               push bc
232+  B531 ED 4B 53 B8      ld bc,(player)          ; get the current coords, b horiz, c vert
233+  B535 79               ld a,c                  ; load c into the acc
234+  B536 FE 18            cp 24
235+  B538 CA 58 B5         jp z,control_pl_moveup0 ; are we at the edge of the screen
236+  B53B FE 60            cp 96
237+  B53D CC F7 B5         call z, control_scroll_up
238+  B540 CD 97 B7         call movement_checkcanmove_up ; check we can move up, e will be 1 if we can
239+  B543 F5               push af
240+  B544 7B               ld a,e                  ; put e in a
241+  B545 FE 00            cp 0
242+  B547 CA 57 B5         jp z,control_pl_moveup1 ; don't move if we can't
243+  B54A F1               pop af
244+  B54B D6 01            sub 1                   ; subtract 1
245+  B54D D6 01            sub 1                   ; subtract 1
246+  B54F 4F               ld c,a                  ; load back to c
247+  B550 ED 43 53 B8      ld (player),bc          ; load back to player
248+  B554 C3 58 B5         jp control_pl_moveup0
249+  B557              control_pl_moveup1:
250+  B557 F1               pop af                  ; restore af if needed
251+  B558              control_pl_moveup0:
252+  B558 3E 00            ld a,0
253+  B55A 32 55 B8         ld (player+2),a        ; set direction to up
254+  B55D C1               pop bc
255+  B55E C9               ret
256+  B55F              ;
257+  B55F              ; Moves the player down
258+  B55F              ;
259+  B55F              control_pl_movedown:
260+  B55F C5               push bc
261+  B560 ED 4B 53 B8      ld bc,(player)          ; get the current coords, b horiz, c vert
262+  B564 79               ld a,c                  ; load c into the acc
263+  B565 FE E0            cp 224
264+  B567 CA 85 B5         jp z,control_pl_movedown0 ; are we at the edge of the screen
265+  B56A FE 80            cp 128
266+  B56C CC EA B5         call z, control_scroll_down
267+  B56F CD 6B B7         call movement_checkcanmove_down ; check we can move down, e will be 1 if we can
268+  B572 F5               push af
269+  B573 7B               ld a,e                  ; put e in a
270+  B574 FE 00            cp 0
271+  B576 CA 84 B5         jp z,control_pl_movedown1 ; don't move if we can't
272+  B579 F1               pop af
273+  B57A 3C               inc a                   ; add 1
274+  B57B 3C               inc a                   ; add 1
275+  B57C 4F               ld c,a                  ; load back to c
276+  B57D ED 43 53 B8      ld (player),bc          ; load back to player
277+  B581 C3 85 B5         jp control_pl_movedown0
278+  B584              control_pl_movedown1:
279+  B584 F1               pop af                  ; restore af if needed
280+  B585              control_pl_movedown0:
281+  B585 3E 03            ld a,3
282+  B587 32 55 B8         ld (player+2),a        ; set direction to down
283+  B58A C1               pop bc
284+  B58B C9               ret
285+  B58C              ;
286+  B58C              ; Moves the player left
287+  B58C              ;
288+  B58C              control_pl_moveleft:
289+  B58C C5               push bc
290+  B58D ED 4B 53 B8      ld bc,(player)          ; get the current coords, b horiz, c vert
291+  B591 78               ld a,b                  ; load b into the acc
292+  B592 FE 10            cp 16
293+  B594 CA B5 B5         jp z,control_pl_moveleft0 ; are we at the edge of the screen
294+  B597 CD F6 B7         call movement_checkcanmove_left ; check we can move down, e will be 1 if we can
295+  B59A F5               push af
296+  B59B 7B               ld a,e                  ; put e in a
297+  B59C FE 00            cp 0
298+  B59E CA B4 B5         jp z,control_pl_moveleft1 ; don't move if we can't
299+  B5A1 21 58 B8         ld hl,player+5          ; need to store the amount of pixels still left to move in the player status
300+  B5A4 3E 03            ld a,3
301+  B5A6 77               ld (hl),a
302+  B5A7 F1               pop af
303+  B5A8 D6 01            sub 1                    ; subtract 2
304+  B5AA D6 01            sub 1
305+  B5AC 47               ld b,a                  ; load back to c
306+  B5AD ED 43 53 B8      ld (player),bc          ; load back to player
307+  B5B1 C3 B5 B5         jp control_pl_moveleft0
308+  B5B4              control_pl_moveleft1:
309+  B5B4 F1               pop af
310+  B5B5              control_pl_moveleft0:
311+  B5B5 3E 01            ld a,1
312+  B5B7 32 55 B8         ld (player+2),a        ; set direction to left
313+  B5BA C1               pop bc
314+  B5BB C9               ret
315+  B5BC              ;
316+  B5BC              ; Moves the player right
317+  B5BC              ;
318+  B5BC              control_pl_moveright:
319+  B5BC C5               push bc
320+  B5BD ED 4B 53 B8      ld bc,(player)          ; get the current coords, b horiz, c vert
321+  B5C1 78               ld a,b                  ; load b into the acc
322+  B5C2 FE F0            cp 240
323+  B5C4 CA E3 B5         jp z,control_pl_moveright0 ; are we at the edge of the screen
324+  B5C7 CD CA B7         call movement_checkcanmove_right ; check we can move down, e will be 1 if we can
325+  B5CA F5               push af
326+  B5CB 7B               ld a,e                  ; put e in a
327+  B5CC FE 00            cp 0
328+  B5CE CA E2 B5         jp z,control_pl_moveright1 ; don't move if we can't
329+  B5D1 21 58 B8         ld hl,player+5          ; need to store the amount of pixels still left to move in the player status
330+  B5D4 3E 03            ld a,3
331+  B5D6 77               ld (hl),a
332+  B5D7 F1               pop af
333+  B5D8 3C               inc a                   ; add 2
334+  B5D9 3C               inc a
335+  B5DA 47               ld b,a                  ; load back to b
336+  B5DB ED 43 53 B8      ld (player),bc          ; load back to player
337+  B5DF C3 E3 B5         jp control_pl_moveright0
338+  B5E2              control_pl_moveright1:
339+  B5E2 F1               pop af                  ; restore af if needed
340+  B5E3              control_pl_moveright0:
341+  B5E3 3E 02            ld a,2
342+  B5E5 32 55 B8         ld (player+2),a        ; set direction to right
343+  B5E8 C1               pop bc
344+  B5E9 C9               ret
345+  B5EA
346+  B5EA              ;
347+  B5EA              ; Scrolls the screen down
348+  B5EA              ;
349+  B5EA              control_scroll_down:
350+  B5EA F5               push af
351+  B5EB 3E 08            ld a,8
352+  B5ED 32 F6 A6         ld (screen_offset),a
353+  B5F0 F1               pop af
354+  B5F1 21 A5 A5         ld hl,buffer_updateall
355+  B5F4 36 01            ld (hl),1         ; flag as screen needing update
356+  B5F6 C9               ret
357+  B5F7
358+  B5F7              ;
359+  B5F7              ; Scrolls the screen up
360+  B5F7              ;
361+  B5F7              control_scroll_up:
362+  B5F7 F5               push af
363+  B5F8 3E 00            ld a,0
364+  B5FA 32 F6 A6         ld (screen_offset),a
365+  B5FD F1               pop af
366+  B5FE 21 A5 A5         ld hl,buffer_updateall
367+  B601 36 01            ld (hl),1         ; flag as screen needing update
368+  B603 C9               ret
369+  B604
370+  B604
371+  B604
372+  B604
# file closed: game/control.asm
 35   B604                  include "game\movement.asm"
# file opened: game/movement.asm
  1+  B604              ;
  2+  B604              ; Checks the contents of a cell are empty - ie, all pixel rows are zero
  3+  B604              ; Inputs:
  4+  B604              ; hl - memory location of top pixel row
  5+  B604              ; bc - screen coords, b horiz, c vert
  6+  B604              ; Outputs:
  7+  B604              ; e - 0 if not empty, 1 if empty
  8+  B604              ;
  9+  B604              movement_spaceisempty:
 10+  B604 C5               push bc
 11+  B605 E5               push hl
 12+  B606 CD 2E B6         call movement_spaceisgem        ; check if space is a gem
 13+  B609 E1               pop hl
 14+  B60A C1               pop bc
 15+  B60B 7B               ld a,e
 16+  B60C FE 01            cp 1
 17+  B60E C8               ret z                           ; if e is 1, space is a gem so can move here, return
 18+  B60F 3E 08            ld a,8                          ; 8 rows to check
 19+  B611              movement_spaceisempty0:
 20+  B611 08               ex af,af'                       ; store the loop counter
 21+  B612 7E               ld a,(hl)                       ; get current pixel row
 22+  B613 FE 00            cp 0
 23+  B615 C2 29 B6         jp nz, movement_spaceisempty1    ; row is not empty, can't move here
 24+  B618 79               ld a,c                          ; load the vertical coord
 25+  B619 3C               inc a                           ; next row down
 26+  B61A 11 20 00         ld de,32
 27+  B61D 19               add hl,de                       ; otherwise, just go one down for hl, which means add 32, because of course
 28+  B61E 4F               ld c,a                          ; copy vert coord back to c
 29+  B61F 08               ex af,af'                       ; get loop counter back
 30+  B620 3D               dec a                           ; decrease loop counter
 31+  B621 C2 11 B6         jp nz, movement_spaceisempty0
 32+  B624 16 00            ld d,0
 33+  B626 1E 01            ld e,1                          ; got to end, so space is empty
 34+  B628 C9               ret
 35+  B629              movement_spaceisempty1:
 36+  B629 16 00            ld d,0
 37+  B62B 1E 00            ld e,0                          ; returning false, ie space not empty
 38+  B62D C9               ret
 39+  B62E
 40+  B62E              ;
 41+  B62E              ; Check if a space contains a gem
 42+  B62E              ; Inputs:
 43+  B62E              ; bc - screen coords
 44+  B62E              ; Outputs:
 45+  B62E              ; e = 1 if gem
 46+  B62E              movement_spaceisgem:
 47+  B62E CD 34 A8         call screen_getcharcoordsfromscreencoords   ; get the char coords we're checking into bc
 48+  B631 21 90 B1         ld hl,level01diamonds           ; check diamonds first
 49+  B634              movement_spaceisgem0:
 50+  B634 5E 23 56 2B      ld de,(hl)                      ; get gem coords into de
 51+  B638 7B               ld a,e                          ; check for end of data
 52+  B639 FE FF            cp 255
 53+  B63B CA 56 B6         jp z,movement_spaceisgem1       ; if yes, done with diamonds
 54+  B63E 23               inc hl
 55+  B63F 23               inc hl                          ; move to state
 56+  B640 7E               ld a,(hl)
 57+  B641 23               inc hl
 58+  B642 23               inc hl
 59+  B643 23               inc hl                          ; get to next
 60+  B644 FE 01            cp 1                            ; check if collected
 61+  B646 CA 34 B6         jp z,movement_spaceisgem0       ; if yes, move to next diamond
 62+  B649 7B               ld a,e                          ; load e again
 63+  B64A B9               cp c                            ; otherwise, compare c with e
 64+  B64B C2 34 B6         jp nz,movement_spaceisgem0      ; if different, move to next diamond
 65+  B64E 7A               ld a,d                          ; get d coord
 66+  B64F B8               cp b                            ; compare b with d
 67+  B650 C2 34 B6         jp nz,movement_spaceisgem0      ; if different, move to next diamond
 68+  B653 1E 01            ld e,1                          ; otherwise, exit with e = 1
 69+  B655 C9               ret
 70+  B656              movement_spaceisgem1:
 71+  B656 21 A0 B1         ld hl,level01gems              ; check gems
 72+  B659              movement_spaceisgem2:
 73+  B659 5E 23 56 2B      ld de,(hl)                      ; get gem coords into de
 74+  B65D 7B               ld a,e                          ; check for end of data
 75+  B65E FE FF            cp 255
 76+  B660 CA 7B B6         jp z,movement_spaceisgem3       ; if yes, done with gems
 77+  B663 23               inc hl
 78+  B664 23               inc hl                          ; move to state
 79+  B665 7E               ld a,(hl)
 80+  B666 23               inc hl
 81+  B667 23               inc hl
 82+  B668 23               inc hl                          ; get to next
 83+  B669 FE 01            cp 1                            ; check if collected
 84+  B66B CA 59 B6         jp z,movement_spaceisgem2       ; if yes, move to next diamond
 85+  B66E 7B               ld a,e                          ; load e again
 86+  B66F B9               cp c                            ; otherwise, compare c with e
 87+  B670 C2 59 B6         jp nz,movement_spaceisgem2      ; if different, move to next gem
 88+  B673 7A               ld a,d                          ; get d coord
 89+  B674 B8               cp b                            ; compare b with d
 90+  B675 C2 59 B6         jp nz,movement_spaceisgem2      ; if different, move to next gem
 91+  B678 1E 01            ld e,1                          ; otherwise, exit with e = 1
 92+  B67A C9               ret
 93+  B67B              movement_spaceisgem3:
 94+  B67B 1E 00            ld e,0                          ; nothing found, return e = 0
 95+  B67D C9               ret
 96+  B67E
 97+  B67E              ;
 98+  B67E              ; Checks the line of a cell below is empty - ie, first pixel rows is zero
 99+  B67E              ; Inputs:
100+  B67E              ; hl - memory location of top pixel row
101+  B67E              ; bc - screen coords, b horiz, c vert
102+  B67E              ; Outputs:
103+  B67E              ; e - 0 if not empty, 1 if empty
104+  B67E              ;
105+  B67E              movement_linebelowisempty:
106+  B67E C5               push bc
107+  B67F E5               push hl
108+  B680 CD 2E B6         call movement_spaceisgem        ; check if space is a gem
109+  B683 E1               pop hl
110+  B684 C1               pop bc
111+  B685 7B               ld a,e
112+  B686 FE 01            cp 1
113+  B688 C8               ret z                           ; if e is 1, space is a gem so can move here, return
114+  B689 7E               ld a,(hl)                       ; get current pixel row
115+  B68A FE 00            cp 0
116+  B68C C2 94 B6         jp nz, movement_linebelowisempty1    ; row is not empty, can't move here
117+  B68F 16 00            ld d,0
118+  B691 1E 01            ld e,1                          ; got to end, so space is empty
119+  B693 C9               ret
120+  B694              movement_linebelowisempty1:
121+  B694 16 00            ld d,0
122+  B696 1E 00            ld e,0                          ; returning false, ie space not empty
123+  B698 C9               ret
124+  B699
125+  B699              ;
126+  B699              ; Checks the line of a cell above is empty - ie, last pixel rows are zero
127+  B699              ; Inputs:
128+  B699              ; hl - memory location of top pixel row
129+  B699              ; bc - screen coords, b horiz, c vert
130+  B699              ; Outputs:
131+  B699              ; e - 0 if not empty, 1 if empty
132+  B699              ;
133+  B699              movement_lineaboveisempty:
134+  B699 C5               push bc
135+  B69A E5               push hl
136+  B69B CD 2E B6         call movement_spaceisgem        ; check if space is a gem
137+  B69E E1               pop hl
138+  B69F C1               pop bc
139+  B6A0 7B               ld a,e
140+  B6A1 FE 01            cp 1
141+  B6A3 C8               ret z
142+  B6A4 7E               ld a,(hl)                       ; get current pixel row
143+  B6A5 FE 00            cp 0
144+  B6A7 C2 AF B6         jp nz, movement_lineaboveisempty1    ; row is not empty, can't move here
145+  B6AA 16 00            ld d,0
146+  B6AC 1E 01            ld e,1                          ; got to end, so space is empty
147+  B6AE C9               ret
148+  B6AF              movement_lineaboveisempty1:
149+  B6AF 16 00            ld d,0
150+  B6B1 1E 00            ld e,0                          ; returning false, ie space not empty
151+  B6B3 C9               ret
152+  B6B4
153+  B6B4              ;
154+  B6B4              ; Checks the contents of a cell are diggable - ie, all pixel rows are dirt or empty
155+  B6B4              ; Inputs:
156+  B6B4              ; hl - memory location of top pixel row
157+  B6B4              ; bc - screen coords, b horiz, c vert
158+  B6B4              ; Outputs:
159+  B6B4              ; none - puts player into digging mode
160+  B6B4              ;
161+  B6B4              movement_spaceisdiggable:
162+  B6B4 3E 08            ld a,8                          ; 8 rows to check
163+  B6B6              movement_spaceisdiggable0:
164+  B6B6 08               ex af,af'                       ; store the loop counter
165+  B6B7 7E               ld a,(hl)                       ; get current pixel row
166+  B6B8 FE 00            cp 0
167+  B6BA CA CA B6         jp z, movement_spaceisdiggable2  ; row is empty, can dig here
168+  B6BD FE 55            cp 85
169+  B6BF CA CA B6         jp z, movement_spaceisdiggable2  ; row is dirt, can dig here
170+  B6C2 FE AA            cp 170
171+  B6C4 CA CA B6         jp z, movement_spaceisdiggable2  ; row is dirt, can dig here
172+  B6C7 C3 E2 B6         jp movement_spaceisdiggable1     ; otherwise, stop checking
173+  B6CA              movement_spaceisdiggable2:
174+  B6CA 79               ld a,c                          ; load the vertical coord
175+  B6CB 3C               inc a                           ; next row down
176+  B6CC 11 20 00         ld de,32
177+  B6CF 19               add hl,de                       ; otherwise, just go one down for hl, which means add 32, because of course
178+  B6D0 4F               ld c,a                          ; copy vert coord back to c
179+  B6D1 08               ex af,af'                       ; get loop counter back
180+  B6D2 3D               dec a                           ; decrease loop counter
181+  B6D3 C2 B6 B6         jp nz, movement_spaceisdiggable0
182+  B6D6 21 59 B8         ld hl,player+6
183+  B6D9 36 01            ld (hl),1                       ; set the player into digging mode
184+  B6DB 23               inc hl
185+  B6DC 36 05            ld (hl),5                      ; set the number of frame to dig for
186+  B6DE 23               inc hl
187+  B6DF 36 08            ld (hl),8                       ; set the number of pixels to dig
188+  B6E1 C9               ret
189+  B6E2              movement_spaceisdiggable1:
190+  B6E2 21 59 B8         ld hl,player+6
191+  B6E5 36 00            ld (hl),0                       ; set the player out of digging mode
192+  B6E7 C9               ret
193+  B6E8
194+  B6E8              ;
195+  B6E8              ; Checks the contents of a cell below are diggable - ie, at least one pixel row has dirt. If the first one isn't dirt, stop
196+  B6E8              ; Inputs:
197+  B6E8              ; hl - memory location of top pixel row
198+  B6E8              ; bc - screen coords, b horiz, c vert
199+  B6E8              ; Outputs:
200+  B6E8              ; none - puts player into digging mode
201+  B6E8              ;
202+  B6E8              movement_spacebelowisdiggable:
203+  B6E8 7E               ld a,(hl)                       ; get first pixel row
204+  B6E9 FE 55            cp 85
205+  B6EB CA F6 B6         jp z, movement_spacebelowisdiggable3  ; row is dirt, can dig here
206+  B6EE FE AA            cp 170
207+  B6F0 CA F6 B6         jp z, movement_spacebelowisdiggable3  ; row is dirt, can dig here
208+  B6F3 C3 E2 B6         jp movement_spaceisdiggable1    ; the first row is not dirt, so don't bother checking the rest, can't dig
209+  B6F6              movement_spacebelowisdiggable3:
210+  B6F6 3E 08            ld a,8                          ; rows to check
211+  B6F8 1E 00            ld e,0                          ; count of rows to dig
212+  B6FA              movement_spacebelowisdiggable0:
213+  B6FA 08               ex af,af'                       ; store the loop counter
214+  B6FB 7E               ld a,(hl)                       ; get current pixel row
215+  B6FC FE 55            cp 85
216+  B6FE CA 09 B7         jp z, movement_spacebelowisdiggable4  ; row is dirt, can dig here
217+  B701 FE AA            cp 170
218+  B703 CA 09 B7         jp z, movement_spacebelowisdiggable4  ; row is dirt, can dig here
219+  B706 C3 18 B7         jp movement_spacebelowisdiggable5     ; don't count this row and stop counting
220+  B709              movement_spacebelowisdiggable4:
221+  B709 1C               inc e                           ; inc count of rows to dig
222+  B70A              movement_spacebelowisdiggable2:
223+  B70A 79               ld a,c                          ; load the vertical coord
224+  B70B 3C               inc a                           ; next row down
225+  B70C D5               push de                         ; need e for later
226+  B70D 11 20 00         ld de,32
227+  B710 19               add hl,de                       ; otherwise, just go one down for hl, which means add 32, because of course
228+  B711 4F               ld c,a                          ; copy vert coord back to c
229+  B712 D1               pop de                          ; get e back
230+  B713 08               ex af,af'                       ; get loop counter back
231+  B714 3D               dec a                           ; incease loop counter
232+  B715 C2 FA B6         jp nz, movement_spacebelowisdiggable0
233+  B718              movement_spacebelowisdiggable5:
234+  B718 21 59 B8         ld hl,player+6
235+  B71B 36 01            ld (hl),1                       ; set the player into digging mode
236+  B71D 23               inc hl
237+  B71E 36 03            ld (hl),3                      ; set the number of frame to dig for
238+  B720 23               inc hl
239+  B721 73               ld (hl),e                       ; set the number of pixels to dig
240+  B722 C9               ret
241+  B723              movement_spacebelowisdiggable1:
242+  B723 21 59 B8         ld hl,player+6
243+  B726 36 00            ld (hl),0                       ; set the player out of digging mode
244+  B728 C9               ret
245+  B729
246+  B729              ;
247+  B729              ; Checks the contents of a cell above are diggable - ie, at least one pixel row has dirt. If the first one isn't dirt, stop
248+  B729              ; Inputs:
249+  B729              ; hl - memory location of top pixel row
250+  B729              ; bc - screen coords, b horiz, c vert
251+  B729              ; Outputs:
252+  B729              ; none - puts player into digging mode
253+  B729              ;
254+  B729              movement_spaceaboveisdiggable:
255+  B729 7E               ld a,(hl)                       ; get first pixel row
256+  B72A FE 55            cp 85
257+  B72C CA 37 B7         jp z, movement_spaceaboveisdiggable3  ; row is dirt, can dig here
258+  B72F FE AA            cp 170
259+  B731 CA 37 B7         jp z, movement_spaceaboveisdiggable3  ; row is dirt, can dig here
260+  B734 C3 E2 B6         jp movement_spaceisdiggable1    ; the first row is not dirt, so don't bother checking the rest, can't dig
261+  B737              movement_spaceaboveisdiggable3:
262+  B737 3E 08            ld a,8                          ; rows to check
263+  B739 1E 00            ld e,0                          ; count of rows to dig
264+  B73B              movement_spaceaboveisdiggable0:
265+  B73B 08               ex af,af'                       ; store the loop counter
266+  B73C 7E               ld a,(hl)                       ; get current pixel row
267+  B73D FE 55            cp 85
268+  B73F CA 4A B7         jp z, movement_spaceaboveisdiggable4  ; row is dirt, can dig here
269+  B742 FE AA            cp 170
270+  B744 CA 4A B7         jp z, movement_spaceaboveisdiggable4  ; row is dirt, can dig here
271+  B747 C3 5A B7         jp movement_spaceaboveisdiggable5     ; don't count this row and stop counting
272+  B74A              movement_spaceaboveisdiggable4:
273+  B74A 1C               inc e                           ; inc count of rows to dig
274+  B74B              movement_spaceaboveisdiggable2:
275+  B74B 79               ld a,c                          ; load the vertical coord
276+  B74C 3D               dec a                           ; next row up
277+  B74D D5               push de                         ; need e for later
278+  B74E 11 20 00         ld de,32
279+  B751 ED 52            sbc hl,de                       ; otherwise, just go one up for hl, which means sub 32, because of course
280+  B753 4F               ld c,a                          ; copy vert coord back to c
281+  B754 D1               pop de                          ; get e back
282+  B755 08               ex af,af'                       ; get loop counter back
283+  B756 3D               dec a                           ; incease loop counter
284+  B757 C2 3B B7         jp nz, movement_spaceaboveisdiggable0
285+  B75A              movement_spaceaboveisdiggable5:
286+  B75A 21 59 B8         ld hl,player+6
287+  B75D 36 01            ld (hl),1                       ; set the player into digging mode
288+  B75F 23               inc hl
289+  B760 36 05            ld (hl),5                       ; set the number of frame to dig for
290+  B762 23               inc hl
291+  B763 73               ld (hl),e                       ; set the number of pixels to dig
292+  B764 C9               ret
293+  B765              movement_spaceaboveisdiggable1:
294+  B765 21 59 B8         ld hl,player+6
295+  B768 36 00            ld (hl),0                       ; set the player out of digging mode
296+  B76A C9               ret
297+  B76B
298+  B76B              ;
299+  B76B              ; Checks if the player can move down
300+  B76B              ; Inputs:
301+  B76B              ; bc - player coords, b horiz, c vert
302+  B76B              ; Outputs:
303+  B76B              ; de - 1 can move
304+  B76B              movement_checkcanmove_down:
305+  B76B F5               push af
306+  B76C C5               push bc
307+  B76D CD 12 A9         call sprites_scadd              ; get the memory location of cell into de
308+  B770 62 6B            ld hl,de                        ; look at cell directly underneath (add 256)
309+  B772 24               inc h                       ; memory location of cell beneath now in hl
310+  B773 3E 08            ld a,8                       ; look below
311+  B775 81               add c
312+  B776 4F               ld c,a
313+  B777 CD 7E B6         call movement_linebelowisempty       ; check space is empty
314+  B77A 7B               ld a,e                          ; check space empty flag
315+  B77B FE 00            cp 0
316+  B77D CA 86 B7         jp z, movement_checkcanmove_down1 ; can't move
317+  B780 CD 90 B9         call player_justmoved
318+  B783 C1               pop bc
319+  B784 F1               pop af
320+  B785 C9               ret
321+  B786              movement_checkcanmove_down1:
322+  B786 C1               pop bc
323+  B787 CD 12 A9         call sprites_scadd              ; get the memory location of cell into de
324+  B78A 62 6B            ld hl,de                        ; look at cell directly underneath (add 256)
325+  B78C 24               inc h
326+  B78D C5               push bc
327+  B78E CD E8 B6         call movement_spacebelowisdiggable    ; can't move here, but can we dig
328+  B791 11 00 00         ld de,0
329+  B794 C1               pop bc
330+  B795 F1               pop af
331+  B796 C9               ret
332+  B797
333+  B797              ;
334+  B797              ; Checks if the player can move up
335+  B797              ; Inputs:
336+  B797              ; bc - player coords, b horiz, c vert
337+  B797              ; Outputs:
338+  B797              ; de - 1 can move
339+  B797              movement_checkcanmove_up:
340+  B797 F5               push af
341+  B798 C5               push bc
342+  B799 CD 12 A9         call sprites_scadd              ; get the memory location of cell into de
343+  B79C 62 6B            ld hl,de                        ; look at cell directly above (subtract 32)
344+  B79E 11 20 00         ld de,32
345+  B7A1 ED 52            sbc hl,de                       ; memory location of line above now in hl
346+  B7A3 0D               dec c                           ; look above
347+  B7A4 CD 99 B6         call movement_lineaboveisempty       ; check space is empty
348+  B7A7 7B               ld a,e                          ; check space empty flag
349+  B7A8 FE 00            cp 0
350+  B7AA CA B5 B7         jp z, movement_checkcanmove_up1 ; can't move
351+  B7AD 1E 01            ld e,1
352+  B7AF CD 90 B9         call player_justmoved
353+  B7B2 C1               pop bc
354+  B7B3 F1               pop af
355+  B7B4 C9               ret
356+  B7B5              movement_checkcanmove_up1:
357+  B7B5 C1               pop bc
358+  B7B6 CD 12 A9         call sprites_scadd              ; get the memory location of cell into de
359+  B7B9 62 6B            ld hl,de                        ; look at cell directly above (subtract 32)
360+  B7BB 11 20 00         ld de,32
361+  B7BE ED 52            sbc hl,de                       ; memory location of line above now in hl
362+  B7C0 C5               push bc
363+  B7C1 CD 29 B7         call movement_spaceaboveisdiggable    ; can't move here, but can we dig
364+  B7C4 11 00 00         ld de,0
365+  B7C7 C1               pop bc
366+  B7C8 F1               pop af
367+  B7C9 C9               ret
368+  B7CA
369+  B7CA              ;
370+  B7CA              ; Checks if the player can move right
371+  B7CA              ; Inputs:
372+  B7CA              ; bc - player coords, b horiz, c vert
373+  B7CA              ; Outputs:
374+  B7CA              ; de - 1 can move
375+  B7CA              movement_checkcanmove_right:
376+  B7CA F5               push af
377+  B7CB C5               push bc
378+  B7CC CD 12 A9         call sprites_scadd              ; get the memory location of cell into de
379+  B7CF 62 6B            ld hl,de                        ; look at cell directly to the right (add 1)
380+  B7D1 3E 08            ld a,8
381+  B7D3 80               add b                           ; move one cell right
382+  B7D4 47               ld b,a
383+  B7D5 23               inc hl                          ; memory location of cell to the right now in hl
384+  B7D6 CD 04 B6         call movement_spaceisempty       ; check space is empty
385+  B7D9 7B               ld a,e                          ; check space empty flag
386+  B7DA FE 00            cp 0
387+  B7DC CA E5 B7         jp z, movement_checkcanmove_right1 ; can't move
388+  B7DF CD 90 B9         call player_justmoved
389+  B7E2 C1               pop bc
390+  B7E3 F1               pop af
391+  B7E4 C9               ret
392+  B7E5              movement_checkcanmove_right1:
393+  B7E5 C1               pop bc
394+  B7E6 CD 12 A9         call sprites_scadd              ; get the memory location of cell into de
395+  B7E9 62 6B            ld hl,de
396+  B7EB 23               inc hl                          ; memory location of cell to the right now in hl
397+  B7EC C5               push bc
398+  B7ED CD B4 B6         call movement_spaceisdiggable    ; can't move here, but can we dig
399+  B7F0 11 00 00         ld de,0
400+  B7F3 C1               pop bc
401+  B7F4 F1               pop af
402+  B7F5 C9               ret
403+  B7F6
404+  B7F6              ;
405+  B7F6              ; Checks if the player can move left
406+  B7F6              ; Inputs:
407+  B7F6              ; bc - player coords, b horiz, c vert
408+  B7F6              ; Outputs:
409+  B7F6              ; de - 1 can move
410+  B7F6              movement_checkcanmove_left:
411+  B7F6 F5               push af
412+  B7F7 C5               push bc
413+  B7F8 CD 12 A9         call sprites_scadd              ; get the memory location of cell into de
414+  B7FB 62 6B            ld hl,de                        ; look at cell directly to the right (add 1)
415+  B7FD 78               ld a,b
416+  B7FE 06 08            ld b,8
417+  B800 90               sub b                           ; move one cell left
418+  B801 47               ld b,a
419+  B802 2B               dec hl                          ; memory location of cell to the right now in hl
420+  B803 CD 04 B6         call movement_spaceisempty       ; check space is empty
421+  B806 7B               ld a,e                          ; check space empty flag
422+  B807 FE 00            cp 0
423+  B809 CA 12 B8         jp z, movement_checkcanmove_left1 ; can't move
424+  B80C CD 90 B9         call player_justmoved
425+  B80F C1               pop bc
426+  B810 F1               pop af
427+  B811 C9               ret
428+  B812              movement_checkcanmove_left1:
429+  B812 C1               pop bc
430+  B813 CD 12 A9         call sprites_scadd              ; get the memory location of cell into de
431+  B816 62 6B            ld hl,de
432+  B818 2B               dec hl                          ; memory location of cell to the right now in hl
433+  B819 C5               push bc
434+  B81A CD B4 B6         call movement_spaceisdiggable    ; can't move here, but can we dig
435+  B81D 11 00 00         ld de,0
436+  B820 C1               pop bc
437+  B821 F1               pop af
438+  B822 C9               ret
# file closed: game/movement.asm
 36   B823                  include "game\game.asm"
# file opened: game/game.asm
  1+  B823              ;
  2+  B823              ; The current frame count, incremented each frame
  3+  B823              ;
  4+  B823              game_framenumber:
  5+  B823 00               defb    0
  6+  B824
  7+  B824              ;
  8+  B824              ; The number of players
  9+  B824              ;
 10+  B824              game_numberplayers:
 11+  B824 01               defb 1
 12+  B825
 13+  B825              ;
 14+  B825              ; The current player
 15+  B825              ;
 16+  B825              game_currentplayer:
 17+  B825 01               defb 1
 18+  B826
 19+  B826              ;
 20+  B826              ; The default number of lives
 21+  B826              ;
 22+  B826              game_numberlives:
 23+  B826 04               defb 4
 24+  B827
 25+  B827              ;
 26+  B827              ; Moves to the next player
 27+  B827              ;
 28+  B827              game_changeplayer:
 29+  B827 3A 25 B8         ld a,(game_currentplayer)
 30+  B82A FE 01            cp 1
 31+  B82C C8               ret z                       ; if just one player, no need to change
 32+  B82D 3D               dec a                       ; otherwise decrease by one
 33+  B82E EE 01            xor 1                       ; xor with one to flip
 34+  B830 3C               inc a                       ; increment
 35+  B831 21 25 B8         ld hl,game_currentplayer
 36+  B834 77               ld (hl),a                   ; store
 37+  B835 C9               ret
 38+  B836
 39+  B836              ;
 40+  B836              ; Sets the number of players at the start of the game
 41+  B836              ; Inputs:
 42+  B836              ; a - number of players
 43+  B836              game_setnumberofplayers:
 44+  B836 21 24 B8         ld hl,game_numberplayers
 45+  B839 77               ld (hl),a
 46+  B83A
 47+  B83A              ;
 48+  B83A              ; Increment frame number by 1
 49+  B83A              ;
 50+  B83A              game_incrementframe:
 51+  B83A 3A 23 B8         ld a,(game_framenumber)
 52+  B83D FE FF            cp 255
 53+  B83F C2 44 B8         jp nz,game_incrementframe0
 54+  B842 3E 00            ld a,0
 55+  B844              game_incrementframe0:
 56+  B844 3C               inc a
 57+  B845 32 23 B8         ld (game_framenumber),a
 58+  B848 C9               ret
 59+  B849
 60+  B849              ;
 61+  B849              ; Returns current frame
 62+  B849              ; Outputs:
 63+  B849              ; a - current frame
 64+  B849              ;
 65+  B849              game_getcurrentframe:
 66+  B849 3A 23 B8         ld a,(game_framenumber)
 67+  B84C C9               ret
 68+  B84D
 69+  B84D              ;
 70+  B84D              ; Resets current frame
 71+  B84D              ;
 72+  B84D              game_resetcurrentframe:
 73+  B84D 21 23 B8         ld hl,game_framenumber
 74+  B850 36 00            ld (hl),0
 75+  B852 C9               ret
# file closed: game/game.asm
 37   B853                  include "game\player.asm"
# file opened: game/player.asm
  1+  B853              ;
  2+  B853              ;   Data for current player
  3+  B853              ;
  4+  B853              player:
  5+  B853 00 00            defb    0,0                 ; horiz,vert (+0,+1)
  6+  B855 02 00 01         defb    2,0,1               ; dir (0 up, 1 left, 2 right, 3 down), frame, frame transition count (+2,+3,+4)
  7+  B858 00               defb    0                   ; auto move remaining (+5)
  8+  B859 00 00 00         defb    0,0,0               ; is digging (0 no), digging count, pixels to di (+6,+7,+8)
  9+  B85C 00               defb    0                   ; lives remaining (+9)
 10+  B85D 00               defb    0                   ; died this life (+10)
 11+  B85E 00 00            defb    0,0                 ; crushed (+11), frames (+12)
 12+  B860 00               defb    0                   ; can finish level, whether can finish level or not (+13)
 13+  B861
 14+  B861              ;
 15+  B861              ; Initializes a player at start of game
 16+  B861              ; Copy initial coords, copy lives, copy score
 17+  B861              ;
 18+  B861              player_init_gamestart:
 19+  B861 3A 26 B8         ld a,(game_numberlives)
 20+  B864 32 E5 B8         ld (player1_lives),a
 21+  B867 32 E6 B8         ld (player2_lives),a                        ; set the initial number of lives at game start
 22+  B86A
 23+  B86A 21 E9 B8         ld hl,player1_score+2
 24+  B86D 06 06            ld b,6
 25+  B86F              player_init_gamestart0:
 26+  B86F 36 30            ld (hl),48
 27+  B871 23               inc hl
 28+  B872 10 FB            djnz player_init_gamestart0                 ; zero out player 1 score
 29+  B874 21 F2 B8         ld hl,player2_score+2
 30+  B877 06 06            ld b,6
 31+  B879              player_init_gamestart1:
 32+  B879 36 30            ld (hl),48
 33+  B87B 23               inc hl
 34+  B87C 10 FB            djnz player_init_gamestart1                 ; zero out player 2 score
 35+  B87E C9               ret
 36+  B87F
 37+  B87F              ;
 38+  B87F              ; Initializes a player at start of a life
 39+  B87F              ; Copy initial coords, copy lives, copy score
 40+  B87F              ;
 41+  B87F              player_init_lifestart:
 42+  B87F 21 58 B8         ld hl,player+5
 43+  B882 06 09            ld b,9                      ; initialise 9 properties
 44+  B884              player_init_lifestart2:
 45+  B884 36 00            ld (hl),0
 46+  B886 23               inc hl
 47+  B887 10 FB            djnz player_init_lifestart2
 48+  B889
 49+  B889 ED 4B 22 80      ld bc,(init_coord)
 50+  B88D ED 43 53 B8      ld (player),bc
 51+  B891 01 5C B8         ld bc,player+9
 52+  B894 3A E5 B8         ld a,(player1_lives)
 53+  B897 02               ld (bc),a
 54+  B898
 55+  B898 CD 43 C0         call diamonds_init      ; initialise gems
 56+  B89B
 57+  B89B 01 06 00         ld bc,6
 58+  B89E 11 89 BE         ld de,scores_current+2
 59+  B8A1 3A 25 B8         ld a,(game_currentplayer)
 60+  B8A4 FE 01            cp 1
 61+  B8A6 C2 AF B8         jp nz,player_init_lifestart0
 62+  B8A9 21 E9 B8         ld hl,player1_score+2
 63+  B8AC C3 B2 B8         jp player_init_lifestart1
 64+  B8AF              player_init_lifestart0:
 65+  B8AF 21 F2 B8         ld hl,player2_score+2
 66+  B8B2              player_init_lifestart1:
 67+  B8B2 ED B0            ldir
 68+  B8B4 C9               ret
 69+  B8B5
 70+  B8B5              ;
 71+  B8B5              ; Finalises a player at end of a life
 72+  B8B5              ; Copy lives, copy score
 73+  B8B5              ;
 74+  B8B5              player_lifeend:
 75+  B8B5 01 5C B8         ld bc,player+9
 76+  B8B8 0A               ld a,(bc)
 77+  B8B9 01 E5 B8         ld bc,player1_lives
 78+  B8BC 02               ld (bc),a
 79+  B8BD CD C1 B8         call player_recordcurrentscore
 80+  B8C0 C9               ret
 81+  B8C1
 82+  B8C1              ;
 83+  B8C1              ; Copies the current score in the current
 84+  B8C1              ;
 85+  B8C1              player_recordcurrentscore:
 86+  B8C1 01 06 00         ld bc,6                  ; copy current score back to correct player
 87+  B8C4 21 89 BE         ld hl,scores_current+2
 88+  B8C7 3A 25 B8         ld a,(game_currentplayer)
 89+  B8CA FE 01            cp 1
 90+  B8CC C2 D5 B8         jp nz,player_lifeend0
 91+  B8CF 11 E9 B8         ld de,player1_score+2
 92+  B8D2 C3 D8 B8         jp player_lifeend1
 93+  B8D5              player_lifeend0:
 94+  B8D5 11 F2 B8         ld de,player2_score+2
 95+  B8D8              player_lifeend1:
 96+  B8D8 ED B0            ldir
 97+  B8DA C9               ret
 98+  B8DB
 99+  B8DB              ;
100+  B8DB              ; Player just died, subtract a life
101+  B8DB              ;
102+  B8DB              player_died:
103+  B8DB 01 5C B8         ld bc,player+9
104+  B8DE 0A               ld a,(bc)
105+  B8DF 3D               dec a
106+  B8E0 02               ld (bc),a
107+  B8E1 CD B5 B8         call player_lifeend
108+  B8E4 C9               ret
109+  B8E5
110+  B8E5              ;
111+  B8E5              ; Player lives
112+  B8E5              ;
113+  B8E5              player1_lives:
114+  B8E5 03               defb 3
115+  B8E6              player2_lives:
116+  B8E6 03               defb 3
117+  B8E7
118+  B8E7              ;
119+  B8E7              ; Player scores
120+  B8E7              ;
121+  B8E7              player1_score:
122+  B8E7 04 01 30 30      defb 4,1,'000000',255
122+  B8EB 30 30 30 30
122+  B8EF FF
123+  B8F0              player2_score:
124+  B8F0 16 01 30 30      defb 22,1,'000000',255
124+  B8F4 30 30 30 30
124+  B8F8 FF
125+  B8F9
126+  B8F9              ;
127+  B8F9              ; Kills a player this life
128+  B8F9              ;
129+  B8F9              player_killplayer:
130+  B8F9 21 5D B8         ld hl,player+10
131+  B8FC 36 01            ld (hl),1
132+  B8FE C9               ret
133+  B8FF
134+  B8FF              ;
135+  B8FF              ; Crush a player this life
136+  B8FF              ;
137+  B8FF              player_crushplayer:
138+  B8FF 21 5E B8         ld hl,player+11             ; mark as crushed
139+  B902 36 01            ld (hl),1
140+  B904 C9               ret
141+  B905
142+  B905              player_tankkillplayer
143+  B905 21 5E B8         ld hl,player+11             ; mark as tanked
144+  B908 36 02            ld (hl),2
145+  B90A C9               ret
146+  B90B              ;
147+  B90B              ; Draws the player at the current position or deletes them
148+  B90B              ;
149+  B90B              player_drawplayer:
150+  B90B 3A 55 B8         ld a,(player+2)             ; get the current direction
151+  B90E FE 03            cp 3
152+  B910 C2 15 B9         jp nz,player_drawplayer0
153+  B913 3E 00            ld a,0                      ; if 3, then down, so set the direction to 0 since the sprite is the same as up
154+  B915              player_drawplayer0:
155+  B915 5F               ld e,a                      ; store in e
156+  B916 3A 5E B8         ld a,(player+11)             ; get the dying flag
157+  B919 FE 01            cp 1
158+  B91B CA 2D B9         jp z,player_drawplayer3     ; if it's one, we're being crushed
159+  B91E              player_drawplayer4:
160+  B91E 3A 59 B8         ld a,(player+6)             ; get the dig flag
161+  B921 FE 01            cp 1
162+  B923 CA 76 B9         jp z,player_drawplayer1    ; get dig frame
163+  B926 3A 56 B8         ld a,(player+3)             ; this is normal movement so get the current frame
164+  B929 83               add a,e
165+  B92A C3 7B B9         jp player_drawplayer2
166+  B92D              player_drawplayer3:
167+  B92D 21 5F B8         ld hl,player+12
168+  B930 7E               ld a,(hl)                  ; crushing, so get the current anim flag
169+  B931 FE 00            cp 0
170+  B933 C2 3C B9         jp nz,player_drawplayer5    ; if this isn't zero, then this isn't the first time round, so do the crush anim
171+  B936 3E 64            ld a,100
172+  B938 77               ld (hl),a                   ; otherwise, load up the anim frames
173+  B939 C3 1E B9         jp player_drawplayer4       ; and return to the main loop to remove the current frame
174+  B93C              player_drawplayer5:
175+  B93C 3D               dec a
176+  B93D 77               ld (hl),a
177+  B93E FE 00            cp 0
178+  B940 CC F9 B8         call z,player_killplayer    ; final animation, so kill the player
179+  B943 FE 14            cp 20                        ; check if we should move the rock
180+  B945 C2 59 B9         jp nz,player_drawplayer8
181+  B948 D9               exx
182+  B949 08               ex af,af'
183+  B94A ED 4B 2A BD      ld bc,(rocks_killerrock)    ; get the coords of the rock that killed us
184+  B94E 21 5D B2         ld hl,sprites+72
185+  B951 CD CF A8         call sprites_drawsprite     ; draw a rock over current
186+  B954 08               ex af,af'
187+  B955 D9               exx
188+  B956 C3 6F B9         jp player_drawplayer6       ; continue drawing player
189+  B959              player_drawplayer8:
190+  B959 FE 14            cp 20
191+  B95B D2 6F B9         jp nc,player_drawplayer6    ; if not in last 10 frames, draw as normal
192+  B95E ED 4B 53 B8      ld bc,(player)
193+  B962 CD 21 A8         call screen_getattraddressfromscreencoords ; get the attr address into de
194+  B965 62 6B            ld hl,de
195+  B967 36 42            ld (hl),66
196+  B969 21 5D B2         ld hl,sprites+72            ; otherwise, player is rock
197+  B96C C3 85 B9         jp player_drawplayer7
198+  B96F              player_drawplayer6:
199+  B96F E6 01            and 1                       ; check for odd
200+  B971 C6 0A            add 10                      ; add 10, to get either 10 or 11
201+  B973 C3 7B B9         jp player_drawplayer2
202+  B976              player_drawplayer1:
203+  B976 3A 55 B8         ld a,(player+2)             ; digging, get the current direction again, because want all four
204+  B979 C6 06            add a,6                     ; add direction to 6 to get frame
205+  B97B              player_drawplayer2:
206+  B97B 07               rlca
207+  B97C 07               rlca
208+  B97D 07               rlca                        ; multiply by eight
209+  B97E 6F               ld l,a
210+  B97F 26 00            ld h,0
211+  B981 11 C8 B2         ld de,player_sprite
212+  B984 19               add hl,de                   ; load hl with the location of the player sprite data
213+  B985              player_drawplayer7:
214+  B985 ED 4B 53 B8      ld bc,(player)              ; load bc with the start coords
215+  B989 CD CF A8         call sprites_drawsprite     ; call the routine to draw the sprite
216+  B98C CD BC B9         call player_storeupdatedlines ; log updated rows
217+  B98F C9               ret
218+  B990
219+  B990
220+  B990              ;
221+  B990              ; Runs after the player just moved. Changes animation frame if required
222+  B990              ;
223+  B990              player_justmoved:
224+  B990 D9               exx
225+  B991 3A 57 B8         ld a,(player+4)             ; get the transition count
226+  B994 FE 00            cp 0
227+  B996 CA 9C B9         jp z, player_justmoved2     ; if zero reset and change the frame
228+  B999 C3 B6 B9         jp player_justmoved1       ; otherwise decrease and continue
229+  B99C              player_justmoved2:
230+  B99C                  ; reset and change frame in here
231+  B99C 3E 01            ld a,1
232+  B99E 32 57 B8         ld (player+4),a            ; reset back to whatever
233+  B9A1 3A 56 B8         ld a,(player+3)             ; load the frame
234+  B9A4 FE 03            cp 3                       ; flip between 3 and 0
235+  B9A6 C2 AE B9         jp nz, player_justmoved4
236+  B9A9 3E 00            ld a,0
237+  B9AB C3 B0 B9         jp player_justmoved5
238+  B9AE              player_justmoved4:
239+  B9AE 3E 03            ld a,3
240+  B9B0              player_justmoved5:
241+  B9B0 32 56 B8         ld (player+3),a           ; save back
242+  B9B3 C3 BA B9         jp player_justmoved3
243+  B9B6              player_justmoved1:
244+  B9B6                  ; decrease count
245+  B9B6 3D               dec a
246+  B9B7 32 57 B8         ld (player+4),a
247+  B9BA              player_justmoved3:
248+  B9BA D9               exx;
249+  B9BB C9               ret
250+  B9BC
251+  B9BC              ;
252+  B9BC              ; Stores the updated rows associated with the player
253+  B9BC              ;
254+  B9BC              player_storeupdatedlines:
255+  B9BC ED 4B 53 B8      ld bc,(player)          ; get the screen coords into bc
256+  B9C0 79               ld a,c                  ; get the player block coords of current block
257+  B9C1 E6 F8            and 248                 ; find closest multiple of eight
258+  B9C3 0F               rrca
259+  B9C4 0F               rrca
260+  B9C5 0F               rrca                    ; divide by 8
261+  B9C6 ED 5B F6 A6      ld de,(screen_offset)          ; load the screen offset, this is in rows
262+  B9CA 93               sub e
263+  B9CB F5               push af
264+  B9CC CD A6 A5         call buffer_marklineforupdate  ; store current row in updated lines
265+  B9CF F1               pop af
266+  B9D0 3D               dec a
267+  B9D1 F5               push af
268+  B9D2 CD A6 A5         call buffer_marklineforupdate  ; store line above
269+  B9D5 F1               pop af
270+  B9D6 3C               inc a
271+  B9D7 3C               inc a
272+  B9D8 CD A6 A5         call buffer_marklineforupdate  ; store line beneath
273+  B9DB C9               ret
274+  B9DC
275+  B9DC              ;
276+  B9DC              ; Called if the player has collected a diamond. Checks the current coord. If it is the start coord, then return complete
277+  B9DC              ; Outputs:
278+  B9DC              ; a - 1 for completed level
279+  B9DC              player_checkforexit:
280+  B9DC ED 4B 53 B8      ld bc,(player)                 ; get player coords
281+  B9E0 ED 5B 22 80      ld de,(init_coord)             ; get start coords
282+  B9E4 78               ld a,b
283+  B9E5 BA               cp d                         ; compare horiz
284+  B9E6 C2 F1 B9         jp nz,player_checkforexit1
285+  B9E9 79               ld a,c
286+  B9EA BB               cp e                        ; compare vert
287+  B9EB C2 F1 B9         jp nz,player_checkforexit1
288+  B9EE              player_checkforexit0:
289+  B9EE 3E 01            ld a,1                       ; hasn't completed
290+  B9F0 C9               ret
291+  B9F1              player_checkforexit1:
292+  B9F1 3E 00            ld a,0                       ; has completed
293+  B9F3 C9               ret
# file closed: game/player.asm
 38   B9F4                  include "game\ship.asm"
# file opened: game/ship.asm
  1+  B9F4              ;
  2+  B9F4              ; Ship initial position: vert,horiz
  3+  B9F4              ;
  4+  B9F4              ship_initpos:
  5+  B9F4 00 24            defb 0,36
  6+  B9F6              ship_initpos2:
  7+  B9F6 00 00            defb 0,0
  8+  B9F8              ship_frame:
  9+  B9F8 00               defb 0
 10+  B9F9              ;
 11+  B9F9              ; The current memory location
 12+  B9F9              ;
 13+  B9F9              ship_current_sprite:
 14+  B9F9 00 00            defb 0,0
 15+  B9FB
 16+  B9FB              ship_current_coords:
 17+  B9FB 00 00            defb 0,0
 18+  B9FD
 19+  B9FD              ship_process:
 20+  B9FD 3A 5E B8         ld a,(player+11)
 21+  BA00 FE 02            cp 2                        ; has the player been killed by tank?
 22+  BA02 C0               ret nz                      ; do nothing if not
 23+  BA03 CD F7 B5         call control_scroll_up           ; make sure the screen is on the top screen
 24+  BA06 CD 75 BA         call ship_takeoff           ; bye bye
 25+  BA09 CD F9 B8         call player_killplayer      ; killed
 26+  BA0C 06 32            ld b,50
 27+  BA0E CD 82 80         call utilities_pauseforframes
 28+  BA11 C9               ret
 29+  BA12
 30+  BA12              ;
 31+  BA12              ;   Draw and land the ship - first move the ship down, then across, drawing the player in the middle
 32+  BA12              ;
 33+  BA12              ship_land:
 34+  BA12 ED 4B F4 B9      ld bc,(ship_initpos)
 35+  BA16 ED 43 F6 B9      ld (ship_initpos2),bc        ; save the initial position for later use
 36+  BA1A 1E 00            ld e,0                      ; store a flag to track first time round
 37+  BA1C 06 09            ld b,9                      ; move down 8 pixels
 38+  BA1E              ship_land0:
 39+  BA1E C5               push bc
 40+  BA1F 7B               ld a,e
 41+  BA20 D5               push de                     ; store de for next time round
 42+  BA21 FE 01            cp 1                        ; check first time flag
 43+  BA23 C2 38 BA         jp nz,ship_land1             ; don't draw over previous one if first time
 44+  BA26 CD CC BA         call ship_draw_full         ; delete old one
 45+  BA29 CD A1 BA         call ship_change_frame      ; increment the frame
 46+  BA2C ED 4B F6 B9      ld bc,(ship_initpos2)       ; get the current coords
 47+  BA30 81 C6 01         add c,1                     ; move down one pixels
 48+  BA33 4F               ld c,a
 49+  BA34 ED 43 F6 B9      ld (ship_initpos2),bc
 50+  BA38              ship_land1:
 51+  BA38 CD CC BA         call ship_draw_full         ; draw the ship
 52+  BA3B CD B6 BA         call ship_draw_screen
 53+  BA3E D1               pop de
 54+  BA3F 1E 01            ld e,1
 55+  BA41 C1               pop bc
 56+  BA42 10 DA            djnz ship_land0             ; repeat for downward movement
 57+  BA44                  ; done moving down
 58+  BA44                  ; now move across
 59+  BA44 CD 0B B9         call player_drawplayer      ; draw player
 60+  BA47 CD CC BA         call ship_draw_full         ; delete old one
 61+  BA4A 1E 00            ld e,0                      ; store a flag to track first time round
 62+  BA4C 06 14            ld b,20                      ; move back 20 pixels pixels
 63+  BA4E              ship_land3:
 64+  BA4E C5               push bc
 65+  BA4F 7B               ld a,e
 66+  BA50 D5               push de                     ; store de for next time round
 67+  BA51 FE 01            cp 1                        ; check first time flag
 68+  BA53 C2 68 BA         jp nz,ship_land2             ; don't draw over previous one if first time
 69+  BA56 CD CC BA         call ship_draw_full         ; delete old one
 70+  BA59 CD A1 BA         call ship_change_frame      ; increment the frame
 71+  BA5C ED 4B F6 B9      ld bc,(ship_initpos2)       ; get the current coords
 72+  BA60 78               ld a,b
 73+  BA61 D6 01            sub 1                       ; move back one pixels
 74+  BA63 47               ld b,a
 75+  BA64 ED 43 F6 B9      ld (ship_initpos2),bc
 76+  BA68              ship_land2:
 77+  BA68 CD CC BA         call ship_draw_full         ; draw the ship
 78+  BA6B CD B6 BA         call ship_draw_screen       ; draw the frame to screen by clearing the buffer
 79+  BA6E D1               pop de
 80+  BA6F 1E 01            ld e,1                      ; set e to 1 to indicate >1 time
 81+  BA71 C1               pop bc
 82+  BA72 10 DA            djnz ship_land3             ; repeat for vertical movement
 83+  BA74 C9               ret
 84+  BA75
 85+  BA75              ;
 86+  BA75              ;   Take off the ship
 87+  BA75              ;
 88+  BA75              ship_takeoff:
 89+  BA75 1E 01            ld e,1                      ; store a flag to track first time round
 90+  BA77 06 08            ld b,8                      ; move up 8 pixels
 91+  BA79              ship_takeoff0:
 92+  BA79 C5               push bc
 93+  BA7A 7B               ld a,e
 94+  BA7B D5               push de                     ; store de for next time round
 95+  BA7C FE 01            cp 1                        ; check first time flag
 96+  BA7E C2 94 BA         jp nz,ship_takeoff1             ; don't draw over previous one if first time
 97+  BA81 ED 4B F6 B9      ld bc,(ship_initpos2)       ; get the current coords
 98+  BA85 CD CC BA         call ship_draw_full         ; delete old one
 99+  BA88 CD A1 BA         call ship_change_frame      ; increment the frame
100+  BA8B ED 4B F6 B9      ld bc,(ship_initpos2)       ; get the current coords
101+  BA8F 0D               dec c                       ; move up one pixels
102+  BA90 ED 43 F6 B9      ld (ship_initpos2),bc
103+  BA94              ship_takeoff1:
104+  BA94 CD CC BA         call ship_draw_full         ; draw the ship
105+  BA97 CD B6 BA         call ship_draw_screen
106+  BA9A D1               pop de
107+  BA9B 1E 01            ld e,1
108+  BA9D C1               pop bc
109+  BA9E 10 D9            djnz ship_takeoff0             ; repeat for upward movement
110+  BAA0                  ; done moving up
111+  BAA0 C9               ret
112+  BAA1
113+  BAA1              ;
114+  BAA1              ; Swap the animation frame between 0 and 32. This will be added to the memory location later
115+  BAA1              ;
116+  BAA1              ship_change_frame:
117+  BAA1 F5               push af
118+  BAA2 3A F8 B9         ld a,(ship_frame)
119+  BAA5 FE 00            cp 0
120+  BAA7 CA AF BA         jp z,ship_change_frame0
121+  BAAA 3E 00            ld a,0                      ; flip to 0
122+  BAAC C3 B1 BA         jp ship_change_frame1
123+  BAAF              ship_change_frame0:
124+  BAAF 3E 20            ld a,32                      ; flip to 32
125+  BAB1              ship_change_frame1:
126+  BAB1 32 F8 B9         ld (ship_frame),a            ; save the frame
127+  BAB4 F1               pop af
128+  BAB5 C9               ret
129+  BAB6
130+  BAB6              ship_draw_screen:
131+  BAB6 3E 00            ld a,0
132+  BAB8 CD A6 A5         call buffer_marklineforupdate
133+  BABB 3E 01            ld a,1
134+  BABD CD A6 A5         call buffer_marklineforupdate
135+  BAC0 3E 02            ld a,2
136+  BAC2 CD A6 A5         call buffer_marklineforupdate   ; mark the first three rows for update
137+  BAC5 76               halt
138+  BAC6 F3               di
139+  BAC7 CD 3D A6         call buffer_buffertoscreen  ; copy buffer to screen
140+  BACA FB               ei                          ; enable interupts
141+  BACB C9               ret
142+  BACC
143+  BACC              ship_draw_full:
144+  BACC 21 28 B3         ld hl,ship_sprite
145+  BACF ED 4B F6 B9      ld bc,(ship_initpos2)         ; load bc with the start coords
146+  BAD3 22 F9 B9         ld (ship_current_sprite),hl  ; put into memory
147+  BAD6 ED 43 FB B9      ld (ship_current_coords),bc  ; put into memory
148+  BADA CD F9 BA         call ship_draw
149+  BADD 08               ex af,af'
150+  BADE 3A F8 B9         ld a,(ship_frame)            ; get the animation frame
151+  BAE1 16 00            ld d,0
152+  BAE3 5F               ld e,a
153+  BAE4 19               add hl,de
154+  BAE5 22 F9 B9         ld (ship_current_sprite),hl  ; put into memory
155+  BAE8 08               ex af,af'
156+  BAE9 ED 4B F6 B9      ld bc,(ship_initpos2)         ; load bc with the start coords
157+  BAED 81 C6 08         add c,8                      ; move one line down
158+  BAF0 4F               ld c,a
159+  BAF1 ED 43 FB B9      ld (ship_current_coords),bc  ; put into memory
160+  BAF5 CD F9 BA         call ship_draw
161+  BAF8 C9               ret
162+  BAF9
163+  BAF9              ;
164+  BAF9              ; Draw the ship
165+  BAF9              ; Inputs:
166+  BAF9              ; None, all in memory
167+  BAF9              ;
168+  BAF9              ship_draw:
169+  BAF9 3E 04            ld a,4                              ; 4 pieces per half
170+  BAFB              ship_draw0:
171+  BAFB F5               push af
172+  BAFC 2A F9 B9         ld hl,(ship_current_sprite)
173+  BAFF ED 4B FB B9      ld bc,(ship_current_coords)         ; load bc with the start coords
174+  BB03 CD CF A8         call sprites_drawsprite
175+  BB06 2A F9 B9         ld hl,(ship_current_sprite)
176+  BB09 ED 4B FB B9      ld bc,(ship_current_coords)         ; load bc with the start coords
177+  BB0D 11 08 00         ld de,8
178+  BB10 19               add hl,de
179+  BB11 80 C6 08         add b,8
180+  BB14 47               ld b,a
181+  BB15 22 F9 B9         ld (ship_current_sprite),hl         ; put into memory
182+  BB18 ED 43 FB B9      ld (ship_current_coords),bc         ; put into memory
183+  BB1C F1               pop af
184+  BB1D 3D               dec a
185+  BB1E FE 00            cp 0
186+  BB20 C2 FB BA         jp nz,ship_draw0
187+  BB23
188+  BB23 C9               ret
189+  BB24
# file closed: game/ship.asm
 39   BB24                  include "game\tank.asm"
# file opened: game/tank.asm
  1+  BB24              ;
  2+  BB24              ; tank initial position: vert,horiz
  3+  BB24              ;
  4+  BB24              tank_initpos:
  5+  BB24 10 D0            defb 16,208
  6+  BB26              tank_initpos2:
  7+  BB26 00 00            defb 0,0
  8+  BB28              tank_frame:
  9+  BB28 00               defb 0
 10+  BB29              tank_anim:
 11+  BB29 11               defb 17
 12+  BB2A
 13+  BB2A              ;
 14+  BB2A              ; The damage countdown
 15+  BB2A              ;
 16+  BB2A              tank_currentdamage:
 17+  BB2A F0               defb 240
 18+  BB2B
 19+  BB2B              ;
 20+  BB2B              ; The damage coordinate
 21+  BB2B              ;
 22+  BB2B              tank_currentdamagecoord:
 23+  BB2B 16 02            defb 22,2
 24+  BB2D
 25+  BB2D              ;
 26+  BB2D              ; Controls when the tank shoots
 27+  BB2D              ;
 28+  BB2D              tank_count:
 29+  BB2D 00               defb 0
 30+  BB2E
 31+  BB2E              ;
 32+  BB2E              ; Holds the block number of the current damage sprite
 33+  BB2E              ;
 34+  BB2E              tank_damageframe:
 35+  BB2E 00               defb 0
 36+  BB2F
 37+  BB2F              ;
 38+  BB2F              ; The current memory location
 39+  BB2F              ;
 40+  BB2F              tank_current_sprite:
 41+  BB2F 00 00            defb 0,0
 42+  BB31
 43+  BB31              tank_current_coords:
 44+  BB31 00 00            defb 0,0
 45+  BB33
 46+  BB33              ;
 47+  BB33              ; Is the missile displayed - will be 19 if so, 0 if not
 48+  BB33              ;
 49+  BB33              tank_missile_displayed:
 50+  BB33 00               defb 0
 51+  BB34
 52+  BB34              ;
 53+  BB34              ; Initialise the tank
 54+  BB34              ;
 55+  BB34              tank_init:
 56+  BB34 ED 4B 24 BB      ld bc,(tank_initpos)
 57+  BB38 ED 43 26 BB      ld (tank_initpos2),bc       ; save the initial position for later use
 58+  BB3C 21 28 BB         ld hl,tank_frame
 59+  BB3F 36 00            ld (hl),0
 60+  BB41 21 29 BB         ld hl,tank_anim
 61+  BB44 36 11            ld (hl),17
 62+  BB46 21 2E BB         ld hl,tank_damageframe              ; reset tank
 63+  BB49 36 00            ld (hl),0
 64+  BB4B 21 2D BB         ld hl,tank_count
 65+  BB4E 36 00            ld (hl),0
 66+  BB50 21 2A BB         ld hl,tank_currentdamage
 67+  BB53 36 F0            ld (hl),240
 68+  BB55 21 2B BB         ld hl,tank_currentdamagecoord
 69+  BB58 36 16            ld (hl),22
 70+  BB5A 23               inc hl
 71+  BB5B 36 02            ld (hl),2
 72+  BB5D 21 33 BB         ld hl,tank_missile_displayed
 73+  BB60 36 00            ld (hl),0
 74+  BB62
 75+  BB62 C9               ret
 76+  BB63
 77+  BB63              ;
 78+  BB63              ;   Draw and move the tank
 79+  BB63              ;   Start processing at frame 200
 80+  BB63              ;   Don't move if anim is zero
 81+  BB63              ;   Decrement frame if moved
 82+  BB63              ;
 83+  BB63              tank_process:
 84+  BB63 3A 29 BB         ld a,(tank_anim)
 85+  BB66 FE 00            cp 0
 86+  BB68 C2 6F BB         jp nz,tank_process0         ; fire the tank if we've already moved, or jump to movement
 87+  BB6B CD 80 BB         call tank_fire
 88+  BB6E C9               ret
 89+  BB6F              tank_process0:
 90+  BB6F CD 49 B8         call game_getcurrentframe   ; get the current frame number into a
 91+  BB72 FE 4B            cp 75
 92+  BB74 D8               ret c                       ; return if the frame number is below 100
 93+  BB75 CD 94 BC         call tank_move              ; move tank if not
 94+  BB78 3A 29 BB         ld a,(tank_anim)
 95+  BB7B 3D               dec a
 96+  BB7C 32 29 BB         ld (tank_anim),a            ; decrease the anim count
 97+  BB7F C9               ret
 98+  BB80
 99+  BB80              ;
100+  BB80              ; Fires the tank
101+  BB80              ;
102+  BB80              tank_fire:
103+  BB80 3A 2D BB         ld a,(tank_count)            ; if not, don't do anything
104+  BB83 3C               inc a                        ; increment
105+  BB84 FE 19            cp 25                        ; have we reached fifty
106+  BB86 C2 8B BB         jp nz,tank_fire0
107+  BB89 3E 00            ld a,0                       ; reset if reached fifty
108+  BB8B              tank_fire0:                      ; DEALING WITH A NEW BLOCK
109+  BB8B 32 2D BB         ld (tank_count),a            ; store tank count
110+  BB8E FE 00            cp 0
111+  BB90 CA A7 BB         jp z,tank_fire7              ; If this is zero, fire
112+  BB93 3A 33 BB         ld a,(tank_missile_displayed) ; is the missile displaying?
113+  BB96 FE 00            cp 0
114+  BB98 C8               ret z                       ; don't do anything if not
115+  BB99 CD 4E BC         call tank_missilegraphic     ; if not, overwrite the previous tank missile
116+  BB9C 3E 00            ld a,0                       ; reset the flag
117+  BB9E 32 33 BB         ld (tank_missile_displayed),a
118+  BBA1 3E 02            ld a,2
119+  BBA3 CD A6 A5         call buffer_marklineforupdate
120+  BBA6 C9               ret                        ; only shoot if we're on 0
121+  BBA7              tank_fire7:
122+  BBA7 3A 2A BB         ld a,(tank_currentdamage)    ; get the damage countdown
123+  BBAA E6 07            and 7                       ; check if multiple of 8 - house keeping when moving onto a new block
124+  BBAC C2 E2 BB         jp nz,tank_fire1            ; not, so just do a normal frame
125+  BBAF ED 4B 2B BB      ld bc,(tank_currentdamagecoord) ; get the current damage coord into bc
126+  BBB3 79               ld a,c
127+  BBB4 FE 0A            cp 10
128+  BBB6 C2 BD BB         jp nz, tank_fire6
129+  BBB9 CD 86 BC         call tank_killedbytank      ; we're through, so the player has died. Kill them.
130+  BBBC C9               ret                         ; return if we're through the mountain
131+  BBBD              tank_fire6:
132+  BBBD 3E 0F            ld a,15
133+  BBBF 32 2E BB         ld (tank_damageframe),a     ; reset the damage frame
134+  BBC2 21 15 B2         ld hl,sprites               ; location of the empty block
135+  BBC5 CD 5E A8         call screen_showchar        ; show this character here
136+  BBC8 ED 4B 2B BB      ld bc,(tank_currentdamagecoord) ; get the current damage coord into bc
137+  BBCC 05               dec b                       ; look one above
138+  BBCD CD 8B A8         call screen_ischarempty     ; check if it is empty
139+  BBD0 ED 4B 2B BB      ld bc,(tank_currentdamagecoord) ; get the current damage coord into bc again
140+  BBD4 FE 01            cp 1
141+  BBD6 C2 19 BC         jp nz,tank_fire2             ; block above isn't empty, so can't move on, copy down above blocks
142+  BBD9 ED 4B 2B BB      ld bc,(tank_currentdamagecoord) ; get the current damage coord into bc
143+  BBDD 0D               dec c
144+  BBDE ED 43 2B BB      ld (tank_currentdamagecoord),bc ; store the coord
145+  BBE2              tank_fire1:                         ; DEALING WITH NORMAL DAMAGE
146+  BBE2 ED 4B 2B BB      ld bc,(tank_currentdamagecoord) ; get the current damage coord into bc
147+  BBE6 3A 2A BB         ld a,(tank_currentdamage)    ; get the damage countdown
148+  BBE9 E6 07            and 7                       ; is it a multiple of 8? only want to do the first line check then
149+  BBEB C2 F6 BB         jp nz, tank_fire5
150+  BBEE CD BB A8         call screen_getcharfirstbyte    ; get the first byte to check if this is a slope
151+  BBF1 FE FF            cp 255                      ; if it's a full line, it will be 255 and not a slope
152+  BBF3 C2 37 BC         jp nz,tank_fire3            ; if it's a slope, handle this differently
153+  BBF6              tank_fire5:
154+  BBF6 3A 2E BB         ld a,(tank_damageframe)
155+  BBF9 CD 78 A8         call screen_getblock        ; get the block data into hl
156+  BBFC CD 5E A8         call screen_showchar        ; show this character here
157+  BBFF 3A 2E BB         ld a,(tank_damageframe)
158+  BC02 3C               inc a
159+  BC03 32 2E BB         ld (tank_damageframe),a     ; increment the damage block and store
160+  BC06 3A 2A BB         ld a,(tank_currentdamage)    ; get the damage countdown
161+  BC09 3D               dec a
162+  BC0A 3D               dec a
163+  BC0B 32 2A BB         ld (tank_currentdamage),a     ; decrease current damage by 2 and store
164+  BC0E 3A 33 BB         ld a,(tank_missile_displayed) ; is the missile displaying?
165+  BC11 FE 00            cp 0
166+  BC13 CC 4E BC         call z, tank_missilegraphic
167+  BC16 C3 40 BC         jp tank_fire4
168+  BC19              tank_fire2:                     ; DEALING WITH COPYING BLOCKS FROM ABOVE
169+  BC19 05               dec b
170+  BC1A C5               push bc
171+  BC1B CD A4 A8         call screen_copyblockdown       ; copy the block down
172+  BC1E ED 4B 2B BB      ld bc,(tank_currentdamagecoord) ; get the current damage coord into bc
173+  BC22 C1               pop bc                      ; get the coord we just checked back
174+  BC23 78               ld a,b
175+  BC24 FE 00            cp 0
176+  BC26 CA E2 BB         jp z,tank_fire1             ; if we're at the top of the screen, don't check any more
177+  BC29 C5               push bc
178+  BC2A 05               dec b
179+  BC2B CD 8B A8         call screen_ischarempty     ; check if it is empty
180+  BC2E C1               pop bc
181+  BC2F FE 01            cp 1                        ; if empty
182+  BC31 C2 19 BC         jp nz, tank_fire2            ; copy another one down
183+  BC34 C3 E2 BB         jp tank_fire1               ; otherwise, return to main thread
184+  BC37              tank_fire3:                      ; dealing with slopes
185+  BC37 3A 2A BB         ld a,(tank_currentdamage)    ; get the damage countdown
186+  BC3A 06 08            ld b,8
187+  BC3C 90               sub b                        ; special case for slopes
188+  BC3D 32 2A BB         ld (tank_currentdamage),a    ; decrease the damage countdown by 8, so that next time, we get rid of this block without eroding it
189+  BC40              tank_fire4:                     ; TIDY UP
190+  BC40 CD A6 A5         call buffer_marklineforupdate
191+  BC43 3E 01            ld a,1
192+  BC45 CD A6 A5         call buffer_marklineforupdate
193+  BC48 3E 02            ld a,2
194+  BC4A CD A6 A5         call buffer_marklineforupdate
195+  BC4D C9               ret
196+  BC4E
197+  BC4E              ;
198+  BC4E              ; Displays or hides the missile graphic, and changes the gun
199+  BC4E              ;
200+  BC4E              tank_missilegraphic:
201+  BC4E 3A 33 BB         ld a,(tank_missile_displayed)
202+  BC51 FE 00            cp 0
203+  BC53 C2 5B BC         jp nz,tank_missilegraphic0
204+  BC56 3E 13            ld a,19
205+  BC58 C3 5D BC         jp tank_missilegraphic1
206+  BC5B              tank_missilegraphic0:
207+  BC5B 3E 00            ld a,0
208+  BC5D              tank_missilegraphic1:
209+  BC5D 32 33 BB         ld (tank_missile_displayed),a ; store the flipped graphic
210+  BC60 ED 4B 2B BB      ld bc,(tank_currentdamagecoord)
211+  BC64 0C               inc c
212+  BC65 0C               inc c                   ; print the graphic 2 spaces right
213+  BC66 CD 78 A8         call screen_getblock        ; get the block data into hl
214+  BC69 CD 5E A8         call screen_showchar        ; show this character here
215+  BC6C 06 02            ld b,2
216+  BC6E 0E 18            ld c,24                     ; set gunbarrel coords
217+  BC70 11 00 00         ld de,0
218+  BC73 21 88 B3         ld hl,tank_sprite           ; set hl to gunbarrel gfx, shooting is +64
219+  BC76 3A 33 BB         ld a,(tank_missile_displayed)
220+  BC79 FE 00            cp 0
221+  BC7B CA 81 BC         jp z,tank_missilegraphic2
222+  BC7E 11 40 00         ld de,64
223+  BC81              tank_missilegraphic2:
224+  BC81 19               add hl,de                   ; work out missile graphic
225+  BC82 CD 5E A8         call screen_showchar        ; show this character here
226+  BC85 C9               ret
227+  BC86
228+  BC86              ;
229+  BC86              ; Deal with the player being killed by the tank
230+  BC86              ;
231+  BC86              tank_killedbytank:
232+  BC86 ED 4B 2B BB      ld bc,(tank_currentdamagecoord) ; get the current damage coord into bc
233+  BC8A 21 15 B2         ld hl,sprites                   ; empty sprite
234+  BC8D CD 5E A8         call screen_showchar            ; hide the last piece of dirt
235+  BC90 CD 05 B9         call player_tankkillplayer
236+  BC93 C9               ret
237+  BC94
238+  BC94              tank_move:
239+  BC94 ED 4B 26 BB      ld bc,(tank_initpos2)
240+  BC98 C5               push bc
241+  BC99 3A 29 BB         ld a,(tank_anim)
242+  BC9C FE 11            cp 17                       ; check first time flag
243+  BC9E CA B0 BC         jp z,tank_move1             ; don't draw over previous one if first time
244+  BCA1 CD B5 BC         call tank_draw_full         ; delete old one
245+  BCA4 ED 4B 26 BB      ld bc,(tank_initpos2)       ; get the current coords
246+  BCA8 78               ld a,b
247+  BCA9 D6 01            sub 1                       ; move back one pixels
248+  BCAB 47               ld b,a
249+  BCAC ED 43 26 BB      ld (tank_initpos2),bc
250+  BCB0              tank_move1:
251+  BCB0 CD B5 BC         call tank_draw_full         ; draw the tank
252+  BCB3 C1               pop bc
253+  BCB4 C9               ret
254+  BCB5
255+  BCB5              tank_draw_full:
256+  BCB5 21 88 B3         ld hl,tank_sprite
257+  BCB8 ED 4B 26 BB      ld bc,(tank_initpos2)         ; load bc with the start coords
258+  BCBC 22 2F BB         ld (tank_current_sprite),hl  ; put into memory
259+  BCBF ED 43 31 BB      ld (tank_current_coords),bc  ; put into memory
260+  BCC3 CD EC BC         call tank_draw
261+  BCC6 08               ex af,af'
262+  BCC7 3A 28 BB         ld a,(tank_frame)            ; get the animation frame
263+  BCCA 16 00            ld d,0
264+  BCCC 5F               ld e,a
265+  BCCD 19               add hl,de
266+  BCCE 22 2F BB         ld (tank_current_sprite),hl  ; put into memory
267+  BCD1 08               ex af,af'
268+  BCD2 ED 4B 26 BB      ld bc,(tank_initpos2)         ; load bc with the start coords
269+  BCD6 81 C6 08         add c,8                      ; move one line down
270+  BCD9 4F               ld c,a
271+  BCDA ED 43 31 BB      ld (tank_current_coords),bc  ; put into memory
272+  BCDE CD EC BC         call tank_draw
273+  BCE1 3E 02            ld a,2
274+  BCE3 CD A6 A5         call buffer_marklineforupdate
275+  BCE6 3E 03            ld a,3
276+  BCE8 CD A6 A5         call buffer_marklineforupdate   ; mark the first two rows for update
277+  BCEB C9               ret
278+  BCEC
279+  BCEC              ;
280+  BCEC              ; Draw the tank
281+  BCEC              ; Inputs:
282+  BCEC              ; None, all in memory
283+  BCEC              ;
284+  BCEC              tank_draw:
285+  BCEC 3E 04            ld a,4                              ; 4 pieces per half
286+  BCEE              tank_draw0:
287+  BCEE F5               push af
288+  BCEF 2A 2F BB         ld hl,(tank_current_sprite)
289+  BCF2 ED 4B 31 BB      ld bc,(tank_current_coords)         ; load bc with the start coords
290+  BCF6 CD CF A8         call sprites_drawsprite
291+  BCF9 2A 2F BB         ld hl,(tank_current_sprite)
292+  BCFC ED 4B 31 BB      ld bc,(tank_current_coords)         ; load bc with the start coords
293+  BD00 11 08 00         ld de,8
294+  BD03 19               add hl,de
295+  BD04 80 C6 08         add b,8
296+  BD07 47               ld b,a
297+  BD08 22 2F BB         ld (tank_current_sprite),hl         ; put into memory
298+  BD0B ED 43 31 BB      ld (tank_current_coords),bc         ; put into memory
299+  BD0F F1               pop af
300+  BD10 3D               dec a
301+  BD11 FE 00            cp 0
302+  BD13 C2 EE BC         jp nz,tank_draw0
303+  BD16
304+  BD16 C9               ret
305+  BD17
# file closed: game/tank.asm
 40   BD17                  include "game\rocks.asm"
# file opened: game/rocks.asm
  1+  BD17              ;
  2+  BD17              ; A structure of falling rocks
  3+  BD17              ; Assume we'll never have more than 4 falling at any one time
  4+  BD17              ; (1,2 - 16 bit memory location for rock graphic),state (0 fell, 1 falling, 2 wobbling), countdown
  5+  BD17              ;
  6+  BD17              rocks_falling:
  7+  BD17 00 00 00 00      defb 0,0,0,0
  8+  BD1B 00 00 00 00      defb 0,0,0,0
  9+  BD1F 00 00 00 00      defb 0,0,0,0
 10+  BD23 00 00 00 00      defb 0,0,0,0
 11+  BD27
 12+  BD27              rocks_tmp:
 13+  BD27 00               defb 0
 14+  BD28
 15+  BD28              rocks_tmp2:
 16+  BD28 00 00            defb 0,0
 17+  BD2A
 18+  BD2A              ;
 19+  BD2A              ; Coords of the rock that killed us
 20+  BD2A              ;
 21+  BD2A              rocks_killerrock:
 22+  BD2A 00 00            defb 0,0
 23+  BD2C
 24+  BD2C              ;
 25+  BD2C              ; Checks for a rock that needs to start falling. Takes a memory location of the first line at the bottom of the space.
 26+  BD2C              ; Checks to see if the pixel row in that location is a rock bottom. If it is, mark this rock as ready to fall.
 27+  BD2C              ; If the pixel row is not the rock bottom, stop checking.
 28+  BD2C              ; Inputs:
 29+  BD2C              ; hl- memory location
 30+  BD2C              ;
 31+  BD2C              rocks_checkforfalling:
 32+  BD2C 7E               ld a,(hl)           ; get the pixel row in this memory location
 33+  BD2D FE 7E            cp 126              ; check against the bottom pixel row of the rock graphic
 34+  BD2F C2 35 BD         jp nz,rocks_checkforfalling2 ; not a rock, stop
 35+  BD32 CD 36 BD         call rocks_addrocktofalling ; mark the rock as falling
 36+  BD35              rocks_checkforfalling2:
 37+  BD35 C9               ret
 38+  BD36
 39+  BD36              ;
 40+  BD36              ; Adds the rock to the structure that tracks falling rocks
 41+  BD36              ; Inputs:
 42+  BD36              ; hl - memory location of falling rock graphic
 43+  BD36              ; bc - coords of rock, c vert
 44+  BD36              rocks_addrocktofalling:
 45+  BD36 C5               push bc             ; store the coords
 46+  BD37 11 17 BD         ld de,rocks_falling
 47+  BD3A 06 04            ld b,4              ; number of possible falling rocks
 48+  BD3C              rocks_addrocktofalling0:
 49+  BD3C 13               inc de
 50+  BD3D                  ;inc de
 51+  BD3D 13               inc de              ; move three along to get the state
 52+  BD3E 1A               ld a,(de)           ; load the state
 53+  BD3F FE 00            cp 0                ; check if this is not falling
 54+  BD41 C2 57 BD         jp nz,rocks_addrocktofalling1 ; continue the loop if not 0
 55+  BD44 13               inc de              ; move to frame
 56+  BD45 3E 10            ld a,16             ; load the number of frames to wobble
 57+  BD47 12               ld (de),a
 58+  BD48 1B               dec de              ; move de back to state
 59+  BD49 3E 02            ld a,2
 60+  BD4B 12               ld (de),a           ; set the state to wobbling
 61+  BD4C 1B               dec de              ; move back coords
 62+  BD4D C1               pop bc              ; get back coords
 63+  BD4E 78               ld a,b
 64+  BD4F 12               ld (de),a           ; store the vertical
 65+  BD50 1B               dec de
 66+  BD51 79               ld a,c
 67+  BD52 12               ld (de),a           ; store the horizontal
 68+  BD53 C5               push bc
 69+  BD54 C3 5B BD         jp rocks_addrocktofalling2 ; done
 70+  BD57              rocks_addrocktofalling1:
 71+  BD57 13               inc de
 72+  BD58 13               inc de              ; move memory along to next rock
 73+  BD59 10 E1            djnz rocks_addrocktofalling0 ; try the next rock
 74+  BD5B              rocks_addrocktofalling2: ; done, return
 75+  BD5B C1               pop bc              ; to tidy up
 76+  BD5C C9               ret
 77+  BD5D
 78+  BD5D              ;
 79+  BD5D              ; Processes any falling rocks
 80+  BD5D              ;
 81+  BD5D              rocks_processrocks:
 82+  BD5D DD 21 17 BD      ld ix,rocks_falling
 83+  BD61 06 04            ld b,4              ; the number of rocks to check
 84+  BD63              rocks_processrocks0:
 85+  BD63 C5               push bc             ; store loop count
 86+  BD64 DD 4E 00 DD      ld bc,(ix)          ; load the coords for this rock into bc
 86+  BD68 46 01
 87+  BD6A DD 23            inc ix
 88+  BD6C DD 23            inc ix              ; move to the state
 89+  BD6E DD 7E 00         ld a,(ix)           ; load the state into a
 90+  BD71 FE 00            cp 0
 91+  BD73 CA 97 BD         jp z,rocks_processrocks3 ; if not falling, check next
 92+  BD76 FE 02            cp 2
 93+  BD78 C2 88 BD         jp nz, rocks_processrocks2
 94+  BD7B                  ; we're wobbling
 95+  BD7B DD 23            inc ix              ; get frame number for wobble
 96+  BD7D DD 7E 00         ld a,(ix)           ; get wobble frame into a
 97+  BD80 CD 55 BE         call rocks_wobble
 98+  BD83 DD 23            inc ix              ; increment for next
 99+  BD85 C3 9B BD         jp rocks_processrocks1  ; do next rock
100+  BD88              rocks_processrocks2:
101+  BD88                  ; we're falling
102+  BD88 C5               push bc
103+  BD89 CD B4 BD         call rocks_fall
104+  BD8C C1               pop bc
105+  BD8D CD 9F BD         call rocks_storeupdatedlines
106+  BD90 DD 23            inc ix
107+  BD92 DD 23            inc ix              ; inc ix to get to next
108+  BD94 C3 9B BD         jp rocks_processrocks1
109+  BD97              rocks_processrocks3:
110+  BD97 DD 23            inc ix
111+  BD99 DD 23            inc ix
112+  BD9B              rocks_processrocks1:
113+  BD9B C1               pop bc              ; get loop count back
114+  BD9C 10 C5            djnz rocks_processrocks0
115+  BD9E C9               ret
116+  BD9F
117+  BD9F              ;
118+  BD9F              ; Stores the updated rows associated with the rock
119+  BD9F              ; Inputs:
120+  BD9F              ; bc - coords
121+  BD9F              ;
122+  BD9F              rocks_storeupdatedlines:
123+  BD9F 79               ld a,c                  ; get the rock block coords of current block
124+  BDA0 E6 F8            and 248                 ; find closest multiple of eight
125+  BDA2 0F               rrca
126+  BDA3 0F               rrca
127+  BDA4 0F               rrca                    ; divide by 8
128+  BDA5 ED 5B F6 A6      ld de,(screen_offset)          ; load the screen offset, this is in rows
129+  BDA9 93               sub e
130+  BDAA F5               push af
131+  BDAB CD A6 A5         call buffer_marklineforupdate  ; store current row in updated lines
132+  BDAE F1               pop af
133+  BDAF 3C               inc a
134+  BDB0 CD A6 A5         call buffer_marklineforupdate  ; store line beneath
135+  BDB3 C9               ret
136+  BDB4
137+  BDB4              ;
138+  BDB4              ; Falls a rock one pixel, checks the next square down to see if it is empty, if not, stop falling
139+  BDB4              ; bc - coord of current rock graphic on screen
140+  BDB4              ; ix - memory location of current rock in rock list, currently at the 3rd position (rock state)
141+  BDB4              ;
142+  BDB4              rocks_fall:
143+  BDB4 DD 2B            dec ix
144+  BDB6 DD 2B            dec ix              ; decrease ix back to coords
145+  BDB8 ED 43 28 BD      ld (rocks_tmp2),bc  ; store original coords
146+  BDBC 3E 03            ld a,3              ; move this number of pixels
147+  BDBE              rocks_fall1:
148+  BDBE 08               ex af,af'
149+  BDBF DD 4E 00 DD      ld bc,(ix)          ; get current coords
149+  BDC3 46 01
150+  BDC5 CD 12 A9         call sprites_scadd  ; get the memory of the coords into de
151+  BDC8 14               inc d               ; add 256 to get next row
152+  BDC9 1A               ld a,(de)           ; get the contents of the next row
153+  BDCA FE 00            cp 0
154+  BDCC C2 25 BE         jp nz,rocks_fall3    ; move the rock if the row is empty
155+  BDCF 0C               inc c               ; increment the vertical
156+  BDD0 DD 71 00 DD      ld (ix),bc          ; store the new coords
156+  BDD4 70 01
157+  BDD6 79               ld a,c              ; get the vertical coord into a
158+  BDD7 E6 07            and 7               ; divisible by 8?
159+  BDD9 FE 00            cp 0
160+  BDDB C2 F6 BD         jp nz,rocks_fall4   ; if not, carry on
161+  BDDE CD 21 A8         call screen_getattraddressfromscreencoords ; get the attr address into de
162+  BDE1 62 6B            ld hl,de
163+  BDE3 36 42            ld (hl),66          ; load this square with the yellow colour
164+  BDE5 DD 4E 00 DD      ld bc,(ix)
164+  BDE9 46 01
165+  BDEB 79               ld a,c              ; get vertical
166+  BDEC D6 08            sub 8               ; look up one square
167+  BDEE 4F               ld c,a              ; put a back in c
168+  BDEF CD 21 A8         call screen_getattraddressfromscreencoords ; get the attr address into de
169+  BDF2 62 6B            ld hl,de
170+  BDF4 36 46            ld (hl),70          ; load this square with the yellow colour
171+  BDF6              rocks_fall4:
172+  BDF6 08               ex af,af'
173+  BDF7 3D               dec a
174+  BDF8 FE 00            cp 0
175+  BDFA C2 BE BD         jp nz,rocks_fall1   ; do another pixel if needed
176+  BDFD              rocks_fall2:
177+  BDFD 3E 09            ld a,9              ; rock graphic
178+  BDFF ED 4B 28 BD      ld bc,(rocks_tmp2)  ; get the original coords
179+  BE03 CD 78 A8         call screen_getblock     ; get the memory into hl
180+  BE06 CD CF A8         call sprites_drawsprite  ; draw the sprite - over the top of the current one
181+  BE09 3E 09            ld a,9
182+  BE0B DD 4E 00 DD      ld bc,(ix)          ; get the new coords
182+  BE0F 46 01
183+  BE11 CD 78 A8         call screen_getblock     ; get the memory into hl
184+  BE14 CD CF A8         call sprites_drawsprite  ; draw the sprite - over the top of the current one
185+  BE17 DD 4E 00 DD      ld bc,(ix)          ; get the coords again
185+  BE1B 46 01
186+  BE1D CD 3A BE         call rocks_checkforplayer ; check to see if we hit a player
187+  BE20 DD 23            inc ix
188+  BE22 DD 23            inc ix                  ; get ix back to state
189+  BE24 C9               ret
190+  BE25              rocks_fall3:
191+  BE25 3E 00            ld a,0              ; set the state to fell
192+  BE27 DD 77 02         ld (ix+2),a           ; store the falling state
193+  BE2A DD 4E 00 DD      ld bc,(ix)          ; get the coords
193+  BE2E 46 01
194+  BE30 CD 21 A8         call screen_getattraddressfromscreencoords ; get the attr address into de
195+  BE33 62 6B            ld hl,de
196+  BE35 36 42            ld (hl),66
197+  BE37 C3 FD BD         jp rocks_fall2      ; rejoin main loop
198+  BE3A
199+  BE3A              ;
200+  BE3A              ; Checks to see if the rock is hitting a player
201+  BE3A              ; Inputs:
202+  BE3A              ; bc - coords of rock we're checking
203+  BE3A              rocks_checkforplayer:
204+  BE3A ED 5B 53 B8      ld de,(player)       ; get the player coords
205+  BE3E 7B               ld a,e               ; get the vert coord first
206+  BE3F 91               sub c                ; subtract the rock vertical coord from players
207+  BE40 FE 08            cp 8                 ; the rock will only hit a player if the player is directly underneath, so this must be 8
208+  BE42 C0               ret nz               ; if not, hasn't hit
209+  BE43 7A               ld a,d               ; get the player horiz coord
210+  BE44 90               sub b                ; subtract rock coord
211+  BE45 C6 07            add 7                ; add max distance
212+  BE47 FE 0D            cp 13                ; compare to 13? if carry flag set, they've hit
213+  BE49 DA 4D BE         jp c,rocks_checkforplayer0
214+  BE4C C9               ret
215+  BE4D              rocks_checkforplayer0:
216+  BE4D ED 43 2A BD      ld (rocks_killerrock),bc; store the coords of the killer rock
217+  BE51 CD FF B8         call player_crushplayer ; if so, jump out
218+  BE54 C9               ret
219+  BE55
220+  BE55              ;
221+  BE55              ; Wobbles a rocks
222+  BE55              ; Inputs:
223+  BE55              ; bc - coord of current rock graphic on screen
224+  BE55              ; ix - memory location of current rock in rock list, currently at the 4th position (wobble count)
225+  BE55              ; a - wobble frame
226+  BE55              rocks_wobble:
227+  BE55 DD 7E 00         ld a,(ix)           ; get the wobble count, which we'll use as frame toggle
228+  BE58 E6 01            and 1               ; is it odd or even, gets 1 or 0
229+  BE5A 1E 09            ld e,9              ; this is the rock frame
230+  BE5C 83               add a,e             ; add the frame toggle
231+  BE5D C5               push bc
232+  BE5E CD 78 A8         call screen_getblock     ; get the memory into hl
233+  BE61 CD CF A8         call sprites_drawsprite  ; draw the sprite - over the top of the current one
234+  BE64
235+  BE64 DD 7E 00         ld a,(ix)           ; get the frame toggle again
236+  BE67 3D               dec a               ; decrease
237+  BE68 DD 77 00         ld (ix),a           ; store
238+  BE6B
239+  BE6B E6 01            and 1
240+  BE6D 1E 09            ld e,9              ; this is the rock frame
241+  BE6F 83               add a,e             ; add the frame toggle
242+  BE70 CD 78 A8         call screen_getblock     ; get the memory into hl
243+  BE73
244+  BE73 C1               pop bc
245+  BE74 CD CF A8         call sprites_drawsprite  ; draw the sprite again with the new frame - next time it will do the opposite
246+  BE77
247+  BE77 DD 7E 00         ld a,(ix)           ; get the wobble count back
248+  BE7A FE 00            cp 0
249+  BE7C C0               ret nz              ; if we're not at zero, return
250+  BE7D DD 2B            dec ix              ; otherwise look to state location
251+  BE7F 3E 01            ld a,1              ; set the state to falling
252+  BE81 DD 77 00         ld (ix),a           ; store the falling state
253+  BE84 DD 23            inc ix              ; set ix back to location of wobble count, and we're done
254+  BE86 C9               ret
255+  BE87
# file closed: game/rocks.asm
 41   BE87                  include "game\scores.asm"
# file opened: game/scores.asm
  1+  BE87              ;
  2+  BE87              ; The score of the current player
  3+  BE87              ;
  4+  BE87              scores_current:
  5+  BE87 04 01 30 30      defb 4,1,'000000',255       ;+2
  5+  BE8B 30 30 30 30
  5+  BE8F FF
  6+  BE90
  7+  BE90              scores_defaultname:
  8+  BE90 2D 2D 2D         defb '---'
  9+  BE93
 10+  BE93              ;
 11+  BE93              ; The current high score table
 12+  BE93              ;
 13+  BE93              scores_table:
 14+  BE93 03 17 47 41      defb 03,23,'GAM000000',255         ;+0, +2, +5
 14+  BE97 4D 30 30 30
 14+  BE9B 30 30 30 FF
 15+  BE9F 0C 17 47 41      defb 12,23,'GAM000000',255        ;+12, +14, +17
 15+  BEA3 4D 30 30 30
 15+  BEA7 30 30 30 FF
 16+  BEAB 15 17 47 41      defb 21,23,'GAM000000',255        ;+24, +26, +29
 16+  BEAF 4D 30 30 30
 16+  BEB3 30 30 30 FF
 17+  BEB7
 18+  BEB7              ;
 19+  BEB7              ; Add thousands to the score
 20+  BEB7              ; Inputs:
 21+  BEB7              ; b - number to add
 22+  BEB7              ;
 23+  BEB7              scores_addthousands:
 24+  BEB7 21 8B BE         ld hl,scores_current+4
 25+  BEBA CD E4 BE         call scores_update
 26+  BEBD C9               ret
 27+  BEBE
 28+  BEBE              ;
 29+  BEBE              ; Prints the score to screen
 30+  BEBE              ;
 31+  BEBE              scores_printscore:
 32+  BEBE 3A 25 B8         ld a,(game_currentplayer)   ; get current player
 33+  BEC1 21 87 BE         ld hl,scores_current
 34+  BEC4 FE 01            cp 1
 35+  BEC6 C2 CE BE         jp nz, score_printscore0    ; if not player 1
 36+  BEC9 36 04            ld (hl),4       ; set position for player 1
 37+  BECB C3 D0 BE         jp score_printscore1
 38+  BECE              score_printscore0:
 39+  BECE 36 16            ld (hl),22       ; set position for player 2
 40+  BED0              score_printscore1:
 41+  BED0 21 87 BE         ld hl,scores_current
 42+  BED3 CD A6 84         call string_print
 43+  BED6 C9               ret
 44+  BED7
 45+  BED7              ;
 46+  BED7              ; Prints both scores to screen
 47+  BED7              ;
 48+  BED7              scores_printscores:
 49+  BED7 21 E7 B8         ld hl,player1_score
 50+  BEDA CD A6 84         call string_print
 51+  BEDD 21 F0 B8         ld hl,player2_score
 52+  BEE0 CD A6 84         call string_print
 53+  BEE3 C9               ret
 54+  BEE4
 55+  BEE4              ;
 56+  BEE4              ; Updates the current score.
 57+  BEE4              ; Inputs:
 58+  BEE4              ; hl - memory location of the score column
 59+  BEE4              ; b - number to add
 60+  BEE4              ;
 61+  BEE4              scores_update:
 62+  BEE4 7E               ld a,(hl)           ; current value of digit.
 63+  BEE5 80               add a,b             ; add points to this digit.
 64+  BEE6 77               ld (hl),a           ; place new digit back in string.
 65+  BEE7 FE 3A            cp 58               ; more than ASCII value '9'?
 66+  BEE9 D8               ret c               ; no - relax.
 67+  BEEA D6 0A            sub 10              ; subtract 10.
 68+  BEEC 77               ld (hl),a           ; put new character back in string.
 69+  BEED              scores_update0:
 70+  BEED 2B               dec hl              ; previous character in string.
 71+  BEEE 34               inc (hl)            ; up this by one.
 72+  BEEF 7E               ld a,(hl)           ; what's the new value?
 73+  BEF0 FE 3A            cp 58               ; gone past ASCII nine?
 74+  BEF2 D8               ret c               ; no, scoring done.
 75+  BEF3 D6 0A            sub 10              ; down by ten.
 76+  BEF5 77               ld (hl),a           ; put it back
 77+  BEF6 C3 ED BE         jp scores_update0   ; go round again.
 78+  BEF9
 79+  BEF9
 80+  BEF9              ;
 81+  BEF9              ; Displays the high score table at the bottom of the screen
 82+  BEF9              ;
 83+  BEF9              scores_showtable:
 84+  BEF9 21 93 BE         ld hl, scores_table
 85+  BEFC CD A6 84         call string_print
 86+  BEFF 21 9F BE         ld hl, scores_table+12
 87+  BF02 CD A6 84         call string_print
 88+  BF05 21 AB BE         ld hl, scores_table+24
 89+  BF08 CD A6 84         call string_print
 90+  BF0B C9               ret
 91+  BF0C
 92+  BF0C              ;
 93+  BF0C              ; Place to store the current position we're checking
 94+  BF0C              ;
 95+  BF0C              scores_highscoretmp:
 96+  BF0C 00               defb 0
 97+  BF0D
 98+  BF0D              ;
 99+  BF0D              ; Updates the highscore table. Start at bottom score. Work way from left. Compare each digit. If current is higher than one we're checking,
100+  BF0D              ; copy checking one down (or erase) then copy current over that one. Then move up one and do the same
101+  BF0D              ;
102+  BF0D              scores_processhighscores:
103+  BF0D 21 0C BF         ld hl,scores_highscoretmp
104+  BF10 36 00            ld (hl),0  ; load up the tracking byte with 0 (ie, not on the table)
105+  BF12 3E 1D            ld a,29
106+  BF14              scores_processhighscores3:
107+  BF14 21 93 BE         ld hl,scores_table          ; position of first score column
108+  BF17 5F               ld e,a
109+  BF18 16 00            ld d,0
110+  BF1A 19               add hl,de
111+  BF1B 08               ex af,af'                   ; store a for later
112+  BF1C 11 89 BE         ld de,scores_current+2      ; position of current score column
113+  BF1F 06 06            ld b,6                      ; times to loop
114+  BF21              scores_processhighscores0:
115+  BF21 7E               ld a,(hl)
116+  BF22 4F               ld c,a                      ; get first score column
117+  BF23 1A               ld a,(de)                   ; get first current column
118+  BF24 B9               cp c                        ; compare current with first
119+  BF25 DA 36 BF         jp c,scores_processhighscores4  ; if c is bigger, then this is not a higher score, so end
120+  BF28 23               inc hl
121+  BF29 13               inc de                      ; move to next column
122+  BF2A 10 F5            djnz scores_processhighscores0 ; loop
123+  BF2C 08               ex af,af'                     ; still here, so must be bigger
124+  BF2D 32 0C BF         ld (scores_highscoretmp),a  ; store the position indicator in the tracking byte
125+  BF30 0E 0C            ld c,12
126+  BF32 91               sub c
127+  BF33 D2 14 BF         jp nc,scores_processhighscores3 ; if the place we're looking is less than zero, we've gone to far, so continue, otherwise go again
128+  BF36              scores_processhighscores4
129+  BF36 CD 3A BF         call scores_updatehighscores
130+  BF39 C9               ret
131+  BF3A
132+  BF3A              ;
133+  BF3A              ; Update score table
134+  BF3A              ;
135+  BF3A              scores_updatehighscores:
136+  BF3A 3A 0C BF         ld a,(scores_highscoretmp)  ; get the place we want to overwrite
137+  BF3D FE 00            cp 0
138+  BF3F C8               ret z                       ; if this is 0, didn't get a high score
139+  BF40 FE 1D            cp 29                       ; check against 29... if it's equal, we don't want to copy the current score down one
140+  BF42 CA 75 BF         jp z, scores_updatehighscores3
141+  BF45                                              ; copy old score over one below, if not first
142+  BF45 21 93 BE         ld hl,scores_table
143+  BF48 11 11 00         ld de,17                    ; start at second score, because this is the first one we'd ever need to copy...
144+  BF4B 19               add hl,de                   ; position of first column
145+  BF4C 2B               dec hl
146+  BF4D 2B               dec hl
147+  BF4E 2B               dec hl
148+  BF4F E5               push hl
149+  BF50 11 0C 00         ld de,12
150+  BF53 19               add hl,de                   ; get position of next score
151+  BF54 54 5D            ld de,hl
152+  BF56 E1               pop hl                      ; get hl back
153+  BF57 01 09 00         ld bc,9
154+  BF5A ED B0            ldir
155+  BF5C FE 11            cp 17                       ; see if we're copying into the second place slot (17 memory offset). If so, stop copying back the scores
156+  BF5E CA 75 BF         jp z,scores_updatehighscores3
157+  BF61 21 93 BE         ld hl,scores_table
158+  BF64 11 02 00         ld de,2                    ; ... otherwise, copy back the first score
159+  BF67 19               add hl,de                   ; position of first column
160+  BF68 E5               push hl
161+  BF69 11 0C 00         ld de,12
162+  BF6C 19               add hl,de                   ; get position of next score
163+  BF6D 54 5D            ld de,hl
164+  BF6F E1               pop hl                      ; get hl back
165+  BF70 01 09 00         ld bc,9
166+  BF73 ED B0            ldir
167+  BF75              scores_updatehighscores3:
168+  BF75 06 06            ld b,6                      ; now overwrite
169+  BF77 21 93 BE         ld hl,scores_table
170+  BF7A 16 00            ld d,0
171+  BF7C 5F               ld e,a
172+  BF7D 19               add hl,de                   ; position of first column
173+  BF7E 08               ex af,af'
174+  BF7F 11 89 BE         ld de,scores_current+2      ; position of current score column
175+  BF82              scores_updatehighscores2:
176+  BF82 1A               ld a,(de)
177+  BF83 77               ld (hl),a
178+  BF84 23               inc hl
179+  BF85 13               inc de
180+  BF86 10 FA            djnz scores_updatehighscores2
181+  BF88 11 09 00         ld de,9
182+  BF8B ED 52            sbc hl,de
183+  BF8D 54 5D            ld de,hl                    ; get back to start of entry
184+  BF8F 21 90 BE         ld hl,scores_defaultname    ; still need to overwrite the name
185+  BF92 01 03 00         ld bc,3                      ; 3 chars to copy
186+  BF95 ED B0            ldir
187+  BF97 C9               ret
# file closed: game/scores.asm
 42   BF98                  include "game\diamonds.asm"
# file opened: game/diamonds.asm
  1+  BF98              diamonds_tmp:
  2+  BF98 00               defb 0
  3+  BF99
  4+  BF99              ;
  5+  BF99              ; Holds the number of thousands for the current gem type
  6+  BF99              ;
  7+  BF99              diamonds_score:
  8+  BF99 00               defb 0
  9+  BF9A
 10+  BF9A              ;
 11+  BF9A              ; Changes the attribute of gem and diamond cells based on the frame count
 12+  BF9A              ; Inputs:
 13+  BF9A              ; hl - memory location of gem type
 14+  BF9A              diamonds_twinkle_type:
 15+  BF9A CD 49 B8         call game_getcurrentframe       ; get current frame number
 16+  BF9D E6 07            and 7                           ; want a number from 0-7
 17+  BF9F C6 40            add 64                          ; add to 60 to get attr colour
 18+  BFA1              diamonds_twinkle_type0:
 19+  BFA1 4E 23 46 2B      ld bc,(hl)                      ; get coords into bc
 20+  BFA5 08               ex af, af'
 21+  BFA6 79               ld a,c                          ; load c into a
 22+  BFA7 FE FF            cp 255                          ; is this the end?
 23+  BFA9 CA C6 BF         jp z,diamonds_twinkle_type1           ; step out if so
 24+  BFAC 23               inc hl
 25+  BFAD 23               inc hl
 26+  BFAE 7E               ld a,(hl)                       ; check the state, don't process if collected
 27+  BFAF FE 01            cp 1
 28+  BFB1 CA C7 BF         jp z,diamonds_twinkle_type2           ; step out if so
 29+  BFB4 CD 03 C0         call diamonds_checkforplayer    ; check to see if we've collided with player
 30+  BFB7 DC CE BF         call c,diamonds_collect     ; we collided
 31+  BFBA 23               inc hl
 32+  BFBB 08               ex af,af'
 33+  BFBC 5E 23 56 2B      ld de,(hl)                      ; get the memory location into de
 34+  BFC0 12               ld (de),a                       ; set the value of attr
 35+  BFC1 23               inc hl
 36+  BFC2 23               inc hl                          ; move to next diamond
 37+  BFC3 C3 A1 BF         jp diamonds_twinkle_type0
 38+  BFC6              diamonds_twinkle_type1:
 39+  BFC6 C9               ret
 40+  BFC7              diamonds_twinkle_type2:
 41+  BFC7 23               inc hl                          ; do stuff the we would have done anyway to get to next gem
 42+  BFC8 23               inc hl
 43+  BFC9 23               inc hl
 44+  BFCA 08               ex af,af'
 45+  BFCB C3 A1 BF         jp diamonds_twinkle_type0       ; rejoin main loop
 46+  BFCE
 47+  BFCE              ;
 48+  BFCE              ; Collect the diamond we collided with
 49+  BFCE              ; Inputs:
 50+  BFCE              ; hl - memory location of current diamond, currently on state
 51+  BFCE              ; Output:
 52+  BFCE              ; a - 70 - for yellow on black
 53+  BFCE              diamonds_collect:
 54+  BFCE 36 01            ld (hl),1                       ; collected
 55+  BFD0 E5               push hl
 56+  BFD1 2B               dec hl
 57+  BFD2 2B               dec hl
 58+  BFD3 4E 23 46 2B      ld bc,(hl)                      ; get the coords
 59+  BFD7 CD 44 A8         call screen_getscreencoordsfromcharcoords ; get the screen coords into bc
 60+  BFDA ED 5B 98 BF      ld de,(diamonds_tmp)            ; tmp stores the offset for this type of gem
 61+  BFDE 16 00            ld d,0
 62+  BFE0 21 15 B2         ld hl,sprites
 63+  BFE3 19               add hl,de
 64+  BFE4 CD CF A8         call sprites_drawsprite     ; call the routine to draw the sprite
 65+  BFE7 E1               pop hl
 66+  BFE8 08               ex af,af'
 67+  BFE9 3E 46            ld a,70
 68+  BFEB 08               ex af,af'                       ; make sure a is in the af we'll use for the attr
 69+  BFEC D9               exx
 70+  BFED 3A 99 BF         ld a,(diamonds_score)
 71+  BFF0 47               ld b,a
 72+  BFF1 CD B7 BE         call scores_addthousands
 73+  BFF4 3A 98 BF         ld a,(diamonds_tmp)
 74+  BFF7 FE 40            cp 64                       ; check the gem type offset, if its 64 this is a diamond, so mark the level as completable
 75+  BFF9 C2 01 C0         jp nz,diamonds_collect0
 76+  BFFC 21 60 B8         ld hl,player+13
 77+  BFFF 36 01            ld (hl),1                   ; mark the player as able to complete the level
 78+  C001              diamonds_collect0:
 79+  C001 D9               exx
 80+  C002 C9               ret
 81+  C003
 82+  C003              ;
 83+  C003              ; Checks to see if the gem is hitting a player
 84+  C003              ; Inputs:
 85+  C003              ; bc - coords of diamond we're checking
 86+  C003              diamonds_checkforplayer:
 87+  C003 78               ld a,b               ; multiply b by 8
 88+  C004 07               rlca
 89+  C005 07               rlca
 90+  C006 07               rlca
 91+  C007 47               ld b,a
 92+  C008 ED 5B 53 B8      ld de,(player)       ; get the player coords
 93+  C00C 7B               ld a,e               ; get the vert coord first
 94+  C00D 90               sub b                ; subtract the diamond vertical coord from players
 95+  C00E C6 04            add 4                ; add the max distance
 96+  C010 FE 09            cp 9                ; compare to max*2+1? if carry flag set, they've hit
 97+  C012 D0               ret nc               ; if not, hasn't hit
 98+  C013 79               ld a,c               ; multiply c by 8
 99+  C014 07               rlca
100+  C015 07               rlca
101+  C016 07               rlca
102+  C017 4F               ld c,a
103+  C018 7A               ld a,d               ; get the player horiz coord
104+  C019 91               sub c                ; subtract rock coord
105+  C01A C6 04            add 4                ; add max distance
106+  C01C FE 09            cp 9                ; compare to max*2+1? if carry flag set, they've hit
107+  C01E D0               ret nc
108+  C01F 3E 00            ld a,0
109+  C021 C9               ret
110+  C022
111+  C022
112+  C022              ;
113+  C022              ; Initialise diamonds and gems
114+  C022              ;
115+  C022              diamonds_twinkle
116+  C022 21 99 BF         ld hl,diamonds_score
117+  C025 36 02            ld (hl),2         ; store the score we'll add
118+  C027 21 98 BF         ld hl,diamonds_tmp
119+  C02A 36 40            ld (hl),64         ; store the location the diamond sprite
120+  C02C 21 90 B1         ld hl, level01diamonds
121+  C02F CD 9A BF         call diamonds_twinkle_type
122+  C032 21 99 BF         ld hl,diamonds_score
123+  C035 36 01            ld (hl),1         ; store the score we'll add
124+  C037 21 98 BF         ld hl,diamonds_tmp
125+  C03A 36 70            ld (hl),112         ; store the location the gem sprite
126+  C03C 21 A0 B1         ld hl, level01gems
127+  C03F CD 9A BF         call diamonds_twinkle_type
128+  C042 C9               ret
129+  C043
130+  C043              ;
131+  C043              ; Initialise diamonds and gems
132+  C043              ;
133+  C043              diamonds_init:
134+  C043 21 90 B1         ld hl, level01diamonds
135+  C046 CD 50 C0         call diamonds_init_type
136+  C049 21 A0 B1         ld hl, level01gems
137+  C04C CD 50 C0         call diamonds_init_type
138+  C04F C9               ret
139+  C050
140+  C050              ;
141+  C050              ; Initialise diamonds or gems, get memory addresses
142+  C050              ; Inputs:
143+  C050              ; hl - memory location
144+  C050              diamonds_init_type:
145+  C050 4E               ld c,(hl)                      ; get coords into c
146+  C051 79               ld a,c                          ; load c into add
147+  C052 FE FF            cp 255                          ; is this the end?
148+  C054 CA 6B C0         jp z,diamonds_init_type1             ; step out if so
149+  C057 23               inc hl
150+  C058 46               ld b,(hl)                       ; get coords into b
151+  C059 E5               push hl
152+  C05A CD F1 A7         call screen_getcellattradress ; get memory of attr for this diamond into de
153+  C05D E1               pop hl
154+  C05E 23               inc hl                          ; move to state
155+  C05F 36 00            ld (hl),0
156+  C061 23               inc hl                          ; move to memory
157+  C062 73 23 72 2B      ld (hl),de                      ; store the memory location
158+  C066 23               inc hl                          ; move to next diamond
159+  C067 23               inc hl
160+  C068 C3 50 C0         jp diamonds_init_type
161+  C06B              diamonds_init_type1:
162+  C06B C9               ret
# file closed: game/diamonds.asm
 43   C06C
 44   C06C              ;===========================================================================
 45   C06C              ; main routine - the code execution starts here.
 46   C06C              ; Sets up the new interrupt routine, the memory
 47   C06C              ; banks and jumps to the start loop.
 48   C06C              ;===========================================================================
 49   C06C              main:
 50   C06C
 51   C06C                  ; Draw the title screen
 52   C06C              main_titlescreen:
 53   C06C CD 38 A9         call titlescreen_show
 54   C06F CD 61 B8         call player_init_gamestart
 55   C072
 56   C072              main_lifestart:
 57   C072
 58   C072 CD 7F B8         call player_init_lifestart
 59   C075
 60   C075 CD 9C AA         call lifescreen_draw        ; show the lives remaining screen
 61   C078
 62   C078 CD 00 80         call init_start
 63   C07B CD 11 A7         call screen_draw
 64   C07E CD 6F A6         call buffer_allbuffertoscreen
 65   C081
 66   C081 CD 12 BA         call ship_land              ; land the ship
 67   C084 CD 34 BB         call tank_init
 68   C087 CD 43 C0         call diamonds_init
 69   C08A
 70   C08A              mloop:
 71   C08A 76               halt
 72   C08B CD BA C0         call main_loop_processing
 73   C08E
 74   C08E                  ;
 75   C08E                  ; Check if the player died
 76   C08E                  ;
 77   C08E 21 5D B8         ld hl,player+10
 78   C091 7E               ld a,(hl)                   ; check if the player died this frame
 79   C092 FE 01            cp 1
 80   C094 C2 A6 C0         jp nz,mloop0
 81   C097 CD DB B8         call player_died        ; do end of life housekeeping
 82   C09A 21 5C B8         ld hl,player+9        ; check lives remaining
 83   C09D 7E               ld a,(hl)
 84   C09E FE 00            cp 0
 85   C0A0 CA DC C0         jp z,main_gameover   ; leave the loop if we're done
 86   C0A3 C3 72 C0         jp main_lifestart    ; otherwise, start a new life
 87   C0A6              mloop0:
 88   C0A6                  ;
 89   C0A6                  ; Check if the player completed the level
 90   C0A6                  ;
 91   C0A6 21 60 B8         ld hl,player+13
 92   C0A9 7E               ld a,(hl)
 93   C0AA FE 01            cp 1
 94   C0AC C2 8A C0         jp nz,mloop
 95   C0AF CD DC B9         call player_checkforexit
 96   C0B2 FE 01            cp 1                        ; look at return, if 1, level has been completed
 97   C0B4 CA E2 C0         jp z,main_endlevel          ; jump to level transition screen
 98   C0B7 C3 8A C0         jp mloop                ; start the loop again
 99   C0BA
100   C0BA
101   C0BA              main_loop_processing:
102   C0BA
103   C0BA CD 3D A6         call buffer_buffertoscreen  ; copy buffer to screen
104   C0BD CD BD A5         call buffer_clearlist       ; zero the updated lines list
105   C0C0 CD 0B B9         call player_drawplayer      ; delete player
106   C0C3 CD D0 B3         call control_keyboard       ; check keyboard
107   C0C6 CD 0B B9         call player_drawplayer      ; draw player
108   C0C9 CD 63 BB         call tank_process           ; prcoess the tank
109   C0CC CD FD B9         call ship_process           ; proces the ship
110   C0CF CD 5D BD         call rocks_processrocks     ; process falling rocks
111   C0D2 CD 22 C0         call diamonds_twinkle       ; make the diamonds twinkle
112   C0D5 CD BE BE         call scores_printscore      ; update the score on screen
113   C0D8 CD 3A B8         call game_incrementframe    ; increment the game frame
114   C0DB
115   C0DB C9               ret
116   C0DC
117   C0DC              main_gameover:
118   C0DC CD EF AA         call gameover_draw          ; show the game over screen
119   C0DF C3 6C C0         jp main_titlescreen         ; go back to title
120   C0E2
121   C0E2              main_endlevel:
122   C0E2 CD C1 B8         call player_recordcurrentscore
123   C0E5 CD DD AB         call endlevel_draw          ; show the end level screen
124   C0E8 C3 72 C0         jp main_lifestart           ; start a new life
125   C0EB
126   C0EB              ;===========================================================================
127   C0EB              ; Stack.
128   C0EB              ;===========================================================================
129   C0EB
130   C0EB              ; Stack: this area is reserved for the stack
131   C0EB              STACK_SIZE: equ 100    ; in words
132   C0EB
133   C0EB              ; Reserve stack space
134   C0EB 00 00            defw 0  ; WPMEM, 2
135   C0ED              stack_bottom:
136   C0ED 00 00 00...      defs    STACK_SIZE*2, 0
137   C1B5              stack_top:
138   C1B5 00 00            defw 0  ; WPMEM, 2
139   C1B7
140   C1B7                     SAVESNA "ThePit.sna", main
# file closed: main.asm
