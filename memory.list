# file opened: main.asm
  1   0000                  DEVICE ZXSPECTRUM48
  2   0000
  3   0000                  ORG $8000
  4   8000
  5   8000              ;===========================================================================
  6   8000              ; Persistent watchpoint.
  7   8000              ; Change WPMEMx (remove the 'x' from WPMEMx) below to activate.
  8   8000              ; If you do so the program will hit a breakpoint when it tries to
  9   8000              ; write to the first byte of the 3rd line.
 10   8000              ; When program breaks in the fill_memory sub routine please hover over hl
 11   8000              ; to see that it contains 0x5804 or COLOR_SCREEN+64.
 12   8000              ;===========================================================================
 13   8000
 14   8000              ; WPMEMx 0x5840, 1, w
 15   8000
 16   8000
 17   8000              ;===========================================================================
 18   8000              ; Include modules
 19   8000              ;===========================================================================
 20   8000                  include "init.asm"
# file opened: init.asm
  1+  8000              ;
  2+  8000              ; Set up at start up
  3+  8000              ;
  4+  8000              init_start:
  5+  8000              ; We want a black screen.
  6+  8000
  7+  8000 3E 47            ld a,71             ; white ink (7) on black paper (0),
  8+  8002                                      ; bright (64).
  9+  8002 CD 67 80         call utilities_clearscreen
 10+  8005 32 8D 5C         ld (23693),a        ; set our screen colours.
 11+  8008 AF               xor a               ; quick way to load accumulator with zero.
 12+  8009 CD 9B 22         call 8859           ; set permanent border colours.
 13+  800C
 14+  800C 21 0D A7         ld hl,screen_offset ; reset some temp variables
 15+  800F 36 00            ld (hl),0
 16+  8011 21 0E A7         ld hl,screen_tmp
 17+  8014 36 00            ld (hl),0
 18+  8016 21 A5 A5         ld hl,buffer_tmp
 19+  8019 36 00            ld (hl),0
 20+  801B 23               inc hl
 21+  801C 36 00            ld (hl),0
 22+  801E
 23+  801E CD 25 B9         call game_resetcurrentframe ; reset current frame
 24+  8021
 25+  8021 C9               ret
 26+  8022
 27+  8022              ;
 28+  8022              ;   Start coord
 29+  8022              ;   vert c, horiz b
 30+  8022              init_coord:
 31+  8022 18 30            defb 24,48
 32+  8024
 33+  8024              ;
 34+  8024              ; Number of lives to start
 35+  8024              ;
 36+  8024              init_lives:
 37+  8024 03               defb 3
 38+  8025
 39+  8025              ;
 40+  8025              ; Score to start
 41+  8025              ;
 42+  8025              init_score:
 43+  8025 30 30 30 30      defb '000000'
 43+  8029 30 30
# file closed: init.asm
 21   802B                  include "utilities.asm"
# file opened: utilities.asm
  1+  802B              ; ##########################################################################
  2+  802B              ; Print a character
  3+  802B              ; Inputs:
  4+  802B              ; b - x coord
  5+  802B              ; c - y coord
  6+  802B              ; d - character
  7+  802B              ; e - colour
  8+  802B              ; ##########################################################################
  9+  802B              utilities_print_char:
 10+  802B 7B               ld a,e
 11+  802C 32 8F 5C         ld (23695),a        ; set our temporary screen colours.
 12+  802F 3E 16            ld a,22
 13+  8031 D7               rst 16              ; Calls the Sinclair PRINT AT routine
 14+  8032 78               ld a,b              ; Gets the X co-ordinate
 15+  8033 3D               dec a
 16+  8034 D7               rst 16
 17+  8035 79               ld a,c              ; and the Y co-ordinate
 18+  8036 D7               rst 16              ; So, essentially PRINT AT X,Y; like in BASIC
 19+  8037 7A               ld a,d              ; ASCII code for udg.
 20+  8038 D7               rst 16              ; draw block.
 21+  8039 C9               ret
 22+  803A
 23+  803A
 24+  803A              ;Inputs:
 25+  803A              ;     DE and A are factors
 26+  803A              ;Outputs:
 27+  803A              ;     A is not changed
 28+  803A              ;     B is 0
 29+  803A              ;     C is not changed
 30+  803A              ;     DE is not changed
 31+  803A              ;     HL is the product
 32+  803A              ;Time:
 33+  803A              ;     342+6x
 34+  803A              ;
 35+  803A              utilities_multiply:
 36+  803A 06 08            ld b,8          ;7           7
 37+  803C 21 00 00         ld hl,0         ;10         10
 38+  803F 29               add hl,hl     ;11*8       88
 39+  8040 07               rlca          ;4*8        32
 40+  8041 30 01            jr nc,$+3     ;(12|18)*8  96+6x
 41+  8043 19                   add hl,de   ;--         --
 42+  8044 10 F9            djnz $-5      ;13*7+8     99
 43+  8046 C9               ret             ;10         10
 44+  8047
 45+  8047              utilities_waitforkey:
 46+  8047 21 08 5C         ld hl,23560         ; LAST K system variable.
 47+  804A 36 00            ld (hl),0           ; put null value there.
 48+  804C              utilities_waitforkey0:
 49+  804C 7E               ld a,(hl)           ; new value of LAST K.
 50+  804D FE 00            cp 0                ; is it still zero?
 51+  804F 28 FB            jr z,utilities_waitforkey0           ; yes, so no key pressed.
 52+  8051 C9               ret                 ; key was pressed.
 53+  8052
 54+  8052              ;
 55+  8052              ; Waits number of frames for keypress. If got, returns 1, if not 0
 56+  8052              ; Inputs:
 57+  8052              ; a - number of frames to waits
 58+  8052              ; Ouputs:
 59+  8052              ; e - 0 not pressed, 1 pressed
 60+  8052              utilities_waitforkey_forframes:
 61+  8052 21 08 5C         ld hl,23560         ; LAST K system variable.
 62+  8055 36 00            ld (hl),0           ; put null value there.
 63+  8057 47               ld b,a              ; number of frames to wait
 64+  8058              utilities_waitforkey_forframes0:
 65+  8058 7E               ld a,(hl)           ; new value of LAST K.
 66+  8059 FE 00            cp 0                ; is it still zero?
 67+  805B 28 03            jr z,utilities_waitforkey_forframes1           ; yes, so no key pressed.
 68+  805D 1E 01            ld e,1              ; set the pressed flag
 69+  805F C9               ret                 ; key was pressed.
 70+  8060              utilities_waitforkey_forframes1:
 71+  8060 76               halt                ; wait for frame
 72+  8061 76               halt                ; wait for frame
 73+  8062 10 F4            djnz utilities_waitforkey_forframes0 ; loop again
 74+  8064 1E 00            ld e,0              ; nothing pressed in time
 75+  8066 C9               ret
 76+  8067
 77+  8067              ;
 78+  8067              ; Clears the screen
 79+  8067              ; Inputs:
 80+  8067              ; a - attribute colour
 81+  8067              utilities_clearscreen:
 82+  8067 76               halt
 83+  8068 21 00 58         ld hl,22528         ; attr
 84+  806B 11 01 58         ld de,22529         ; attr+1
 85+  806E 01 FF 02         ld bc,767
 86+  8071 77               ld (hl),a
 87+  8072 ED B0            ldir
 88+  8074
 89+  8074 21 00 40         ld hl, 16384        ;pixels
 90+  8077 11 01 40         ld de, 16385        ;pixels + 1
 91+  807A 01 FF 17         ld bc, 6143         ;pixels area length - 1
 92+  807D 36 00            ld (hl), 0          ;set first byte to '0'
 93+  807F ED B0            ldir                ;copy bytes
 94+  8081
 95+  8081 C9               ret
 96+  8082
 97+  8082              ;
 98+  8082              ; Wait for a number of frames
 99+  8082              ; Inputs:
100+  8082              ; b - number of frames
101+  8082              utilities_pauseforframes:
102+  8082 76               halt
103+  8083 10 FD            djnz utilities_pauseforframes
104+  8085 C9               ret
105+  8086
106+  8086              utilities_readkey:
107+  8086 21 A6 80         LD HL,utilties_keymap              ; Point HL at the keyboard list
108+  8089 16 08            LD D,8                                  ; This is the number of ports (rows) to check
109+  808B 0E FE            LD C,$FE                            ; C is always FEh for reading keyboard ports
110+  808D              utilities_readkey_0:
111+  808D 46               LD B,(HL)                               ; Get the keyboard port address from table
112+  808E 23               INC HL                                  ; Increment to list of keys
113+  808F ED 78            IN A,(C)                                ; Read the row of keys in
114+  8091 E6 1F            AND $1F                                     ; We are only interested in the first five bits
115+  8093 1E 05            LD E,5                                  ; This is the number of keys in the row
116+  8095              utilities_readkey_1:
117+  8095 CB 3F            SRL A                                   ; Shift A right; bit 0 sets carry bit
118+  8097 30 0B            JR NC,utilities_readkey_2   ; If the bit is 0, we've found our key
119+  8099 23               INC HL                                  ; Go to next table address
120+  809A 1D               DEC E                                   ; Decrement key loop counter
121+  809B 20 F8            JR NZ,utilities_readkey_1   ; Loop around until this row finished
122+  809D 15               DEC D                                   ; Decrement row loop counter
123+  809E 20 ED            JR NZ,utilities_readkey_0   ; Loop around until we are done
124+  80A0 A7               AND A                                   ; Clear A (no key found)
125+  80A1 C3 86 80         jp utilities_readkey
126+  80A4              utilities_readkey_2:
127+  80A4 7E               LD A,(HL)                               ; We've found a key at this point; fetch the character code!
128+  80A5 C9               RET
129+  80A6
130+  80A6              utilties_keymap:
131+  80A6 FE 23 5A 58      defb $FE,"#","Z","X","C","V"
131+  80AA 43 56
132+  80AC FD 41 53 44      defb $FD,"A","S","D","F","G"
132+  80B0 46 47
133+  80B2 FB 51 57 45      defb $FB,"Q","W","E","R","T"
133+  80B6 52 54
134+  80B8 F7 31 32 33      defb $F7,"1","2","3","4","5"
134+  80BC 34 35
135+  80BE EF 30 39 38      defb $EF,"0","9","8","7","6"
135+  80C2 37 36
136+  80C4 DF 50 4F 49      defb $DF,"P","O","I","U","Y"
136+  80C8 55 59
137+  80CA BF 23 4C 4B      defb $BF,"#","L","K","J","H"
137+  80CE 4A 48
138+  80D0 7F 20 23 4D      defb $7F," ","#","M","N","B"
138+  80D4 4E 42
139+  80D6
140+  80D6
141+  80D6              ;
142+  80D6              ; Generates a randomish number in the range 0 to e
143+  80D6              ; Inputs:
144+  80D6              ; e - upper value
145+  80D6              ; Outputs:
146+  80D6              ; a - random number
147+  80D6              utilities_randomupper
148+  80D6 3A FB B8         ld a,(game_framenumber)
149+  80D9 6F               ld l,a
150+  80DA 26 00            ld h,0
151+  80DC 16 00            ld d,0
152+  80DE 42 4B            ld bc,de
153+  80E0              utilities_randomupper0:
154+  80E0 B7               or a
155+  80E1 ED 42            sbc hl,bc
156+  80E3 F2 E0 80         jp p,utilities_randomupper0
157+  80E6 09               add hl,bc
158+  80E7 01 00 00         ld bc,0
159+  80EA 09               add hl,bc
160+  80EB 7D               ld a,l
161+  80EC C9               ret
# file closed: utilities.asm
 22   80ED                  include "strings.asm"
# file opened: strings.asm
  1+  80ED              string_score1:
  2+  80ED 04 00 53 43      defb 4,0,'SCORE1',255
  2+  80F1 4F 52 45 31
  2+  80F5 FF
  3+  80F6              string_scorenumbers1:
  4+  80F6 04 01 30 30      defb 4,1,'000000',255
  4+  80FA 30 30 30 30
  4+  80FE FF
  5+  80FF              string_company:
  6+  80FF 0E 00 45 4E      defb 14,0,'ENV',255
  6+  8103 56 FF
  7+  8105              string_credits:
  8+  8105 0C 01 50 4C      defb 12,1,'PLAYER 1',255
  8+  8109 41 59 45 52
  8+  810D 20 31 FF
  9+  8110              string_score2:
 10+  8110 16 00 53 43      defb 22,0,'SCORE2',255
 10+  8114 4F 52 45 32
 10+  8118 FF
 11+  8119              string_scorenumbers2:
 12+  8119 16 01 30 30      defb 22,1,'000000',255
 12+  811D 30 30 30 30
 12+  8121 FF
 13+  8122              string_titlescreen_copyright:
 14+  8122 04 16 7F 20      defb 4,22, 127,' 1982 AW ZILEC ELC LTD',255
 14+  8126 31 39 38 32
 14+  812A 20 41 57 20
 14+  812E 5A 49 4C 45
 14+  8132 43 20 45 4C
 14+  8136 43 20 4C 54
 14+  813A 44 FF
 15+  813C
 16+  813C
 17+  813C              string_alttitlescreen_1:
 18+  813C 0C 00 43 52      defb 12,0,'CREDITS 1',255
 18+  8140 45 44 49 54
 18+  8144 53 20 31 FF
 19+  8148              string_alttitlescreen_2:
 20+  8148 00 02 20 20      defb 0,2,'           THE OBJECT',254
 20+  814C 20 20 20 20
 20+  8150 20 20 20 20
 20+  8154 20 54 48 45
 20+  8158 20 4F 42 4A
 20+  815C 45 43 54 FE
 21+  8160 00 03 20 20      defb 0,3,'          OF THIS GAME',254
 21+  8164 20 20 20 20
 21+  8168 20 20 20 20
 21+  816C 4F 46 20 54
 21+  8170 48 49 53 20
 21+  8174 47 41 4D 45
 21+  8178 FE
 22+  8179 00 04 20 20      defb 0,4,'         IS TO DIG DOWN',254
 22+  817D 20 20 20 20
 22+  8181 20 20 20 49
 22+  8185 53 20 54 4F
 22+  8189 20 44 49 47
 22+  818D 20 44 4F 57
 22+  8191 4E FE
 23+  8193 00 05 20 20      defb 0,5,'        TO THE BOTTOM PIT',254
 23+  8197 20 20 20 20
 23+  819B 20 20 54 4F
 23+  819F 20 54 48 45
 23+  81A3 20 42 4F 54
 23+  81A7 54 4F 4D 20
 23+  81AB 50 49 54 FE
 24+  81AF 00 06 20 20      defb 0,6,'               AND',254
 24+  81B3 20 20 20 20
 24+  81B7 20 20 20 20
 24+  81BB 20 20 20 20
 24+  81BF 20 41 4E 44
 24+  81C3 FE
 25+  81C4 00 07 20 20      defb 0,7,'        COLLECT AT LEAST',254
 25+  81C8 20 20 20 20
 25+  81CC 20 20 43 4F
 25+  81D0 4C 4C 45 43
 25+  81D4 54 20 41 54
 25+  81D8 20 4C 45 41
 25+  81DC 53 54 FE
 26+  81DF 00 08 20 20      defb 0,8,'         ONE LARGE JEWEL',254
 26+  81E3 20 20 20 20
 26+  81E7 20 20 20 4F
 26+  81EB 4E 45 20 4C
 26+  81EF 41 52 47 45
 26+  81F3 20 4A 45 57
 26+  81F7 45 4C FE
 27+  81FA 00 09 20 20      defb 0,9,'              THEN',254
 27+  81FE 20 20 20 20
 27+  8202 20 20 20 20
 27+  8206 20 20 20 20
 27+  820A 54 48 45 4E
 27+  820E FE
 28+  820F 00 0A 20 20      defb 0,10,'         RETURN TO SHIP',254
 28+  8213 20 20 20 20
 28+  8217 20 20 20 52
 28+  821B 45 54 55 52
 28+  821F 4E 20 54 4F
 28+  8223 20 53 48 49
 28+  8227 50 FE
 29+  8229 00 0B 20 20      defb 0,11,'         THRU UPPER PIT',255
 29+  822D 20 20 20 20
 29+  8231 20 20 20 54
 29+  8235 48 52 55 20
 29+  8239 55 50 50 45
 29+  823D 52 20 50 49
 29+  8241 54 FF
 30+  8243              string_alttitlescreen_3:
 31+  8243 00 0D 20 20      defb 0,13,'    SINGLE BONUS  5000 POINTS',254
 31+  8247 20 20 53 49
 31+  824B 4E 47 4C 45
 31+  824F 20 42 4F 4E
 31+  8253 55 53 20 20
 31+  8257 35 30 30 30
 31+  825B 20 50 4F 49
 31+  825F 4E 54 53 FE
 32+  8263 00 0E 20 20      defb 0,14,'      COLLECT 1 LARGE JEWEL',254
 32+  8267 20 20 20 20
 32+  826B 43 4F 4C 4C
 32+  826F 45 43 54 20
 32+  8273 31 20 4C 41
 32+  8277 52 47 45 20
 32+  827B 4A 45 57 45
 32+  827F 4C FE
 33+  8281 00 0F 20 20      defb 0,15,'       AND RETURN TO SHIP',254
 33+  8285 20 20 20 20
 33+  8289 20 41 4E 44
 33+  828D 20 52 45 54
 33+  8291 55 52 4E 20
 33+  8295 54 4F 20 53
 33+  8299 48 49 50 FE
 34+  829D 00 11 20 20      defb 0,17,'    DOUBLE BONUS  10000 POINTS',254
 34+  82A1 20 20 44 4F
 34+  82A5 55 42 4C 45
 34+  82A9 20 42 4F 4E
 34+  82AD 55 53 20 20
 34+  82B1 31 30 30 30
 34+  82B5 30 20 50 4F
 34+  82B9 49 4E 54 53
 34+  82BD FE
 35+  82BE 00 12 20 20      defb 0,18,'    COLLECT ALL 3 LARGE JEWELS',254
 35+  82C2 20 20 43 4F
 35+  82C6 4C 4C 45 43
 35+  82CA 54 20 41 4C
 35+  82CE 4C 20 33 20
 35+  82D2 4C 41 52 47
 35+  82D6 45 20 4A 45
 35+  82DA 57 45 4C 53
 35+  82DE FE
 36+  82DF 00 13 20 20      defb 0,19,'       OR   ALL 4 SMALL JEWELS',254
 36+  82E3 20 20 20 20
 36+  82E7 20 4F 52 20
 36+  82EB 20 20 41 4C
 36+  82EF 4C 20 34 20
 36+  82F3 53 4D 41 4C
 36+  82F7 4C 20 4A 45
 36+  82FB 57 45 4C 53
 36+  82FF FE
 37+  8300 00 15 20 20      defb 0,21,'    TRIPLE BONUS  15000 POINTS',254
 37+  8304 20 20 54 52
 37+  8308 49 50 4C 45
 37+  830C 20 42 4F 4E
 37+  8310 55 53 20 20
 37+  8314 31 35 30 30
 37+  8318 30 20 50 4F
 37+  831C 49 4E 54 53
 37+  8320 FE
 38+  8321 00 16 20 20      defb 0,22,'       COLLECT ALL 7 JEWELS',255
 38+  8325 20 20 20 20
 38+  8329 20 43 4F 4C
 38+  832D 4C 45 43 54
 38+  8331 20 41 4C 4C
 38+  8335 20 37 20 4A
 38+  8339 45 57 45 4C
 38+  833D 53 FF
 39+  833F
 40+  833F              string_lifescreen_player:
 41+  833F 0B 00 20 50      defb 11,0,' PLAYER 1 ',255
 41+  8343 4C 41 59 45
 41+  8347 52 20 31 20
 41+  834B FF
 42+  834C              string_lifescreen_lives:
 43+  834C 0B 03 30 20      defb 11,3,48,' MEN LEFT',255
 43+  8350 4D 45 4E 20
 43+  8354 4C 45 46 54
 43+  8358 FF
 44+  8359              string_lifescreen_lastman:
 45+  8359 0C 03 4C 41      defb 12,3,'LAST MAN',255
 45+  835D 53 54 20 4D
 45+  8361 41 4E FF
 46+  8364
 47+  8364              string_gameoverscreen_gameover:
 48+  8364 0C 06 47 41      defb 12,6,'GAME OVER',255
 48+  8368 4D 45 20 4F
 48+  836C 56 45 52 FF
 49+  8370              string_gameoverscreen_copyright:
 50+  8370 05 12 7F 20      defb 5,18,127,' 1982 AW ZILEC ELC LTD',255
 50+  8374 31 39 38 32
 50+  8378 20 41 57 20
 50+  837C 5A 49 4C 45
 50+  8380 43 20 45 4C
 50+  8384 43 20 4C 54
 50+  8388 44 FF
 51+  838A              string_gameoverscreen_bestscores:
 52+  838A 07 16 42 45      defb 7,22,'BEST SCORES TODAY',255
 52+  838E 53 54 20 53
 52+  8392 43 4F 52 45
 52+  8396 53 20 54 4F
 52+  839A 44 41 59 FF
 53+  839E              string_gameover_credits:
 54+  839E 0C 01 43 52      defb 12,1,'CREDITS 0',255
 54+  83A2 45 44 49 54
 54+  83A6 53 20 30 FF
 55+  83AA
 56+  83AA              string_highscore_congratulations:
 57+  83AA 08 05 43 4F      defb 8,5,'CONGRATULATIONS',255
 57+  83AE 4E 47 52 41
 57+  83B2 54 55 4C 41
 57+  83B6 54 49 4F 4E
 57+  83BA 53 FF
 58+  83BC              string_highscore_player1:
 59+  83BC 0C 07 50 4C      defb 12,7,'PLAYER 1',255
 59+  83C0 41 59 45 52
 59+  83C4 20 31 FF
 60+  83C7              string_highscore_player2:
 61+  83C7 0C 07 50 4C      defb 12,7,'PLAYER 2',255
 61+  83CB 41 59 45 52
 61+  83CF 20 32 FF
 62+  83D2              string_highscore_youhaveearned:
 63+  83D2 08 0A 59 4F      defb 8,10,'YOU HAVE EARNED',255
 63+  83D6 55 20 48 41
 63+  83DA 56 45 20 45
 63+  83DE 41 52 4E 45
 63+  83E2 44 FF
 64+  83E4              string_highscore_place1:
 65+  83E4 06 0C 54 48      defb 6,12,'THE GREATEST SCORE',255
 65+  83E8 45 20 47 52
 65+  83EC 45 41 54 45
 65+  83F0 53 54 20 53
 65+  83F4 43 4F 52 45
 65+  83F8 FF
 66+  83F9              string_highscore_place2:
 67+  83F9 06 0C 54 48      defb 6,12,'THE 2ND BEST SCORE',255
 67+  83FD 45 20 32 4E
 67+  8401 44 20 42 45
 67+  8405 53 54 20 53
 67+  8409 43 4F 52 45
 67+  840D FF
 68+  840E              string_highscore_place3:
 69+  840E 06 0C 54 48      defb 6,12,'THE 3RD BEST SCORE',255
 69+  8412 45 20 33 52
 69+  8416 44 20 42 45
 69+  841A 53 54 20 53
 69+  841E 43 4F 52 45
 69+  8422 FF
 70+  8423              string_highscore_pleaseenter
 71+  8423 03 0F 52 45      defb 3,15,'RECORD YOUR INITIALS BELOW',255
 71+  8427 43 4F 52 44
 71+  842B 20 59 4F 55
 71+  842F 52 20 49 4E
 71+  8433 49 54 49 41
 71+  8437 4C 53 20 42
 71+  843B 45 4C 4F 57
 71+  843F FF
 72+  8440
 73+  8440              string_endlevel_youhaveearned:
 74+  8440 08 0B 59 4F      defb 8,11,'YOU HAVE EARNED',255
 74+  8444 55 20 48 41
 74+  8448 56 45 20 45
 74+  844C 41 52 4E 45
 74+  8450 44 FF
 75+  8452              string_endlevel_bonus1:
 76+  8452 09 0D 53 49      defb 9,13,'SINGLE BONUS',255
 76+  8456 4E 47 4C 45
 76+  845A 20 42 4F 4E
 76+  845E 55 53 FF
 77+  8461              string_endlevel_bonus2:
 78+  8461 09 0D 44 4F      defb 9,13,'DOUBLE BONUS',255
 78+  8465 55 42 4C 45
 78+  8469 20 42 4F 4E
 78+  846D 55 53 FF
 79+  8470              string_endlevel_bonus3:
 80+  8470 09 0D 54 52      defb 9,13,'TRIPLE BONUS',255
 80+  8474 49 50 4C 45
 80+  8478 20 42 4F 4E
 80+  847C 55 53 FF
 81+  847F              string_endlevel_points1:
 82+  847F 0A 0F 35 30      defb 10,15,'5000 POINTS',255
 82+  8483 30 30 20 50
 82+  8487 4F 49 4E 54
 82+  848B 53 FF
 83+  848D              string_endlevel_points2:
 84+  848D 09 0F 31 30      defb 9,15,'10000 POINTS',255
 84+  8491 30 30 30 20
 84+  8495 50 4F 49 4E
 84+  8499 54 53 FF
 85+  849C              string_endlevel_points3:
 86+  849C 09 0F 31 35      defb 9,15,'15000 POINTS',255
 86+  84A0 30 30 30 20
 86+  84A4 50 4F 49 4E
 86+  84A8 54 53 FF
 87+  84AB              string_endlevel_anothergo:
 88+  84AB 08 12 48 41      defb 8,18,'HAVE ANOTHER GO',255
 88+  84AF 56 45 20 41
 88+  84B3 4E 4F 54 48
 88+  84B7 45 52 20 47
 88+  84BB 4F FF
 89+  84BD              ;
 90+  84BD              ; Prints specified string
 91+  84BD              ; Inputs:
 92+  84BD              ; de: pointer to string
 93+  84BD              ; bc: length of string
 94+  84BD              ;
 95+  84BD              ; Print String Data
 96+  84BD              ; First two bytes of string contain X and Y char position, then the string
 97+  84BD              ; Individual strings are terminated with 0xFE
 98+  84BD              ; End of data is terminated with 0xFF
 99+  84BD              ; HL: Address of string
100+  84BD              ;
101+  84BD 5E           string_print:           LD E,(HL)                       ; Fetch the X coordinate
102+  84BE 23                                   INC HL                          ; Increase HL to the next memory location
103+  84BF 56                                   LD D,(HL)                       ; Fetch the Y coordinate
104+  84C0 23                                   INC HL                          ; Increase HL to the next memory location
105+  84C1 CD D4 84                             CALL string_getcharaddress           ; Calculate the screen address (in DE)
106+  84C4 7E           string_print_0:         LD A,(HL)                       ; Fetch the character to print
107+  84C5 23                                   INC HL                          ; Increase HL to the next character
108+  84C6 FE FE                                CP 0xFE                         ; Compare with 0xFE
109+  84C8 28 F3                                JR Z,string_print               ; If it is equal to 0xFE then loop back to print next string
110+  84CA D0                                   RET NC                          ; If it is greater or equal to (carry bit set) then
111+  84CB E5                                   PUSH HL                         ; Push HL on stack (Print_Char will not preserve HL)
112+  84CC CD E4 84                             CALL Print_Char                 ; Print the character
113+  84CF E1                                   POP HL                          ; Retrieve HL back off the stack
114+  84D0 1C                                   INC E                           ; Go to the next screen address
115+  84D1 18 F1                                JR string_print_0               ; Loop back to print next character
116+  84D3 C9                                   RET
117+  84D4
118+  84D4              ; Get screen address
119+  84D4              ; D = Y character position
120+  84D4              ; E = X character position
121+  84D4              ; Returns address in DE
122+  84D4              ;
123+  84D4 7A           string_getcharaddress:       LD A,D
124+  84D5 E6 07                                AND %00000111
125+  84D7 1F                                   RRA
126+  84D8 1F                                   RRA
127+  84D9 1F                                   RRA
128+  84DA 1F                                   RRA
129+  84DB B3                                   OR E
130+  84DC 5F                                   LD E,A
131+  84DD 7A                                   LD A,D
132+  84DE E6 18                                AND %00011000
133+  84E0 F6 40                                OR %01000000
134+  84E2 57                                   LD D,A
135+  84E3 C9                                   RET                             ; Returns screen address in DE
136+  84E4
137+  84E4              ; Print a single character out
138+  84E4              ; A:  Character to print
139+  84E4              ; DE: Screen address to print character at
140+  84E4              ;
141+  84E4 21 00 3C     Print_Char:             LD HL,0x3C00                    ; Address of character set table in ROM
142+  84E7 06 00                                LD B,0                          ; Set BC to A
143+  84E9 4F                                   LD C,A
144+  84EA E6 FF                                AND 0xFF                        ; Clear the carry bit
145+  84EC CB 11                                RL C                            ; Multiply BC by 8 (shift left 3 times)
146+  84EE CB 10                                RL B
147+  84F0 CB 11                                RL C
148+  84F2 CB 10                                RL B
149+  84F4 CB 11                                RL C
150+  84F6 CB 10                                RL B
151+  84F8 09                                   ADD HL,BC                       ; Get the character address in HL
152+  84F9 0E 08                                LD C,8                          ; Loop counter
153+  84FB D5                                   PUSH DE
154+  84FC 7E           Print_Char_1:           LD A,(HL)                       ; Get the byte from the ROM into A
155+  84FD 12                                   LD (DE),A                       ; Stick A onto the screen
156+  84FE 14                                   INC D                           ; Goto next line on screen
157+  84FF 2C                                   INC L                           ; Goto next byte of character
158+  8500 0D                                   DEC C                           ; Decrease the loop counter
159+  8501 20 F9                                JR NZ,Print_Char_1              ; Loop around whilst it is Not Zero (NZ)
160+  8503 D1                                   POP DE
161+  8504 C9                                   RET                             ; Return from the subroutine
# file closed: strings.asm
 23   8505                  include "screen\buffer.asm"
# file opened: screen/buffer.asm
  1+  8505              buffer_buffer:
  2+  8505 00 00 00...      defs 7424                   ; area reserved for screen
  3+  A205
  4+  A205              buffer_attr_buffer:
  5+  A205 00 00 00...      defs 928                    ; attrs buffer area
  6+  A5A5
  7+  A5A5              buffer_tmp:
  8+  A5A5 00 00            defb 0,0                    ; temp area
  9+  A5A7
 10+  A5A7              buffer_updatedlines:
 11+  A5A7 FF FF FF...      defs 21,255
 12+  A5BC
 13+  A5BC              buffer_updateall:
 14+  A5BC 00               defb 0
 15+  A5BD
 16+  A5BD              ;
 17+  A5BD              ; Stores a line number in the update list
 18+  A5BD              ; Inputs:
 19+  A5BD              ; a - row number
 20+  A5BD              buffer_marklineforupdate:
 21+  A5BD FE 15            cp 21
 22+  A5BF D0               ret nc                          ; dont store lines that we shouldn't draw
 23+  A5C0 5F               ld e,a                          ; store in e
 24+  A5C1 06 15            ld b,21
 25+  A5C3 21 A7 A5         ld hl,buffer_updatedlines
 26+  A5C6              buffer_marklineforupdate0:
 27+  A5C6 7E               ld a,(hl)                       ; get the line stored in updated lines
 28+  A5C7 BB               cp e                            ; is this the same as the row number passed in?
 29+  A5C8 C8               ret z                           ; if so, don't need to do anything
 30+  A5C9 FE FF            cp 255                          ; is this 255, ie the end of the buffer
 31+  A5CB C2 D0 A5         jp nz,buffer_marklineforupdate1 ; if not, move to next
 32+  A5CE 73               ld (hl),e                       ; if it is, this spot is empty, so store the row number
 33+  A5CF C9               ret                             ; and finish
 34+  A5D0              buffer_marklineforupdate1:
 35+  A5D0 23               inc hl
 36+  A5D1 10 F3            djnz buffer_marklineforupdate0
 37+  A5D3 C9               ret
 38+  A5D4
 39+  A5D4              ;
 40+  A5D4              ; Zeroes the updated lines list
 41+  A5D4              ;
 42+  A5D4              buffer_clearlist:
 43+  A5D4 06 15            ld b,21
 44+  A5D6 21 A7 A5         ld hl,buffer_updatedlines
 45+  A5D9              buffer_clearlist0:
 46+  A5D9 36 FF            ld (hl),255
 47+  A5DB 23               inc hl
 48+  A5DC 10 FB            djnz buffer_clearlist0
 49+  A5DE C9               ret
 50+  A5DF
 51+  A5DF              ;
 52+  A5DF              ; Copies the buffer to the screen. Use stack.
 53+  A5DF              ; Inputs:
 54+  A5DF              ; a - row number to display - 0 is first line
 55+  A5DF              ;
 56+  A5DF              buffer_bufferlinetoscreen:
 57+  A5DF 4F               ld c,a                          ; store a
 58+  A5E0 ED 5B 0D A7      ld de,(screen_offset)          ; load the screen offset, this is in rows, want it *256
 59+  A5E4 83               add a,e                       ; add the row number
 60+  A5E5 11 00 01         ld de,256
 61+  A5E8 CD 3A 80         call utilities_multiply
 62+  A5EB 54 5D            ld de,hl
 63+  A5ED 21 05 85         ld hl,buffer_buffer
 64+  A5F0 19               add hl,de                   ; add the offset
 65+  A5F1 79               ld a,c                      ; get original row back
 66+  A5F2 ED 73 50 A6      ld (buffer_bufferlinetoscreen1+1),sp ; this is some self-modifying code; stores the stack pointer in an ld sp,nn instruction at the end
 67+  A5F6 D9               exx
 68+  A5F7 0E 00            ld c,0                      ; zero horizontal
 69+  A5F9 47               ld b,a                      ; load the row number into vertical coord
 70+  A5FA 04               inc b
 71+  A5FB 04               inc b                       ; move forward 2 to allow for scores
 72+  A5FC CD F7 A7         call screen_getcelladdress  ; get the memory into de
 73+  A5FF 21 10 00         ld hl,16                    ; offset by 16 chars to get to the centre, since populating stack from right
 74+  A602 19               add hl,de
 75+  A603              buffer_bufferlinetoscreen0:
 76+  A603 D9               exx                         ; hl is now buffer
 77+  A604 23               inc hl
 78+  A605 23               inc hl                      ; move hl forward 2 to skip first two blocks
 79+  A606 F9               ld sp,hl                    ; do first fourteen for left hand side, sp pointing at buffer
 80+  A607 F1               pop af
 81+  A608 C1               pop bc
 82+  A609 D1               pop de
 83+  A60A DD E1            pop ix
 84+  A60C D9               exx                         ; hl is now screen
 85+  A60D 08               ex af,af'
 86+  A60E F1               pop af
 87+  A60F C1               pop bc
 88+  A610 D1               pop de
 89+  A611 F9               ld sp,hl                    ; sp pointing at screen
 90+  A612 D5               push de
 91+  A613 C5               push bc
 92+  A614 F5               push af
 93+  A615 08               ex af,af'
 94+  A616 D9               exx                         ; hl is now buffer
 95+  A617 DD E5            push ix
 96+  A619 D5               push de
 97+  A61A C5               push bc
 98+  A61B F5               push af
 99+  A61C 1E 0E            ld e,14                    ; do another fourteen for right hand side
100+  A61E 16 00            ld d,0
101+  A620 19               add hl,de
102+  A621 F9               ld sp,hl                    ; sp pointing at buffer
103+  A622 F1               pop af
104+  A623 C1               pop bc
105+  A624 D1               pop de
106+  A625 DD E1            pop ix
107+  A627                  ;pop ix
108+  A627 D9               exx                         ; hl is now screen
109+  A628 08               ex af,af'
110+  A629 1E 0E            ld e,14
111+  A62B 16 00            ld d,0
112+  A62D 19               add hl,de
113+  A62E F1               pop af
114+  A62F C1               pop bc
115+  A630 D1               pop de
116+  A631                  ;pop iy
117+  A631 F9               ld sp,hl                    ; sp pointing at screen
118+  A632                  ;push iy
119+  A632 D5               push de
120+  A633 C5               push bc
121+  A634 F5               push af
122+  A635 08               ex af,af'
123+  A636 D9               exx                         ; hl is now buffer
124+  A637 DD E5            push ix
125+  A639 D5               push de
126+  A63A C5               push bc
127+  A63B F5               push af
128+  A63C 1E 10            ld e,16
129+  A63E 16 00            ld d,0
130+  A640 19               add hl,de
131+  A641 D9               exx                         ; hl is now screen
132+  A642 1E 0E            ld e,14
133+  A644 16 00            ld d,0
134+  A646 ED 52            sbc hl,de
135+  A648 24               inc h
136+  A649 7C               ld a,h
137+  A64A E6 07            and 0x07                    ; check if this is multiple of 8, if so, end of cell line
138+  A64C C2 03 A6         jp nz,buffer_bufferlinetoscreen0 ; next line in cell
139+  A64F              buffer_bufferlinetoscreen1:
140+  A64F 31 00 00         ld sp,0
141+  A652 D9               exx
142+  A653 C9               ret
143+  A654
144+  A654              ;
145+  A654              ; Copies the buffer to the screen for updated lines. Use stack.
146+  A654              ; Inputs: none
147+  A654              ;
148+  A654              buffer_buffertoscreen:
149+  A654 3A BC A5         ld a,(buffer_updateall)      ; get the all update flag
150+  A657 FE 00            cp 0
151+  A659 CA 65 A6         jp z,buffer_buffertoscreen2  ; if not set, draw only updated
152+  A65C CD 86 A6         call buffer_allbuffertoscreen ; otherwise, draw whole screen
153+  A65F 21 BC A5         ld hl,buffer_updateall
154+  A662 36 00            ld (hl),0                    ; reset flag
155+  A664 C9               ret
156+  A665              buffer_buffertoscreen2:
157+  A665 06 15            ld b,21
158+  A667 FD 21 A7 A5      ld iy,buffer_updatedlines    ; the location of the updated lines
159+  A66B              buffer_buffertoscreen0:
160+  A66B FD 7E 00         ld a,(iy)
161+  A66E FE FF            cp 255
162+  A670 CA 82 A6         jp z,buffer_buffertoscreen1                       ; if this is 255, then we're at the end of the updated list
163+  A673 C5               push bc
164+  A674 FD E5            push iy
165+  A676 F3               di
166+  A677 CD DF A5         call buffer_bufferlinetoscreen
167+  A67A FB               ei
168+  A67B FD E1            pop iy
169+  A67D C1               pop bc
170+  A67E FD 23            inc iy
171+  A680 10 E9            djnz buffer_buffertoscreen0
172+  A682              buffer_buffertoscreen1:
173+  A682 CD 9A A6         call buffer_buffertoattrsfast
174+  A685 C9               ret
175+  A686
176+  A686              ;
177+  A686              ; Copies the buffer to the screen. Use stack.
178+  A686              ; Inputs: none
179+  A686              ;
180+  A686              buffer_allbuffertoscreen:
181+  A686 06 15            ld b,21
182+  A688 3E 00            ld a,0
183+  A68A              buffer_allbuffertoscreen0:
184+  A68A C5               push bc
185+  A68B F5               push af
186+  A68C F3               di
187+  A68D CD DF A5         call buffer_bufferlinetoscreen
188+  A690 FB               ei
189+  A691 F1               pop af
190+  A692 C1               pop bc
191+  A693 3C               inc a
192+  A694 10 F4            djnz buffer_allbuffertoscreen0
193+  A696
194+  A696 CD 9A A6         call buffer_buffertoattrsfast
195+  A699 C9               ret
196+  A69A
197+  A69A              ;
198+  A69A              ; Copies the attrs buffer to screen with the stack
199+  A69A              ;
200+  A69A              buffer_buffertoattrsfast:
201+  A69A ED 73 09 A7      ld (buffer_buffertoattrsfast1+1),sp ; this is some self-modifying code; stores the stack pointer in an ld sp,nn instruction at the end
202+  A69E 3A 0D A7         ld a,(screen_offset)            ; get the screen offset in rows, so want *32
203+  A6A1 11 20 00         ld de,32
204+  A6A4 CD 3A 80         call utilities_multiply
205+  A6A7 54 5D            ld de,hl
206+  A6A9 21 05 A2         ld hl,buffer_attr_buffer
207+  A6AC 19               add hl,de                       ; add the offset, start of attr buffer now in hl
208+  A6AD D9               exx
209+  A6AE 21 50 58         ld hl,22528+80                  ; start of attr memory + 2 lines for score + 16 to start at right side
210+  A6B1 FD 21 A5 A5      ld iy,buffer_tmp
211+  A6B5 FD 36 00 15      ld (iy),21              ; number of times to loop
212+  A6B9              buffer_buffertoattrsfast0:
213+  A6B9 D9               exx                         ; hl is now buffer
214+  A6BA 23               inc hl
215+  A6BB 23               inc hl                      ; move hl forward 2 to skip first two blocks
216+  A6BC F9               ld sp,hl                    ; do first fourteen for left hand side, sp pointing at buffer
217+  A6BD F1               pop af
218+  A6BE C1               pop bc
219+  A6BF D1               pop de
220+  A6C0 DD E1            pop ix
221+  A6C2 D9               exx                         ; hl is now screen
222+  A6C3 08               ex af,af'
223+  A6C4 F1               pop af
224+  A6C5 C1               pop bc
225+  A6C6 D1               pop de
226+  A6C7 F9               ld sp,hl                    ; sp pointing at screen
227+  A6C8 D5               push de
228+  A6C9 C5               push bc
229+  A6CA F5               push af
230+  A6CB 08               ex af,af'
231+  A6CC D9               exx                         ; hl is now buffer
232+  A6CD DD E5            push ix
233+  A6CF D5               push de
234+  A6D0 C5               push bc
235+  A6D1 F5               push af
236+  A6D2 1E 0E            ld e,14                    ; do another fourteen for right hand side
237+  A6D4 16 00            ld d,0
238+  A6D6 19               add hl,de
239+  A6D7 F9               ld sp,hl                    ; sp pointing at buffer
240+  A6D8 F1               pop af
241+  A6D9 C1               pop bc
242+  A6DA D1               pop de
243+  A6DB DD E1            pop ix
244+  A6DD D9               exx                         ; hl is now screen
245+  A6DE 08               ex af,af'
246+  A6DF 1E 0E            ld e,14
247+  A6E1 16 00            ld d,0
248+  A6E3 19               add hl,de
249+  A6E4 F1               pop af
250+  A6E5 C1               pop bc
251+  A6E6 D1               pop de
252+  A6E7 F9               ld sp,hl                    ; sp pointing at screen
253+  A6E8 D5               push de
254+  A6E9 C5               push bc
255+  A6EA F5               push af
256+  A6EB 08               ex af,af'
257+  A6EC D9               exx                         ; hl is now buffer
258+  A6ED DD E5            push ix
259+  A6EF D5               push de
260+  A6F0 C5               push bc
261+  A6F1 F5               push af
262+  A6F2 1E 10            ld e,16
263+  A6F4 16 00            ld d,0
264+  A6F6 19               add hl,de
265+  A6F7 D9               exx                         ; hl is now screen
266+  A6F8 11 12 00         ld de,18
267+  A6FB 19               add hl,de
268+  A6FC FD 7E 00         ld a,(iy)
269+  A6FF 3D               dec a
270+  A700 FE 00            cp 0
271+  A702 FD 77 00         ld (iy),a
272+  A705 C2 B9 A6         jp nz,buffer_buffertoattrsfast0 ; do another row
273+  A708              buffer_buffertoattrsfast1:
274+  A708 31 00 00         ld sp,0
275+  A70B D9               exx
276+  A70C C9               ret
# file closed: screen/buffer.asm
 24   A70D                  include "screen\screen.asm"
# file opened: screen/screen.asm
  1+  A70D              screen_offset:
  2+  A70D 00               defb 0                      ; offset from top of screen in lines
  3+  A70E
  4+  A70E              screen_tmp:
  5+  A70E 00 00            defb 0,0                      ; temporary memory
  6+  A710
  7+  A710              screen_setscorecolours:
  8+  A710 21 83 B2         ld hl,score_colours
  9+  A713 11 00 58         ld de,22528                     ; attrs here
 10+  A716 01 40 00         ld bc,64
 11+  A719 ED B0            ldir
 12+  A71B C9               ret
 13+  A71C
 14+  A71C              screen_sethighscorecolours:
 15+  A71C 21 C3 B2         ld hl,high_score_colours
 16+  A71F 11 E0 5A         ld de,22528+736                 ; attrs here
 17+  A722 01 20 00         ld bc,32
 18+  A725 ED B0            ldir
 19+  A727 C9               ret
 20+  A728
 21+  A728              ; Draw the screen
 22+  A728              ; Inputs:
 23+  A728              ; none
 24+  A728              ; Notes:
 25+  A728              ; The value held at screen_offset tells the screen how many rows to scroll down. Set to five to bottom out.
 26+  A728              screen_draw:
 27+  A728                  ;call clear_screen
 28+  A728 0E 00            ld c,0                      ; horiz
 29+  A72A 06 00            ld b,0                      ; vert, 0 at top
 30+  A72C DD 21 45 AD      ld ix,level01               ; point ix at level data
 31+  A730 FD 21 05 A2      ld iy,buffer_attr_buffer    ; point iy at attr data
 32+  A734              screen_draw0:
 33+  A734 DD 7E 00         ld a,(ix)                   ; load the block number
 34+  A737 C5               push bc                     ; store bc, contains loop count
 35+  A738 CD 9A A8         call screen_getattr         ; get the memory location for this cell's attr into hl
 36+  A73B 7E               ld a,(hl)                   ; get the attr value at the address
 37+  A73C FD 77 00         ld (iy),a                   ; load the attr into memory
 38+  A73F DD 7E 00         ld a,(ix)                   ; load the block number
 39+  A742 CD 8F A8         call screen_getblock        ; get the block data into hl
 40+  A745 CD 75 A8         call screen_showchar        ; show this character here
 41+  A748 C1               pop bc                      ; get the loop counter back
 42+  A749 DD 23            inc ix                      ; increment level location
 43+  A74B FD 23            inc iy                      ; increment attr location
 44+  A74D 0C               inc c                       ; increment horiz
 45+  A74E 79               ld a,c
 46+  A74F FE 20            cp 32                       ; check if horiz has reach edge of screen
 47+  A751 C2 34 A7         jp nz,screen_draw0          ; if not, loop
 48+  A754 0E 00            ld c,0                      ; if so, reset horiz
 49+  A756 04               inc b                       ; increment vertical
 50+  A757 78               ld a,b
 51+  A758 FE 1D            cp 29                       ; check if at bottom
 52+  A75A C2 34 A7         jp nz,screen_draw0          ; if not, loop
 53+  A75D 21 0E A7         ld hl, screen_tmp
 54+  A760 36 09            ld (hl),9                   ; load the block number into memory
 55+  A762 DD 21 E5 B0      ld ix,level01rocks          ; rock memory
 56+  A766 CD C7 A7         call screen_initobjects     ; draw rocks
 57+  A769 21 0E A7         ld hl, screen_tmp
 58+  A76C 36 0C            ld (hl),12                  ; load the block number into memory
 59+  A76E DD 21 E5 B1      ld ix,level01missiles       ; missile memory
 60+  A772 CD C7 A7         call screen_initobjects     ; draw missiles
 61+  A775 21 0E A7         ld hl, screen_tmp
 62+  A778 36 08            ld (hl),08                  ; load the block number into memory
 63+  A77A DD 21 5E B2      ld ix,level01diamonds       ; diamond memory
 64+  A77E CD C7 A7         call screen_initobjects     ; draw diamonds
 65+  A781 21 0E A7         ld hl, screen_tmp
 66+  A784 36 0E            ld (hl),14                  ; load the block number into memory
 67+  A786 DD 21 6E B2      ld ix,level01gems           ; gems memory
 68+  A78A CD C7 A7         call screen_initobjects     ; draw gems
 69+  A78D CD 94 A7         call screen_setuptext       ; draws text on the screen
 70+  A790 CD 09 C0         call scores_printscores     ; print the current scores
 71+  A793 C9               ret
 72+  A794
 73+  A794              ;
 74+  A794              ; Sets up text on the screen
 75+  A794              ;
 76+  A794              screen_setuptext:
 77+  A794 CD 2B C0         call scores_showtable
 78+  A797 CD 1C A7         call screen_sethighscorecolours
 79+  A79A 21 ED 80         ld hl, string_score1
 80+  A79D CD BD 84         call string_print
 81+  A7A0 21 F6 80         ld hl, string_scorenumbers1
 82+  A7A3 CD BD 84         call string_print
 83+  A7A6 21 FF 80         ld hl, string_company
 84+  A7A9 CD BD 84         call string_print
 85+  A7AC 21 10 81         ld hl, string_score2
 86+  A7AF CD BD 84         call string_print
 87+  A7B2 21 19 81         ld hl, string_scorenumbers2
 88+  A7B5 CD BD 84         call string_print
 89+  A7B8 21 05 81         ld hl, string_credits
 90+  A7BB CD BD 84         call string_print
 91+  A7BE CD 10 A7         call screen_setscorecolours
 92+  A7C1 C9               ret
 93+  A7C2
 94+  A7C2              ;
 95+  A7C2              ; Sets a line of colours
 96+  A7C2              ; Inputs:
 97+  A7C2              ; a - colour to set
 98+  A7C2              ; b - number to set
 99+  A7C2              ; de - start memory location
100+  A7C2              ;
101+  A7C2              screen_setcolours:
102+  A7C2 12               ld (de),a
103+  A7C3 13               inc de
104+  A7C4 10 FC            djnz screen_setcolours
105+  A7C6 C9               ret
106+  A7C7
107+  A7C7              ;
108+  A7C7              ; Draw initial object positions
109+  A7C7              ; Inputs:
110+  A7C7              ; ix - memory location of objects
111+  A7C7              ; a - graphic
112+  A7C7              screen_initobjects:
113+  A7C7 DD 4E 00         ld c,(ix)                   ; get the horiz coord
114+  A7CA 79               ld a,c
115+  A7CB FE FF            cp 255
116+  A7CD CA F6 A7         jp z,screen_initobjects2
117+  A7D0 DD 23            inc ix                      ; move to next
118+  A7D2 DD 46 00         ld b,(ix)                   ; get the vert coord
119+  A7D5 DD 23            inc ix
120+  A7D7 CD 08 A8         call screen_getcellattradress ; get the memory address of b,c attr into de
121+  A7DA D5               push de
122+  A7DB 3A 0E A7         ld a,(screen_tmp)                  ; get the block number back
123+  A7DE CD 9A A8         call screen_getattr         ; get the memory location for this cell's attr into hl
124+  A7E1 D1               pop de
125+  A7E2 7E               ld a,(hl)                   ; get the attr value at the address
126+  A7E3 12               ld (de),a                   ; load the attr into memory
127+  A7E4 3A 0E A7         ld a,(screen_tmp)                  ; get the block number back
128+  A7E7 CD 8F A8         call screen_getblock        ; get the block data into hl
129+  A7EA CD 75 A8         call screen_showchar        ; show this character here
130+  A7ED
131+  A7ED              screen_initobjects1:
132+  A7ED DD 23            inc ix                      ; move past state
133+  A7EF DD 23            inc ix
134+  A7F1 DD 23            inc ix                      ; move past mem
135+  A7F3 C3 C7 A7         jp screen_initobjects
136+  A7F6              screen_initobjects2:
137+  A7F6 C9               ret
138+  A7F7
139+  A7F7
140+  A7F7              ;
141+  A7F7              ; Return character cell address offset of block at (b, c) ready for addition to screen  memory.
142+  A7F7              ; Inputs:
143+  A7F7              ; bc: coords
144+  A7F7              ; Outputs:
145+  A7F7              ; de: memory location
146+  A7F7              ;
147+  A7F7              screen_getcelladdress:
148+  A7F7 78               ld a,b      ; vertical position.
149+  A7F8 E6 18            and 24      ; which segment, 0, 1 or 2?
150+  A7FA C6 40            add a,64    ; 64*256 = 16384, Spectrum's screen memory.
151+  A7FC 57               ld d,a      ; this is our high byte.
152+  A7FD 78               ld a,b      ; what was that vertical position again?
153+  A7FE E6 07            and 7       ; which row within segment?
154+  A800 0F               rrca        ; multiply row by 32.
155+  A801 0F               rrca
156+  A802 0F               rrca
157+  A803 5F               ld e,a      ; low byte.
158+  A804 79               ld a,c      ; add on y coordinate.
159+  A805 83               add a,e     ; mix with low byte.
160+  A806 5F               ld e,a      ; address of screen position in de.
161+  A807 C9               ret
162+  A808
163+  A808              ;
164+  A808              ; Calculate buffer address of attribute for character at (b, c).
165+  A808              ; Inputs:
166+  A808              ; bc: coords
167+  A808              ; Outputs:
168+  A808              ; de: memory location
169+  A808              ;
170+  A808              screen_getcellattradress:
171+  A808 11 05 A2         ld de,buffer_attr_buffer ; memory is at base + horiz (c) + vert*32 (b)
172+  A80B 69               ld l,c      ; x position.
173+  A80C 26 00            ld h,0      ; 0 h
174+  A80E 19               add hl,de
175+  A80F 54 5D            ld de,hl    ; horiz done
176+  A811 78               ld a,b      ; do vert
177+  A812 D5               push de
178+  A813 C5               push bc
179+  A814 11 20 00         ld de,32
180+  A817 CD 3A 80         call utilities_multiply
181+  A81A C1               pop bc
182+  A81B D1               pop de
183+  A81C 19               add hl,de
184+  A81D 54 5D            ld de,hl    ; vert done
185+  A81F C9               ret
186+  A820
187+  A820              ;
188+  A820              ; Calculate buffer address of attribute for character at (b, c).
189+  A820              ; Inputs:
190+  A820              ; bc: coords
191+  A820              ; Outputs:
192+  A820              ; de: memory location
193+  A820              ;
194+  A820              screen_getscreenattradress:
195+  A820 11 00 58         ld de,22528 ; memory is at base + horiz (c) + vert*32 (b)
196+  A823 69               ld l,c      ; x position.
197+  A824 26 00            ld h,0      ; 0 h
198+  A826 19               add hl,de
199+  A827 54 5D            ld de,hl    ; horiz done
200+  A829 78               ld a,b      ; do vert
201+  A82A D5               push de
202+  A82B C5               push bc
203+  A82C 11 20 00         ld de,32
204+  A82F CD 3A 80         call utilities_multiply
205+  A832 C1               pop bc
206+  A833 D1               pop de
207+  A834 19               add hl,de
208+  A835 54 5D            ld de,hl    ; vert done
209+  A837 C9               ret
210+  A838
211+  A838              ;
212+  A838              ; Gets the attr memory location for a screen coord
213+  A838              ; Will overwrite bc
214+  A838              ; Inputs:
215+  A838              ; bc - screen coords
216+  A838              ; Outputs:
217+  A838              ; de - memory location
218+  A838              ; bc - character coords
219+  A838              ;
220+  A838              screen_getattraddressfromscreencoords:
221+  A838 78               ld a,b                          ; get the player block coords of current block
222+  A839 E6 F8            and 248                         ; find closest multiple of eight
223+  A83B 0F               rrca
224+  A83C 0F               rrca
225+  A83D 0F               rrca                ; divide by 8
226+  A83E 47               ld b,a
227+  A83F 79               ld a,c
228+  A840 48               ld c,b                         ; swap b and c
229+  A841 E6 F8            and 248
230+  A843 0F               rrca
231+  A844 0F               rrca
232+  A845 0F               rrca                ; divide by 8
233+  A846 47               ld b,a
234+  A847 CD 08 A8         call screen_getcellattradress   ; work out memory location of current block attributes, memory in de
235+  A84A C9               ret
236+  A84B
237+  A84B
238+  A84B              ; Gets the nearest cell coords for a screen coord
239+  A84B              ; Will overwrite bc
240+  A84B              ; Inputs:
241+  A84B              ; bc - screen coords
242+  A84B              ; Outputs:
243+  A84B              ; bc - character coords
244+  A84B              ;
245+  A84B              screen_getcharcoordsfromscreencoords:
246+  A84B 78               ld a,b                          ; get the player block coords of current block
247+  A84C E6 F8            and 248                         ; find closest multiple of eight
248+  A84E 0F               rrca
249+  A84F 0F               rrca
250+  A850 0F               rrca                ; divide by 8
251+  A851 47               ld b,a
252+  A852 79               ld a,c
253+  A853 48               ld c,b                         ; swap b and c
254+  A854 E6 F8            and 248
255+  A856 0F               rrca
256+  A857 0F               rrca
257+  A858 0F               rrca                ; divide by 8
258+  A859 47               ld b,a
259+  A85A C9               ret
260+  A85B
261+  A85B              ; Gets the screen coords for a cell coord
262+  A85B              ; Will overwrite bc
263+  A85B              ; Inputs:
264+  A85B              ; bc - char coords
265+  A85B              ; Outputs:
266+  A85B              ; bc - screen coords
267+  A85B              ;
268+  A85B              screen_getscreencoordsfromcharcoords:
269+  A85B 78               ld a,b                          ; get the player block coords of current block
270+  A85C 07               rlca
271+  A85D 07               rlca
272+  A85E 07               rlca                ; multiply by 8
273+  A85F 47               ld b,a
274+  A860 79               ld a,c
275+  A861 48               ld c,b                         ; swap b and c
276+  A862 07               rlca
277+  A863 07               rlca
278+  A864 07               rlca                ; divide by 8
279+  A865 47               ld b,a
280+  A866 C9               ret
281+  A867
282+  A867              ;
283+  A867              ; Get buffer address for a character at b,c - b vert
284+  A867              ; Buffer memory is stored as sequential block
285+  A867              ; Char at 0,0 is stored 0,32,64...; 0,1 is stored at 1,33,65
286+  A867              ; Inputs:
287+  A867              ; bc - coords
288+  A867              ; Outputs:
289+  A867              ; de - memory location of first byte
290+  A867              screen_getbufferaddress:
291+  A867 21 05 85         ld hl, buffer_buffer    ; first get screen buffer start
292+  A86A 50               ld d,b                  ; then work out vertical offset
293+  A86B 1E 00            ld e,0                  ; mult by 256, low byte becomes high byte, de now holds result
294+  A86D 19               add hl,de               ; add to base
295+  A86E 59               ld e,c                  ; then add horizontal offset (c)
296+  A86F 16 00            ld d,0
297+  A871 19               add hl,de               ; add to base
298+  A872 54 5D            ld de,hl
299+  A874 C9               ret
300+  A875
301+  A875              ;
302+  A875              ; Display character hl at (b, c) to buffer.
303+  A875              ; Stored sequentially
304+  A875              ; Inputs:
305+  A875              ; hl: block address
306+  A875              ; bc: coords
307+  A875              ;
308+  A875              screen_showchar:
309+  A875 3E 00            ld a,0
310+  A877 E5               push hl
311+  A878 CD 67 A8         call screen_getbufferaddress ; get the current screen buffer pointer
312+  A87B E1               pop hl
313+  A87C 06 08            ld b,8              ; number of pixels high.
314+  A87E              screen_showchar0:
315+  A87E 7E               ld a,(hl)           ; source graphic.
316+  A87F 12               ld (de),a           ; transfer to screen.
317+  A880 23               inc hl              ; next piece of data.
318+  A881 E5               push hl             ; store hl
319+  A882 62 6B            ld hl,de            ; put de in hl
320+  A884 1E 20            ld e,32            ; inc memory by 32, so load 32 into de
321+  A886 16 00            ld d,0
322+  A888 19               add hl,de              ; add de to hl
323+  A889 54 5D            ld de,hl            ; load back to de
324+  A88B E1               pop hl              ; restore hl
325+  A88C
326+  A88C 10 F0            djnz screen_showchar0 ; repeat
327+  A88E C9               ret
328+  A88F
329+  A88F
330+  A88F              ;
331+  A88F              ; Get cell graphic.
332+  A88F              ; Inputs:
333+  A88F              ; a: block
334+  A88F              ; Outputs:
335+  A88F              ; hl: memory
336+  A88F              ;
337+  A88F              screen_getblock:
338+  A88F 07               rlca                        ; multiply block number by eight.
339+  A890 07               rlca
340+  A891 07               rlca
341+  A892 5F               ld e,a                      ; displacement to graphic address.
342+  A893 16 00            ld d,0                      ; no high byte.
343+  A895 21 E3 B2         ld hl,sprites               ; address of character blocks.
344+  A898 19               add hl,de                   ; point to block.
345+  A899 C9               ret
346+  A89A
347+  A89A              ;
348+  A89A              ; Get cell attribute.
349+  A89A              ; Inputs:
350+  A89A              ; a: block
351+  A89A              ; Outputs:
352+  A89A              ; hl: memory
353+  A89A              ;
354+  A89A              screen_getattr:
355+  A89A 5F               ld e,a                      ; displacement to attribute address.
356+  A89B 16 00            ld d,0                      ; no high byte.
357+  A89D 21 8B B3         ld hl,sprite_attrs          ; address of block attributes.
358+  A8A0 19               add hl,de                   ; point to attribute.
359+  A8A1 C9               ret
360+  A8A2
361+  A8A2              ;
362+  A8A2              ; Checks whether a character block has anything in it
363+  A8A2              ; Inputs:
364+  A8A2              ; bc - char coords
365+  A8A2              ; Outputs:
366+  A8A2              ; a - 1, empty
367+  A8A2              screen_ischarempty:
368+  A8A2 CD 67 A8         call screen_getbufferaddress ; get the current screen buffer pointer
369+  A8A5 06 08            ld b,8                      ; check 8 rows
370+  A8A7              screen_ischarempty2:
371+  A8A7 1A               ld a,(de)                   ; check line
372+  A8A8 FE 00            cp 0
373+  A8AA C2 B8 A8         jp nz,screen_ischarempty1   ; if not zero, jump out with false
374+  A8AD 21 20 00         ld hl,32
375+  A8B0 19               add hl,de
376+  A8B1 54 5D            ld de,hl                    ; move to next row
377+  A8B3 10 F2            djnz screen_ischarempty2
378+  A8B5              screen_ischarempty0:
379+  A8B5 3E 01            ld a,1
380+  A8B7 C9               ret
381+  A8B8              screen_ischarempty1:
382+  A8B8 3E 00            ld a,0
383+  A8BA C9               ret
384+  A8BB
385+  A8BB              ;
386+  A8BB              ; Copies a block from one place to another directly underneath, leaves the original empty
387+  A8BB              ; Inputs:
388+  A8BB              ; bc - coords of block to copy from
389+  A8BB              screen_copyblockdown
390+  A8BB CD 67 A8         call screen_getbufferaddress ; get the current screen buffer pointer for source
391+  A8BE 06 08            ld b,8                      ; copy 8 rows
392+  A8C0              screen_copyblock0:
393+  A8C0 1A               ld a,(de)                    ; get what we're copying
394+  A8C1 08               ex af,af'
395+  A8C2 3E 00            ld a,0
396+  A8C4 12               ld (de),a                    ; replace with empty
397+  A8C5 08               ex af,af'
398+  A8C6 14               inc d                        ; add 256 to get to the next row
399+  A8C7 12               ld (de),a                    ; copy to the next row
400+  A8C8 15               dec d
401+  A8C9 21 20 00         ld hl,32
402+  A8CC 19               add hl,de                       ; return back to source, next row down
403+  A8CD 54 5D            ld de,hl
404+  A8CF 10 EF            djnz screen_copyblock0
405+  A8D1 C9               ret
406+  A8D2
407+  A8D2              ;
408+  A8D2              ; Returns the first byte of a character. Useful for figuring out what's there
409+  A8D2              ; Inputs:
410+  A8D2              ; bc - coords
411+  A8D2              ; Outputs:
412+  A8D2              ; a - first byte
413+  A8D2              ;
414+  A8D2              screen_getcharfirstbyte:
415+  A8D2 CD 67 A8         call screen_getbufferaddress ; get the current screen buffer pointer for source
416+  A8D5 1A               ld a,(de)
417+  A8D6 C9               ret
418+  A8D7
# file closed: screen/screen.asm
 25   A8D7                  include "screen\sprites.asm"
# file opened: screen/sprites.asm
  1+  A8D7              ;
  2+  A8D7              ; This is the sprite routine and expects coordinates in (c ,b) form,
  3+  A8D7              ; where c is the vertical coord from the top of the screen (0-176), and
  4+  A8D7              ; b is the horizontal coord from the left of the screen (0 to 240).
  5+  A8D7              ; Sprite data is stored as you'd expect in its unshifted form as this
  6+  A8D7              ; routine takes care of all the shifting itself. This means that sprite
  7+  A8D7              ; handling isn't particularly fast but the graphics only take 1/8th of the
  8+  A8D7              ; space they would require in pre-shifted form.
  9+  A8D7              ; Inputs:
 10+  A8D7              ; hl - sprite data
 11+  A8D7              ; bc - screen coords
 12+  A8D7              ;
 13+  A8D7              sprites_drawsprite7:
 14+  A8D7 EE 07            xor 7               ; complement last 3 bits.
 15+  A8D9 3C               inc a               ; add one for luck!
 16+  A8DA              sprites_drawsprite3:
 17+  A8DA CB 11            rl c                ; ...into middle byte...
 18+  A8DC CB 12            rl d                ; ...and finally into left character cell.
 19+  A8DE 3D               dec a               ; count shifts we've done.
 20+  A8DF 20 F9            jr nz,sprites_drawsprite3 ; return until all shifts complete.
 21+  A8E1                                      ; Line of sprite image is now in e + c + d, we need it in form c + d + e.
 22+  A8E1 79               ld a,c              ; left edge of image is currently in e.
 23+  A8E2 4A               ld c,d              ; put right edge there instead.
 24+  A8E3 57               ld d,a              ; and the left edge back into c.
 25+  A8E4 18 25            jr sprites_drawsprite0   ; we've done the switch so transfer to screen.
 26+  A8E6              sprites_drawsprite:
 27+  A8E6 ED 43 4B A9      ld (dispx),bc       ; store coords in dispx for now.
 28+  A8EA E5               push hl
 29+  A8EB CD 29 A9         call sprites_scadd  ; calculate screen address.
 30+  A8EE E1               pop hl
 31+  A8EF 3E 08            ld a,8              ; height of sprite in pixels.
 32+  A8F1              sprites_drawsprite1:
 33+  A8F1 08               ex af,af'           ; store loop counter.
 34+  A8F2 D5               push de             ; store screen address.
 35+  A8F3 4E               ld c,(hl)           ; first sprite graphic.
 36+  A8F4 23               inc hl              ; increment poiinter to sprite data.
 37+  A8F5 22 4D A9         ld (sprtmp),hl      ; store it for later.
 38+  A8F8 16 00            ld d,0              ; blank right byte for now.
 39+  A8FA 78               ld a,b              ; b holds y position.
 40+  A8FB E6 07            and 7               ; how are we straddling character cells?
 41+  A8FD 28 0C            jr z,sprites_drawsprite0 ; we're not straddling them, don't bother shifting.
 42+  A8FF FE 05            cp 5                ; 5 or more right shifts needed?
 43+  A901 30 D4            jr nc,sprites_drawsprite7 ; yes, shift from left as it's quicker.
 44+  A903 A7               and a               ; oops, carry flag is set so clear it.
 45+  A904              sprites_drawsprite2:
 46+  A904 CB 19            rr c                ; rotate left byte right...
 47+  A906 CB 1A            rr d                ; ...into right byte.
 48+  A908 3D               dec a               ; one less shift to do.
 49+  A909 20 F9            jr nz,sprites_drawsprite2 ; return until all shifts complete.
 50+  A90B              sprites_drawsprite0:
 51+  A90B E1               pop hl              ; pop screen address from stack.
 52+  A90C 7E               ld a,(hl)           ; what's there already.
 53+  A90D A9               xor c               ; merge in image data.
 54+  A90E 77               ld (hl),a           ; place onto screen.
 55+  A90F 23               inc hl
 56+  A910 7E               ld a,(hl)           ; what's already there.
 57+  A911 AA               xor d               ; right edge of sprite image data.
 58+  A912 77               ld (hl),a           ; plonk it on screen.
 59+  A913 3A 4B A9         ld a,(dispx)        ; vertical coordinate.
 60+  A916 3C               inc a               ; next line down.
 61+  A917 32 4B A9         ld (dispx),a        ; store new position.
 62+  A91A 2B               dec hl
 63+  A91B 11 20 00         ld de,32            ; add 32 to get to the next row
 64+  A91E 19               add hl,de           ; add 32
 65+  A91F              sprites_drawsprite6:
 66+  A91F EB               ex de,hl            ; screen address in de.
 67+  A920 2A 4D A9         ld hl,(sprtmp)      ; restore graphic address.
 68+  A923 08               ex af,af'           ; restore loop counter.
 69+  A924 3D               dec a               ; decrement it.
 70+  A925 C2 F1 A8         jp nz,sprites_drawsprite1 ; not reached bottom of sprite yet to repeat.
 71+  A928 C9               ret                 ; job done.
 72+  A929
 73+  A929              ;
 74+  A929              ; This routine returns a buffer address for (c, b) in de (c vert).
 75+  A929              ; For example: 0,0 will be at memory offset 0
 76+  A929              ; 1,0 (1 down) will be at memory offset 1
 77+  A929              ; 0,7 will be at memory offset 0
 78+  A929              ; 9,1 will be at memory offset 8+1
 79+  A929              ; 8,0 will be at memory offset 256
 80+  A929              ; 9,0 will be at memory offset 257
 81+  A929              ; Outputs:
 82+  A929              ; de - coords
 83+  A929              ;
 84+  A929              sprites_scadd:
 85+  A929 79               ld a,c               ; calculate vertical offset
 86+  A92A E6 F8            and 248             ;  to get nearest multiple of 8
 87+  A92C 0F               rrca
 88+  A92D 0F               rrca
 89+  A92E 0F               rrca                ; divide by 8
 90+  A92F 67               ld h,a
 91+  A930 78               ld a,b               ; calculate horizontal offset
 92+  A931 E6 F8            and 248             ;  to get nearest multiple of 8
 93+  A933 0F               rrca
 94+  A934 0F               rrca
 95+  A935 0F               rrca                ; divide by 8
 96+  A936 6F               ld l,a
 97+  A937 C5               push bc             ; store the screen coords
 98+  A938 44 4D            ld bc,hl            ; load bc with the character coords
 99+  A93A CD 67 A8         call screen_getbufferaddress
100+  A93D C1               pop bc              ; get back screen coords, de is now memory of character
101+  A93E 79               ld a,c              ; now add the vertical within the cell
102+  A93F E6 07            and 7
103+  A941 0F               rrca                ; multiply by 32.
104+  A942 0F               rrca
105+  A943 0F               rrca
106+  A944 6F               ld l,a
107+  A945 26 00            ld h,0
108+  A947 19               add hl,de
109+  A948 54 5D            ld de,hl
110+  A94A C9               ret
111+  A94B
112+  A94B 00           dispx   defb 0           ; general-use coordinates.
113+  A94C 00           dispy   defb 0
114+  A94D 00 00        sprtmp  defb 0,0           ; sprite temporary address.
115+  A94F
# file closed: screen/sprites.asm
 26   A94F                  include "screen\titlescreen.asm"
# file opened: screen/titlescreen.asm
  1+  A94F              ;
  2+  A94F              ; Draws the title screen
  3+  A94F              ;
  4+  A94F              titlescreen_show:
  5+  A94F CD C7 A9         call titlescreen_init
  6+  A952 CD 70 A9         call titlescreen_drawtitle
  7+  A955 3E FA            ld a,250                              ; wait for 200 frames
  8+  A957 CD 52 80         call utilities_waitforkey_forframes   ; wait for keypress
  9+  A95A 7B               ld a,e
 10+  A95B FE 01            cp 1                                  ; was anything pressed?
 11+  A95D C8               ret z                                 ; end titlescreen if so
 12+  A95E
 13+  A95E CD DA A9         call titlescreen_alt_init             ; otherwise, draw alt screen
 14+  A961 CD 8C A9         call titlescreen_alt_drawtitle
 15+  A964 3E FA            ld a,250                              ; wait for 200 frames
 16+  A966 CD 52 80         call utilities_waitforkey_forframes   ; wait for keypress
 17+  A969 7B               ld a,e
 18+  A96A FE 01            cp 1                                  ; was anything pressed?
 19+  A96C C2 4F A9         jp nz,titlescreen_show                ; start again if not
 20+  A96F C9               ret
 21+  A970
 22+  A970              ;
 23+  A970              ; Draws the iconic logo
 24+  A970              ;
 25+  A970              titlescreen_drawtitle:
 26+  A970 06 66            ld b,102              ; number of points
 27+  A972 DD 21 E7 A9      ld ix,titlescreen_logo_data
 28+  A976              titlescreen_drawtitle0:
 29+  A976 C5               push bc
 30+  A977 DD 4E 00         ld c,(ix)                   ; got horiz
 31+  A97A DD 23            inc ix
 32+  A97C DD 46 00         ld b,(ix)                   ; got vert
 33+  A97F DD 23            inc ix
 34+  A981 CD 20 A8         call screen_getscreenattradress ; memory in de
 35+  A984 13               inc de                      ; slide one to the right, since I'm too lazy to change the data
 36+  A985 3E 13            ld a,19
 37+  A987 12               ld (de),a
 38+  A988 C1               pop bc
 39+  A989 10 EB            djnz titlescreen_drawtitle0 ; loop if we're not at the end
 40+  A98B C9               ret
 41+  A98C
 42+  A98C              ;
 43+  A98C              ; Draws the alternate title screen
 44+  A98C              ;
 45+  A98C              titlescreen_alt_drawtitle:
 46+  A98C 21 3C 81         ld hl,string_alttitlescreen_1
 47+  A98F CD BD 84         call string_print
 48+  A992 21 48 81         ld hl,string_alttitlescreen_2
 49+  A995 CD BD 84         call string_print
 50+  A998 21 43 82         ld hl,string_alttitlescreen_3
 51+  A99B CD BD 84         call string_print
 52+  A99E 06 20            ld b,32
 53+  A9A0 3E 43            ld a,67
 54+  A9A2 11 00 58         ld de,22528                         ; top row attrs here
 55+  A9A5 CD C2 A7         call screen_setcolours
 56+  A9A8 06 20            ld b,32
 57+  A9AA 3E 46            ld a,70
 58+  A9AC 11 A0 59         ld de,22528+416                     ; 13th row attrs here
 59+  A9AF CD C2 A7         call screen_setcolours
 60+  A9B2 06 20            ld b,32
 61+  A9B4 3E 43            ld a,67
 62+  A9B6 11 20 5A         ld de,22528+544                         ; 17th row attrs here
 63+  A9B9 CD C2 A7         call screen_setcolours
 64+  A9BC 06 20            ld b,32
 65+  A9BE 3E 42            ld a,66
 66+  A9C0 11 A0 5A         ld de,22528+672                         ; 21st row attrs here
 67+  A9C3 CD C2 A7         call screen_setcolours
 68+  A9C6 C9               ret
 69+  A9C7
 70+  A9C7              ;
 71+  A9C7              ; Initialises the screen
 72+  A9C7              ;
 73+  A9C7              titlescreen_init:
 74+  A9C7              ; We want a black screen.
 75+  A9C7 3E 0B            ld a,11             ; magenta ink (7) on blue paper (0),
 76+  A9C9                                      ; bright (64).
 77+  A9C9 CD 67 80         call utilities_clearscreen
 78+  A9CC 32 8D 5C         ld (23693),a        ; set our screen colours.
 79+  A9CF 3E 01            ld a,1              ; 2 is the code for red.
 80+  A9D1 D3 FE            out (254),a         ; write to port 254.
 81+  A9D3
 82+  A9D3 21 22 81         ld hl,string_titlescreen_copyright
 83+  A9D6 CD BD 84         call string_print
 84+  A9D9
 85+  A9D9 C9               ret
 86+  A9DA
 87+  A9DA              ;
 88+  A9DA              ; Initialises the screen
 89+  A9DA              ;
 90+  A9DA              titlescreen_alt_init:
 91+  A9DA              ; We want a black screen.
 92+  A9DA 3E 47            ld a,71             ; white ink (7) on black paper (0),
 93+  A9DC                                      ; bright (64).
 94+  A9DC CD 67 80         call utilities_clearscreen
 95+  A9DF 32 8D 5C         ld (23693),a        ; set our screen colours.
 96+  A9E2 3E 00            ld a,0              ; 2 is the code for red.
 97+  A9E4 D3 FE            out (254),a         ; write to port 254.
 98+  A9E6
 99+  A9E6 C9               ret
100+  A9E7
101+  A9E7              ;
102+  A9E7              ; Horiz, vert
103+  A9E7              ;
104+  A9E7              titlescreen_logo_data:
105+  A9E7 08 00 09 00      defb 8,0,9,0,10,0,12,0,15,0,17,0,18,0,19,0
105+  A9EB 0A 00 0C 00
105+  A9EF 0F 00 11 00
105+  A9F3 12 00 13 00
106+  A9F7 09 01 0C 01      defb 9,1,12,1,15,1,17,1
106+  A9FB 0F 01 11 01
107+  A9FF 09 02 0C 02      defb 9,2,12,2,13,2,14,2,15,2,17,2,18,2,19,2
107+  AA03 0D 02 0E 02
107+  AA07 0F 02 11 02
107+  AA0B 12 02 13 02
108+  AA0F 09 03 0C 03      defb 9,3,12,3,15,3,17,3
108+  AA13 0F 03 11 03
109+  AA17 09 04 0C 04      defb 9,4,12,4,15,4,17,4,18,4,19,4
109+  AA1B 0F 04 11 04
109+  AA1F 12 04 13 04
110+  AA23 00 06 01 06      defb 0,6,1,6,2,6,3,6,4,6,5,6,6,6,7,6,8,6,9,6,10,6,11,6
110+  AA27 02 06 03 06
110+  AA2B 04 06 05 06
110+  AA2F 06 06 07 06
110+  AA33 08 06 09 06
110+  AA37 0A 06 0B 06
111+  AA3B 10 06 11 06      defb 16,6,17,6,18,6,19,6,20,6,21,6,22,6,23,6,24,6,25,6,26,6,27,6
111+  AA3F 12 06 13 06
111+  AA43 14 06 15 06
111+  AA47 16 06 17 06
111+  AA4B 18 06 19 06
111+  AA4F 1A 06 1B 06
112+  AA53 02 07 02 08      defb 2,7,2,8,2,9,2,10,2,11,2,12,2,13,2,14,2,15,2,16,2,17,2,18,2,19,2,20
112+  AA57 02 09 02 0A
112+  AA5B 02 0B 02 0C
112+  AA5F 02 0D 02 0E
112+  AA63 02 0F 02 10
112+  AA67 02 11 02 12
112+  AA6B 02 13 02 14
113+  AA6F 19 07 19 08      defb 25,7,25,8,25,9,25,10,25,11,25,12,25,13,25,14,25,15,25,16,25,17,25,18,25,19,25,20
113+  AA73 19 09 19 0A
113+  AA77 19 0B 19 0C
113+  AA7B 19 0D 19 0E
113+  AA7F 19 0F 19 10
113+  AA83 19 11 19 12
113+  AA87 19 13 19 14
114+  AA8B 03 0B 04 0B      defb 3,11,4,11,5,11,6,11,7,11,8,11,9,11,10,11,11,11
114+  AA8F 05 0B 06 0B
114+  AA93 07 0B 08 0B
114+  AA97 09 0B 0A 0B
114+  AA9B 0B 0B
115+  AA9D 0B 07 0B 08      defb 11,7,11,8,11,9,11,10
115+  AAA1 0B 09 0B 0A
116+  AAA5 10 0D 10 0F      defb 16,13,16,15,16,16,16,17,16,18,16,19,16,20
116+  AAA9 10 10 10 11
116+  AAAD 10 12 10 13
116+  AAB1 10 14
117+  AAB3
# file closed: screen/titlescreen.asm
 27   AAB3                  include "screen\lifescreen.asm"
# file opened: screen/lifescreen.asm
  1+  AAB3              ;
  2+  AAB3              ; Draws the life remaining screen
  3+  AAB3              ;
  4+  AAB3              lifescreen_draw:
  5+  AAB3 CD F9 AA         call lifescreen_init
  6+  AAB6
  7+  AAB6 3A FD B8         ld a,(game_currentplayer)             ; get the current player
  8+  AAB9 C6 30            add 48                                ; add 48 to get char
  9+  AABB 21 49 83         ld hl,string_lifescreen_player+10
 10+  AABE 77               ld (hl),a                             ; load this to the string we're about to show
 11+  AABF
 12+  AABF 21 3F 83         ld hl,string_lifescreen_player
 13+  AAC2 CD BD 84         call string_print
 14+  AAC5
 15+  AAC5 3A 34 B9         ld a,(player+9)                       ; get the current player lives
 16+  AAC8 C6 30            add 48                                ; add 48 to get the character
 17+  AACA FE 31            cp 49
 18+  AACC C2 DF AA         jp nz,lifescreen_draw0
 19+  AACF 21 59 83         ld hl,string_lifescreen_lastman
 20+  AAD2
 21+  AAD2 06 08            ld b,8
 22+  AAD4 3E 0A            ld a,10                                ; set red
 23+  AAD6 11 6C 58         ld de,22528+108                        ; attrs here
 24+  AAD9 CD C2 A7         call screen_setcolours
 25+  AADC
 26+  AADC C3 E6 AA         jp lifescreen_draw1
 27+  AADF              lifescreen_draw0:
 28+  AADF 21 4E 83         ld hl,string_lifescreen_lives+2       ; not last man, so use the normal view
 29+  AAE2 77               ld (hl),a                             ; load this to the string we're about to show
 30+  AAE3 21 4C 83         ld hl,string_lifescreen_lives
 31+  AAE6              lifescreen_draw1:
 32+  AAE6 CD BD 84         call string_print
 33+  AAE9
 34+  AAE9 3E 86            ld a,134
 35+  AAEB 11 0B 58         ld de, 22528+11     ; get the colour for the top text
 36+  AAEE 06 0A            ld b,10
 37+  AAF0 CD C2 A7         call screen_setcolours
 38+  AAF3
 39+  AAF3 3E 64            ld a,100                              ; wait for 200 frames
 40+  AAF5 CD 52 80         call utilities_waitforkey_forframes   ; wait for keypress
 41+  AAF8
 42+  AAF8 C9               ret
 43+  AAF9
 44+  AAF9              ;
 45+  AAF9              ; Initialises the screen
 46+  AAF9              ;
 47+  AAF9              lifescreen_init:
 48+  AAF9              ; We want a blue screen.
 49+  AAF9                  ;call $0D6B
 50+  AAF9 3E 0E            ld a,14             ; yellow ink (6) on blue paper (1),
 51+  AAFB                                      ; bright (64).
 52+  AAFB CD 67 80         call utilities_clearscreen
 53+  AAFE 32 8D 5C         ld (23693),a        ; set our screen colours.
 54+  AB01 3E 01            ld a,1              ; 1 is the code for blue.
 55+  AB03 D3 FE            out (254),a         ; write to port 254.
 56+  AB05                  ;call 3503           ; ROM routine - clears screen, opens chan 2.
 57+  AB05
 58+  AB05 C9               ret
# file closed: screen/lifescreen.asm
 28   AB06                  include "screen\gameover.asm"
# file opened: screen/gameover.asm
  1+  AB06              ;
  2+  AB06              ; Draws the game over screen
  3+  AB06              ;
  4+  AB06              gameover_draw:
  5+  AB06 CD 3F C0         call scores_processhighscores
  6+  AB09
  7+  AB09              gameover_draw0:
  8+  AB09 CD 49 AB         call gameover_enterhighscores
  9+  AB0C
 10+  AB0C CD E7 AB         call gameover_init
 11+  AB0F
 12+  AB0F 21 64 83         ld hl,string_gameoverscreen_gameover
 13+  AB12 CD BD 84         call string_print
 14+  AB15
 15+  AB15 21 70 83         ld hl,string_gameoverscreen_copyright
 16+  AB18 CD BD 84         call string_print
 17+  AB1B
 18+  AB1B CD 2C AB         call gameover_commontext
 19+  AB1E
 20+  AB1E 06 0B            ld b,11
 21+  AB20 3E 42            ld a,66
 22+  AB22 11 2B 58         ld de,22528+43                         ; attrs here
 23+  AB25 CD C2 A7         call screen_setcolours
 24+  AB28 CD 47 80         call utilities_waitforkey   ; wait for keypress
 25+  AB2B
 26+  AB2B C9               ret
 27+  AB2C
 28+  AB2C              ;
 29+  AB2C              ; Draws text shared by the game over and high score screens
 30+  AB2C              ;
 31+  AB2C              gameover_commontext:
 32+  AB2C CD 94 A7         call screen_setuptext       ; show scores
 33+  AB2F CD 09 C0         call scores_printscores     ; print the current scores
 34+  AB32
 35+  AB32 21 9E 83         ld hl,string_gameover_credits
 36+  AB35 CD BD 84         call string_print
 37+  AB38
 38+  AB38 21 8A 83         ld hl,string_gameoverscreen_bestscores
 39+  AB3B CD BD 84         call string_print
 40+  AB3E
 41+  AB3E 06 20            ld b,32
 42+  AB40 3E 45            ld a,69
 43+  AB42 11 C0 5A         ld de,22528+704                         ; attrs here
 44+  AB45 CD C2 A7         call screen_setcolours
 45+  AB48
 46+  AB48 C9               ret
 47+  AB49
 48+  AB49              ;
 49+  AB49              ; If required, enter highscore
 50+  AB49              ;
 51+  AB49              gameover_enterhighscores:
 52+  AB49                  ; check if we need to enter initial
 53+  AB49 3A 3E C0         ld a,(scores_highscoretmp)
 54+  AB4C FE 00            cp 0
 55+  AB4E C8               ret z
 56+  AB4F CD 7D AB         call gameover_enterhighscores_init
 57+  AB52 3A 3E C0         ld a,(scores_highscoretmp)
 58+  AB55 3D               dec a
 59+  AB56 3D               dec a
 60+  AB57 3D               dec a                                   ; get high score location back to position of name
 61+  AB58 16 00            ld d,0
 62+  AB5A 5F               ld e,a
 63+  AB5B 21 C5 BF         ld hl,scores_table
 64+  AB5E 19               add hl,de                               ; load memory into hl
 65+  AB5F 08               ex af,af'
 66+  AB60 06 0F            ld b,15
 67+  AB62 CD 82 80         call utilities_pauseforframes           ; pause for a little bit
 68+  AB65 06 03            ld b,3                                  ; collect three chars
 69+  AB67              gameover_draw2:
 70+  AB67 C5               push bc
 71+  AB68 E5               push hl
 72+  AB69 CD 86 80         call utilities_readkey               ; get key into a
 73+  AB6C E1               pop hl
 74+  AB6D 77               ld (hl),a
 75+  AB6E 23               inc hl
 76+  AB6F E5               push hl
 77+  AB70 CD 2B C0         call scores_showtable
 78+  AB73 E1               pop hl
 79+  AB74 06 0F            ld b,15
 80+  AB76 CD 82 80         call utilities_pauseforframes
 81+  AB79 C1               pop bc
 82+  AB7A 10 EB            djnz gameover_draw2
 83+  AB7C C9               ret
 84+  AB7D
 85+  AB7D              ;
 86+  AB7D              ; Displays the screen text for high score entry
 87+  AB7D              ;
 88+  AB7D              gameover_enterhighscores_init:
 89+  AB7D
 90+  AB7D CD E7 AB         call gameover_init
 91+  AB80 CD 2C AB         call gameover_commontext
 92+  AB83
 93+  AB83 21 AA 83         ld hl,string_highscore_congratulations
 94+  AB86 CD BD 84         call string_print
 95+  AB89
 96+  AB89 3A FD B8         ld a,(game_currentplayer)
 97+  AB8C FE 01            cp 1
 98+  AB8E 21 BC 83         ld hl,string_highscore_player1
 99+  AB91 C3 97 AB         jp gameover_enterhighscores_init1
100+  AB94              gameover_enterhighscores_init0:
101+  AB94 21 C7 83         ld hl,string_highscore_player2
102+  AB97              gameover_enterhighscores_init1:
103+  AB97 CD BD 84         call string_print
104+  AB9A 06 60            ld b,96
105+  AB9C 3E 43            ld a,67
106+  AB9E 11 A0 58         ld de,22528+160                         ; attrs here
107+  ABA1 CD C2 A7         call screen_setcolours
108+  ABA4
109+  ABA4 21 D2 83         ld hl,string_highscore_youhaveearned
110+  ABA7 CD BD 84         call string_print
111+  ABAA
112+  ABAA 3A 3E C0         ld a,(scores_highscoretmp)
113+  ABAD FE 05            cp 5
114+  ABAF CA BD AB         jp z, gameover_enterhighscores_init2    ; first place
115+  ABB2 FE 11            cp 17
116+  ABB4 CA C3 AB         jp z, gameover_enterhighscores_init3    ; 2nd place
117+  ABB7 21 0E 84         ld hl,string_highscore_place3           ; 3rd place
118+  ABBA C3 C9 AB         jp gameover_enterhighscores_init4
119+  ABBD              gameover_enterhighscores_init2
120+  ABBD 21 E4 83         ld hl,string_highscore_place1
121+  ABC0 C3 C9 AB         jp gameover_enterhighscores_init4
122+  ABC3              gameover_enterhighscores_init3
123+  ABC3 21 F9 83         ld hl,string_highscore_place2
124+  ABC6 C3 C9 AB         jp gameover_enterhighscores_init4
125+  ABC9              gameover_enterhighscores_init4
126+  ABC9 CD BD 84         call string_print
127+  ABCC
128+  ABCC 06 60            ld b,96
129+  ABCE 3E 42            ld a,66
130+  ABD0 11 40 59         ld de,22528+320                         ; attrs here
131+  ABD3 CD C2 A7         call screen_setcolours
132+  ABD6
133+  ABD6 21 23 84         ld hl,string_highscore_pleaseenter
134+  ABD9 CD BD 84         call string_print
135+  ABDC
136+  ABDC 06 60            ld b,96
137+  ABDE 3E 46            ld a,70
138+  ABE0 11 E0 59         ld de,22528+480                         ; attrs here
139+  ABE3 CD C2 A7         call screen_setcolours
140+  ABE6 C9               ret
141+  ABE7
142+  ABE7              ;
143+  ABE7              ; Initialises the screen
144+  ABE7              ;
145+  ABE7              gameover_init:
146+  ABE7              ; We want a black screen.
147+  ABE7 3E 47            ld a,71             ; white ink (7) on black paper (0),
148+  ABE9                                      ; bright (64).
149+  ABE9 CD 67 80         call utilities_clearscreen
150+  ABEC 32 8D 5C         ld (23693),a        ; set our screen colours.
151+  ABEF 3E 00            ld a,0              ; 2 is the code for red.
152+  ABF1 D3 FE            out (254),a         ; write to port 254.
153+  ABF3 C9               ret
# file closed: screen/gameover.asm
 29   ABF4                  include "screen\endlevel.asm"
# file opened: screen/endlevel.asm
  1+  ABF4              ;
  2+  ABF4              ; Draws the level transition screen
  3+  ABF4              ;
  4+  ABF4              endlevel_draw:
  5+  ABF4 CD EA AC         call endlevel_init
  6+  ABF7 CD D3 AC         call endlevel_commontext
  7+  ABFA
  8+  ABFA 21 AA 83         ld hl,string_highscore_congratulations
  9+  ABFD CD BD 84         call string_print
 10+  AC00
 11+  AC00 3A FD B8         ld a,(game_currentplayer)
 12+  AC03 FE 01            cp 1
 13+  AC05 21 BC 83         ld hl,string_highscore_player1
 14+  AC08 C3 0E AC         jp endlevel_init1
 15+  AC0B              endlevel_init0:
 16+  AC0B 21 C7 83         ld hl,string_highscore_player2
 17+  AC0E              endlevel_init1:
 18+  AC0E CD BD 84         call string_print
 19+  AC11
 20+  AC11 21 40 84         ld hl,string_endlevel_youhaveearned
 21+  AC14 CD BD 84         call string_print
 22+  AC17
 23+  AC17 CD 72 AC         call endlevel_workoutbonus
 24+  AC1A D5               push de
 25+  AC1B 08               ex af,af'                               ; store the a value for later
 26+  AC1C CD BD 84         call string_print
 27+  AC1F D1               pop de
 28+  AC20 62 6B            ld hl,de                                ; get the points text into de
 29+  AC22 CD BD 84         call string_print
 30+  AC25
 31+  AC25 21 AB 84         ld hl, string_endlevel_anothergo
 32+  AC28 CD BD 84         call string_print
 33+  AC2B
 34+  AC2B 06 20            ld b,32
 35+  AC2D 3E 63            ld a,99
 36+  AC2F 11 60 59         ld de,22528+352                         ; attrs here
 37+  AC32 CD C2 A7         call screen_setcolours
 38+  AC35
 39+  AC35 06 20            ld b,32
 40+  AC37 3E 65            ld a,101
 41+  AC39 11 A0 59         ld de,22528+416                         ; attrs here
 42+  AC3C CD C2 A7         call screen_setcolours
 43+  AC3F
 44+  AC3F 06 20            ld b,32
 45+  AC41 3E 63            ld a,99
 46+  AC43 11 E0 59         ld de,22528+480                         ; attrs here
 47+  AC46 CD C2 A7         call screen_setcolours
 48+  AC49
 49+  AC49 06 20            ld b,32
 50+  AC4B 3E 62            ld a,98
 51+  AC4D 11 40 5A         ld de,22528+576                         ; attrs here
 52+  AC50 CD C2 A7         call screen_setcolours
 53+  AC53
 54+  AC53 08               ex af,af'                               ; get back a value with bonus type
 55+  AC54 06 14            ld b,20
 56+  AC56 CD 82 80         call utilities_pauseforframes
 57+  AC59
 58+  AC59 47               ld b,a                      ; put the bonus count in b
 59+  AC5A              endlevel_init2:
 60+  AC5A C5               push bc
 61+  AC5B 06 01            ld b,1
 62+  AC5D CD E9 BF         call scores_addthousands
 63+  AC60 CD DB B9         call player_recordcurrentscore
 64+  AC63 CD 09 C0         call scores_printscores     ; print the current scores
 65+  AC66 06 0A            ld b,10
 66+  AC68 CD 82 80         call utilities_pauseforframes
 67+  AC6B C1               pop bc
 68+  AC6C 10 EC            djnz endlevel_init2
 69+  AC6E
 70+  AC6E CD 47 80         call utilities_waitforkey   ; wait for keypress
 71+  AC71
 72+  AC71 C9               ret
 73+  AC72
 74+  AC72              ;
 75+  AC72              ; Works out the bonus
 76+  AC72              ; Outputs:
 77+  AC72              ; a = 15 (all seven)
 78+  AC72              ; a = 10 (3 large or 4 small)
 79+  AC72              ; a = 5 (1 large diamond)
 80+  AC72              ; hl - pointer to bonus text
 81+  AC72              ; de - pointer to points text
 82+  AC72              ;
 83+  AC72              endlevel_workoutbonus:
 84+  AC72 21 60 B2         ld hl,level01diamonds+2     ; location of state of first diamond
 85+  AC75 06 03            ld b,3                      ; number to check
 86+  AC77 16 00            ld d,0                      ; zero diamond count
 87+  AC79              endlevel_workoutbonus0:
 88+  AC79 7E               ld a,(hl)                   ; get state
 89+  AC7A FE 01            cp 1
 90+  AC7C C2 80 AC         jp nz,endlevel_workoutbonus1 ; if not, move on
 91+  AC7F 14               inc d                       ; increment diamond count
 92+  AC80              endlevel_workoutbonus1:
 93+  AC80 23               inc hl
 94+  AC81 23               inc hl
 95+  AC82 23               inc hl
 96+  AC83 23               inc hl
 97+  AC84 23               inc hl                      ; get to next state
 98+  AC85 10 F2            djnz endlevel_workoutbonus0
 99+  AC87
100+  AC87 21 70 B2         ld hl,level01gems+2     ; location of state of first gem
101+  AC8A 06 04            ld b,4                      ; number to check
102+  AC8C 1E 00            ld e,0                      ; zero gem count
103+  AC8E              endlevel_workoutbonus2:
104+  AC8E 7E               ld a,(hl)                   ; get state
105+  AC8F FE 01            cp 1
106+  AC91 C2 95 AC         jp nz,endlevel_workoutbonus3 ; if not, move on
107+  AC94 1C               inc e                       ; increment diamond count
108+  AC95              endlevel_workoutbonus3:
109+  AC95 23               inc hl
110+  AC96 23               inc hl
111+  AC97 23               inc hl
112+  AC98 23               inc hl
113+  AC99 23               inc hl                     ; get to next state
114+  AC9A 10 F2            djnz endlevel_workoutbonus2
115+  AC9C
116+  AC9C 7A               ld a,d
117+  AC9D 83               add e
118+  AC9E FE 07            cp 7                        ; check for max bonus
119+  ACA0 C2 AC AC         jp nz,endlevel_workoutbonus4 ;
120+  ACA3 3E 0F            ld a,15
121+  ACA5 21 70 84         ld hl, string_endlevel_bonus3
122+  ACA8 11 9C 84         ld de, string_endlevel_points3
123+  ACAB C9               ret                         ; return with bonus of 15
124+  ACAC              endlevel_workoutbonus4:
125+  ACAC 7A               ld a,d                      ; check for for diamonds
126+  ACAD FE 03            cp 3
127+  ACAF C2 BB AC         jp nz,endlevel_workoutbonus5
128+  ACB2 3E 0A            ld a,10
129+  ACB4 21 61 84         ld hl, string_endlevel_bonus2
130+  ACB7 11 8D 84         ld de, string_endlevel_points2
131+  ACBA C9               ret                         ; return with bonus of ten
132+  ACBB              endlevel_workoutbonus5:
133+  ACBB 7B               ld a,e                      ; check for four gems
134+  ACBC FE 04            cp 4
135+  ACBE C2 CA AC         jp nz,endlevel_workoutbonus6
136+  ACC1 3E 0A            ld a,10
137+  ACC3 21 61 84         ld hl, string_endlevel_bonus2
138+  ACC6 11 8D 84         ld de, string_endlevel_points2
139+  ACC9 C9               ret                         ; return with bonus of 10
140+  ACCA              endlevel_workoutbonus6:
141+  ACCA 3E 05            ld a,5                      ; otherwise, bonus is 5
142+  ACCC 21 52 84         ld hl, string_endlevel_bonus1
143+  ACCF 11 7F 84         ld de, string_endlevel_points1
144+  ACD2 C9               ret
145+  ACD3
146+  ACD3              ;
147+  ACD3              ; Draws text shared by the game over and high score screens
148+  ACD3              ;
149+  ACD3              endlevel_commontext:
150+  ACD3 CD 94 A7         call screen_setuptext       ; show scores
151+  ACD6 CD 09 C0         call scores_printscores     ; print the current scores
152+  ACD9
153+  ACD9 21 8A 83         ld hl,string_gameoverscreen_bestscores
154+  ACDC CD BD 84         call string_print
155+  ACDF
156+  ACDF 06 20            ld b,32
157+  ACE1 3E 45            ld a,69
158+  ACE3 11 C0 5A         ld de,22528+704                         ; attrs here
159+  ACE6 CD C2 A7         call screen_setcolours
160+  ACE9
161+  ACE9 C9               ret
162+  ACEA
163+  ACEA              ;
164+  ACEA              ; Initialises the screen
165+  ACEA              ;
166+  ACEA              endlevel_init:
167+  ACEA              ; We want a green screen.
168+  ACEA 3E 61            ld a,97             ; white ink (7) on black paper (0),
169+  ACEC                                      ; bright (64).
170+  ACEC CD 67 80         call utilities_clearscreen
171+  ACEF 32 8D 5C         ld (23693),a        ; set our screen colours.
172+  ACF2 3E 00            ld a,0              ; 2 is the code for red.
173+  ACF4 D3 FE            out (254),a         ; write to port 254.
174+  ACF6 C9               ret
# file closed: screen/endlevel.asm
 30   ACF7
 31   ACF7                  include "sound\sound.asm"
# file opened: sound/sound.asm
  1+  ACF7              sound_gemcollected:
  2+  ACF7 21 C8 00         ld hl,200 ; pitch.
  3+  ACFA 11 3E 00         ld de,62 ; duration.
  4+  ACFD CD B5 03         call 949 ; ROM beeper routine.
  5+  AD00 C9               ret
  6+  AD01
  7+  AD01              sound_pitchbend:
  8+  AD01 21 F4 01         ld hl,500 ; starting pitch.
  9+  AD04 06 FA            ld b,250 ; length of pitch bend.
 10+  AD06              sound_pitchbend0:
 11+  AD06 C5                push bc
 12+  AD07 E5               push hl ; store pitch.
 13+  AD08 11 01 00         ld de,1 ; very short duration.
 14+  AD0B CD B5 03         call 949 ; ROM beeper routine.
 15+  AD0E E1               pop hl ; restore pitch.
 16+  AD0F 23               inc hl ; pitch going up.
 17+  AD10 C1               pop bc
 18+  AD11 10 F3            djnz sound_pitchbend0 ; repeat.
 19+  AD13 C9               ret
 20+  AD14
 21+  AD14              sound_rockfell:
 22+  AD14 08               ex af,af'
 23+  AD15 1E 32            ld e,50 ; repeat 250 times.
 24+  AD17 21 00 00         ld hl,0 ; start pointer in ROM.
 25+  AD1A D5           sound_rockfell2 push de
 26+  AD1B 06 20            ld b,32 ; length of step.
 27+  AD1D C5           sound_rockfell0 push bc
 28+  AD1E 7E               ld a,(hl) ; next "random" number.
 29+  AD1F 23               inc hl ; pointer.
 30+  AD20 E6 F8            and 248 ; we want a black border.
 31+  AD22 D3 FE            out (254),a ; write to speaker.
 32+  AD24 7B               ld a,e ; as e gets smaller...
 33+  AD25 2F               cpl ; ...we increase the delay.
 34+  AD26 3D           sound_rockfell1 dec a ; decrement loop counter.
 35+  AD27 20 FD            jr nz,sound_rockfell1 ; delay loop.
 36+  AD29 C1               pop bc
 37+  AD2A 10 F1            djnz sound_rockfell0 ; next step.
 38+  AD2C D1               pop de
 39+  AD2D 7B               ld a,e
 40+  AD2E D6 18            sub 24 ; size of step.
 41+  AD30 FE 1E            cp 30 ; end of range.
 42+  AD32 CA 43 AD         jp z,sound_rockfell5
 43+  AD35 DA 43 AD         jp c, sound_rockfell5
 44+  AD38 5F               ld e,a
 45+  AD39 2F               cpl
 46+  AD3A 06 28        sound_rockfell3 ld b,40 ; silent period.
 47+  AD3C 10 FE        sound_rockfell4 djnz sound_rockfell4
 48+  AD3E 3D               dec a
 49+  AD3F 20 F9            jr nz,sound_rockfell3
 50+  AD41 18 D7            jr sound_rockfell2
 51+  AD43              sound_rockfell5
 52+  AD43 08               ex af,af'
 53+  AD44 C9               ret
 54+  AD45
# file closed: sound/sound.asm
 32   AD45
 33   AD45                  include "leveldata\level01.asm"
# file opened: leveldata/level01.asm
  1+  AD45              ; ###############################################################
  2+  AD45              ; Data for level 1
  3+  AD45              ; ###############################################################
  4+  AD45              level01:
  5+  AD45
  6+  AD45                  ;defb 09,04,04,04,04,04,04,04,04,04,04,04,04,04,04,09,09,04,04,04,04,04,04,04,04,04,04,04,04,04,04,09
  7+  AD45
  8+  AD45 00 00 05 05      defb 00,00,05,05,05,05,05,05,05,05,05,05,05,05,02,01,01,01,03,05,05,05,05,05,05,05,05,05,05,05,00,00
  8+  AD49 05 05 05 05
  8+  AD4D 05 05 05 05
  8+  AD51 05 05 02 01
  8+  AD55 01 01 03 05
  8+  AD59 05 05 05 05
  8+  AD5D 05 05 05 05
  8+  AD61 05 05 00 00
  9+  AD65 00 00 05 05      defb 00,00,05,05,05,05,05,05,05,05,05,05,02,01,01,01,01,01,01,01,03,05,05,05,05,05,05,05,05,05,00,00
  9+  AD69 05 05 05 05
  9+  AD6D 05 05 05 05
  9+  AD71 02 01 01 01
  9+  AD75 01 01 01 01
  9+  AD79 03 05 05 05
  9+  AD7D 05 05 05 05
  9+  AD81 05 05 00 00
 10+  AD85 00 00 05 05      defb 00,00,05,05,05,05,05,05,05,05,02,01,01,01,01,01,01,01,01,01,01,01,03,05,13,13,13,13,13,13,00,00
 10+  AD89 05 05 05 05
 10+  AD8D 05 05 02 01
 10+  AD91 01 01 01 01
 10+  AD95 01 01 01 01
 10+  AD99 01 01 03 05
 10+  AD9D 0D 0D 0D 0D
 10+  ADA1 0D 0D 00 00
 11+  ADA5 00 00 01 01      defb 00,00,01,01,01,01,00,01,01,01,01,01,01,01,01,01,01,01,01,01,01,01,01,03,05,05,05,05,05,05,00,00
 11+  ADA9 01 01 00 01
 11+  ADAD 01 01 01 01
 11+  ADB1 01 01 01 01
 11+  ADB5 01 01 01 01
 11+  ADB9 01 01 01 03
 11+  ADBD 05 05 05 05
 11+  ADC1 05 05 00 00
 12+  ADC5 00 00 01 01      defb 00,00,01,01,04,04,04,04,04,04,01,01,01,01,01,01,01,01,01,01,01,01,01,01,01,01,01,01,00,01,00,00
 12+  ADC9 04 04 04 04
 12+  ADCD 04 04 01 01
 12+  ADD1 01 01 01 01
 12+  ADD5 01 01 01 01
 12+  ADD9 01 01 01 01
 12+  ADDD 01 01 01 01
 12+  ADE1 00 01 00 00
 13+  ADE5 00 00 01 04      defb 00,00,01,04,04,04,04,04,04,04,04,04,01,01,01,01,01,01,01,01,01,01,01,01,00,00,00,00,00,01,00,00
 13+  ADE9 04 04 04 04
 13+  ADED 04 04 04 04
 13+  ADF1 01 01 01 01
 13+  ADF5 01 01 01 01
 13+  ADF9 01 01 01 01
 13+  ADFD 00 00 00 00
 13+  AE01 00 01 00 00
 14+  AE05 00 00 01 04      defb 00,00,01,04,04,01,01,01,01,01,04,04,04,04,01,01,01,01,01,01,01,00,00,00,00,01,01,01,01,01,00,00
 14+  AE09 04 01 01 01
 14+  AE0D 01 01 04 04
 14+  AE11 04 04 01 01
 14+  AE15 01 01 01 01
 14+  AE19 01 00 00 00
 14+  AE1D 00 01 01 01
 14+  AE21 01 01 00 00
 15+  AE25 00 00 01 04      defb 00,00,01,04,04,04,04,04,04,01,04,04,04,04,04,04,04,04,00,00,00,00,04,04,04,04,04,04,04,01,00,00
 15+  AE29 04 04 04 04
 15+  AE2D 04 01 04 04
 15+  AE31 04 04 04 04
 15+  AE35 04 04 00 00
 15+  AE39 00 00 04 04
 15+  AE3D 04 04 04 04
 15+  AE41 04 01 00 00
 16+  AE45 00 00 01 01      defb 00,00,01,01,01,04,01,01,01,01,04,04,04,04,04,04,04,04,00,04,04,04,04,04,04,04,04,04,04,01,00,00
 16+  AE49 01 04 01 01
 16+  AE4D 01 01 04 04
 16+  AE51 04 04 04 04
 16+  AE55 04 04 00 04
 16+  AE59 04 04 04 04
 16+  AE5D 04 04 04 04
 16+  AE61 04 01 00 00
 17+  AE65 00 00 01 00      defb 00,00,01,00,00,00,00,00,00,04,04,04,04,04,04,04,04,04,00,04,04,04,04,04,04,04,04,04,04,01,00,00
 17+  AE69 00 00 00 00
 17+  AE6D 00 04 04 04
 17+  AE71 04 04 04 04
 17+  AE75 04 04 00 04
 17+  AE79 04 04 04 04
 17+  AE7D 04 04 04 04
 17+  AE81 04 01 00 00
 18+  AE85 00 00 01 07      defb 00,00,01,07,07,07,07,07,07,01,04,04,04,04,04,04,04,04,00,04,04,04,04,04,04,04,04,04,04,01,00,00
 18+  AE89 07 07 07 07
 18+  AE8D 07 01 04 04
 18+  AE91 04 04 04 04
 18+  AE95 04 04 00 04
 18+  AE99 04 04 04 04
 18+  AE9D 04 04 04 04
 18+  AEA1 04 01 00 00
 19+  AEA5 00 00 01 00      defb 00,00,01,00,00,00,00,00,00,01,04,04,04,04,04,04,04,04,00,04,04,04,04,04,04,00,00,00,00,01,00,00
 19+  AEA9 00 00 00 00
 19+  AEAD 00 01 04 04
 19+  AEB1 04 04 04 04
 19+  AEB5 04 04 00 04
 19+  AEB9 04 04 04 04
 19+  AEBD 04 00 00 00
 19+  AEC1 00 01 00 00
 20+  AEC5 00 00 01 00      defb 00,00,01,00,00,00,00,00,00,01,04,04,04,04,04,04,04,04,00,04,04,04,04,04,04,00,04,04,00,01,00,00
 20+  AEC9 00 00 00 00
 20+  AECD 00 01 04 04
 20+  AED1 04 04 04 04
 20+  AED5 04 04 00 04
 20+  AED9 04 04 04 04
 20+  AEDD 04 00 04 04
 20+  AEE1 00 01 00 00
 21+  AEE5 00 00 01 06      defb 00,00,01,06,06,06,06,06,06,01,04,04,04,04,04,04,04,04,00,04,04,04,04,04,04,00,04,04,00,01,00,00
 21+  AEE9 06 06 06 06
 21+  AEED 06 01 04 04
 21+  AEF1 04 04 04 04
 21+  AEF5 04 04 00 04
 21+  AEF9 04 04 04 04
 21+  AEFD 04 00 04 04
 21+  AF01 00 01 00 00
 22+  AF05 00 00 01 06      defb 00,00,01,06,06,06,06,06,06,01,04,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,04,04,00,01,00,00
 22+  AF09 06 06 06 06
 22+  AF0D 06 01 04 00
 22+  AF11 00 00 00 00
 22+  AF15 00 00 00 00
 22+  AF19 00 00 00 00
 22+  AF1D 00 00 04 04
 22+  AF21 00 01 00 00
 23+  AF25 00 00 01 06      defb 00,00,01,06,06,06,06,06,06,01,04,00,04,04,04,04,04,04,00,04,04,04,00,04,04,04,04,04,00,01,00,00
 23+  AF29 06 06 06 06
 23+  AF2D 06 01 04 00
 23+  AF31 04 04 04 04
 23+  AF35 04 04 00 04
 23+  AF39 04 04 00 04
 23+  AF3D 04 04 04 04
 23+  AF41 00 01 00 00
 24+  AF45 00 00 01 06      defb 00,00,01,06,06,06,06,06,06,01,04,00,04,04,04,04,04,04,00,04,04,04,00,04,04,04,04,04,00,01,00,00
 24+  AF49 06 06 06 06
 24+  AF4D 06 01 04 00
 24+  AF51 04 04 04 04
 24+  AF55 04 04 00 04
 24+  AF59 04 04 00 04
 24+  AF5D 04 04 04 04
 24+  AF61 00 01 00 00
 25+  AF65 00 00 01 01      defb 00,00,01,01,01,01,01,01,01,01,04,00,04,04,04,04,04,04,00,04,04,04,00,04,04,04,04,04,00,01,00,00
 25+  AF69 01 01 01 01
 25+  AF6D 01 01 04 00
 25+  AF71 04 04 04 04
 25+  AF75 04 04 00 04
 25+  AF79 04 04 00 04
 25+  AF7D 04 04 04 04
 25+  AF81 00 01 00 00
 26+  AF85 00 00 01 04      defb 00,00,01,04,04,04,04,04,04,04,04,00,04,04,04,04,04,04,00,04,04,04,00,00,00,00,04,04,04,01,00,00
 26+  AF89 04 04 04 04
 26+  AF8D 04 04 04 00
 26+  AF91 04 04 04 04
 26+  AF95 04 04 00 04
 26+  AF99 04 04 00 00
 26+  AF9D 00 00 04 04
 26+  AFA1 04 01 00 00
 27+  AFA5 00 00 01 04      defb 00,00,01,04,04,04,00,00,00,00,00,00,04,04,04,04,04,04,00,04,04,04,04,04,04,00,04,04,04,01,00,00
 27+  AFA9 04 04 00 00
 27+  AFAD 00 00 00 00
 27+  AFB1 04 04 04 04
 27+  AFB5 04 04 00 04
 27+  AFB9 04 04 04 04
 27+  AFBD 04 00 04 04
 27+  AFC1 04 01 00 00
 28+  AFC5 00 00 01 04      defb 00,00,01,04,04,04,00,04,04,04,04,04,04,04,04,04,04,04,00,04,04,04,04,04,04,00,04,04,04,01,00,00
 28+  AFC9 04 04 00 04
 28+  AFCD 04 04 04 04
 28+  AFD1 04 04 04 04
 28+  AFD5 04 04 00 04
 28+  AFD9 04 04 04 04
 28+  AFDD 04 00 04 04
 28+  AFE1 04 01 00 00
 29+  AFE5 00 00 01 04      defb 00,00,01,04,04,04,00,04,04,04,01,01,01,01,01,01,01,01,01,01,01,01,01,01,04,00,04,04,04,01,00,00
 29+  AFE9 04 04 00 04
 29+  AFED 04 04 01 01
 29+  AFF1 01 01 01 01
 29+  AFF5 01 01 01 01
 29+  AFF9 01 01 01 01
 29+  AFFD 04 00 04 04
 29+  B001 04 01 00 00
 30+  B005 00 00 01 04      defb 00,00,01,04,04,04,00,04,04,04,01,00,00,00,00,00,00,00,00,00,00,00,00,01,04,00,04,04,04,01,00,00
 30+  B009 04 04 00 04
 30+  B00D 04 04 01 00
 30+  B011 00 00 00 00
 30+  B015 00 00 00 00
 30+  B019 00 00 00 01
 30+  B01D 04 00 04 04
 30+  B021 04 01 00 00
 31+  B025 00 00 01 04      defb 00,00,01,04,04,04,00,04,04,04,01,00,00,00,00,00,00,00,00,00,00,00,00,01,04,00,04,04,04,01,00,00
 31+  B029 04 04 00 04
 31+  B02D 04 04 01 00
 31+  B031 00 00 00 00
 31+  B035 00 00 00 00
 31+  B039 00 00 00 01
 31+  B03D 04 00 04 04
 31+  B041 04 01 00 00
 32+  B045 00 00 01 04      defb 00,00,01,04,04,04,00,04,04,04,01,00,00,00,00,00,00,00,00,00,00,00,00,01,04,00,04,04,04,01,00,00
 32+  B049 04 04 00 04
 32+  B04D 04 04 01 00
 32+  B051 00 00 00 00
 32+  B055 00 00 00 00
 32+  B059 00 00 00 01
 32+  B05D 04 00 04 04
 32+  B061 04 01 00 00
 33+  B065 00 00 01 04      defb 00,00,01,04,04,04,00,04,04,04,04,00,00,00,00,00,00,00,00,00,00,00,00,04,04,04,04,04,04,01,00,00
 33+  B069 04 04 00 04
 33+  B06D 04 04 04 00
 33+  B071 00 00 00 00
 33+  B075 00 00 00 00
 33+  B079 00 00 00 04
 33+  B07D 04 04 04 04
 33+  B081 04 01 00 00
 34+  B085 00 00 01 04      defb 00,00,01,04,04,04,04,04,04,04,01,00,00,00,00,00,00,00,00,00,00,00,00,01,04,04,04,04,04,01,00,00
 34+  B089 04 04 04 04
 34+  B08D 04 04 01 00
 34+  B091 00 00 00 00
 34+  B095 00 00 00 00
 34+  B099 00 00 00 01
 34+  B09D 04 04 04 04
 34+  B0A1 04 01 00 00
 35+  B0A5 00 00 01 04      defb 00,00,01,04,04,04,04,04,04,04,01,00,00,00,01,00,00,00,00,01,00,00,00,01,04,04,04,04,04,01,00,00
 35+  B0A9 04 04 04 04
 35+  B0AD 04 04 01 00
 35+  B0B1 00 00 01 00
 35+  B0B5 00 00 00 01
 35+  B0B9 00 00 00 01
 35+  B0BD 04 04 04 04
 35+  B0C1 04 01 00 00
 36+  B0C5 00 00 01 01      defb 00,00,01,01,01,01,01,01,01,01,01,01,01,01,01,01,01,01,01,01,01,01,01,01,01,01,01,01,01,01,00,00
 36+  B0C9 01 01 01 01
 36+  B0CD 01 01 01 01
 36+  B0D1 01 01 01 01
 36+  B0D5 01 01 01 01
 36+  B0D9 01 01 01 01
 36+  B0DD 01 01 01 01
 36+  B0E1 01 01 00 00
 37+  B0E5
 38+  B0E5              ; ###############################################################
 39+  B0E5              ; Object data: horiz, vert, state, memh, meml
 40+  B0E5              ; ###############################################################
 41+  B0E5              level01rocks:
 42+  B0E5 09 04 00 00      defb 9,4,0,0,0
 42+  B0E9 00
 43+  B0EA 0C 07 00 00      defb 12,7,0,0,0
 43+  B0EE 00
 44+  B0EF 10 07 00 00      defb 16,7,0,0,0
 44+  B0F3 00
 45+  B0F4 0B 08 00 00      defb 11,8,0,0,0
 45+  B0F8 00
 46+  B0F9 0A 0A 00 00      defb 10,10,0,0,0
 46+  B0FD 00
 47+  B0FE 0C 0A 00 00      defb 12,10,0,0,0
 47+  B102 00
 48+  B103 0D 09 00 00      defb 13,9,0,0,0
 48+  B107 00
 49+  B108 0E 08 00 00      defb 14,8,0,0,0
 49+  B10C 00
 50+  B10D 0F 0B 00 00      defb 15,11,0,0,0
 50+  B111 00
 51+  B112 0B 0C 00 00      defb 11,12,0,0,0
 51+  B116 00
 52+  B117 11 0C 00 00      defb 17,12,0,0,0
 52+  B11B 00
 53+  B11C 13 08 00 00      defb 19,8,0,0,0
 53+  B120 00
 54+  B121 16 09 00 00      defb 22,9,0,0,0
 54+  B125 00
 55+  B126 13 0A 00 00      defb 19,10,0,0,0
 55+  B12A 00
 56+  B12B 15 0A 00 00      defb 21,10,0,0,0
 56+  B12F 00
 57+  B130 15 0C 00 00      defb 21,12,0,0,0
 57+  B134 00
 58+  B135 16 0C 00 00      defb 22,12,0,0,0
 58+  B139 00
 59+  B13A 18 0A 00 00      defb 24,10,0,0,0
 59+  B13E 00
 60+  B13F 19 09 00 00      defb 25,9,0,0,0
 60+  B143 00
 61+  B144 1C 09 00 00      defb 28,9,0,0,0
 61+  B148 00
 62+  B149 1B 0C 00 00      defb 27,12,0,0,0
 62+  B14D 00
 63+  B14E 1A 0D 00 00      defb 26,13,0,0,0
 63+  B152 00
 64+  B153 19 0E 00 00      defb 25,14,0,0,0
 64+  B157 00
 65+  B158 19 10 00 00      defb 25,16,0,0,0
 65+  B15C 00
 66+  B15D 1A 11 00 00      defb 26,17,0,0,0
 66+  B161 00
 67+  B162 1B 11 00 00      defb 27,17,0,0,0
 67+  B166 00
 68+  B167 1C 12 00 00      defb 28,18,0,0,0
 68+  B16B 00
 69+  B16C 1A 13 00 00      defb 26,19,0,0,0
 69+  B170 00
 70+  B171 1B 15 00 00      defb 27,21,0,0,0
 70+  B175 00
 71+  B176 1A 17 00 00      defb 26,23,0,0,0
 71+  B17A 00
 72+  B17B 1B 18 00 00      defb 27,24,0,0,0
 72+  B17F 00
 73+  B180 19 18 00 00      defb 25,24,0,0,0
 73+  B184 00
 74+  B185 18 17 00 00      defb 24,23,0,0,0
 74+  B189 00
 75+  B18A 13 14 00 00      defb 19,20,0,0,0
 75+  B18E 00
 76+  B18F 14 12 00 00      defb 20,18,0,0,0
 76+  B193 00
 77+  B194 14 10 00 00      defb 20,16,0,0,0
 77+  B198 00
 78+  B199 15 10 00 00      defb 21,16,0,0,0
 78+  B19D 00
 79+  B19E 16 12 00 00      defb 22,18,0,0,0
 79+  B1A2 00
 80+  B1A3 11 14 00 00      defb 17,20,0,0,0
 80+  B1A7 00
 81+  B1A8 0D 11 00 00      defb 13,17,0,0,0
 81+  B1AC 00
 82+  B1AD 0C 13 00 00      defb 12,19,0,0,0
 82+  B1B1 00
 83+  B1B2 0B 13 00 00      defb 11,19,0,0,0
 83+  B1B6 00
 84+  B1B7 0A 11 00 00      defb 10,17,0,0,0
 84+  B1BB 00
 85+  B1BC 05 12 00 00      defb 5,18,0,0,0
 85+  B1C0 00
 86+  B1C1 07 16 00 00      defb 7,22,0,0,0
 86+  B1C5 00
 87+  B1C6 09 17 00 00      defb 9,23,0,0,0
 87+  B1CA 00
 88+  B1CB 07 18 00 00      defb 7,24,0,0,0
 88+  B1CF 00
 89+  B1D0 05 18 00 00      defb 5,24,0,0,0
 89+  B1D4 00
 90+  B1D5 06 19 00 00      defb 6,25,0,0,0
 90+  B1D9 00
 91+  B1DA 08 19 00 00      defb 8,25,0,0,0
 91+  B1DE 00
 92+  B1DF 04 17 00 00      defb 4,23,0,0,0
 92+  B1E3 00
 93+  B1E4 FF               defb 255
 94+  B1E5
 95+  B1E5              level01missiles:
 96+  B1E5 0B 17 00 00      defb 11,23,0,0,0
 96+  B1E9 00
 97+  B1EA 0B 16 00 00      defb 11,22,0,0,0
 97+  B1EE 00
 98+  B1EF 0C 17 00 00      defb 12,23,0,0,0
 98+  B1F3 00
 99+  B1F4 0C 16 00 00      defb 12,22,0,0,0
 99+  B1F8 00
100+  B1F9 0D 17 00 00      defb 13,23,0,0,0
100+  B1FD 00
101+  B1FE 0D 16 00 00      defb 13,22,0,0,0
101+  B202 00
102+  B203 0E 17 00 00      defb 14,23,0,0,0
102+  B207 00
103+  B208 0E 16 00 00      defb 14,22,0,0,0
103+  B20C 00
104+  B20D 0F 17 00 00      defb 15,23,0,0,0
104+  B211 00
105+  B212 0F 16 00 00      defb 15,22,0,0,0
105+  B216 00
106+  B217 10 17 00 00      defb 16,23,0,0,0
106+  B21B 00
107+  B21C 10 16 00 00      defb 16,22,0,0,0
107+  B220 00
108+  B221 11 17 00 00      defb 17,23,0,0,0
108+  B225 00
109+  B226 11 16 00 00      defb 17,22,0,0,0
109+  B22A 00
110+  B22B 12 17 00 00      defb 18,23,0,0,0
110+  B22F 00
111+  B230 12 16 00 00      defb 18,22,0,0,0
111+  B234 00
112+  B235 13 17 00 00      defb 19,23,0,0,0
112+  B239 00
113+  B23A 13 16 00 00      defb 19,22,0,0,0
113+  B23E 00
114+  B23F 14 17 00 00      defb 20,23,0,0,0
114+  B243 00
115+  B244 14 16 00 00      defb 20,22,0,0,0
115+  B248 00
116+  B249 15 17 00 00      defb 21,23,0,0,0
116+  B24D 00
117+  B24E 15 16 00 00      defb 21,22,0,0,0
117+  B252 00
118+  B253 16 17 00 00      defb 22,23,0,0,0
118+  B257 00
119+  B258 16 16 00 00      defb 22,22,0,0,0
119+  B25C 00
120+  B25D FF               defb 255
121+  B25E
122+  B25E              ;
123+  B25E              ; Diamonds: x,y,state,mem1+mem2
124+  B25E              ;
125+  B25E              level01diamonds:
126+  B25E 0C 1B 00 00      defb 12,27,0,0,0
126+  B262 00
127+  B263 10 1B 00 00      defb 16,27,0,0,0
127+  B267 00
128+  B268 15 1B 00 00      defb 21,27,0,0,0
128+  B26C 00
129+  B26D FF               defb 255
130+  B26E
131+  B26E              level01gems:
132+  B26E 12 14 00 00      defb 18,20,0,0,0
132+  B272 00
133+  B273 06 18 00 00      defb 6,24,0,0,0
133+  B277 00
134+  B278 19 17 00 00      defb 25,23,0,0,0
134+  B27C 00
135+  B27D 1C 11 00 00      defb 28,17,0,0,0
135+  B281 00
136+  B282 FF               defb 255
137+  B283              ;
138+  B283              ; Score area colours
139+  B283              ;
140+  B283              score_colours:
141+  B283 47 47 47 47      defb 71,71,71,71,71,71,71,71,71,71,71,66,67,67,67,67,67,67,67,67,66,71,71,71,71,71,71,71,71,71,71,71
141+  B287 47 47 47 47
141+  B28B 47 47 47 42
141+  B28F 43 43 43 43
141+  B293 43 43 43 43
141+  B297 42 47 47 47
141+  B29B 47 47 47 47
141+  B29F 47 47 47 47
142+  B2A3 47 47 47 47      defb 71,71,71,71,71,71,71,71,71,71,71,70,70,70,70,70,70,70,70,70,70,71,71,71,71,71,71,71,71,71,71,71
142+  B2A7 47 47 47 47
142+  B2AB 47 47 47 46
142+  B2AF 46 46 46 46
142+  B2B3 46 46 46 46
142+  B2B7 46 47 47 47
142+  B2BB 47 47 47 47
142+  B2BF 47 47 47 47
143+  B2C3
144+  B2C3              high_score_colours:
145+  B2C3 00 00 00 42      defb  0, 0, 0,66,66,66,71,71,71,71,71,71,67,67,67,71,71,71,71,71,71,70,70,70,71,71,71,71,71,71,0,0
145+  B2C7 42 42 47 47
145+  B2CB 47 47 47 47
145+  B2CF 43 43 43 47
145+  B2D3 47 47 47 47
145+  B2D7 47 46 46 46
145+  B2DB 47 47 47 47
145+  B2DF 47 47 00 00
# file closed: leveldata/level01.asm
 34   B2E3                  include "graphics\graphics.asm"
# file opened: graphics/graphics.asm
  1+  B2E3              ; Tiles graphics.
  2+  B2E3              sprites:
  3+  B2E3 00 00 00 00      defb    0  ,  0,  0,  0,  0,  0,  0,  0   ; 0, space
  3+  B2E7 00 00 00 00
  4+  B2EB FF FF FF FF      defb    255,255,255,255,255,255,255,255   ; 1, cyan block
  4+  B2EF FF FF FF FF
  5+  B2F3 01 03 07 0F      defb	  1,  3,  7, 15, 31, 63,127,255   ; 2, slope left
  5+  B2F7 1F 3F 7F FF
  6+  B2FB 80 C0 E0 F0      defb    128,192,224,240,248,252,254,255   ; 3, slope right
  6+  B2FF F8 FC FE FF
  7+  B303 55 AA 55 AA      defb    85,170, 85,170, 85,170, 85,170    ; 4, dirt
  7+  B307 55 AA 55 AA
  8+  B30B 00 00 00 00      defb    0  ,  0,  0,  0,  0,  0,  0,  0   ; 5, sky block
  8+  B30F 00 00 00 00
  9+  B313 FF FF FF FF      defb    255,255,255,255,255,255,255,255   ; 6, slime block
  9+  B317 FF FF FF FF
 10+  B31B FF FF 00 00      defb    255,255,  0,  0,  0,  0,  0,  0   ; 7, trapdoor
 10+  B31F 00 00 00 00
 11+  B323 18 2C 4E 8F      defb    24, 44, 78,143,241,114, 52,  24    ; 8, diamond
 11+  B327 F1 72 34 18
 12+  B32B 3C 7E FF 7F      defb    60,126,255,127,254,254,255,126    ; 9, rock
 12+  B32F FE FE FF 7E
 13+  B333 7E FF 7F 7F  	defb	126,255,127,127,254,255,126, 60    ; 10, rock 2
 13+  B337 FE FF 7E 3C
 14+  B33B 00 00 00 00      defb    0  ,  0,  0,  0,  0,  0,255,255   ; 11, sky block, pixel trapdoor
 14+  B33F 00 00 FF FF
 15+  B343 99 DB 7E 24  	defb    153,219,126, 36,255, 66, 36, 24   ; 12, missile
 15+  B347 FF 42 24 18
 16+  B34B 00 00 00 00      defb    0  ,  0,  0,  0,  0,  0,  0,  0   ; 13, sky block, tank background
 16+  B34F 00 00 00 00
 17+  B353 00 00 00 00  	defb    0,  0,  0,  0,  0, 60, 90, 52     ; 14, gem
 17+  B357 00 3C 5A 34
 18+  B35B FD FE FD FE  	defb	253,254,253,254,253,254,253,254   ; 15, damaged mountain
 18+  B35F FD FE FD FE
 19+  B363 F4 F8 F4 F8  	defb	244,248,244,248,244,248,244,248   ; 16, damaged mountain 2
 19+  B367 F4 F8 F4 F8
 20+  B36B D0 E0 D0 E0  	defb	208,224,208,224,208,224,208,224   ; 17, damaged mountain 3
 20+  B36F D0 E0 D0 E0
 21+  B373 40 80 40 80  	defb	 64,128, 64,128, 64,128, 64,128   ; 18, damaged mountain 4
 21+  B377 40 80 40 80
 22+  B37B 00 00 00 ED  	defb	0,  0,  0,237,237,  0,  0,  0	  ; 19, tank missile
 22+  B37F ED 00 00 00
 23+  B383 99 DB 7E 24  	defb    153,219,126, 36,255,126, 60, 24   ; 20, missile active
 23+  B387 FF 7E 3C 18
 24+  B38B
 25+  B38B
 26+  B38B              sprite_attrs:
 27+  B38B 46               defb    070 ; 0, space
 28+  B38C 4D               defb    077 ; 1, cyan block
 29+  B38D 4D               defb    077 ; 2, slope left
 30+  B38E 4D               defb    077 ; 3, slope right
 31+  B38F 46               defb    070 ; 4, dirt
 32+  B390 4E               defb    078 ; 5, sky
 33+  B391 4C               defb    076 ; 6, slime
 34+  B392 42               defb    066 ; 7, trapdoor
 35+  B393 46               defb    070 ; 8, diamond
 36+  B394 42               defb    066 ; 9, rock
 37+  B395 42               defb    066 ; 10, rock 2
 38+  B396 49           	defb    073 ; 11, sky, trapdoor
 39+  B397 43           	defb    067 ; 12, missile
 40+  B398 4A               defb    074 ; 13, sky, red ink (tank)
 41+  B399 46               defb    070 ; 14, gem
 42+  B39A 4D               defb    077 ; 15, damaged mountain
 43+  B39B 4D               defb    077 ; 16, damaged mountain 2
 44+  B39C 4D               defb    077 ; 17, damaged mountain 3
 45+  B39D 4D               defb    077 ; 18, damaged mountain 4
 46+  B39E 00           	defb 	000 ; 19, tank missile (not used
 47+  B39F 43           	defb    067 ; 20, missile active
 48+  B3A0
 49+  B3A0
 50+  B3A0              player_sprite:
 51+  B3A0 10 39 92 FC  	defb	 16, 57,146,252, 56, 61,195,128 ; 0 up/down 1
 51+  B3A4 38 3D C3 80
 52+  B3A8 08 1C 08 FC  	defb	  8, 28,  8,252, 60, 28, 22, 50 ; 1 left 1
 52+  B3AC 3C 1C 16 32
 53+  B3B0 10 38 10 3F      defb   	 16, 56, 16, 63, 60, 56,104, 76 ; 2 right 1
 53+  B3B4 3C 38 68 4C
 54+  B3B8 08 9C 49 3F  	defb	  8,156, 73, 63, 28,188,195,  1 ; 3 up/down 2
 54+  B3BC 1C BC C3 01
 55+  B3C0 08 1C 08 FC  	defb	  8, 28,  8,252, 60, 60,100, 12; 4 left 2
 55+  B3C4 3C 3C 64 0C
 56+  B3C8 10 38 10 3F  	defb	 16, 56, 16, 63, 60, 60, 38, 48 ; 5 right 2
 56+  B3CC 3C 3C 26 30
 57+  B3D0 54 28 10 12  	defb	 84, 40, 16, 18, 30, 92,253, 95 ; 6 shoot up
 57+  B3D4 1E 5C FD 5F
 58+  B3D8 02 87 42 BF  	defb	 2,135, 66,191, 79,143, 25,  3  ; 7 shoot left
 58+  B3DC 4F 8F 19 03
 59+  B3E0 40 E1 42 FD  	defb	 64,225, 66,253,242,241,152,192 ; 8 shoot right
 59+  B3E4 F2 F1 98 C0
 60+  B3E8 FA BF 3A 78  	defb	 250,191, 58,120, 72,  8, 20, 42 ; 9 shoot down
 60+  B3EC 48 08 14 2A
 61+  B3F0 92 BA 94 78  	defb 	 146,186,148,120, 56,120, 68,195 ; 10 crushed 1
 61+  B3F4 38 78 44 C3
 62+  B3F8 49 5D 29 1E  	defb	  73, 93, 41, 30, 28, 30, 34,195 ; 11 crushed 2
 62+  B3FC 1C 1E 22 C3
 63+  B400
 64+  B400              ;
 65+  B400              ; First 4 top half, next 4 bottom 1, next 4 bottom 2
 66+  B400              ;
 67+  B400              ship_sprite:
 68+  B400 00 00 00 01  	defb	  0,  0,  0,  1,  3, 31,127,255
 68+  B404 03 1F 7F FF
 69+  B408 1F 01 7F FF  	defb	 31,  1,127,255,255,255,255,255
 69+  B40C FF FF FF FF
 70+  B410 F8 80 FE FF  	defb	248,128,254,255,255,255,255,255
 70+  B414 FF FF FF FF
 71+  B418 00 00 00 80  	defb	  0,  0,  0,128,192,248,254,255
 71+  B41C C0 F8 FE FF
 72+  B420 B3 B3 7F 1F  	defb	179,179,127, 31,  3,  3,  2,  7
 72+  B424 03 03 02 07
 73+  B428 8F 8F FF FF  	defb	143,143,255,255,255, 15,  7,131
 73+  B42C FF 0F 07 83
 74+  B430 0F 0F FF FF  	defb	 15, 15,255,255,255, 16, 32,193
 74+  B434 FF 10 20 C1
 75+  B438 19 19 FE F8  	defb	 25, 25,254,248,192,192, 64,224
 75+  B43C C0 C0 40 E0
 76+  B440 98 98 7F 1F  	defb	152,152,127, 31,  3,  3,  2,  7
 76+  B444 03 03 02 07
 77+  B448 F0 F0 FF FF  	defb	240,240,255,255,255,  8,  4,131
 77+  B44C FF 08 04 83
 78+  B450 F1 F1 FF FF  	defb	241,241,255,255,255,240,224,193
 78+  B454 FF F0 E0 C1
 79+  B458 CD CD FE F8  	defb	205,205,254,248,192,192, 64,224
 79+  B45C C0 C0 40 E0
 80+  B460
 81+  B460              ;
 82+  B460              ;  First 8 frames are tank, last frame is the gun barrel
 83+  B460              ;
 84+  B460              tank_sprite:
 85+  B460 00 00 00 7F  	defb	  0,  0,  0,127,127,  0,  0,  0
 85+  B464 7F 00 00 00
 86+  B468 01 03 FE FC  	defb	  1,  3,254,252,254,255,127, 64
 86+  B46C FE FF 7F 40
 87+  B470 FF FF 03 F9  	defb	255,255,  3,249,  3,255,255,  1
 87+  B474 03 FF FF 01
 88+  B478 00 00 C0 E0  	defb	  0,  0,192,224,224,192,  0,  0
 88+  B47C E0 C0 00 00
 89+  B480 3F 7F E1 FB  	defb	 63,127,225,251,247,225,127, 63
 89+  B484 F7 E1 7F 3F
 90+  B488 FF FF 16 52  	defb	255,255, 22, 82, 84, 22,255,255
 90+  B48C 54 16 FF FF
 91+  B490 FF FF A8 A9  	defb	255,255,168,169,155,168,255,255
 91+  B494 9B A8 FF FF
 92+  B498 FC FE 8F AF  	defb	252,254,143,175,159,175,254,252
 92+  B49C 9F AF FE FC
 93+  B4A0 00 00 00 1F  	defb	  0,  0,  0, 31, 31,  0,  0,  0 ; +64
 93+  B4A4 1F 00 00 00
# file closed: graphics/graphics.asm
 35   B4A8
 36   B4A8                  include "game\control.asm"
# file opened: game/control.asm
  1+  B4A8              ;
  2+  B4A8              ; Check the keyboard then move
  3+  B4A8              ;
  4+  B4A8              control_keyboard:
  5+  B4A8 3A 36 B9         ld a,(player+11)    ; first, check if player is dying
  6+  B4AB FE 00            cp 0
  7+  B4AD C0               ret nz               ; if so, can't move
  8+  B4AE 3A 30 B9         ld a,(player+5)      ; next, check if the player has pixels left to move
  9+  B4B1 FE 00            cp 0
 10+  B4B3 CA BA B4         jp z, control_keyboard5
 11+  B4B6 CD BF B5         call control_automove
 12+  B4B9 C9               ret
 13+  B4BA              control_keyboard5:
 14+  B4BA 3A 31 B9         ld a,(player+6)      ; next, check if the player is digging
 15+  B4BD FE 00            cp 0
 16+  B4BF CA C6 B4         jp z, control_keyboard0
 17+  B4C2 CD FD B4         call control_dig
 18+  B4C5 C9               ret
 19+  B4C6              control_keyboard0:
 20+  B4C6 01 FE FB         ld bc,64510         ; port for keyboard row q-t.
 21+  B4C9 ED 78            in a,(c)            ; read keyboard.
 22+  B4CB 47               ld b,a              ; store result in b register.
 23+  B4CC CB 18            rr b                ; check outermost key (q).
 24+  B4CE D2 ED B4         jp nc,control_keyboard1
 25+  B4D1 01 FE FD         ld bc,65022         ; port for keyboard row a-f.
 26+  B4D4 ED 78            in a,(c)            ; read keyboard.
 27+  B4D6 47               ld b,a              ; store result in b register.
 28+  B4D7 CB 18            rr b                ; check outermost key (a).
 29+  B4D9 D2 F1 B4         jp nc,control_keyboard2
 30+  B4DC 01 FE DF         ld bc,57342         ; port for keyboard row y-p.
 31+  B4DF ED 78            in a,(c)            ; read keyboard.
 32+  B4E1 47               ld b,a              ; store result in b register.
 33+  B4E2 CB 18            rr b                ; check outermost key (p).
 34+  B4E4 D2 F5 B4         jp nc,control_keyboard3
 35+  B4E7 CB 18            rr b                ; check next key.
 36+  B4E9 D2 F9 B4         jp nc,control_keyboard4
 37+  B4EC C9               ret
 38+  B4ED              control_keyboard1:
 39+  B4ED CD 08 B6         call control_pl_moveup         ; player up.
 40+  B4F0 C9               ret
 41+  B4F1              control_keyboard2:
 42+  B4F1 CD 37 B6         call control_pl_movedown       ; player down.
 43+  B4F4 C9               ret
 44+  B4F5              control_keyboard3:
 45+  B4F5 CD 94 B6         call control_pl_moveright       ; player left.
 46+  B4F8 C9               ret
 47+  B4F9              control_keyboard4:
 48+  B4F9 CD 64 B6         call control_pl_moveleft       ; player right.
 49+  B4FC C9               ret
 50+  B4FD
 51+  B4FD              ;
 52+  B4FD              ; Performs a dig if the counter has reset, otherwise, messes with the graphics
 53+  B4FD              ;
 54+  B4FD              control_dig:
 55+  B4FD ED 4B 2B B9      ld bc,(player)      ; load the current coords into bc
 56+  B501 C5               push bc
 57+  B502 3A 2D B9         ld a,(player+2)     ; get the direction
 58+  B505 FE 01            cp 1                ; left
 59+  B507 CA 1F B5         jp z,control_dig0
 60+  B50A FE 02            cp 2                ; right
 61+  B50C CA 34 B5         jp z,control_dig1
 62+  B50F FE 03            cp 3                ; down
 63+  B511 CA 58 B5         jp z,control_dig5
 64+  B514 FE 00            cp 0                ; up
 65+  B516 CA 48 B5         jp z,control_dig4
 66+  B519 21 31 B9         ld hl,player+6
 67+  B51C 36 00            ld (hl),0           ; turn off digging
 68+  B51E C9               ret                 ; return
 69+  B51F              control_dig0:           ; going left
 70+  B51F CD 29 A9         call sprites_scadd  ; get the current coord
 71+  B522 62 6B            ld hl,de
 72+  B524 2B               dec hl              ; move one left
 73+  B525 C1               pop bc              ; get the coords back, subtract 8 from horiz, 8 from vert, store (will be coords of space above dug dirt)
 74+  B526 78               ld a,b
 75+  B527 06 08            ld b,8
 76+  B529 90               sub b
 77+  B52A 47               ld b,a
 78+  B52B 79               ld a,c
 79+  B52C 0E 08            ld c,8
 80+  B52E 91               sub c
 81+  B52F 4F               ld c,a
 82+  B530 C5               push bc
 83+  B531 C3 61 B5         jp control_dig2
 84+  B534              control_dig1:
 85+  B534 CD 29 A9         call sprites_scadd  ; get the current coord
 86+  B537 62 6B            ld hl,de
 87+  B539 23               inc hl              ; move one right
 88+  B53A C1               pop bc              ; get the coords back, add 8 to horiz, subtract 8 from vert store (will be coords of space above dug dirt)
 89+  B53B 3E 08            ld a,8
 90+  B53D 80               add a,b
 91+  B53E 47               ld b,a
 92+  B53F 79               ld a,c
 93+  B540 0E 08            ld c,8
 94+  B542 91               sub c
 95+  B543 4F               ld c,a
 96+  B544 C5               push bc
 97+  B545 C3 61 B5         jp control_dig2
 98+  B548              control_dig4:
 99+  B548 CD 29 A9         call sprites_scadd  ; get the current coord
100+  B54B 62 6B            ld hl,de
101+  B54D 11 20 00         ld de,32
102+  B550 ED 52            sbc hl,de             ; move one up
103+  B552 C1               pop bc              ; get the coords back, 1 from vert, store, then we'll sub 1 from c for each row later
104+  B553 0D               dec c
105+  B554 C5               push bc
106+  B555 C3 79 B5         jp control_dig6
107+  B558              control_dig5:
108+  B558 CD 29 A9         call sprites_scadd  ; get the current coord
109+  B55B 62 6B            ld hl,de
110+  B55D 24               inc h              ; move one down
111+  B55E                                     ; not bothered about working out bc here, since rock will never fall if digging down
112+  B55E C3 61 B5         jp control_dig2
113+  B561              ; Normal (not up) digging
114+  B561              control_dig2:
115+  B561 3A 33 B9         ld a,(player+8)     ; get the number of rows we need to overwrite
116+  B564 47               ld b,a              ; rows to copy over
117+  B565 E5               push hl             ; store the memory location of the first row for later
118+  B566              control_dig3:
119+  B566 CD A8 B5         call control_getpixelrow
120+  B569 77               ld (hl),a           ; load contents into row
121+  B56A 11 20 00         ld de,32
122+  B56D 19               add hl,de           ; move to next row
123+  B56E 10 F6            djnz control_dig3
124+  B570 E1               pop hl              ; get the original memory location back
125+  B571 11 20 00         ld de,32
126+  B574 ED 52            sbc hl,de           ; move to above row, ready for checking for rock
127+  B576 C3 8F B5         jp control_dig10
128+  B579              ; Special case for going up
129+  B579              control_dig6:
130+  B579 3A 33 B9         ld a,(player+8)     ; get the number of rows we need to overwrite
131+  B57C 47               ld b,a              ; rows to copy over
132+  B57D              control_dig7:
133+  B57D CD A8 B5         call control_getpixelrow
134+  B580              control_dig12:
135+  B580 77               ld (hl),a           ; load empty into row
136+  B581 11 20 00         ld de,32
137+  B584 ED 52            sbc hl,de           ; move up to next row
138+  B586 0D               dec c               ; decrease c to track rows
139+  B587 10 F4            djnz control_dig7
140+  B589 79               ld a,c
141+  B58A D6 07            sub 7
142+  B58C C1               pop bc
143+  B58D 4F               ld c,a
144+  B58E C5               push bc             ; store the decreased c coord
145+  B58F              control_dig10:
146+  B58F DD 21 32 B9      ld ix,player+7
147+  B593 DD 7E 00         ld a,(ix)     ; get the dig frame number
148+  B596 3D               dec a
149+  B597 DD 77 00         ld (ix),a
150+  B59A                  ; call the check for rocks above the removed dirt
151+  B59A DD 21 31 B9      ld ix,player+6
152+  B59E DD 7E 00         ld a,(ix)     ; get the dig state
153+  B5A1 FE 00            cp 0
154+  B5A3 C1               pop bc
155+  B5A4 CC 4B BE         call z, rocks_checkforfalling ; make the check if we're no longer digging
156+  B5A7 C9               ret
157+  B5A8
158+  B5A8              ;
159+  B5A8              ; Gets a modified pixel row to overwrite dirt - if this is the last dig, overwrite with nothing, otherwise xor to flip the dirt
160+  B5A8              ; Inputs:
161+  B5A8              ; hl - memory of pixel row
162+  B5A8              ; Outputs:
163+  B5A8              ; a - modified row to write
164+  B5A8              ;
165+  B5A8              control_getpixelrow:
166+  B5A8 3A 32 B9         ld a,(player+7)     ; get the dig frame number
167+  B5AB FE 00            cp 0                ; is this the last dig
168+  B5AD CA B4 B5         jp z,control_getpixelrow1
169+  B5B0 7E               ld a,(hl)           ; if not, xor with 255 to flip it
170+  B5B1 EE FF            xor 255
171+  B5B3 C9               ret
172+  B5B4              control_getpixelrow1:
173+  B5B4 DD 21 31 B9      ld ix,player+6
174+  B5B8 DD 36 00 00      ld (ix),0           ; turn off digging
175+  B5BC 3E 00            ld a,0              ; if it is, load with empty
176+  B5BE C9               ret
177+  B5BF
178+  B5BF              ;
179+  B5BF              ; Auto move the player until pixels is zero
180+  B5BF              ;
181+  B5BF              control_automove:
182+  B5BF 5F               ld e,a              ; store the number of pixels left to move in e
183+  B5C0 ED 4B 2B B9      ld bc,(player)      ; load the current coords into bc
184+  B5C4 21 2D B9         ld hl,player+2      ; get the direction
185+  B5C7 7E               ld a,(hl)
186+  B5C8 FE 03            cp 3                ; down
187+  B5CA CA DE B5         jp z,control_automove3  ; don't need to do anything
188+  B5CD FE 00            cp 0                ; going up
189+  B5CF CA EA B5         jp z,control_automove2
190+  B5D2 FE 01            cp 1                ; going left?
191+  B5D4 CA F6 B5         jp z,control_automove0
192+  B5D7 78               ld a,b
193+  B5D8 3C               inc a               ; if we're going right, increment a twice for two pixels
194+  B5D9 3C               inc a
195+  B5DA 47               ld b,a
196+  B5DB C3 FA B5         jp control_automove1
197+  B5DE              control_automove3:
198+  B5DE 79               ld a,c
199+  B5DF 3C               inc a
200+  B5E0 3C               inc a               ; if we're going down, increment twice
201+  B5E1 4F               ld c,a
202+  B5E2 FE 90            cp 144
203+  B5E4 CC C2 B6         call z, control_scroll_down
204+  B5E7 C3 FA B5         jp control_automove1
205+  B5EA              control_automove2:
206+  B5EA 79               ld a,c
207+  B5EB 3D               dec a
208+  B5EC 3D               dec a               ; if we're going up, decrement twice
209+  B5ED 4F               ld c,a
210+  B5EE FE 60            cp 96
211+  B5F0 CC CF B6         call z, control_scroll_up
212+  B5F3 C3 FA B5         jp control_automove1
213+  B5F6              control_automove0:
214+  B5F6 78               ld a,b
215+  B5F7 3D               dec a               ; if we're going left, decrement a twice
216+  B5F8 3D               dec a
217+  B5F9 47               ld b,a
218+  B5FA              control_automove1:
219+  B5FA ED 43 2B B9      ld (player),bc      ; and back to player
220+  B5FE 7B               ld a,e              ; now get the pixel count back
221+  B5FF 3D               dec a               ; decrease by one
222+  B600 21 30 B9         ld hl,player+5
223+  B603 77               ld (hl),a           ; copy back
224+  B604 CD AF BA         call player_justmoved
225+  B607 C9               ret
226+  B608
227+  B608              ;
228+  B608              ; Moves the player up
229+  B608              ;
230+  B608              control_pl_moveup:
231+  B608 C5               push bc
232+  B609 ED 4B 2B B9      ld bc,(player)          ; get the current coords, b horiz, c vert
233+  B60D 79               ld a,c                  ; load c into the acc
234+  B60E FE 18            cp 24
235+  B610 CA 30 B6         jp z,control_pl_moveup0 ; are we at the edge of the screen
236+  B613 FE 60            cp 96
237+  B615 CC CF B6         call z, control_scroll_up
238+  B618 CD 6F B8         call movement_checkcanmove_up ; check we can move up, e will be 1 if we can
239+  B61B F5               push af
240+  B61C 7B               ld a,e                  ; put e in a
241+  B61D FE 00            cp 0
242+  B61F CA 2F B6         jp z,control_pl_moveup1 ; don't move if we can't
243+  B622 F1               pop af
244+  B623 D6 01            sub 1                   ; subtract 1
245+  B625 D6 01            sub 1                   ; subtract 1
246+  B627 4F               ld c,a                  ; load back to c
247+  B628 ED 43 2B B9      ld (player),bc          ; load back to player
248+  B62C C3 30 B6         jp control_pl_moveup0
249+  B62F              control_pl_moveup1:
250+  B62F F1               pop af                  ; restore af if needed
251+  B630              control_pl_moveup0:
252+  B630 3E 00            ld a,0
253+  B632 32 2D B9         ld (player+2),a        ; set direction to up
254+  B635 C1               pop bc
255+  B636 C9               ret
256+  B637              ;
257+  B637              ; Moves the player down
258+  B637              ;
259+  B637              control_pl_movedown:
260+  B637 C5               push bc
261+  B638 ED 4B 2B B9      ld bc,(player)          ; get the current coords, b horiz, c vert
262+  B63C 79               ld a,c                  ; load c into the acc
263+  B63D FE E0            cp 224
264+  B63F CA 5D B6         jp z,control_pl_movedown0 ; are we at the edge of the screen
265+  B642 FE 80            cp 128
266+  B644 CC C2 B6         call z, control_scroll_down
267+  B647 CD 43 B8         call movement_checkcanmove_down ; check we can move down, e will be 1 if we can
268+  B64A F5               push af
269+  B64B 7B               ld a,e                  ; put e in a
270+  B64C FE 00            cp 0
271+  B64E CA 5C B6         jp z,control_pl_movedown1 ; don't move if we can't
272+  B651 F1               pop af
273+  B652 3C               inc a                   ; add 1
274+  B653 3C               inc a                   ; add 1
275+  B654 4F               ld c,a                  ; load back to c
276+  B655 ED 43 2B B9      ld (player),bc          ; load back to player
277+  B659 C3 5D B6         jp control_pl_movedown0
278+  B65C              control_pl_movedown1:
279+  B65C F1               pop af                  ; restore af if needed
280+  B65D              control_pl_movedown0:
281+  B65D 3E 03            ld a,3
282+  B65F 32 2D B9         ld (player+2),a        ; set direction to down
283+  B662 C1               pop bc
284+  B663 C9               ret
285+  B664              ;
286+  B664              ; Moves the player left
287+  B664              ;
288+  B664              control_pl_moveleft:
289+  B664 C5               push bc
290+  B665 ED 4B 2B B9      ld bc,(player)          ; get the current coords, b horiz, c vert
291+  B669 78               ld a,b                  ; load b into the acc
292+  B66A FE 10            cp 16
293+  B66C CA 8D B6         jp z,control_pl_moveleft0 ; are we at the edge of the screen
294+  B66F CD CE B8         call movement_checkcanmove_left ; check we can move down, e will be 1 if we can
295+  B672 F5               push af
296+  B673 7B               ld a,e                  ; put e in a
297+  B674 FE 00            cp 0
298+  B676 CA 8C B6         jp z,control_pl_moveleft1 ; don't move if we can't
299+  B679 21 30 B9         ld hl,player+5          ; need to store the amount of pixels still left to move in the player status
300+  B67C 3E 03            ld a,3
301+  B67E 77               ld (hl),a
302+  B67F F1               pop af
303+  B680 D6 01            sub 1                    ; subtract 2
304+  B682 D6 01            sub 1
305+  B684 47               ld b,a                  ; load back to c
306+  B685 ED 43 2B B9      ld (player),bc          ; load back to player
307+  B689 C3 8D B6         jp control_pl_moveleft0
308+  B68C              control_pl_moveleft1:
309+  B68C F1               pop af
310+  B68D              control_pl_moveleft0:
311+  B68D 3E 01            ld a,1
312+  B68F 32 2D B9         ld (player+2),a        ; set direction to left
313+  B692 C1               pop bc
314+  B693 C9               ret
315+  B694              ;
316+  B694              ; Moves the player right
317+  B694              ;
318+  B694              control_pl_moveright:
319+  B694 C5               push bc
320+  B695 ED 4B 2B B9      ld bc,(player)          ; get the current coords, b horiz, c vert
321+  B699 78               ld a,b                  ; load b into the acc
322+  B69A FE F0            cp 240
323+  B69C CA BB B6         jp z,control_pl_moveright0 ; are we at the edge of the screen
324+  B69F CD A2 B8         call movement_checkcanmove_right ; check we can move down, e will be 1 if we can
325+  B6A2 F5               push af
326+  B6A3 7B               ld a,e                  ; put e in a
327+  B6A4 FE 00            cp 0
328+  B6A6 CA BA B6         jp z,control_pl_moveright1 ; don't move if we can't
329+  B6A9 21 30 B9         ld hl,player+5          ; need to store the amount of pixels still left to move in the player status
330+  B6AC 3E 03            ld a,3
331+  B6AE 77               ld (hl),a
332+  B6AF F1               pop af
333+  B6B0 3C               inc a                   ; add 2
334+  B6B1 3C               inc a
335+  B6B2 47               ld b,a                  ; load back to b
336+  B6B3 ED 43 2B B9      ld (player),bc          ; load back to player
337+  B6B7 C3 BB B6         jp control_pl_moveright0
338+  B6BA              control_pl_moveright1:
339+  B6BA F1               pop af                  ; restore af if needed
340+  B6BB              control_pl_moveright0:
341+  B6BB 3E 02            ld a,2
342+  B6BD 32 2D B9         ld (player+2),a        ; set direction to right
343+  B6C0 C1               pop bc
344+  B6C1 C9               ret
345+  B6C2
346+  B6C2              ;
347+  B6C2              ; Scrolls the screen down
348+  B6C2              ;
349+  B6C2              control_scroll_down:
350+  B6C2 F5               push af
351+  B6C3 3E 08            ld a,8
352+  B6C5 32 0D A7         ld (screen_offset),a
353+  B6C8 F1               pop af
354+  B6C9 21 BC A5         ld hl,buffer_updateall
355+  B6CC 36 01            ld (hl),1         ; flag as screen needing update
356+  B6CE C9               ret
357+  B6CF
358+  B6CF              ;
359+  B6CF              ; Scrolls the screen up
360+  B6CF              ;
361+  B6CF              control_scroll_up:
362+  B6CF F5               push af
363+  B6D0 3E 00            ld a,0
364+  B6D2 32 0D A7         ld (screen_offset),a
365+  B6D5 F1               pop af
366+  B6D6 21 BC A5         ld hl,buffer_updateall
367+  B6D9 36 01            ld (hl),1         ; flag as screen needing update
368+  B6DB C9               ret
369+  B6DC
370+  B6DC
371+  B6DC
372+  B6DC
# file closed: game/control.asm
 37   B6DC                  include "game\movement.asm"
# file opened: game/movement.asm
  1+  B6DC              ;
  2+  B6DC              ; Checks the contents of a cell are empty - ie, all pixel rows are zero
  3+  B6DC              ; Inputs:
  4+  B6DC              ; hl - memory location of top pixel row
  5+  B6DC              ; bc - screen coords, b horiz, c vert
  6+  B6DC              ; Outputs:
  7+  B6DC              ; e - 0 if not empty, 1 if empty
  8+  B6DC              ;
  9+  B6DC              movement_spaceisempty:
 10+  B6DC C5               push bc
 11+  B6DD E5               push hl
 12+  B6DE CD 06 B7         call movement_spaceisgem        ; check if space is a gem
 13+  B6E1 E1               pop hl
 14+  B6E2 C1               pop bc
 15+  B6E3 7B               ld a,e
 16+  B6E4 FE 01            cp 1
 17+  B6E6 C8               ret z                           ; if e is 1, space is a gem so can move here, return
 18+  B6E7 3E 08            ld a,8                          ; 8 rows to check
 19+  B6E9              movement_spaceisempty0:
 20+  B6E9 08               ex af,af'                       ; store the loop counter
 21+  B6EA 7E               ld a,(hl)                       ; get current pixel row
 22+  B6EB FE 00            cp 0
 23+  B6ED C2 01 B7         jp nz, movement_spaceisempty1    ; row is not empty, can't move here
 24+  B6F0 79               ld a,c                          ; load the vertical coord
 25+  B6F1 3C               inc a                           ; next row down
 26+  B6F2 11 20 00         ld de,32
 27+  B6F5 19               add hl,de                       ; otherwise, just go one down for hl, which means add 32, because of course
 28+  B6F6 4F               ld c,a                          ; copy vert coord back to c
 29+  B6F7 08               ex af,af'                       ; get loop counter back
 30+  B6F8 3D               dec a                           ; decrease loop counter
 31+  B6F9 C2 E9 B6         jp nz, movement_spaceisempty0
 32+  B6FC 16 00            ld d,0
 33+  B6FE 1E 01            ld e,1                          ; got to end, so space is empty
 34+  B700 C9               ret
 35+  B701              movement_spaceisempty1:
 36+  B701 16 00            ld d,0
 37+  B703 1E 00            ld e,0                          ; returning false, ie space not empty
 38+  B705 C9               ret
 39+  B706
 40+  B706              ;
 41+  B706              ; Check if a space contains a gem
 42+  B706              ; Inputs:
 43+  B706              ; bc - screen coords
 44+  B706              ; Outputs:
 45+  B706              ; e = 1 if gem
 46+  B706              movement_spaceisgem:
 47+  B706 CD 4B A8         call screen_getcharcoordsfromscreencoords   ; get the char coords we're checking into bc
 48+  B709 21 5E B2         ld hl,level01diamonds           ; check diamonds first
 49+  B70C              movement_spaceisgem0:
 50+  B70C 5E 23 56 2B      ld de,(hl)                      ; get gem coords into de
 51+  B710 7B               ld a,e                          ; check for end of data
 52+  B711 FE FF            cp 255
 53+  B713 CA 2E B7         jp z,movement_spaceisgem1       ; if yes, done with diamonds
 54+  B716 23               inc hl
 55+  B717 23               inc hl                          ; move to state
 56+  B718 7E               ld a,(hl)
 57+  B719 23               inc hl
 58+  B71A 23               inc hl
 59+  B71B 23               inc hl                          ; get to next
 60+  B71C FE 01            cp 1                            ; check if collected
 61+  B71E CA 0C B7         jp z,movement_spaceisgem0       ; if yes, move to next diamond
 62+  B721 7B               ld a,e                          ; load e again
 63+  B722 B9               cp c                            ; otherwise, compare c with e
 64+  B723 C2 0C B7         jp nz,movement_spaceisgem0      ; if different, move to next diamond
 65+  B726 7A               ld a,d                          ; get d coord
 66+  B727 B8               cp b                            ; compare b with d
 67+  B728 C2 0C B7         jp nz,movement_spaceisgem0      ; if different, move to next diamond
 68+  B72B 1E 01            ld e,1                          ; otherwise, exit with e = 1
 69+  B72D C9               ret
 70+  B72E              movement_spaceisgem1:
 71+  B72E 21 6E B2         ld hl,level01gems              ; check gems
 72+  B731              movement_spaceisgem2:
 73+  B731 5E 23 56 2B      ld de,(hl)                      ; get gem coords into de
 74+  B735 7B               ld a,e                          ; check for end of data
 75+  B736 FE FF            cp 255
 76+  B738 CA 53 B7         jp z,movement_spaceisgem3       ; if yes, done with gems
 77+  B73B 23               inc hl
 78+  B73C 23               inc hl                          ; move to state
 79+  B73D 7E               ld a,(hl)
 80+  B73E 23               inc hl
 81+  B73F 23               inc hl
 82+  B740 23               inc hl                          ; get to next
 83+  B741 FE 01            cp 1                            ; check if collected
 84+  B743 CA 31 B7         jp z,movement_spaceisgem2       ; if yes, move to next diamond
 85+  B746 7B               ld a,e                          ; load e again
 86+  B747 B9               cp c                            ; otherwise, compare c with e
 87+  B748 C2 31 B7         jp nz,movement_spaceisgem2      ; if different, move to next gem
 88+  B74B 7A               ld a,d                          ; get d coord
 89+  B74C B8               cp b                            ; compare b with d
 90+  B74D C2 31 B7         jp nz,movement_spaceisgem2      ; if different, move to next gem
 91+  B750 1E 01            ld e,1                          ; otherwise, exit with e = 1
 92+  B752 C9               ret
 93+  B753              movement_spaceisgem3:
 94+  B753 1E 00            ld e,0                          ; nothing found, return e = 0
 95+  B755 C9               ret
 96+  B756
 97+  B756              ;
 98+  B756              ; Checks the line of a cell below is empty - ie, first pixel rows is zero
 99+  B756              ; Inputs:
100+  B756              ; hl - memory location of top pixel row
101+  B756              ; bc - screen coords, b horiz, c vert
102+  B756              ; Outputs:
103+  B756              ; e - 0 if not empty, 1 if empty
104+  B756              ;
105+  B756              movement_linebelowisempty:
106+  B756 C5               push bc
107+  B757 E5               push hl
108+  B758 CD 06 B7         call movement_spaceisgem        ; check if space is a gem
109+  B75B E1               pop hl
110+  B75C C1               pop bc
111+  B75D 7B               ld a,e
112+  B75E FE 01            cp 1
113+  B760 C8               ret z                           ; if e is 1, space is a gem so can move here, return
114+  B761 7E               ld a,(hl)                       ; get current pixel row
115+  B762 FE 00            cp 0
116+  B764 C2 6C B7         jp nz, movement_linebelowisempty1    ; row is not empty, can't move here
117+  B767 16 00            ld d,0
118+  B769 1E 01            ld e,1                          ; got to end, so space is empty
119+  B76B C9               ret
120+  B76C              movement_linebelowisempty1:
121+  B76C 16 00            ld d,0
122+  B76E 1E 00            ld e,0                          ; returning false, ie space not empty
123+  B770 C9               ret
124+  B771
125+  B771              ;
126+  B771              ; Checks the line of a cell above is empty - ie, last pixel rows are zero
127+  B771              ; Inputs:
128+  B771              ; hl - memory location of top pixel row
129+  B771              ; bc - screen coords, b horiz, c vert
130+  B771              ; Outputs:
131+  B771              ; e - 0 if not empty, 1 if empty
132+  B771              ;
133+  B771              movement_lineaboveisempty:
134+  B771 C5               push bc
135+  B772 E5               push hl
136+  B773 CD 06 B7         call movement_spaceisgem        ; check if space is a gem
137+  B776 E1               pop hl
138+  B777 C1               pop bc
139+  B778 7B               ld a,e
140+  B779 FE 01            cp 1
141+  B77B C8               ret z
142+  B77C 7E               ld a,(hl)                       ; get current pixel row
143+  B77D FE 00            cp 0
144+  B77F C2 87 B7         jp nz, movement_lineaboveisempty1    ; row is not empty, can't move here
145+  B782 16 00            ld d,0
146+  B784 1E 01            ld e,1                          ; got to end, so space is empty
147+  B786 C9               ret
148+  B787              movement_lineaboveisempty1:
149+  B787 16 00            ld d,0
150+  B789 1E 00            ld e,0                          ; returning false, ie space not empty
151+  B78B C9               ret
152+  B78C
153+  B78C              ;
154+  B78C              ; Checks the contents of a cell are diggable - ie, all pixel rows are dirt or empty
155+  B78C              ; Inputs:
156+  B78C              ; hl - memory location of top pixel row
157+  B78C              ; bc - screen coords, b horiz, c vert
158+  B78C              ; Outputs:
159+  B78C              ; none - puts player into digging mode
160+  B78C              ;
161+  B78C              movement_spaceisdiggable:
162+  B78C 3E 08            ld a,8                          ; 8 rows to check
163+  B78E              movement_spaceisdiggable0:
164+  B78E 08               ex af,af'                       ; store the loop counter
165+  B78F 7E               ld a,(hl)                       ; get current pixel row
166+  B790 FE 00            cp 0
167+  B792 CA A2 B7         jp z, movement_spaceisdiggable2  ; row is empty, can dig here
168+  B795 FE 55            cp 85
169+  B797 CA A2 B7         jp z, movement_spaceisdiggable2  ; row is dirt, can dig here
170+  B79A FE AA            cp 170
171+  B79C CA A2 B7         jp z, movement_spaceisdiggable2  ; row is dirt, can dig here
172+  B79F C3 BA B7         jp movement_spaceisdiggable1     ; otherwise, stop checking
173+  B7A2              movement_spaceisdiggable2:
174+  B7A2 79               ld a,c                          ; load the vertical coord
175+  B7A3 3C               inc a                           ; next row down
176+  B7A4 11 20 00         ld de,32
177+  B7A7 19               add hl,de                       ; otherwise, just go one down for hl, which means add 32, because of course
178+  B7A8 4F               ld c,a                          ; copy vert coord back to c
179+  B7A9 08               ex af,af'                       ; get loop counter back
180+  B7AA 3D               dec a                           ; decrease loop counter
181+  B7AB C2 8E B7         jp nz, movement_spaceisdiggable0
182+  B7AE 21 31 B9         ld hl,player+6
183+  B7B1 36 01            ld (hl),1                       ; set the player into digging mode
184+  B7B3 23               inc hl
185+  B7B4 36 05            ld (hl),5                      ; set the number of frame to dig for
186+  B7B6 23               inc hl
187+  B7B7 36 08            ld (hl),8                       ; set the number of pixels to dig
188+  B7B9 C9               ret
189+  B7BA              movement_spaceisdiggable1:
190+  B7BA 21 31 B9         ld hl,player+6
191+  B7BD 36 00            ld (hl),0                       ; set the player out of digging mode
192+  B7BF C9               ret
193+  B7C0
194+  B7C0              ;
195+  B7C0              ; Checks the contents of a cell below are diggable - ie, at least one pixel row has dirt. If the first one isn't dirt, stop
196+  B7C0              ; Inputs:
197+  B7C0              ; hl - memory location of top pixel row
198+  B7C0              ; bc - screen coords, b horiz, c vert
199+  B7C0              ; Outputs:
200+  B7C0              ; none - puts player into digging mode
201+  B7C0              ;
202+  B7C0              movement_spacebelowisdiggable:
203+  B7C0 7E               ld a,(hl)                       ; get first pixel row
204+  B7C1 FE 55            cp 85
205+  B7C3 CA CE B7         jp z, movement_spacebelowisdiggable3  ; row is dirt, can dig here
206+  B7C6 FE AA            cp 170
207+  B7C8 CA CE B7         jp z, movement_spacebelowisdiggable3  ; row is dirt, can dig here
208+  B7CB C3 BA B7         jp movement_spaceisdiggable1    ; the first row is not dirt, so don't bother checking the rest, can't dig
209+  B7CE              movement_spacebelowisdiggable3:
210+  B7CE 3E 08            ld a,8                          ; rows to check
211+  B7D0 1E 00            ld e,0                          ; count of rows to dig
212+  B7D2              movement_spacebelowisdiggable0:
213+  B7D2 08               ex af,af'                       ; store the loop counter
214+  B7D3 7E               ld a,(hl)                       ; get current pixel row
215+  B7D4 FE 55            cp 85
216+  B7D6 CA E1 B7         jp z, movement_spacebelowisdiggable4  ; row is dirt, can dig here
217+  B7D9 FE AA            cp 170
218+  B7DB CA E1 B7         jp z, movement_spacebelowisdiggable4  ; row is dirt, can dig here
219+  B7DE C3 F0 B7         jp movement_spacebelowisdiggable5     ; don't count this row and stop counting
220+  B7E1              movement_spacebelowisdiggable4:
221+  B7E1 1C               inc e                           ; inc count of rows to dig
222+  B7E2              movement_spacebelowisdiggable2:
223+  B7E2 79               ld a,c                          ; load the vertical coord
224+  B7E3 3C               inc a                           ; next row down
225+  B7E4 D5               push de                         ; need e for later
226+  B7E5 11 20 00         ld de,32
227+  B7E8 19               add hl,de                       ; otherwise, just go one down for hl, which means add 32, because of course
228+  B7E9 4F               ld c,a                          ; copy vert coord back to c
229+  B7EA D1               pop de                          ; get e back
230+  B7EB 08               ex af,af'                       ; get loop counter back
231+  B7EC 3D               dec a                           ; incease loop counter
232+  B7ED C2 D2 B7         jp nz, movement_spacebelowisdiggable0
233+  B7F0              movement_spacebelowisdiggable5:
234+  B7F0 21 31 B9         ld hl,player+6
235+  B7F3 36 01            ld (hl),1                       ; set the player into digging mode
236+  B7F5 23               inc hl
237+  B7F6 36 03            ld (hl),3                      ; set the number of frame to dig for
238+  B7F8 23               inc hl
239+  B7F9 73               ld (hl),e                       ; set the number of pixels to dig
240+  B7FA C9               ret
241+  B7FB              movement_spacebelowisdiggable1:
242+  B7FB 21 31 B9         ld hl,player+6
243+  B7FE 36 00            ld (hl),0                       ; set the player out of digging mode
244+  B800 C9               ret
245+  B801
246+  B801              ;
247+  B801              ; Checks the contents of a cell above are diggable - ie, at least one pixel row has dirt. If the first one isn't dirt, stop
248+  B801              ; Inputs:
249+  B801              ; hl - memory location of top pixel row
250+  B801              ; bc - screen coords, b horiz, c vert
251+  B801              ; Outputs:
252+  B801              ; none - puts player into digging mode
253+  B801              ;
254+  B801              movement_spaceaboveisdiggable:
255+  B801 7E               ld a,(hl)                       ; get first pixel row
256+  B802 FE 55            cp 85
257+  B804 CA 0F B8         jp z, movement_spaceaboveisdiggable3  ; row is dirt, can dig here
258+  B807 FE AA            cp 170
259+  B809 CA 0F B8         jp z, movement_spaceaboveisdiggable3  ; row is dirt, can dig here
260+  B80C C3 BA B7         jp movement_spaceisdiggable1    ; the first row is not dirt, so don't bother checking the rest, can't dig
261+  B80F              movement_spaceaboveisdiggable3:
262+  B80F 3E 08            ld a,8                          ; rows to check
263+  B811 1E 00            ld e,0                          ; count of rows to dig
264+  B813              movement_spaceaboveisdiggable0:
265+  B813 08               ex af,af'                       ; store the loop counter
266+  B814 7E               ld a,(hl)                       ; get current pixel row
267+  B815 FE 55            cp 85
268+  B817 CA 22 B8         jp z, movement_spaceaboveisdiggable4  ; row is dirt, can dig here
269+  B81A FE AA            cp 170
270+  B81C CA 22 B8         jp z, movement_spaceaboveisdiggable4  ; row is dirt, can dig here
271+  B81F C3 32 B8         jp movement_spaceaboveisdiggable5     ; don't count this row and stop counting
272+  B822              movement_spaceaboveisdiggable4:
273+  B822 1C               inc e                           ; inc count of rows to dig
274+  B823              movement_spaceaboveisdiggable2:
275+  B823 79               ld a,c                          ; load the vertical coord
276+  B824 3D               dec a                           ; next row up
277+  B825 D5               push de                         ; need e for later
278+  B826 11 20 00         ld de,32
279+  B829 ED 52            sbc hl,de                       ; otherwise, just go one up for hl, which means sub 32, because of course
280+  B82B 4F               ld c,a                          ; copy vert coord back to c
281+  B82C D1               pop de                          ; get e back
282+  B82D 08               ex af,af'                       ; get loop counter back
283+  B82E 3D               dec a                           ; incease loop counter
284+  B82F C2 13 B8         jp nz, movement_spaceaboveisdiggable0
285+  B832              movement_spaceaboveisdiggable5:
286+  B832 21 31 B9         ld hl,player+6
287+  B835 36 01            ld (hl),1                       ; set the player into digging mode
288+  B837 23               inc hl
289+  B838 36 05            ld (hl),5                       ; set the number of frame to dig for
290+  B83A 23               inc hl
291+  B83B 73               ld (hl),e                       ; set the number of pixels to dig
292+  B83C C9               ret
293+  B83D              movement_spaceaboveisdiggable1:
294+  B83D 21 31 B9         ld hl,player+6
295+  B840 36 00            ld (hl),0                       ; set the player out of digging mode
296+  B842 C9               ret
297+  B843
298+  B843              ;
299+  B843              ; Checks if the player can move down
300+  B843              ; Inputs:
301+  B843              ; bc - player coords, b horiz, c vert
302+  B843              ; Outputs:
303+  B843              ; de - 1 can move
304+  B843              movement_checkcanmove_down:
305+  B843 F5               push af
306+  B844 C5               push bc
307+  B845 CD 29 A9         call sprites_scadd              ; get the memory location of cell into de
308+  B848 62 6B            ld hl,de                        ; look at cell directly underneath (add 256)
309+  B84A 24               inc h                       ; memory location of cell beneath now in hl
310+  B84B 3E 08            ld a,8                       ; look below
311+  B84D 81               add c
312+  B84E 4F               ld c,a
313+  B84F CD 56 B7         call movement_linebelowisempty       ; check space is empty
314+  B852 7B               ld a,e                          ; check space empty flag
315+  B853 FE 00            cp 0
316+  B855 CA 5E B8         jp z, movement_checkcanmove_down1 ; can't move
317+  B858 CD AF BA         call player_justmoved
318+  B85B C1               pop bc
319+  B85C F1               pop af
320+  B85D C9               ret
321+  B85E              movement_checkcanmove_down1:
322+  B85E C1               pop bc
323+  B85F CD 29 A9         call sprites_scadd              ; get the memory location of cell into de
324+  B862 62 6B            ld hl,de                        ; look at cell directly underneath (add 256)
325+  B864 24               inc h
326+  B865 C5               push bc
327+  B866 CD C0 B7         call movement_spacebelowisdiggable    ; can't move here, but can we dig
328+  B869 11 00 00         ld de,0
329+  B86C C1               pop bc
330+  B86D F1               pop af
331+  B86E C9               ret
332+  B86F
333+  B86F              ;
334+  B86F              ; Checks if the player can move up
335+  B86F              ; Inputs:
336+  B86F              ; bc - player coords, b horiz, c vert
337+  B86F              ; Outputs:
338+  B86F              ; de - 1 can move
339+  B86F              movement_checkcanmove_up:
340+  B86F F5               push af
341+  B870 C5               push bc
342+  B871 CD 29 A9         call sprites_scadd              ; get the memory location of cell into de
343+  B874 62 6B            ld hl,de                        ; look at cell directly above (subtract 32)
344+  B876 11 20 00         ld de,32
345+  B879 ED 52            sbc hl,de                       ; memory location of line above now in hl
346+  B87B 0D               dec c                           ; look above
347+  B87C CD 71 B7         call movement_lineaboveisempty       ; check space is empty
348+  B87F 7B               ld a,e                          ; check space empty flag
349+  B880 FE 00            cp 0
350+  B882 CA 8D B8         jp z, movement_checkcanmove_up1 ; can't move
351+  B885 1E 01            ld e,1
352+  B887 CD AF BA         call player_justmoved
353+  B88A C1               pop bc
354+  B88B F1               pop af
355+  B88C C9               ret
356+  B88D              movement_checkcanmove_up1:
357+  B88D C1               pop bc
358+  B88E CD 29 A9         call sprites_scadd              ; get the memory location of cell into de
359+  B891 62 6B            ld hl,de                        ; look at cell directly above (subtract 32)
360+  B893 11 20 00         ld de,32
361+  B896 ED 52            sbc hl,de                       ; memory location of line above now in hl
362+  B898 C5               push bc
363+  B899 CD 01 B8         call movement_spaceaboveisdiggable    ; can't move here, but can we dig
364+  B89C 11 00 00         ld de,0
365+  B89F C1               pop bc
366+  B8A0 F1               pop af
367+  B8A1 C9               ret
368+  B8A2
369+  B8A2              ;
370+  B8A2              ; Checks if the player can move right
371+  B8A2              ; Inputs:
372+  B8A2              ; bc - player coords, b horiz, c vert
373+  B8A2              ; Outputs:
374+  B8A2              ; de - 1 can move
375+  B8A2              movement_checkcanmove_right:
376+  B8A2 F5               push af
377+  B8A3 C5               push bc
378+  B8A4 CD 29 A9         call sprites_scadd              ; get the memory location of cell into de
379+  B8A7 62 6B            ld hl,de                        ; look at cell directly to the right (add 1)
380+  B8A9 3E 08            ld a,8
381+  B8AB 80               add b                           ; move one cell right
382+  B8AC 47               ld b,a
383+  B8AD 23               inc hl                          ; memory location of cell to the right now in hl
384+  B8AE CD DC B6         call movement_spaceisempty       ; check space is empty
385+  B8B1 7B               ld a,e                          ; check space empty flag
386+  B8B2 FE 00            cp 0
387+  B8B4 CA BD B8         jp z, movement_checkcanmove_right1 ; can't move
388+  B8B7 CD AF BA         call player_justmoved
389+  B8BA C1               pop bc
390+  B8BB F1               pop af
391+  B8BC C9               ret
392+  B8BD              movement_checkcanmove_right1:
393+  B8BD C1               pop bc
394+  B8BE CD 29 A9         call sprites_scadd              ; get the memory location of cell into de
395+  B8C1 62 6B            ld hl,de
396+  B8C3 23               inc hl                          ; memory location of cell to the right now in hl
397+  B8C4 C5               push bc
398+  B8C5 CD 8C B7         call movement_spaceisdiggable    ; can't move here, but can we dig
399+  B8C8 11 00 00         ld de,0
400+  B8CB C1               pop bc
401+  B8CC F1               pop af
402+  B8CD C9               ret
403+  B8CE
404+  B8CE              ;
405+  B8CE              ; Checks if the player can move left
406+  B8CE              ; Inputs:
407+  B8CE              ; bc - player coords, b horiz, c vert
408+  B8CE              ; Outputs:
409+  B8CE              ; de - 1 can move
410+  B8CE              movement_checkcanmove_left:
411+  B8CE F5               push af
412+  B8CF C5               push bc
413+  B8D0 CD 29 A9         call sprites_scadd              ; get the memory location of cell into de
414+  B8D3 62 6B            ld hl,de                        ; look at cell directly to the right (add 1)
415+  B8D5 78               ld a,b
416+  B8D6 06 08            ld b,8
417+  B8D8 90               sub b                           ; move one cell left
418+  B8D9 47               ld b,a
419+  B8DA 2B               dec hl                          ; memory location of cell to the right now in hl
420+  B8DB CD DC B6         call movement_spaceisempty       ; check space is empty
421+  B8DE 7B               ld a,e                          ; check space empty flag
422+  B8DF FE 00            cp 0
423+  B8E1 CA EA B8         jp z, movement_checkcanmove_left1 ; can't move
424+  B8E4 CD AF BA         call player_justmoved
425+  B8E7 C1               pop bc
426+  B8E8 F1               pop af
427+  B8E9 C9               ret
428+  B8EA              movement_checkcanmove_left1:
429+  B8EA C1               pop bc
430+  B8EB CD 29 A9         call sprites_scadd              ; get the memory location of cell into de
431+  B8EE 62 6B            ld hl,de
432+  B8F0 2B               dec hl                          ; memory location of cell to the right now in hl
433+  B8F1 C5               push bc
434+  B8F2 CD 8C B7         call movement_spaceisdiggable    ; can't move here, but can we dig
435+  B8F5 11 00 00         ld de,0
436+  B8F8 C1               pop bc
437+  B8F9 F1               pop af
438+  B8FA C9               ret
# file closed: game/movement.asm
 38   B8FB                  include "game\game.asm"
# file opened: game/game.asm
  1+  B8FB              ;
  2+  B8FB              ; The current frame count, incremented each frame
  3+  B8FB              ;
  4+  B8FB              game_framenumber:
  5+  B8FB 00               defb    0
  6+  B8FC
  7+  B8FC              ;
  8+  B8FC              ; The number of players
  9+  B8FC              ;
 10+  B8FC              game_numberplayers:
 11+  B8FC 01               defb 1
 12+  B8FD
 13+  B8FD              ;
 14+  B8FD              ; The current player
 15+  B8FD              ;
 16+  B8FD              game_currentplayer:
 17+  B8FD 01               defb 1
 18+  B8FE
 19+  B8FE              ;
 20+  B8FE              ; The default number of lives
 21+  B8FE              ;
 22+  B8FE              game_numberlives:
 23+  B8FE 04               defb 4
 24+  B8FF
 25+  B8FF              ;
 26+  B8FF              ; Moves to the next player
 27+  B8FF              ;
 28+  B8FF              game_changeplayer:
 29+  B8FF 3A FD B8         ld a,(game_currentplayer)
 30+  B902 FE 01            cp 1
 31+  B904 C8               ret z                       ; if just one player, no need to change
 32+  B905 3D               dec a                       ; otherwise decrease by one
 33+  B906 EE 01            xor 1                       ; xor with one to flip
 34+  B908 3C               inc a                       ; increment
 35+  B909 21 FD B8         ld hl,game_currentplayer
 36+  B90C 77               ld (hl),a                   ; store
 37+  B90D C9               ret
 38+  B90E
 39+  B90E              ;
 40+  B90E              ; Sets the number of players at the start of the game
 41+  B90E              ; Inputs:
 42+  B90E              ; a - number of players
 43+  B90E              game_setnumberofplayers:
 44+  B90E 21 FC B8         ld hl,game_numberplayers
 45+  B911 77               ld (hl),a
 46+  B912
 47+  B912              ;
 48+  B912              ; Increment frame number by 1
 49+  B912              ;
 50+  B912              game_incrementframe:
 51+  B912 3A FB B8         ld a,(game_framenumber)
 52+  B915 FE FF            cp 255
 53+  B917 C2 1C B9         jp nz,game_incrementframe0
 54+  B91A 3E 00            ld a,0
 55+  B91C              game_incrementframe0:
 56+  B91C 3C               inc a
 57+  B91D 32 FB B8         ld (game_framenumber),a
 58+  B920 C9               ret
 59+  B921
 60+  B921              ;
 61+  B921              ; Returns current frame
 62+  B921              ; Outputs:
 63+  B921              ; a - current frame
 64+  B921              ;
 65+  B921              game_getcurrentframe:
 66+  B921 3A FB B8         ld a,(game_framenumber)
 67+  B924 C9               ret
 68+  B925
 69+  B925              ;
 70+  B925              ; Resets current frame
 71+  B925              ;
 72+  B925              game_resetcurrentframe:
 73+  B925 21 FB B8         ld hl,game_framenumber
 74+  B928 36 00            ld (hl),0
 75+  B92A C9               ret
# file closed: game/game.asm
 39   B92B                  include "game\player.asm"
# file opened: game/player.asm
  1+  B92B              ;
  2+  B92B              ;   Data for current player
  3+  B92B              ;
  4+  B92B              player:
  5+  B92B 00 00            defb    0,0                 ; horiz,vert (+0,+1)
  6+  B92D 02 00 01         defb    2,0,1               ; dir (0 up, 1 left, 2 right, 3 down), frame, frame transition count (+2,+3,+4)
  7+  B930 00               defb    0                   ; auto move remaining (+5)
  8+  B931 00 00 00         defb    0,0,0               ; is digging (0 no), digging count, pixels to di (+6,+7,+8)
  9+  B934 00               defb    0                   ; lives remaining (+9)
 10+  B935 00               defb    0                   ; died this life (+10)
 11+  B936 00 00            defb    0,0                 ; crushed (+11), frames (+12)
 12+  B938 00               defb    0                   ; can finish level, whether can finish level or not (+13)
 13+  B939
 14+  B939              player_location:
 15+  B939 00               defb 0                      ; 0 normal, 1 diamond cavern, 2 the pit
 16+  B93A
 17+  B93A              ;
 18+  B93A              ; Works out which part of the screen the player is in
 19+  B93A              ; Pit is between 3,9 and 8,9
 20+  B93A              ; Diamond cavern is between 11,22 and 22,28
 21+  B93A              ;
 22+  B93A              player_getlocation:
 23+  B93A ED 4B 2B B9      ld bc,(player)              ; get screen coords
 24+  B93E CD 4B A8         call screen_getcharcoordsfromscreencoords ; get char coords, c horiz
 25+  B941 78               ld a,b                      ; check for pit first
 26+  B942 FE 09            cp 9                        ; if not on this row, not in the pit
 27+  B944 C2 53 B9         jp nz,player_getlocation0
 28+  B947 79               ld a,c                      ; check horizontal
 29+  B948 FE 08            cp 8
 30+  B94A D2 53 B9         jp nc, player_getlocation0  ; if more than 8, not in the pit
 31+  B94D 21 39 B9         ld hl,player_location
 32+  B950 36 02            ld (hl),2                   ; load location with 2, the pit
 33+  B952 C9               ret                         ; done
 34+  B953              player_getlocation0:            ; check for diamond cavern
 35+  B953 78               ld a,b                      ; first check vertical
 36+  B954 FE 16            cp 22                       ; if above row 22, then not in cavern
 37+  B956 DA 6A B9         jp c,player_getlocation1
 38+  B959 79               ld a,c                      ; get the horizontal next
 39+  B95A FE 0B            cp 11
 40+  B95C DA 6A B9         jp c,player_getlocation1    ; if less than 11 not in diamond cave
 41+  B95F FE 16            cp 22
 42+  B961 D2 6A B9         jp nc,player_getlocation1    ; if less than 11 not in diamond cave
 43+  B964 21 39 B9         ld hl,player_location
 44+  B967 36 01            ld (hl),1                   ; load location with 1, the cavern
 45+  B969 C9               ret
 46+  B96A              player_getlocation1:
 47+  B96A 21 39 B9         ld hl,player_location
 48+  B96D 36 00            ld (hl),0                   ; load location with 2, the pit
 49+  B96F C9               ret                         ; done
 50+  B970
 51+  B970
 52+  B970              ;
 53+  B970              ; Initializes a player at start of game
 54+  B970              ; Copy initial coords, copy lives, copy score
 55+  B970              ;
 56+  B970              player_init_gamestart:
 57+  B970 3A FE B8         ld a,(game_numberlives)
 58+  B973 32 FF B9         ld (player1_lives),a
 59+  B976 32 00 BA         ld (player2_lives),a                        ; set the initial number of lives at game start
 60+  B979
 61+  B979 21 03 BA         ld hl,player1_score+2
 62+  B97C 06 06            ld b,6
 63+  B97E              player_init_gamestart0:
 64+  B97E 36 30            ld (hl),48
 65+  B980 23               inc hl
 66+  B981 10 FB            djnz player_init_gamestart0                 ; zero out player 1 score
 67+  B983 21 0C BA         ld hl,player2_score+2
 68+  B986 06 06            ld b,6
 69+  B988              player_init_gamestart1:
 70+  B988 36 30            ld (hl),48
 71+  B98A 23               inc hl
 72+  B98B 10 FB            djnz player_init_gamestart1                 ; zero out player 2 score
 73+  B98D C9               ret
 74+  B98E
 75+  B98E              ;
 76+  B98E              ; Initializes a player at start of a life
 77+  B98E              ; Copy initial coords, copy lives, copy score
 78+  B98E              ;
 79+  B98E              player_init_lifestart:
 80+  B98E 21 30 B9         ld hl,player+5
 81+  B991 06 09            ld b,9                      ; initialise 9 properties
 82+  B993              player_init_lifestart2:
 83+  B993 36 00            ld (hl),0
 84+  B995 23               inc hl
 85+  B996 10 FB            djnz player_init_lifestart2
 86+  B998
 87+  B998 21 2D B9         ld hl,player+2              ; initialise some properties
 88+  B99B 36 02            ld (hl),2
 89+  B99D 23               inc hl
 90+  B99E 36 00            ld (hl),0
 91+  B9A0 23               inc hl
 92+  B9A1 36 01            ld (hl),1
 93+  B9A3
 94+  B9A3 ED 4B 22 80      ld bc,(init_coord)
 95+  B9A7 ED 43 2B B9      ld (player),bc
 96+  B9AB 01 34 B9         ld bc,player+9
 97+  B9AE 3A FF B9         ld a,(player1_lives)
 98+  B9B1 02               ld (bc),a
 99+  B9B2
100+  B9B2 CD 78 C1         call diamonds_init      ; initialise gems
101+  B9B5
102+  B9B5 01 06 00         ld bc,6
103+  B9B8 11 BB BF         ld de,scores_current+2
104+  B9BB 3A FD B8         ld a,(game_currentplayer)
105+  B9BE FE 01            cp 1
106+  B9C0 C2 C9 B9         jp nz,player_init_lifestart0
107+  B9C3 21 03 BA         ld hl,player1_score+2
108+  B9C6 C3 CC B9         jp player_init_lifestart1
109+  B9C9              player_init_lifestart0:
110+  B9C9 21 0C BA         ld hl,player2_score+2
111+  B9CC              player_init_lifestart1:
112+  B9CC ED B0            ldir
113+  B9CE C9               ret
114+  B9CF
115+  B9CF              ;
116+  B9CF              ; Finalises a player at end of a life
117+  B9CF              ; Copy lives, copy score
118+  B9CF              ;
119+  B9CF              player_lifeend:
120+  B9CF 01 34 B9         ld bc,player+9
121+  B9D2 0A               ld a,(bc)
122+  B9D3 01 FF B9         ld bc,player1_lives
123+  B9D6 02               ld (bc),a
124+  B9D7 CD DB B9         call player_recordcurrentscore
125+  B9DA C9               ret
126+  B9DB
127+  B9DB              ;
128+  B9DB              ; Copies the current score in the current
129+  B9DB              ;
130+  B9DB              player_recordcurrentscore:
131+  B9DB 01 06 00         ld bc,6                  ; copy current score back to correct player
132+  B9DE 21 BB BF         ld hl,scores_current+2
133+  B9E1 3A FD B8         ld a,(game_currentplayer)
134+  B9E4 FE 01            cp 1
135+  B9E6 C2 EF B9         jp nz,player_lifeend0
136+  B9E9 11 03 BA         ld de,player1_score+2
137+  B9EC C3 F2 B9         jp player_lifeend1
138+  B9EF              player_lifeend0:
139+  B9EF 11 0C BA         ld de,player2_score+2
140+  B9F2              player_lifeend1:
141+  B9F2 ED B0            ldir
142+  B9F4 C9               ret
143+  B9F5
144+  B9F5              ;
145+  B9F5              ; Player just died, subtract a life
146+  B9F5              ;
147+  B9F5              player_died:
148+  B9F5 01 34 B9         ld bc,player+9
149+  B9F8 0A               ld a,(bc)
150+  B9F9 3D               dec a
151+  B9FA 02               ld (bc),a
152+  B9FB CD CF B9         call player_lifeend
153+  B9FE C9               ret
154+  B9FF
155+  B9FF              ;
156+  B9FF              ; Player lives
157+  B9FF              ;
158+  B9FF              player1_lives:
159+  B9FF 03               defb 3
160+  BA00              player2_lives:
161+  BA00 03               defb 3
162+  BA01
163+  BA01              ;
164+  BA01              ; Player scores
165+  BA01              ;
166+  BA01              player1_score:
167+  BA01 04 01 30 30      defb 4,1,'000000',255
167+  BA05 30 30 30 30
167+  BA09 FF
168+  BA0A              player2_score:
169+  BA0A 16 01 30 30      defb 22,1,'000000',255
169+  BA0E 30 30 30 30
169+  BA12 FF
170+  BA13
171+  BA13              ;
172+  BA13              ; Kills a player this life
173+  BA13              ;
174+  BA13              player_killplayer:
175+  BA13 21 35 B9         ld hl,player+10
176+  BA16 36 01            ld (hl),1
177+  BA18 C9               ret
178+  BA19
179+  BA19              ;
180+  BA19              ; Crush a player this life
181+  BA19              ;
182+  BA19              player_crushplayer:
183+  BA19 21 36 B9         ld hl,player+11             ; mark as crushed
184+  BA1C 36 01            ld (hl),1
185+  BA1E C9               ret
186+  BA1F
187+  BA1F              player_tankkillplayer
188+  BA1F 21 36 B9         ld hl,player+11             ; mark as tanked
189+  BA22 36 02            ld (hl),2
190+  BA24 C9               ret
191+  BA25              ;
192+  BA25              ; Draws the player at the current position or deletes them
193+  BA25              ;
194+  BA25              player_drawplayer:
195+  BA25 3A 2D B9         ld a,(player+2)             ; get the current direction
196+  BA28 FE 03            cp 3
197+  BA2A C2 2F BA         jp nz,player_drawplayer0
198+  BA2D 3E 00            ld a,0                      ; if 3, then down, so set the direction to 0 since the sprite is the same as up
199+  BA2F              player_drawplayer0:
200+  BA2F 5F               ld e,a                      ; store in e
201+  BA30 3A 36 B9         ld a,(player+11)             ; get the dying flag
202+  BA33 FE 01            cp 1
203+  BA35 CA 47 BA         jp z,player_drawplayer3     ; if it's one, we're being crushed
204+  BA38              player_drawplayer4:
205+  BA38 3A 31 B9         ld a,(player+6)             ; get the dig flag
206+  BA3B FE 01            cp 1
207+  BA3D CA 95 BA         jp z,player_drawplayer1    ; get dig frame
208+  BA40 3A 2E B9         ld a,(player+3)             ; this is normal movement so get the current frame
209+  BA43 83               add a,e
210+  BA44 C3 9A BA         jp player_drawplayer2
211+  BA47              player_drawplayer3:
212+  BA47 21 37 B9         ld hl,player+12
213+  BA4A 7E               ld a,(hl)                  ; crushing, so get the current anim flag
214+  BA4B FE 00            cp 0
215+  BA4D C2 56 BA         jp nz,player_drawplayer5    ; if this isn't zero, then this isn't the first time round, so do the crush anim
216+  BA50 3E 64            ld a,100
217+  BA52 77               ld (hl),a                   ; otherwise, load up the anim frames
218+  BA53 C3 38 BA         jp player_drawplayer4       ; and return to the main loop to remove the current frame
219+  BA56              player_drawplayer5:
220+  BA56 3D               dec a
221+  BA57 77               ld (hl),a
222+  BA58 FE 00            cp 0
223+  BA5A CC 13 BA         call z,player_killplayer     ; final animation, so kill the player
224+  BA5D FE 0A            cp 10                         ; play the sound
225+  BA5F CC 14 AD         call z, sound_rockfell
226+  BA62 FE 14            cp 20                        ; check if we should move the rock
227+  BA64 C2 78 BA         jp nz,player_drawplayer8
228+  BA67 D9               exx
229+  BA68 08               ex af,af'
230+  BA69 ED 4B 49 BE      ld bc,(rocks_killerrock)    ; get the coords of the rock that killed us
231+  BA6D 21 2B B3         ld hl,sprites+72
232+  BA70 CD E6 A8         call sprites_drawsprite     ; draw a rock over current
233+  BA73 08               ex af,af'
234+  BA74 D9               exx
235+  BA75 C3 8E BA         jp player_drawplayer6       ; continue drawing player
236+  BA78              player_drawplayer8:
237+  BA78 FE 14            cp 20
238+  BA7A D2 8E BA         jp nc,player_drawplayer6    ; if not in last 10 frames, draw as normal
239+  BA7D ED 4B 2B B9      ld bc,(player)
240+  BA81 CD 38 A8         call screen_getattraddressfromscreencoords ; get the attr address into de
241+  BA84 62 6B            ld hl,de
242+  BA86 36 42            ld (hl),66
243+  BA88 21 2B B3         ld hl,sprites+72            ; otherwise, player is rock
244+  BA8B C3 A4 BA         jp player_drawplayer7
245+  BA8E              player_drawplayer6:
246+  BA8E E6 01            and 1                       ; check for odd
247+  BA90 C6 0A            add 10                      ; add 10, to get either 10 or 11
248+  BA92 C3 9A BA         jp player_drawplayer2
249+  BA95              player_drawplayer1:
250+  BA95 3A 2D B9         ld a,(player+2)             ; digging, get the current direction again, because want all four
251+  BA98 C6 06            add a,6                     ; add direction to 6 to get frame
252+  BA9A              player_drawplayer2:
253+  BA9A 07               rlca
254+  BA9B 07               rlca
255+  BA9C 07               rlca                        ; multiply by eight
256+  BA9D 6F               ld l,a
257+  BA9E 26 00            ld h,0
258+  BAA0 11 A0 B3         ld de,player_sprite
259+  BAA3 19               add hl,de                   ; load hl with the location of the player sprite data
260+  BAA4              player_drawplayer7:
261+  BAA4 ED 4B 2B B9      ld bc,(player)              ; load bc with the start coords
262+  BAA8 CD E6 A8         call sprites_drawsprite     ; call the routine to draw the sprite
263+  BAAB CD DB BA         call player_storeupdatedlines ; log updated rows
264+  BAAE C9               ret
265+  BAAF
266+  BAAF
267+  BAAF              ;
268+  BAAF              ; Runs after the player just moved. Changes animation frame if required
269+  BAAF              ;
270+  BAAF              player_justmoved:
271+  BAAF D9               exx
272+  BAB0 3A 2F B9         ld a,(player+4)             ; get the transition count
273+  BAB3 FE 00            cp 0
274+  BAB5 CA BB BA         jp z, player_justmoved2     ; if zero reset and change the frame
275+  BAB8 C3 D5 BA         jp player_justmoved1       ; otherwise decrease and continue
276+  BABB              player_justmoved2:
277+  BABB                  ; reset and change frame in here
278+  BABB 3E 01            ld a,1
279+  BABD 32 2F B9         ld (player+4),a            ; reset back to whatever
280+  BAC0 3A 2E B9         ld a,(player+3)             ; load the frame
281+  BAC3 FE 03            cp 3                       ; flip between 3 and 0
282+  BAC5 C2 CD BA         jp nz, player_justmoved4
283+  BAC8 3E 00            ld a,0
284+  BACA C3 CF BA         jp player_justmoved5
285+  BACD              player_justmoved4:
286+  BACD 3E 03            ld a,3
287+  BACF              player_justmoved5:
288+  BACF 32 2E B9         ld (player+3),a           ; save back
289+  BAD2 C3 D9 BA         jp player_justmoved3
290+  BAD5              player_justmoved1:
291+  BAD5                  ; decrease count
292+  BAD5 3D               dec a
293+  BAD6 32 2F B9         ld (player+4),a
294+  BAD9              player_justmoved3:
295+  BAD9 D9               exx;
296+  BADA C9               ret
297+  BADB
298+  BADB              ;
299+  BADB              ; Stores the updated rows associated with the player
300+  BADB              ;
301+  BADB              player_storeupdatedlines:
302+  BADB ED 4B 2B B9      ld bc,(player)          ; get the screen coords into bc
303+  BADF 79               ld a,c                  ; get the player block coords of current block
304+  BAE0 E6 F8            and 248                 ; find closest multiple of eight
305+  BAE2 0F               rrca
306+  BAE3 0F               rrca
307+  BAE4 0F               rrca                    ; divide by 8
308+  BAE5 ED 5B 0D A7      ld de,(screen_offset)          ; load the screen offset, this is in rows
309+  BAE9 93               sub e
310+  BAEA F5               push af
311+  BAEB CD BD A5         call buffer_marklineforupdate  ; store current row in updated lines
312+  BAEE F1               pop af
313+  BAEF 3D               dec a
314+  BAF0 F5               push af
315+  BAF1 CD BD A5         call buffer_marklineforupdate  ; store line above
316+  BAF4 F1               pop af
317+  BAF5 3C               inc a
318+  BAF6 3C               inc a
319+  BAF7 CD BD A5         call buffer_marklineforupdate  ; store line beneath
320+  BAFA C9               ret
321+  BAFB
322+  BAFB              ;
323+  BAFB              ; Called if the player has collected a diamond. Checks the current coord. If it is the start coord, then return complete
324+  BAFB              ; Outputs:
325+  BAFB              ; a - 1 for completed level
326+  BAFB              player_checkforexit:
327+  BAFB ED 4B 2B B9      ld bc,(player)                 ; get player coords
328+  BAFF ED 5B 22 80      ld de,(init_coord)             ; get start coords
329+  BB03 78               ld a,b
330+  BB04 BA               cp d                         ; compare horiz
331+  BB05 C2 10 BB         jp nz,player_checkforexit1
332+  BB08 79               ld a,c
333+  BB09 BB               cp e                        ; compare vert
334+  BB0A C2 10 BB         jp nz,player_checkforexit1
335+  BB0D              player_checkforexit0:
336+  BB0D 3E 01            ld a,1                       ; hasn't completed
337+  BB0F C9               ret
338+  BB10              player_checkforexit1:
339+  BB10 3E 00            ld a,0                       ; has completed
340+  BB12 C9               ret
# file closed: game/player.asm
 40   BB13                  include "game\ship.asm"
# file opened: game/ship.asm
  1+  BB13              ;
  2+  BB13              ; Ship initial position: vert,horiz
  3+  BB13              ;
  4+  BB13              ship_initpos:
  5+  BB13 00 24            defb 0,36
  6+  BB15              ship_initpos2:
  7+  BB15 00 00            defb 0,0
  8+  BB17              ship_frame:
  9+  BB17 00               defb 0
 10+  BB18              ;
 11+  BB18              ; The current memory location
 12+  BB18              ;
 13+  BB18              ship_current_sprite:
 14+  BB18 00 00            defb 0,0
 15+  BB1A
 16+  BB1A              ship_current_coords:
 17+  BB1A 00 00            defb 0,0
 18+  BB1C
 19+  BB1C              ship_process:
 20+  BB1C 3A 36 B9         ld a,(player+11)
 21+  BB1F FE 02            cp 2                        ; has the player been killed by tank?
 22+  BB21 C0               ret nz                      ; do nothing if not
 23+  BB22 CD CF B6         call control_scroll_up           ; make sure the screen is on the top screen
 24+  BB25 CD 94 BB         call ship_takeoff           ; bye bye
 25+  BB28 CD 13 BA         call player_killplayer      ; killed
 26+  BB2B 06 32            ld b,50
 27+  BB2D CD 82 80         call utilities_pauseforframes
 28+  BB30 C9               ret
 29+  BB31
 30+  BB31              ;
 31+  BB31              ;   Draw and land the ship - first move the ship down, then across, drawing the player in the middle
 32+  BB31              ;
 33+  BB31              ship_land:
 34+  BB31 ED 4B 13 BB      ld bc,(ship_initpos)
 35+  BB35 ED 43 15 BB      ld (ship_initpos2),bc        ; save the initial position for later use
 36+  BB39 1E 00            ld e,0                      ; store a flag to track first time round
 37+  BB3B 06 09            ld b,9                      ; move down 8 pixels
 38+  BB3D              ship_land0:
 39+  BB3D C5               push bc
 40+  BB3E 7B               ld a,e
 41+  BB3F D5               push de                     ; store de for next time round
 42+  BB40 FE 01            cp 1                        ; check first time flag
 43+  BB42 C2 57 BB         jp nz,ship_land1             ; don't draw over previous one if first time
 44+  BB45 CD EB BB         call ship_draw_full         ; delete old one
 45+  BB48 CD C0 BB         call ship_change_frame      ; increment the frame
 46+  BB4B ED 4B 15 BB      ld bc,(ship_initpos2)       ; get the current coords
 47+  BB4F 81 C6 01         add c,1                     ; move down one pixels
 48+  BB52 4F               ld c,a
 49+  BB53 ED 43 15 BB      ld (ship_initpos2),bc
 50+  BB57              ship_land1:
 51+  BB57 CD EB BB         call ship_draw_full         ; draw the ship
 52+  BB5A CD D5 BB         call ship_draw_screen
 53+  BB5D D1               pop de
 54+  BB5E 1E 01            ld e,1
 55+  BB60 C1               pop bc
 56+  BB61 10 DA            djnz ship_land0             ; repeat for downward movement
 57+  BB63                  ; done moving down
 58+  BB63                  ; now move across
 59+  BB63 CD 25 BA         call player_drawplayer      ; draw player
 60+  BB66 CD EB BB         call ship_draw_full         ; delete old one
 61+  BB69 1E 00            ld e,0                      ; store a flag to track first time round
 62+  BB6B 06 14            ld b,20                      ; move back 20 pixels pixels
 63+  BB6D              ship_land3:
 64+  BB6D C5               push bc
 65+  BB6E 7B               ld a,e
 66+  BB6F D5               push de                     ; store de for next time round
 67+  BB70 FE 01            cp 1                        ; check first time flag
 68+  BB72 C2 87 BB         jp nz,ship_land2             ; don't draw over previous one if first time
 69+  BB75 CD EB BB         call ship_draw_full         ; delete old one
 70+  BB78 CD C0 BB         call ship_change_frame      ; increment the frame
 71+  BB7B ED 4B 15 BB      ld bc,(ship_initpos2)       ; get the current coords
 72+  BB7F 78               ld a,b
 73+  BB80 D6 01            sub 1                       ; move back one pixels
 74+  BB82 47               ld b,a
 75+  BB83 ED 43 15 BB      ld (ship_initpos2),bc
 76+  BB87              ship_land2:
 77+  BB87 CD EB BB         call ship_draw_full         ; draw the ship
 78+  BB8A CD D5 BB         call ship_draw_screen       ; draw the frame to screen by clearing the buffer
 79+  BB8D D1               pop de
 80+  BB8E 1E 01            ld e,1                      ; set e to 1 to indicate >1 time
 81+  BB90 C1               pop bc
 82+  BB91 10 DA            djnz ship_land3             ; repeat for vertical movement
 83+  BB93 C9               ret
 84+  BB94
 85+  BB94              ;
 86+  BB94              ;   Take off the ship
 87+  BB94              ;
 88+  BB94              ship_takeoff:
 89+  BB94 1E 01            ld e,1                      ; store a flag to track first time round
 90+  BB96 06 08            ld b,8                      ; move up 8 pixels
 91+  BB98              ship_takeoff0:
 92+  BB98 C5               push bc
 93+  BB99 7B               ld a,e
 94+  BB9A D5               push de                     ; store de for next time round
 95+  BB9B FE 01            cp 1                        ; check first time flag
 96+  BB9D C2 B3 BB         jp nz,ship_takeoff1             ; don't draw over previous one if first time
 97+  BBA0 ED 4B 15 BB      ld bc,(ship_initpos2)       ; get the current coords
 98+  BBA4 CD EB BB         call ship_draw_full         ; delete old one
 99+  BBA7 CD C0 BB         call ship_change_frame      ; increment the frame
100+  BBAA ED 4B 15 BB      ld bc,(ship_initpos2)       ; get the current coords
101+  BBAE 0D               dec c                       ; move up one pixels
102+  BBAF ED 43 15 BB      ld (ship_initpos2),bc
103+  BBB3              ship_takeoff1:
104+  BBB3 CD EB BB         call ship_draw_full         ; draw the ship
105+  BBB6 CD D5 BB         call ship_draw_screen
106+  BBB9 D1               pop de
107+  BBBA 1E 01            ld e,1
108+  BBBC C1               pop bc
109+  BBBD 10 D9            djnz ship_takeoff0             ; repeat for upward movement
110+  BBBF                  ; done moving up
111+  BBBF C9               ret
112+  BBC0
113+  BBC0              ;
114+  BBC0              ; Swap the animation frame between 0 and 32. This will be added to the memory location later
115+  BBC0              ;
116+  BBC0              ship_change_frame:
117+  BBC0 F5               push af
118+  BBC1 3A 17 BB         ld a,(ship_frame)
119+  BBC4 FE 00            cp 0
120+  BBC6 CA CE BB         jp z,ship_change_frame0
121+  BBC9 3E 00            ld a,0                      ; flip to 0
122+  BBCB C3 D0 BB         jp ship_change_frame1
123+  BBCE              ship_change_frame0:
124+  BBCE 3E 20            ld a,32                      ; flip to 32
125+  BBD0              ship_change_frame1:
126+  BBD0 32 17 BB         ld (ship_frame),a            ; save the frame
127+  BBD3 F1               pop af
128+  BBD4 C9               ret
129+  BBD5
130+  BBD5              ship_draw_screen:
131+  BBD5 3E 00            ld a,0
132+  BBD7 CD BD A5         call buffer_marklineforupdate
133+  BBDA 3E 01            ld a,1
134+  BBDC CD BD A5         call buffer_marklineforupdate
135+  BBDF 3E 02            ld a,2
136+  BBE1 CD BD A5         call buffer_marklineforupdate   ; mark the first three rows for update
137+  BBE4 76               halt
138+  BBE5 F3               di
139+  BBE6 CD 54 A6         call buffer_buffertoscreen  ; copy buffer to screen
140+  BBE9 FB               ei                          ; enable interupts
141+  BBEA C9               ret
142+  BBEB
143+  BBEB              ship_draw_full:
144+  BBEB 21 00 B4         ld hl,ship_sprite
145+  BBEE ED 4B 15 BB      ld bc,(ship_initpos2)         ; load bc with the start coords
146+  BBF2 22 18 BB         ld (ship_current_sprite),hl  ; put into memory
147+  BBF5 ED 43 1A BB      ld (ship_current_coords),bc  ; put into memory
148+  BBF9 CD 18 BC         call ship_draw
149+  BBFC 08               ex af,af'
150+  BBFD 3A 17 BB         ld a,(ship_frame)            ; get the animation frame
151+  BC00 16 00            ld d,0
152+  BC02 5F               ld e,a
153+  BC03 19               add hl,de
154+  BC04 22 18 BB         ld (ship_current_sprite),hl  ; put into memory
155+  BC07 08               ex af,af'
156+  BC08 ED 4B 15 BB      ld bc,(ship_initpos2)         ; load bc with the start coords
157+  BC0C 81 C6 08         add c,8                      ; move one line down
158+  BC0F 4F               ld c,a
159+  BC10 ED 43 1A BB      ld (ship_current_coords),bc  ; put into memory
160+  BC14 CD 18 BC         call ship_draw
161+  BC17 C9               ret
162+  BC18
163+  BC18              ;
164+  BC18              ; Draw the ship
165+  BC18              ; Inputs:
166+  BC18              ; None, all in memory
167+  BC18              ;
168+  BC18              ship_draw:
169+  BC18 3E 04            ld a,4                              ; 4 pieces per half
170+  BC1A              ship_draw0:
171+  BC1A F5               push af
172+  BC1B 2A 18 BB         ld hl,(ship_current_sprite)
173+  BC1E ED 4B 1A BB      ld bc,(ship_current_coords)         ; load bc with the start coords
174+  BC22 CD E6 A8         call sprites_drawsprite
175+  BC25 2A 18 BB         ld hl,(ship_current_sprite)
176+  BC28 ED 4B 1A BB      ld bc,(ship_current_coords)         ; load bc with the start coords
177+  BC2C 11 08 00         ld de,8
178+  BC2F 19               add hl,de
179+  BC30 80 C6 08         add b,8
180+  BC33 47               ld b,a
181+  BC34 22 18 BB         ld (ship_current_sprite),hl         ; put into memory
182+  BC37 ED 43 1A BB      ld (ship_current_coords),bc         ; put into memory
183+  BC3B F1               pop af
184+  BC3C 3D               dec a
185+  BC3D FE 00            cp 0
186+  BC3F C2 1A BC         jp nz,ship_draw0
187+  BC42
188+  BC42 C9               ret
189+  BC43
# file closed: game/ship.asm
 41   BC43                  include "game\tank.asm"
# file opened: game/tank.asm
  1+  BC43              ;
  2+  BC43              ; tank initial position: vert,horiz
  3+  BC43              ;
  4+  BC43              tank_initpos:
  5+  BC43 10 D0            defb 16,208
  6+  BC45              tank_initpos2:
  7+  BC45 00 00            defb 0,0
  8+  BC47              tank_frame:
  9+  BC47 00               defb 0
 10+  BC48              tank_anim:
 11+  BC48 11               defb 17
 12+  BC49
 13+  BC49              ;
 14+  BC49              ; The damage countdown
 15+  BC49              ;
 16+  BC49              tank_currentdamage:
 17+  BC49 F0               defb 240
 18+  BC4A
 19+  BC4A              ;
 20+  BC4A              ; The damage coordinate
 21+  BC4A              ;
 22+  BC4A              tank_currentdamagecoord:
 23+  BC4A 16 02            defb 22,2
 24+  BC4C
 25+  BC4C              ;
 26+  BC4C              ; Controls when the tank shoots
 27+  BC4C              ;
 28+  BC4C              tank_count:
 29+  BC4C 00               defb 0
 30+  BC4D
 31+  BC4D              ;
 32+  BC4D              ; Holds the block number of the current damage sprite
 33+  BC4D              ;
 34+  BC4D              tank_damageframe:
 35+  BC4D 00               defb 0
 36+  BC4E
 37+  BC4E              ;
 38+  BC4E              ; The current memory location
 39+  BC4E              ;
 40+  BC4E              tank_current_sprite:
 41+  BC4E 00 00            defb 0,0
 42+  BC50
 43+  BC50              tank_current_coords:
 44+  BC50 00 00            defb 0,0
 45+  BC52
 46+  BC52              ;
 47+  BC52              ; Is the missile displayed - will be 19 if so, 0 if not
 48+  BC52              ;
 49+  BC52              tank_missile_displayed:
 50+  BC52 00               defb 0
 51+  BC53
 52+  BC53              ;
 53+  BC53              ; Initialise the tank
 54+  BC53              ;
 55+  BC53              tank_init:
 56+  BC53 ED 4B 43 BC      ld bc,(tank_initpos)
 57+  BC57 ED 43 45 BC      ld (tank_initpos2),bc       ; save the initial position for later use
 58+  BC5B 21 47 BC         ld hl,tank_frame
 59+  BC5E 36 00            ld (hl),0
 60+  BC60 21 48 BC         ld hl,tank_anim
 61+  BC63 36 11            ld (hl),17
 62+  BC65 21 4D BC         ld hl,tank_damageframe              ; reset tank
 63+  BC68 36 00            ld (hl),0
 64+  BC6A 21 4C BC         ld hl,tank_count
 65+  BC6D 36 00            ld (hl),0
 66+  BC6F 21 49 BC         ld hl,tank_currentdamage
 67+  BC72 36 F0            ld (hl),240
 68+  BC74 21 4A BC         ld hl,tank_currentdamagecoord
 69+  BC77 36 16            ld (hl),22
 70+  BC79 23               inc hl
 71+  BC7A 36 02            ld (hl),2
 72+  BC7C 21 52 BC         ld hl,tank_missile_displayed
 73+  BC7F 36 00            ld (hl),0
 74+  BC81
 75+  BC81 C9               ret
 76+  BC82
 77+  BC82              ;
 78+  BC82              ;   Draw and move the tank
 79+  BC82              ;   Start processing at frame 200
 80+  BC82              ;   Don't move if anim is zero
 81+  BC82              ;   Decrement frame if moved
 82+  BC82              ;
 83+  BC82              tank_process:
 84+  BC82 3A 48 BC         ld a,(tank_anim)
 85+  BC85 FE 00            cp 0
 86+  BC87 C2 8E BC         jp nz,tank_process0         ; fire the tank if we've already moved, or jump to movement
 87+  BC8A CD 9F BC         call tank_fire
 88+  BC8D C9               ret
 89+  BC8E              tank_process0:
 90+  BC8E CD 21 B9         call game_getcurrentframe   ; get the current frame number into a
 91+  BC91 FE 4B            cp 75
 92+  BC93 D8               ret c                       ; return if the frame number is below 100
 93+  BC94 CD B3 BD         call tank_move              ; move tank if not
 94+  BC97 3A 48 BC         ld a,(tank_anim)
 95+  BC9A 3D               dec a
 96+  BC9B 32 48 BC         ld (tank_anim),a            ; decrease the anim count
 97+  BC9E C9               ret
 98+  BC9F
 99+  BC9F              ;
100+  BC9F              ; Fires the tank
101+  BC9F              ;
102+  BC9F              tank_fire:
103+  BC9F 3A 4C BC         ld a,(tank_count)            ; if not, don't do anything
104+  BCA2 3C               inc a                        ; increment
105+  BCA3 FE 19            cp 25                        ; have we reached fifty
106+  BCA5 C2 AA BC         jp nz,tank_fire0
107+  BCA8 3E 00            ld a,0                       ; reset if reached fifty
108+  BCAA              tank_fire0:                      ; DEALING WITH A NEW BLOCK
109+  BCAA 32 4C BC         ld (tank_count),a            ; store tank count
110+  BCAD FE 00            cp 0
111+  BCAF CA C6 BC         jp z,tank_fire7              ; If this is zero, fire
112+  BCB2 3A 52 BC         ld a,(tank_missile_displayed) ; is the missile displaying?
113+  BCB5 FE 00            cp 0
114+  BCB7 C8               ret z                       ; don't do anything if not
115+  BCB8 CD 6D BD         call tank_missilegraphic     ; if not, overwrite the previous tank missile
116+  BCBB 3E 00            ld a,0                       ; reset the flag
117+  BCBD 32 52 BC         ld (tank_missile_displayed),a
118+  BCC0 3E 02            ld a,2
119+  BCC2 CD BD A5         call buffer_marklineforupdate
120+  BCC5 C9               ret                        ; only shoot if we're on 0
121+  BCC6              tank_fire7:
122+  BCC6 3A 49 BC         ld a,(tank_currentdamage)    ; get the damage countdown
123+  BCC9 E6 07            and 7                       ; check if multiple of 8 - house keeping when moving onto a new block
124+  BCCB C2 01 BD         jp nz,tank_fire1            ; not, so just do a normal frame
125+  BCCE ED 4B 4A BC      ld bc,(tank_currentdamagecoord) ; get the current damage coord into bc
126+  BCD2 79               ld a,c
127+  BCD3 FE 0A            cp 10
128+  BCD5 C2 DC BC         jp nz, tank_fire6
129+  BCD8 CD A5 BD         call tank_killedbytank      ; we're through, so the player has died. Kill them.
130+  BCDB C9               ret                         ; return if we're through the mountain
131+  BCDC              tank_fire6:
132+  BCDC 3E 0F            ld a,15
133+  BCDE 32 4D BC         ld (tank_damageframe),a     ; reset the damage frame
134+  BCE1 21 E3 B2         ld hl,sprites               ; location of the empty block
135+  BCE4 CD 75 A8         call screen_showchar        ; show this character here
136+  BCE7 ED 4B 4A BC      ld bc,(tank_currentdamagecoord) ; get the current damage coord into bc
137+  BCEB 05               dec b                       ; look one above
138+  BCEC CD A2 A8         call screen_ischarempty     ; check if it is empty
139+  BCEF ED 4B 4A BC      ld bc,(tank_currentdamagecoord) ; get the current damage coord into bc again
140+  BCF3 FE 01            cp 1
141+  BCF5 C2 38 BD         jp nz,tank_fire2             ; block above isn't empty, so can't move on, copy down above blocks
142+  BCF8 ED 4B 4A BC      ld bc,(tank_currentdamagecoord) ; get the current damage coord into bc
143+  BCFC 0D               dec c
144+  BCFD ED 43 4A BC      ld (tank_currentdamagecoord),bc ; store the coord
145+  BD01              tank_fire1:                         ; DEALING WITH NORMAL DAMAGE
146+  BD01 ED 4B 4A BC      ld bc,(tank_currentdamagecoord) ; get the current damage coord into bc
147+  BD05 3A 49 BC         ld a,(tank_currentdamage)    ; get the damage countdown
148+  BD08 E6 07            and 7                       ; is it a multiple of 8? only want to do the first line check then
149+  BD0A C2 15 BD         jp nz, tank_fire5
150+  BD0D CD D2 A8         call screen_getcharfirstbyte    ; get the first byte to check if this is a slope
151+  BD10 FE FF            cp 255                      ; if it's a full line, it will be 255 and not a slope
152+  BD12 C2 56 BD         jp nz,tank_fire3            ; if it's a slope, handle this differently
153+  BD15              tank_fire5:
154+  BD15 3A 4D BC         ld a,(tank_damageframe)
155+  BD18 CD 8F A8         call screen_getblock        ; get the block data into hl
156+  BD1B CD 75 A8         call screen_showchar        ; show this character here
157+  BD1E 3A 4D BC         ld a,(tank_damageframe)
158+  BD21 3C               inc a
159+  BD22 32 4D BC         ld (tank_damageframe),a     ; increment the damage block and store
160+  BD25 3A 49 BC         ld a,(tank_currentdamage)    ; get the damage countdown
161+  BD28 3D               dec a
162+  BD29 3D               dec a
163+  BD2A 32 49 BC         ld (tank_currentdamage),a     ; decrease current damage by 2 and store
164+  BD2D 3A 52 BC         ld a,(tank_missile_displayed) ; is the missile displaying?
165+  BD30 FE 00            cp 0
166+  BD32 CC 6D BD         call z, tank_missilegraphic
167+  BD35 C3 5F BD         jp tank_fire4
168+  BD38              tank_fire2:                     ; DEALING WITH COPYING BLOCKS FROM ABOVE
169+  BD38 05               dec b
170+  BD39 C5               push bc
171+  BD3A CD BB A8         call screen_copyblockdown       ; copy the block down
172+  BD3D ED 4B 4A BC      ld bc,(tank_currentdamagecoord) ; get the current damage coord into bc
173+  BD41 C1               pop bc                      ; get the coord we just checked back
174+  BD42 78               ld a,b
175+  BD43 FE 00            cp 0
176+  BD45 CA 01 BD         jp z,tank_fire1             ; if we're at the top of the screen, don't check any more
177+  BD48 C5               push bc
178+  BD49 05               dec b
179+  BD4A CD A2 A8         call screen_ischarempty     ; check if it is empty
180+  BD4D C1               pop bc
181+  BD4E FE 01            cp 1                        ; if empty
182+  BD50 C2 38 BD         jp nz, tank_fire2            ; copy another one down
183+  BD53 C3 01 BD         jp tank_fire1               ; otherwise, return to main thread
184+  BD56              tank_fire3:                      ; dealing with slopes
185+  BD56 3A 49 BC         ld a,(tank_currentdamage)    ; get the damage countdown
186+  BD59 06 08            ld b,8
187+  BD5B 90               sub b                        ; special case for slopes
188+  BD5C 32 49 BC         ld (tank_currentdamage),a    ; decrease the damage countdown by 8, so that next time, we get rid of this block without eroding it
189+  BD5F              tank_fire4:                     ; TIDY UP
190+  BD5F CD BD A5         call buffer_marklineforupdate
191+  BD62 3E 01            ld a,1
192+  BD64 CD BD A5         call buffer_marklineforupdate
193+  BD67 3E 02            ld a,2
194+  BD69 CD BD A5         call buffer_marklineforupdate
195+  BD6C C9               ret
196+  BD6D
197+  BD6D              ;
198+  BD6D              ; Displays or hides the missile graphic, and changes the gun
199+  BD6D              ;
200+  BD6D              tank_missilegraphic:
201+  BD6D 3A 52 BC         ld a,(tank_missile_displayed)
202+  BD70 FE 00            cp 0
203+  BD72 C2 7A BD         jp nz,tank_missilegraphic0
204+  BD75 3E 13            ld a,19
205+  BD77 C3 7C BD         jp tank_missilegraphic1
206+  BD7A              tank_missilegraphic0:
207+  BD7A 3E 00            ld a,0
208+  BD7C              tank_missilegraphic1:
209+  BD7C 32 52 BC         ld (tank_missile_displayed),a ; store the flipped graphic
210+  BD7F ED 4B 4A BC      ld bc,(tank_currentdamagecoord)
211+  BD83 0C               inc c
212+  BD84 0C               inc c                   ; print the graphic 2 spaces right
213+  BD85 CD 8F A8         call screen_getblock        ; get the block data into hl
214+  BD88 CD 75 A8         call screen_showchar        ; show this character here
215+  BD8B 06 02            ld b,2
216+  BD8D 0E 18            ld c,24                     ; set gunbarrel coords
217+  BD8F 11 00 00         ld de,0
218+  BD92 21 60 B4         ld hl,tank_sprite           ; set hl to gunbarrel gfx, shooting is +64
219+  BD95 3A 52 BC         ld a,(tank_missile_displayed)
220+  BD98 FE 00            cp 0
221+  BD9A CA A0 BD         jp z,tank_missilegraphic2
222+  BD9D 11 40 00         ld de,64
223+  BDA0              tank_missilegraphic2:
224+  BDA0 19               add hl,de                   ; work out missile graphic
225+  BDA1 CD 75 A8         call screen_showchar        ; show this character here
226+  BDA4 C9               ret
227+  BDA5
228+  BDA5              ;
229+  BDA5              ; Deal with the player being killed by the tank
230+  BDA5              ;
231+  BDA5              tank_killedbytank:
232+  BDA5 ED 4B 4A BC      ld bc,(tank_currentdamagecoord) ; get the current damage coord into bc
233+  BDA9 21 E3 B2         ld hl,sprites                   ; empty sprite
234+  BDAC CD 75 A8         call screen_showchar            ; hide the last piece of dirt
235+  BDAF CD 1F BA         call player_tankkillplayer
236+  BDB2 C9               ret
237+  BDB3
238+  BDB3              tank_move:
239+  BDB3 ED 4B 45 BC      ld bc,(tank_initpos2)
240+  BDB7 C5               push bc
241+  BDB8 3A 48 BC         ld a,(tank_anim)
242+  BDBB FE 11            cp 17                       ; check first time flag
243+  BDBD CA CF BD         jp z,tank_move1             ; don't draw over previous one if first time
244+  BDC0 CD D4 BD         call tank_draw_full         ; delete old one
245+  BDC3 ED 4B 45 BC      ld bc,(tank_initpos2)       ; get the current coords
246+  BDC7 78               ld a,b
247+  BDC8 D6 01            sub 1                       ; move back one pixels
248+  BDCA 47               ld b,a
249+  BDCB ED 43 45 BC      ld (tank_initpos2),bc
250+  BDCF              tank_move1:
251+  BDCF CD D4 BD         call tank_draw_full         ; draw the tank
252+  BDD2 C1               pop bc
253+  BDD3 C9               ret
254+  BDD4
255+  BDD4              tank_draw_full:
256+  BDD4 21 60 B4         ld hl,tank_sprite
257+  BDD7 ED 4B 45 BC      ld bc,(tank_initpos2)         ; load bc with the start coords
258+  BDDB 22 4E BC         ld (tank_current_sprite),hl  ; put into memory
259+  BDDE ED 43 50 BC      ld (tank_current_coords),bc  ; put into memory
260+  BDE2 CD 0B BE         call tank_draw
261+  BDE5 08               ex af,af'
262+  BDE6 3A 47 BC         ld a,(tank_frame)            ; get the animation frame
263+  BDE9 16 00            ld d,0
264+  BDEB 5F               ld e,a
265+  BDEC 19               add hl,de
266+  BDED 22 4E BC         ld (tank_current_sprite),hl  ; put into memory
267+  BDF0 08               ex af,af'
268+  BDF1 ED 4B 45 BC      ld bc,(tank_initpos2)         ; load bc with the start coords
269+  BDF5 81 C6 08         add c,8                      ; move one line down
270+  BDF8 4F               ld c,a
271+  BDF9 ED 43 50 BC      ld (tank_current_coords),bc  ; put into memory
272+  BDFD CD 0B BE         call tank_draw
273+  BE00 3E 02            ld a,2
274+  BE02 CD BD A5         call buffer_marklineforupdate
275+  BE05 3E 03            ld a,3
276+  BE07 CD BD A5         call buffer_marklineforupdate   ; mark the first two rows for update
277+  BE0A C9               ret
278+  BE0B
279+  BE0B              ;
280+  BE0B              ; Draw the tank
281+  BE0B              ; Inputs:
282+  BE0B              ; None, all in memory
283+  BE0B              ;
284+  BE0B              tank_draw:
285+  BE0B 3E 04            ld a,4                              ; 4 pieces per half
286+  BE0D              tank_draw0:
287+  BE0D F5               push af
288+  BE0E 2A 4E BC         ld hl,(tank_current_sprite)
289+  BE11 ED 4B 50 BC      ld bc,(tank_current_coords)         ; load bc with the start coords
290+  BE15 CD E6 A8         call sprites_drawsprite
291+  BE18 2A 4E BC         ld hl,(tank_current_sprite)
292+  BE1B ED 4B 50 BC      ld bc,(tank_current_coords)         ; load bc with the start coords
293+  BE1F 11 08 00         ld de,8
294+  BE22 19               add hl,de
295+  BE23 80 C6 08         add b,8
296+  BE26 47               ld b,a
297+  BE27 22 4E BC         ld (tank_current_sprite),hl         ; put into memory
298+  BE2A ED 43 50 BC      ld (tank_current_coords),bc         ; put into memory
299+  BE2E F1               pop af
300+  BE2F 3D               dec a
301+  BE30 FE 00            cp 0
302+  BE32 C2 0D BE         jp nz,tank_draw0
303+  BE35
304+  BE35 C9               ret
305+  BE36
# file closed: game/tank.asm
 42   BE36                  include "game\rocks.asm"
# file opened: game/rocks.asm
  1+  BE36              ;
  2+  BE36              ; A structure of falling rocks
  3+  BE36              ; Assume we'll never have more than 4 falling at any one time
  4+  BE36              ; (1,2 - 16 bit memory location for rock graphic),state (0 fell, 1 falling, 2 wobbling), countdown
  5+  BE36              ;
  6+  BE36              rocks_falling:
  7+  BE36 00 00 00 00      defb 0,0,0,0
  8+  BE3A 00 00 00 00      defb 0,0,0,0
  9+  BE3E 00 00 00 00      defb 0,0,0,0
 10+  BE42 00 00 00 00      defb 0,0,0,0
 11+  BE46
 12+  BE46              rocks_tmp:
 13+  BE46 00               defb 0
 14+  BE47
 15+  BE47              rocks_tmp2:
 16+  BE47 00 00            defb 0,0
 17+  BE49
 18+  BE49              ;
 19+  BE49              ; Coords of the rock that killed us
 20+  BE49              ;
 21+  BE49              rocks_killerrock:
 22+  BE49 00 00            defb 0,0
 23+  BE4B
 24+  BE4B              ;
 25+  BE4B              ; Checks for a rock that needs to start falling. Takes a memory location of the first line at the bottom of the space.
 26+  BE4B              ; Checks to see if the pixel row in that location is a rock bottom. If it is, mark this rock as ready to fall.
 27+  BE4B              ; If the pixel row is not the rock bottom, stop checking.
 28+  BE4B              ; Inputs:
 29+  BE4B              ; hl- memory location
 30+  BE4B              ;
 31+  BE4B              rocks_checkforfalling:
 32+  BE4B 7E               ld a,(hl)           ; get the pixel row in this memory location
 33+  BE4C FE 7E            cp 126              ; check against the bottom pixel row of the rock graphic
 34+  BE4E C2 54 BE         jp nz,rocks_checkforfalling2 ; not a rock, stop
 35+  BE51 CD 55 BE         call rocks_addrocktofalling ; mark the rock as falling
 36+  BE54              rocks_checkforfalling2:
 37+  BE54 C9               ret
 38+  BE55
 39+  BE55              ;
 40+  BE55              ; Adds the rock to the structure that tracks falling rocks
 41+  BE55              ; Inputs:
 42+  BE55              ; hl - memory location of falling rock graphic
 43+  BE55              ; bc - coords of rock, c vert
 44+  BE55              rocks_addrocktofalling:
 45+  BE55 C5               push bc             ; store the coords
 46+  BE56 11 36 BE         ld de,rocks_falling
 47+  BE59 06 04            ld b,4              ; number of possible falling rocks
 48+  BE5B              rocks_addrocktofalling0:
 49+  BE5B 13               inc de
 50+  BE5C                  ;inc de
 51+  BE5C 13               inc de              ; move three along to get the state
 52+  BE5D 1A               ld a,(de)           ; load the state
 53+  BE5E FE 00            cp 0                ; check if this is not falling
 54+  BE60 C2 76 BE         jp nz,rocks_addrocktofalling1 ; continue the loop if not 0
 55+  BE63 13               inc de              ; move to frame
 56+  BE64 3E 10            ld a,16             ; load the number of frames to wobble
 57+  BE66 12               ld (de),a
 58+  BE67 1B               dec de              ; move de back to state
 59+  BE68 3E 02            ld a,2
 60+  BE6A 12               ld (de),a           ; set the state to wobbling
 61+  BE6B 1B               dec de              ; move back coords
 62+  BE6C C1               pop bc              ; get back coords
 63+  BE6D 78               ld a,b
 64+  BE6E 12               ld (de),a           ; store the vertical
 65+  BE6F 1B               dec de
 66+  BE70 79               ld a,c
 67+  BE71 12               ld (de),a           ; store the horizontal
 68+  BE72 C5               push bc
 69+  BE73 C3 7A BE         jp rocks_addrocktofalling2 ; done
 70+  BE76              rocks_addrocktofalling1:
 71+  BE76 13               inc de
 72+  BE77 13               inc de              ; move memory along to next rock
 73+  BE78 10 E1            djnz rocks_addrocktofalling0 ; try the next rock
 74+  BE7A              rocks_addrocktofalling2: ; done, return
 75+  BE7A C1               pop bc              ; to tidy up
 76+  BE7B C9               ret
 77+  BE7C
 78+  BE7C              ;
 79+  BE7C              ; Processes any falling rocks
 80+  BE7C              ;
 81+  BE7C              rocks_processrocks:
 82+  BE7C DD 21 36 BE      ld ix,rocks_falling
 83+  BE80 06 04            ld b,4              ; the number of rocks to check
 84+  BE82              rocks_processrocks0:
 85+  BE82 C5               push bc             ; store loop count
 86+  BE83 DD 4E 00 DD      ld bc,(ix)          ; load the coords for this rock into bc
 86+  BE87 46 01
 87+  BE89 DD 23            inc ix
 88+  BE8B DD 23            inc ix              ; move to the state
 89+  BE8D DD 7E 00         ld a,(ix)           ; load the state into a
 90+  BE90 FE 00            cp 0
 91+  BE92 CA B6 BE         jp z,rocks_processrocks3 ; if not falling, check next
 92+  BE95 FE 02            cp 2
 93+  BE97 C2 A7 BE         jp nz, rocks_processrocks2
 94+  BE9A                  ; we're wobbling
 95+  BE9A DD 23            inc ix              ; get frame number for wobble
 96+  BE9C DD 7E 00         ld a,(ix)           ; get wobble frame into a
 97+  BE9F CD 87 BF         call rocks_wobble
 98+  BEA2 DD 23            inc ix              ; increment for next
 99+  BEA4 C3 BA BE         jp rocks_processrocks1  ; do next rock
100+  BEA7              rocks_processrocks2:
101+  BEA7                  ; we're falling
102+  BEA7 C5               push bc
103+  BEA8 CD D3 BE         call rocks_fall
104+  BEAB C1               pop bc
105+  BEAC CD BE BE         call rocks_storeupdatedlines
106+  BEAF DD 23            inc ix
107+  BEB1 DD 23            inc ix              ; inc ix to get to next
108+  BEB3 C3 BA BE         jp rocks_processrocks1
109+  BEB6              rocks_processrocks3:
110+  BEB6 DD 23            inc ix
111+  BEB8 DD 23            inc ix
112+  BEBA              rocks_processrocks1:
113+  BEBA C1               pop bc              ; get loop count back
114+  BEBB 10 C5            djnz rocks_processrocks0
115+  BEBD C9               ret
116+  BEBE
117+  BEBE              ;
118+  BEBE              ; Stores the updated rows associated with the rock
119+  BEBE              ; Inputs:
120+  BEBE              ; bc - coords
121+  BEBE              ;
122+  BEBE              rocks_storeupdatedlines:
123+  BEBE 79               ld a,c                  ; get the rock block coords of current block
124+  BEBF E6 F8            and 248                 ; find closest multiple of eight
125+  BEC1 0F               rrca
126+  BEC2 0F               rrca
127+  BEC3 0F               rrca                    ; divide by 8
128+  BEC4 ED 5B 0D A7      ld de,(screen_offset)          ; load the screen offset, this is in rows
129+  BEC8 93               sub e
130+  BEC9 F5               push af
131+  BECA CD BD A5         call buffer_marklineforupdate  ; store current row in updated lines
132+  BECD F1               pop af
133+  BECE 3C               inc a
134+  BECF CD BD A5         call buffer_marklineforupdate  ; store line beneath
135+  BED2 C9               ret
136+  BED3
137+  BED3              ;
138+  BED3              ; Falls a rock one pixel, checks the next square down to see if it is empty, if not, stop falling
139+  BED3              ; bc - coord of current rock graphic on screen
140+  BED3              ; ix - memory location of current rock in rock list, currently at the 3rd position (rock state)
141+  BED3              ;
142+  BED3              rocks_fall:
143+  BED3 DD 2B            dec ix
144+  BED5 DD 2B            dec ix              ; decrease ix back to coords
145+  BED7 ED 43 47 BE      ld (rocks_tmp2),bc  ; store original coords
146+  BEDB 3E 03            ld a,3              ; move this number of pixels
147+  BEDD              rocks_fall1:
148+  BEDD 08               ex af,af'
149+  BEDE DD 4E 00 DD      ld bc,(ix)          ; get current coords
149+  BEE2 46 01
150+  BEE4 CD 29 A9         call sprites_scadd  ; get the memory of the coords into de
151+  BEE7 14               inc d               ; add 256 to get next row
152+  BEE8 1A               ld a,(de)           ; get the contents of the next row
153+  BEE9 FE 00            cp 0
154+  BEEB C2 47 BF         jp nz,rocks_fall3    ; move the rock if the row is empty
155+  BEEE 0C               inc c               ; increment the vertical
156+  BEEF DD 71 00 DD      ld (ix),bc          ; store the new coords
156+  BEF3 70 01
157+  BEF5 79               ld a,c              ; get the vertical coord into a
158+  BEF6 E6 07            and 7               ; divisible by 8?
159+  BEF8 FE 00            cp 0
160+  BEFA C2 15 BF         jp nz,rocks_fall4   ; if not, carry on
161+  BEFD CD 38 A8         call screen_getattraddressfromscreencoords ; get the attr address into de
162+  BF00 62 6B            ld hl,de
163+  BF02 36 42            ld (hl),66          ; load this square with the yellow colour
164+  BF04 DD 4E 00 DD      ld bc,(ix)
164+  BF08 46 01
165+  BF0A 79               ld a,c              ; get vertical
166+  BF0B D6 08            sub 8               ; look up one square
167+  BF0D 4F               ld c,a              ; put a back in c
168+  BF0E CD 38 A8         call screen_getattraddressfromscreencoords ; get the attr address into de
169+  BF11 62 6B            ld hl,de
170+  BF13 36 46            ld (hl),70          ; load this square with the yellow colour
171+  BF15              rocks_fall4:
172+  BF15 08               ex af,af'
173+  BF16 3D               dec a
174+  BF17 FE 00            cp 0
175+  BF19 C2 DD BE         jp nz,rocks_fall1   ; do another pixel if needed
176+  BF1C              rocks_fall2:
177+  BF1C 3E 09            ld a,9              ; rock graphic
178+  BF1E ED 4B 47 BE      ld bc,(rocks_tmp2)  ; get the original coords
179+  BF22 CD 8F A8         call screen_getblock     ; get the memory into hl
180+  BF25 CD E6 A8         call sprites_drawsprite  ; draw the sprite - over the top of the current one
181+  BF28 3E 09            ld a,9
182+  BF2A DD 4E 00 DD      ld bc,(ix)          ; get the new coords
182+  BF2E 46 01
183+  BF30 CD 8F A8         call screen_getblock     ; get the memory into hl
184+  BF33 CD E6 A8         call sprites_drawsprite  ; draw the sprite - over the top of the current one
185+  BF36 DD 4E 00 DD      ld bc,(ix)          ; get the coords again
185+  BF3A 46 01
186+  BF3C CD 6C BF         call rocks_checkforplayer ; check to see if we hit a player
187+  BF3F DD 23            inc ix
188+  BF41 DD 23            inc ix                  ; get ix back to state
189+  BF43 CD 5C BF         call rocks_makesound
190+  BF46 C9               ret
191+  BF47              rocks_fall3:
192+  BF47 3E 00            ld a,0              ; set the state to fell
193+  BF49 DD 77 02         ld (ix+2),a           ; store the falling state
194+  BF4C DD 4E 00 DD      ld bc,(ix)          ; get the coords
194+  BF50 46 01
195+  BF52 CD 38 A8         call screen_getattraddressfromscreencoords ; get the attr address into de
196+  BF55 62 6B            ld hl,de
197+  BF57 36 42            ld (hl),66
198+  BF59 C3 1C BF         jp rocks_fall2      ; rejoin main loop
199+  BF5C
200+  BF5C              ;
201+  BF5C              ; Makes the rock sound if we're no longer falling, and if we didn't hit a player
202+  BF5C              ;
203+  BF5C              rocks_makesound:
204+  BF5C DD 7E 00         ld a,(ix)           ; get the state
205+  BF5F FE 00            cp 0
206+  BF61 C0               ret nz              ; if we haven't fallen, don't do anything
207+  BF62 21 36 B9         ld hl,player+11
208+  BF65 7E               ld a,(hl)
209+  BF66 FE 01            cp 1
210+  BF68 C4 14 AD         call nz, sound_rockfell ; only make sound if didn't kill player
211+  BF6B C9               ret
212+  BF6C
213+  BF6C              ;
214+  BF6C              ; Checks to see if the rock is hitting a player
215+  BF6C              ; Inputs:
216+  BF6C              ; bc - coords of rock we're checking
217+  BF6C              rocks_checkforplayer:
218+  BF6C ED 5B 2B B9      ld de,(player)       ; get the player coords
219+  BF70 7B               ld a,e               ; get the vert coord first
220+  BF71 91               sub c                ; subtract the rock vertical coord from players
221+  BF72 FE 08            cp 8                 ; the rock will only hit a player if the player is directly underneath, so this must be 8
222+  BF74 C0               ret nz               ; if not, hasn't hit
223+  BF75 7A               ld a,d               ; get the player horiz coord
224+  BF76 90               sub b                ; subtract rock coord
225+  BF77 C6 07            add 7                ; add max distance
226+  BF79 FE 0D            cp 13                ; compare to 13? if carry flag set, they've hit
227+  BF7B DA 7F BF         jp c,rocks_checkforplayer0
228+  BF7E C9               ret
229+  BF7F              rocks_checkforplayer0:
230+  BF7F ED 43 49 BE      ld (rocks_killerrock),bc; store the coords of the killer rock
231+  BF83 CD 19 BA         call player_crushplayer ; if so, jump out
232+  BF86 C9               ret
233+  BF87
234+  BF87              ;
235+  BF87              ; Wobbles a rocks
236+  BF87              ; Inputs:
237+  BF87              ; bc - coord of current rock graphic on screen
238+  BF87              ; ix - memory location of current rock in rock list, currently at the 4th position (wobble count)
239+  BF87              ; a - wobble frame
240+  BF87              rocks_wobble:
241+  BF87 DD 7E 00         ld a,(ix)           ; get the wobble count, which we'll use as frame toggle
242+  BF8A E6 01            and 1               ; is it odd or even, gets 1 or 0
243+  BF8C 1E 09            ld e,9              ; this is the rock frame
244+  BF8E 83               add a,e             ; add the frame toggle
245+  BF8F C5               push bc
246+  BF90 CD 8F A8         call screen_getblock     ; get the memory into hl
247+  BF93 CD E6 A8         call sprites_drawsprite  ; draw the sprite - over the top of the current one
248+  BF96
249+  BF96 DD 7E 00         ld a,(ix)           ; get the frame toggle again
250+  BF99 3D               dec a               ; decrease
251+  BF9A DD 77 00         ld (ix),a           ; store
252+  BF9D
253+  BF9D E6 01            and 1
254+  BF9F 1E 09            ld e,9              ; this is the rock frame
255+  BFA1 83               add a,e             ; add the frame toggle
256+  BFA2 CD 8F A8         call screen_getblock     ; get the memory into hl
257+  BFA5
258+  BFA5 C1               pop bc
259+  BFA6 CD E6 A8         call sprites_drawsprite  ; draw the sprite again with the new frame - next time it will do the opposite
260+  BFA9
261+  BFA9 DD 7E 00         ld a,(ix)           ; get the wobble count back
262+  BFAC FE 00            cp 0
263+  BFAE C0               ret nz              ; if we're not at zero, return
264+  BFAF DD 2B            dec ix              ; otherwise look to state location
265+  BFB1 3E 01            ld a,1              ; set the state to falling
266+  BFB3 DD 77 00         ld (ix),a           ; store the falling state
267+  BFB6 DD 23            inc ix              ; set ix back to location of wobble count, and we're done
268+  BFB8 C9               ret
269+  BFB9
# file closed: game/rocks.asm
 43   BFB9                  include "game\scores.asm"
# file opened: game/scores.asm
  1+  BFB9              ;
  2+  BFB9              ; The score of the current player
  3+  BFB9              ;
  4+  BFB9              scores_current:
  5+  BFB9 04 01 30 30      defb 4,1,'000000',255       ;+2
  5+  BFBD 30 30 30 30
  5+  BFC1 FF
  6+  BFC2
  7+  BFC2              scores_defaultname:
  8+  BFC2 2D 2D 2D         defb '---'
  9+  BFC5
 10+  BFC5              ;
 11+  BFC5              ; The current high score table
 12+  BFC5              ;
 13+  BFC5              scores_table:
 14+  BFC5 03 17 47 41      defb 03,23,'GAM000000',255         ;+0, +2, +5
 14+  BFC9 4D 30 30 30
 14+  BFCD 30 30 30 FF
 15+  BFD1 0C 17 47 41      defb 12,23,'GAM000000',255        ;+12, +14, +17
 15+  BFD5 4D 30 30 30
 15+  BFD9 30 30 30 FF
 16+  BFDD 15 17 47 41      defb 21,23,'GAM000000',255        ;+24, +26, +29
 16+  BFE1 4D 30 30 30
 16+  BFE5 30 30 30 FF
 17+  BFE9
 18+  BFE9              ;
 19+  BFE9              ; Add thousands to the score
 20+  BFE9              ; Inputs:
 21+  BFE9              ; b - number to add
 22+  BFE9              ;
 23+  BFE9              scores_addthousands:
 24+  BFE9 21 BD BF         ld hl,scores_current+4
 25+  BFEC CD 16 C0         call scores_update
 26+  BFEF C9               ret
 27+  BFF0
 28+  BFF0              ;
 29+  BFF0              ; Prints the score to screen
 30+  BFF0              ;
 31+  BFF0              scores_printscore:
 32+  BFF0 3A FD B8         ld a,(game_currentplayer)   ; get current player
 33+  BFF3 21 B9 BF         ld hl,scores_current
 34+  BFF6 FE 01            cp 1
 35+  BFF8 C2 00 C0         jp nz, score_printscore0    ; if not player 1
 36+  BFFB 36 04            ld (hl),4       ; set position for player 1
 37+  BFFD C3 02 C0         jp score_printscore1
 38+  C000              score_printscore0:
 39+  C000 36 16            ld (hl),22       ; set position for player 2
 40+  C002              score_printscore1:
 41+  C002 21 B9 BF         ld hl,scores_current
 42+  C005 CD BD 84         call string_print
 43+  C008 C9               ret
 44+  C009
 45+  C009              ;
 46+  C009              ; Prints both scores to screen
 47+  C009              ;
 48+  C009              scores_printscores:
 49+  C009 21 01 BA         ld hl,player1_score
 50+  C00C CD BD 84         call string_print
 51+  C00F 21 0A BA         ld hl,player2_score
 52+  C012 CD BD 84         call string_print
 53+  C015 C9               ret
 54+  C016
 55+  C016              ;
 56+  C016              ; Updates the current score.
 57+  C016              ; Inputs:
 58+  C016              ; hl - memory location of the score column
 59+  C016              ; b - number to add
 60+  C016              ;
 61+  C016              scores_update:
 62+  C016 7E               ld a,(hl)           ; current value of digit.
 63+  C017 80               add a,b             ; add points to this digit.
 64+  C018 77               ld (hl),a           ; place new digit back in string.
 65+  C019 FE 3A            cp 58               ; more than ASCII value '9'?
 66+  C01B D8               ret c               ; no - relax.
 67+  C01C D6 0A            sub 10              ; subtract 10.
 68+  C01E 77               ld (hl),a           ; put new character back in string.
 69+  C01F              scores_update0:
 70+  C01F 2B               dec hl              ; previous character in string.
 71+  C020 34               inc (hl)            ; up this by one.
 72+  C021 7E               ld a,(hl)           ; what's the new value?
 73+  C022 FE 3A            cp 58               ; gone past ASCII nine?
 74+  C024 D8               ret c               ; no, scoring done.
 75+  C025 D6 0A            sub 10              ; down by ten.
 76+  C027 77               ld (hl),a           ; put it back
 77+  C028 C3 1F C0         jp scores_update0   ; go round again.
 78+  C02B
 79+  C02B
 80+  C02B              ;
 81+  C02B              ; Displays the high score table at the bottom of the screen
 82+  C02B              ;
 83+  C02B              scores_showtable:
 84+  C02B 21 C5 BF         ld hl, scores_table
 85+  C02E CD BD 84         call string_print
 86+  C031 21 D1 BF         ld hl, scores_table+12
 87+  C034 CD BD 84         call string_print
 88+  C037 21 DD BF         ld hl, scores_table+24
 89+  C03A CD BD 84         call string_print
 90+  C03D C9               ret
 91+  C03E
 92+  C03E              ;
 93+  C03E              ; Place to store the current position we're checking
 94+  C03E              ;
 95+  C03E              scores_highscoretmp:
 96+  C03E 00               defb 0
 97+  C03F
 98+  C03F              ;
 99+  C03F              ; Updates the highscore table. Start at bottom score. Work way from left. Compare each digit. If current is higher than one we're checking,
100+  C03F              ; copy checking one down (or erase) then copy current over that one. Then move up one and do the same
101+  C03F              ;
102+  C03F              scores_processhighscores:
103+  C03F 21 3E C0         ld hl,scores_highscoretmp
104+  C042 36 00            ld (hl),0  ; load up the tracking byte with 0 (ie, not on the table)
105+  C044 3E 1D            ld a,29
106+  C046              scores_processhighscores3:
107+  C046 21 C5 BF         ld hl,scores_table          ; position of first score column
108+  C049 5F               ld e,a
109+  C04A 16 00            ld d,0
110+  C04C 19               add hl,de
111+  C04D 08               ex af,af'                   ; store a for later
112+  C04E 11 BB BF         ld de,scores_current+2      ; position of current score column
113+  C051 06 06            ld b,6                      ; times to loop
114+  C053              scores_processhighscores0:
115+  C053 7E               ld a,(hl)
116+  C054 4F               ld c,a                      ; get first score column
117+  C055 1A               ld a,(de)                   ; get first current column
118+  C056 B9               cp c                        ; compare current with first
119+  C057 DA 68 C0         jp c,scores_processhighscores4  ; if c is bigger, then this is not a higher score, so end
120+  C05A 23               inc hl
121+  C05B 13               inc de                      ; move to next column
122+  C05C 10 F5            djnz scores_processhighscores0 ; loop
123+  C05E 08               ex af,af'                     ; still here, so must be bigger
124+  C05F 32 3E C0         ld (scores_highscoretmp),a  ; store the position indicator in the tracking byte
125+  C062 0E 0C            ld c,12
126+  C064 91               sub c
127+  C065 D2 46 C0         jp nc,scores_processhighscores3 ; if the place we're looking is less than zero, we've gone to far, so continue, otherwise go again
128+  C068              scores_processhighscores4
129+  C068 CD 6C C0         call scores_updatehighscores
130+  C06B C9               ret
131+  C06C
132+  C06C              ;
133+  C06C              ; Update score table
134+  C06C              ;
135+  C06C              scores_updatehighscores:
136+  C06C 3A 3E C0         ld a,(scores_highscoretmp)  ; get the place we want to overwrite
137+  C06F FE 00            cp 0
138+  C071 C8               ret z                       ; if this is 0, didn't get a high score
139+  C072 FE 1D            cp 29                       ; check against 29... if it's equal, we don't want to copy the current score down one
140+  C074 CA A7 C0         jp z, scores_updatehighscores3
141+  C077                                              ; copy old score over one below, if not first
142+  C077 21 C5 BF         ld hl,scores_table
143+  C07A 11 11 00         ld de,17                    ; start at second score, because this is the first one we'd ever need to copy...
144+  C07D 19               add hl,de                   ; position of first column
145+  C07E 2B               dec hl
146+  C07F 2B               dec hl
147+  C080 2B               dec hl
148+  C081 E5               push hl
149+  C082 11 0C 00         ld de,12
150+  C085 19               add hl,de                   ; get position of next score
151+  C086 54 5D            ld de,hl
152+  C088 E1               pop hl                      ; get hl back
153+  C089 01 09 00         ld bc,9
154+  C08C ED B0            ldir
155+  C08E FE 11            cp 17                       ; see if we're copying into the second place slot (17 memory offset). If so, stop copying back the scores
156+  C090 CA A7 C0         jp z,scores_updatehighscores3
157+  C093 21 C5 BF         ld hl,scores_table
158+  C096 11 02 00         ld de,2                    ; ... otherwise, copy back the first score
159+  C099 19               add hl,de                   ; position of first column
160+  C09A E5               push hl
161+  C09B 11 0C 00         ld de,12
162+  C09E 19               add hl,de                   ; get position of next score
163+  C09F 54 5D            ld de,hl
164+  C0A1 E1               pop hl                      ; get hl back
165+  C0A2 01 09 00         ld bc,9
166+  C0A5 ED B0            ldir
167+  C0A7              scores_updatehighscores3:
168+  C0A7 06 06            ld b,6                      ; now overwrite
169+  C0A9 21 C5 BF         ld hl,scores_table
170+  C0AC 16 00            ld d,0
171+  C0AE 5F               ld e,a
172+  C0AF 19               add hl,de                   ; position of first column
173+  C0B0 08               ex af,af'
174+  C0B1 11 BB BF         ld de,scores_current+2      ; position of current score column
175+  C0B4              scores_updatehighscores2:
176+  C0B4 1A               ld a,(de)
177+  C0B5 77               ld (hl),a
178+  C0B6 23               inc hl
179+  C0B7 13               inc de
180+  C0B8 10 FA            djnz scores_updatehighscores2
181+  C0BA 11 09 00         ld de,9
182+  C0BD ED 52            sbc hl,de
183+  C0BF 54 5D            ld de,hl                    ; get back to start of entry
184+  C0C1 21 C2 BF         ld hl,scores_defaultname    ; still need to overwrite the name
185+  C0C4 01 03 00         ld bc,3                      ; 3 chars to copy
186+  C0C7 ED B0            ldir
187+  C0C9 C9               ret
# file closed: game/scores.asm
 44   C0CA                  include "game\diamonds.asm"
# file opened: game/diamonds.asm
  1+  C0CA              diamonds_tmp:
  2+  C0CA 00               defb 0
  3+  C0CB
  4+  C0CB              ;
  5+  C0CB              ; Holds the number of thousands for the current gem type
  6+  C0CB              ;
  7+  C0CB              diamonds_score:
  8+  C0CB 00               defb 0
  9+  C0CC
 10+  C0CC              ;
 11+  C0CC              ; Changes the attribute of gem and diamond cells based on the frame count
 12+  C0CC              ; Inputs:
 13+  C0CC              ; hl - memory location of gem type
 14+  C0CC              diamonds_twinkle_type:
 15+  C0CC CD 21 B9         call game_getcurrentframe       ; get current frame number
 16+  C0CF E6 07            and 7                           ; want a number from 0-7
 17+  C0D1 C6 40            add 64                          ; add to 60 to get attr colour
 18+  C0D3              diamonds_twinkle_type0:
 19+  C0D3 4E 23 46 2B      ld bc,(hl)                      ; get coords into bc
 20+  C0D7 08               ex af, af'
 21+  C0D8 79               ld a,c                          ; load c into a
 22+  C0D9 FE FF            cp 255                          ; is this the end?
 23+  C0DB CA F8 C0         jp z,diamonds_twinkle_type1           ; step out if so
 24+  C0DE 23               inc hl
 25+  C0DF 23               inc hl
 26+  C0E0 7E               ld a,(hl)                       ; check the state, don't process if collected
 27+  C0E1 FE 01            cp 1
 28+  C0E3 CA F9 C0         jp z,diamonds_twinkle_type2           ; step out if so
 29+  C0E6 CD 38 C1         call diamonds_checkforplayer    ; check to see if we've collided with player
 30+  C0E9 DC 00 C1         call c,diamonds_collect     ; we collided
 31+  C0EC 23               inc hl
 32+  C0ED 08               ex af,af'
 33+  C0EE 5E 23 56 2B      ld de,(hl)                      ; get the memory location into de
 34+  C0F2 12               ld (de),a                       ; set the value of attr
 35+  C0F3 23               inc hl
 36+  C0F4 23               inc hl                          ; move to next diamond
 37+  C0F5 C3 D3 C0         jp diamonds_twinkle_type0
 38+  C0F8              diamonds_twinkle_type1:
 39+  C0F8 C9               ret
 40+  C0F9              diamonds_twinkle_type2:
 41+  C0F9 23               inc hl                          ; do stuff the we would have done anyway to get to next gem
 42+  C0FA 23               inc hl
 43+  C0FB 23               inc hl
 44+  C0FC 08               ex af,af'
 45+  C0FD C3 D3 C0         jp diamonds_twinkle_type0       ; rejoin main loop
 46+  C100
 47+  C100              ;
 48+  C100              ; Collect the diamond we collided with
 49+  C100              ; Inputs:
 50+  C100              ; hl - memory location of current diamond, currently on state
 51+  C100              ; Output:
 52+  C100              ; a - 70 - for yellow on black
 53+  C100              diamonds_collect:
 54+  C100 36 01            ld (hl),1                       ; collected
 55+  C102 E5               push hl
 56+  C103 2B               dec hl
 57+  C104 2B               dec hl
 58+  C105 4E 23 46 2B      ld bc,(hl)                      ; get the coords
 59+  C109 CD 5B A8         call screen_getscreencoordsfromcharcoords ; get the screen coords into bc
 60+  C10C ED 5B CA C0      ld de,(diamonds_tmp)            ; tmp stores the offset for this type of gem
 61+  C110 16 00            ld d,0
 62+  C112 21 E3 B2         ld hl,sprites
 63+  C115 19               add hl,de
 64+  C116 CD E6 A8         call sprites_drawsprite     ; call the routine to draw the sprite
 65+  C119 E1               pop hl
 66+  C11A 08               ex af,af'
 67+  C11B 3E 46            ld a,70
 68+  C11D 08               ex af,af'                       ; make sure a is in the af we'll use for the attr
 69+  C11E D9               exx
 70+  C11F 3A CB C0         ld a,(diamonds_score)
 71+  C122 47               ld b,a
 72+  C123 CD E9 BF         call scores_addthousands
 73+  C126 3A CA C0         ld a,(diamonds_tmp)
 74+  C129 FE 40            cp 64                       ; check the gem type offset, if its 64 this is a diamond, so mark the level as completable
 75+  C12B C2 33 C1         jp nz,diamonds_collect0
 76+  C12E 21 38 B9         ld hl,player+13
 77+  C131 36 01            ld (hl),1                   ; mark the player as able to complete the level
 78+  C133              diamonds_collect0:
 79+  C133 CD F7 AC         call sound_gemcollected
 80+  C136 D9               exx
 81+  C137 C9               ret
 82+  C138
 83+  C138              ;
 84+  C138              ; Checks to see if the gem is hitting a player
 85+  C138              ; Inputs:
 86+  C138              ; bc - coords of diamond we're checking
 87+  C138              diamonds_checkforplayer:
 88+  C138 78               ld a,b               ; multiply b by 8
 89+  C139 07               rlca
 90+  C13A 07               rlca
 91+  C13B 07               rlca
 92+  C13C 47               ld b,a
 93+  C13D ED 5B 2B B9      ld de,(player)       ; get the player coords
 94+  C141 7B               ld a,e               ; get the vert coord first
 95+  C142 90               sub b                ; subtract the diamond vertical coord from players
 96+  C143 C6 04            add 4                ; add the max distance
 97+  C145 FE 09            cp 9                ; compare to max*2+1? if carry flag set, they've hit
 98+  C147 D0               ret nc               ; if not, hasn't hit
 99+  C148 79               ld a,c               ; multiply c by 8
100+  C149 07               rlca
101+  C14A 07               rlca
102+  C14B 07               rlca
103+  C14C 4F               ld c,a
104+  C14D 7A               ld a,d               ; get the player horiz coord
105+  C14E 91               sub c                ; subtract rock coord
106+  C14F C6 04            add 4                ; add max distance
107+  C151 FE 09            cp 9                ; compare to max*2+1? if carry flag set, they've hit
108+  C153 D0               ret nc
109+  C154 3E 00            ld a,0
110+  C156 C9               ret
111+  C157
112+  C157
113+  C157              ;
114+  C157              ; Initialise diamonds and gems
115+  C157              ;
116+  C157              diamonds_twinkle
117+  C157 21 CB C0         ld hl,diamonds_score
118+  C15A 36 02            ld (hl),2         ; store the score we'll add
119+  C15C 21 CA C0         ld hl,diamonds_tmp
120+  C15F 36 40            ld (hl),64         ; store the location the diamond sprite
121+  C161 21 5E B2         ld hl, level01diamonds
122+  C164 CD CC C0         call diamonds_twinkle_type
123+  C167 21 CB C0         ld hl,diamonds_score
124+  C16A 36 01            ld (hl),1         ; store the score we'll add
125+  C16C 21 CA C0         ld hl,diamonds_tmp
126+  C16F 36 70            ld (hl),112         ; store the location the gem sprite
127+  C171 21 6E B2         ld hl, level01gems
128+  C174 CD CC C0         call diamonds_twinkle_type
129+  C177 C9               ret
130+  C178
131+  C178              ;
132+  C178              ; Initialise diamonds and gems
133+  C178              ;
134+  C178              diamonds_init:
135+  C178 21 5E B2         ld hl, level01diamonds
136+  C17B CD 85 C1         call diamonds_init_type
137+  C17E 21 6E B2         ld hl, level01gems
138+  C181 CD 85 C1         call diamonds_init_type
139+  C184 C9               ret
140+  C185
141+  C185              ;
142+  C185              ; Initialise diamonds or gems, get memory addresses
143+  C185              ; Inputs:
144+  C185              ; hl - memory location
145+  C185              diamonds_init_type:
146+  C185 4E               ld c,(hl)                      ; get coords into c
147+  C186 79               ld a,c                          ; load c into add
148+  C187 FE FF            cp 255                          ; is this the end?
149+  C189 CA A0 C1         jp z,diamonds_init_type1             ; step out if so
150+  C18C 23               inc hl
151+  C18D 46               ld b,(hl)                       ; get coords into b
152+  C18E E5               push hl
153+  C18F CD 08 A8         call screen_getcellattradress ; get memory of attr for this diamond into de
154+  C192 E1               pop hl
155+  C193 23               inc hl                          ; move to state
156+  C194 36 00            ld (hl),0
157+  C196 23               inc hl                          ; move to memory
158+  C197 73 23 72 2B      ld (hl),de                      ; store the memory location
159+  C19B 23               inc hl                          ; move to next diamond
160+  C19C 23               inc hl
161+  C19D C3 85 C1         jp diamonds_init_type
162+  C1A0              diamonds_init_type1:
163+  C1A0 C9               ret
# file closed: game/diamonds.asm
 45   C1A1                  include "game\missiles.asm"
# file opened: game/missiles.asm
  1+  C1A1              ;
  2+  C1A1              ; Controls when missiles fall
  3+  C1A1              ;
  4+  C1A1              missiles_count:
  5+  C1A1 00               defb 0
  6+  C1A2
  7+  C1A2              ;
  8+  C1A2              ; A structure of falling missiles
  9+  C1A2              ; Assume we'll never have more than 4 falling at any one time
 10+  C1A2              ; (1,2 - 16 bit memory location for missile graphic),state (0 fell, 1 falling)
 11+  C1A2              ;
 12+  C1A2              missiles_falling:
 13+  C1A2 00 00 00         defb 0,0,0
 14+  C1A5 00 00 00         defb 0,0,0
 15+  C1A8 00 00 00         defb 0,0,0
 16+  C1AB 00 00 00         defb 0,0,0
 17+  C1AE
 18+  C1AE              ;
 19+  C1AE              ; Zeroes the state of each missile
 20+  C1AE              ;
 21+  C1AE              missiles_init:
 22+  C1AE 06 0C            ld b,12
 23+  C1B0 21 E5 B1         ld hl,level01missiles
 24+  C1B3              missiles_init0:
 25+  C1B3 23               inc hl
 26+  C1B4 23               inc hl
 27+  C1B5 36 00            ld (hl),0               ; set the state to zero
 28+  C1B7 23               inc hl
 29+  C1B8 23               inc hl
 30+  C1B9 23               inc hl
 31+  C1BA 10 F7            djnz missiles_init0
 32+  C1BC 06 04            ld b,4                  ; reset four falling missiles
 33+  C1BE 21 A2 C1         ld hl,missiles_falling
 34+  C1C1              missiles_init1:
 35+  C1C1 36 00            ld (hl),0
 36+  C1C3 23               inc hl
 37+  C1C4 36 00            ld (hl),0
 38+  C1C6 23               inc hl
 39+  C1C7 36 00            ld (hl),0
 40+  C1C9 23               inc hl
 41+  C1CA 10 F5            djnz missiles_init1
 42+  C1CC C9               ret
 43+  C1CD
 44+  C1CD              ;
 45+  C1CD              ; Runs each frame and checks if a missile can fall, then selects one at random and adds to the falling missiles
 46+  C1CD              ; Processes any already falling missiles
 47+  C1CD              ;
 48+  C1CD              missiles_process:
 49+  C1CD 3A 39 B9         ld a,(player_location)
 50+  C1D0 FE 01            cp 1
 51+  C1D2 C2 45 C2         jp nz, missiles_process0                ; if not 1 we're not in the cavern so no need to make any more fall
 52+  C1D5 21 38 B9         ld hl,player+13
 53+  C1D8 7E               ld a,(hl)                               ; check if player has collected a diamond
 54+  C1D9 FE 01            cp 1
 55+  C1DB C2 45 C2         jp nz, missiles_process0                ; don't activate if not
 56+  C1DE 21 A1 C1         ld hl,missiles_count
 57+  C1E1 7E               ld a,(hl)                   ; get the missiles count
 58+  C1E2 3C               inc a
 59+  C1E3 FE 32            cp 50                                   ; have we reached the count yet
 60+  C1E5 CA EC C1         jp z,missiles_process2                 ; if not, don't activate a new one
 61+  C1E8 77               ld (hl),a                               ; store the updated count, and continue without activating
 62+  C1E9 C3 45 C2         jp missiles_process0
 63+  C1EC              missiles_process2:
 64+  C1EC 36 00            ld (hl),0                               ; zero the counter
 65+  C1EE 1E 0C            ld e,12
 66+  C1F0 CD D6 80         call utilities_randomupper              ; get random number from 0 to 11
 67+  C1F3 11 0A 00         ld de,10
 68+  C1F6 CD 3A 80         call utilities_multiply                 ; multiple random number by 10
 69+  C1F9 54 5D            ld de,hl                                ; this is the offset for the random missile
 70+  C1FB DD 21 E5 B1      ld ix,level01missiles                   ; load the location of the missile definitions
 71+  C1FF DD 19            add ix,de                               ; get to location of missile
 72+  C201 DD 7E 02         ld a,(ix+2)
 73+  C204 FE 00            cp 0
 74+  C206 CA 16 C2         jp z,missiles_process1                  ; if this missile isn't active, activate it
 75+  C209 11 05 00         ld de,5                                 ; otherwise, check the missile above
 76+  C20C DD 19            add ix,de
 77+  C20E DD 7E 02         ld a,(ix+2)
 78+  C211 FE 00            cp 0
 79+  C213 C2 45 C2         jp nz,missiles_process0                 ; if this is active as well, the player got lucky
 80+  C216              missiles_process1:                          ; activate a missile
 81+  C216 DD 36 02 01      ld (ix+2),1                               ; mark this missile as active
 82+  C21A DD 4E 00 DD      ld bc,(ix)                              ; get char coords from the missile
 82+  C21E 46 01
 83+  C220 78               ld a,b
 84+  C221 ED 5B 0D A7      ld de,(screen_offset)          ; load the screen offset, this is in rows
 85+  C225 93               sub e
 86+  C226 C5               push bc
 87+  C227 CD BD A5         call buffer_marklineforupdate
 88+  C22A C1               pop bc
 89+  C22B CD 5B A8         call screen_getscreencoordsfromcharcoords ; get screen coords into bc
 90+  C22E C5               push bc
 91+  C22F 3E 0C            ld a,12                                 ; inactive missile sprite
 92+  C231 CD 8F A8         call screen_getblock
 93+  C234 CD E6 A8         call sprites_drawsprite                 ; draw the sprite over the old one
 94+  C237 C1               pop bc
 95+  C238 C5               push bc
 96+  C239 3E 14            ld a,20                                 ; active missile sprite
 97+  C23B CD 8F A8         call screen_getblock
 98+  C23E CD E6 A8         call sprites_drawsprite                 ; draw the sprite over the old one
 99+  C241 C1               pop bc
100+  C242 CD DA C2         call missiles_addmissiletofalling
101+  C245              missiles_process0:
102+  C245 CD 49 C2         call missiles_fall
103+  C248 C9               ret
104+  C249
105+  C249              ;
106+  C249              ; Processes falling missiles
107+  C249              ;
108+  C249              missiles_fall:
109+  C249 06 04            ld b,4              ; number of possible falling missiles
110+  C24B DD 21 A2 C1      ld ix,missiles_falling
111+  C24F              missiles_fall0:
112+  C24F C5               push bc
113+  C250 DD 7E 02         ld a,(ix+2)
114+  C253 FE 00            cp 0
115+  C255 CA B4 C2         jp z,missiles_fall1 ; not falling move to next
116+  C258 DD 4E 00 DD      ld bc,(ix)          ; load coords into bc
116+  C25C 46 01
117+  C25E CD 29 A9         call sprites_scadd  ; get the memory of the coords into de
118+  C261 14               inc d               ; add 256 to get next row
119+  C262 1A               ld a,(de)           ; get the contents of the next row
120+  C263 FE 00            cp 0
121+  C265 C2 BE C2         jp nz,missiles_fall2 ; if this is not empty, stop this missile falling
122+  C268 3E 14            ld a,20                                 ; active missile sprite
123+  C26A CD 8F A8         call screen_getblock
124+  C26D CD E6 A8         call sprites_drawsprite                 ; draw the sprite over the old one
125+  C270 DD 4E 00 DD      ld bc,(ix)          ; load coords into bc
125+  C274 46 01
126+  C276 CD C5 C2         call missiles_storeupdatedlines
127+  C279 DD 4E 00 DD      ld bc,(ix)          ; load coords into bc
127+  C27D 46 01
128+  C27F 0C               inc c               ; move down one pixel
129+  C280 DD 71 00 DD      ld (ix),bc          ; store the new coords
129+  C284 70 01
130+  C286 3E 14            ld a,20                                 ; active missile sprite
131+  C288 CD 8F A8         call screen_getblock
132+  C28B CD E6 A8         call sprites_drawsprite                 ; draw the sprite
133+  C28E DD 4E 00 DD      ld bc,(ix)          ; load coords into bc
133+  C292 46 01
134+  C294 79               ld a,c              ; get the vertical coord into a
135+  C295 E6 07            and 7               ; divisible by 8?
136+  C297 FE 00            cp 0
137+  C299 C2 B4 C2         jp nz,missiles_fall1   ; if not, carry on
138+  C29C CD 38 A8         call screen_getattraddressfromscreencoords ; get the attr address into de
139+  C29F 62 6B            ld hl,de
140+  C2A1 36 43            ld (hl),67          ; load this square with the magenta colour
141+  C2A3 DD 4E 00 DD      ld bc,(ix)
141+  C2A7 46 01
142+  C2A9 79               ld a,c              ; get vertical
143+  C2AA D6 08            sub 8               ; look up one square
144+  C2AC 4F               ld c,a              ; put a back in c
145+  C2AD CD 38 A8         call screen_getattraddressfromscreencoords ; get the attr address into de
146+  C2B0 62 6B            ld hl,de
147+  C2B2 36 46            ld (hl),70          ; load this square with the yellow colour
148+  C2B4              missiles_fall1:         ; hl at state
149+  C2B4 DD 23            inc ix
150+  C2B6 DD 23            inc ix
151+  C2B8 DD 23            inc ix              ; get to next missile
152+  C2BA C1               pop bc
153+  C2BB 10 92            djnz missiles_fall0
154+  C2BD C9               ret
155+  C2BE              missiles_fall2:
156+  C2BE DD 36 02 00      ld (ix+2),0
157+  C2C2 C3 B4 C2         jp missiles_fall1   ; rejoin the loop
158+  C2C5
159+  C2C5              ;
160+  C2C5              ; Stores the updated rows associated with the missiles
161+  C2C5              ; Inputs:
162+  C2C5              ; bc - coords
163+  C2C5              ;
164+  C2C5              missiles_storeupdatedlines:
165+  C2C5 79               ld a,c                  ; get the missile block coords of current block
166+  C2C6 E6 F8            and 248                 ; find closest multiple of eight
167+  C2C8 0F               rrca
168+  C2C9 0F               rrca
169+  C2CA 0F               rrca                    ; divide by 8
170+  C2CB ED 5B 0D A7      ld de,(screen_offset)          ; load the screen offset, this is in rows
171+  C2CF 93               sub e
172+  C2D0 F5               push af
173+  C2D1 CD BD A5         call buffer_marklineforupdate  ; store current row in updated lines
174+  C2D4 F1               pop af
175+  C2D5 3C               inc a
176+  C2D6 CD BD A5         call buffer_marklineforupdate  ; store line beneath
177+  C2D9 C9               ret
178+  C2DA
179+  C2DA              ;
180+  C2DA              ; Adds the missile to the structure that tracks falling missile
181+  C2DA              ; Inputs:
182+  C2DA              ; bc - coords of missile, c vert
183+  C2DA              missiles_addmissiletofalling:
184+  C2DA C5               push bc             ; store the coords
185+  C2DB 11 A2 C1         ld de,missiles_falling
186+  C2DE 06 04            ld b,4              ; number of possible falling missiles
187+  C2E0              missiles_addmissiletofalling0:
188+  C2E0 13               inc de
189+  C2E1 13               inc de              ; move three along to get the state
190+  C2E2 1A               ld a,(de)           ; load the state
191+  C2E3 FE 00            cp 0                ; check if this is not falling
192+  C2E5 C2 F6 C2         jp nz,missiles_addmissiletofalling1 ; continue the loop if not 0
193+  C2E8 3E 01            ld a,1
194+  C2EA 12               ld (de),a           ; set the state to falling
195+  C2EB 1B               dec de              ; move back coords
196+  C2EC C1               pop bc              ; get back coords
197+  C2ED 78               ld a,b
198+  C2EE 12               ld (de),a           ; store the vertical
199+  C2EF 1B               dec de
200+  C2F0 79               ld a,c
201+  C2F1 12               ld (de),a           ; store the horizontal
202+  C2F2 C5               push bc
203+  C2F3 C3 F9 C2         jp missiles_addmissiletofalling2 ; done
204+  C2F6              missiles_addmissiletofalling1:
205+  C2F6 13               inc de              ; move memory along to next rock
206+  C2F7 10 E7            djnz missiles_addmissiletofalling0 ; try the next missile
207+  C2F9              missiles_addmissiletofalling2: ; done, return
208+  C2F9 C1               pop bc              ; to tidy up
209+  C2FA C9               ret
# file closed: game/missiles.asm
 46   C2FB
 47   C2FB              ;===========================================================================
 48   C2FB              ; main routine - the code execution starts here.
 49   C2FB              ; Sets up the new interrupt routine, the memory
 50   C2FB              ; banks and jumps to the start loop.
 51   C2FB              ;===========================================================================
 52   C2FB              main:
 53   C2FB
 54   C2FB                  ; Draw the title screen
 55   C2FB              main_titlescreen:
 56   C2FB CD 4F A9         call titlescreen_show
 57   C2FE CD 70 B9         call player_init_gamestart
 58   C301
 59   C301              main_lifestart:
 60   C301
 61   C301 CD 8E B9         call player_init_lifestart
 62   C304
 63   C304 CD B3 AA         call lifescreen_draw        ; show the lives remaining screen
 64   C307
 65   C307 CD 00 80         call init_start
 66   C30A CD 28 A7         call screen_draw
 67   C30D CD 86 A6         call buffer_allbuffertoscreen
 68   C310 CD AE C1         call missiles_init
 69   C313 CD 31 BB         call ship_land              ; land the ship
 70   C316 CD 53 BC         call tank_init
 71   C319 CD 78 C1         call diamonds_init
 72   C31C
 73   C31C              mloop:
 74   C31C 76               halt
 75   C31D CD 51 C3         call main_loop_processing
 76   C320
 77   C320                  ;
 78   C320                  ; Check if the player died
 79   C320                  ;
 80   C320 21 35 B9         ld hl,player+10
 81   C323 7E               ld a,(hl)                   ; check if the player died this frame
 82   C324 FE 01            cp 1
 83   C326 C2 3D C3         jp nz,mloop0
 84   C329 CD F5 B9         call player_died        ; do end of life housekeeping
 85   C32C 06 28            ld b,40
 86   C32E CD 82 80         call utilities_pauseforframes
 87   C331 21 34 B9         ld hl,player+9        ; check lives remaining
 88   C334 7E               ld a,(hl)
 89   C335 FE 00            cp 0
 90   C337 CA 79 C3         jp z,main_gameover   ; leave the loop if we're done
 91   C33A C3 01 C3         jp main_lifestart    ; otherwise, start a new life
 92   C33D              mloop0:
 93   C33D                  ;
 94   C33D                  ; Check if the player completed the level
 95   C33D                  ;
 96   C33D 21 38 B9         ld hl,player+13
 97   C340 7E               ld a,(hl)
 98   C341 FE 01            cp 1
 99   C343 C2 1C C3         jp nz,mloop
100   C346 CD FB BA         call player_checkforexit
101   C349 FE 01            cp 1                        ; look at return, if 1, level has been completed
102   C34B CA 7F C3         jp z,main_endlevel          ; jump to level transition screen
103   C34E C3 1C C3         jp mloop                ; start the loop again
104   C351
105   C351
106   C351              main_loop_processing:
107   C351
108   C351 CD 54 A6         call buffer_buffertoscreen  ; copy buffer to screen
109   C354 CD D4 A5         call buffer_clearlist       ; zero the updated lines list
110   C357 CD 3A B9         call player_getlocation     ; figure out where the player is
111   C35A CD 25 BA         call player_drawplayer      ; delete player
112   C35D CD A8 B4         call control_keyboard       ; check keyboard
113   C360 CD 25 BA         call player_drawplayer      ; draw player
114   C363 CD 82 BC         call tank_process           ; prcoess the tank
115   C366 CD 1C BB         call ship_process           ; proces the ship
116   C369 CD 7C BE         call rocks_processrocks     ; process falling rocks
117   C36C CD CD C1         call missiles_process       ; process missiles
118   C36F CD 57 C1         call diamonds_twinkle       ; make the diamonds twinkle
119   C372 CD F0 BF         call scores_printscore      ; update the score on screen
120   C375 CD 12 B9         call game_incrementframe    ; increment the game frame
121   C378
122   C378 C9               ret
123   C379
124   C379              main_gameover:
125   C379 CD 06 AB         call gameover_draw          ; show the game over screen
126   C37C C3 FB C2         jp main_titlescreen         ; go back to title
127   C37F
128   C37F              main_endlevel:
129   C37F CD DB B9         call player_recordcurrentscore
130   C382 CD F4 AB         call endlevel_draw          ; show the end level screen
131   C385 C3 01 C3         jp main_lifestart           ; start a new life
132   C388
133   C388              ;===========================================================================
134   C388              ; Stack.
135   C388              ;===========================================================================
136   C388
137   C388              ; Stack: this area is reserved for the stack
138   C388              STACK_SIZE: equ 100    ; in words
139   C388
140   C388              ; Reserve stack space
141   C388 00 00            defw 0  ; WPMEM, 2
142   C38A              stack_bottom:
143   C38A 00 00 00...      defs    STACK_SIZE*2, 0
144   C452              stack_top:
145   C452 00 00            defw 0  ; WPMEM, 2
146   C454
147   C454                     SAVESNA "ThePit.sna", main
# file closed: main.asm
