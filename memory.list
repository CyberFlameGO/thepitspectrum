# file opened: main.asm
  1   0000                  DEVICE ZXSPECTRUM48
  2   0000
  3   0000                  ORG $8000
  4   8000
  5   8000              ;===========================================================================
  6   8000              ; Persistent watchpoint.
  7   8000              ; Change WPMEMx (remove the 'x' from WPMEMx) below to activate.
  8   8000              ; If you do so the program will hit a breakpoint when it tries to
  9   8000              ; write to the first byte of the 3rd line.
 10   8000              ; When program breaks in the fill_memory sub routine please hover over hl
 11   8000              ; to see that it contains 0x5804 or COLOR_SCREEN+64.
 12   8000              ;===========================================================================
 13   8000
 14   8000              ; WPMEMx 0x5840, 1, w
 15   8000
 16   8000
 17   8000              ;===========================================================================
 18   8000              ; Include modules
 19   8000              ;===========================================================================
 20   8000                  include "init.asm"
# file opened: init.asm
  1+  8000              ;
  2+  8000              ; Set up at start up
  3+  8000              ;
  4+  8000              init_start:
  5+  8000              ; We want a black screen.
  6+  8000
  7+  8000 3E 47            ld a,71             ; white ink (7) on black paper (0),
  8+  8002                                      ; bright (64).
  9+  8002 CD 67 80         call utilities_clearscreen
 10+  8005 32 8D 5C         ld (23693),a        ; set our screen colours.
 11+  8008 AF               xor a               ; quick way to load accumulator with zero.
 12+  8009 CD 9B 22         call 8859           ; set permanent border colours.
 13+  800C
 14+  800C 21 70 A7         ld hl,screen_offset ; reset some temp variables
 15+  800F 36 00            ld (hl),0
 16+  8011 21 71 A7         ld hl,screen_tmp
 17+  8014 36 00            ld (hl),0
 18+  8016 21 A6 A5         ld hl,buffer_tmp
 19+  8019 36 00            ld (hl),0
 20+  801B 23               inc hl
 21+  801C 36 00            ld (hl),0
 22+  801E
 23+  801E CD 41 BB         call game_resetcurrentframe ; reset current frame
 24+  8021
 25+  8021 C9               ret
 26+  8022
 27+  8022              ;
 28+  8022              ;   Start coord
 29+  8022              ;   vert c, horiz b
 30+  8022              init_coord:
 31+  8022 18 30            defb 24,48
 32+  8024
 33+  8024              ;
 34+  8024              ; Number of lives to start
 35+  8024              ;
 36+  8024              init_lives:
 37+  8024 03               defb 3
 38+  8025
 39+  8025              ;
 40+  8025              ; Score to start
 41+  8025              ;
 42+  8025              init_score:
 43+  8025 30 30 30 30      defb '000000'
 43+  8029 30 30
# file closed: init.asm
 21   802B                  include "utilities.asm"
# file opened: utilities.asm
  1+  802B              ; ##########################################################################
  2+  802B              ; Print a character
  3+  802B              ; Inputs:
  4+  802B              ; b - x coord
  5+  802B              ; c - y coord
  6+  802B              ; d - character
  7+  802B              ; e - colour
  8+  802B              ; ##########################################################################
  9+  802B              utilities_print_char:
 10+  802B 7B               ld a,e
 11+  802C 32 8F 5C         ld (23695),a        ; set our temporary screen colours.
 12+  802F 3E 16            ld a,22
 13+  8031 D7               rst 16              ; Calls the Sinclair PRINT AT routine
 14+  8032 78               ld a,b              ; Gets the X co-ordinate
 15+  8033 3D               dec a
 16+  8034 D7               rst 16
 17+  8035 79               ld a,c              ; and the Y co-ordinate
 18+  8036 D7               rst 16              ; So, essentially PRINT AT X,Y; like in BASIC
 19+  8037 7A               ld a,d              ; ASCII code for udg.
 20+  8038 D7               rst 16              ; draw block.
 21+  8039 C9               ret
 22+  803A
 23+  803A
 24+  803A              ;Inputs:
 25+  803A              ;     DE and A are factors
 26+  803A              ;Outputs:
 27+  803A              ;     A is not changed
 28+  803A              ;     B is 0
 29+  803A              ;     C is not changed
 30+  803A              ;     DE is not changed
 31+  803A              ;     HL is the product
 32+  803A              ;Time:
 33+  803A              ;     342+6x
 34+  803A              ;
 35+  803A              utilities_multiply:
 36+  803A 06 08            ld b,8          ;7           7
 37+  803C 21 00 00         ld hl,0         ;10         10
 38+  803F 29               add hl,hl     ;11*8       88
 39+  8040 07               rlca          ;4*8        32
 40+  8041 30 01            jr nc,$+3     ;(12|18)*8  96+6x
 41+  8043 19                   add hl,de   ;--         --
 42+  8044 10 F9            djnz $-5      ;13*7+8     99
 43+  8046 C9               ret             ;10         10
 44+  8047
 45+  8047              utilities_waitforkey:
 46+  8047 21 08 5C         ld hl,23560         ; LAST K system variable.
 47+  804A 36 00            ld (hl),0           ; put null value there.
 48+  804C              utilities_waitforkey0:
 49+  804C 7E               ld a,(hl)           ; new value of LAST K.
 50+  804D FE 00            cp 0                ; is it still zero?
 51+  804F 28 FB            jr z,utilities_waitforkey0           ; yes, so no key pressed.
 52+  8051 C9               ret                 ; key was pressed.
 53+  8052
 54+  8052              ;
 55+  8052              ; Waits number of frames for keypress. If got, returns 1, if not 0
 56+  8052              ; Inputs:
 57+  8052              ; a - number of frames to waits
 58+  8052              ; Ouputs:
 59+  8052              ; e - 0 not pressed, 1 pressed
 60+  8052              utilities_waitforkey_forframes:
 61+  8052 21 08 5C         ld hl,23560         ; LAST K system variable.
 62+  8055 36 00            ld (hl),0           ; put null value there.
 63+  8057 47               ld b,a              ; number of frames to wait
 64+  8058              utilities_waitforkey_forframes0:
 65+  8058 7E               ld a,(hl)           ; new value of LAST K.
 66+  8059 FE 00            cp 0                ; is it still zero?
 67+  805B 28 03            jr z,utilities_waitforkey_forframes1           ; yes, so no key pressed.
 68+  805D 1E 01            ld e,1              ; set the pressed flag
 69+  805F C9               ret                 ; key was pressed.
 70+  8060              utilities_waitforkey_forframes1:
 71+  8060 76               halt                ; wait for frame
 72+  8061 76               halt                ; wait for frame
 73+  8062 10 F4            djnz utilities_waitforkey_forframes0 ; loop again
 74+  8064 1E 00            ld e,0              ; nothing pressed in time
 75+  8066 C9               ret
 76+  8067
 77+  8067              ;
 78+  8067              ; Clears the screen
 79+  8067              ; Inputs:
 80+  8067              ; a - attribute colour
 81+  8067              utilities_clearscreen:
 82+  8067 76               halt
 83+  8068 21 00 58         ld hl,22528         ; attr
 84+  806B 11 01 58         ld de,22529         ; attr+1
 85+  806E 01 FF 02         ld bc,767
 86+  8071 77               ld (hl),a
 87+  8072 ED B0            ldir
 88+  8074
 89+  8074 21 00 40         ld hl, 16384        ;pixels
 90+  8077 11 01 40         ld de, 16385        ;pixels + 1
 91+  807A 01 FF 17         ld bc, 6143         ;pixels area length - 1
 92+  807D 36 00            ld (hl), 0          ;set first byte to '0'
 93+  807F ED B0            ldir                ;copy bytes
 94+  8081
 95+  8081 C9               ret
 96+  8082
 97+  8082              ;
 98+  8082              ; Wait for a number of frames
 99+  8082              ; Inputs:
100+  8082              ; b - number of frames
101+  8082              utilities_pauseforframes:
102+  8082 76               halt
103+  8083 10 FD            djnz utilities_pauseforframes
104+  8085 C9               ret
105+  8086
106+  8086              utilities_readkey:
107+  8086 21 A6 80         LD HL,utilties_keymap              ; Point HL at the keyboard list
108+  8089 16 08            LD D,8                                  ; This is the number of ports (rows) to check
109+  808B 0E FE            LD C,$FE                            ; C is always FEh for reading keyboard ports
110+  808D              utilities_readkey_0:
111+  808D 46               LD B,(HL)                               ; Get the keyboard port address from table
112+  808E 23               INC HL                                  ; Increment to list of keys
113+  808F ED 78            IN A,(C)                                ; Read the row of keys in
114+  8091 E6 1F            AND $1F                                     ; We are only interested in the first five bits
115+  8093 1E 05            LD E,5                                  ; This is the number of keys in the row
116+  8095              utilities_readkey_1:
117+  8095 CB 3F            SRL A                                   ; Shift A right; bit 0 sets carry bit
118+  8097 30 0B            JR NC,utilities_readkey_2   ; If the bit is 0, we've found our key
119+  8099 23               INC HL                                  ; Go to next table address
120+  809A 1D               DEC E                                   ; Decrement key loop counter
121+  809B 20 F8            JR NZ,utilities_readkey_1   ; Loop around until this row finished
122+  809D 15               DEC D                                   ; Decrement row loop counter
123+  809E 20 ED            JR NZ,utilities_readkey_0   ; Loop around until we are done
124+  80A0 A7               AND A                                   ; Clear A (no key found)
125+  80A1 C3 86 80         jp utilities_readkey
126+  80A4              utilities_readkey_2:
127+  80A4 7E               LD A,(HL)                               ; We've found a key at this point; fetch the character code!
128+  80A5 C9               RET
129+  80A6
130+  80A6              utilties_keymap:
131+  80A6 FE 23 5A 58      defb $FE,"#","Z","X","C","V"
131+  80AA 43 56
132+  80AC FD 41 53 44      defb $FD,"A","S","D","F","G"
132+  80B0 46 47
133+  80B2 FB 51 57 45      defb $FB,"Q","W","E","R","T"
133+  80B6 52 54
134+  80B8 F7 31 32 33      defb $F7,"1","2","3","4","5"
134+  80BC 34 35
135+  80BE EF 30 39 38      defb $EF,"0","9","8","7","6"
135+  80C2 37 36
136+  80C4 DF 50 4F 49      defb $DF,"P","O","I","U","Y"
136+  80C8 55 59
137+  80CA BF 23 4C 4B      defb $BF,"#","L","K","J","H"
137+  80CE 4A 48
138+  80D0 7F 20 23 4D      defb $7F," ","#","M","N","B"
138+  80D4 4E 42
139+  80D6
140+  80D6
141+  80D6              ;
142+  80D6              ; Generates a randomish number in the range 0 to e
143+  80D6              ; Inputs:
144+  80D6              ; e - upper value
145+  80D6              ; Outputs:
146+  80D6              ; a - random number
147+  80D6              utilities_randomupper
148+  80D6 3A 17 BB         ld a,(game_framenumber)
149+  80D9 6F               ld l,a
150+  80DA 26 00            ld h,0
151+  80DC 16 00            ld d,0
152+  80DE 42 4B            ld bc,de
153+  80E0              utilities_randomupper0:
154+  80E0 B7               or a
155+  80E1 ED 42            sbc hl,bc
156+  80E3 F2 E0 80         jp p,utilities_randomupper0
157+  80E6 09               add hl,bc
158+  80E7 01 00 00         ld bc,0
159+  80EA 09               add hl,bc
160+  80EB 7D               ld a,l
161+  80EC C9               ret
# file closed: utilities.asm
 22   80ED                  include "strings.asm"
# file opened: strings.asm
  1+  80ED              string_score1:
  2+  80ED 04 00 53 43      defb 4,0,'SCORE1',255
  2+  80F1 4F 52 45 31
  2+  80F5 FF
  3+  80F6              string_scorenumbers1:
  4+  80F6 04 01 30 30      defb 4,1,'000000',255
  4+  80FA 30 30 30 30
  4+  80FE FF
  5+  80FF              string_company:
  6+  80FF 0C 00 43 45      defb 12,0,'CENTURI',255
  6+  8103 4E 54 55 52
  6+  8107 49 FF
  7+  8109              string_credits:
  8+  8109 0C 01 50 4C      defb 12,1,'PLAYER 1',255
  8+  810D 41 59 45 52
  8+  8111 20 31 FF
  9+  8114              string_score2:
 10+  8114 16 00 53 43      defb 22,0,'SCORE2',255
 10+  8118 4F 52 45 32
 10+  811C FF
 11+  811D              string_scorenumbers2:
 12+  811D 16 01 30 30      defb 22,1,'000000',255
 12+  8121 30 30 30 30
 12+  8125 FF
 13+  8126              string_titlescreen_copyright:
 14+  8126 06 15 7F 31      defb 6,21, 127,'1982  CENTURI INC',255
 14+  812A 39 38 32 20
 14+  812E 20 43 45 4E
 14+  8132 54 55 52 49
 14+  8136 20 49 4E 43
 14+  813A FF
 15+  813B
 16+  813B
 17+  813B              string_alttitlescreen_1:
 18+  813B 0C 00 43 52      defb 12,0,'CREDITS 1',255
 18+  813F 45 44 49 54
 18+  8143 53 20 31 FF
 19+  8147              string_alttitlescreen_2:
 20+  8147 00 02 20 20      defb 0,2,'           THE OBJECT',254
 20+  814B 20 20 20 20
 20+  814F 20 20 20 20
 20+  8153 20 54 48 45
 20+  8157 20 4F 42 4A
 20+  815B 45 43 54 FE
 21+  815F 00 03 20 20      defb 0,3,'          OF THIS GAME',254
 21+  8163 20 20 20 20
 21+  8167 20 20 20 20
 21+  816B 4F 46 20 54
 21+  816F 48 49 53 20
 21+  8173 47 41 4D 45
 21+  8177 FE
 22+  8178 00 04 20 20      defb 0,4,'         IS TO DIG DOWN',254
 22+  817C 20 20 20 20
 22+  8180 20 20 20 49
 22+  8184 53 20 54 4F
 22+  8188 20 44 49 47
 22+  818C 20 44 4F 57
 22+  8190 4E FE
 23+  8192 00 05 20 20      defb 0,5,'        TO THE BOTTOM PIT',254
 23+  8196 20 20 20 20
 23+  819A 20 20 54 4F
 23+  819E 20 54 48 45
 23+  81A2 20 42 4F 54
 23+  81A6 54 4F 4D 20
 23+  81AA 50 49 54 FE
 24+  81AE 00 06 20 20      defb 0,6,'               AND',254
 24+  81B2 20 20 20 20
 24+  81B6 20 20 20 20
 24+  81BA 20 20 20 20
 24+  81BE 20 41 4E 44
 24+  81C2 FE
 25+  81C3 00 07 20 20      defb 0,7,'        COLLECT AT LEAST',254
 25+  81C7 20 20 20 20
 25+  81CB 20 20 43 4F
 25+  81CF 4C 4C 45 43
 25+  81D3 54 20 41 54
 25+  81D7 20 4C 45 41
 25+  81DB 53 54 FE
 26+  81DE 00 08 20 20      defb 0,8,'         ONE LARGE JEWEL',254
 26+  81E2 20 20 20 20
 26+  81E6 20 20 20 4F
 26+  81EA 4E 45 20 4C
 26+  81EE 41 52 47 45
 26+  81F2 20 4A 45 57
 26+  81F6 45 4C FE
 27+  81F9 00 09 20 20      defb 0,9,'              THEN',254
 27+  81FD 20 20 20 20
 27+  8201 20 20 20 20
 27+  8205 20 20 20 20
 27+  8209 54 48 45 4E
 27+  820D FE
 28+  820E 00 0A 20 20      defb 0,10,'         RETURN TO SHIP',254
 28+  8212 20 20 20 20
 28+  8216 20 20 20 52
 28+  821A 45 54 55 52
 28+  821E 4E 20 54 4F
 28+  8222 20 53 48 49
 28+  8226 50 FE
 29+  8228 00 0B 20 20      defb 0,11,'         THRU UPPER PIT',255
 29+  822C 20 20 20 20
 29+  8230 20 20 20 54
 29+  8234 48 52 55 20
 29+  8238 55 50 50 45
 29+  823C 52 20 50 49
 29+  8240 54 FF
 30+  8242              string_alttitlescreen_3:
 31+  8242 00 0D 20 20      defb 0,13,'    SINGLE BONUS  5000 POINTS',254
 31+  8246 20 20 53 49
 31+  824A 4E 47 4C 45
 31+  824E 20 42 4F 4E
 31+  8252 55 53 20 20
 31+  8256 35 30 30 30
 31+  825A 20 50 4F 49
 31+  825E 4E 54 53 FE
 32+  8262 00 0E 20 20      defb 0,14,'      COLLECT 1 LARGE JEWEL',254
 32+  8266 20 20 20 20
 32+  826A 43 4F 4C 4C
 32+  826E 45 43 54 20
 32+  8272 31 20 4C 41
 32+  8276 52 47 45 20
 32+  827A 4A 45 57 45
 32+  827E 4C FE
 33+  8280 00 0F 20 20      defb 0,15,'       AND RETURN TO SHIP',254
 33+  8284 20 20 20 20
 33+  8288 20 41 4E 44
 33+  828C 20 52 45 54
 33+  8290 55 52 4E 20
 33+  8294 54 4F 20 53
 33+  8298 48 49 50 FE
 34+  829C 00 11 20 20      defb 0,17,'    DOUBLE BONUS  10000 POINTS',254
 34+  82A0 20 20 44 4F
 34+  82A4 55 42 4C 45
 34+  82A8 20 42 4F 4E
 34+  82AC 55 53 20 20
 34+  82B0 31 30 30 30
 34+  82B4 30 20 50 4F
 34+  82B8 49 4E 54 53
 34+  82BC FE
 35+  82BD 00 12 20 20      defb 0,18,'    COLLECT ALL 3 LARGE JEWELS',254
 35+  82C1 20 20 43 4F
 35+  82C5 4C 4C 45 43
 35+  82C9 54 20 41 4C
 35+  82CD 4C 20 33 20
 35+  82D1 4C 41 52 47
 35+  82D5 45 20 4A 45
 35+  82D9 57 45 4C 53
 35+  82DD FE
 36+  82DE 00 13 20 20      defb 0,19,'       OR   ALL 4 SMALL JEWELS',254
 36+  82E2 20 20 20 20
 36+  82E6 20 4F 52 20
 36+  82EA 20 20 41 4C
 36+  82EE 4C 20 34 20
 36+  82F2 53 4D 41 4C
 36+  82F6 4C 20 4A 45
 36+  82FA 57 45 4C 53
 36+  82FE FE
 37+  82FF 00 15 20 20      defb 0,21,'    TRIPLE BONUS  15000 POINTS',254
 37+  8303 20 20 54 52
 37+  8307 49 50 4C 45
 37+  830B 20 42 4F 4E
 37+  830F 55 53 20 20
 37+  8313 31 35 30 30
 37+  8317 30 20 50 4F
 37+  831B 49 4E 54 53
 37+  831F FE
 38+  8320 00 16 20 20      defb 0,22,'       COLLECT ALL 7 JEWELS',255
 38+  8324 20 20 20 20
 38+  8328 20 43 4F 4C
 38+  832C 4C 45 43 54
 38+  8330 20 41 4C 4C
 38+  8334 20 37 20 4A
 38+  8338 45 57 45 4C
 38+  833C 53 FF
 39+  833E
 40+  833E              string_lifescreen_player:
 41+  833E 0B 00 20 50      defb 11,0,' PLAYER 1 ',255
 41+  8342 4C 41 59 45
 41+  8346 52 20 31 20
 41+  834A FF
 42+  834B              string_lifescreen_lives:
 43+  834B 0B 03 30 20      defb 11,3,48,' MEN LEFT',255
 43+  834F 4D 45 4E 20
 43+  8353 4C 45 46 54
 43+  8357 FF
 44+  8358              string_lifescreen_lastman:
 45+  8358 0C 03 4C 41      defb 12,3,'LAST MAN',255
 45+  835C 53 54 20 4D
 45+  8360 41 4E FF
 46+  8363
 47+  8363              string_gameoverscreen_gameover:
 48+  8363 0B 06 47 41      defb 11,6,'GAME OVER',255
 48+  8367 4D 45 20 4F
 48+  836B 56 45 52 FF
 49+  836F              string_gameoverscreen_copyright:
 50+  836F 07 12 7F 31      defb 7,18,127,'1982 CENTURI INC',255
 50+  8373 39 38 32 20
 50+  8377 43 45 4E 54
 50+  837B 55 52 49 20
 50+  837F 49 4E 43 FF
 51+  8383              string_gameoverscreen_bestscores:
 52+  8383 07 16 42 45      defb 7,22,'BEST SCORES TODAY',255
 52+  8387 53 54 20 53
 52+  838B 43 4F 52 45
 52+  838F 53 20 54 4F
 52+  8393 44 41 59 FF
 53+  8397              string_gameover_credits:
 54+  8397 0C 01 43 52      defb 12,1,'CREDITS 0',255
 54+  839B 45 44 49 54
 54+  839F 53 20 30 FF
 55+  83A3
 56+  83A3              string_highscore_congratulations:
 57+  83A3 08 05 43 4F      defb 8,5,'CONGRATULATIONS',255
 57+  83A7 4E 47 52 41
 57+  83AB 54 55 4C 41
 57+  83AF 54 49 4F 4E
 57+  83B3 53 FF
 58+  83B5              string_highscore_player1:
 59+  83B5 0C 07 50 4C      defb 12,7,'PLAYER 1',255
 59+  83B9 41 59 45 52
 59+  83BD 20 31 FF
 60+  83C0              string_highscore_player2:
 61+  83C0 0C 07 50 4C      defb 12,7,'PLAYER 2',255
 61+  83C4 41 59 45 52
 61+  83C8 20 32 FF
 62+  83CB              string_highscore_youhaveearned:
 63+  83CB 08 0A 59 4F      defb 8,10,'YOU HAVE EARNED',255
 63+  83CF 55 20 48 41
 63+  83D3 56 45 20 45
 63+  83D7 41 52 4E 45
 63+  83DB 44 FF
 64+  83DD              string_highscore_place1:
 65+  83DD 06 0C 54 48      defb 6,12,'THE GREATEST SCORE',255
 65+  83E1 45 20 47 52
 65+  83E5 45 41 54 45
 65+  83E9 53 54 20 53
 65+  83ED 43 4F 52 45
 65+  83F1 FF
 66+  83F2              string_highscore_place2:
 67+  83F2 06 0C 54 48      defb 6,12,'THE 2ND BEST SCORE',255
 67+  83F6 45 20 32 4E
 67+  83FA 44 20 42 45
 67+  83FE 53 54 20 53
 67+  8402 43 4F 52 45
 67+  8406 FF
 68+  8407              string_highscore_place3:
 69+  8407 06 0C 54 48      defb 6,12,'THE 3RD BEST SCORE',255
 69+  840B 45 20 33 52
 69+  840F 44 20 42 45
 69+  8413 53 54 20 53
 69+  8417 43 4F 52 45
 69+  841B FF
 70+  841C              string_highscore_pleaseenter
 71+  841C 03 0F 52 45      defb 3,15,'RECORD YOUR INITIALS BELOW',255
 71+  8420 43 4F 52 44
 71+  8424 20 59 4F 55
 71+  8428 52 20 49 4E
 71+  842C 49 54 49 41
 71+  8430 4C 53 20 42
 71+  8434 45 4C 4F 57
 71+  8438 FF
 72+  8439
 73+  8439              string_endlevel_youhaveearned:
 74+  8439 08 0B 59 4F      defb 8,11,'YOU HAVE EARNED',255
 74+  843D 55 20 48 41
 74+  8441 56 45 20 45
 74+  8445 41 52 4E 45
 74+  8449 44 FF
 75+  844B              string_endlevel_bonus1:
 76+  844B 09 0D 53 49      defb 9,13,'SINGLE BONUS',255
 76+  844F 4E 47 4C 45
 76+  8453 20 42 4F 4E
 76+  8457 55 53 FF
 77+  845A              string_endlevel_bonus2:
 78+  845A 09 0D 44 4F      defb 9,13,'DOUBLE BONUS',255
 78+  845E 55 42 4C 45
 78+  8462 20 42 4F 4E
 78+  8466 55 53 FF
 79+  8469              string_endlevel_bonus3:
 80+  8469 09 0D 54 52      defb 9,13,'TRIPLE BONUS',255
 80+  846D 49 50 4C 45
 80+  8471 20 42 4F 4E
 80+  8475 55 53 FF
 81+  8478              string_endlevel_points1:
 82+  8478 0A 0F 35 30      defb 10,15,'5000 POINTS',255
 82+  847C 30 30 20 50
 82+  8480 4F 49 4E 54
 82+  8484 53 FF
 83+  8486              string_endlevel_points2:
 84+  8486 09 0F 31 30      defb 9,15,'10000 POINTS',255
 84+  848A 30 30 30 20
 84+  848E 50 4F 49 4E
 84+  8492 54 53 FF
 85+  8495              string_endlevel_points3:
 86+  8495 09 0F 31 35      defb 9,15,'15000 POINTS',255
 86+  8499 30 30 30 20
 86+  849D 50 4F 49 4E
 86+  84A1 54 53 FF
 87+  84A4              string_endlevel_anothergo:
 88+  84A4 08 12 48 41      defb 8,18,'HAVE ANOTHER GO',255
 88+  84A8 56 45 20 41
 88+  84AC 4E 4F 54 48
 88+  84B0 45 52 20 47
 88+  84B4 4F FF
 89+  84B6
 90+  84B6              string_zonk:
 91+  84B6 00 00 5A 4F      defb 0,0,'ZONK!',255
 91+  84BA 4E 4B 21 FF
 92+  84BE              ;
 93+  84BE              ; Prints specified string
 94+  84BE              ; Inputs:
 95+  84BE              ; de: pointer to string
 96+  84BE              ; bc: length of string
 97+  84BE              ;
 98+  84BE              ; Print String Data
 99+  84BE              ; First two bytes of string contain X and Y char position, then the string
100+  84BE              ; Individual strings are terminated with 0xFE
101+  84BE              ; End of data is terminated with 0xFF
102+  84BE              ; HL: Address of string
103+  84BE              ;
104+  84BE 5E           string_print:           LD E,(HL)                       ; Fetch the X coordinate
105+  84BF 23                                   INC HL                          ; Increase HL to the next memory location
106+  84C0 56                                   LD D,(HL)                       ; Fetch the Y coordinate
107+  84C1 23                                   INC HL                          ; Increase HL to the next memory location
108+  84C2 CD D5 84                             CALL string_getcharaddress           ; Calculate the screen address (in DE)
109+  84C5 7E           string_print_0:         LD A,(HL)                       ; Fetch the character to print
110+  84C6 23                                   INC HL                          ; Increase HL to the next character
111+  84C7 FE FE                                CP 0xFE                         ; Compare with 0xFE
112+  84C9 28 F3                                JR Z,string_print               ; If it is equal to 0xFE then loop back to print next string
113+  84CB D0                                   RET NC                          ; If it is greater or equal to (carry bit set) then
114+  84CC E5                                   PUSH HL                         ; Push HL on stack (Print_Char will not preserve HL)
115+  84CD CD E5 84                             CALL Print_Char                 ; Print the character
116+  84D0 E1                                   POP HL                          ; Retrieve HL back off the stack
117+  84D1 1C                                   INC E                           ; Go to the next screen address
118+  84D2 18 F1                                JR string_print_0               ; Loop back to print next character
119+  84D4 C9                                   RET
120+  84D5
121+  84D5              ; Get screen address
122+  84D5              ; D = Y character position
123+  84D5              ; E = X character position
124+  84D5              ; Returns address in DE
125+  84D5              ;
126+  84D5 7A           string_getcharaddress:       LD A,D
127+  84D6 E6 07                                AND %00000111
128+  84D8 1F                                   RRA
129+  84D9 1F                                   RRA
130+  84DA 1F                                   RRA
131+  84DB 1F                                   RRA
132+  84DC B3                                   OR E
133+  84DD 5F                                   LD E,A
134+  84DE 7A                                   LD A,D
135+  84DF E6 18                                AND %00011000
136+  84E1 F6 40                                OR %01000000
137+  84E3 57                                   LD D,A
138+  84E4 C9                                   RET                             ; Returns screen address in DE
139+  84E5
140+  84E5              ; Print a single character out
141+  84E5              ; A:  Character to print
142+  84E5              ; DE: Screen address to print character at
143+  84E5              ;
144+  84E5 21 00 3C     Print_Char:             LD HL,0x3C00                    ; Address of character set table in ROM
145+  84E8 06 00                                LD B,0                          ; Set BC to A
146+  84EA 4F                                   LD C,A
147+  84EB E6 FF                                AND 0xFF                        ; Clear the carry bit
148+  84ED CB 11                                RL C                            ; Multiply BC by 8 (shift left 3 times)
149+  84EF CB 10                                RL B
150+  84F1 CB 11                                RL C
151+  84F3 CB 10                                RL B
152+  84F5 CB 11                                RL C
153+  84F7 CB 10                                RL B
154+  84F9 09                                   ADD HL,BC                       ; Get the character address in HL
155+  84FA 0E 08                                LD C,8                          ; Loop counter
156+  84FC D5                                   PUSH DE
157+  84FD 7E           Print_Char_1:           LD A,(HL)                       ; Get the byte from the ROM into A
158+  84FE 12                                   LD (DE),A                       ; Stick A onto the screen
159+  84FF 14                                   INC D                           ; Goto next line on screen
160+  8500 2C                                   INC L                           ; Goto next byte of character
161+  8501 0D                                   DEC C                           ; Decrease the loop counter
162+  8502 20 F9                                JR NZ,Print_Char_1              ; Loop around whilst it is Not Zero (NZ)
163+  8504 D1                                   POP DE
164+  8505 C9                                   RET                             ; Return from the subroutine
# file closed: strings.asm
 23   8506                  include "screen\buffer.asm"
# file opened: screen/buffer.asm
  1+  8506              buffer_buffer:
  2+  8506 00 00 00...      defs 7424                   ; area reserved for screen
  3+  A206
  4+  A206              buffer_attr_buffer:
  5+  A206 00 00 00...      defs 928                    ; attrs buffer area
  6+  A5A6
  7+  A5A6              buffer_tmp:
  8+  A5A6 00 00            defb 0,0                    ; temp area
  9+  A5A8
 10+  A5A8              ;
 11+  A5A8              ; This list stores lines to be updated by the buffer.
 12+  A5A8              ; This is done by half line. Lines are encded with.
 13+  A5A8              ; 00hlllll
 14+  A5A8              ; Where h is the half of the screen (0 or 1), lllll is the line number
 15+  A5A8              buffer_updatedlines:
 16+  A5A8 FF FF FF...      defs 21,255
 17+  A5BD
 18+  A5BD              buffer_updateall:
 19+  A5BD 00               defb 0
 20+  A5BE
 21+  A5BE              ;
 22+  A5BE              ; Stores a line number in the update list
 23+  A5BE              ; Inputs:
 24+  A5BE              ; a - row number
 25+  A5BE              buffer_marklineforupdate:
 26+  A5BE FE 15            cp 21
 27+  A5C0 D0               ret nc                          ; dont store lines that we shouldn't draw
 28+  A5C1 5F               ld e,a                          ; store in e
 29+  A5C2 ED 4B AB AA      ld bc,(origcoords)              ; this should hold the coords of what was drawn
 30+  A5C6 79               ld a,c                          ; get the horiz coord
 31+  A5C7 FE 0F            cp 15
 32+  A5C9 CA E0 A5         jp z,buffer_marklineforupdate3  ; if 15 or 16, store both halves
 33+  A5CC FE 10            cp 16                           ; if this is 15 or less, the first half of screen
 34+  A5CE CA E0 A5         jp z,buffer_marklineforupdate3  ; if 15 or 16, store both halves
 35+  A5D1 DA DC A5         jp c,buffer_marklineforupdate4  ; if first half, nothing to do
 36+  A5D4 78               ld a,b                          ; get the vertical
 37+  A5D5 3E 20            ld a,32                         ; set the 6th bit by adding 32
 38+  A5D7 83               add a,e
 39+  A5D8 5F               ld e,a                          ; store this value
 40+  A5D9 C3 E7 A5         jp buffer_marklineforupdate2
 41+  A5DC              buffer_marklineforupdate4:
 42+  A5DC 78               ld a,b
 43+  A5DD C3 E7 A5         jp buffer_marklineforupdate2    ; just get the vertical
 44+  A5E0              buffer_marklineforupdate3:          ; special case for 15,16 - need to render both halves, since might be between
 45+  A5E0 CD EB A5         call buffer_storelineforupdate  ; call store update for e
 46+  A5E3 3E 20            ld a,32
 47+  A5E5 83               add a,e
 48+  A5E6 5F               ld e,a
 49+  A5E7              buffer_marklineforupdate2:
 50+  A5E7 CD EB A5         call buffer_storelineforupdate  ; call store update for e
 51+  A5EA C9               ret
 52+  A5EB
 53+  A5EB
 54+  A5EB              ;
 55+  A5EB              ; Stores the calculated line and half if needed
 56+  A5EB              ; Inputs:
 57+  A5EB              ; e - half/row
 58+  A5EB              ;
 59+  A5EB              buffer_storelineforupdate:
 60+  A5EB 06 15            ld b,21
 61+  A5ED 21 A8 A5         ld hl,buffer_updatedlines
 62+  A5F0              buffer_storelineforupdate0:
 63+  A5F0 7E               ld a,(hl)                       ; get the line stored in updated lines
 64+  A5F1 BB               cp e                            ; is this the same as the row number passed in?
 65+  A5F2 C8               ret z                           ; if so, don't need to do anything
 66+  A5F3 FE FF            cp 255                          ; is this 255, ie the end of the buffer
 67+  A5F5 C2 FA A5         jp nz,buffer_storelineforupdate1 ; if not, move to next
 68+  A5F8 73               ld (hl),e
 69+  A5F9 C9               ret
 70+  A5FA              buffer_storelineforupdate1:
 71+  A5FA 23               inc hl
 72+  A5FB 10 F3            djnz buffer_storelineforupdate0
 73+  A5FD C9               ret
 74+  A5FE
 75+  A5FE              ;
 76+  A5FE              ; Zeroes the updated lines list
 77+  A5FE              ;
 78+  A5FE              buffer_clearlist:
 79+  A5FE 06 15            ld b,21
 80+  A600 21 A8 A5         ld hl,buffer_updatedlines
 81+  A603              buffer_clearlist0:
 82+  A603 36 FF            ld (hl),255
 83+  A605 23               inc hl
 84+  A606 10 FB            djnz buffer_clearlist0
 85+  A608 C9               ret
 86+  A609
 87+  A609              ;
 88+  A609              ; Which half are we displaying? 0 left 1 right
 89+  A609              ;
 90+  A609              buffer_bufferhalf:
 91+  A609 00               defb 0
 92+  A60A
 93+  A60A              ;
 94+  A60A              ; Copies the buffer to the screen. Use stack.
 95+  A60A              ; Inputs:
 96+  A60A              ; hl - half/line number to display - 0 is first half, 0 is first line
 97+  A60A              ;
 98+  A60A              buffer_bufferlinetoscreen:
 99+  A60A 7C               ld a,h
100+  A60B 32 09 A6         ld (buffer_bufferhalf),a        ; store the half
101+  A60E 7D               ld a,l
102+  A60F 4F               ld c,a                          ; store a
103+  A610 ED 5B 70 A7      ld de,(screen_offset)          ; load the screen offset, this is in rows, want it *256
104+  A614 83               add a,e                       ; add the row number
105+  A615 11 00 01         ld de,256
106+  A618 CD 3A 80         call utilities_multiply
107+  A61B 54 5D            ld de,hl
108+  A61D 21 06 85         ld hl,buffer_buffer
109+  A620 19               add hl,de                   ; add the offset
110+  A621 79               ld a,c                      ; get original row back
111+  A622 ED 73 95 A6      ld (buffer_bufferlinetoscreen3+1),sp ; this is some self-modifying code; stores the stack pointer in an ld sp,nn instruction at the end
112+  A626 D9               exx
113+  A627 0E 00            ld c,0                      ; zero horizontal
114+  A629 47               ld b,a                      ; load the row number into vertical coord
115+  A62A 04               inc b
116+  A62B 04               inc b                       ; move forward 2 to allow for scores
117+  A62C CD 5A A8         call screen_getcelladdress  ; get the memory into de
118+  A62F 21 10 00         ld hl,16                    ; offset by 16 chars to get to the centre, since populating stack from right
119+  A632 19               add hl,de
120+  A633 3A 09 A6         ld a,(buffer_bufferhalf)    ; get the half
121+  A636 FE 01            cp 1
122+  A638 CA 65 A6         jp z,buffer_bufferlinetoscreen4
123+  A63B              buffer_bufferlinetoscreen0:     ; PROCESS THE LEFT HALF
124+  A63B D9               exx                         ; hl is now buffer
125+  A63C 23               inc hl
126+  A63D 23               inc hl                      ; move hl forward 2 to skip first two blocks
127+  A63E F9               ld sp,hl                    ; do first fourteen for left hand side, sp pointing at buffer
128+  A63F F1               pop af
129+  A640 C1               pop bc
130+  A641 D1               pop de
131+  A642 DD E1            pop ix
132+  A644 D9               exx                         ; hl is now screen
133+  A645 08               ex af,af'
134+  A646 F1               pop af
135+  A647 C1               pop bc
136+  A648 D1               pop de
137+  A649 F9               ld sp,hl                    ; sp pointing at screen
138+  A64A D5               push de
139+  A64B C5               push bc
140+  A64C F5               push af
141+  A64D 08               ex af,af'
142+  A64E D9               exx                         ; hl is now buffer
143+  A64F DD E5            push ix
144+  A651 D5               push de
145+  A652 C5               push bc
146+  A653 F5               push af
147+  A654 11 1E 00         ld de,30                    ; add thirty to get to next line
148+  A657 19               add hl,de
149+  A658 F9               ld sp,hl                    ; sp pointing at buffer
150+  A659 D9               exx                         ; hl is now screen
151+  A65A 08               ex af,af'
152+  A65B 24               inc h
153+  A65C 7C               ld a,h
154+  A65D E6 07            and 0x07                    ; check if this is multiple of 8, if so, end of cell line
155+  A65F C2 3B A6         jp nz,buffer_bufferlinetoscreen0 ; next line in cell
156+  A662              buffer_bufferlinetoscreen1:
157+  A662 C3 94 A6         jp buffer_bufferlinetoscreen3
158+  A665              buffer_bufferlinetoscreen4:     ; PROCESS THE RIGHT HALF
159+  A665 D9               exx                         ; hl is buffer
160+  A666 11 10 00         ld de,16
161+  A669 19               add hl,de                   ; move halfway across
162+  A66A D9               exx                         ; hl is screen
163+  A66B 11 0E 00         ld de,14
164+  A66E 19               add hl,de
165+  A66F              buffer_bufferlinetoscreen2:
166+  A66F D9               exx                         ; hl is now buffer
167+  A670 F9               ld sp,hl                    ; do first fourteen for right hand side, sp pointing at buffer
168+  A671 F1               pop af
169+  A672 C1               pop bc
170+  A673 D1               pop de
171+  A674 DD E1            pop ix
172+  A676 D9               exx                         ; hl is now screen
173+  A677 08               ex af,af'
174+  A678 F1               pop af
175+  A679 C1               pop bc
176+  A67A D1               pop de
177+  A67B F9               ld sp,hl                    ; sp pointing at screen
178+  A67C D5               push de
179+  A67D C5               push bc
180+  A67E F5               push af
181+  A67F 08               ex af,af'
182+  A680 D9               exx                         ; hl is now buffer
183+  A681 DD E5            push ix
184+  A683 D5               push de
185+  A684 C5               push bc
186+  A685 F5               push af
187+  A686 11 20 00         ld de,32                    ; add thirty two to get to next line
188+  A689 19               add hl,de
189+  A68A F9               ld sp,hl                    ; sp pointing at buffer
190+  A68B D9               exx                         ; hl is now screen
191+  A68C 08               ex af,af'
192+  A68D 24               inc h
193+  A68E 7C               ld a,h
194+  A68F E6 07            and 0x07                    ; check if this is multiple of 8, if so, end of cell line
195+  A691 C2 6F A6         jp nz,buffer_bufferlinetoscreen2 ; next line in cell
196+  A694              buffer_bufferlinetoscreen3:
197+  A694 31 00 00         ld sp,0
198+  A697 D9               exx
199+  A698 C9               ret
200+  A699
201+  A699              ;
202+  A699              ; Copies the buffer to the screen for updated lines. Use stack.
203+  A699              ; Inputs: none
204+  A699              ;
205+  A699              buffer_buffertoscreen:
206+  A699 3A BD A5         ld a,(buffer_updateall)      ; get the all update flag
207+  A69C FE 00            cp 0
208+  A69E CA AA A6         jp z,buffer_buffertoscreen2  ; if not set, draw only updated
209+  A6A1 CD DA A6         call buffer_allbuffertoscreen ; otherwise, draw whole screen
210+  A6A4 21 BD A5         ld hl,buffer_updateall
211+  A6A7 36 00            ld (hl),0                    ; reset flag
212+  A6A9 C9               ret
213+  A6AA              buffer_buffertoscreen2:
214+  A6AA 06 15            ld b,21
215+  A6AC FD 21 A8 A5      ld iy,buffer_updatedlines    ; the location of the updated lines
216+  A6B0              buffer_buffertoscreen0:
217+  A6B0 FD 7E 00         ld a,(iy)
218+  A6B3 FE FF            cp 255
219+  A6B5 CA D9 A6         jp z,buffer_buffertoscreen1                       ; if this is 255, then we're at the end of the updated list
220+  A6B8 6F               ld l,a
221+  A6B9 26 00            ld h,0
222+  A6BB E6 20            and 32                      ; and with 32 to see if 6th bit is set
223+  A6BD FE 20            cp 32                       ; if so, second half of screen
224+  A6BF C2 CA A6         jp nz,buffer_buffertoscreen3
225+  A6C2 26 01            ld h,1                      ; store half in h
226+  A6C4 FD 7E 00         ld a,(iy)
227+  A6C7 D6 20            sub 32                      ; remove 32
228+  A6C9 6F               ld l,a                      ; stor in line number
229+  A6CA              buffer_buffertoscreen3:
230+  A6CA C5               push bc
231+  A6CB FD E5            push iy
232+  A6CD F3               di
233+  A6CE CD 0A A6         call buffer_bufferlinetoscreen      ; hl has h=half (0 or 1), l=line
234+  A6D1 FB               ei
235+  A6D2 FD E1            pop iy
236+  A6D4 C1               pop bc
237+  A6D5 FD 23            inc iy
238+  A6D7 10 D7            djnz buffer_buffertoscreen0
239+  A6D9              buffer_buffertoscreen1:
240+  A6D9                  ;call buffer_buffertoattrsfast
241+  A6D9 C9               ret
242+  A6DA
243+  A6DA              ;
244+  A6DA              ; Copies the buffer to the screen. Use stack.
245+  A6DA              ; Inputs: none
246+  A6DA              ;
247+  A6DA              buffer_allbuffertoscreen:
248+  A6DA 06 15            ld b,21
249+  A6DC 3E 00            ld a,0
250+  A6DE              buffer_allbuffertoscreen0:
251+  A6DE C5               push bc
252+  A6DF F5               push af
253+  A6E0 F3               di
254+  A6E1 26 00            ld h,0
255+  A6E3 6F               ld l,a
256+  A6E4 CD 0A A6         call buffer_bufferlinetoscreen
257+  A6E7 FB               ei
258+  A6E8 F1               pop af
259+  A6E9 F5               push af
260+  A6EA F3               di
261+  A6EB 26 01            ld h,1
262+  A6ED 6F               ld l,a
263+  A6EE CD 0A A6         call buffer_bufferlinetoscreen
264+  A6F1 FB               ei
265+  A6F2 F1               pop af
266+  A6F3 C1               pop bc
267+  A6F4 3C               inc a
268+  A6F5 10 E7            djnz buffer_allbuffertoscreen0
269+  A6F7 F3               di
270+  A6F8 CD FD A6         call buffer_buffertoattrsfast
271+  A6FB FB               ei
272+  A6FC C9               ret
273+  A6FD
274+  A6FD              ;
275+  A6FD              ; Copies the attrs buffer to screen with the stack
276+  A6FD              ;
277+  A6FD              buffer_buffertoattrsfast:
278+  A6FD ED 73 6C A7      ld (buffer_buffertoattrsfast1+1),sp ; this is some self-modifying code; stores the stack pointer in an ld sp,nn instruction at the end
279+  A701 3A 70 A7         ld a,(screen_offset)            ; get the screen offset in rows, so want *32
280+  A704 11 20 00         ld de,32
281+  A707 CD 3A 80         call utilities_multiply
282+  A70A 54 5D            ld de,hl
283+  A70C 21 06 A2         ld hl,buffer_attr_buffer
284+  A70F 19               add hl,de                       ; add the offset, start of attr buffer now in hl
285+  A710 D9               exx
286+  A711 21 50 58         ld hl,22528+80                  ; start of attr memory + 2 lines for score + 16 to start at right side
287+  A714 FD 21 A6 A5      ld iy,buffer_tmp
288+  A718 FD 36 00 15      ld (iy),21              ; number of times to loop
289+  A71C              buffer_buffertoattrsfast0:
290+  A71C D9               exx                         ; hl is now buffer
291+  A71D 23               inc hl
292+  A71E 23               inc hl                      ; move hl forward 2 to skip first two blocks
293+  A71F F9               ld sp,hl                    ; do first fourteen for left hand side, sp pointing at buffer
294+  A720 F1               pop af
295+  A721 C1               pop bc
296+  A722 D1               pop de
297+  A723 DD E1            pop ix
298+  A725 D9               exx                         ; hl is now screen
299+  A726 08               ex af,af'
300+  A727 F1               pop af
301+  A728 C1               pop bc
302+  A729 D1               pop de
303+  A72A F9               ld sp,hl                    ; sp pointing at screen
304+  A72B D5               push de
305+  A72C C5               push bc
306+  A72D F5               push af
307+  A72E 08               ex af,af'
308+  A72F D9               exx                         ; hl is now buffer
309+  A730 DD E5            push ix
310+  A732 D5               push de
311+  A733 C5               push bc
312+  A734 F5               push af
313+  A735 1E 0E            ld e,14                    ; do another fourteen for right hand side
314+  A737 16 00            ld d,0
315+  A739 19               add hl,de
316+  A73A F9               ld sp,hl                    ; sp pointing at buffer
317+  A73B F1               pop af
318+  A73C C1               pop bc
319+  A73D D1               pop de
320+  A73E DD E1            pop ix
321+  A740 D9               exx                         ; hl is now screen
322+  A741 08               ex af,af'
323+  A742 1E 0E            ld e,14
324+  A744 16 00            ld d,0
325+  A746 19               add hl,de
326+  A747 F1               pop af
327+  A748 C1               pop bc
328+  A749 D1               pop de
329+  A74A F9               ld sp,hl                    ; sp pointing at screen
330+  A74B D5               push de
331+  A74C C5               push bc
332+  A74D F5               push af
333+  A74E 08               ex af,af'
334+  A74F D9               exx                         ; hl is now buffer
335+  A750 DD E5            push ix
336+  A752 D5               push de
337+  A753 C5               push bc
338+  A754 F5               push af
339+  A755 1E 10            ld e,16
340+  A757 16 00            ld d,0
341+  A759 19               add hl,de
342+  A75A D9               exx                         ; hl is now screen
343+  A75B 11 12 00         ld de,18
344+  A75E 19               add hl,de
345+  A75F FD 7E 00         ld a,(iy)
346+  A762 3D               dec a
347+  A763 FE 00            cp 0
348+  A765 FD 77 00         ld (iy),a
349+  A768 C2 1C A7         jp nz,buffer_buffertoattrsfast0 ; do another row
350+  A76B              buffer_buffertoattrsfast1:
351+  A76B 31 00 00         ld sp,0
352+  A76E D9               exx
353+  A76F C9               ret
# file closed: screen/buffer.asm
 24   A770                  include "screen\screen.asm"
# file opened: screen/screen.asm
  1+  A770              screen_offset:
  2+  A770 00               defb 0                      ; offset from top of screen in lines
  3+  A771
  4+  A771              screen_tmp:
  5+  A771 00 00            defb 0,0                      ; temporary memory
  6+  A773
  7+  A773              screen_setscorecolours:
  8+  A773 21 E9 B3         ld hl,score_colours
  9+  A776 11 00 58         ld de,22528                     ; attrs here
 10+  A779 01 40 00         ld bc,64
 11+  A77C ED B0            ldir
 12+  A77E C9               ret
 13+  A77F
 14+  A77F              screen_sethighscorecolours:
 15+  A77F 21 29 B4         ld hl,high_score_colours
 16+  A782 11 E0 5A         ld de,22528+736                 ; attrs here
 17+  A785 01 20 00         ld bc,32
 18+  A788 ED B0            ldir
 19+  A78A C9               ret
 20+  A78B
 21+  A78B              ; Draw the screen
 22+  A78B              ; Inputs:
 23+  A78B              ; none
 24+  A78B              ; Notes:
 25+  A78B              ; The value held at screen_offset tells the screen how many rows to scroll down. Set to five to bottom out.
 26+  A78B              screen_draw:
 27+  A78B                  ;call clear_screen
 28+  A78B 0E 00            ld c,0                      ; horiz
 29+  A78D 06 00            ld b,0                      ; vert, 0 at top
 30+  A78F DD 21 AB AE      ld ix,level01               ; point ix at level data
 31+  A793 FD 21 06 A2      ld iy,buffer_attr_buffer    ; point iy at attr data
 32+  A797              screen_draw0:
 33+  A797 DD 7E 00         ld a,(ix)                   ; load the block number
 34+  A79A C5               push bc                     ; store bc, contains loop count
 35+  A79B CD 48 A9         call screen_getattr         ; get the memory location for this cell's attr into hl
 36+  A79E 7E               ld a,(hl)                   ; get the attr value at the address
 37+  A79F FD 77 00         ld (iy),a                   ; load the attr into memory
 38+  A7A2 DD 7E 00         ld a,(ix)                   ; load the block number
 39+  A7A5 CD 0F A9         call screen_getblock        ; get the block data into hl
 40+  A7A8 CD EC A8         call screen_showchar        ; show this character here
 41+  A7AB C1               pop bc                      ; get the loop counter back
 42+  A7AC DD 23            inc ix                      ; increment level location
 43+  A7AE FD 23            inc iy                      ; increment attr location
 44+  A7B0 0C               inc c                       ; increment horiz
 45+  A7B1 79               ld a,c
 46+  A7B2 FE 20            cp 32                       ; check if horiz has reach edge of screen
 47+  A7B4 C2 97 A7         jp nz,screen_draw0          ; if not, loop
 48+  A7B7 0E 00            ld c,0                      ; if so, reset horiz
 49+  A7B9 04               inc b                       ; increment vertical
 50+  A7BA 78               ld a,b
 51+  A7BB FE 1D            cp 29                       ; check if at bottom
 52+  A7BD C2 97 A7         jp nz,screen_draw0          ; if not, loop
 53+  A7C0 21 71 A7         ld hl, screen_tmp
 54+  A7C3 36 09            ld (hl),9                   ; load the block number into memory
 55+  A7C5 DD 21 4B B2      ld ix,level01rocks          ; rock memory
 56+  A7C9 CD 2A A8         call screen_initobjects     ; draw rocks
 57+  A7CC 21 71 A7         ld hl, screen_tmp
 58+  A7CF 36 0C            ld (hl),12                  ; load the block number into memory
 59+  A7D1 DD 21 4B B3      ld ix,level01missiles       ; missile memory
 60+  A7D5 CD 2A A8         call screen_initobjects     ; draw missiles
 61+  A7D8 21 71 A7         ld hl, screen_tmp
 62+  A7DB 36 08            ld (hl),08                  ; load the block number into memory
 63+  A7DD DD 21 C4 B3      ld ix,level01diamonds       ; diamond memory
 64+  A7E1 CD 2A A8         call screen_initobjects     ; draw diamonds
 65+  A7E4 21 71 A7         ld hl, screen_tmp
 66+  A7E7 36 0E            ld (hl),14                  ; load the block number into memory
 67+  A7E9 DD 21 D4 B3      ld ix,level01gems           ; gems memory
 68+  A7ED CD 2A A8         call screen_initobjects     ; draw gems
 69+  A7F0 CD F7 A7         call screen_setuptext       ; draws text on the screen
 70+  A7F3 CD E7 C1         call scores_printscores     ; print the current scores
 71+  A7F6 C9               ret
 72+  A7F7
 73+  A7F7              ;
 74+  A7F7              ; Sets up text on the screen
 75+  A7F7              ;
 76+  A7F7              screen_setuptext:
 77+  A7F7 CD 09 C2         call scores_showtable
 78+  A7FA CD 7F A7         call screen_sethighscorecolours
 79+  A7FD 21 ED 80         ld hl, string_score1
 80+  A800 CD BE 84         call string_print
 81+  A803 21 F6 80         ld hl, string_scorenumbers1
 82+  A806 CD BE 84         call string_print
 83+  A809 21 FF 80         ld hl, string_company
 84+  A80C CD BE 84         call string_print
 85+  A80F 21 14 81         ld hl, string_score2
 86+  A812 CD BE 84         call string_print
 87+  A815 21 1D 81         ld hl, string_scorenumbers2
 88+  A818 CD BE 84         call string_print
 89+  A81B 21 09 81         ld hl, string_credits
 90+  A81E CD BE 84         call string_print
 91+  A821 CD 73 A7         call screen_setscorecolours
 92+  A824 C9               ret
 93+  A825
 94+  A825              ;
 95+  A825              ; Sets a line of colours
 96+  A825              ; Inputs:
 97+  A825              ; a - colour to set
 98+  A825              ; b - number to set
 99+  A825              ; de - start memory location
100+  A825              ;
101+  A825              screen_setcolours:
102+  A825 12               ld (de),a
103+  A826 13               inc de
104+  A827 10 FC            djnz screen_setcolours
105+  A829 C9               ret
106+  A82A
107+  A82A              ;
108+  A82A              ; Draw initial object positions
109+  A82A              ; Inputs:
110+  A82A              ; ix - memory location of objects
111+  A82A              ; a - graphic
112+  A82A              screen_initobjects:
113+  A82A DD 4E 00         ld c,(ix)                   ; get the horiz coord
114+  A82D 79               ld a,c
115+  A82E FE FF            cp 255
116+  A830 CA 59 A8         jp z,screen_initobjects2
117+  A833 DD 23            inc ix                      ; move to next
118+  A835 DD 46 00         ld b,(ix)                   ; get the vert coord
119+  A838 DD 23            inc ix
120+  A83A CD 6B A8         call screen_getcellattradress ; get the memory address of b,c attr into de
121+  A83D D5               push de
122+  A83E 3A 71 A7         ld a,(screen_tmp)                  ; get the block number back
123+  A841 CD 48 A9         call screen_getattr         ; get the memory location for this cell's attr into hl
124+  A844 D1               pop de
125+  A845 7E               ld a,(hl)                   ; get the attr value at the address
126+  A846 12               ld (de),a                   ; load the attr into memory
127+  A847 3A 71 A7         ld a,(screen_tmp)                  ; get the block number back
128+  A84A CD 0F A9         call screen_getblock        ; get the block data into hl
129+  A84D CD EC A8         call screen_showchar        ; show this character here
130+  A850
131+  A850              screen_initobjects1:
132+  A850 DD 23            inc ix                      ; move past state
133+  A852 DD 23            inc ix
134+  A854 DD 23            inc ix                      ; move past mem
135+  A856 C3 2A A8         jp screen_initobjects
136+  A859              screen_initobjects2:
137+  A859 C9               ret
138+  A85A
139+  A85A
140+  A85A              ;
141+  A85A              ; Return character cell address offset of block at (b, c) ready for addition to screen  memory.
142+  A85A              ; Inputs:
143+  A85A              ; bc: coords
144+  A85A              ; Outputs:
145+  A85A              ; de: memory location
146+  A85A              ;
147+  A85A              screen_getcelladdress:
148+  A85A 78               ld a,b      ; vertical position.
149+  A85B E6 18            and 24      ; which segment, 0, 1 or 2?
150+  A85D C6 40            add a,64    ; 64*256 = 16384, Spectrum's screen memory.
151+  A85F 57               ld d,a      ; this is our high byte.
152+  A860 78               ld a,b      ; what was that vertical position again?
153+  A861 E6 07            and 7       ; which row within segment?
154+  A863 0F               rrca        ; multiply row by 32.
155+  A864 0F               rrca
156+  A865 0F               rrca
157+  A866 5F               ld e,a      ; low byte.
158+  A867 79               ld a,c      ; add on y coordinate.
159+  A868 83               add a,e     ; mix with low byte.
160+  A869 5F               ld e,a      ; address of screen position in de.
161+  A86A C9               ret
162+  A86B
163+  A86B              ;
164+  A86B              ; Calculate buffer address of attribute for character at (b, c).
165+  A86B              ; Inputs:
166+  A86B              ; bc: coords
167+  A86B              ; Outputs:
168+  A86B              ; de: memory location
169+  A86B              ;
170+  A86B              screen_getcellattradress:
171+  A86B 11 06 A2         ld de,buffer_attr_buffer ; memory is at base + horiz (c) + vert*32 (b)
172+  A86E 69               ld l,c      ; x position.
173+  A86F 26 00            ld h,0      ; 0 h
174+  A871 19               add hl,de
175+  A872 54 5D            ld de,hl    ; horiz done
176+  A874 78               ld a,b      ; do vert
177+  A875 D5               push de
178+  A876 C5               push bc
179+  A877 11 20 00         ld de,32
180+  A87A CD 3A 80         call utilities_multiply
181+  A87D C1               pop bc
182+  A87E D1               pop de
183+  A87F 19               add hl,de
184+  A880 54 5D            ld de,hl    ; vert done
185+  A882 C9               ret
186+  A883
187+  A883              ;
188+  A883              ; Calculate buffer address offset of attribute for character at (b, c).
189+  A883              ; Inputs:
190+  A883              ; bc: coords
191+  A883              ; Outputs:
192+  A883              ; de: memory location
193+  A883              ;
194+  A883              screen_getcellattroffset:
195+  A883 69               ld l,c      ; x position.
196+  A884 26 00            ld h,0      ; 0 h
197+  A886 54 5D            ld de,hl    ; horiz done
198+  A888 78               ld a,b      ; do vert
199+  A889 D5               push de
200+  A88A C5               push bc
201+  A88B 11 20 00         ld de,32
202+  A88E CD 3A 80         call utilities_multiply
203+  A891 C1               pop bc
204+  A892 D1               pop de
205+  A893 19               add hl,de
206+  A894 54 5D            ld de,hl    ; vert done
207+  A896 C9               ret
208+  A897
209+  A897              ;
210+  A897              ; Calculate buffer address of attribute for character at (b, c).
211+  A897              ; Inputs:
212+  A897              ; bc: coords
213+  A897              ; Outputs:
214+  A897              ; de: memory location
215+  A897              ;
216+  A897              screen_getscreenattradress:
217+  A897 11 00 58         ld de,22528 ; memory is at base + horiz (c) + vert*32 (b)
218+  A89A 69               ld l,c      ; x position.
219+  A89B 26 00            ld h,0      ; 0 h
220+  A89D 19               add hl,de
221+  A89E 54 5D            ld de,hl    ; horiz done
222+  A8A0 78               ld a,b      ; do vert
223+  A8A1 D5               push de
224+  A8A2 C5               push bc
225+  A8A3 11 20 00         ld de,32
226+  A8A6 CD 3A 80         call utilities_multiply
227+  A8A9 C1               pop bc
228+  A8AA D1               pop de
229+  A8AB 19               add hl,de
230+  A8AC 54 5D            ld de,hl    ; vert done
231+  A8AE C9               ret
232+  A8AF
233+  A8AF              ;
234+  A8AF              ; Gets the attr memory location for a screen coord
235+  A8AF              ; Will overwrite bc
236+  A8AF              ; Inputs:
237+  A8AF              ; bc - screen coords
238+  A8AF              ; Outputs:
239+  A8AF              ; de - memory location
240+  A8AF              ; bc - character coords
241+  A8AF              ;
242+  A8AF              screen_getattraddressfromscreencoords:
243+  A8AF 78               ld a,b                          ; get the player block coords of current block
244+  A8B0 E6 F8            and 248                         ; find closest multiple of eight
245+  A8B2 0F               rrca
246+  A8B3 0F               rrca
247+  A8B4 0F               rrca                ; divide by 8
248+  A8B5 47               ld b,a
249+  A8B6 79               ld a,c
250+  A8B7 48               ld c,b                         ; swap b and c
251+  A8B8 E6 F8            and 248
252+  A8BA 0F               rrca
253+  A8BB 0F               rrca
254+  A8BC 0F               rrca                ; divide by 8
255+  A8BD 47               ld b,a
256+  A8BE CD 6B A8         call screen_getcellattradress   ; work out memory location of current block attributes, memory in de
257+  A8C1 C9               ret
258+  A8C2
259+  A8C2
260+  A8C2              ; Gets the nearest cell coords for a screen coord
261+  A8C2              ; Will overwrite bc
262+  A8C2              ; Inputs:
263+  A8C2              ; bc - screen coords
264+  A8C2              ; Outputs:
265+  A8C2              ; bc - character coords
266+  A8C2              ;
267+  A8C2              screen_getcharcoordsfromscreencoords:
268+  A8C2 78               ld a,b                          ; get the player block coords of current block
269+  A8C3 E6 F8            and 248                         ; find closest multiple of eight
270+  A8C5 0F               rrca
271+  A8C6 0F               rrca
272+  A8C7 0F               rrca                ; divide by 8
273+  A8C8 47               ld b,a
274+  A8C9 79               ld a,c
275+  A8CA 48               ld c,b                         ; swap b and c
276+  A8CB E6 F8            and 248
277+  A8CD 0F               rrca
278+  A8CE 0F               rrca
279+  A8CF 0F               rrca                ; divide by 8
280+  A8D0 47               ld b,a
281+  A8D1 C9               ret
282+  A8D2
283+  A8D2              ; Gets the screen coords for a cell coord
284+  A8D2              ; Will overwrite bc
285+  A8D2              ; Inputs:
286+  A8D2              ; bc - char coords
287+  A8D2              ; Outputs:
288+  A8D2              ; bc - screen coords
289+  A8D2              ;
290+  A8D2              screen_getscreencoordsfromcharcoords:
291+  A8D2 78               ld a,b                          ; get the player block coords of current block
292+  A8D3 07               rlca
293+  A8D4 07               rlca
294+  A8D5 07               rlca                ; multiply by 8
295+  A8D6 47               ld b,a
296+  A8D7 79               ld a,c
297+  A8D8 48               ld c,b                         ; swap b and c
298+  A8D9 07               rlca
299+  A8DA 07               rlca
300+  A8DB 07               rlca                ; divide by 8
301+  A8DC 47               ld b,a
302+  A8DD C9               ret
303+  A8DE
304+  A8DE              ;
305+  A8DE              ; Get buffer address for a character at b,c - b vert
306+  A8DE              ; Buffer memory is stored as sequential block
307+  A8DE              ; Char at 0,0 is stored 0,32,64...; 0,1 is stored at 1,33,65
308+  A8DE              ; Inputs:
309+  A8DE              ; bc - coords
310+  A8DE              ; Outputs:
311+  A8DE              ; de - memory location of first byte
312+  A8DE              screen_getbufferaddress:
313+  A8DE 21 06 85         ld hl, buffer_buffer    ; first get screen buffer start
314+  A8E1 50               ld d,b                  ; then work out vertical offset
315+  A8E2 1E 00            ld e,0                  ; mult by 256, low byte becomes high byte, de now holds result
316+  A8E4 19               add hl,de               ; add to base
317+  A8E5 59               ld e,c                  ; then add horizontal offset (c)
318+  A8E6 16 00            ld d,0
319+  A8E8 19               add hl,de               ; add to base
320+  A8E9 54 5D            ld de,hl
321+  A8EB C9               ret
322+  A8EC
323+  A8EC              ;
324+  A8EC              ; Display character hl at (b, c) to buffer.
325+  A8EC              ; Stored sequentially
326+  A8EC              ; Inputs:
327+  A8EC              ; hl: block address
328+  A8EC              ; bc: coords
329+  A8EC              ;
330+  A8EC              screen_showchar:
331+  A8EC ED 43 AB AA      ld (origcoords),bc   ; store char coords
332+  A8F0 3E 00            ld a,0
333+  A8F2 E5               push hl
334+  A8F3 CD DE A8         call screen_getbufferaddress ; get the current screen buffer pointer
335+  A8F6 E1               pop hl
336+  A8F7 06 08            ld b,8              ; number of pixels high.
337+  A8F9              screen_showchar0:
338+  A8F9 7E               ld a,(hl)           ; source graphic.
339+  A8FA 12               ld (de),a           ; transfer to screen.
340+  A8FB 23               inc hl              ; next piece of data.
341+  A8FC E5               push hl             ; store hl
342+  A8FD 62 6B            ld hl,de            ; put de in hl
343+  A8FF 1E 20            ld e,32            ; inc memory by 32, so load 32 into de
344+  A901 16 00            ld d,0
345+  A903 19               add hl,de              ; add de to hl
346+  A904 54 5D            ld de,hl            ; load back to de
347+  A906 E1               pop hl              ; restore hl
348+  A907
349+  A907 10 F0            djnz screen_showchar0 ; repeat
350+  A909 2E 01            ld l,1
351+  A90B CD 5C AA         call sprites_marklinesforupdatechar
352+  A90E
353+  A90E C9               ret
354+  A90F
355+  A90F
356+  A90F              ;
357+  A90F              ; Get cell graphic.
358+  A90F              ; Inputs:
359+  A90F              ; a: block
360+  A90F              ; Outputs:
361+  A90F              ; hl: memory
362+  A90F              ;
363+  A90F              screen_getblock:
364+  A90F 07               rlca                        ; multiply block number by eight.
365+  A910 07               rlca
366+  A911 07               rlca
367+  A912 5F               ld e,a                      ; displacement to graphic address.
368+  A913 16 00            ld d,0                      ; no high byte.
369+  A915 21 49 B4         ld hl,sprites               ; address of character blocks.
370+  A918 19               add hl,de                   ; point to block.
371+  A919 C9               ret
372+  A91A
373+  A91A              ;
374+  A91A              ; Set a the attr of a coord
375+  A91A              ; Inputs:
376+  A91A              ; bc - char coords
377+  A91A              ; a - attr
378+  A91A              ;
379+  A91A              screen_setattr:
380+  A91A DD E5            push ix
381+  A91C C5               push bc
382+  A91D 08               ex af, af'
383+  A91E CD 83 A8         call screen_getcellattroffset   ; get offset into de
384+  A921 21 06 A2         ld hl,buffer_attr_buffer
385+  A924 19               add hl,de                       ; get the memory location
386+  A925 08               ex af, af'                      ; get attr back
387+  A926 77               ld (hl),a                         ; set the attr
388+  A927 08               ex af, af'                      ; get attr back
389+  A928 ED 5B 70 A7      ld de,(screen_offset)           ; get the offset
390+  A92C 78               ld a,b                          ; get the vertical
391+  A92D 93               sub e                           ; subtract the offset
392+  A92E DA 44 A9         jp c,screen_setattr0            ; if less than zero, don't update the attr on screen
393+  A931 FE 15            cp 21
394+  A933 D2 44 A9         jp nc,screen_setattr0           ; if more than 21, don't update the attr on screen
395+  A936 47               ld b,a                          ; put the coord back in b
396+  A937 CD 97 A8         call screen_getscreenattradress ; screen attr address in de
397+  A93A 21 40 00         ld hl,64                        ; attr memory + two rows for scores
398+  A93D 19               add hl,de
399+  A93E 08               ex af, af'                      ; get attr back
400+  A93F 77               ld (hl),a
401+  A940 C1               pop bc
402+  A941 DD E1            pop ix
403+  A943 C9               ret
404+  A944              screen_setattr0:
405+  A944 C1               pop bc
406+  A945 DD E1            pop ix
407+  A947 C9               ret
408+  A948
409+  A948              ;
410+  A948              ; Get cell attribute.
411+  A948              ; Inputs:
412+  A948              ; a: block
413+  A948              ; Outputs:
414+  A948              ; hl: memory
415+  A948              ;
416+  A948              screen_getattr:
417+  A948 5F               ld e,a                      ; displacement to attribute address.
418+  A949 16 00            ld d,0                      ; no high byte.
419+  A94B 21 21 B5         ld hl,sprite_attrs          ; address of block attributes.
420+  A94E 19               add hl,de                   ; point to attribute.
421+  A94F C9               ret
422+  A950
423+  A950              ;
424+  A950              ; Checks whether a character block has anything in it
425+  A950              ; Inputs:
426+  A950              ; bc - char coords
427+  A950              ; Outputs:
428+  A950              ; a - 1, empty
429+  A950              screen_ischarempty:
430+  A950 CD DE A8         call screen_getbufferaddress ; get the current screen buffer pointer
431+  A953 06 08            ld b,8                      ; check 8 rows
432+  A955              screen_ischarempty2:
433+  A955 1A               ld a,(de)                   ; check line
434+  A956 FE 00            cp 0
435+  A958 C2 66 A9         jp nz,screen_ischarempty1   ; if not zero, jump out with false
436+  A95B 21 20 00         ld hl,32
437+  A95E 19               add hl,de
438+  A95F 54 5D            ld de,hl                    ; move to next row
439+  A961 10 F2            djnz screen_ischarempty2
440+  A963              screen_ischarempty0:
441+  A963 3E 01            ld a,1
442+  A965 C9               ret
443+  A966              screen_ischarempty1:
444+  A966 3E 00            ld a,0
445+  A968 C9               ret
446+  A969
447+  A969              ;
448+  A969              ; Copies a block from one place to another directly underneath, leaves the original empty
449+  A969              ; Inputs:
450+  A969              ; bc - coords of block to copy from
451+  A969              screen_copyblockdown
452+  A969 CD DE A8         call screen_getbufferaddress ; get the current screen buffer pointer for source
453+  A96C 06 08            ld b,8                      ; copy 8 rows
454+  A96E              screen_copyblock0:
455+  A96E 1A               ld a,(de)                    ; get what we're copying
456+  A96F 08               ex af,af'
457+  A970 3E 00            ld a,0
458+  A972 12               ld (de),a                    ; replace with empty
459+  A973 08               ex af,af'
460+  A974 14               inc d                        ; add 256 to get to the next row
461+  A975 12               ld (de),a                    ; copy to the next row
462+  A976 15               dec d
463+  A977 21 20 00         ld hl,32
464+  A97A 19               add hl,de                       ; return back to source, next row down
465+  A97B 54 5D            ld de,hl
466+  A97D 10 EF            djnz screen_copyblock0
467+  A97F C9               ret
468+  A980
469+  A980              ;
470+  A980              ; Returns the first byte of a character. Useful for figuring out what's there
471+  A980              ; Inputs:
472+  A980              ; bc - coords
473+  A980              ; Outputs:
474+  A980              ; a - first byte
475+  A980              ;
476+  A980              screen_getcharfirstbyte:
477+  A980 CD DE A8         call screen_getbufferaddress ; get the current screen buffer pointer for source
478+  A983 1A               ld a,(de)
479+  A984 C9               ret
480+  A985
# file closed: screen/screen.asm
 25   A985                  include "screen\sprites.asm"
# file opened: screen/sprites.asm
  1+  A985              ;
  2+  A985              ; This is the sprite routine and expects coordinates in (c ,b) form,
  3+  A985              ; where c is the vertical coord from the top of the screen (0-176), and
  4+  A985              ; b is the horizontal coord from the left of the screen (0 to 240).
  5+  A985              ; Sprite data is stored as you'd expect in its unshifted form as this
  6+  A985              ; routine takes care of all the shifting itself. This means that sprite
  7+  A985              ; handling isn't particularly fast but the graphics only take 1/8th of the
  8+  A985              ; space they would require in pre-shifted form.
  9+  A985              ; Inputs:
 10+  A985              ; hl - sprite data
 11+  A985              ; bc - screen coords
 12+  A985              ;
 13+  A985              sprites_drawsprite7:
 14+  A985 EE 07            xor 7               ; complement last 3 bits.
 15+  A987 3C               inc a               ; add one for luck!
 16+  A988              sprites_drawsprite3:
 17+  A988 CB 11            rl c                ; ...into middle byte...
 18+  A98A CB 12            rl d                ; ...and finally into left character cell.
 19+  A98C 3D               dec a               ; count shifts we've done.
 20+  A98D 20 F9            jr nz,sprites_drawsprite3 ; return until all shifts complete.
 21+  A98F                                      ; Line of sprite image is now in e + c + d, we need it in form c + d + e.
 22+  A98F 79               ld a,c              ; left edge of image is currently in e.
 23+  A990 4A               ld c,d              ; put right edge there instead.
 24+  A991 57               ld d,a              ; and the left edge back into c.
 25+  A992 18 29            jr sprites_drawsprite0   ; we've done the switch so transfer to screen.
 26+  A994              sprites_drawsprite:
 27+  A994 ED 43 AB AA      ld (origcoords),bc  ; store coords
 28+  A998 ED 43 AD AA      ld (dispx),bc       ; store coords in dispx for now.
 29+  A99C E5               push hl
 30+  A99D CD 89 AA         call sprites_scadd  ; calculate screen address.
 31+  A9A0 E1               pop hl
 32+  A9A1 3E 08            ld a,8              ; height of sprite in pixels.
 33+  A9A3              sprites_drawsprite1:
 34+  A9A3 08               ex af,af'           ; store loop counter.
 35+  A9A4 D5               push de             ; store screen address.
 36+  A9A5 4E               ld c,(hl)           ; first sprite graphic.
 37+  A9A6 23               inc hl              ; increment poiinter to sprite data.
 38+  A9A7 22 AF AA         ld (sprtmp),hl      ; store it for later.
 39+  A9AA 16 00            ld d,0              ; blank right byte for now.
 40+  A9AC 78               ld a,b              ; b holds y position.
 41+  A9AD E6 07            and 7               ; how are we straddling character cells?
 42+  A9AF 28 0C            jr z,sprites_drawsprite0 ; we're not straddling them, don't bother shifting.
 43+  A9B1 FE 05            cp 5                ; 5 or more right shifts needed?
 44+  A9B3 30 D0            jr nc,sprites_drawsprite7 ; yes, shift from left as it's quicker.
 45+  A9B5 A7               and a               ; oops, carry flag is set so clear it.
 46+  A9B6              sprites_drawsprite2:
 47+  A9B6 CB 19            rr c                ; rotate left byte right...
 48+  A9B8 CB 1A            rr d                ; ...into right byte.
 49+  A9BA 3D               dec a               ; one less shift to do.
 50+  A9BB 20 F9            jr nz,sprites_drawsprite2 ; return until all shifts complete.
 51+  A9BD              sprites_drawsprite0:
 52+  A9BD E1               pop hl              ; pop screen address from stack.
 53+  A9BE 7E               ld a,(hl)           ; what's there already.
 54+  A9BF A9               xor c               ; merge in image data.
 55+  A9C0 77               ld (hl),a           ; place onto screen.
 56+  A9C1 23               inc hl
 57+  A9C2 7E               ld a,(hl)           ; what's already there.
 58+  A9C3 AA               xor d               ; right edge of sprite image data.
 59+  A9C4 77               ld (hl),a           ; plonk it on screen.
 60+  A9C5 3A AD AA         ld a,(dispx)        ; vertical coordinate.
 61+  A9C8 3C               inc a               ; next line down.
 62+  A9C9 32 AD AA         ld (dispx),a        ; store new position.
 63+  A9CC 2B               dec hl
 64+  A9CD 11 20 00         ld de,32            ; add 32 to get to the next row
 65+  A9D0 19               add hl,de           ; add 32
 66+  A9D1              sprites_drawsprite6:
 67+  A9D1 EB               ex de,hl            ; screen address in de.
 68+  A9D2 2A AF AA         ld hl,(sprtmp)      ; restore graphic address.
 69+  A9D5 08               ex af,af'           ; restore loop counter.
 70+  A9D6 3D               dec a               ; decrement it.
 71+  A9D7 C2 A3 A9         jp nz,sprites_drawsprite1 ; not reached bottom of sprite yet to repeat.
 72+  A9DA 2E 02            ld l,2
 73+  A9DC CD 4B AA         call sprites_marklinesforupdatescreen
 74+  A9DF C9               ret                 ; job done.
 75+  A9E0
 76+  A9E0              ; Inputs:
 77+  A9E0              ; hl - sprite data
 78+  A9E0              ; bc - screen coords
 79+  A9E0              ;
 80+  A9E0              sprites_draw2by2sprite7
 81+  A9E0 EE 07            xor 7               ; complement last 3 bits.
 82+  A9E2 3C               inc a               ; add one for luck!
 83+  A9E3              sprites_draw2by2sprite3
 84+  A9E3 CB 12            rl d                ; rotate left...
 85+  A9E5 CB 11            rl c                ; ...into middle byte...
 86+  A9E7 CB 13            rl e                ; ...and finally into left character cell.
 87+  A9E9 3D               dec a               ; count shifts we've done.
 88+  A9EA 20 F7            jr nz,sprites_draw2by2sprite3 ; return until all shifts complete.
 89+  A9EC                                      ; Line of sprite image is now in e + c + d, we need it in form c + d + e.
 90+  A9EC 7B               ld a,e              ; left edge of image is currently in e.
 91+  A9ED 5A               ld e,d              ; put right edge there instead.
 92+  A9EE 51               ld d,c              ; middle bit goes in d.
 93+  A9EF 4F               ld c,a              ; and the left edge back into c.
 94+  A9F0 18 31            jr sprites_draw2by2sprite0 ; we've done the switch so transfer to screen.
 95+  A9F2              sprites_draw2by2sprite
 96+  A9F2 ED 43 AB AA      ld (origcoords),bc  ; store coords
 97+  A9F6 ED 43 AD AA      ld (dispx),bc       ; store coords in dispx for now.
 98+  A9FA 79               ld a,c
 99+  A9FB 32 B1 AA         ld (sprtmp0),a         ; store vertical.
100+  A9FE E5               push hl
101+  A9FF CD 89 AA         call sprites_scadd          ; calculate screen address.
102+  AA02 E1               pop hl
103+  AA03 3E 10            ld a,16             ; height of sprite in pixels.
104+  AA05              sprites_draw2by2sprite1
105+  AA05 08               ex af,af'           ; store loop counter.
106+  AA06 D5               push de             ; store screen address.
107+  AA07 4E               ld c,(hl)           ; first sprite graphic.
108+  AA08 23               inc hl              ; increment poiinter to sprite data.
109+  AA09 56               ld d,(hl)           ; next bit of sprite image.
110+  AA0A 23               inc hl              ; point to next row of sprite data.
111+  AA0B 22 AF AA         ld (sprtmp),hl        ; store in tmp0 for later.
112+  AA0E 1E 00            ld e,0              ; blank right byte for now.
113+  AA10 78               ld a,b              ; b holds y position.
114+  AA11 E6 07            and 7               ; how are we straddling character cells?
115+  AA13 28 0E            jr z,sprites_draw2by2sprite0 ; we're not straddling them, don't bother shifting.
116+  AA15 FE 05            cp 5                ; 5 or more right shifts needed?
117+  AA17 30 C7            jr nc,sprites_draw2by2sprite7 ; yes, shift from left as it's quicker.
118+  AA19 A7               and a               ; oops, carry flag is set so clear it.
119+  AA1A              sprites_draw2by2sprite2
120+  AA1A CB 19            rr c                ; rotate left byte right...
121+  AA1C CB 1A            rr d                ; ...through middle byte...
122+  AA1E CB 1B            rr e                ; ...into right byte.
123+  AA20 3D               dec a               ; one less shift to do.
124+  AA21 20 F7            jr nz,sprites_draw2by2sprite2 ; return until all shifts complete.
125+  AA23              sprites_draw2by2sprite0
126+  AA23 E1               pop hl              ; pop screen address from stack.
127+  AA24 7E               ld a,(hl)           ; what's there already.
128+  AA25 A9               xor c               ; merge in image data.
129+  AA26 77               ld (hl),a           ; place onto screen.
130+  AA27 23               inc hl               ; next character cell to right please.
131+  AA28 7E               ld a,(hl)           ; what's there already.
132+  AA29 AA               xor d               ; merge with middle bit of image.
133+  AA2A 77               ld (hl),a           ; put back onto screen.
134+  AA2B 23               inc hl              ; next bit of screen area.
135+  AA2C 7E               ld a,(hl)           ; what's already there.
136+  AA2D AB               xor e               ; right edge of sprite image data.
137+  AA2E 77               ld (hl),a           ; plonk it on screen.
138+  AA2F 3A B1 AA         ld a,(sprtmp0)         ; temporary vertical coordinate.
139+  AA32 3C               inc a               ; next line down.
140+  AA33 32 B1 AA         ld (sprtmp0),a         ; store new position.
141+  AA36 2B               dec hl
142+  AA37 2B               dec hl
143+  AA38 11 20 00         ld de,32            ; add 32 to get to the next row
144+  AA3B 19               add hl,de           ; add 32
145+  AA3C              sprites_draw2by2sprite6
146+  AA3C EB               ex de,hl            ; screen address in de.
147+  AA3D 2A AF AA         ld hl,(sprtmp)        ; restore graphic address.
148+  AA40 08               ex af,af'           ; restore loop counter.
149+  AA41 3D               dec a               ; decrement it.
150+  AA42 C2 05 AA         jp nz,sprites_draw2by2sprite1 ; not reached bottom of sprite yet to repeat.
151+  AA45 2E 03            ld l,3
152+  AA47 CD 4B AA         call sprites_marklinesforupdatescreen
153+  AA4A C9               ret                 ; job done.
154+  AA4B
155+  AA4B              ;
156+  AA4B              ; Marks lines for update with screen coords
157+  AA4B              ; Inputs:
158+  AA4B              ; l - number to update
159+  AA4B              ;
160+  AA4B              sprites_marklinesforupdatescreen:
161+  AA4B F5               push af
162+  AA4C ED 4B AB AA      ld bc,(origcoords)
163+  AA50 CD C2 A8         call screen_getcharcoordsfromscreencoords
164+  AA53 ED 43 AB AA      ld (origcoords),bc
165+  AA57 CD 66 AA         call sprites_marklinesforupdate
166+  AA5A F1               pop af
167+  AA5B C9               ret
168+  AA5C
169+  AA5C              ;
170+  AA5C              ; Marks lines for update with char coords
171+  AA5C              ; Inputs:
172+  AA5C              ; l - number to update
173+  AA5C              ;
174+  AA5C              sprites_marklinesforupdatechar:
175+  AA5C F5               push af
176+  AA5D ED 43 AB AA      ld (origcoords),bc
177+  AA61 CD 66 AA         call sprites_marklinesforupdate
178+  AA64 F1               pop af
179+  AA65 C9               ret
180+  AA66
181+  AA66              ;
182+  AA66              ; Marks lines for update
183+  AA66              ; Inputs:
184+  AA66              ; l - number to update
185+  AA66              ;
186+  AA66              sprites_marklinesforupdate:
187+  AA66 ED 4B AB AA      ld bc,(origcoords)
188+  AA6A ED 5B 70 A7      ld de,(screen_offset)          ; load the screen offset, this is in rows
189+  AA6E 78               ld a,b
190+  AA6F 93               sub e
191+  AA70 47               ld b,a
192+  AA71 7D               ld a,l                          ; get loop counter
193+  AA72              sprites_marklinesforupdate0:
194+  AA72 C5               push bc
195+  AA73 08               ex af,af'                     ; store loop counter
196+  AA74 78               ld a,b
197+  AA75 CD BE A5         call buffer_marklineforupdate ; mark this line for update
198+  AA78 ED 4B AB AA      ld bc,(origcoords)            ; move the coords for the next line
199+  AA7C 04               inc b
200+  AA7D ED 43 AB AA      ld (origcoords),bc
201+  AA81 C1               pop bc
202+  AA82 04               inc b
203+  AA83 08               ex af,af'                     ; restore loop counter
204+  AA84 3D               dec a
205+  AA85 C2 72 AA         jp nz,sprites_marklinesforupdate0
206+  AA88 C9               ret
207+  AA89
208+  AA89              ;
209+  AA89              ; This routine returns a buffer address for (c, b) in de (c vert).
210+  AA89              ; For example: 0,0 will be at memory offset 0
211+  AA89              ; 1,0 (1 down) will be at memory offset 1
212+  AA89              ; 0,7 will be at memory offset 0
213+  AA89              ; 9,1 will be at memory offset 8+1
214+  AA89              ; 8,0 will be at memory offset 256
215+  AA89              ; 9,0 will be at memory offset 257
216+  AA89              ; Outputs:
217+  AA89              ; de - coords
218+  AA89              ;
219+  AA89              sprites_scadd:
220+  AA89 79               ld a,c               ; calculate vertical offset
221+  AA8A E6 F8            and 248             ;  to get nearest multiple of 8
222+  AA8C 0F               rrca
223+  AA8D 0F               rrca
224+  AA8E 0F               rrca                ; divide by 8
225+  AA8F 67               ld h,a
226+  AA90 78               ld a,b               ; calculate horizontal offset
227+  AA91 E6 F8            and 248             ;  to get nearest multiple of 8
228+  AA93 0F               rrca
229+  AA94 0F               rrca
230+  AA95 0F               rrca                ; divide by 8
231+  AA96 6F               ld l,a
232+  AA97 C5               push bc             ; store the screen coords
233+  AA98 44 4D            ld bc,hl            ; load bc with the character coords
234+  AA9A CD DE A8         call screen_getbufferaddress
235+  AA9D C1               pop bc              ; get back screen coords, de is now memory of character
236+  AA9E 79               ld a,c              ; now add the vertical within the cell
237+  AA9F E6 07            and 7
238+  AAA1 0F               rrca                ; multiply by 32.
239+  AAA2 0F               rrca
240+  AAA3 0F               rrca
241+  AAA4 6F               ld l,a
242+  AAA5 26 00            ld h,0
243+  AAA7 19               add hl,de
244+  AAA8 54 5D            ld de,hl
245+  AAAA C9               ret
246+  AAAB
247+  AAAB 00 00        origcoords   defb 0,0           ; general-use coordinates.
248+  AAAD
249+  AAAD 00           dispx   defb 0           ; general-use coordinates.
250+  AAAE 00           dispy   defb 0
251+  AAAF 00 00        sprtmp  defb 0,0           ; sprite temporary address.
252+  AAB1 00 00        sprtmp0  defb 0,0           ; sprite temporary address.
253+  AAB3
# file closed: screen/sprites.asm
 26   AAB3                  include "screen\titlescreen.asm"
# file opened: screen/titlescreen.asm
  1+  AAB3              ;
  2+  AAB3              ; Draws the title screen
  3+  AAB3              ;
  4+  AAB3              titlescreen_show:
  5+  AAB3 CD 2B AB         call titlescreen_init
  6+  AAB6 CD D4 AA         call titlescreen_drawtitle
  7+  AAB9 3E FA            ld a,250                              ; wait for 200 frames
  8+  AABB CD 52 80         call utilities_waitforkey_forframes   ; wait for keypress
  9+  AABE 7B               ld a,e
 10+  AABF FE 01            cp 1                                  ; was anything pressed?
 11+  AAC1 C8               ret z                                 ; end titlescreen if so
 12+  AAC2
 13+  AAC2 CD 3E AB         call titlescreen_alt_init             ; otherwise, draw alt screen
 14+  AAC5 CD F0 AA         call titlescreen_alt_drawtitle
 15+  AAC8 3E FA            ld a,250                              ; wait for 200 frames
 16+  AACA CD 52 80         call utilities_waitforkey_forframes   ; wait for keypress
 17+  AACD 7B               ld a,e
 18+  AACE FE 01            cp 1                                  ; was anything pressed?
 19+  AAD0 C2 B3 AA         jp nz,titlescreen_show                ; start again if not
 20+  AAD3 C9               ret
 21+  AAD4
 22+  AAD4              ;
 23+  AAD4              ; Draws the iconic logo
 24+  AAD4              ;
 25+  AAD4              titlescreen_drawtitle:
 26+  AAD4 06 67            ld b,103              ; number of points
 27+  AAD6 DD 21 4B AB      ld ix,titlescreen_logo_data
 28+  AADA              titlescreen_drawtitle0:
 29+  AADA C5               push bc
 30+  AADB DD 4E 00         ld c,(ix)                   ; got horiz
 31+  AADE DD 23            inc ix
 32+  AAE0 DD 46 00         ld b,(ix)                   ; got vert
 33+  AAE3 DD 23            inc ix
 34+  AAE5 CD 97 A8         call screen_getscreenattradress ; memory in de
 35+  AAE8 13               inc de                      ; slide one to the right, since I'm too lazy to change the data
 36+  AAE9 3E 13            ld a,19
 37+  AAEB 12               ld (de),a
 38+  AAEC C1               pop bc
 39+  AAED 10 EB            djnz titlescreen_drawtitle0 ; loop if we're not at the end
 40+  AAEF C9               ret
 41+  AAF0
 42+  AAF0              ;
 43+  AAF0              ; Draws the alternate title screen
 44+  AAF0              ;
 45+  AAF0              titlescreen_alt_drawtitle:
 46+  AAF0 21 3B 81         ld hl,string_alttitlescreen_1
 47+  AAF3 CD BE 84         call string_print
 48+  AAF6 21 47 81         ld hl,string_alttitlescreen_2
 49+  AAF9 CD BE 84         call string_print
 50+  AAFC 21 42 82         ld hl,string_alttitlescreen_3
 51+  AAFF CD BE 84         call string_print
 52+  AB02 06 20            ld b,32
 53+  AB04 3E 43            ld a,67
 54+  AB06 11 00 58         ld de,22528                         ; top row attrs here
 55+  AB09 CD 25 A8         call screen_setcolours
 56+  AB0C 06 20            ld b,32
 57+  AB0E 3E 46            ld a,70
 58+  AB10 11 A0 59         ld de,22528+416                     ; 13th row attrs here
 59+  AB13 CD 25 A8         call screen_setcolours
 60+  AB16 06 20            ld b,32
 61+  AB18 3E 43            ld a,67
 62+  AB1A 11 20 5A         ld de,22528+544                         ; 17th row attrs here
 63+  AB1D CD 25 A8         call screen_setcolours
 64+  AB20 06 20            ld b,32
 65+  AB22 3E 42            ld a,66
 66+  AB24 11 A0 5A         ld de,22528+672                         ; 21st row attrs here
 67+  AB27 CD 25 A8         call screen_setcolours
 68+  AB2A C9               ret
 69+  AB2B
 70+  AB2B              ;
 71+  AB2B              ; Initialises the screen
 72+  AB2B              ;
 73+  AB2B              titlescreen_init:
 74+  AB2B              ; We want a black screen.
 75+  AB2B 3E 0B            ld a,11             ; magenta ink (7) on blue paper (0),
 76+  AB2D                                      ; bright (64).
 77+  AB2D CD 67 80         call utilities_clearscreen
 78+  AB30 32 8D 5C         ld (23693),a        ; set our screen colours.
 79+  AB33 3E 01            ld a,1              ; 2 is the code for red.
 80+  AB35 D3 FE            out (254),a         ; write to port 254.
 81+  AB37
 82+  AB37 21 26 81         ld hl,string_titlescreen_copyright
 83+  AB3A CD BE 84         call string_print
 84+  AB3D
 85+  AB3D C9               ret
 86+  AB3E
 87+  AB3E              ;
 88+  AB3E              ; Initialises the screen
 89+  AB3E              ;
 90+  AB3E              titlescreen_alt_init:
 91+  AB3E              ; We want a black screen.
 92+  AB3E 3E 47            ld a,71             ; white ink (7) on black paper (0),
 93+  AB40                                      ; bright (64).
 94+  AB40 CD 67 80         call utilities_clearscreen
 95+  AB43 32 8D 5C         ld (23693),a        ; set our screen colours.
 96+  AB46 3E 00            ld a,0              ; 2 is the code for red.
 97+  AB48 D3 FE            out (254),a         ; write to port 254.
 98+  AB4A
 99+  AB4A C9               ret
100+  AB4B
101+  AB4B              ;
102+  AB4B              ; Horiz, vert
103+  AB4B              ;
104+  AB4B              titlescreen_logo_data:
105+  AB4B 08 00 09 00      defb 8,0,9,0,10,0,12,0,15,0,17,0,18,0,19,0
105+  AB4F 0A 00 0C 00
105+  AB53 0F 00 11 00
105+  AB57 12 00 13 00
106+  AB5B 09 01 0C 01      defb 9,1,12,1,15,1,17,1
106+  AB5F 0F 01 11 01
107+  AB63 09 02 0C 02      defb 9,2,12,2,13,2,14,2,15,2,17,2,18,2,19,2
107+  AB67 0D 02 0E 02
107+  AB6B 0F 02 11 02
107+  AB6F 12 02 13 02
108+  AB73 09 03 0C 03      defb 9,3,12,3,15,3,17,3
108+  AB77 0F 03 11 03
109+  AB7B 09 04 0C 04      defb 9,4,12,4,15,4,17,4,18,4,19,4
109+  AB7F 0F 04 11 04
109+  AB83 12 04 13 04
110+  AB87 00 06 01 06      defb 0,6,1,6,2,6,3,6,4,6,5,6,6,6,7,6,8,6,9,6,10,6,11,6
110+  AB8B 02 06 03 06
110+  AB8F 04 06 05 06
110+  AB93 06 06 07 06
110+  AB97 08 06 09 06
110+  AB9B 0A 06 0B 06
111+  AB9F 10 06 11 06      defb 16,6,17,6,18,6,19,6,20,6,21,6,22,6,23,6,24,6,25,6,26,6,27,6
111+  ABA3 12 06 13 06
111+  ABA7 14 06 15 06
111+  ABAB 16 06 17 06
111+  ABAF 18 06 19 06
111+  ABB3 1A 06 1B 06
112+  ABB7 02 07 02 08      defb 2,7,2,8,2,9,2,10,2,11,2,12,2,13,2,14,2,15,2,16,2,17,2,18,2,19,2,20,2,21
112+  ABBB 02 09 02 0A
112+  ABBF 02 0B 02 0C
112+  ABC3 02 0D 02 0E
112+  ABC7 02 0F 02 10
112+  ABCB 02 11 02 12
112+  ABCF 02 13 02 14
112+  ABD3 02 15
113+  ABD5 19 07 19 08      defb 25,7,25,8,25,9,25,10,25,11,25,12,25,13,25,14,25,15,25,16,25,17,25,18,25,19,25,20,25,21
113+  ABD9 19 09 19 0A
113+  ABDD 19 0B 19 0C
113+  ABE1 19 0D 19 0E
113+  ABE5 19 0F 19 10
113+  ABE9 19 11 19 12
113+  ABED 19 13 19 14
113+  ABF1 19 15
114+  ABF3 03 0B 04 0B      defb 3,11,4,11,5,11,6,11,7,11,8,11,9,11,10,11,11,11
114+  ABF7 05 0B 06 0B
114+  ABFB 07 0B 08 0B
114+  ABFF 09 0B 0A 0B
114+  AC03 0B 0B
115+  AC05 0B 07 0B 08      defb 11,7,11,8,11,9,11,10
115+  AC09 0B 09 0B 0A
116+  AC0D 10 0D 10 0F      defb 16,13,16,15,16,16,16,17,16,18,16,19
116+  AC11 10 10 10 11
116+  AC15 10 12 10 13
117+  AC19
# file closed: screen/titlescreen.asm
 27   AC19                  include "screen\lifescreen.asm"
# file opened: screen/lifescreen.asm
  1+  AC19              ;
  2+  AC19              ; Draws the life remaining screen
  3+  AC19              ;
  4+  AC19              lifescreen_draw:
  5+  AC19 CD 5F AC         call lifescreen_init
  6+  AC1C
  7+  AC1C 3A 19 BB         ld a,(game_currentplayer)             ; get the current player
  8+  AC1F C6 30            add 48                                ; add 48 to get char
  9+  AC21 21 48 83         ld hl,string_lifescreen_player+10
 10+  AC24 77               ld (hl),a                             ; load this to the string we're about to show
 11+  AC25
 12+  AC25 21 3E 83         ld hl,string_lifescreen_player
 13+  AC28 CD BE 84         call string_print
 14+  AC2B
 15+  AC2B 3A 50 BB         ld a,(player+9)                       ; get the current player lives
 16+  AC2E C6 30            add 48                                ; add 48 to get the character
 17+  AC30 FE 31            cp 49
 18+  AC32 C2 45 AC         jp nz,lifescreen_draw0
 19+  AC35 21 58 83         ld hl,string_lifescreen_lastman
 20+  AC38
 21+  AC38 06 08            ld b,8
 22+  AC3A 3E 0A            ld a,10                                ; set red
 23+  AC3C 11 6C 58         ld de,22528+108                        ; attrs here
 24+  AC3F CD 25 A8         call screen_setcolours
 25+  AC42
 26+  AC42 C3 4C AC         jp lifescreen_draw1
 27+  AC45              lifescreen_draw0:
 28+  AC45 21 4D 83         ld hl,string_lifescreen_lives+2       ; not last man, so use the normal view
 29+  AC48 77               ld (hl),a                             ; load this to the string we're about to show
 30+  AC49 21 4B 83         ld hl,string_lifescreen_lives
 31+  AC4C              lifescreen_draw1:
 32+  AC4C CD BE 84         call string_print
 33+  AC4F
 34+  AC4F 3E 86            ld a,134
 35+  AC51 11 0B 58         ld de, 22528+11     ; get the colour for the top text
 36+  AC54 06 0A            ld b,10
 37+  AC56 CD 25 A8         call screen_setcolours
 38+  AC59
 39+  AC59 3E 64            ld a,100                              ; wait for 200 frames
 40+  AC5B CD 52 80         call utilities_waitforkey_forframes   ; wait for keypress
 41+  AC5E
 42+  AC5E C9               ret
 43+  AC5F
 44+  AC5F              ;
 45+  AC5F              ; Initialises the screen
 46+  AC5F              ;
 47+  AC5F              lifescreen_init:
 48+  AC5F              ; We want a blue screen.
 49+  AC5F                  ;call $0D6B
 50+  AC5F 3E 0E            ld a,14             ; yellow ink (6) on blue paper (1),
 51+  AC61                                      ; bright (64).
 52+  AC61 CD 67 80         call utilities_clearscreen
 53+  AC64 32 8D 5C         ld (23693),a        ; set our screen colours.
 54+  AC67 3E 01            ld a,1              ; 1 is the code for blue.
 55+  AC69 D3 FE            out (254),a         ; write to port 254.
 56+  AC6B                  ;call 3503           ; ROM routine - clears screen, opens chan 2.
 57+  AC6B
 58+  AC6B C9               ret
# file closed: screen/lifescreen.asm
 28   AC6C                  include "screen\gameover.asm"
# file opened: screen/gameover.asm
  1+  AC6C              ;
  2+  AC6C              ; Draws the game over screen
  3+  AC6C              ;
  4+  AC6C              gameover_draw:
  5+  AC6C CD 1D C2         call scores_processhighscores
  6+  AC6F
  7+  AC6F              gameover_draw0:
  8+  AC6F CD AF AC         call gameover_enterhighscores
  9+  AC72
 10+  AC72 CD 4D AD         call gameover_init
 11+  AC75
 12+  AC75 21 63 83         ld hl,string_gameoverscreen_gameover
 13+  AC78 CD BE 84         call string_print
 14+  AC7B
 15+  AC7B 21 6F 83         ld hl,string_gameoverscreen_copyright
 16+  AC7E CD BE 84         call string_print
 17+  AC81
 18+  AC81 CD 92 AC         call gameover_commontext
 19+  AC84
 20+  AC84 06 0B            ld b,11
 21+  AC86 3E 42            ld a,66
 22+  AC88 11 2B 58         ld de,22528+43                         ; attrs here
 23+  AC8B CD 25 A8         call screen_setcolours
 24+  AC8E CD 47 80         call utilities_waitforkey   ; wait for keypress
 25+  AC91
 26+  AC91 C9               ret
 27+  AC92
 28+  AC92              ;
 29+  AC92              ; Draws text shared by the game over and high score screens
 30+  AC92              ;
 31+  AC92              gameover_commontext:
 32+  AC92 CD F7 A7         call screen_setuptext       ; show scores
 33+  AC95 CD E7 C1         call scores_printscores     ; print the current scores
 34+  AC98
 35+  AC98 21 97 83         ld hl,string_gameover_credits
 36+  AC9B CD BE 84         call string_print
 37+  AC9E
 38+  AC9E 21 83 83         ld hl,string_gameoverscreen_bestscores
 39+  ACA1 CD BE 84         call string_print
 40+  ACA4
 41+  ACA4 06 20            ld b,32
 42+  ACA6 3E 45            ld a,69
 43+  ACA8 11 C0 5A         ld de,22528+704                         ; attrs here
 44+  ACAB CD 25 A8         call screen_setcolours
 45+  ACAE
 46+  ACAE C9               ret
 47+  ACAF
 48+  ACAF              ;
 49+  ACAF              ; If required, enter highscore
 50+  ACAF              ;
 51+  ACAF              gameover_enterhighscores:
 52+  ACAF                  ; check if we need to enter initial
 53+  ACAF 3A 1C C2         ld a,(scores_highscoretmp)
 54+  ACB2 FE 00            cp 0
 55+  ACB4 C8               ret z
 56+  ACB5 CD E3 AC         call gameover_enterhighscores_init
 57+  ACB8 3A 1C C2         ld a,(scores_highscoretmp)
 58+  ACBB 3D               dec a
 59+  ACBC 3D               dec a
 60+  ACBD 3D               dec a                                   ; get high score location back to position of name
 61+  ACBE 16 00            ld d,0
 62+  ACC0 5F               ld e,a
 63+  ACC1 21 A3 C1         ld hl,scores_table
 64+  ACC4 19               add hl,de                               ; load memory into hl
 65+  ACC5 08               ex af,af'
 66+  ACC6 06 0F            ld b,15
 67+  ACC8 CD 82 80         call utilities_pauseforframes           ; pause for a little bit
 68+  ACCB 06 03            ld b,3                                  ; collect three chars
 69+  ACCD              gameover_draw2:
 70+  ACCD C5               push bc
 71+  ACCE E5               push hl
 72+  ACCF CD 86 80         call utilities_readkey               ; get key into a
 73+  ACD2 E1               pop hl
 74+  ACD3 77               ld (hl),a
 75+  ACD4 23               inc hl
 76+  ACD5 E5               push hl
 77+  ACD6 CD 09 C2         call scores_showtable
 78+  ACD9 E1               pop hl
 79+  ACDA 06 0F            ld b,15
 80+  ACDC CD 82 80         call utilities_pauseforframes
 81+  ACDF C1               pop bc
 82+  ACE0 10 EB            djnz gameover_draw2
 83+  ACE2 C9               ret
 84+  ACE3
 85+  ACE3              ;
 86+  ACE3              ; Displays the screen text for high score entry
 87+  ACE3              ;
 88+  ACE3              gameover_enterhighscores_init:
 89+  ACE3
 90+  ACE3 CD 4D AD         call gameover_init
 91+  ACE6 CD 92 AC         call gameover_commontext
 92+  ACE9
 93+  ACE9 21 A3 83         ld hl,string_highscore_congratulations
 94+  ACEC CD BE 84         call string_print
 95+  ACEF
 96+  ACEF 3A 19 BB         ld a,(game_currentplayer)
 97+  ACF2 FE 01            cp 1
 98+  ACF4 21 B5 83         ld hl,string_highscore_player1
 99+  ACF7 C3 FD AC         jp gameover_enterhighscores_init1
100+  ACFA              gameover_enterhighscores_init0:
101+  ACFA 21 C0 83         ld hl,string_highscore_player2
102+  ACFD              gameover_enterhighscores_init1:
103+  ACFD CD BE 84         call string_print
104+  AD00 06 60            ld b,96
105+  AD02 3E 43            ld a,67
106+  AD04 11 A0 58         ld de,22528+160                         ; attrs here
107+  AD07 CD 25 A8         call screen_setcolours
108+  AD0A
109+  AD0A 21 CB 83         ld hl,string_highscore_youhaveearned
110+  AD0D CD BE 84         call string_print
111+  AD10
112+  AD10 3A 1C C2         ld a,(scores_highscoretmp)
113+  AD13 FE 05            cp 5
114+  AD15 CA 23 AD         jp z, gameover_enterhighscores_init2    ; first place
115+  AD18 FE 11            cp 17
116+  AD1A CA 29 AD         jp z, gameover_enterhighscores_init3    ; 2nd place
117+  AD1D 21 07 84         ld hl,string_highscore_place3           ; 3rd place
118+  AD20 C3 2F AD         jp gameover_enterhighscores_init4
119+  AD23              gameover_enterhighscores_init2
120+  AD23 21 DD 83         ld hl,string_highscore_place1
121+  AD26 C3 2F AD         jp gameover_enterhighscores_init4
122+  AD29              gameover_enterhighscores_init3
123+  AD29 21 F2 83         ld hl,string_highscore_place2
124+  AD2C C3 2F AD         jp gameover_enterhighscores_init4
125+  AD2F              gameover_enterhighscores_init4
126+  AD2F CD BE 84         call string_print
127+  AD32
128+  AD32 06 60            ld b,96
129+  AD34 3E 42            ld a,66
130+  AD36 11 40 59         ld de,22528+320                         ; attrs here
131+  AD39 CD 25 A8         call screen_setcolours
132+  AD3C
133+  AD3C 21 1C 84         ld hl,string_highscore_pleaseenter
134+  AD3F CD BE 84         call string_print
135+  AD42
136+  AD42 06 60            ld b,96
137+  AD44 3E 46            ld a,70
138+  AD46 11 E0 59         ld de,22528+480                         ; attrs here
139+  AD49 CD 25 A8         call screen_setcolours
140+  AD4C C9               ret
141+  AD4D
142+  AD4D              ;
143+  AD4D              ; Initialises the screen
144+  AD4D              ;
145+  AD4D              gameover_init:
146+  AD4D              ; We want a black screen.
147+  AD4D 3E 47            ld a,71             ; white ink (7) on black paper (0),
148+  AD4F                                      ; bright (64).
149+  AD4F CD 67 80         call utilities_clearscreen
150+  AD52 32 8D 5C         ld (23693),a        ; set our screen colours.
151+  AD55 3E 00            ld a,0              ; 2 is the code for red.
152+  AD57 D3 FE            out (254),a         ; write to port 254.
153+  AD59 C9               ret
# file closed: screen/gameover.asm
 29   AD5A                  include "screen\endlevel.asm"
# file opened: screen/endlevel.asm
  1+  AD5A              ;
  2+  AD5A              ; Draws the level transition screen
  3+  AD5A              ;
  4+  AD5A              endlevel_draw:
  5+  AD5A CD 50 AE         call endlevel_init
  6+  AD5D CD 39 AE         call endlevel_commontext
  7+  AD60
  8+  AD60 21 A3 83         ld hl,string_highscore_congratulations
  9+  AD63 CD BE 84         call string_print
 10+  AD66
 11+  AD66 3A 19 BB         ld a,(game_currentplayer)
 12+  AD69 FE 01            cp 1
 13+  AD6B 21 B5 83         ld hl,string_highscore_player1
 14+  AD6E C3 74 AD         jp endlevel_init1
 15+  AD71              endlevel_init0:
 16+  AD71 21 C0 83         ld hl,string_highscore_player2
 17+  AD74              endlevel_init1:
 18+  AD74 CD BE 84         call string_print
 19+  AD77
 20+  AD77 21 39 84         ld hl,string_endlevel_youhaveearned
 21+  AD7A CD BE 84         call string_print
 22+  AD7D
 23+  AD7D CD D8 AD         call endlevel_workoutbonus
 24+  AD80 D5               push de
 25+  AD81 08               ex af,af'                               ; store the a value for later
 26+  AD82 CD BE 84         call string_print
 27+  AD85 D1               pop de
 28+  AD86 62 6B            ld hl,de                                ; get the points text into de
 29+  AD88 CD BE 84         call string_print
 30+  AD8B
 31+  AD8B 21 A4 84         ld hl, string_endlevel_anothergo
 32+  AD8E CD BE 84         call string_print
 33+  AD91
 34+  AD91 06 20            ld b,32
 35+  AD93 3E 63            ld a,99
 36+  AD95 11 60 59         ld de,22528+352                         ; attrs here
 37+  AD98 CD 25 A8         call screen_setcolours
 38+  AD9B
 39+  AD9B 06 20            ld b,32
 40+  AD9D 3E 65            ld a,101
 41+  AD9F 11 A0 59         ld de,22528+416                         ; attrs here
 42+  ADA2 CD 25 A8         call screen_setcolours
 43+  ADA5
 44+  ADA5 06 20            ld b,32
 45+  ADA7 3E 63            ld a,99
 46+  ADA9 11 E0 59         ld de,22528+480                         ; attrs here
 47+  ADAC CD 25 A8         call screen_setcolours
 48+  ADAF
 49+  ADAF 06 20            ld b,32
 50+  ADB1 3E 62            ld a,98
 51+  ADB3 11 40 5A         ld de,22528+576                         ; attrs here
 52+  ADB6 CD 25 A8         call screen_setcolours
 53+  ADB9
 54+  ADB9 08               ex af,af'                               ; get back a value with bonus type
 55+  ADBA 06 14            ld b,20
 56+  ADBC CD 82 80         call utilities_pauseforframes
 57+  ADBF
 58+  ADBF 47               ld b,a                      ; put the bonus count in b
 59+  ADC0              endlevel_init2:
 60+  ADC0 C5               push bc
 61+  ADC1 06 01            ld b,1
 62+  ADC3 CD C7 C1         call scores_addthousands
 63+  ADC6 CD F7 BB         call player_recordcurrentscore
 64+  ADC9 CD E7 C1         call scores_printscores     ; print the current scores
 65+  ADCC 06 0A            ld b,10
 66+  ADCE CD 82 80         call utilities_pauseforframes
 67+  ADD1 C1               pop bc
 68+  ADD2 10 EC            djnz endlevel_init2
 69+  ADD4
 70+  ADD4 CD 47 80         call utilities_waitforkey   ; wait for keypress
 71+  ADD7
 72+  ADD7 C9               ret
 73+  ADD8
 74+  ADD8              ;
 75+  ADD8              ; Works out the bonus
 76+  ADD8              ; Outputs:
 77+  ADD8              ; a = 15 (all seven)
 78+  ADD8              ; a = 10 (3 large or 4 small)
 79+  ADD8              ; a = 5 (1 large diamond)
 80+  ADD8              ; hl - pointer to bonus text
 81+  ADD8              ; de - pointer to points text
 82+  ADD8              ;
 83+  ADD8              endlevel_workoutbonus:
 84+  ADD8 21 C6 B3         ld hl,level01diamonds+2     ; location of state of first diamond
 85+  ADDB 06 03            ld b,3                      ; number to check
 86+  ADDD 16 00            ld d,0                      ; zero diamond count
 87+  ADDF              endlevel_workoutbonus0:
 88+  ADDF 7E               ld a,(hl)                   ; get state
 89+  ADE0 FE 01            cp 1
 90+  ADE2 C2 E6 AD         jp nz,endlevel_workoutbonus1 ; if not, move on
 91+  ADE5 14               inc d                       ; increment diamond count
 92+  ADE6              endlevel_workoutbonus1:
 93+  ADE6 23               inc hl
 94+  ADE7 23               inc hl
 95+  ADE8 23               inc hl
 96+  ADE9 23               inc hl
 97+  ADEA 23               inc hl                      ; get to next state
 98+  ADEB 10 F2            djnz endlevel_workoutbonus0
 99+  ADED
100+  ADED 21 D6 B3         ld hl,level01gems+2     ; location of state of first gem
101+  ADF0 06 04            ld b,4                      ; number to check
102+  ADF2 1E 00            ld e,0                      ; zero gem count
103+  ADF4              endlevel_workoutbonus2:
104+  ADF4 7E               ld a,(hl)                   ; get state
105+  ADF5 FE 01            cp 1
106+  ADF7 C2 FB AD         jp nz,endlevel_workoutbonus3 ; if not, move on
107+  ADFA 1C               inc e                       ; increment diamond count
108+  ADFB              endlevel_workoutbonus3:
109+  ADFB 23               inc hl
110+  ADFC 23               inc hl
111+  ADFD 23               inc hl
112+  ADFE 23               inc hl
113+  ADFF 23               inc hl                     ; get to next state
114+  AE00 10 F2            djnz endlevel_workoutbonus2
115+  AE02
116+  AE02 7A               ld a,d
117+  AE03 83               add e
118+  AE04 FE 07            cp 7                        ; check for max bonus
119+  AE06 C2 12 AE         jp nz,endlevel_workoutbonus4 ;
120+  AE09 3E 0F            ld a,15
121+  AE0B 21 69 84         ld hl, string_endlevel_bonus3
122+  AE0E 11 95 84         ld de, string_endlevel_points3
123+  AE11 C9               ret                         ; return with bonus of 15
124+  AE12              endlevel_workoutbonus4:
125+  AE12 7A               ld a,d                      ; check for for diamonds
126+  AE13 FE 03            cp 3
127+  AE15 C2 21 AE         jp nz,endlevel_workoutbonus5
128+  AE18 3E 0A            ld a,10
129+  AE1A 21 5A 84         ld hl, string_endlevel_bonus2
130+  AE1D 11 86 84         ld de, string_endlevel_points2
131+  AE20 C9               ret                         ; return with bonus of ten
132+  AE21              endlevel_workoutbonus5:
133+  AE21 7B               ld a,e                      ; check for four gems
134+  AE22 FE 04            cp 4
135+  AE24 C2 30 AE         jp nz,endlevel_workoutbonus6
136+  AE27 3E 0A            ld a,10
137+  AE29 21 5A 84         ld hl, string_endlevel_bonus2
138+  AE2C 11 86 84         ld de, string_endlevel_points2
139+  AE2F C9               ret                         ; return with bonus of 10
140+  AE30              endlevel_workoutbonus6:
141+  AE30 3E 05            ld a,5                      ; otherwise, bonus is 5
142+  AE32 21 4B 84         ld hl, string_endlevel_bonus1
143+  AE35 11 78 84         ld de, string_endlevel_points1
144+  AE38 C9               ret
145+  AE39
146+  AE39              ;
147+  AE39              ; Draws text shared by the game over and high score screens
148+  AE39              ;
149+  AE39              endlevel_commontext:
150+  AE39 CD F7 A7         call screen_setuptext       ; show scores
151+  AE3C CD E7 C1         call scores_printscores     ; print the current scores
152+  AE3F
153+  AE3F 21 83 83         ld hl,string_gameoverscreen_bestscores
154+  AE42 CD BE 84         call string_print
155+  AE45
156+  AE45 06 20            ld b,32
157+  AE47 3E 45            ld a,69
158+  AE49 11 C0 5A         ld de,22528+704                         ; attrs here
159+  AE4C CD 25 A8         call screen_setcolours
160+  AE4F
161+  AE4F C9               ret
162+  AE50
163+  AE50              ;
164+  AE50              ; Initialises the screen
165+  AE50              ;
166+  AE50              endlevel_init:
167+  AE50              ; We want a green screen.
168+  AE50 3E 61            ld a,97             ; white ink (7) on black paper (0),
169+  AE52                                      ; bright (64).
170+  AE52 CD 67 80         call utilities_clearscreen
171+  AE55 32 8D 5C         ld (23693),a        ; set our screen colours.
172+  AE58 3E 00            ld a,0              ; 2 is the code for red.
173+  AE5A D3 FE            out (254),a         ; write to port 254.
174+  AE5C C9               ret
# file closed: screen/endlevel.asm
 30   AE5D
 31   AE5D                  include "sound\sound.asm"
# file opened: sound/sound.asm
  1+  AE5D              sound_gemcollected:
  2+  AE5D 21 C8 00         ld hl,200 ; pitch.
  3+  AE60 11 3E 00         ld de,62 ; duration.
  4+  AE63 CD B5 03         call 949 ; ROM beeper routine.
  5+  AE66 C9               ret
  6+  AE67
  7+  AE67              sound_pitchbend:
  8+  AE67 21 F4 01         ld hl,500 ; starting pitch.
  9+  AE6A 06 FA            ld b,250 ; length of pitch bend.
 10+  AE6C              sound_pitchbend0:
 11+  AE6C C5                push bc
 12+  AE6D E5               push hl ; store pitch.
 13+  AE6E 11 01 00         ld de,1 ; very short duration.
 14+  AE71 CD B5 03         call 949 ; ROM beeper routine.
 15+  AE74 E1               pop hl ; restore pitch.
 16+  AE75 23               inc hl ; pitch going up.
 17+  AE76 C1               pop bc
 18+  AE77 10 F3            djnz sound_pitchbend0 ; repeat.
 19+  AE79 C9               ret
 20+  AE7A
 21+  AE7A              sound_rockfell:
 22+  AE7A 08               ex af,af'
 23+  AE7B 1E 32            ld e,50 ; repeat 250 times.
 24+  AE7D 21 00 00         ld hl,0 ; start pointer in ROM.
 25+  AE80 D5           sound_rockfell2 push de
 26+  AE81 06 20            ld b,32 ; length of step.
 27+  AE83 C5           sound_rockfell0 push bc
 28+  AE84 7E               ld a,(hl) ; next "random" number.
 29+  AE85 23               inc hl ; pointer.
 30+  AE86 E6 F8            and 248 ; we want a black border.
 31+  AE88 D3 FE            out (254),a ; write to speaker.
 32+  AE8A 7B               ld a,e ; as e gets smaller...
 33+  AE8B 2F               cpl ; ...we increase the delay.
 34+  AE8C 3D           sound_rockfell1 dec a ; decrement loop counter.
 35+  AE8D 20 FD            jr nz,sound_rockfell1 ; delay loop.
 36+  AE8F C1               pop bc
 37+  AE90 10 F1            djnz sound_rockfell0 ; next step.
 38+  AE92 D1               pop de
 39+  AE93 7B               ld a,e
 40+  AE94 D6 18            sub 24 ; size of step.
 41+  AE96 FE 1E            cp 30 ; end of range.
 42+  AE98 CA A9 AE         jp z,sound_rockfell5
 43+  AE9B DA A9 AE         jp c, sound_rockfell5
 44+  AE9E 5F               ld e,a
 45+  AE9F 2F               cpl
 46+  AEA0 06 28        sound_rockfell3 ld b,40 ; silent period.
 47+  AEA2 10 FE        sound_rockfell4 djnz sound_rockfell4
 48+  AEA4 3D               dec a
 49+  AEA5 20 F9            jr nz,sound_rockfell3
 50+  AEA7 18 D7            jr sound_rockfell2
 51+  AEA9              sound_rockfell5
 52+  AEA9 08               ex af,af'
 53+  AEAA C9               ret
 54+  AEAB
# file closed: sound/sound.asm
 32   AEAB
 33   AEAB                  include "leveldata\level01.asm"
# file opened: leveldata/level01.asm
  1+  AEAB              ; ###############################################################
  2+  AEAB              ; Data for level 1
  3+  AEAB              ; ###############################################################
  4+  AEAB              level01:
  5+  AEAB
  6+  AEAB                  ;defb 09,04,04,04,04,04,04,04,04,04,04,04,04,04,04,09,09,04,04,04,04,04,04,04,04,04,04,04,04,04,04,09
  7+  AEAB
  8+  AEAB 00 00 05 05      defb 00,00,05,05,05,05,05,05,05,05,05,05,05,05,02,01,01,01,03,05,05,05,05,05,05,05,05,05,05,05,00,00
  8+  AEAF 05 05 05 05
  8+  AEB3 05 05 05 05
  8+  AEB7 05 05 02 01
  8+  AEBB 01 01 03 05
  8+  AEBF 05 05 05 05
  8+  AEC3 05 05 05 05
  8+  AEC7 05 05 00 00
  9+  AECB 00 00 05 05      defb 00,00,05,05,05,05,05,05,05,05,05,05,02,01,01,01,01,01,01,01,03,05,05,05,05,05,05,05,05,05,00,00
  9+  AECF 05 05 05 05
  9+  AED3 05 05 05 05
  9+  AED7 02 01 01 01
  9+  AEDB 01 01 01 01
  9+  AEDF 03 05 05 05
  9+  AEE3 05 05 05 05
  9+  AEE7 05 05 00 00
 10+  AEEB 00 00 05 05      defb 00,00,05,05,05,05,05,05,05,05,02,01,01,01,01,01,01,01,01,01,01,01,03,05,13,13,13,13,13,13,00,00
 10+  AEEF 05 05 05 05
 10+  AEF3 05 05 02 01
 10+  AEF7 01 01 01 01
 10+  AEFB 01 01 01 01
 10+  AEFF 01 01 03 05
 10+  AF03 0D 0D 0D 0D
 10+  AF07 0D 0D 00 00
 11+  AF0B 00 00 01 01      defb 00,00,01,01,01,01,00,01,01,01,01,01,01,01,01,01,01,01,01,01,01,01,01,03,05,05,05,05,05,05,00,00
 11+  AF0F 01 01 00 01
 11+  AF13 01 01 01 01
 11+  AF17 01 01 01 01
 11+  AF1B 01 01 01 01
 11+  AF1F 01 01 01 03
 11+  AF23 05 05 05 05
 11+  AF27 05 05 00 00
 12+  AF2B 00 00 01 01      defb 00,00,01,01,04,04,04,04,04,04,01,01,01,01,01,01,01,01,01,01,01,01,01,01,01,01,01,01,00,01,00,00
 12+  AF2F 04 04 04 04
 12+  AF33 04 04 01 01
 12+  AF37 01 01 01 01
 12+  AF3B 01 01 01 01
 12+  AF3F 01 01 01 01
 12+  AF43 01 01 01 01
 12+  AF47 00 01 00 00
 13+  AF4B 00 00 01 04      defb 00,00,01,04,04,04,04,04,04,04,04,04,01,01,01,01,01,01,01,01,01,01,01,01,00,00,00,00,00,01,00,00
 13+  AF4F 04 04 04 04
 13+  AF53 04 04 04 04
 13+  AF57 01 01 01 01
 13+  AF5B 01 01 01 01
 13+  AF5F 01 01 01 01
 13+  AF63 00 00 00 00
 13+  AF67 00 01 00 00
 14+  AF6B 00 00 01 04      defb 00,00,01,04,04,01,01,01,01,01,04,04,04,04,01,01,01,01,01,01,01,00,00,00,00,01,01,01,01,01,00,00
 14+  AF6F 04 01 01 01
 14+  AF73 01 01 04 04
 14+  AF77 04 04 01 01
 14+  AF7B 01 01 01 01
 14+  AF7F 01 00 00 00
 14+  AF83 00 01 01 01
 14+  AF87 01 01 00 00
 15+  AF8B 00 00 01 04      defb 00,00,01,04,04,04,04,04,04,01,04,04,04,04,04,04,04,04,00,00,00,00,04,04,04,04,04,04,04,01,00,00
 15+  AF8F 04 04 04 04
 15+  AF93 04 01 04 04
 15+  AF97 04 04 04 04
 15+  AF9B 04 04 00 00
 15+  AF9F 00 00 04 04
 15+  AFA3 04 04 04 04
 15+  AFA7 04 01 00 00
 16+  AFAB 00 00 01 01      defb 00,00,01,01,01,04,01,01,01,01,04,04,04,04,04,04,04,04,00,04,04,04,04,04,04,04,04,04,04,01,00,00
 16+  AFAF 01 04 01 01
 16+  AFB3 01 01 04 04
 16+  AFB7 04 04 04 04
 16+  AFBB 04 04 00 04
 16+  AFBF 04 04 04 04
 16+  AFC3 04 04 04 04
 16+  AFC7 04 01 00 00
 17+  AFCB 00 00 01 00      defb 00,00,01,00,00,00,00,00,00,04,04,04,04,04,04,04,04,04,00,04,04,04,04,04,04,04,04,04,04,01,00,00
 17+  AFCF 00 00 00 00
 17+  AFD3 00 04 04 04
 17+  AFD7 04 04 04 04
 17+  AFDB 04 04 00 04
 17+  AFDF 04 04 04 04
 17+  AFE3 04 04 04 04
 17+  AFE7 04 01 00 00
 18+  AFEB 00 00 01 15      defb 00,00,01,21,21,21,21,21,21,01,04,04,04,04,04,04,04,04,00,04,04,04,04,04,04,04,04,04,04,01,00,00
 18+  AFEF 15 15 15 15
 18+  AFF3 15 01 04 04
 18+  AFF7 04 04 04 04
 18+  AFFB 04 04 00 04
 18+  AFFF 04 04 04 04
 18+  B003 04 04 04 04
 18+  B007 04 01 00 00
 19+  B00B 00 00 01 00      defb 00,00,01,00,00,00,00,00,00,01,04,04,04,04,04,04,04,04,00,04,04,04,04,04,04,00,00,00,00,01,00,00
 19+  B00F 00 00 00 00
 19+  B013 00 01 04 04
 19+  B017 04 04 04 04
 19+  B01B 04 04 00 04
 19+  B01F 04 04 04 04
 19+  B023 04 00 00 00
 19+  B027 00 01 00 00
 20+  B02B 00 00 01 00      defb 00,00,01,00,00,00,00,00,00,01,04,04,04,04,04,04,04,04,00,04,04,04,04,04,04,00,04,04,00,01,00,00
 20+  B02F 00 00 00 00
 20+  B033 00 01 04 04
 20+  B037 04 04 04 04
 20+  B03B 04 04 00 04
 20+  B03F 04 04 04 04
 20+  B043 04 00 04 04
 20+  B047 00 01 00 00
 21+  B04B 00 00 01 06      defb 00,00,01,06,06,06,06,06,06,01,04,04,04,04,04,04,04,04,00,04,04,04,04,04,04,00,04,04,00,01,00,00
 21+  B04F 06 06 06 06
 21+  B053 06 01 04 04
 21+  B057 04 04 04 04
 21+  B05B 04 04 00 04
 21+  B05F 04 04 04 04
 21+  B063 04 00 04 04
 21+  B067 00 01 00 00
 22+  B06B 00 00 01 1A      defb 00,00,01,26,26,26,26,26,26,01,04,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,04,04,00,01,00,00
 22+  B06F 1A 1A 1A 1A
 22+  B073 1A 01 04 00
 22+  B077 00 00 00 00
 22+  B07B 00 00 00 00
 22+  B07F 00 00 00 00
 22+  B083 00 00 04 04
 22+  B087 00 01 00 00
 23+  B08B 00 00 01 1A      defb 00,00,01,26,26,26,26,26,26,01,04,00,04,04,04,04,04,04,00,04,04,04,00,04,04,04,04,04,00,01,00,00
 23+  B08F 1A 1A 1A 1A
 23+  B093 1A 01 04 00
 23+  B097 04 04 04 04
 23+  B09B 04 04 00 04
 23+  B09F 04 04 00 04
 23+  B0A3 04 04 04 04
 23+  B0A7 00 01 00 00
 24+  B0AB 00 00 01 1A      defb 00,00,01,26,26,26,26,26,26,01,04,00,04,04,04,04,04,04,00,04,04,04,00,04,04,04,04,04,00,01,00,00
 24+  B0AF 1A 1A 1A 1A
 24+  B0B3 1A 01 04 00
 24+  B0B7 04 04 04 04
 24+  B0BB 04 04 00 04
 24+  B0BF 04 04 00 04
 24+  B0C3 04 04 04 04
 24+  B0C7 00 01 00 00
 25+  B0CB 00 00 01 01      defb 00,00,01,01,01,01,01,01,01,01,04,00,04,04,04,04,04,04,00,04,04,04,00,04,04,04,04,04,00,01,00,00
 25+  B0CF 01 01 01 01
 25+  B0D3 01 01 04 00
 25+  B0D7 04 04 04 04
 25+  B0DB 04 04 00 04
 25+  B0DF 04 04 00 04
 25+  B0E3 04 04 04 04
 25+  B0E7 00 01 00 00
 26+  B0EB 00 00 01 04      defb 00,00,01,04,04,04,04,04,04,04,04,00,04,04,04,04,04,04,00,04,04,04,00,00,00,00,04,04,04,01,00,00
 26+  B0EF 04 04 04 04
 26+  B0F3 04 04 04 00
 26+  B0F7 04 04 04 04
 26+  B0FB 04 04 00 04
 26+  B0FF 04 04 00 00
 26+  B103 00 00 04 04
 26+  B107 04 01 00 00
 27+  B10B 00 00 01 04      defb 00,00,01,04,04,04,00,00,00,00,00,00,04,04,04,04,04,04,00,04,04,04,04,04,04,00,04,04,04,01,00,00
 27+  B10F 04 04 00 00
 27+  B113 00 00 00 00
 27+  B117 04 04 04 04
 27+  B11B 04 04 00 04
 27+  B11F 04 04 04 04
 27+  B123 04 00 04 04
 27+  B127 04 01 00 00
 28+  B12B 00 00 01 04      defb 00,00,01,04,04,04,00,04,04,04,04,04,04,04,04,04,04,04,00,04,04,04,04,04,04,00,04,04,04,01,00,00
 28+  B12F 04 04 00 04
 28+  B133 04 04 04 04
 28+  B137 04 04 04 04
 28+  B13B 04 04 00 04
 28+  B13F 04 04 04 04
 28+  B143 04 00 04 04
 28+  B147 04 01 00 00
 29+  B14B 00 00 01 04      defb 00,00,01,04,04,04,00,04,04,04,01,01,01,01,01,01,01,01,01,01,01,01,01,01,04,00,04,04,04,01,00,00
 29+  B14F 04 04 00 04
 29+  B153 04 04 01 01
 29+  B157 01 01 01 01
 29+  B15B 01 01 01 01
 29+  B15F 01 01 01 01
 29+  B163 04 00 04 04
 29+  B167 04 01 00 00
 30+  B16B 00 00 01 04      defb 00,00,01,04,04,04,00,04,04,04,01,00,00,00,00,00,00,00,00,00,00,00,00,01,04,00,04,04,04,01,00,00
 30+  B16F 04 04 00 04
 30+  B173 04 04 01 00
 30+  B177 00 00 00 00
 30+  B17B 00 00 00 00
 30+  B17F 00 00 00 01
 30+  B183 04 00 04 04
 30+  B187 04 01 00 00
 31+  B18B 00 00 01 04      defb 00,00,01,04,04,04,00,04,04,04,01,00,00,00,00,00,00,00,00,00,00,00,00,01,04,00,04,04,04,01,00,00
 31+  B18F 04 04 00 04
 31+  B193 04 04 01 00
 31+  B197 00 00 00 00
 31+  B19B 00 00 00 00
 31+  B19F 00 00 00 01
 31+  B1A3 04 00 04 04
 31+  B1A7 04 01 00 00
 32+  B1AB 00 00 01 04      defb 00,00,01,04,04,04,00,04,04,04,01,00,00,00,00,00,00,00,00,00,00,00,00,01,04,00,04,04,04,01,00,00
 32+  B1AF 04 04 00 04
 32+  B1B3 04 04 01 00
 32+  B1B7 00 00 00 00
 32+  B1BB 00 00 00 00
 32+  B1BF 00 00 00 01
 32+  B1C3 04 00 04 04
 32+  B1C7 04 01 00 00
 33+  B1CB 00 00 01 04      defb 00,00,01,04,04,04,00,04,04,04,04,00,00,00,00,00,00,00,00,00,00,00,00,04,04,04,04,04,04,01,00,00
 33+  B1CF 04 04 00 04
 33+  B1D3 04 04 04 00
 33+  B1D7 00 00 00 00
 33+  B1DB 00 00 00 00
 33+  B1DF 00 00 00 04
 33+  B1E3 04 04 04 04
 33+  B1E7 04 01 00 00
 34+  B1EB 00 00 01 04      defb 00,00,01,04,04,04,04,04,04,04,01,00,00,00,00,00,00,00,00,00,00,00,00,01,04,04,04,04,04,01,00,00
 34+  B1EF 04 04 04 04
 34+  B1F3 04 04 01 00
 34+  B1F7 00 00 00 00
 34+  B1FB 00 00 00 00
 34+  B1FF 00 00 00 01
 34+  B203 04 04 04 04
 34+  B207 04 01 00 00
 35+  B20B 00 00 01 04      defb 00,00,01,04,04,04,04,04,04,04,01,00,00,00,01,00,00,00,00,01,00,00,00,01,04,04,04,04,04,01,00,00
 35+  B20F 04 04 04 04
 35+  B213 04 04 01 00
 35+  B217 00 00 01 00
 35+  B21B 00 00 00 01
 35+  B21F 00 00 00 01
 35+  B223 04 04 04 04
 35+  B227 04 01 00 00
 36+  B22B 00 00 01 01      defb 00,00,01,01,01,01,01,01,01,01,01,01,01,01,01,01,01,01,01,01,01,01,01,01,01,01,01,01,01,01,00,00
 36+  B22F 01 01 01 01
 36+  B233 01 01 01 01
 36+  B237 01 01 01 01
 36+  B23B 01 01 01 01
 36+  B23F 01 01 01 01
 36+  B243 01 01 01 01
 36+  B247 01 01 00 00
 37+  B24B
 38+  B24B              ; ###############################################################
 39+  B24B              ; Object data: horiz, vert, state, memh, meml
 40+  B24B              ; ###############################################################
 41+  B24B              level01rocks:
 42+  B24B 09 04 00 00      defb 9,4,0,0,0
 42+  B24F 00
 43+  B250 0C 07 00 00      defb 12,7,0,0,0
 43+  B254 00
 44+  B255 10 07 00 00      defb 16,7,0,0,0
 44+  B259 00
 45+  B25A 0B 08 00 00      defb 11,8,0,0,0
 45+  B25E 00
 46+  B25F 0A 0A 00 00      defb 10,10,0,0,0
 46+  B263 00
 47+  B264 0C 0A 00 00      defb 12,10,0,0,0
 47+  B268 00
 48+  B269 0D 09 00 00      defb 13,9,0,0,0
 48+  B26D 00
 49+  B26E 0E 08 00 00      defb 14,8,0,0,0
 49+  B272 00
 50+  B273 0F 0B 00 00      defb 15,11,0,0,0
 50+  B277 00
 51+  B278 0B 0C 00 00      defb 11,12,0,0,0
 51+  B27C 00
 52+  B27D 11 0C 00 00      defb 17,12,0,0,0
 52+  B281 00
 53+  B282 13 08 00 00      defb 19,8,0,0,0
 53+  B286 00
 54+  B287 16 09 00 00      defb 22,9,0,0,0
 54+  B28B 00
 55+  B28C 13 0A 00 00      defb 19,10,0,0,0
 55+  B290 00
 56+  B291 15 0A 00 00      defb 21,10,0,0,0
 56+  B295 00
 57+  B296 15 0C 00 00      defb 21,12,0,0,0
 57+  B29A 00
 58+  B29B 16 0C 00 00      defb 22,12,0,0,0
 58+  B29F 00
 59+  B2A0 18 0A 00 00      defb 24,10,0,0,0
 59+  B2A4 00
 60+  B2A5 19 09 00 00      defb 25,9,0,0,0
 60+  B2A9 00
 61+  B2AA 1C 09 00 00      defb 28,9,0,0,0
 61+  B2AE 00
 62+  B2AF 1B 0C 00 00      defb 27,12,0,0,0
 62+  B2B3 00
 63+  B2B4 1A 0D 00 00      defb 26,13,0,0,0
 63+  B2B8 00
 64+  B2B9 19 0E 00 00      defb 25,14,0,0,0
 64+  B2BD 00
 65+  B2BE 19 10 00 00      defb 25,16,0,0,0
 65+  B2C2 00
 66+  B2C3 1A 11 00 00      defb 26,17,0,0,0
 66+  B2C7 00
 67+  B2C8 1B 11 00 00      defb 27,17,0,0,0
 67+  B2CC 00
 68+  B2CD 1C 12 00 00      defb 28,18,0,0,0
 68+  B2D1 00
 69+  B2D2 1A 13 00 00      defb 26,19,0,0,0
 69+  B2D6 00
 70+  B2D7 1B 15 00 00      defb 27,21,0,0,0
 70+  B2DB 00
 71+  B2DC 1A 17 00 00      defb 26,23,0,0,0
 71+  B2E0 00
 72+  B2E1 1B 18 00 00      defb 27,24,0,0,0
 72+  B2E5 00
 73+  B2E6 19 18 00 00      defb 25,24,0,0,0
 73+  B2EA 00
 74+  B2EB 18 17 00 00      defb 24,23,0,0,0
 74+  B2EF 00
 75+  B2F0 13 14 00 00      defb 19,20,0,0,0
 75+  B2F4 00
 76+  B2F5 14 12 00 00      defb 20,18,0,0,0
 76+  B2F9 00
 77+  B2FA 14 10 00 00      defb 20,16,0,0,0
 77+  B2FE 00
 78+  B2FF 15 10 00 00      defb 21,16,0,0,0
 78+  B303 00
 79+  B304 16 12 00 00      defb 22,18,0,0,0
 79+  B308 00
 80+  B309 11 14 00 00      defb 17,20,0,0,0
 80+  B30D 00
 81+  B30E 0D 11 00 00      defb 13,17,0,0,0
 81+  B312 00
 82+  B313 0C 13 00 00      defb 12,19,0,0,0
 82+  B317 00
 83+  B318 0B 13 00 00      defb 11,19,0,0,0
 83+  B31C 00
 84+  B31D 0A 11 00 00      defb 10,17,0,0,0
 84+  B321 00
 85+  B322 05 12 00 00      defb 5,18,0,0,0
 85+  B326 00
 86+  B327 07 16 00 00      defb 7,22,0,0,0
 86+  B32B 00
 87+  B32C 09 16 00 00      defb 9,22,0,0,0
 87+  B330 00
 88+  B331 07 18 00 00      defb 7,24,0,0,0
 88+  B335 00
 89+  B336 05 18 00 00      defb 5,24,0,0,0
 89+  B33A 00
 90+  B33B 06 19 00 00      defb 6,25,0,0,0
 90+  B33F 00
 91+  B340 08 19 00 00      defb 8,25,0,0,0
 91+  B344 00
 92+  B345 04 17 00 00      defb 4,23,0,0,0
 92+  B349 00
 93+  B34A FF               defb 255
 94+  B34B
 95+  B34B              level01missiles:
 96+  B34B 0B 17 00 00      defb 11,23,0,0,0
 96+  B34F 00
 97+  B350 0B 16 00 00      defb 11,22,0,0,0
 97+  B354 00
 98+  B355 0C 17 00 00      defb 12,23,0,0,0
 98+  B359 00
 99+  B35A 0C 16 00 00      defb 12,22,0,0,0
 99+  B35E 00
100+  B35F 0D 17 00 00      defb 13,23,0,0,0
100+  B363 00
101+  B364 0D 16 00 00      defb 13,22,0,0,0
101+  B368 00
102+  B369 0E 17 00 00      defb 14,23,0,0,0
102+  B36D 00
103+  B36E 0E 16 00 00      defb 14,22,0,0,0
103+  B372 00
104+  B373 0F 17 00 00      defb 15,23,0,0,0
104+  B377 00
105+  B378 0F 16 00 00      defb 15,22,0,0,0
105+  B37C 00
106+  B37D 10 17 00 00      defb 16,23,0,0,0
106+  B381 00
107+  B382 10 16 00 00      defb 16,22,0,0,0
107+  B386 00
108+  B387 11 17 00 00      defb 17,23,0,0,0
108+  B38B 00
109+  B38C 11 16 00 00      defb 17,22,0,0,0
109+  B390 00
110+  B391 12 17 00 00      defb 18,23,0,0,0
110+  B395 00
111+  B396 12 16 00 00      defb 18,22,0,0,0
111+  B39A 00
112+  B39B 13 17 00 00      defb 19,23,0,0,0
112+  B39F 00
113+  B3A0 13 16 00 00      defb 19,22,0,0,0
113+  B3A4 00
114+  B3A5 14 17 00 00      defb 20,23,0,0,0
114+  B3A9 00
115+  B3AA 14 16 00 00      defb 20,22,0,0,0
115+  B3AE 00
116+  B3AF 15 17 00 00      defb 21,23,0,0,0
116+  B3B3 00
117+  B3B4 15 16 00 00      defb 21,22,0,0,0
117+  B3B8 00
118+  B3B9 16 17 00 00      defb 22,23,0,0,0
118+  B3BD 00
119+  B3BE 16 16 00 00      defb 22,22,0,0,0
119+  B3C2 00
120+  B3C3 FF               defb 255
121+  B3C4
122+  B3C4              ;
123+  B3C4              ; Diamonds: x,y,state,mem1+mem2
124+  B3C4              ;
125+  B3C4              level01diamonds:
126+  B3C4 0C 1B 00 00      defb 12,27,0,0,0
126+  B3C8 00
127+  B3C9 10 1B 00 00      defb 16,27,0,0,0
127+  B3CD 00
128+  B3CE 15 1B 00 00      defb 21,27,0,0,0
128+  B3D2 00
129+  B3D3 FF               defb 255
130+  B3D4
131+  B3D4              level01gems:
132+  B3D4 12 14 00 00      defb 18,20,0,0,0
132+  B3D8 00
133+  B3D9 06 18 00 00      defb 6,24,0,0,0
133+  B3DD 00
134+  B3DE 19 17 00 00      defb 25,23,0,0,0
134+  B3E2 00
135+  B3E3 1C 11 00 00      defb 28,17,0,0,0
135+  B3E7 00
136+  B3E8 FF               defb 255
137+  B3E9              ;
138+  B3E9              ; Score area colours
139+  B3E9              ;
140+  B3E9              score_colours:
141+  B3E9 47 47 47 47      defb 71,71,71,71,71,71,71,71,71,71,71,66,67,67,67,67,67,67,67,67,66,71,71,71,71,71,71,71,71,71,71,71
141+  B3ED 47 47 47 47
141+  B3F1 47 47 47 42
141+  B3F5 43 43 43 43
141+  B3F9 43 43 43 43
141+  B3FD 42 47 47 47
141+  B401 47 47 47 47
141+  B405 47 47 47 47
142+  B409 47 47 47 47      defb 71,71,71,71,71,71,71,71,71,71,71,70,70,70,70,70,70,70,70,70,70,71,71,71,71,71,71,71,71,71,71,71
142+  B40D 47 47 47 47
142+  B411 47 47 47 46
142+  B415 46 46 46 46
142+  B419 46 46 46 46
142+  B41D 46 47 47 47
142+  B421 47 47 47 47
142+  B425 47 47 47 47
143+  B429
144+  B429              high_score_colours:
145+  B429 00 00 00 42      defb  0, 0, 0,66,66,66,71,71,71,71,71,71,67,67,67,71,71,71,71,71,71,70,70,70,71,71,71,71,71,71,0,0
145+  B42D 42 42 47 47
145+  B431 47 47 47 47
145+  B435 43 43 43 47
145+  B439 47 47 47 47
145+  B43D 47 46 46 46
145+  B441 47 47 47 47
145+  B445 47 47 00 00
# file closed: leveldata/level01.asm
 34   B449                  include "graphics\graphics.asm"
# file opened: graphics/graphics.asm
  1+  B449              ; Tiles graphics.
  2+  B449              sprites:
  3+  B449 00 00 00 00      defb    0  ,  0,  0,  0,  0,  0,  0,  0   ; 0, space
  3+  B44D 00 00 00 00
  4+  B451 FF FF FF FF      defb    255,255,255,255,255,255,255,255   ; 1, cyan block
  4+  B455 FF FF FF FF
  5+  B459 01 03 07 0F      defb	  1,  3,  7, 15, 31, 63,127,255   ; 2, slope left
  5+  B45D 1F 3F 7F FF
  6+  B461 80 C0 E0 F0      defb    128,192,224,240,248,252,254,255   ; 3, slope right
  6+  B465 F8 FC FE FF
  7+  B469 55 AA 55 AA      defb    85,170, 85,170, 85,170, 85,170    ; 4, dirt
  7+  B46D 55 AA 55 AA
  8+  B471 00 00 00 00      defb    0  ,  0,  0,  0,  0,  0,  0,  0   ; 5, sky block
  8+  B475 00 00 00 00
  9+  B479 FF FF FF FF      defb    255,255,255,255,255,255,255,255   ; 6, slime block
  9+  B47D FF FF FF FF
 10+  B481 00 00 00 00      defb    0  ,0  ,  0,  0,  0,  0,  0,  0   ; 7, for reuse
 10+  B485 00 00 00 00
 11+  B489 18 2C 4E 8F      defb    24, 44, 78,143,241,114, 52,  24    ; 8, diamond
 11+  B48D F1 72 34 18
 12+  B491 3C 7E FF 7F      defb    60,126,255,127,254,254,255,126    ; 9, rock
 12+  B495 FE FE FF 7E
 13+  B499 7E FF 7F 7F  	defb	126,255,127,127,254,255,126, 60    ; 10, rock 2
 13+  B49D FE FF 7E 3C
 14+  B4A1 00 00 00 00      defb    0  ,  0,  0,  0,  0,  0,255,255   ; 11, sky block, pixel trapdoor
 14+  B4A5 00 00 FF FF
 15+  B4A9 99 DB 7E 24  	defb    153,219,126, 36,255, 66, 36, 24   ; 12, missile
 15+  B4AD FF 42 24 18
 16+  B4B1 00 00 00 00      defb    0  ,  0,  0,  0,  0,  0,  0,  0   ; 13, sky block, tank background
 16+  B4B5 00 00 00 00
 17+  B4B9 00 00 00 00  	defb    0,  0,  0,  0,  0, 60, 90, 52     ; 14, gem
 17+  B4BD 00 3C 5A 34
 18+  B4C1 FD FE FD FE  	defb	253,254,253,254,253,254,253,254   ; 15, damaged mountain
 18+  B4C5 FD FE FD FE
 19+  B4C9 F4 F8 F4 F8  	defb	244,248,244,248,244,248,244,248   ; 16, damaged mountain 2
 19+  B4CD F4 F8 F4 F8
 20+  B4D1 D0 E0 D0 E0  	defb	208,224,208,224,208,224,208,224   ; 17, damaged mountain 3
 20+  B4D5 D0 E0 D0 E0
 21+  B4D9 40 80 40 80  	defb	 64,128, 64,128, 64,128, 64,128   ; 18, damaged mountain 4
 21+  B4DD 40 80 40 80
 22+  B4E1 00 00 00 ED  	defb	0,  0,  0,237,237,  0,  0,  0	  ; 19, tank missile
 22+  B4E5 ED 00 00 00
 23+  B4E9 99 DB 7E 24  	defb    153,219,126, 36,255,126, 60, 24   ; 20, missile active
 23+  B4ED FF 7E 3C 18
 24+  B4F1 FF FF 00 00      defb	255,255,  0,  0,  0,  0,  0,  0	  ; 21, the pit 1
 24+  B4F5 00 00 00 00
 25+  B4F9 FC FC 00 00  	defb	252,252,  0,  0,  0,  0,  0,  0	  ; 22, the pit 2
 25+  B4FD 00 00 00 00
 26+  B501 F0 F0 00 00  	defb	240,240,  0,  0,  0,  0,  0,  0	  ; 23, the pit 3
 26+  B505 00 00 00 00
 27+  B509 C0 C0 00 00  	defb	192,192,  0,  0,  0,  0,  0,  0	  ; 24, the pit 4
 27+  B50D 00 00 00 00
 28+  B511 00 00 00 00  	defb	0,0,  0,  0,  0,  0,  0,  0	  	  ; 25, the pit 5
 28+  B515 00 00 00 00
 29+  B519 FF FF FF FF      defb    255,255,255,255,255,255,255,255   ; 26, slime block, green on green
 29+  B51D FF FF FF FF
 30+  B521
 31+  B521
 32+  B521              sprite_attrs:
 33+  B521 46               defb    070 ; 0, space
 34+  B522 4D               defb    077 ; 1, cyan block
 35+  B523 4D               defb    077 ; 2, slope left
 36+  B524 4D               defb    077 ; 3, slope right
 37+  B525 46               defb    070 ; 4, dirt
 38+  B526 4E               defb    078 ; 5, sky
 39+  B527 4C               defb    076 ; 6, slime
 40+  B528 42               defb    066 ; 7, trapdoor
 41+  B529 46               defb    070 ; 8, diamond
 42+  B52A 42               defb    066 ; 9, rock
 43+  B52B 42               defb    066 ; 10, rock 2
 44+  B52C 49           	defb    073 ; 11, sky, trapdoor
 45+  B52D 43           	defb    067 ; 12, missile
 46+  B52E 4A               defb    074 ; 13, sky, red ink (tank)
 47+  B52F 46               defb    070 ; 14, gem
 48+  B530 4D               defb    077 ; 15, damaged mountain
 49+  B531 4D               defb    077 ; 16, damaged mountain 2
 50+  B532 4D               defb    077 ; 17, damaged mountain 3
 51+  B533 4D               defb    077 ; 18, damaged mountain 4
 52+  B534 00           	defb 	000 ; 19, tank missile (not used
 53+  B535 43           	defb    067 ; 20, missile active
 54+  B536 42           	defb	066	; 21, the pit 1
 55+  B537 42           	defb	066	; 22, the pit 2
 56+  B538 42           	defb	066	; 23, the pit 3
 57+  B539 42           	defb	066	; 24, the pit 4
 58+  B53A 42           	defb	066	; 25, the pit 5
 59+  B53B 64           	defb    100 ; 26, slime, green on green
 60+  B53C
 61+  B53C
 62+  B53C              player_sprite:
 63+  B53C 10 39 92 FC  	defb	 16, 57,146,252, 56, 61,195,128 ; 0 up/down 1
 63+  B540 38 3D C3 80
 64+  B544 08 1C 08 FC  	defb	  8, 28,  8,252, 60, 28, 22, 50 ; 1 left 1
 64+  B548 3C 1C 16 32
 65+  B54C 10 38 10 3F      defb   	 16, 56, 16, 63, 60, 56,104, 76 ; 2 right 1
 65+  B550 3C 38 68 4C
 66+  B554 08 9C 49 3F  	defb	  8,156, 73, 63, 28,188,195,  1 ; 3 up/down 2
 66+  B558 1C BC C3 01
 67+  B55C 08 1C 08 FC  	defb	  8, 28,  8,252, 60, 60,100, 12; 4 left 2
 67+  B560 3C 3C 64 0C
 68+  B564 10 38 10 3F  	defb	 16, 56, 16, 63, 60, 60, 38, 48 ; 5 right 2
 68+  B568 3C 3C 26 30
 69+  B56C 54 28 10 12  	defb	 84, 40, 16, 18, 30, 92,253, 95 ; 6 shoot up
 69+  B570 1E 5C FD 5F
 70+  B574 02 87 42 BF  	defb	 2,135, 66,191, 79,143, 25,  3  ; 7 shoot left
 70+  B578 4F 8F 19 03
 71+  B57C 40 E1 42 FD  	defb	 64,225, 66,253,242,241,152,192 ; 8 shoot right
 71+  B580 F2 F1 98 C0
 72+  B584 FA BF 3A 78  	defb	 250,191, 58,120, 72,  8, 20, 42 ; 9 shoot down
 72+  B588 48 08 14 2A
 73+  B58C 92 BA 94 78  	defb 	 146,186,148,120, 56,120, 68,195 ; 10 crushed 1
 73+  B590 38 78 44 C3
 74+  B594 49 5D 29 1E  	defb	  73, 93, 41, 30, 28, 30, 34,195 ; 11 crushed 2
 74+  B598 1C 1E 22 C3
 75+  B59C
 76+  B59C              ;
 77+  B59C              ; First 4 top half, next 4 bottom 1, next 4 bottom 2
 78+  B59C              ;
 79+  B59C              ship_sprite:
 80+  B59C 00 00 00 01  	defb	  0,  0,  0,  1,  3, 31,127,255
 80+  B5A0 03 1F 7F FF
 81+  B5A4 1F 01 7F FF  	defb	 31,  1,127,255,255,255,255,255
 81+  B5A8 FF FF FF FF
 82+  B5AC F8 80 FE FF  	defb	248,128,254,255,255,255,255,255
 82+  B5B0 FF FF FF FF
 83+  B5B4 00 00 00 80  	defb	  0,  0,  0,128,192,248,254,255
 83+  B5B8 C0 F8 FE FF
 84+  B5BC B3 B3 7F 1F  	defb	179,179,127, 31,  3,  3,  2,  7
 84+  B5C0 03 03 02 07
 85+  B5C4 8F 8F FF FF  	defb	143,143,255,255,255, 15,  7,131
 85+  B5C8 FF 0F 07 83
 86+  B5CC 0F 0F FF FF  	defb	 15, 15,255,255,255, 16, 32,193
 86+  B5D0 FF 10 20 C1
 87+  B5D4 19 19 FE F8  	defb	 25, 25,254,248,192,192, 64,224
 87+  B5D8 C0 C0 40 E0
 88+  B5DC 98 98 7F 1F  	defb	152,152,127, 31,  3,  3,  2,  7
 88+  B5E0 03 03 02 07
 89+  B5E4 F0 F0 FF FF  	defb	240,240,255,255,255,  8,  4,131
 89+  B5E8 FF 08 04 83
 90+  B5EC F1 F1 FF FF  	defb	241,241,255,255,255,240,224,193
 90+  B5F0 FF F0 E0 C1
 91+  B5F4 CD CD FE F8  	defb	205,205,254,248,192,192, 64,224
 91+  B5F8 C0 C0 40 E0
 92+  B5FC
 93+  B5FC              ;
 94+  B5FC              ;  First 8 frames are tank, last frame is the gun barrel
 95+  B5FC              ;
 96+  B5FC              tank_sprite:
 97+  B5FC 00 00 00 7F  	defb	  0,  0,  0,127,127,  0,  0,  0
 97+  B600 7F 00 00 00
 98+  B604 01 03 FE FC  	defb	  1,  3,254,252,254,255,127, 64
 98+  B608 FE FF 7F 40
 99+  B60C FF FF 03 F9  	defb	255,255,  3,249,  3,255,255,  1
 99+  B610 03 FF FF 01
100+  B614 00 00 C0 E0  	defb	  0,  0,192,224,224,192,  0,  0
100+  B618 E0 C0 00 00
101+  B61C 3F 7F E1 FB  	defb	 63,127,225,251,247,225,127, 63
101+  B620 F7 E1 7F 3F
102+  B624 FF FF 16 52  	defb	255,255, 22, 82, 84, 22,255,255
102+  B628 54 16 FF FF
103+  B62C FF FF A8 A9  	defb	255,255,168,169,155,168,255,255
103+  B630 9B A8 FF FF
104+  B634 FC FE 8F AF  	defb	252,254,143,175,159,175,254,252
104+  B638 9F AF FE FC
105+  B63C 00 00 00 1F  	defb	  0,  0,  0, 31, 31,  0,  0,  0 ; +64
105+  B640 1F 00 00 00
106+  B644
107+  B644              monster_sprite:
108+  B644 02 40 06 60  	defb	  2, 64,  6, 96, 11,208, 22,104
108+  B648 0B D0 16 68
109+  B64C 19 98 17 E8  	defb	 25,152, 23,232, 53,172,127,254
109+  B650 35 AC 7F FE
110+  B654 FE 7F EC 37  	defb	254,127,236, 55,143,241,143,241
110+  B658 8F F1 8F F1
111+  B65C 08 10 08 10  	defb	  8, 16,  8, 16, 24, 24,  0,  0		; frame 1
111+  B660 18 18 00 00
112+  B664 02 40 06 60  	defb	  2, 64,  6, 96, 11,208, 22,104
112+  B668 0B D0 16 68
113+  B66C 19 98 17 E8  	defb	 25,152, 23,232,245,175,255,255
113+  B670 F5 AF FF FF
114+  B674 BC 3D 0E 70  	defb	188, 61, 14,112, 15,240, 15,240
114+  B678 0F F0 0F F0
115+  B67C 10 08 30 0C  	defb	 16,  8, 48, 12,  0,  0,  0,  0		; frame 2
115+  B680 00 00 00 00
116+  B684
117+  B684              robot_sprite:
118+  B684 0E 0A CE 3E  	defb	 14, 10,206, 62,206, 18, 34,102		; left 1
118+  B688 CE 12 22 66
119+  B68C 0E 0A 4E FE  	defb	 14, 10, 78,254, 78, 18, 36,108		; 2
119+  B690 4E 12 24 6C
120+  B694 0E 0A 4E FE  	defb	 14, 10, 78,254, 78, 50, 99,  3		; 3
120+  B698 4E 32 63 03
121+  B69C 0E 0A CE 3E  	defb	 14, 10,206, 62,206, 10,  9, 27		; 4
121+  B6A0 CE 0A 09 1B
122+  B6A4 70 50 73 7C  	defb	112, 80,115,124,115, 72, 68,102		; right 1
122+  B6A8 73 48 44 66
123+  B6AC 70 50 72 7F  	defb	112, 80,114,127,114, 72, 36, 54		; 2
123+  B6B0 72 48 24 36
124+  B6B4 70 50 72 7F  	defb	112, 80,114,127,114, 76,198,192		; 3
124+  B6B8 72 4C C6 C0
125+  B6BC 70 50 73 7C  	defb	112, 80,115,124,115, 80,144,216		; 4
125+  B6C0 73 50 90 D8
# file closed: graphics/graphics.asm
 35   B6C4
 36   B6C4                  include "game\control.asm"
# file opened: game/control.asm
  1+  B6C4              ;
  2+  B6C4              ; Check the keyboard then move
  3+  B6C4              ;
  4+  B6C4              control_keyboard:
  5+  B6C4 3A 52 BB         ld a,(player+11)    ; first, check if player is dying
  6+  B6C7 FE 00            cp 0
  7+  B6C9 C0               ret nz               ; if so, can't move
  8+  B6CA 3A 4C BB         ld a,(player+5)      ; next, check if the player has pixels left to move
  9+  B6CD FE 00            cp 0
 10+  B6CF CA D6 B6         jp z, control_keyboard5
 11+  B6D2 CD DB B7         call control_automove
 12+  B6D5 C9               ret
 13+  B6D6              control_keyboard5:
 14+  B6D6 3A 4D BB         ld a,(player+6)      ; next, check if the player is digging
 15+  B6D9 FE 00            cp 0
 16+  B6DB CA E2 B6         jp z, control_keyboard0
 17+  B6DE CD 19 B7         call control_dig
 18+  B6E1 C9               ret
 19+  B6E2              control_keyboard0:
 20+  B6E2 01 FE FB         ld bc,64510         ; port for keyboard row q-t.
 21+  B6E5 ED 78            in a,(c)            ; read keyboard.
 22+  B6E7 47               ld b,a              ; store result in b register.
 23+  B6E8 CB 18            rr b                ; check outermost key (q).
 24+  B6EA D2 09 B7         jp nc,control_keyboard1
 25+  B6ED 01 FE FD         ld bc,65022         ; port for keyboard row a-f.
 26+  B6F0 ED 78            in a,(c)            ; read keyboard.
 27+  B6F2 47               ld b,a              ; store result in b register.
 28+  B6F3 CB 18            rr b                ; check outermost key (a).
 29+  B6F5 D2 0D B7         jp nc,control_keyboard2
 30+  B6F8 01 FE DF         ld bc,57342         ; port for keyboard row y-p.
 31+  B6FB ED 78            in a,(c)            ; read keyboard.
 32+  B6FD 47               ld b,a              ; store result in b register.
 33+  B6FE CB 18            rr b                ; check outermost key (p).
 34+  B700 D2 11 B7         jp nc,control_keyboard3
 35+  B703 CB 18            rr b                ; check next key.
 36+  B705 D2 15 B7         jp nc,control_keyboard4
 37+  B708 C9               ret
 38+  B709              control_keyboard1:
 39+  B709 CD 24 B8         call control_pl_moveup         ; player up.
 40+  B70C C9               ret
 41+  B70D              control_keyboard2:
 42+  B70D CD 53 B8         call control_pl_movedown       ; player down.
 43+  B710 C9               ret
 44+  B711              control_keyboard3:
 45+  B711 CD B0 B8         call control_pl_moveright       ; player left.
 46+  B714 C9               ret
 47+  B715              control_keyboard4:
 48+  B715 CD 80 B8         call control_pl_moveleft       ; player right.
 49+  B718 C9               ret
 50+  B719
 51+  B719              ;
 52+  B719              ; Performs a dig if the counter has reset, otherwise, messes with the graphics
 53+  B719              ;
 54+  B719              control_dig:
 55+  B719 ED 4B 47 BB      ld bc,(player)      ; load the current coords into bc
 56+  B71D C5               push bc
 57+  B71E 3A 49 BB         ld a,(player+2)     ; get the direction
 58+  B721 FE 01            cp 1                ; left
 59+  B723 CA 3B B7         jp z,control_dig0
 60+  B726 FE 02            cp 2                ; right
 61+  B728 CA 50 B7         jp z,control_dig1
 62+  B72B FE 03            cp 3                ; down
 63+  B72D CA 74 B7         jp z,control_dig5
 64+  B730 FE 00            cp 0                ; up
 65+  B732 CA 64 B7         jp z,control_dig4
 66+  B735 21 4D BB         ld hl,player+6
 67+  B738 36 00            ld (hl),0           ; turn off digging
 68+  B73A C9               ret                 ; return
 69+  B73B              control_dig0:           ; going left
 70+  B73B CD 89 AA         call sprites_scadd  ; get the current coord
 71+  B73E 62 6B            ld hl,de
 72+  B740 2B               dec hl              ; move one left
 73+  B741 C1               pop bc              ; get the coords back, subtract 8 from horiz, 8 from vert, store (will be coords of space above dug dirt)
 74+  B742 78               ld a,b
 75+  B743 06 08            ld b,8
 76+  B745 90               sub b
 77+  B746 47               ld b,a
 78+  B747 79               ld a,c
 79+  B748 0E 08            ld c,8
 80+  B74A 91               sub c
 81+  B74B 4F               ld c,a
 82+  B74C C5               push bc
 83+  B74D C3 7D B7         jp control_dig2
 84+  B750              control_dig1:
 85+  B750 CD 89 AA         call sprites_scadd  ; get the current coord
 86+  B753 62 6B            ld hl,de
 87+  B755 23               inc hl              ; move one right
 88+  B756 C1               pop bc              ; get the coords back, add 8 to horiz, subtract 8 from vert store (will be coords of space above dug dirt)
 89+  B757 3E 08            ld a,8
 90+  B759 80               add a,b
 91+  B75A 47               ld b,a
 92+  B75B 79               ld a,c
 93+  B75C 0E 08            ld c,8
 94+  B75E 91               sub c
 95+  B75F 4F               ld c,a
 96+  B760 C5               push bc
 97+  B761 C3 7D B7         jp control_dig2
 98+  B764              control_dig4:
 99+  B764 CD 89 AA         call sprites_scadd  ; get the current coord
100+  B767 62 6B            ld hl,de
101+  B769 11 20 00         ld de,32
102+  B76C ED 52            sbc hl,de             ; move one up
103+  B76E C1               pop bc              ; get the coords back, 1 from vert, store, then we'll sub 1 from c for each row later
104+  B76F 0D               dec c
105+  B770 C5               push bc
106+  B771 C3 95 B7         jp control_dig6
107+  B774              control_dig5:
108+  B774 CD 89 AA         call sprites_scadd  ; get the current coord
109+  B777 62 6B            ld hl,de
110+  B779 24               inc h              ; move one down
111+  B77A                                     ; not bothered about working out bc here, since rock will never fall if digging down
112+  B77A C3 7D B7         jp control_dig2
113+  B77D              ; Normal (not up) digging
114+  B77D              control_dig2:
115+  B77D 3A 4F BB         ld a,(player+8)     ; get the number of rows we need to overwrite
116+  B780 47               ld b,a              ; rows to copy over
117+  B781 E5               push hl             ; store the memory location of the first row for later
118+  B782              control_dig3:
119+  B782 CD C4 B7         call control_getpixelrow
120+  B785 77               ld (hl),a           ; load contents into row
121+  B786 11 20 00         ld de,32
122+  B789 19               add hl,de           ; move to next row
123+  B78A 10 F6            djnz control_dig3
124+  B78C E1               pop hl              ; get the original memory location back
125+  B78D 11 20 00         ld de,32
126+  B790 ED 52            sbc hl,de           ; move to above row, ready for checking for rock
127+  B792 C3 AB B7         jp control_dig10
128+  B795              ; Special case for going up
129+  B795              control_dig6:
130+  B795 3A 4F BB         ld a,(player+8)     ; get the number of rows we need to overwrite
131+  B798 47               ld b,a              ; rows to copy over
132+  B799              control_dig7:
133+  B799 CD C4 B7         call control_getpixelrow
134+  B79C              control_dig12:
135+  B79C 77               ld (hl),a           ; load empty into row
136+  B79D 11 20 00         ld de,32
137+  B7A0 ED 52            sbc hl,de           ; move up to next row
138+  B7A2 0D               dec c               ; decrease c to track rows
139+  B7A3 10 F4            djnz control_dig7
140+  B7A5 79               ld a,c
141+  B7A6 D6 07            sub 7
142+  B7A8 C1               pop bc
143+  B7A9 4F               ld c,a
144+  B7AA C5               push bc             ; store the decreased c coord
145+  B7AB              control_dig10:
146+  B7AB DD 21 4E BB      ld ix,player+7
147+  B7AF DD 7E 00         ld a,(ix)     ; get the dig frame number
148+  B7B2 3D               dec a
149+  B7B3 DD 77 00         ld (ix),a
150+  B7B6                  ; call the check for rocks above the removed dirt
151+  B7B6 DD 21 4D BB      ld ix,player+6
152+  B7BA DD 7E 00         ld a,(ix)     ; get the dig state
153+  B7BD FE 00            cp 0
154+  B7BF C1               pop bc
155+  B7C0 CC 3A C0         call z, rocks_checkforfalling ; make the check if we're no longer digging
156+  B7C3 C9               ret
157+  B7C4
158+  B7C4              ;
159+  B7C4              ; Gets a modified pixel row to overwrite dirt - if this is the last dig, overwrite with nothing, otherwise xor to flip the dirt
160+  B7C4              ; Inputs:
161+  B7C4              ; hl - memory of pixel row
162+  B7C4              ; Outputs:
163+  B7C4              ; a - modified row to write
164+  B7C4              ;
165+  B7C4              control_getpixelrow:
166+  B7C4 3A 4E BB         ld a,(player+7)     ; get the dig frame number
167+  B7C7 FE 00            cp 0                ; is this the last dig
168+  B7C9 CA D0 B7         jp z,control_getpixelrow1
169+  B7CC 7E               ld a,(hl)           ; if not, xor with 255 to flip it
170+  B7CD EE FF            xor 255
171+  B7CF C9               ret
172+  B7D0              control_getpixelrow1:
173+  B7D0 DD 21 4D BB      ld ix,player+6
174+  B7D4 DD 36 00 00      ld (ix),0           ; turn off digging
175+  B7D8 3E 00            ld a,0              ; if it is, load with empty
176+  B7DA C9               ret
177+  B7DB
178+  B7DB              ;
179+  B7DB              ; Auto move the player until pixels is zero
180+  B7DB              ;
181+  B7DB              control_automove:
182+  B7DB 5F               ld e,a              ; store the number of pixels left to move in e
183+  B7DC ED 4B 47 BB      ld bc,(player)      ; load the current coords into bc
184+  B7E0 21 49 BB         ld hl,player+2      ; get the direction
185+  B7E3 7E               ld a,(hl)
186+  B7E4 FE 03            cp 3                ; down
187+  B7E6 CA FA B7         jp z,control_automove3  ; don't need to do anything
188+  B7E9 FE 00            cp 0                ; going up
189+  B7EB CA 06 B8         jp z,control_automove2
190+  B7EE FE 01            cp 1                ; going left?
191+  B7F0 CA 12 B8         jp z,control_automove0
192+  B7F3 78               ld a,b
193+  B7F4 3C               inc a               ; if we're going right, increment a twice for two pixels
194+  B7F5 3C               inc a
195+  B7F6 47               ld b,a
196+  B7F7 C3 16 B8         jp control_automove1
197+  B7FA              control_automove3:
198+  B7FA 79               ld a,c
199+  B7FB 3C               inc a
200+  B7FC 3C               inc a               ; if we're going down, increment twice
201+  B7FD 4F               ld c,a
202+  B7FE FE 90            cp 144
203+  B800 CC DE B8         call z, control_scroll_down
204+  B803 C3 16 B8         jp control_automove1
205+  B806              control_automove2:
206+  B806 79               ld a,c
207+  B807 3D               dec a
208+  B808 3D               dec a               ; if we're going up, decrement twice
209+  B809 4F               ld c,a
210+  B80A FE 60            cp 96
211+  B80C CC EB B8         call z, control_scroll_up
212+  B80F C3 16 B8         jp control_automove1
213+  B812              control_automove0:
214+  B812 78               ld a,b
215+  B813 3D               dec a               ; if we're going left, decrement a twice
216+  B814 3D               dec a
217+  B815 47               ld b,a
218+  B816              control_automove1:
219+  B816 ED 43 47 BB      ld (player),bc      ; and back to player
220+  B81A 7B               ld a,e              ; now get the pixel count back
221+  B81B 3D               dec a               ; decrease by one
222+  B81C 21 4C BB         ld hl,player+5
223+  B81F 77               ld (hl),a           ; copy back
224+  B820 CD CF BC         call player_justmoved
225+  B823 C9               ret
226+  B824
227+  B824              ;
228+  B824              ; Moves the player up
229+  B824              ;
230+  B824              control_pl_moveup:
231+  B824 C5               push bc
232+  B825 ED 4B 47 BB      ld bc,(player)          ; get the current coords, b horiz, c vert
233+  B829 79               ld a,c                  ; load c into the acc
234+  B82A FE 18            cp 24
235+  B82C CA 4C B8         jp z,control_pl_moveup0 ; are we at the edge of the screen
236+  B82F FE 60            cp 96
237+  B831 CC EB B8         call z, control_scroll_up
238+  B834 CD 8B BA         call movement_checkcanmove_up ; check we can move up, e will be 1 if we can
239+  B837 F5               push af
240+  B838 7B               ld a,e                  ; put e in a
241+  B839 FE 00            cp 0
242+  B83B CA 4B B8         jp z,control_pl_moveup1 ; don't move if we can't
243+  B83E F1               pop af
244+  B83F D6 01            sub 1                   ; subtract 1
245+  B841 D6 01            sub 1                   ; subtract 1
246+  B843 4F               ld c,a                  ; load back to c
247+  B844 ED 43 47 BB      ld (player),bc          ; load back to player
248+  B848 C3 4C B8         jp control_pl_moveup0
249+  B84B              control_pl_moveup1:
250+  B84B F1               pop af                  ; restore af if needed
251+  B84C              control_pl_moveup0:
252+  B84C 3E 00            ld a,0
253+  B84E 32 49 BB         ld (player+2),a        ; set direction to up
254+  B851 C1               pop bc
255+  B852 C9               ret
256+  B853              ;
257+  B853              ; Moves the player down
258+  B853              ;
259+  B853              control_pl_movedown:
260+  B853 C5               push bc
261+  B854 ED 4B 47 BB      ld bc,(player)          ; get the current coords, b horiz, c vert
262+  B858 79               ld a,c                  ; load c into the acc
263+  B859 FE E0            cp 224
264+  B85B CA 79 B8         jp z,control_pl_movedown0 ; are we at the edge of the screen
265+  B85E FE 80            cp 128
266+  B860 CC DE B8         call z, control_scroll_down
267+  B863 CD 5F BA         call movement_checkcanmove_down ; check we can move down, e will be 1 if we can
268+  B866 F5               push af
269+  B867 7B               ld a,e                  ; put e in a
270+  B868 FE 00            cp 0
271+  B86A CA 78 B8         jp z,control_pl_movedown1 ; don't move if we can't
272+  B86D F1               pop af
273+  B86E 3C               inc a                   ; add 1
274+  B86F 3C               inc a                   ; add 1
275+  B870 4F               ld c,a                  ; load back to c
276+  B871 ED 43 47 BB      ld (player),bc          ; load back to player
277+  B875 C3 79 B8         jp control_pl_movedown0
278+  B878              control_pl_movedown1:
279+  B878 F1               pop af                  ; restore af if needed
280+  B879              control_pl_movedown0:
281+  B879 3E 03            ld a,3
282+  B87B 32 49 BB         ld (player+2),a        ; set direction to down
283+  B87E C1               pop bc
284+  B87F C9               ret
285+  B880              ;
286+  B880              ; Moves the player left
287+  B880              ;
288+  B880              control_pl_moveleft:
289+  B880 C5               push bc
290+  B881 ED 4B 47 BB      ld bc,(player)          ; get the current coords, b horiz, c vert
291+  B885 78               ld a,b                  ; load b into the acc
292+  B886 FE 10            cp 16
293+  B888 CA A9 B8         jp z,control_pl_moveleft0 ; are we at the edge of the screen
294+  B88B CD EA BA         call movement_checkcanmove_left ; check we can move down, e will be 1 if we can
295+  B88E F5               push af
296+  B88F 7B               ld a,e                  ; put e in a
297+  B890 FE 00            cp 0
298+  B892 CA A8 B8         jp z,control_pl_moveleft1 ; don't move if we can't
299+  B895 21 4C BB         ld hl,player+5          ; need to store the amount of pixels still left to move in the player status
300+  B898 3E 03            ld a,3
301+  B89A 77               ld (hl),a
302+  B89B F1               pop af
303+  B89C D6 01            sub 1                    ; subtract 2
304+  B89E D6 01            sub 1
305+  B8A0 47               ld b,a                  ; load back to c
306+  B8A1 ED 43 47 BB      ld (player),bc          ; load back to player
307+  B8A5 C3 A9 B8         jp control_pl_moveleft0
308+  B8A8              control_pl_moveleft1:
309+  B8A8 F1               pop af
310+  B8A9              control_pl_moveleft0:
311+  B8A9 3E 01            ld a,1
312+  B8AB 32 49 BB         ld (player+2),a        ; set direction to left
313+  B8AE C1               pop bc
314+  B8AF C9               ret
315+  B8B0              ;
316+  B8B0              ; Moves the player right
317+  B8B0              ;
318+  B8B0              control_pl_moveright:
319+  B8B0 C5               push bc
320+  B8B1 ED 4B 47 BB      ld bc,(player)          ; get the current coords, b horiz, c vert
321+  B8B5 78               ld a,b                  ; load b into the acc
322+  B8B6 FE F0            cp 240
323+  B8B8 CA D7 B8         jp z,control_pl_moveright0 ; are we at the edge of the screen
324+  B8BB CD BE BA         call movement_checkcanmove_right ; check we can move down, e will be 1 if we can
325+  B8BE F5               push af
326+  B8BF 7B               ld a,e                  ; put e in a
327+  B8C0 FE 00            cp 0
328+  B8C2 CA D6 B8         jp z,control_pl_moveright1 ; don't move if we can't
329+  B8C5 21 4C BB         ld hl,player+5          ; need to store the amount of pixels still left to move in the player status
330+  B8C8 3E 03            ld a,3
331+  B8CA 77               ld (hl),a
332+  B8CB F1               pop af
333+  B8CC 3C               inc a                   ; add 2
334+  B8CD 3C               inc a
335+  B8CE 47               ld b,a                  ; load back to b
336+  B8CF ED 43 47 BB      ld (player),bc          ; load back to player
337+  B8D3 C3 D7 B8         jp control_pl_moveright0
338+  B8D6              control_pl_moveright1:
339+  B8D6 F1               pop af                  ; restore af if needed
340+  B8D7              control_pl_moveright0:
341+  B8D7 3E 02            ld a,2
342+  B8D9 32 49 BB         ld (player+2),a        ; set direction to right
343+  B8DC C1               pop bc
344+  B8DD C9               ret
345+  B8DE
346+  B8DE              ;
347+  B8DE              ; Scrolls the screen down
348+  B8DE              ;
349+  B8DE              control_scroll_down:
350+  B8DE F5               push af
351+  B8DF 3E 08            ld a,8
352+  B8E1 32 70 A7         ld (screen_offset),a
353+  B8E4 F1               pop af
354+  B8E5 21 BD A5         ld hl,buffer_updateall
355+  B8E8 36 01            ld (hl),1         ; flag as screen needing update
356+  B8EA C9               ret
357+  B8EB
358+  B8EB              ;
359+  B8EB              ; Scrolls the screen up
360+  B8EB              ;
361+  B8EB              control_scroll_up:
362+  B8EB F5               push af
363+  B8EC 3E 00            ld a,0
364+  B8EE 32 70 A7         ld (screen_offset),a
365+  B8F1 F1               pop af
366+  B8F2 21 BD A5         ld hl,buffer_updateall
367+  B8F5 36 01            ld (hl),1         ; flag as screen needing update
368+  B8F7 C9               ret
369+  B8F8
370+  B8F8
371+  B8F8
372+  B8F8
# file closed: game/control.asm
 37   B8F8                  include "game\movement.asm"
# file opened: game/movement.asm
  1+  B8F8              ;
  2+  B8F8              ; Checks the contents of a cell are empty - ie, all pixel rows are zero
  3+  B8F8              ; Inputs:
  4+  B8F8              ; hl - memory location of top pixel row
  5+  B8F8              ; bc - screen coords, b horiz, c vert
  6+  B8F8              ; Outputs:
  7+  B8F8              ; e - 0 if not empty, 1 if empty
  8+  B8F8              ;
  9+  B8F8              movement_spaceisempty:
 10+  B8F8 C5               push bc
 11+  B8F9 E5               push hl
 12+  B8FA CD 22 B9         call movement_spaceisgem        ; check if space is a gem
 13+  B8FD E1               pop hl
 14+  B8FE C1               pop bc
 15+  B8FF 7B               ld a,e
 16+  B900 FE 01            cp 1
 17+  B902 C8               ret z                           ; if e is 1, space is a gem so can move here, return
 18+  B903 3E 08            ld a,8                          ; 8 rows to check
 19+  B905              movement_spaceisempty0:
 20+  B905 08               ex af,af'                       ; store the loop counter
 21+  B906 7E               ld a,(hl)                       ; get current pixel row
 22+  B907 FE 00            cp 0
 23+  B909 C2 1D B9         jp nz, movement_spaceisempty1    ; row is not empty, can't move here
 24+  B90C 79               ld a,c                          ; load the vertical coord
 25+  B90D 3C               inc a                           ; next row down
 26+  B90E 11 20 00         ld de,32
 27+  B911 19               add hl,de                       ; otherwise, just go one down for hl, which means add 32, because of course
 28+  B912 4F               ld c,a                          ; copy vert coord back to c
 29+  B913 08               ex af,af'                       ; get loop counter back
 30+  B914 3D               dec a                           ; decrease loop counter
 31+  B915 C2 05 B9         jp nz, movement_spaceisempty0
 32+  B918 16 00            ld d,0
 33+  B91A 1E 01            ld e,1                          ; got to end, so space is empty
 34+  B91C C9               ret
 35+  B91D              movement_spaceisempty1:
 36+  B91D 16 00            ld d,0
 37+  B91F 1E 00            ld e,0                          ; returning false, ie space not empty
 38+  B921 C9               ret
 39+  B922
 40+  B922              ;
 41+  B922              ; Check if a space contains a gem
 42+  B922              ; Inputs:
 43+  B922              ; bc - screen coords
 44+  B922              ; Outputs:
 45+  B922              ; e = 1 if gem
 46+  B922              movement_spaceisgem:
 47+  B922 CD C2 A8         call screen_getcharcoordsfromscreencoords   ; get the char coords we're checking into bc
 48+  B925 21 C4 B3         ld hl,level01diamonds           ; check diamonds first
 49+  B928              movement_spaceisgem0:
 50+  B928 5E 23 56 2B      ld de,(hl)                      ; get gem coords into de
 51+  B92C 7B               ld a,e                          ; check for end of data
 52+  B92D FE FF            cp 255
 53+  B92F CA 4A B9         jp z,movement_spaceisgem1       ; if yes, done with diamonds
 54+  B932 23               inc hl
 55+  B933 23               inc hl                          ; move to state
 56+  B934 7E               ld a,(hl)
 57+  B935 23               inc hl
 58+  B936 23               inc hl
 59+  B937 23               inc hl                          ; get to next
 60+  B938 FE 01            cp 1                            ; check if collected
 61+  B93A CA 28 B9         jp z,movement_spaceisgem0       ; if yes, move to next diamond
 62+  B93D 7B               ld a,e                          ; load e again
 63+  B93E B9               cp c                            ; otherwise, compare c with e
 64+  B93F C2 28 B9         jp nz,movement_spaceisgem0      ; if different, move to next diamond
 65+  B942 7A               ld a,d                          ; get d coord
 66+  B943 B8               cp b                            ; compare b with d
 67+  B944 C2 28 B9         jp nz,movement_spaceisgem0      ; if different, move to next diamond
 68+  B947 1E 01            ld e,1                          ; otherwise, exit with e = 1
 69+  B949 C9               ret
 70+  B94A              movement_spaceisgem1:
 71+  B94A 21 D4 B3         ld hl,level01gems              ; check gems
 72+  B94D              movement_spaceisgem2:
 73+  B94D 5E 23 56 2B      ld de,(hl)                      ; get gem coords into de
 74+  B951 7B               ld a,e                          ; check for end of data
 75+  B952 FE FF            cp 255
 76+  B954 CA 6F B9         jp z,movement_spaceisgem3       ; if yes, done with gems
 77+  B957 23               inc hl
 78+  B958 23               inc hl                          ; move to state
 79+  B959 7E               ld a,(hl)
 80+  B95A 23               inc hl
 81+  B95B 23               inc hl
 82+  B95C 23               inc hl                          ; get to next
 83+  B95D FE 01            cp 1                            ; check if collected
 84+  B95F CA 4D B9         jp z,movement_spaceisgem2       ; if yes, move to next diamond
 85+  B962 7B               ld a,e                          ; load e again
 86+  B963 B9               cp c                            ; otherwise, compare c with e
 87+  B964 C2 4D B9         jp nz,movement_spaceisgem2      ; if different, move to next gem
 88+  B967 7A               ld a,d                          ; get d coord
 89+  B968 B8               cp b                            ; compare b with d
 90+  B969 C2 4D B9         jp nz,movement_spaceisgem2      ; if different, move to next gem
 91+  B96C 1E 01            ld e,1                          ; otherwise, exit with e = 1
 92+  B96E C9               ret
 93+  B96F              movement_spaceisgem3:
 94+  B96F 1E 00            ld e,0                          ; nothing found, return e = 0
 95+  B971 C9               ret
 96+  B972
 97+  B972              ;
 98+  B972              ; Checks the line of a cell below is empty - ie, first pixel rows is zero
 99+  B972              ; Inputs:
100+  B972              ; hl - memory location of top pixel row
101+  B972              ; bc - screen coords, b horiz, c vert
102+  B972              ; Outputs:
103+  B972              ; e - 0 if not empty, 1 if empty
104+  B972              ;
105+  B972              movement_linebelowisempty:
106+  B972 C5               push bc
107+  B973 E5               push hl
108+  B974 CD 22 B9         call movement_spaceisgem        ; check if space is a gem
109+  B977 E1               pop hl
110+  B978 C1               pop bc
111+  B979 7B               ld a,e
112+  B97A FE 01            cp 1
113+  B97C C8               ret z                           ; if e is 1, space is a gem so can move here, return
114+  B97D 7E               ld a,(hl)                       ; get current pixel row
115+  B97E FE 00            cp 0
116+  B980 C2 88 B9         jp nz, movement_linebelowisempty1    ; row is not empty, can't move here
117+  B983 16 00            ld d,0
118+  B985 1E 01            ld e,1                          ; got to end, so space is empty
119+  B987 C9               ret
120+  B988              movement_linebelowisempty1:
121+  B988 16 00            ld d,0
122+  B98A 1E 00            ld e,0                          ; returning false, ie space not empty
123+  B98C C9               ret
124+  B98D
125+  B98D              ;
126+  B98D              ; Checks the line of a cell above is empty - ie, last pixel rows are zero
127+  B98D              ; Inputs:
128+  B98D              ; hl - memory location of top pixel row
129+  B98D              ; bc - screen coords, b horiz, c vert
130+  B98D              ; Outputs:
131+  B98D              ; e - 0 if not empty, 1 if empty
132+  B98D              ;
133+  B98D              movement_lineaboveisempty:
134+  B98D C5               push bc
135+  B98E E5               push hl
136+  B98F CD 22 B9         call movement_spaceisgem        ; check if space is a gem
137+  B992 E1               pop hl
138+  B993 C1               pop bc
139+  B994 7B               ld a,e
140+  B995 FE 01            cp 1
141+  B997 C8               ret z
142+  B998 7E               ld a,(hl)                       ; get current pixel row
143+  B999 FE 00            cp 0
144+  B99B C2 A3 B9         jp nz, movement_lineaboveisempty1    ; row is not empty, can't move here
145+  B99E 16 00            ld d,0
146+  B9A0 1E 01            ld e,1                          ; got to end, so space is empty
147+  B9A2 C9               ret
148+  B9A3              movement_lineaboveisempty1:
149+  B9A3 16 00            ld d,0
150+  B9A5 1E 00            ld e,0                          ; returning false, ie space not empty
151+  B9A7 C9               ret
152+  B9A8
153+  B9A8              ;
154+  B9A8              ; Checks the contents of a cell are diggable - ie, all pixel rows are dirt or empty
155+  B9A8              ; Inputs:
156+  B9A8              ; hl - memory location of top pixel row
157+  B9A8              ; bc - screen coords, b horiz, c vert
158+  B9A8              ; Outputs:
159+  B9A8              ; none - puts player into digging mode
160+  B9A8              ;
161+  B9A8              movement_spaceisdiggable:
162+  B9A8 3E 08            ld a,8                          ; 8 rows to check
163+  B9AA              movement_spaceisdiggable0:
164+  B9AA 08               ex af,af'                       ; store the loop counter
165+  B9AB 7E               ld a,(hl)                       ; get current pixel row
166+  B9AC FE 00            cp 0
167+  B9AE CA BE B9         jp z, movement_spaceisdiggable2  ; row is empty, can dig here
168+  B9B1 FE 55            cp 85
169+  B9B3 CA BE B9         jp z, movement_spaceisdiggable2  ; row is dirt, can dig here
170+  B9B6 FE AA            cp 170
171+  B9B8 CA BE B9         jp z, movement_spaceisdiggable2  ; row is dirt, can dig here
172+  B9BB C3 D6 B9         jp movement_spaceisdiggable1     ; otherwise, stop checking
173+  B9BE              movement_spaceisdiggable2:
174+  B9BE 79               ld a,c                          ; load the vertical coord
175+  B9BF 3C               inc a                           ; next row down
176+  B9C0 11 20 00         ld de,32
177+  B9C3 19               add hl,de                       ; otherwise, just go one down for hl, which means add 32, because of course
178+  B9C4 4F               ld c,a                          ; copy vert coord back to c
179+  B9C5 08               ex af,af'                       ; get loop counter back
180+  B9C6 3D               dec a                           ; decrease loop counter
181+  B9C7 C2 AA B9         jp nz, movement_spaceisdiggable0
182+  B9CA 21 4D BB         ld hl,player+6
183+  B9CD 36 01            ld (hl),1                       ; set the player into digging mode
184+  B9CF 23               inc hl
185+  B9D0 36 05            ld (hl),5                      ; set the number of frame to dig for
186+  B9D2 23               inc hl
187+  B9D3 36 08            ld (hl),8                       ; set the number of pixels to dig
188+  B9D5 C9               ret
189+  B9D6              movement_spaceisdiggable1:
190+  B9D6 21 4D BB         ld hl,player+6
191+  B9D9 36 00            ld (hl),0                       ; set the player out of digging mode
192+  B9DB C9               ret
193+  B9DC
194+  B9DC              ;
195+  B9DC              ; Checks the contents of a cell below are diggable - ie, at least one pixel row has dirt. If the first one isn't dirt, stop
196+  B9DC              ; Inputs:
197+  B9DC              ; hl - memory location of top pixel row
198+  B9DC              ; bc - screen coords, b horiz, c vert
199+  B9DC              ; Outputs:
200+  B9DC              ; none - puts player into digging mode
201+  B9DC              ;
202+  B9DC              movement_spacebelowisdiggable:
203+  B9DC 7E               ld a,(hl)                       ; get first pixel row
204+  B9DD FE 55            cp 85
205+  B9DF CA EA B9         jp z, movement_spacebelowisdiggable3  ; row is dirt, can dig here
206+  B9E2 FE AA            cp 170
207+  B9E4 CA EA B9         jp z, movement_spacebelowisdiggable3  ; row is dirt, can dig here
208+  B9E7 C3 D6 B9         jp movement_spaceisdiggable1    ; the first row is not dirt, so don't bother checking the rest, can't dig
209+  B9EA              movement_spacebelowisdiggable3:
210+  B9EA 3E 08            ld a,8                          ; rows to check
211+  B9EC 1E 00            ld e,0                          ; count of rows to dig
212+  B9EE              movement_spacebelowisdiggable0:
213+  B9EE 08               ex af,af'                       ; store the loop counter
214+  B9EF 7E               ld a,(hl)                       ; get current pixel row
215+  B9F0 FE 55            cp 85
216+  B9F2 CA FD B9         jp z, movement_spacebelowisdiggable4  ; row is dirt, can dig here
217+  B9F5 FE AA            cp 170
218+  B9F7 CA FD B9         jp z, movement_spacebelowisdiggable4  ; row is dirt, can dig here
219+  B9FA C3 0C BA         jp movement_spacebelowisdiggable5     ; don't count this row and stop counting
220+  B9FD              movement_spacebelowisdiggable4:
221+  B9FD 1C               inc e                           ; inc count of rows to dig
222+  B9FE              movement_spacebelowisdiggable2:
223+  B9FE 79               ld a,c                          ; load the vertical coord
224+  B9FF 3C               inc a                           ; next row down
225+  BA00 D5               push de                         ; need e for later
226+  BA01 11 20 00         ld de,32
227+  BA04 19               add hl,de                       ; otherwise, just go one down for hl, which means add 32, because of course
228+  BA05 4F               ld c,a                          ; copy vert coord back to c
229+  BA06 D1               pop de                          ; get e back
230+  BA07 08               ex af,af'                       ; get loop counter back
231+  BA08 3D               dec a                           ; incease loop counter
232+  BA09 C2 EE B9         jp nz, movement_spacebelowisdiggable0
233+  BA0C              movement_spacebelowisdiggable5:
234+  BA0C 21 4D BB         ld hl,player+6
235+  BA0F 36 01            ld (hl),1                       ; set the player into digging mode
236+  BA11 23               inc hl
237+  BA12 36 03            ld (hl),3                      ; set the number of frame to dig for
238+  BA14 23               inc hl
239+  BA15 73               ld (hl),e                       ; set the number of pixels to dig
240+  BA16 C9               ret
241+  BA17              movement_spacebelowisdiggable1:
242+  BA17 21 4D BB         ld hl,player+6
243+  BA1A 36 00            ld (hl),0                       ; set the player out of digging mode
244+  BA1C C9               ret
245+  BA1D
246+  BA1D              ;
247+  BA1D              ; Checks the contents of a cell above are diggable - ie, at least one pixel row has dirt. If the first one isn't dirt, stop
248+  BA1D              ; Inputs:
249+  BA1D              ; hl - memory location of top pixel row
250+  BA1D              ; bc - screen coords, b horiz, c vert
251+  BA1D              ; Outputs:
252+  BA1D              ; none - puts player into digging mode
253+  BA1D              ;
254+  BA1D              movement_spaceaboveisdiggable:
255+  BA1D 7E               ld a,(hl)                       ; get first pixel row
256+  BA1E FE 55            cp 85
257+  BA20 CA 2B BA         jp z, movement_spaceaboveisdiggable3  ; row is dirt, can dig here
258+  BA23 FE AA            cp 170
259+  BA25 CA 2B BA         jp z, movement_spaceaboveisdiggable3  ; row is dirt, can dig here
260+  BA28 C3 D6 B9         jp movement_spaceisdiggable1    ; the first row is not dirt, so don't bother checking the rest, can't dig
261+  BA2B              movement_spaceaboveisdiggable3:
262+  BA2B 3E 08            ld a,8                          ; rows to check
263+  BA2D 1E 00            ld e,0                          ; count of rows to dig
264+  BA2F              movement_spaceaboveisdiggable0:
265+  BA2F 08               ex af,af'                       ; store the loop counter
266+  BA30 7E               ld a,(hl)                       ; get current pixel row
267+  BA31 FE 55            cp 85
268+  BA33 CA 3E BA         jp z, movement_spaceaboveisdiggable4  ; row is dirt, can dig here
269+  BA36 FE AA            cp 170
270+  BA38 CA 3E BA         jp z, movement_spaceaboveisdiggable4  ; row is dirt, can dig here
271+  BA3B C3 4E BA         jp movement_spaceaboveisdiggable5     ; don't count this row and stop counting
272+  BA3E              movement_spaceaboveisdiggable4:
273+  BA3E 1C               inc e                           ; inc count of rows to dig
274+  BA3F              movement_spaceaboveisdiggable2:
275+  BA3F 79               ld a,c                          ; load the vertical coord
276+  BA40 3D               dec a                           ; next row up
277+  BA41 D5               push de                         ; need e for later
278+  BA42 11 20 00         ld de,32
279+  BA45 ED 52            sbc hl,de                       ; otherwise, just go one up for hl, which means sub 32, because of course
280+  BA47 4F               ld c,a                          ; copy vert coord back to c
281+  BA48 D1               pop de                          ; get e back
282+  BA49 08               ex af,af'                       ; get loop counter back
283+  BA4A 3D               dec a                           ; incease loop counter
284+  BA4B C2 2F BA         jp nz, movement_spaceaboveisdiggable0
285+  BA4E              movement_spaceaboveisdiggable5:
286+  BA4E 21 4D BB         ld hl,player+6
287+  BA51 36 01            ld (hl),1                       ; set the player into digging mode
288+  BA53 23               inc hl
289+  BA54 36 05            ld (hl),5                       ; set the number of frame to dig for
290+  BA56 23               inc hl
291+  BA57 73               ld (hl),e                       ; set the number of pixels to dig
292+  BA58 C9               ret
293+  BA59              movement_spaceaboveisdiggable1:
294+  BA59 21 4D BB         ld hl,player+6
295+  BA5C 36 00            ld (hl),0                       ; set the player out of digging mode
296+  BA5E C9               ret
297+  BA5F
298+  BA5F              ;
299+  BA5F              ; Checks if the player can move down
300+  BA5F              ; Inputs:
301+  BA5F              ; bc - player coords, b horiz, c vert
302+  BA5F              ; Outputs:
303+  BA5F              ; de - 1 can move
304+  BA5F              movement_checkcanmove_down:
305+  BA5F F5               push af
306+  BA60 C5               push bc
307+  BA61 CD 89 AA         call sprites_scadd              ; get the memory location of cell into de
308+  BA64 62 6B            ld hl,de                        ; look at cell directly underneath (add 256)
309+  BA66 24               inc h                       ; memory location of cell beneath now in hl
310+  BA67 3E 08            ld a,8                       ; look below
311+  BA69 81               add c
312+  BA6A 4F               ld c,a
313+  BA6B CD 72 B9         call movement_linebelowisempty       ; check space is empty
314+  BA6E 7B               ld a,e                          ; check space empty flag
315+  BA6F FE 00            cp 0
316+  BA71 CA 7A BA         jp z, movement_checkcanmove_down1 ; can't move
317+  BA74 CD CF BC         call player_justmoved
318+  BA77 C1               pop bc
319+  BA78 F1               pop af
320+  BA79 C9               ret
321+  BA7A              movement_checkcanmove_down1:
322+  BA7A C1               pop bc
323+  BA7B CD 89 AA         call sprites_scadd              ; get the memory location of cell into de
324+  BA7E 62 6B            ld hl,de                        ; look at cell directly underneath (add 256)
325+  BA80 24               inc h
326+  BA81 C5               push bc
327+  BA82 CD DC B9         call movement_spacebelowisdiggable    ; can't move here, but can we dig
328+  BA85 11 00 00         ld de,0
329+  BA88 C1               pop bc
330+  BA89 F1               pop af
331+  BA8A C9               ret
332+  BA8B
333+  BA8B              ;
334+  BA8B              ; Checks if the player can move up
335+  BA8B              ; Inputs:
336+  BA8B              ; bc - player coords, b horiz, c vert
337+  BA8B              ; Outputs:
338+  BA8B              ; de - 1 can move
339+  BA8B              movement_checkcanmove_up:
340+  BA8B F5               push af
341+  BA8C C5               push bc
342+  BA8D CD 89 AA         call sprites_scadd              ; get the memory location of cell into de
343+  BA90 62 6B            ld hl,de                        ; look at cell directly above (subtract 32)
344+  BA92 11 20 00         ld de,32
345+  BA95 ED 52            sbc hl,de                       ; memory location of line above now in hl
346+  BA97 0D               dec c                           ; look above
347+  BA98 CD 8D B9         call movement_lineaboveisempty       ; check space is empty
348+  BA9B 7B               ld a,e                          ; check space empty flag
349+  BA9C FE 00            cp 0
350+  BA9E CA A9 BA         jp z, movement_checkcanmove_up1 ; can't move
351+  BAA1 1E 01            ld e,1
352+  BAA3 CD CF BC         call player_justmoved
353+  BAA6 C1               pop bc
354+  BAA7 F1               pop af
355+  BAA8 C9               ret
356+  BAA9              movement_checkcanmove_up1:
357+  BAA9 C1               pop bc
358+  BAAA CD 89 AA         call sprites_scadd              ; get the memory location of cell into de
359+  BAAD 62 6B            ld hl,de                        ; look at cell directly above (subtract 32)
360+  BAAF 11 20 00         ld de,32
361+  BAB2 ED 52            sbc hl,de                       ; memory location of line above now in hl
362+  BAB4 C5               push bc
363+  BAB5 CD 1D BA         call movement_spaceaboveisdiggable    ; can't move here, but can we dig
364+  BAB8 11 00 00         ld de,0
365+  BABB C1               pop bc
366+  BABC F1               pop af
367+  BABD C9               ret
368+  BABE
369+  BABE              ;
370+  BABE              ; Checks if the player can move right
371+  BABE              ; Inputs:
372+  BABE              ; bc - player coords, b horiz, c vert
373+  BABE              ; Outputs:
374+  BABE              ; de - 1 can move
375+  BABE              movement_checkcanmove_right:
376+  BABE F5               push af
377+  BABF C5               push bc
378+  BAC0 CD 89 AA         call sprites_scadd              ; get the memory location of cell into de
379+  BAC3 62 6B            ld hl,de                        ; look at cell directly to the right (add 1)
380+  BAC5 3E 08            ld a,8
381+  BAC7 80               add b                           ; move one cell right
382+  BAC8 47               ld b,a
383+  BAC9 23               inc hl                          ; memory location of cell to the right now in hl
384+  BACA CD F8 B8         call movement_spaceisempty       ; check space is empty
385+  BACD 7B               ld a,e                          ; check space empty flag
386+  BACE FE 00            cp 0
387+  BAD0 CA D9 BA         jp z, movement_checkcanmove_right1 ; can't move
388+  BAD3 CD CF BC         call player_justmoved
389+  BAD6 C1               pop bc
390+  BAD7 F1               pop af
391+  BAD8 C9               ret
392+  BAD9              movement_checkcanmove_right1:
393+  BAD9 C1               pop bc
394+  BADA CD 89 AA         call sprites_scadd              ; get the memory location of cell into de
395+  BADD 62 6B            ld hl,de
396+  BADF 23               inc hl                          ; memory location of cell to the right now in hl
397+  BAE0 C5               push bc
398+  BAE1 CD A8 B9         call movement_spaceisdiggable    ; can't move here, but can we dig
399+  BAE4 11 00 00         ld de,0
400+  BAE7 C1               pop bc
401+  BAE8 F1               pop af
402+  BAE9 C9               ret
403+  BAEA
404+  BAEA              ;
405+  BAEA              ; Checks if the player can move left
406+  BAEA              ; Inputs:
407+  BAEA              ; bc - player coords, b horiz, c vert
408+  BAEA              ; Outputs:
409+  BAEA              ; de - 1 can move
410+  BAEA              movement_checkcanmove_left:
411+  BAEA F5               push af
412+  BAEB C5               push bc
413+  BAEC CD 89 AA         call sprites_scadd              ; get the memory location of cell into de
414+  BAEF 62 6B            ld hl,de                        ; look at cell directly to the right (add 1)
415+  BAF1 78               ld a,b
416+  BAF2 06 08            ld b,8
417+  BAF4 90               sub b                           ; move one cell left
418+  BAF5 47               ld b,a
419+  BAF6 2B               dec hl                          ; memory location of cell to the right now in hl
420+  BAF7 CD F8 B8         call movement_spaceisempty       ; check space is empty
421+  BAFA 7B               ld a,e                          ; check space empty flag
422+  BAFB FE 00            cp 0
423+  BAFD CA 06 BB         jp z, movement_checkcanmove_left1 ; can't move
424+  BB00 CD CF BC         call player_justmoved
425+  BB03 C1               pop bc
426+  BB04 F1               pop af
427+  BB05 C9               ret
428+  BB06              movement_checkcanmove_left1:
429+  BB06 C1               pop bc
430+  BB07 CD 89 AA         call sprites_scadd              ; get the memory location of cell into de
431+  BB0A 62 6B            ld hl,de
432+  BB0C 2B               dec hl                          ; memory location of cell to the right now in hl
433+  BB0D C5               push bc
434+  BB0E CD A8 B9         call movement_spaceisdiggable    ; can't move here, but can we dig
435+  BB11 11 00 00         ld de,0
436+  BB14 C1               pop bc
437+  BB15 F1               pop af
438+  BB16 C9               ret
# file closed: game/movement.asm
 38   BB17                  include "game\game.asm"
# file opened: game/game.asm
  1+  BB17              ;
  2+  BB17              ; The current frame count, incremented each frame
  3+  BB17              ;
  4+  BB17              game_framenumber:
  5+  BB17 00               defb    0
  6+  BB18
  7+  BB18              ;
  8+  BB18              ; The number of players
  9+  BB18              ;
 10+  BB18              game_numberplayers:
 11+  BB18 01               defb 1
 12+  BB19
 13+  BB19              ;
 14+  BB19              ; The current player
 15+  BB19              ;
 16+  BB19              game_currentplayer:
 17+  BB19 01               defb 1
 18+  BB1A
 19+  BB1A              ;
 20+  BB1A              ; The default number of lives
 21+  BB1A              ;
 22+  BB1A              game_numberlives:
 23+  BB1A 04               defb 4
 24+  BB1B
 25+  BB1B              ;
 26+  BB1B              ; Moves to the next player
 27+  BB1B              ;
 28+  BB1B              game_changeplayer:
 29+  BB1B 3A 19 BB         ld a,(game_currentplayer)
 30+  BB1E FE 01            cp 1
 31+  BB20 C8               ret z                       ; if just one player, no need to change
 32+  BB21 3D               dec a                       ; otherwise decrease by one
 33+  BB22 EE 01            xor 1                       ; xor with one to flip
 34+  BB24 3C               inc a                       ; increment
 35+  BB25 21 19 BB         ld hl,game_currentplayer
 36+  BB28 77               ld (hl),a                   ; store
 37+  BB29 C9               ret
 38+  BB2A
 39+  BB2A              ;
 40+  BB2A              ; Sets the number of players at the start of the game
 41+  BB2A              ; Inputs:
 42+  BB2A              ; a - number of players
 43+  BB2A              game_setnumberofplayers:
 44+  BB2A 21 18 BB         ld hl,game_numberplayers
 45+  BB2D 77               ld (hl),a
 46+  BB2E
 47+  BB2E              ;
 48+  BB2E              ; Increment frame number by 1
 49+  BB2E              ;
 50+  BB2E              game_incrementframe:
 51+  BB2E 3A 17 BB         ld a,(game_framenumber)
 52+  BB31 FE FF            cp 255
 53+  BB33 C2 38 BB         jp nz,game_incrementframe0
 54+  BB36 3E 00            ld a,0
 55+  BB38              game_incrementframe0:
 56+  BB38 3C               inc a
 57+  BB39 32 17 BB         ld (game_framenumber),a
 58+  BB3C C9               ret
 59+  BB3D
 60+  BB3D              ;
 61+  BB3D              ; Returns current frame
 62+  BB3D              ; Outputs:
 63+  BB3D              ; a - current frame
 64+  BB3D              ;
 65+  BB3D              game_getcurrentframe:
 66+  BB3D 3A 17 BB         ld a,(game_framenumber)
 67+  BB40 C9               ret
 68+  BB41
 69+  BB41              ;
 70+  BB41              ; Resets current frame
 71+  BB41              ;
 72+  BB41              game_resetcurrentframe:
 73+  BB41 21 17 BB         ld hl,game_framenumber
 74+  BB44 36 00            ld (hl),0
 75+  BB46 C9               ret
# file closed: game/game.asm
 39   BB47                  include "game\player.asm"
# file opened: game/player.asm
  1+  BB47              ;
  2+  BB47              ;   Data for current player
  3+  BB47              ;
  4+  BB47              player:
  5+  BB47 00 00            defb    0,0                 ; horiz,vert (+0,+1)
  6+  BB49 02 00 01         defb    2,0,1               ; dir (0 up, 1 left, 2 right, 3 down), frame, frame transition count (+2,+3,+4)
  7+  BB4C 00               defb    0                   ; auto move remaining (+5)
  8+  BB4D 00 00 00         defb    0,0,0               ; is digging (0 no), digging count, pixels to di (+6,+7,+8)
  9+  BB50 00               defb    0                   ; lives remaining (+9)
 10+  BB51 00               defb    0                   ; died this life (+10)
 11+  BB52 00 00            defb    0,0                 ; crushed (+11), frames (+12)
 12+  BB54 00               defb    0                   ; can finish level, whether can finish level or not (+13)
 13+  BB55
 14+  BB55              player_location:
 15+  BB55 00               defb 0                      ; 0 normal, 1 diamond cavern, 2 the pit
 16+  BB56
 17+  BB56              ;
 18+  BB56              ; Works out which part of the screen the player is in
 19+  BB56              ; Pit is between 3,9 and 8,9
 20+  BB56              ; Diamond cavern is between 11,22 and 22,28
 21+  BB56              ;
 22+  BB56              player_getlocation:
 23+  BB56 ED 4B 47 BB      ld bc,(player)              ; get screen coords
 24+  BB5A CD C2 A8         call screen_getcharcoordsfromscreencoords ; get char coords, c horiz
 25+  BB5D 78               ld a,b                      ; check for pit first
 26+  BB5E FE 09            cp 9                        ; if not on this row, not in the pit
 27+  BB60 C2 6F BB         jp nz,player_getlocation0
 28+  BB63 79               ld a,c                      ; check horizontal
 29+  BB64 FE 08            cp 8
 30+  BB66 D2 6F BB         jp nc, player_getlocation0  ; if more than 8, not in the pit
 31+  BB69 21 55 BB         ld hl,player_location
 32+  BB6C 36 02            ld (hl),2                   ; load location with 2, the pit
 33+  BB6E C9               ret                         ; done
 34+  BB6F              player_getlocation0:            ; check for diamond cavern
 35+  BB6F 78               ld a,b                      ; first check vertical
 36+  BB70 FE 16            cp 22                       ; if above row 22, then not in cavern
 37+  BB72 DA 86 BB         jp c,player_getlocation1
 38+  BB75 79               ld a,c                      ; get the horizontal next
 39+  BB76 FE 0B            cp 11
 40+  BB78 DA 86 BB         jp c,player_getlocation1    ; if less than 11 not in diamond cave
 41+  BB7B FE 16            cp 22
 42+  BB7D D2 86 BB         jp nc,player_getlocation1    ; if less than 11 not in diamond cave
 43+  BB80 21 55 BB         ld hl,player_location
 44+  BB83 36 01            ld (hl),1                   ; load location with 1, the cavern
 45+  BB85 C9               ret
 46+  BB86              player_getlocation1:
 47+  BB86 21 55 BB         ld hl,player_location
 48+  BB89 36 00            ld (hl),0                   ; load location with 2, the pit
 49+  BB8B C9               ret                         ; done
 50+  BB8C
 51+  BB8C
 52+  BB8C              ;
 53+  BB8C              ; Initializes a player at start of game
 54+  BB8C              ; Copy initial coords, copy lives, copy score
 55+  BB8C              ;
 56+  BB8C              player_init_gamestart:
 57+  BB8C 3A 1A BB         ld a,(game_numberlives)
 58+  BB8F 32 1B BC         ld (player1_lives),a
 59+  BB92 32 1C BC         ld (player2_lives),a                        ; set the initial number of lives at game start
 60+  BB95
 61+  BB95 21 1F BC         ld hl,player1_score+2
 62+  BB98 06 06            ld b,6
 63+  BB9A              player_init_gamestart0:
 64+  BB9A 36 30            ld (hl),48
 65+  BB9C 23               inc hl
 66+  BB9D 10 FB            djnz player_init_gamestart0                 ; zero out player 1 score
 67+  BB9F 21 28 BC         ld hl,player2_score+2
 68+  BBA2 06 06            ld b,6
 69+  BBA4              player_init_gamestart1:
 70+  BBA4 36 30            ld (hl),48
 71+  BBA6 23               inc hl
 72+  BBA7 10 FB            djnz player_init_gamestart1                 ; zero out player 2 score
 73+  BBA9 C9               ret
 74+  BBAA
 75+  BBAA              ;
 76+  BBAA              ; Initializes a player at start of a life
 77+  BBAA              ; Copy initial coords, copy lives, copy score
 78+  BBAA              ;
 79+  BBAA              player_init_lifestart:
 80+  BBAA 21 4C BB         ld hl,player+5
 81+  BBAD 06 09            ld b,9                      ; initialise 9 properties
 82+  BBAF              player_init_lifestart2:
 83+  BBAF 36 00            ld (hl),0
 84+  BBB1 23               inc hl
 85+  BBB2 10 FB            djnz player_init_lifestart2
 86+  BBB4
 87+  BBB4 21 49 BB         ld hl,player+2              ; initialise some properties
 88+  BBB7 36 02            ld (hl),2
 89+  BBB9 23               inc hl
 90+  BBBA 36 00            ld (hl),0
 91+  BBBC 23               inc hl
 92+  BBBD 36 01            ld (hl),1
 93+  BBBF
 94+  BBBF ED 4B 22 80      ld bc,(init_coord)
 95+  BBC3 ED 43 47 BB      ld (player),bc
 96+  BBC7 01 50 BB         ld bc,player+9
 97+  BBCA 3A 1B BC         ld a,(player1_lives)
 98+  BBCD 02               ld (bc),a
 99+  BBCE
100+  BBCE CD 65 C3         call diamonds_init      ; initialise gems
101+  BBD1
102+  BBD1 01 06 00         ld bc,6
103+  BBD4 11 99 C1         ld de,scores_current+2
104+  BBD7 3A 19 BB         ld a,(game_currentplayer)
105+  BBDA FE 01            cp 1
106+  BBDC C2 E5 BB         jp nz,player_init_lifestart0
107+  BBDF 21 1F BC         ld hl,player1_score+2
108+  BBE2 C3 E8 BB         jp player_init_lifestart1
109+  BBE5              player_init_lifestart0:
110+  BBE5 21 28 BC         ld hl,player2_score+2
111+  BBE8              player_init_lifestart1:
112+  BBE8 ED B0            ldir
113+  BBEA C9               ret
114+  BBEB
115+  BBEB              ;
116+  BBEB              ; Finalises a player at end of a life
117+  BBEB              ; Copy lives, copy score
118+  BBEB              ;
119+  BBEB              player_lifeend:
120+  BBEB 01 50 BB         ld bc,player+9
121+  BBEE 0A               ld a,(bc)
122+  BBEF 01 1B BC         ld bc,player1_lives
123+  BBF2 02               ld (bc),a
124+  BBF3 CD F7 BB         call player_recordcurrentscore
125+  BBF6 C9               ret
126+  BBF7
127+  BBF7              ;
128+  BBF7              ; Copies the current score in the current
129+  BBF7              ;
130+  BBF7              player_recordcurrentscore:
131+  BBF7 01 06 00         ld bc,6                  ; copy current score back to correct player
132+  BBFA 21 99 C1         ld hl,scores_current+2
133+  BBFD 3A 19 BB         ld a,(game_currentplayer)
134+  BC00 FE 01            cp 1
135+  BC02 C2 0B BC         jp nz,player_lifeend0
136+  BC05 11 1F BC         ld de,player1_score+2
137+  BC08 C3 0E BC         jp player_lifeend1
138+  BC0B              player_lifeend0:
139+  BC0B 11 28 BC         ld de,player2_score+2
140+  BC0E              player_lifeend1:
141+  BC0E ED B0            ldir
142+  BC10 C9               ret
143+  BC11
144+  BC11              ;
145+  BC11              ; Player just died, subtract a life
146+  BC11              ;
147+  BC11              player_died:
148+  BC11 01 50 BB         ld bc,player+9
149+  BC14 0A               ld a,(bc)
150+  BC15 3D               dec a
151+  BC16 02               ld (bc),a
152+  BC17 CD EB BB         call player_lifeend
153+  BC1A C9               ret
154+  BC1B
155+  BC1B              ;
156+  BC1B              ; Player lives
157+  BC1B              ;
158+  BC1B              player1_lives:
159+  BC1B 03               defb 3
160+  BC1C              player2_lives:
161+  BC1C 03               defb 3
162+  BC1D
163+  BC1D              ;
164+  BC1D              ; Player scores
165+  BC1D              ;
166+  BC1D              player1_score:
167+  BC1D 04 01 30 30      defb 4,1,'000000',255
167+  BC21 30 30 30 30
167+  BC25 FF
168+  BC26              player2_score:
169+  BC26 16 01 30 30      defb 22,1,'000000',255
169+  BC2A 30 30 30 30
169+  BC2E FF
170+  BC2F
171+  BC2F              ;
172+  BC2F              ; Kills a player this life
173+  BC2F              ;
174+  BC2F              player_killplayer:
175+  BC2F 21 51 BB         ld hl,player+10
176+  BC32 36 01            ld (hl),1
177+  BC34 C9               ret
178+  BC35
179+  BC35              ;
180+  BC35              ; Crush a player this life
181+  BC35              ;
182+  BC35              player_crushplayer:
183+  BC35 21 52 BB         ld hl,player+11             ; mark as crushed
184+  BC38 36 01            ld (hl),1
185+  BC3A C9               ret
186+  BC3B
187+  BC3B              player_tankkillplayer
188+  BC3B 21 52 BB         ld hl,player+11             ; mark as tanked
189+  BC3E 36 02            ld (hl),2
190+  BC40 C9               ret
191+  BC41
192+  BC41              player_zonkplayer
193+  BC41 21 52 BB         ld hl,player+11             ; mark as zonked (missile)
194+  BC44 36 03            ld (hl),3
195+  BC46 C9               ret
196+  BC47
197+  BC47              ;
198+  BC47              ; Draws the player at the current position or deletes them
199+  BC47              ;
200+  BC47              player_drawplayer:
201+  BC47 3A 49 BB         ld a,(player+2)             ; get the current direction
202+  BC4A FE 03            cp 3
203+  BC4C C2 51 BC         jp nz,player_drawplayer0
204+  BC4F 3E 00            ld a,0                      ; if 3, then down, so set the direction to 0 since the sprite is the same as up
205+  BC51              player_drawplayer0:
206+  BC51 5F               ld e,a                      ; store in e
207+  BC52 3A 52 BB         ld a,(player+11)             ; get the dying flag
208+  BC55 FE 01            cp 1
209+  BC57 CA 69 BC         jp z,player_drawplayer3     ; if it's one, we're being crushed
210+  BC5A              player_drawplayer4:
211+  BC5A 3A 4D BB         ld a,(player+6)             ; get the dig flag
212+  BC5D FE 01            cp 1
213+  BC5F CA B8 BC         jp z,player_drawplayer1    ; get dig frame
214+  BC62 3A 4A BB         ld a,(player+3)             ; this is normal movement so get the current frame
215+  BC65 83               add a,e
216+  BC66 C3 BD BC         jp player_drawplayer2
217+  BC69              player_drawplayer3:
218+  BC69 21 53 BB         ld hl,player+12
219+  BC6C 7E               ld a,(hl)                  ; crushing, so get the current anim flag
220+  BC6D FE 00            cp 0
221+  BC6F C2 78 BC         jp nz,player_drawplayer5    ; if this isn't zero, then this isn't the first time round, so do the crush anim
222+  BC72 3E 64            ld a,100
223+  BC74 77               ld (hl),a                   ; otherwise, load up the anim frames
224+  BC75 C3 5A BC         jp player_drawplayer4       ; and return to the main loop to remove the current frame
225+  BC78              player_drawplayer5:
226+  BC78 3D               dec a
227+  BC79 77               ld (hl),a
228+  BC7A FE 00            cp 0
229+  BC7C CC 2F BC         call z,player_killplayer     ; final animation, so kill the player
230+  BC7F FE 0A            cp 10                         ; play the sound
231+  BC81 CC 7A AE         call z, sound_rockfell
232+  BC84 FE 14            cp 20                        ; check if we should move the rock
233+  BC86 C2 9A BC         jp nz,player_drawplayer8
234+  BC89 D9               exx
235+  BC8A F5               push af
236+  BC8B ED 4B 38 C0      ld bc,(rocks_killerrock)    ; get the coords of the rock that killed us
237+  BC8F 21 91 B4         ld hl,sprites+72
238+  BC92 CD 94 A9         call sprites_drawsprite     ; draw a rock over current
239+  BC95 F1               pop af
240+  BC96 D9               exx
241+  BC97 C3 B1 BC         jp player_drawplayer6       ; continue drawing player
242+  BC9A              player_drawplayer8:
243+  BC9A FE 14            cp 20
244+  BC9C D2 B1 BC         jp nc,player_drawplayer6    ; if not in last 10 frames, draw as normal
245+  BC9F ED 4B 47 BB      ld bc,(player)
246+  BCA3 CD C2 A8         call screen_getcharcoordsfromscreencoords ; get the char coords into bc
247+  BCA6 3E 42            ld a,66             ; load red
248+  BCA8 CD 1A A9         call screen_setattr
249+  BCAB 21 91 B4         ld hl,sprites+72            ; otherwise, player is rock
250+  BCAE C3 C7 BC         jp player_drawplayer7
251+  BCB1              player_drawplayer6:
252+  BCB1 E6 01            and 1                       ; check for odd
253+  BCB3 C6 0A            add 10                      ; add 10, to get either 10 or 11
254+  BCB5 C3 BD BC         jp player_drawplayer2
255+  BCB8              player_drawplayer1:
256+  BCB8 3A 49 BB         ld a,(player+2)             ; digging, get the current direction again, because want all four
257+  BCBB C6 06            add a,6                     ; add direction to 6 to get frame
258+  BCBD              player_drawplayer2:
259+  BCBD 07               rlca
260+  BCBE 07               rlca
261+  BCBF 07               rlca                        ; multiply by eight
262+  BCC0 6F               ld l,a
263+  BCC1 26 00            ld h,0
264+  BCC3 11 3C B5         ld de,player_sprite
265+  BCC6 19               add hl,de                   ; load hl with the location of the player sprite data
266+  BCC7              player_drawplayer7:
267+  BCC7 ED 4B 47 BB      ld bc,(player)              ; load bc with the start coords
268+  BCCB CD 94 A9         call sprites_drawsprite     ; call the routine to draw the sprite
269+  BCCE                  ;call player_storeupdatedlines ; log updated rows
270+  BCCE C9               ret
271+  BCCF
272+  BCCF
273+  BCCF              ;
274+  BCCF              ; Runs after the player just moved. Changes animation frame if required
275+  BCCF              ;
276+  BCCF              player_justmoved:
277+  BCCF D9               exx
278+  BCD0 3A 4B BB         ld a,(player+4)             ; get the transition count
279+  BCD3 FE 00            cp 0
280+  BCD5 CA DB BC         jp z, player_justmoved2     ; if zero reset and change the frame
281+  BCD8 C3 F5 BC         jp player_justmoved1       ; otherwise decrease and continue
282+  BCDB              player_justmoved2:
283+  BCDB                  ; reset and change frame in here
284+  BCDB 3E 01            ld a,1
285+  BCDD 32 4B BB         ld (player+4),a            ; reset back to whatever
286+  BCE0 3A 4A BB         ld a,(player+3)             ; load the frame
287+  BCE3 FE 03            cp 3                       ; flip between 3 and 0
288+  BCE5 C2 ED BC         jp nz, player_justmoved4
289+  BCE8 3E 00            ld a,0
290+  BCEA C3 EF BC         jp player_justmoved5
291+  BCED              player_justmoved4:
292+  BCED 3E 03            ld a,3
293+  BCEF              player_justmoved5:
294+  BCEF 32 4A BB         ld (player+3),a           ; save back
295+  BCF2 C3 F9 BC         jp player_justmoved3
296+  BCF5              player_justmoved1:
297+  BCF5                  ; decrease count
298+  BCF5 3D               dec a
299+  BCF6 32 4B BB         ld (player+4),a
300+  BCF9              player_justmoved3:
301+  BCF9 D9               exx;
302+  BCFA C9               ret
303+  BCFB
304+  BCFB              ;
305+  BCFB              ; Called if the player has collected a diamond. Checks the current coord. If it is the start coord, then return complete
306+  BCFB              ; Outputs:
307+  BCFB              ; a - 1 for completed level
308+  BCFB              player_checkforexit:
309+  BCFB ED 4B 47 BB      ld bc,(player)                 ; get player coords
310+  BCFF ED 5B 22 80      ld de,(init_coord)             ; get start coords
311+  BD03 78               ld a,b
312+  BD04 BA               cp d                         ; compare horiz
313+  BD05 C2 10 BD         jp nz,player_checkforexit1
314+  BD08 79               ld a,c
315+  BD09 BB               cp e                        ; compare vert
316+  BD0A C2 10 BD         jp nz,player_checkforexit1
317+  BD0D              player_checkforexit0:
318+  BD0D 3E 01            ld a,1                       ; hasn't completed
319+  BD0F C9               ret
320+  BD10              player_checkforexit1:
321+  BD10 3E 00            ld a,0                       ; has completed
322+  BD12 C9               ret
# file closed: game/player.asm
 40   BD13                  include "game\ship.asm"
# file opened: game/ship.asm
  1+  BD13              ;
  2+  BD13              ; Ship initial position: vert,horiz
  3+  BD13              ;
  4+  BD13              ship_initpos:
  5+  BD13 00 24            defb 0,36
  6+  BD15              ship_initpos2:
  7+  BD15 00 00            defb 0,0
  8+  BD17              ship_frame:
  9+  BD17 00               defb 0
 10+  BD18              ;
 11+  BD18              ; The current memory location
 12+  BD18              ;
 13+  BD18              ship_current_sprite:
 14+  BD18 00 00            defb 0,0
 15+  BD1A
 16+  BD1A              ship_current_coords:
 17+  BD1A 00 00            defb 0,0
 18+  BD1C
 19+  BD1C              ship_process:
 20+  BD1C 3A 52 BB         ld a,(player+11)
 21+  BD1F FE 02            cp 2                        ; has the player been killed by tank?
 22+  BD21 C0               ret nz                      ; do nothing if not
 23+  BD22 CD EB B8         call control_scroll_up           ; make sure the screen is on the top screen
 24+  BD25 CD 94 BD         call ship_takeoff           ; bye bye
 25+  BD28 CD 2F BC         call player_killplayer      ; killed
 26+  BD2B 06 32            ld b,50
 27+  BD2D CD 82 80         call utilities_pauseforframes
 28+  BD30 C9               ret
 29+  BD31
 30+  BD31              ;
 31+  BD31              ;   Draw and land the ship - first move the ship down, then across, drawing the player in the middle
 32+  BD31              ;
 33+  BD31              ship_land:
 34+  BD31 ED 4B 13 BD      ld bc,(ship_initpos)
 35+  BD35 ED 43 15 BD      ld (ship_initpos2),bc        ; save the initial position for later use
 36+  BD39 1E 00            ld e,0                      ; store a flag to track first time round
 37+  BD3B 06 09            ld b,9                      ; move down 8 pixels
 38+  BD3D              ship_land0:
 39+  BD3D C5               push bc
 40+  BD3E 7B               ld a,e
 41+  BD3F D5               push de                     ; store de for next time round
 42+  BD40 FE 01            cp 1                        ; check first time flag
 43+  BD42 C2 57 BD         jp nz,ship_land1             ; don't draw over previous one if first time
 44+  BD45 CD DC BD         call ship_draw_full         ; delete old one
 45+  BD48 CD C0 BD         call ship_change_frame      ; increment the frame
 46+  BD4B ED 4B 15 BD      ld bc,(ship_initpos2)       ; get the current coords
 47+  BD4F 81 C6 01         add c,1                     ; move down one pixels
 48+  BD52 4F               ld c,a
 49+  BD53 ED 43 15 BD      ld (ship_initpos2),bc
 50+  BD57              ship_land1:
 51+  BD57 CD DC BD         call ship_draw_full         ; draw the ship
 52+  BD5A CD D5 BD         call ship_draw_screen
 53+  BD5D D1               pop de
 54+  BD5E 1E 01            ld e,1
 55+  BD60 C1               pop bc
 56+  BD61 10 DA            djnz ship_land0             ; repeat for downward movement
 57+  BD63                  ; done moving down
 58+  BD63                  ; now move across
 59+  BD63 CD 47 BC         call player_drawplayer      ; draw player
 60+  BD66 CD DC BD         call ship_draw_full         ; delete old one
 61+  BD69 1E 00            ld e,0                      ; store a flag to track first time round
 62+  BD6B 06 14            ld b,20                      ; move back 20 pixels pixels
 63+  BD6D              ship_land3:
 64+  BD6D C5               push bc
 65+  BD6E 7B               ld a,e
 66+  BD6F D5               push de                     ; store de for next time round
 67+  BD70 FE 01            cp 1                        ; check first time flag
 68+  BD72 C2 87 BD         jp nz,ship_land2             ; don't draw over previous one if first time
 69+  BD75 CD DC BD         call ship_draw_full         ; delete old one
 70+  BD78 CD C0 BD         call ship_change_frame      ; increment the frame
 71+  BD7B ED 4B 15 BD      ld bc,(ship_initpos2)       ; get the current coords
 72+  BD7F 78               ld a,b
 73+  BD80 D6 01            sub 1                       ; move back one pixels
 74+  BD82 47               ld b,a
 75+  BD83 ED 43 15 BD      ld (ship_initpos2),bc
 76+  BD87              ship_land2:
 77+  BD87 CD DC BD         call ship_draw_full         ; draw the ship
 78+  BD8A CD D5 BD         call ship_draw_screen       ; draw the frame to screen by clearing the buffer
 79+  BD8D D1               pop de
 80+  BD8E 1E 01            ld e,1                      ; set e to 1 to indicate >1 time
 81+  BD90 C1               pop bc
 82+  BD91 10 DA            djnz ship_land3             ; repeat for vertical movement
 83+  BD93 C9               ret
 84+  BD94
 85+  BD94              ;
 86+  BD94              ;   Take off the ship
 87+  BD94              ;
 88+  BD94              ship_takeoff:
 89+  BD94 1E 01            ld e,1                      ; store a flag to track first time round
 90+  BD96 06 08            ld b,8                      ; move up 8 pixels
 91+  BD98              ship_takeoff0:
 92+  BD98 C5               push bc
 93+  BD99 7B               ld a,e
 94+  BD9A D5               push de                     ; store de for next time round
 95+  BD9B FE 01            cp 1                        ; check first time flag
 96+  BD9D C2 B3 BD         jp nz,ship_takeoff1             ; don't draw over previous one if first time
 97+  BDA0 ED 4B 15 BD      ld bc,(ship_initpos2)       ; get the current coords
 98+  BDA4 CD DC BD         call ship_draw_full         ; delete old one
 99+  BDA7 CD C0 BD         call ship_change_frame      ; increment the frame
100+  BDAA ED 4B 15 BD      ld bc,(ship_initpos2)       ; get the current coords
101+  BDAE 0D               dec c                       ; move up one pixels
102+  BDAF ED 43 15 BD      ld (ship_initpos2),bc
103+  BDB3              ship_takeoff1:
104+  BDB3 CD DC BD         call ship_draw_full         ; draw the ship
105+  BDB6 CD D5 BD         call ship_draw_screen
106+  BDB9 D1               pop de
107+  BDBA 1E 01            ld e,1
108+  BDBC C1               pop bc
109+  BDBD 10 D9            djnz ship_takeoff0             ; repeat for upward movement
110+  BDBF                  ; done moving up
111+  BDBF C9               ret
112+  BDC0
113+  BDC0              ;
114+  BDC0              ; Swap the animation frame between 0 and 32. This will be added to the memory location later
115+  BDC0              ;
116+  BDC0              ship_change_frame:
117+  BDC0 F5               push af
118+  BDC1 3A 17 BD         ld a,(ship_frame)
119+  BDC4 FE 00            cp 0
120+  BDC6 CA CE BD         jp z,ship_change_frame0
121+  BDC9 3E 00            ld a,0                      ; flip to 0
122+  BDCB C3 D0 BD         jp ship_change_frame1
123+  BDCE              ship_change_frame0:
124+  BDCE 3E 20            ld a,32                      ; flip to 32
125+  BDD0              ship_change_frame1:
126+  BDD0 32 17 BD         ld (ship_frame),a            ; save the frame
127+  BDD3 F1               pop af
128+  BDD4 C9               ret
129+  BDD5
130+  BDD5              ship_draw_screen:
131+  BDD5 76               halt
132+  BDD6 F3               di
133+  BDD7 CD 99 A6         call buffer_buffertoscreen  ; copy buffer to screen
134+  BDDA FB               ei                          ; enable interupts
135+  BDDB C9               ret
136+  BDDC
137+  BDDC              ship_draw_full:
138+  BDDC 21 9C B5         ld hl,ship_sprite
139+  BDDF ED 4B 15 BD      ld bc,(ship_initpos2)         ; load bc with the start coords
140+  BDE3 22 18 BD         ld (ship_current_sprite),hl  ; put into memory
141+  BDE6 ED 43 1A BD      ld (ship_current_coords),bc  ; put into memory
142+  BDEA CD 09 BE         call ship_draw
143+  BDED 08               ex af,af'
144+  BDEE 3A 17 BD         ld a,(ship_frame)            ; get the animation frame
145+  BDF1 16 00            ld d,0
146+  BDF3 5F               ld e,a
147+  BDF4 19               add hl,de
148+  BDF5 22 18 BD         ld (ship_current_sprite),hl  ; put into memory
149+  BDF8 08               ex af,af'
150+  BDF9 ED 4B 15 BD      ld bc,(ship_initpos2)         ; load bc with the start coords
151+  BDFD 81 C6 08         add c,8                      ; move one line down
152+  BE00 4F               ld c,a
153+  BE01 ED 43 1A BD      ld (ship_current_coords),bc  ; put into memory
154+  BE05 CD 09 BE         call ship_draw
155+  BE08 C9               ret
156+  BE09
157+  BE09              ;
158+  BE09              ; Draw the ship
159+  BE09              ; Inputs:
160+  BE09              ; None, all in memory
161+  BE09              ;
162+  BE09              ship_draw:
163+  BE09 3E 04            ld a,4                              ; 4 pieces per half
164+  BE0B              ship_draw0:
165+  BE0B F5               push af
166+  BE0C 2A 18 BD         ld hl,(ship_current_sprite)
167+  BE0F ED 4B 1A BD      ld bc,(ship_current_coords)         ; load bc with the start coords
168+  BE13 CD 94 A9         call sprites_drawsprite
169+  BE16 2A 18 BD         ld hl,(ship_current_sprite)
170+  BE19 ED 4B 1A BD      ld bc,(ship_current_coords)         ; load bc with the start coords
171+  BE1D 11 08 00         ld de,8
172+  BE20 19               add hl,de
173+  BE21 80 C6 08         add b,8
174+  BE24 47               ld b,a
175+  BE25 22 18 BD         ld (ship_current_sprite),hl         ; put into memory
176+  BE28 ED 43 1A BD      ld (ship_current_coords),bc         ; put into memory
177+  BE2C F1               pop af
178+  BE2D 3D               dec a
179+  BE2E FE 00            cp 0
180+  BE30 C2 0B BE         jp nz,ship_draw0
181+  BE33
182+  BE33 C9               ret
183+  BE34
# file closed: game/ship.asm
 41   BE34                  include "game\tank.asm"
# file opened: game/tank.asm
  1+  BE34              ;
  2+  BE34              ; tank initial position: vert,horiz
  3+  BE34              ;
  4+  BE34              tank_initpos:
  5+  BE34 10 D0            defb 16,208
  6+  BE36              tank_initpos2:
  7+  BE36 00 00            defb 0,0
  8+  BE38              tank_frame:
  9+  BE38 00               defb 0
 10+  BE39              tank_anim:
 11+  BE39 11               defb 17
 12+  BE3A
 13+  BE3A              ;
 14+  BE3A              ; The damage countdown
 15+  BE3A              ;
 16+  BE3A              tank_currentdamage:
 17+  BE3A F0               defb 240
 18+  BE3B
 19+  BE3B              ;
 20+  BE3B              ; The damage coordinate
 21+  BE3B              ;
 22+  BE3B              tank_currentdamagecoord:
 23+  BE3B 16 02            defb 22,2
 24+  BE3D
 25+  BE3D              ;
 26+  BE3D              ; Controls when the tank shoots
 27+  BE3D              ;
 28+  BE3D              tank_count:
 29+  BE3D 00               defb 0
 30+  BE3E
 31+  BE3E              ;
 32+  BE3E              ; Holds the block number of the current damage sprite
 33+  BE3E              ;
 34+  BE3E              tank_damageframe:
 35+  BE3E 00               defb 0
 36+  BE3F
 37+  BE3F              ;
 38+  BE3F              ; The current memory location
 39+  BE3F              ;
 40+  BE3F              tank_current_sprite:
 41+  BE3F 00 00            defb 0,0
 42+  BE41
 43+  BE41              tank_current_coords:
 44+  BE41 00 00            defb 0,0
 45+  BE43
 46+  BE43              ;
 47+  BE43              ; Is the missile displayed - will be 19 if so, 0 if not
 48+  BE43              ;
 49+  BE43              tank_missile_displayed:
 50+  BE43 00               defb 0
 51+  BE44
 52+  BE44              ;
 53+  BE44              ; Initialise the tank
 54+  BE44              ;
 55+  BE44              tank_init:
 56+  BE44 ED 4B 34 BE      ld bc,(tank_initpos)
 57+  BE48 ED 43 36 BE      ld (tank_initpos2),bc       ; save the initial position for later use
 58+  BE4C 21 38 BE         ld hl,tank_frame
 59+  BE4F 36 00            ld (hl),0
 60+  BE51 21 39 BE         ld hl,tank_anim
 61+  BE54 36 11            ld (hl),17
 62+  BE56 21 3E BE         ld hl,tank_damageframe              ; reset tank
 63+  BE59 36 00            ld (hl),0
 64+  BE5B 21 3D BE         ld hl,tank_count
 65+  BE5E 36 00            ld (hl),0
 66+  BE60 21 3A BE         ld hl,tank_currentdamage
 67+  BE63 36 F0            ld (hl),240
 68+  BE65 21 3B BE         ld hl,tank_currentdamagecoord
 69+  BE68 36 16            ld (hl),22
 70+  BE6A 23               inc hl
 71+  BE6B 36 02            ld (hl),2
 72+  BE6D 21 43 BE         ld hl,tank_missile_displayed
 73+  BE70 36 00            ld (hl),0
 74+  BE72
 75+  BE72 C9               ret
 76+  BE73
 77+  BE73              ;
 78+  BE73              ;   Draw and move the tank
 79+  BE73              ;   Start processing at frame 200
 80+  BE73              ;   Don't move if anim is zero
 81+  BE73              ;   Decrement frame if moved
 82+  BE73              ;
 83+  BE73              tank_process:
 84+  BE73 3A 39 BE         ld a,(tank_anim)
 85+  BE76 FE 00            cp 0
 86+  BE78 C2 7F BE         jp nz,tank_process0         ; fire the tank if we've already moved, or jump to movement
 87+  BE7B CD 90 BE         call tank_fire
 88+  BE7E C9               ret
 89+  BE7F              tank_process0:
 90+  BE7F CD 3D BB         call game_getcurrentframe   ; get the current frame number into a
 91+  BE82 FE 4B            cp 75
 92+  BE84 D8               ret c                       ; return if the frame number is below 100
 93+  BE85 CD AC BF         call tank_move              ; move tank if not
 94+  BE88 3A 39 BE         ld a,(tank_anim)
 95+  BE8B 3D               dec a
 96+  BE8C 32 39 BE         ld (tank_anim),a            ; decrease the anim count
 97+  BE8F C9               ret
 98+  BE90
 99+  BE90              ;
100+  BE90              ; Fires the tank
101+  BE90              ;
102+  BE90              tank_fire:
103+  BE90 3A 3D BE         ld a,(tank_count)            ; if not, don't do anything
104+  BE93 3C               inc a                        ; increment
105+  BE94 FE 19            cp 25                        ; have we reached fifty
106+  BE96 C2 9B BE         jp nz,tank_fire0
107+  BE99 3E 00            ld a,0                       ; reset if reached fifty
108+  BE9B              tank_fire0:                      ; DEALING WITH A NEW BLOCK
109+  BE9B 32 3D BE         ld (tank_count),a            ; store tank count
110+  BE9E FE 00            cp 0
111+  BEA0 CA B7 BE         jp z,tank_fire7              ; If this is zero, fire
112+  BEA3 3A 43 BE         ld a,(tank_missile_displayed) ; is the missile displaying?
113+  BEA6 FE 00            cp 0
114+  BEA8 C8               ret z                       ; don't do anything if not
115+  BEA9 CD 66 BF         call tank_missilegraphic     ; if not, overwrite the previous tank missile
116+  BEAC 3E 00            ld a,0                       ; reset the flag
117+  BEAE 32 43 BE         ld (tank_missile_displayed),a
118+  BEB1 3E 02            ld a,2
119+  BEB3 CD BE A5         call buffer_marklineforupdate
120+  BEB6 C9               ret                        ; only shoot if we're on 0
121+  BEB7              tank_fire7:
122+  BEB7 3A 3A BE         ld a,(tank_currentdamage)    ; get the damage countdown
123+  BEBA E6 07            and 7                       ; check if multiple of 8 - house keeping when moving onto a new block
124+  BEBC C2 F2 BE         jp nz,tank_fire1            ; not, so just do a normal frame
125+  BEBF ED 4B 3B BE      ld bc,(tank_currentdamagecoord) ; get the current damage coord into bc
126+  BEC3 79               ld a,c
127+  BEC4 FE 0A            cp 10
128+  BEC6 C2 CD BE         jp nz, tank_fire6
129+  BEC9 CD 9E BF         call tank_killedbytank      ; we're through, so the player has died. Kill them.
130+  BECC C9               ret                         ; return if we're through the mountain
131+  BECD              tank_fire6:
132+  BECD 3E 0F            ld a,15
133+  BECF 32 3E BE         ld (tank_damageframe),a     ; reset the damage frame
134+  BED2 21 49 B4         ld hl,sprites               ; location of the empty block
135+  BED5 CD EC A8         call screen_showchar        ; show this character here
136+  BED8 ED 4B 3B BE      ld bc,(tank_currentdamagecoord) ; get the current damage coord into bc
137+  BEDC 05               dec b                       ; look one above
138+  BEDD CD 50 A9         call screen_ischarempty     ; check if it is empty
139+  BEE0 ED 4B 3B BE      ld bc,(tank_currentdamagecoord) ; get the current damage coord into bc again
140+  BEE4 FE 01            cp 1
141+  BEE6 C2 29 BF         jp nz,tank_fire2             ; block above isn't empty, so can't move on, copy down above blocks
142+  BEE9 ED 4B 3B BE      ld bc,(tank_currentdamagecoord) ; get the current damage coord into bc
143+  BEED 0D               dec c
144+  BEEE ED 43 3B BE      ld (tank_currentdamagecoord),bc ; store the coord
145+  BEF2              tank_fire1:                         ; DEALING WITH NORMAL DAMAGE
146+  BEF2 ED 4B 3B BE      ld bc,(tank_currentdamagecoord) ; get the current damage coord into bc
147+  BEF6 3A 3A BE         ld a,(tank_currentdamage)    ; get the damage countdown
148+  BEF9 E6 07            and 7                       ; is it a multiple of 8? only want to do the first line check then
149+  BEFB C2 06 BF         jp nz, tank_fire5
150+  BEFE CD 80 A9         call screen_getcharfirstbyte    ; get the first byte to check if this is a slope
151+  BF01 FE FF            cp 255                      ; if it's a full line, it will be 255 and not a slope
152+  BF03 C2 47 BF         jp nz,tank_fire3            ; if it's a slope, handle this differently
153+  BF06              tank_fire5:
154+  BF06 3A 3E BE         ld a,(tank_damageframe)
155+  BF09 CD 0F A9         call screen_getblock        ; get the block data into hl
156+  BF0C CD EC A8         call screen_showchar        ; show this character here
157+  BF0F 3A 3E BE         ld a,(tank_damageframe)
158+  BF12 3C               inc a
159+  BF13 32 3E BE         ld (tank_damageframe),a     ; increment the damage block and store
160+  BF16 3A 3A BE         ld a,(tank_currentdamage)    ; get the damage countdown
161+  BF19 3D               dec a
162+  BF1A 3D               dec a
163+  BF1B 32 3A BE         ld (tank_currentdamage),a     ; decrease current damage by 2 and store
164+  BF1E 3A 43 BE         ld a,(tank_missile_displayed) ; is the missile displaying?
165+  BF21 FE 00            cp 0
166+  BF23 CC 66 BF         call z, tank_missilegraphic
167+  BF26 C3 50 BF         jp tank_fire4
168+  BF29              tank_fire2:                     ; DEALING WITH COPYING BLOCKS FROM ABOVE
169+  BF29 05               dec b
170+  BF2A C5               push bc
171+  BF2B CD 69 A9         call screen_copyblockdown       ; copy the block down
172+  BF2E ED 4B 3B BE      ld bc,(tank_currentdamagecoord) ; get the current damage coord into bc
173+  BF32 C1               pop bc                      ; get the coord we just checked back
174+  BF33 78               ld a,b
175+  BF34 FE 00            cp 0
176+  BF36 CA F2 BE         jp z,tank_fire1             ; if we're at the top of the screen, don't check any more
177+  BF39 C5               push bc
178+  BF3A 05               dec b
179+  BF3B CD 50 A9         call screen_ischarempty     ; check if it is empty
180+  BF3E C1               pop bc
181+  BF3F FE 01            cp 1                        ; if empty
182+  BF41 C2 29 BF         jp nz, tank_fire2            ; copy another one down
183+  BF44 C3 F2 BE         jp tank_fire1               ; otherwise, return to main thread
184+  BF47              tank_fire3:                      ; dealing with slopes
185+  BF47 3A 3A BE         ld a,(tank_currentdamage)    ; get the damage countdown
186+  BF4A 06 08            ld b,8
187+  BF4C 90               sub b                        ; special case for slopes
188+  BF4D 32 3A BE         ld (tank_currentdamage),a    ; decrease the damage countdown by 8, so that next time, we get rid of this block without eroding it
189+  BF50              tank_fire4:                     ; TIDY UP
190+  BF50 ED 4B 3B BE      ld bc,(tank_currentdamagecoord)
191+  BF54 ED 43 AB AA      ld (origcoords),bc
192+  BF58 CD BE A5         call buffer_marklineforupdate
193+  BF5B 3E 01            ld a,1
194+  BF5D CD BE A5         call buffer_marklineforupdate
195+  BF60 3E 02            ld a,2
196+  BF62 CD BE A5         call buffer_marklineforupdate
197+  BF65 C9               ret
198+  BF66
199+  BF66              ;
200+  BF66              ; Displays or hides the missile graphic, and changes the gun
201+  BF66              ;
202+  BF66              tank_missilegraphic:
203+  BF66 3A 43 BE         ld a,(tank_missile_displayed)
204+  BF69 FE 00            cp 0
205+  BF6B C2 73 BF         jp nz,tank_missilegraphic0
206+  BF6E 3E 13            ld a,19
207+  BF70 C3 75 BF         jp tank_missilegraphic1
208+  BF73              tank_missilegraphic0:
209+  BF73 3E 00            ld a,0
210+  BF75              tank_missilegraphic1:
211+  BF75 32 43 BE         ld (tank_missile_displayed),a ; store the flipped graphic
212+  BF78 ED 4B 3B BE      ld bc,(tank_currentdamagecoord)
213+  BF7C 0C               inc c
214+  BF7D 0C               inc c                   ; print the graphic 2 spaces right
215+  BF7E CD 0F A9         call screen_getblock        ; get the block data into hl
216+  BF81 CD EC A8         call screen_showchar        ; show this character here
217+  BF84 06 02            ld b,2
218+  BF86 0E 18            ld c,24                     ; set gunbarrel coords
219+  BF88 11 00 00         ld de,0
220+  BF8B 21 FC B5         ld hl,tank_sprite           ; set hl to gunbarrel gfx, shooting is +64
221+  BF8E 3A 43 BE         ld a,(tank_missile_displayed)
222+  BF91 FE 00            cp 0
223+  BF93 CA 99 BF         jp z,tank_missilegraphic2
224+  BF96 11 40 00         ld de,64
225+  BF99              tank_missilegraphic2:
226+  BF99 19               add hl,de                   ; work out missile graphic
227+  BF9A CD EC A8         call screen_showchar        ; show this character here
228+  BF9D C9               ret
229+  BF9E
230+  BF9E              ;
231+  BF9E              ; Deal with the player being killed by the tank
232+  BF9E              ;
233+  BF9E              tank_killedbytank:
234+  BF9E ED 4B 3B BE      ld bc,(tank_currentdamagecoord) ; get the current damage coord into bc
235+  BFA2 21 49 B4         ld hl,sprites                   ; empty sprite
236+  BFA5 CD EC A8         call screen_showchar            ; hide the last piece of dirt
237+  BFA8 CD 3B BC         call player_tankkillplayer
238+  BFAB C9               ret
239+  BFAC
240+  BFAC              tank_move:
241+  BFAC ED 4B 36 BE      ld bc,(tank_initpos2)
242+  BFB0 C5               push bc
243+  BFB1 3A 39 BE         ld a,(tank_anim)
244+  BFB4 FE 11            cp 17                       ; check first time flag
245+  BFB6 CA C8 BF         jp z,tank_move1             ; don't draw over previous one if first time
246+  BFB9 CD CD BF         call tank_draw_full         ; delete old one
247+  BFBC ED 4B 36 BE      ld bc,(tank_initpos2)       ; get the current coords
248+  BFC0 78               ld a,b
249+  BFC1 D6 01            sub 1                       ; move back one pixels
250+  BFC3 47               ld b,a
251+  BFC4 ED 43 36 BE      ld (tank_initpos2),bc
252+  BFC8              tank_move1:
253+  BFC8 CD CD BF         call tank_draw_full         ; draw the tank
254+  BFCB C1               pop bc
255+  BFCC C9               ret
256+  BFCD
257+  BFCD              tank_draw_full:
258+  BFCD 21 FC B5         ld hl,tank_sprite
259+  BFD0 ED 4B 36 BE      ld bc,(tank_initpos2)         ; load bc with the start coords
260+  BFD4 22 3F BE         ld (tank_current_sprite),hl  ; put into memory
261+  BFD7 ED 43 41 BE      ld (tank_current_coords),bc  ; put into memory
262+  BFDB CD FA BF         call tank_draw
263+  BFDE 08               ex af,af'
264+  BFDF 3A 38 BE         ld a,(tank_frame)            ; get the animation frame
265+  BFE2 16 00            ld d,0
266+  BFE4 5F               ld e,a
267+  BFE5 19               add hl,de
268+  BFE6 22 3F BE         ld (tank_current_sprite),hl  ; put into memory
269+  BFE9 08               ex af,af'
270+  BFEA ED 4B 36 BE      ld bc,(tank_initpos2)         ; load bc with the start coords
271+  BFEE 81 C6 08         add c,8                      ; move one line down
272+  BFF1 4F               ld c,a
273+  BFF2 ED 43 41 BE      ld (tank_current_coords),bc  ; put into memory
274+  BFF6 CD FA BF         call tank_draw
275+  BFF9 C9               ret
276+  BFFA
277+  BFFA              ;
278+  BFFA              ; Draw the tank
279+  BFFA              ; Inputs:
280+  BFFA              ; None, all in memory
281+  BFFA              ;
282+  BFFA              tank_draw:
283+  BFFA 3E 04            ld a,4                              ; 4 pieces per half
284+  BFFC              tank_draw0:
285+  BFFC F5               push af
286+  BFFD 2A 3F BE         ld hl,(tank_current_sprite)
287+  C000 ED 4B 41 BE      ld bc,(tank_current_coords)         ; load bc with the start coords
288+  C004 CD 94 A9         call sprites_drawsprite
289+  C007 2A 3F BE         ld hl,(tank_current_sprite)
290+  C00A ED 4B 41 BE      ld bc,(tank_current_coords)         ; load bc with the start coords
291+  C00E 11 08 00         ld de,8
292+  C011 19               add hl,de
293+  C012 80 C6 08         add b,8
294+  C015 47               ld b,a
295+  C016 22 3F BE         ld (tank_current_sprite),hl         ; put into memory
296+  C019 ED 43 41 BE      ld (tank_current_coords),bc         ; put into memory
297+  C01D F1               pop af
298+  C01E 3D               dec a
299+  C01F FE 00            cp 0
300+  C021 C2 FC BF         jp nz,tank_draw0
301+  C024
302+  C024 C9               ret
303+  C025
# file closed: game/tank.asm
 42   C025                  include "game\rocks.asm"
# file opened: game/rocks.asm
  1+  C025              ;
  2+  C025              ; A structure of falling rocks
  3+  C025              ; Assume we'll never have more than 4 falling at any one time
  4+  C025              ; (1,2 - 16 bit memory location for rock graphic),state (0 fell, 1 falling, 2 wobbling), countdown
  5+  C025              ;
  6+  C025              rocks_falling:
  7+  C025 00 00 00 00      defb 0,0,0,0
  8+  C029 00 00 00 00      defb 0,0,0,0
  9+  C02D 00 00 00 00      defb 0,0,0,0
 10+  C031 00 00 00 00      defb 0,0,0,0
 11+  C035
 12+  C035              rocks_tmp:
 13+  C035 00               defb 0
 14+  C036
 15+  C036              rocks_tmp2:
 16+  C036 00 00            defb 0,0
 17+  C038
 18+  C038              ;
 19+  C038              ; Coords of the rock that killed us
 20+  C038              ;
 21+  C038              rocks_killerrock:
 22+  C038 00 00            defb 0,0
 23+  C03A
 24+  C03A              ;
 25+  C03A              ; Checks for a rock that needs to start falling. Takes a memory location of the first line at the bottom of the space.
 26+  C03A              ; Checks to see if the pixel row in that location is a rock bottom. If it is, mark this rock as ready to fall.
 27+  C03A              ; If the pixel row is not the rock bottom, stop checking.
 28+  C03A              ; Inputs:
 29+  C03A              ; hl- memory location
 30+  C03A              ;
 31+  C03A              rocks_checkforfalling:
 32+  C03A 7E               ld a,(hl)           ; get the pixel row in this memory location
 33+  C03B FE 7E            cp 126              ; check against the bottom pixel row of the rock graphic
 34+  C03D C2 43 C0         jp nz,rocks_checkforfalling2 ; not a rock, stop
 35+  C040 CD 44 C0         call rocks_addrocktofalling ; mark the rock as falling
 36+  C043              rocks_checkforfalling2:
 37+  C043 C9               ret
 38+  C044
 39+  C044              ;
 40+  C044              ; Adds the rock to the structure that tracks falling rocks
 41+  C044              ; Inputs:
 42+  C044              ; hl - memory location of falling rock graphic
 43+  C044              ; bc - coords of rock, c vert
 44+  C044              rocks_addrocktofalling:
 45+  C044 C5               push bc             ; store the coords
 46+  C045 11 25 C0         ld de,rocks_falling
 47+  C048 06 04            ld b,4              ; number of possible falling rocks
 48+  C04A              rocks_addrocktofalling0:
 49+  C04A 13               inc de
 50+  C04B                  ;inc de
 51+  C04B 13               inc de              ; move three along to get the state
 52+  C04C 1A               ld a,(de)           ; load the state
 53+  C04D FE 00            cp 0                ; check if this is not falling
 54+  C04F C2 65 C0         jp nz,rocks_addrocktofalling1 ; continue the loop if not 0
 55+  C052 13               inc de              ; move to frame
 56+  C053 3E 10            ld a,16             ; load the number of frames to wobble
 57+  C055 12               ld (de),a
 58+  C056 1B               dec de              ; move de back to state
 59+  C057 3E 02            ld a,2
 60+  C059 12               ld (de),a           ; set the state to wobbling
 61+  C05A 1B               dec de              ; move back coords
 62+  C05B C1               pop bc              ; get back coords
 63+  C05C 78               ld a,b
 64+  C05D 12               ld (de),a           ; store the vertical
 65+  C05E 1B               dec de
 66+  C05F 79               ld a,c
 67+  C060 12               ld (de),a           ; store the horizontal
 68+  C061 C5               push bc
 69+  C062 C3 69 C0         jp rocks_addrocktofalling2 ; done
 70+  C065              rocks_addrocktofalling1:
 71+  C065 13               inc de
 72+  C066 13               inc de              ; move memory along to next rock
 73+  C067 10 E1            djnz rocks_addrocktofalling0 ; try the next rock
 74+  C069              rocks_addrocktofalling2: ; done, return
 75+  C069 C1               pop bc              ; to tidy up
 76+  C06A C9               ret
 77+  C06B
 78+  C06B              ;
 79+  C06B              ; Processes any falling rocks
 80+  C06B              ;
 81+  C06B              rocks_processrocks:
 82+  C06B DD 21 25 C0      ld ix,rocks_falling
 83+  C06F 06 04            ld b,4              ; the number of rocks to check
 84+  C071              rocks_processrocks0:
 85+  C071 C5               push bc             ; store loop count
 86+  C072 DD 4E 00 DD      ld bc,(ix)          ; load the coords for this rock into bc
 86+  C076 46 01
 87+  C078 DD 23            inc ix
 88+  C07A DD 23            inc ix              ; move to the state
 89+  C07C DD 7E 00         ld a,(ix)           ; load the state into a
 90+  C07F FE 00            cp 0
 91+  C081 CA A2 C0         jp z,rocks_processrocks3 ; if not falling, check next
 92+  C084 FE 02            cp 2
 93+  C086 C2 96 C0         jp nz, rocks_processrocks2
 94+  C089                  ; we're wobbling
 95+  C089 DD 23            inc ix              ; get frame number for wobble
 96+  C08B DD 7E 00         ld a,(ix)           ; get wobble frame into a
 97+  C08E CD 65 C1         call rocks_wobble
 98+  C091 DD 23            inc ix              ; increment for next
 99+  C093 C3 A6 C0         jp rocks_processrocks1  ; do next rock
100+  C096              rocks_processrocks2:
101+  C096                  ; we're falling
102+  C096 C5               push bc
103+  C097 CD AA C0         call rocks_fall
104+  C09A C1               pop bc
105+  C09B DD 23            inc ix
106+  C09D DD 23            inc ix              ; inc ix to get to next
107+  C09F C3 A6 C0         jp rocks_processrocks1
108+  C0A2              rocks_processrocks3:
109+  C0A2 DD 23            inc ix
110+  C0A4 DD 23            inc ix
111+  C0A6              rocks_processrocks1:
112+  C0A6 C1               pop bc              ; get loop count back
113+  C0A7 10 C8            djnz rocks_processrocks0
114+  C0A9 C9               ret
115+  C0AA
116+  C0AA              ;
117+  C0AA              ; Falls a rock one pixel, checks the next square down to see if it is empty, if not, stop falling
118+  C0AA              ; bc - coord of current rock graphic on screen
119+  C0AA              ; ix - memory location of current rock in rock list, currently at the 3rd position (rock state)
120+  C0AA              ;
121+  C0AA              rocks_fall:
122+  C0AA DD 2B            dec ix
123+  C0AC DD 2B            dec ix              ; decrease ix back to coords
124+  C0AE ED 43 36 C0      ld (rocks_tmp2),bc  ; store original coords
125+  C0B2 3E 03            ld a,3              ; move this number of pixels
126+  C0B4              rocks_fall1:
127+  C0B4 32 35 C0         ld (rocks_tmp),a    ; store loop counter
128+  C0B7 DD 4E 00 DD      ld bc,(ix)          ; get current coords
128+  C0BB 46 01
129+  C0BD CD 89 AA         call sprites_scadd  ; get the memory of the coords into de
130+  C0C0 14               inc d               ; add 256 to get next row
131+  C0C1 1A               ld a,(de)           ; get the contents of the next row
132+  C0C2 FE 00            cp 0
133+  C0C4 C2 24 C1         jp nz,rocks_fall3    ; move the rock if the row is empty
134+  C0C7 0C               inc c               ; increment the vertical
135+  C0C8 DD 71 00 DD      ld (ix),bc          ; store the new coords
135+  C0CC 70 01
136+  C0CE 79               ld a,c              ; get the vertical coord into a
137+  C0CF E6 07            and 7               ; divisible by 8?
138+  C0D1 FE 00            cp 0
139+  C0D3 C2 F0 C0         jp nz,rocks_fall4   ; if not, carry on
140+  C0D6 CD C2 A8         call screen_getcharcoordsfromscreencoords ; get the char coords into bc
141+  C0D9 3E 42            ld a,66             ; load red
142+  C0DB CD 1A A9         call screen_setattr
143+  C0DE DD 4E 00 DD      ld bc,(ix)
143+  C0E2 46 01
144+  C0E4 79               ld a,c              ; get vertical
145+  C0E5 D6 08            sub 8               ; look up one square
146+  C0E7 4F               ld c,a              ; put a back in c
147+  C0E8 CD C2 A8         call screen_getcharcoordsfromscreencoords ; get the char coords into bc
148+  C0EB 3E 46            ld a,70             ; load yellow
149+  C0ED CD 1A A9         call screen_setattr
150+  C0F0              rocks_fall4:
151+  C0F0 3A 35 C0         ld a,(rocks_tmp)    ; get the loop counter
152+  C0F3 3D               dec a
153+  C0F4 FE 00            cp 0
154+  C0F6 C2 B4 C0         jp nz,rocks_fall1   ; do another pixel if needed
155+  C0F9              rocks_fall2:
156+  C0F9 3E 09            ld a,9              ; rock graphic
157+  C0FB ED 4B 36 C0      ld bc,(rocks_tmp2)  ; get the original coords
158+  C0FF CD 0F A9         call screen_getblock     ; get the memory into hl
159+  C102 CD 94 A9         call sprites_drawsprite  ; draw the sprite - over the top of the current one
160+  C105 3E 09            ld a,9
161+  C107 DD 4E 00 DD      ld bc,(ix)          ; get the new coords
161+  C10B 46 01
162+  C10D CD 0F A9         call screen_getblock     ; get the memory into hl
163+  C110 CD 94 A9         call sprites_drawsprite  ; draw the sprite - over the top of the current one
164+  C113 DD 4E 00 DD      ld bc,(ix)          ; get the coords again
164+  C117 46 01
165+  C119 CD 4A C1         call rocks_checkforplayer ; check to see if we hit a player
166+  C11C DD 23            inc ix
167+  C11E DD 23            inc ix                  ; get ix back to state
168+  C120 CD 3A C1         call rocks_makesound
169+  C123 C9               ret
170+  C124              rocks_fall3:
171+  C124 3E 00            ld a,0              ; set the state to fell
172+  C126 DD 77 02         ld (ix+2),a           ; store the falling state
173+  C129 DD 4E 00 DD      ld bc,(ix)          ; get the coords
173+  C12D 46 01
174+  C12F CD C2 A8         call screen_getcharcoordsfromscreencoords ; get the char coords into bc
175+  C132 3E 42            ld a,66             ; load magenta
176+  C134 CD 1A A9         call screen_setattr
177+  C137 C3 F9 C0         jp rocks_fall2      ; rejoin main loop
178+  C13A
179+  C13A              ;
180+  C13A              ; Makes the rock sound if we're no longer falling, and if we didn't hit a player
181+  C13A              ;
182+  C13A              rocks_makesound:
183+  C13A DD 7E 00         ld a,(ix)           ; get the state
184+  C13D FE 00            cp 0
185+  C13F C0               ret nz              ; if we haven't fallen, don't do anything
186+  C140 21 52 BB         ld hl,player+11
187+  C143 7E               ld a,(hl)
188+  C144 FE 01            cp 1
189+  C146 C4 7A AE         call nz, sound_rockfell ; only make sound if didn't kill player
190+  C149 C9               ret
191+  C14A
192+  C14A              ;
193+  C14A              ; Checks to see if the rock is hitting a player
194+  C14A              ; Inputs:
195+  C14A              ; bc - coords of rock we're checking
196+  C14A              rocks_checkforplayer:
197+  C14A ED 5B 47 BB      ld de,(player)       ; get the player coords
198+  C14E 7B               ld a,e               ; get the vert coord first
199+  C14F 91               sub c                ; subtract the rock vertical coord from players
200+  C150 FE 08            cp 8                 ; the rock will only hit a player if the player is directly underneath, so this must be 8
201+  C152 C0               ret nz               ; if not, hasn't hit
202+  C153 7A               ld a,d               ; get the player horiz coord
203+  C154 90               sub b                ; subtract rock coord
204+  C155 C6 07            add 7                ; add max distance
205+  C157 FE 0D            cp 13                ; compare to 13? if carry flag set, they've hit
206+  C159 DA 5D C1         jp c,rocks_checkforplayer0
207+  C15C C9               ret
208+  C15D              rocks_checkforplayer0:
209+  C15D ED 43 38 C0      ld (rocks_killerrock),bc; store the coords of the killer rock
210+  C161 CD 35 BC         call player_crushplayer ; if so, jump out
211+  C164 C9               ret
212+  C165
213+  C165              ;
214+  C165              ; Wobbles a rocks
215+  C165              ; Inputs:
216+  C165              ; bc - coord of current rock graphic on screen
217+  C165              ; ix - memory location of current rock in rock list, currently at the 4th position (wobble count)
218+  C165              ; a - wobble frame
219+  C165              rocks_wobble:
220+  C165 DD 7E 00         ld a,(ix)           ; get the wobble count, which we'll use as frame toggle
221+  C168 E6 01            and 1               ; is it odd or even, gets 1 or 0
222+  C16A 1E 09            ld e,9              ; this is the rock frame
223+  C16C 83               add a,e             ; add the frame toggle
224+  C16D C5               push bc
225+  C16E CD 0F A9         call screen_getblock     ; get the memory into hl
226+  C171 CD 94 A9         call sprites_drawsprite  ; draw the sprite - over the top of the current one
227+  C174
228+  C174 DD 7E 00         ld a,(ix)           ; get the frame toggle again
229+  C177 3D               dec a               ; decrease
230+  C178 DD 77 00         ld (ix),a           ; store
231+  C17B
232+  C17B E6 01            and 1
233+  C17D 1E 09            ld e,9              ; this is the rock frame
234+  C17F 83               add a,e             ; add the frame toggle
235+  C180 CD 0F A9         call screen_getblock     ; get the memory into hl
236+  C183
237+  C183 C1               pop bc
238+  C184 CD 94 A9         call sprites_drawsprite  ; draw the sprite again with the new frame - next time it will do the opposite
239+  C187
240+  C187 DD 7E 00         ld a,(ix)           ; get the wobble count back
241+  C18A FE 00            cp 0
242+  C18C C0               ret nz              ; if we're not at zero, return
243+  C18D DD 2B            dec ix              ; otherwise look to state location
244+  C18F 3E 01            ld a,1              ; set the state to falling
245+  C191 DD 77 00         ld (ix),a           ; store the falling state
246+  C194 DD 23            inc ix              ; set ix back to location of wobble count, and we're done
247+  C196 C9               ret
248+  C197
# file closed: game/rocks.asm
 43   C197                  include "game\scores.asm"
# file opened: game/scores.asm
  1+  C197              ;
  2+  C197              ; The score of the current player
  3+  C197              ;
  4+  C197              scores_current:
  5+  C197 04 01 30 30      defb 4,1,'000000',255       ;+2
  5+  C19B 30 30 30 30
  5+  C19F FF
  6+  C1A0
  7+  C1A0              scores_defaultname:
  8+  C1A0 2D 2D 2D         defb '---'
  9+  C1A3
 10+  C1A3              ;
 11+  C1A3              ; The current high score table
 12+  C1A3              ;
 13+  C1A3              scores_table:
 14+  C1A3 03 17 47 41      defb 03,23,'GAM000000',255         ;+0, +2, +5
 14+  C1A7 4D 30 30 30
 14+  C1AB 30 30 30 FF
 15+  C1AF 0C 17 47 41      defb 12,23,'GAM000000',255        ;+12, +14, +17
 15+  C1B3 4D 30 30 30
 15+  C1B7 30 30 30 FF
 16+  C1BB 15 17 47 41      defb 21,23,'GAM000000',255        ;+24, +26, +29
 16+  C1BF 4D 30 30 30
 16+  C1C3 30 30 30 FF
 17+  C1C7
 18+  C1C7              ;
 19+  C1C7              ; Add thousands to the score
 20+  C1C7              ; Inputs:
 21+  C1C7              ; b - number to add
 22+  C1C7              ;
 23+  C1C7              scores_addthousands:
 24+  C1C7 21 9B C1         ld hl,scores_current+4
 25+  C1CA CD F4 C1         call scores_update
 26+  C1CD C9               ret
 27+  C1CE
 28+  C1CE              ;
 29+  C1CE              ; Prints the score to screen
 30+  C1CE              ;
 31+  C1CE              scores_printscore:
 32+  C1CE 3A 19 BB         ld a,(game_currentplayer)   ; get current player
 33+  C1D1 21 97 C1         ld hl,scores_current
 34+  C1D4 FE 01            cp 1
 35+  C1D6 C2 DE C1         jp nz, score_printscore0    ; if not player 1
 36+  C1D9 36 04            ld (hl),4       ; set position for player 1
 37+  C1DB C3 E0 C1         jp score_printscore1
 38+  C1DE              score_printscore0:
 39+  C1DE 36 16            ld (hl),22       ; set position for player 2
 40+  C1E0              score_printscore1:
 41+  C1E0 21 97 C1         ld hl,scores_current
 42+  C1E3 CD BE 84         call string_print
 43+  C1E6 C9               ret
 44+  C1E7
 45+  C1E7              ;
 46+  C1E7              ; Prints both scores to screen
 47+  C1E7              ;
 48+  C1E7              scores_printscores:
 49+  C1E7 21 1D BC         ld hl,player1_score
 50+  C1EA CD BE 84         call string_print
 51+  C1ED 21 26 BC         ld hl,player2_score
 52+  C1F0 CD BE 84         call string_print
 53+  C1F3 C9               ret
 54+  C1F4
 55+  C1F4              ;
 56+  C1F4              ; Updates the current score.
 57+  C1F4              ; Inputs:
 58+  C1F4              ; hl - memory location of the score column
 59+  C1F4              ; b - number to add
 60+  C1F4              ;
 61+  C1F4              scores_update:
 62+  C1F4 7E               ld a,(hl)           ; current value of digit.
 63+  C1F5 80               add a,b             ; add points to this digit.
 64+  C1F6 77               ld (hl),a           ; place new digit back in string.
 65+  C1F7 FE 3A            cp 58               ; more than ASCII value '9'?
 66+  C1F9 D8               ret c               ; no - relax.
 67+  C1FA D6 0A            sub 10              ; subtract 10.
 68+  C1FC 77               ld (hl),a           ; put new character back in string.
 69+  C1FD              scores_update0:
 70+  C1FD 2B               dec hl              ; previous character in string.
 71+  C1FE 34               inc (hl)            ; up this by one.
 72+  C1FF 7E               ld a,(hl)           ; what's the new value?
 73+  C200 FE 3A            cp 58               ; gone past ASCII nine?
 74+  C202 D8               ret c               ; no, scoring done.
 75+  C203 D6 0A            sub 10              ; down by ten.
 76+  C205 77               ld (hl),a           ; put it back
 77+  C206 C3 FD C1         jp scores_update0   ; go round again.
 78+  C209
 79+  C209
 80+  C209              ;
 81+  C209              ; Displays the high score table at the bottom of the screen
 82+  C209              ;
 83+  C209              scores_showtable:
 84+  C209 21 A3 C1         ld hl, scores_table
 85+  C20C CD BE 84         call string_print
 86+  C20F 21 AF C1         ld hl, scores_table+12
 87+  C212 CD BE 84         call string_print
 88+  C215 21 BB C1         ld hl, scores_table+24
 89+  C218 CD BE 84         call string_print
 90+  C21B C9               ret
 91+  C21C
 92+  C21C              ;
 93+  C21C              ; Place to store the current position we're checking
 94+  C21C              ;
 95+  C21C              scores_highscoretmp:
 96+  C21C 00               defb 0
 97+  C21D
 98+  C21D              ;
 99+  C21D              ; Updates the highscore table. Start at bottom score. Work way from left. Compare each digit. If current is higher than one we're checking,
100+  C21D              ; copy checking one down (or erase) then copy current over that one. Then move up one and do the same
101+  C21D              ;
102+  C21D              scores_processhighscores:
103+  C21D 21 1C C2         ld hl,scores_highscoretmp
104+  C220 36 00            ld (hl),0  ; load up the tracking byte with 0 (ie, not on the table)
105+  C222 3E 1D            ld a,29
106+  C224              scores_processhighscores3:
107+  C224 21 A3 C1         ld hl,scores_table          ; position of first score column
108+  C227 5F               ld e,a
109+  C228 16 00            ld d,0
110+  C22A 19               add hl,de
111+  C22B 08               ex af,af'                   ; store a for later
112+  C22C 11 99 C1         ld de,scores_current+2      ; position of current score column
113+  C22F 06 06            ld b,6                      ; times to loop
114+  C231              scores_processhighscores0:
115+  C231 7E               ld a,(hl)
116+  C232 4F               ld c,a                      ; get first score column
117+  C233 1A               ld a,(de)                   ; get first current column
118+  C234 B9               cp c                        ; compare current with first
119+  C235 DA 46 C2         jp c,scores_processhighscores4  ; if c is bigger, then this is not a higher score, so end
120+  C238 23               inc hl
121+  C239 13               inc de                      ; move to next column
122+  C23A 10 F5            djnz scores_processhighscores0 ; loop
123+  C23C 08               ex af,af'                     ; still here, so must be bigger
124+  C23D 32 1C C2         ld (scores_highscoretmp),a  ; store the position indicator in the tracking byte
125+  C240 0E 0C            ld c,12
126+  C242 91               sub c
127+  C243 D2 24 C2         jp nc,scores_processhighscores3 ; if the place we're looking is less than zero, we've gone to far, so continue, otherwise go again
128+  C246              scores_processhighscores4
129+  C246 CD 4A C2         call scores_updatehighscores
130+  C249 C9               ret
131+  C24A
132+  C24A              ;
133+  C24A              ; Update score table
134+  C24A              ;
135+  C24A              scores_updatehighscores:
136+  C24A 3A 1C C2         ld a,(scores_highscoretmp)  ; get the place we want to overwrite
137+  C24D FE 00            cp 0
138+  C24F C8               ret z                       ; if this is 0, didn't get a high score
139+  C250 FE 1D            cp 29                       ; check against 29... if it's equal, we don't want to copy the current score down one
140+  C252 CA 85 C2         jp z, scores_updatehighscores3
141+  C255                                              ; copy old score over one below, if not first
142+  C255 21 A3 C1         ld hl,scores_table
143+  C258 11 11 00         ld de,17                    ; start at second score, because this is the first one we'd ever need to copy...
144+  C25B 19               add hl,de                   ; position of first column
145+  C25C 2B               dec hl
146+  C25D 2B               dec hl
147+  C25E 2B               dec hl
148+  C25F E5               push hl
149+  C260 11 0C 00         ld de,12
150+  C263 19               add hl,de                   ; get position of next score
151+  C264 54 5D            ld de,hl
152+  C266 E1               pop hl                      ; get hl back
153+  C267 01 09 00         ld bc,9
154+  C26A ED B0            ldir
155+  C26C FE 11            cp 17                       ; see if we're copying into the second place slot (17 memory offset). If so, stop copying back the scores
156+  C26E CA 85 C2         jp z,scores_updatehighscores3
157+  C271 21 A3 C1         ld hl,scores_table
158+  C274 11 02 00         ld de,2                    ; ... otherwise, copy back the first score
159+  C277 19               add hl,de                   ; position of first column
160+  C278 E5               push hl
161+  C279 11 0C 00         ld de,12
162+  C27C 19               add hl,de                   ; get position of next score
163+  C27D 54 5D            ld de,hl
164+  C27F E1               pop hl                      ; get hl back
165+  C280 01 09 00         ld bc,9
166+  C283 ED B0            ldir
167+  C285              scores_updatehighscores3:
168+  C285 06 06            ld b,6                      ; now overwrite
169+  C287 21 A3 C1         ld hl,scores_table
170+  C28A 16 00            ld d,0
171+  C28C 5F               ld e,a
172+  C28D 19               add hl,de                   ; position of first column
173+  C28E 08               ex af,af'
174+  C28F 11 99 C1         ld de,scores_current+2      ; position of current score column
175+  C292              scores_updatehighscores2:
176+  C292 1A               ld a,(de)
177+  C293 77               ld (hl),a
178+  C294 23               inc hl
179+  C295 13               inc de
180+  C296 10 FA            djnz scores_updatehighscores2
181+  C298 11 09 00         ld de,9
182+  C29B ED 52            sbc hl,de
183+  C29D 54 5D            ld de,hl                    ; get back to start of entry
184+  C29F 21 A0 C1         ld hl,scores_defaultname    ; still need to overwrite the name
185+  C2A2 01 03 00         ld bc,3                      ; 3 chars to copy
186+  C2A5 ED B0            ldir
187+  C2A7 C9               ret
# file closed: game/scores.asm
 44   C2A8                  include "game\diamonds.asm"
# file opened: game/diamonds.asm
  1+  C2A8              diamonds_tmp:
  2+  C2A8 00               defb 0
  3+  C2A9
  4+  C2A9              diamonds_tmp2:
  5+  C2A9 00               defb 0
  6+  C2AA
  7+  C2AA              ;
  8+  C2AA              ; Holds the number of thousands for the current gem type
  9+  C2AA              ;
 10+  C2AA              diamonds_score:
 11+  C2AA 00               defb 0
 12+  C2AB
 13+  C2AB              ;
 14+  C2AB              ; Changes the attribute of gem and diamond cells based on the frame count
 15+  C2AB              ; Inputs:
 16+  C2AB              ; hl - memory location of gem type
 17+  C2AB              diamonds_twinkle_type:
 18+  C2AB CD 3D BB         call game_getcurrentframe       ; get current frame number
 19+  C2AE E6 07            and 7                           ; want a number from 0-7
 20+  C2B0 C6 40            add 64                          ; add to 60 to get attr colour
 21+  C2B2 32 A9 C2         ld (diamonds_tmp2),a             ; store the colour
 22+  C2B5              diamonds_twinkle_type0:
 23+  C2B5 4E 23 46 2B      ld bc,(hl)                      ; get coords into bc
 24+  C2B9 79               ld a,c                          ; load c into a
 25+  C2BA FE FF            cp 255                          ; is this the end?
 26+  C2BC CA E4 C2         jp z,diamonds_twinkle_type1           ; step out if so
 27+  C2BF 23               inc hl
 28+  C2C0 23               inc hl
 29+  C2C1 7E               ld a,(hl)                       ; check the state, don't process if collected
 30+  C2C2 FE 01            cp 1
 31+  C2C4 CA E5 C2         jp z,diamonds_twinkle_type2           ; step out if so
 32+  C2C7 CD 25 C3         call diamonds_checkforplayer    ; check to see if we've collided with player
 33+  C2CA DC EC C2         call c,diamonds_collect     ; we collided
 34+  C2CD 23               inc hl
 35+  C2CE E5               push hl
 36+  C2CF E5 DD E1         ld ix,hl
 37+  C2D2 DD 4E FD DD      ld bc,(ix-3)                    ; get coords again
 37+  C2D6 46 FE
 38+  C2D8 3A A9 C2         ld a,(diamonds_tmp2)
 39+  C2DB CD 1A A9         call screen_setattr
 40+  C2DE E1               pop hl
 41+  C2DF 23               inc hl
 42+  C2E0 23               inc hl                          ; move to next diamond
 43+  C2E1 C3 B5 C2         jp diamonds_twinkle_type0
 44+  C2E4              diamonds_twinkle_type1:
 45+  C2E4 C9               ret
 46+  C2E5              diamonds_twinkle_type2:
 47+  C2E5 23               inc hl                          ; do stuff the we would have done anyway to get to next gem
 48+  C2E6 23               inc hl
 49+  C2E7 23               inc hl
 50+  C2E8 08               ex af,af'
 51+  C2E9 C3 B5 C2         jp diamonds_twinkle_type0       ; rejoin main loop
 52+  C2EC
 53+  C2EC              ;
 54+  C2EC              ; Collect the diamond we collided with
 55+  C2EC              ; Inputs:
 56+  C2EC              ; hl - memory location of current diamond, currently on state
 57+  C2EC              ; Output:
 58+  C2EC              ; a - 70 - for yellow on black
 59+  C2EC              diamonds_collect:
 60+  C2EC 36 01            ld (hl),1                       ; collected
 61+  C2EE E5               push hl
 62+  C2EF 2B               dec hl
 63+  C2F0 2B               dec hl
 64+  C2F1 4E 23 46 2B      ld bc,(hl)                      ; get the coords
 65+  C2F5 CD D2 A8         call screen_getscreencoordsfromcharcoords ; get the screen coords into bc
 66+  C2F8 ED 5B A8 C2      ld de,(diamonds_tmp)            ; tmp stores the offset for this type of gem
 67+  C2FC 16 00            ld d,0
 68+  C2FE 21 49 B4         ld hl,sprites
 69+  C301 19               add hl,de
 70+  C302 CD 94 A9         call sprites_drawsprite     ; call the routine to draw the sprite
 71+  C305 E1               pop hl
 72+  C306 3E 46            ld a,70                     ; pass this back to overwrite the attr
 73+  C308 32 A9 C2         ld (diamonds_tmp2),a
 74+  C30B D9               exx
 75+  C30C 3A AA C2         ld a,(diamonds_score)
 76+  C30F 47               ld b,a
 77+  C310 CD C7 C1         call scores_addthousands
 78+  C313 3A A8 C2         ld a,(diamonds_tmp)
 79+  C316 FE 40            cp 64                       ; check the gem type offset, if its 64 this is a diamond, so mark the level as completable
 80+  C318 C2 20 C3         jp nz,diamonds_collect0
 81+  C31B 21 54 BB         ld hl,player+13
 82+  C31E 36 01            ld (hl),1                   ; mark the player as able to complete the level
 83+  C320              diamonds_collect0:
 84+  C320 CD 5D AE         call sound_gemcollected
 85+  C323 D9               exx
 86+  C324 C9               ret
 87+  C325
 88+  C325              ;
 89+  C325              ; Checks to see if the gem is hitting a player
 90+  C325              ; Inputs:
 91+  C325              ; bc - coords of diamond we're checking
 92+  C325              diamonds_checkforplayer:
 93+  C325 78               ld a,b               ; multiply b by 8
 94+  C326 07               rlca
 95+  C327 07               rlca
 96+  C328 07               rlca
 97+  C329 47               ld b,a
 98+  C32A ED 5B 47 BB      ld de,(player)       ; get the player coords
 99+  C32E 7B               ld a,e               ; get the vert coord first
100+  C32F 90               sub b                ; subtract the diamond vertical coord from players
101+  C330 C6 04            add 4                ; add the max distance
102+  C332 FE 09            cp 9                ; compare to max*2+1? if carry flag set, they've hit
103+  C334 D0               ret nc               ; if not, hasn't hit
104+  C335 79               ld a,c               ; multiply c by 8
105+  C336 07               rlca
106+  C337 07               rlca
107+  C338 07               rlca
108+  C339 4F               ld c,a
109+  C33A 7A               ld a,d               ; get the player horiz coord
110+  C33B 91               sub c                ; subtract rock coord
111+  C33C C6 04            add 4                ; add max distance
112+  C33E FE 09            cp 9                ; compare to max*2+1? if carry flag set, they've hit
113+  C340 D0               ret nc
114+  C341 3E 00            ld a,0
115+  C343 C9               ret
116+  C344
117+  C344
118+  C344              ;
119+  C344              ; Initialise diamonds and gems
120+  C344              ;
121+  C344              diamonds_twinkle
122+  C344 21 AA C2         ld hl,diamonds_score
123+  C347 36 02            ld (hl),2         ; store the score we'll add
124+  C349 21 A8 C2         ld hl,diamonds_tmp
125+  C34C 36 40            ld (hl),64         ; store the location the diamond sprite
126+  C34E 21 C4 B3         ld hl, level01diamonds
127+  C351 CD AB C2         call diamonds_twinkle_type
128+  C354 21 AA C2         ld hl,diamonds_score
129+  C357 36 01            ld (hl),1         ; store the score we'll add
130+  C359 21 A8 C2         ld hl,diamonds_tmp
131+  C35C 36 70            ld (hl),112         ; store the location the gem sprite
132+  C35E 21 D4 B3         ld hl, level01gems
133+  C361 CD AB C2         call diamonds_twinkle_type
134+  C364 C9               ret
135+  C365
136+  C365              ;
137+  C365              ; Initialise diamonds and gems
138+  C365              ;
139+  C365              diamonds_init:
140+  C365 21 C4 B3         ld hl, level01diamonds
141+  C368 CD 72 C3         call diamonds_init_type
142+  C36B 21 D4 B3         ld hl, level01gems
143+  C36E CD 72 C3         call diamonds_init_type
144+  C371 C9               ret
145+  C372
146+  C372              ;
147+  C372              ; Initialise diamonds or gems, get memory addresses
148+  C372              ; Inputs:
149+  C372              ; hl - memory location
150+  C372              diamonds_init_type:
151+  C372 4E               ld c,(hl)                      ; get coords into c
152+  C373 79               ld a,c                          ; load c into add
153+  C374 FE FF            cp 255                          ; is this the end?
154+  C376 CA 8D C3         jp z,diamonds_init_type1             ; step out if so
155+  C379 23               inc hl
156+  C37A 46               ld b,(hl)                       ; get coords into b
157+  C37B E5               push hl
158+  C37C CD 83 A8         call screen_getcellattroffset ; get memory of attr for this diamond into de
159+  C37F E1               pop hl
160+  C380 23               inc hl                          ; move to state
161+  C381 36 00            ld (hl),0
162+  C383 23               inc hl                          ; move to memory
163+  C384 73 23 72 2B      ld (hl),de                      ; store the memory location
164+  C388 23               inc hl                          ; move to next diamond
165+  C389 23               inc hl
166+  C38A C3 72 C3         jp diamonds_init_type
167+  C38D              diamonds_init_type1:
168+  C38D C9               ret
# file closed: game/diamonds.asm
 45   C38E                  include "game\missiles.asm"
# file opened: game/missiles.asm
  1+  C38E              ;
  2+  C38E              ; Controls when missiles fall
  3+  C38E              ;
  4+  C38E              missiles_count:
  5+  C38E 00               defb 0
  6+  C38F
  7+  C38F              ;
  8+  C38F              ; A structure of falling missiles
  9+  C38F              ; Assume we'll never have more than 4 falling at any one time
 10+  C38F              ; (1,2 - 16 bit memory location for missile graphic),state (0 fell, 1 falling)
 11+  C38F              ;
 12+  C38F              missiles_falling:
 13+  C38F 00 00 00         defb 0,0,0
 14+  C392 00 00 00         defb 0,0,0
 15+  C395 00 00 00         defb 0,0,0
 16+  C398 00 00 00         defb 0,0,0
 17+  C39B
 18+  C39B              ;
 19+  C39B              ; The coords of the missile that killed us
 20+  C39B              ;
 21+  C39B              missiles_killermissile:
 22+  C39B 00 00            defb 0,0
 23+  C39D
 24+  C39D              ;
 25+  C39D              ; Zeroes the state of each missile
 26+  C39D              ;
 27+  C39D              missiles_init:
 28+  C39D 06 0C            ld b,12
 29+  C39F DD 21 4B B3      ld ix,level01missiles
 30+  C3A3              missiles_init0:
 31+  C3A3 DD 36 02 00      ld (ix+2),0               ; set the state to zero
 32+  C3A7 11 05 00         ld de,5
 33+  C3AA DD 19            add ix,de
 34+  C3AC DD 36 02 00      ld (ix+2),0
 35+  C3B0 DD 19            add ix,de
 36+  C3B2 10 EF            djnz missiles_init0
 37+  C3B4 06 04            ld b,4                  ; reset four falling missiles
 38+  C3B6 21 8F C3         ld hl,missiles_falling
 39+  C3B9              missiles_init1:
 40+  C3B9 36 00            ld (hl),0
 41+  C3BB 23               inc hl
 42+  C3BC 36 00            ld (hl),0
 43+  C3BE 23               inc hl
 44+  C3BF 36 00            ld (hl),0
 45+  C3C1 23               inc hl
 46+  C3C2 10 F5            djnz missiles_init1
 47+  C3C4 C9               ret
 48+  C3C5
 49+  C3C5              ;
 50+  C3C5              ; Runs each frame and checks if a missile can fall, then selects one at random and adds to the falling missiles
 51+  C3C5              ; Processes any already falling missiles
 52+  C3C5              ;
 53+  C3C5              missiles_process:
 54+  C3C5 3A 52 BB         ld a,(player+11)                        ; check if the player was hit by a missile previously
 55+  C3C8 FE 03            cp 3
 56+  C3CA C2 D1 C3         jp nz,missiles_process3                 ; if not, continue
 57+  C3CD CD 0E C5         call missiles_zonkplayer
 58+  C3D0 C9               ret
 59+  C3D1              missiles_process3:
 60+  C3D1 3A 55 BB         ld a,(player_location)
 61+  C3D4 FE 01            cp 1
 62+  C3D6 C2 44 C4         jp nz, missiles_process0                ; if not 1 we're not in the cavern so no need to make any more fall
 63+  C3D9 21 54 BB         ld hl,player+13
 64+  C3DC 7E               ld a,(hl)                               ; check if player has collected a diamond
 65+  C3DD FE 01            cp 1
 66+  C3DF C2 44 C4         jp nz, missiles_process0                ; don't activate if not
 67+  C3E2 21 8E C3         ld hl,missiles_count
 68+  C3E5 7E               ld a,(hl)                   ; get the missiles count
 69+  C3E6 3C               inc a
 70+  C3E7 FE 32            cp 50                                   ; have we reached the count yet
 71+  C3E9 CA F0 C3         jp z,missiles_process2                 ; if not, don't activate a new one
 72+  C3EC 77               ld (hl),a                               ; store the updated count, and continue without activating
 73+  C3ED C3 44 C4         jp missiles_process0
 74+  C3F0              missiles_process2:
 75+  C3F0 36 00            ld (hl),0                               ; zero the counter
 76+  C3F2 1E 0C            ld e,12
 77+  C3F4 CD D6 80         call utilities_randomupper              ; get random number from 0 to 11
 78+  C3F7 11 0A 00         ld de,10
 79+  C3FA CD 3A 80         call utilities_multiply                 ; multiple random number by 10
 80+  C3FD 54 5D            ld de,hl                                ; this is the offset for the random missile
 81+  C3FF DD 21 4B B3      ld ix,level01missiles                   ; load the location of the missile definitions
 82+  C403 DD 19            add ix,de                               ; get to location of missile
 83+  C405 DD 7E 02         ld a,(ix+2)
 84+  C408 FE 00            cp 0
 85+  C40A CA 1A C4         jp z,missiles_process1                  ; if this missile isn't active, activate it
 86+  C40D 11 05 00         ld de,5                                 ; otherwise, check the missile above
 87+  C410 DD 19            add ix,de
 88+  C412 DD 7E 02         ld a,(ix+2)
 89+  C415 FE 00            cp 0
 90+  C417 C2 44 C4         jp nz,missiles_process0                 ; if this is active as well, the player got lucky
 91+  C41A              missiles_process1:                          ; activate a missile
 92+  C41A DD 36 02 01      ld (ix+2),1                               ; mark this missile as active
 93+  C41E DD 4E 00 DD      ld bc,(ix)                              ; get char coords from the missile
 93+  C422 46 01
 94+  C424 78               ld a,b
 95+  C425 ED 5B 70 A7      ld de,(screen_offset)          ; load the screen offset, this is in rows
 96+  C429 93               sub e
 97+  C42A CD D2 A8         call screen_getscreencoordsfromcharcoords ; get screen coords into bc
 98+  C42D C5               push bc
 99+  C42E 3E 0C            ld a,12                                 ; inactive missile sprite
100+  C430 CD 0F A9         call screen_getblock
101+  C433 CD 94 A9         call sprites_drawsprite                 ; draw the sprite over the old one
102+  C436 C1               pop bc
103+  C437 C5               push bc
104+  C438 3E 14            ld a,20                                 ; active missile sprite
105+  C43A CD 0F A9         call screen_getblock
106+  C43D CD 94 A9         call sprites_drawsprite                 ; draw the sprite over the old one
107+  C440 C1               pop bc
108+  C441 CD D2 C4         call missiles_addmissiletofalling
109+  C444              missiles_process0:
110+  C444 CD 48 C4         call missiles_fall
111+  C447 C9               ret
112+  C448
113+  C448              ;
114+  C448              ; Processes falling missiles
115+  C448              ;
116+  C448              missiles_fall:
117+  C448 06 04            ld b,4              ; number of possible falling missiles
118+  C44A DD 21 8F C3      ld ix,missiles_falling
119+  C44E              missiles_fall0:
120+  C44E C5               push bc
121+  C44F DD 7E 02         ld a,(ix+2)
122+  C452 FE 00            cp 0
123+  C454 CA B1 C4         jp z,missiles_fall1 ; not falling move to next
124+  C457 FE 01            cp 1                ; is this ready to fall
125+  C459 CA 5F C4         jp z, missiles_fall3
126+  C45C C3 CB C4         jp missiles_fall4   ; if not, decrease the countdown
127+  C45F              missiles_fall3:
128+  C45F DD 4E 00 DD      ld bc,(ix)          ; load coords into bc
128+  C463 46 01
129+  C465 CD 89 AA         call sprites_scadd  ; get the memory of the coords into de
130+  C468 14               inc d               ; add 256 to get next row
131+  C469 1A               ld a,(de)           ; get the contents of the next row
132+  C46A FE 00            cp 0
133+  C46C C2 C4 C4         jp nz,missiles_fall2 ; if this is not empty, stop this missile falling
134+  C46F 3E 14            ld a,20                                 ; active missile sprite
135+  C471 CD 0F A9         call screen_getblock
136+  C474 CD 94 A9         call sprites_drawsprite                 ; draw the sprite over the old one
137+  C477 DD 4E 00 DD      ld bc,(ix)          ; load coords into bc
137+  C47B 46 01
138+  C47D 0C               inc c               ; move down one pixel
139+  C47E DD 71 00 DD      ld (ix),bc          ; store the new coords
139+  C482 70 01
140+  C484 3E 14            ld a,20                                 ; active missile sprite
141+  C486 CD 0F A9         call screen_getblock
142+  C489 CD 94 A9         call sprites_drawsprite                 ; draw the sprite
143+  C48C DD 4E 00 DD      ld bc,(ix)          ; load coords into bc
143+  C490 46 01
144+  C492 79               ld a,c              ; get the vertical coord into a
145+  C493 E6 07            and 7               ; divisible by 8?
146+  C495 FE 00            cp 0
147+  C497 C2 B1 C4         jp nz,missiles_fall1   ; if not, carry on
148+  C49A CD C2 A8         call screen_getcharcoordsfromscreencoords ; get the char coords into bc
149+  C49D 3E 43            ld a,67             ; load magenta
150+  C49F CD 1A A9         call screen_setattr
151+  C4A2 DD 4E 00 DD      ld bc,(ix)
151+  C4A6 46 01
152+  C4A8 CD C2 A8         call screen_getcharcoordsfromscreencoords ; get the attr address into de
153+  C4AB 05               dec b               ; look one square above
154+  C4AC 3E 46            ld a,70             ; load yellow
155+  C4AE CD 1A A9         call screen_setattr
156+  C4B1              missiles_fall1:         ; hl at state
157+  C4B1 DD 4E 00 DD      ld bc,(ix)          ; get coords back
157+  C4B5 46 01
158+  C4B7 CD F3 C4         call missiles_checkforplayer ; check for player
159+  C4BA DD 23            inc ix
160+  C4BC DD 23            inc ix
161+  C4BE DD 23            inc ix              ; get to next missile
162+  C4C0 C1               pop bc
163+  C4C1 10 8B            djnz missiles_fall0
164+  C4C3 C9               ret
165+  C4C4              missiles_fall2:
166+  C4C4 DD 36 02 00      ld (ix+2),0
167+  C4C8 C3 B1 C4         jp missiles_fall1   ; rejoin the loop
168+  C4CB              missiles_fall4:
169+  C4CB 3D               dec a               ; decrease the countdown
170+  C4CC DD 77 02         ld (ix+2),a         ; store back
171+  C4CF C3 B1 C4         jp missiles_fall1   ; do next missile
172+  C4D2
173+  C4D2              ;
174+  C4D2              ; Adds the missile to the structure that tracks falling missile
175+  C4D2              ; Inputs:
176+  C4D2              ; bc - coords of missile, c vert
177+  C4D2              missiles_addmissiletofalling:
178+  C4D2 C5               push bc             ; store the coords
179+  C4D3 11 8F C3         ld de,missiles_falling
180+  C4D6 06 04            ld b,4              ; number of possible falling missiles
181+  C4D8              missiles_addmissiletofalling0:
182+  C4D8 13               inc de
183+  C4D9 13               inc de              ; move three along to get the state
184+  C4DA 1A               ld a,(de)           ; load the state
185+  C4DB FE 00            cp 0                ; check if this is not falling
186+  C4DD C2 EE C4         jp nz,missiles_addmissiletofalling1 ; continue the loop if not 0
187+  C4E0 3E 19            ld a,25
188+  C4E2 12               ld (de),a           ; set the state to pre-falling
189+  C4E3 1B               dec de              ; move back coords
190+  C4E4 C1               pop bc              ; get back coords
191+  C4E5 78               ld a,b
192+  C4E6 12               ld (de),a           ; store the vertical
193+  C4E7 1B               dec de
194+  C4E8 79               ld a,c
195+  C4E9 12               ld (de),a           ; store the horizontal
196+  C4EA C5               push bc
197+  C4EB C3 F1 C4         jp missiles_addmissiletofalling2 ; done
198+  C4EE              missiles_addmissiletofalling1:
199+  C4EE 13               inc de              ; move memory along to next rock
200+  C4EF 10 E7            djnz missiles_addmissiletofalling0 ; try the next missile
201+  C4F1              missiles_addmissiletofalling2: ; done, return
202+  C4F1 C1               pop bc              ; to tidy up
203+  C4F2 C9               ret
204+  C4F3
205+  C4F3              ;
206+  C4F3              ; Checks to see if the missile is hitting a player
207+  C4F3              ; Inputs:
208+  C4F3              ; bc - coords of missile we're checking
209+  C4F3              missiles_checkforplayer:
210+  C4F3 ED 5B 47 BB      ld de,(player)       ; get the player coords
211+  C4F7 7B               ld a,e               ; get the vert coord first
212+  C4F8 91               sub c                ; subtract the missile vertical coord from players
213+  C4F9 FE 08            cp 8                 ; the missile will only hit a player if the player is directly underneath, so this must be 8
214+  C4FB C0               ret nz               ; if not, hasn't hit
215+  C4FC 7A               ld a,d               ; get the player horiz coord
216+  C4FD 90               sub b                ; subtract missile coord
217+  C4FE C6 07            add 7                ; add max distance
218+  C500 FE 0D            cp 13                ; compare to 13? if carry flag set, they've hit
219+  C502 DA 06 C5         jp c,missiles_checkforplayer0
220+  C505 C9               ret
221+  C506              missiles_checkforplayer0:
222+  C506 ED 43 9B C3      ld (missiles_killermissile),bc; store the coords of the killer missile
223+  C50A CD 41 BC         call player_zonkplayer ; if so, jump out
224+  C50D C9               ret
225+  C50E
226+  C50E              ;
227+  C50E              ; Player has been hit, so draw text over them and mark as dead
228+  C50E              ;
229+  C50E              missiles_zonkplayer:
230+  C50E CD 2F BC         call player_killplayer      ; mark as dead
231+  C511 ED 4B 47 BB      ld bc,(player)              ; get player coords
232+  C515 CD C2 A8         call screen_getcharcoordsfromscreencoords
233+  C518 0D               dec c
234+  C519 0D               dec c
235+  C51A 04               inc b
236+  C51B C5               push bc
237+  C51C 3E 42            ld a,66
238+  C51E CD 1A A9         call screen_setattr
239+  C521 0C               inc c
240+  C522 CD 1A A9         call screen_setattr
241+  C525 0C               inc c
242+  C526 CD 1A A9         call screen_setattr
243+  C529 0C               inc c
244+  C52A CD 1A A9         call screen_setattr
245+  C52D 0C               inc c
246+  C52E CD 1A A9         call screen_setattr
247+  C531 C1               pop bc
248+  C532 ED 5B 70 A7      ld de,(screen_offset)
249+  C536 78               ld a,b
250+  C537 93               sub e
251+  C538 47               ld b,a                      ; subtract the offset
252+  C539 04               inc b
253+  C53A 04               inc b                       ; add two for the score rows
254+  C53B ED 43 B6 84      ld (string_zonk),bc         ; set coords of string
255+  C53F 21 B6 84         ld hl,string_zonk
256+  C542 CD BE 84         call string_print
257+  C545 06 14            ld b,20
258+  C547 CD 82 80         call utilities_pauseforframes ; pause
259+  C54A C9               ret
260+  C54B
# file closed: game/missiles.asm
 46   C54B                  include "game\thepit.asm"
# file opened: game/thepit.asm
  1+  C54B              ;
  2+  C54B              ; Timer for deciding how fast the trap withdraws
  3+  C54B              ;
  4+  C54B              thepit_timer:
  5+  C54B 00               defb 0
  6+  C54C
  7+  C54C              ;
  8+  C54C              ; Ticks for the trap state. Will count to 3 then reset
  9+  C54C              ;
 10+  C54C              thepit_trapcount:
 11+  C54C 00               defb 0
 12+  C54D
 13+  C54D              ;
 14+  C54D              ; The horizontal coordinate of the current pit trap
 15+  C54D              ;
 16+  C54D              thepit_trapcoord:
 17+  C54D 08               defb 8
 18+  C54E
 19+  C54E              ;
 20+  C54E              ; Initialises the pit
 21+  C54E              ;
 22+  C54E              thepit_init:
 23+  C54E 21 4D C5         ld hl,thepit_trapcoord
 24+  C551 36 08            ld (hl),8
 25+  C553 21 4C C5         ld hl,thepit_trapcount
 26+  C556 36 00            ld (hl),0
 27+  C558 C9               ret
 28+  C559
 29+  C559              ;
 30+  C559              ; Performs per frame processing on the pit room
 31+  C559              ;
 32+  C559              thepit_process:
 33+  C559 3A 55 BB         ld a,(player_location)
 34+  C55C FE 02            cp 2                            ; if two, the player is in the pit, so process the trap
 35+  C55E C2 A7 C5         jp nz,thepit_process0
 36+  C561 3A 4B C5         ld a,(thepit_timer)             ; get the timer
 37+  C564 3C               inc a
 38+  C565 32 4B C5         ld (thepit_timer),a             ; store
 39+  C568 FE 02            cp 2                           ; have we reached the trigger?
 40+  C56A C2 A7 C5         jp nz, thepit_process0          ; no need to do anything
 41+  C56D 3E 00            ld a,0
 42+  C56F 32 4B C5         ld (thepit_timer),a             ; zero the timer and process
 43+  C572 3A 4C C5         ld a,(thepit_trapcount)         ; get the current count
 44+  C575 3C               inc a
 45+  C576 32 4C C5         ld (thepit_trapcount),a         ; reset the trap count
 46+  C579 FE 04            cp 4                            ; do we need to begin another character?
 47+  C57B C2 8F C5         jp nz,thepit_process1           ; if not, draw as normal
 48+  C57E 3E 00            ld a,0
 49+  C580 32 4C C5         ld (thepit_trapcount),a         ; reset the trap count
 50+  C583 3A 4D C5         ld a,(thepit_trapcoord)         ; get the trap horiz coord
 51+  C586 FE 02            cp 2
 52+  C588 CA A7 C5         jp z,thepit_process0
 53+  C58B 3D               dec a
 54+  C58C 32 4D C5         ld (thepit_trapcoord),a         ; store the reduced coord
 55+  C58F
 56+  C58F              thepit_process1:                    ; draw the trapdoor in current position
 57+  C58F 3A 4D C5         ld a,(thepit_trapcoord)
 58+  C592 FE 02            cp 2
 59+  C594 CA A7 C5         jp z, thepit_process0           ; don't process outside of the pit
 60+  C597 4F               ld c,a
 61+  C598 06 0A            ld b,10                         ; vertical coord will always be the same
 62+  C59A 3A 4C C5         ld a,(thepit_trapcount)         ; get the trap count
 63+  C59D 5F               ld e,a                          ; store in e
 64+  C59E 3E 16            ld a,22                         ; 21 is full trapdoor
 65+  C5A0 83               add a,e
 66+  C5A1 CD 0F A9         call screen_getblock
 67+  C5A4 CD EC A8         call screen_showchar            ; show the char
 68+  C5A7
 69+  C5A7              thepit_process0:
 70+  C5A7 C9               ret
 71+  C5A8
# file closed: game/thepit.asm
 47   C5A8                  include "game\monster.asm"
# file opened: game/monster.asm
  1+  C5A8
  2+  C5A8              ;
  3+  C5A8              ; Where the monster currently is
  4+  C5A8              ;
  5+  C5A8              monster_currentcoords:
  6+  C5A8 00 00            defb 0,0
  7+  C5AA
  8+  C5AA              ;
  9+  C5AA              ; The start coords of the monster
 10+  C5AA              ;
 11+  C5AA              monster_initcoords:
 12+  C5AA 70 1B            defb 112,27
 13+  C5AC
 14+  C5AC              ;
 15+  C5AC              ; Store the memory location of the current jump position
 16+  C5AC              ;
 17+  C5AC              monster_jumppos:
 18+  C5AC 00 00            defb 0,0
 19+  C5AE
 20+  C5AE              ;
 21+  C5AE              ; The jump table for the monster.
 22+  C5AE              ;
 23+  C5AE              monster_jumptable:
 24+  C5AE FF 03 02 02      defb 255,3,2,2,2,2,2,2,2,2,1,1,1,1,1,1,255
 24+  C5B2 02 02 02 02
 24+  C5B6 02 02 01 01
 24+  C5BA 01 01 01 01
 24+  C5BE FF
 25+  C5BF
 26+  C5BF              ;
 27+  C5BF              ; The vertical direction: 0 up, 1 down
 28+  C5BF              ;
 29+  C5BF              monster_jumpdirectionvert:
 30+  C5BF 00               defb 0
 31+  C5C0
 32+  C5C0              ;
 33+  C5C0              ; The horiz direction: 0 right, 1 left
 34+  C5C0              ;
 35+  C5C0              monster_jumpdirectionhoriz:
 36+  C5C0 00               defb 0
 37+  C5C1
 38+  C5C1              ;
 39+  C5C1              ; Frame offset, 0 or 32
 40+  C5C1              ;
 41+  C5C1              monster_frameoffset:
 42+  C5C1 00               defb 0
 43+  C5C2
 44+  C5C2              ;
 45+  C5C2              ; Monster tick
 46+  C5C2              ;
 47+  C5C2              monster_tick:
 48+  C5C2 00               defb 0
 49+  C5C3
 50+  C5C3              ;
 51+  C5C3              ; Initialises the pit monster
 52+  C5C3              ;
 53+  C5C3              monster_init:
 54+  C5C3 ED 4B AA C5      ld bc,(monster_initcoords)              ; load the initial coords
 55+  C5C7 ED 43 A8 C5      ld (monster_currentcoords),bc           ; save in current coords
 56+  C5CB 21 AF C5         ld hl,monster_jumptable+1
 57+  C5CE 22 AC C5         ld (monster_jumppos),hl                 ; store the initial position in the jump table
 58+  C5D1 3E 00            ld a,0
 59+  C5D3 32 BF C5         ld (monster_jumpdirectionvert),a        ; going up
 60+  C5D6 32 C1 C5         ld (monster_frameoffset),a
 61+  C5D9 32 C2 C5         ld (monster_tick),a
 62+  C5DC CD 5C C6         call monster_draw                       ; the monster
 63+  C5DF C9               ret
 64+  C5E0
 65+  C5E0              ;
 66+  C5E0              ; Animate the monster
 67+  C5E0              ;
 68+  C5E0              monster_process:
 69+  C5E0 3A C2 C5         ld a,(monster_tick)                     ; check if we should draw this frame
 70+  C5E3 FE 01            cp 1
 71+  C5E5 CA ED C5         jp z,monster_process6
 72+  C5E8 3C               inc a
 73+  C5E9 32 C2 C5         ld (monster_tick),a                     ; increase the tick and continue
 74+  C5EC C9               ret
 75+  C5ED              monster_process6:
 76+  C5ED 3E 00            ld a,0
 77+  C5EF 32 C2 C5         ld (monster_tick),a                     ; zero the tick
 78+  C5F2 CD 5C C6         call monster_draw                       ; overwrite the old sprite
 79+  C5F5 3A C1 C5         ld a,(monster_frameoffset)              ; get the anim frame offset
 80+  C5F8 EE 20            xor 32                                  ; flip between 0 and 32
 81+  C5FA 32 C1 C5         ld (monster_frameoffset),a              ; store
 82+  C5FD ED 4B A8 C5      ld bc,(monster_currentcoords)           ; get the current coords
 83+  C601 2A AC C5         ld hl,(monster_jumppos)                 ; get the position in the jump table
 84+  C604 56               ld d,(hl)                               ; get the jump modifier
 85+  C605 3A BF C5         ld a,(monster_jumpdirectionvert)        ; get the vertical direction
 86+  C608 FE 00            cp 0                                    ; if 0, going up, so dec vert
 87+  C60A C2 13 C6         jp nz,monster_process0
 88+  C60D 79               ld a,c
 89+  C60E 92               sub d
 90+  C60F 23               inc hl                                  ; move forward a jump pos
 91+  C610 C3 16 C6         jp monster_process1
 92+  C613              monster_process0:
 93+  C613 79               ld a,c                                   ; going down so inc c
 94+  C614 82               add a,d
 95+  C615 2B               dec hl                                  ; move back a jump pos
 96+  C616              monster_process1:
 97+  C616 4F               ld c,a                                  ; get the vertical coord back
 98+  C617 7E               ld a,(hl)                               ; check the next jump pos
 99+  C618 FE FF            cp 255                                  ; if 255 reverse
100+  C61A CA 23 C6         jp z,monster_process3
101+  C61D 22 AC C5         ld (monster_jumppos),hl                 ; store the new pos
102+  C620 C3 2B C6         jp monster_process2                     ; keep going
103+  C623              monster_process3:
104+  C623 3A BF C5         ld a,(monster_jumpdirectionvert)        ; get the direction
105+  C626 EE 01            xor 1                                   ; flip it
106+  C628 32 BF C5         ld (monster_jumpdirectionvert),a        ; store it
107+  C62B              monster_process2:
108+  C62B 3A C0 C5         ld a,(monster_jumpdirectionhoriz)       ; get the horiz direction
109+  C62E FE 00            cp 0                                    ; is it right?
110+  C630 C2 45 C6         jp nz,monster_process4
111+  C633 04               inc b                                   ; 1 pixel right
112+  C634 78               ld a,b
113+  C635 FE 38            cp 56                                   ; reached the edge of the pit?
114+  C637 C2 54 C6         jp nz,monster_process5
115+  C63A 3A C0 C5         ld a,(monster_jumpdirectionhoriz)
116+  C63D EE 01            xor 1
117+  C63F 32 C0 C5         ld (monster_jumpdirectionhoriz),a       ; flip direction
118+  C642 C3 54 C6         jp monster_process5
119+  C645              monster_process4:
120+  C645 05               dec b                                   ; 1 pixel left
121+  C646 78               ld a,b
122+  C647 FE 18            cp 24                                   ; reached the edge of the pit?
123+  C649 C2 54 C6         jp nz,monster_process5
124+  C64C 3A C0 C5         ld a,(monster_jumpdirectionhoriz)
125+  C64F EE 01            xor 1
126+  C651 32 C0 C5         ld (monster_jumpdirectionhoriz),a       ; flip direction
127+  C654              monster_process5:
128+  C654 ED 43 A8 C5      ld (monster_currentcoords),bc           ; store the new vertical coords
129+  C658 CD 5C C6         call monster_draw                       ; finally, draw the monster
130+  C65B C9               ret
131+  C65C
132+  C65C              ;
133+  C65C              ; Draw the monster at the current location
134+  C65C              ;
135+  C65C              monster_draw:
136+  C65C ED 4B A8 C5      ld bc,(monster_currentcoords)
137+  C660 3A C1 C5         ld a,(monster_frameoffset)
138+  C663 11 00 00         ld de,0
139+  C666 5F               ld e,a
140+  C667 21 44 B6         ld hl,monster_sprite                    ; load the first frame
141+  C66A 19               add hl,de
142+  C66B CD F2 A9         call sprites_draw2by2sprite
143+  C66E C9               ret
# file closed: game/monster.asm
 48   C66F                  include "game\robots.asm"
# file opened: game/robots.asm
  1+  C66F
  2+  C66F              ;
  3+  C66F              ; Array of robot states
  4+  C66F              ; x,y,state (0 inactive, 1 active), direction (0 left, 1 right), anim offset
  5+  C66F              robots_robots:
  6+  C66F 00 00 00 00      defb 0,0,0,0,0
  6+  C673 00
  7+  C674 00 00 00 00      defb 0,0,0,0,0
  7+  C678 00
  8+  C679 00 00 00 00      defb 0,0,0,0,0
  8+  C67D 00
  9+  C67E
 10+  C67E              robots_initcoords:
 11+  C67E 18 E8            defb 24,232
 12+  C680
 13+  C680              ;
 14+  C680              ; When this reaches zero, spawn a new robot
 15+  C680              ;
 16+  C680              robots_spawntimer:
 17+  C680 FA               defb 250
 18+  C681
 19+  C681              ;
 20+  C681              ; The number of robots active
 21+  C681              ;
 22+  C681              robots_numberactive:
 23+  C681 00               defb 0
 24+  C682
 25+  C682              ;
 26+  C682              ; Initialises the robots
 27+  C682              ;
 28+  C682              robots_init:
 29+  C682 06 0F            ld b,15
 30+  C684 DD 21 6F C6      ld ix,robots_robots
 31+  C688              robots_init0:
 32+  C688 DD 36 00 00      ld (ix),0                       ; reset robot states back to zero
 33+  C68C DD 23            inc ix
 34+  C68E 10 F8            djnz robots_init0
 35+  C690 3E 00            ld a,0
 36+  C692 32 81 C6         ld (robots_numberactive),a
 37+  C695 3E FA            ld a,250
 38+  C697 32 80 C6         ld (robots_spawntimer),a
 39+  C69A C9               ret
 40+  C69B
 41+  C69B              ;
 42+  C69B              ; Spawns a new robot
 43+  C69B              ; Inputs:
 44+  C69B              ; ix - pointer to start of robot array entry
 45+  C69B              ;
 46+  C69B              robots_spawn:
 47+  C69B 06 03            ld b,3
 48+  C69D DD 21 6F C6      ld ix,robots_robots
 49+  C6A1              robots_spawn0:
 50+  C6A1 DD 7E 02         ld a,(ix+2)                 ; get the state
 51+  C6A4 FE 00            cp 0
 52+  C6A6 C2 C2 C6         jp nz,robots_spawn1         ; if already active, move on
 53+  C6A9 ED 4B 7E C6      ld bc,(robots_initcoords)
 54+  C6AD DD 71 00 DD      ld (ix),bc
 54+  C6B1 70 01
 55+  C6B3 DD 36 02 01      ld (ix+2),1
 56+  C6B7 3A 81 C6         ld a,(robots_numberactive)
 57+  C6BA 3C               inc a
 58+  C6BB 32 81 C6         ld (robots_numberactive),a  ; increase the number active
 59+  C6BE CD 17 C7         call robots_draw            ; draw initial frame
 60+  C6C1 C9               ret
 61+  C6C2              robots_spawn1:
 62+  C6C2 11 05 00         ld de,5
 63+  C6C5 DD 19            add ix,de
 64+  C6C7 10 D8            djnz robots_spawn0
 65+  C6C9 C9               ret
 66+  C6CA              ;
 67+  C6CA              ; Kills robot
 68+  C6CA              ; Inputs:
 69+  C6CA              ; ix - pointer to start of robot array entry
 70+  C6CA              ;
 71+  C6CA              robots_kill:
 72+  C6CA 3A 81 C6         ld a,(robots_numberactive)
 73+  C6CD 3D               dec a
 74+  C6CE 32 81 C6         ld (robots_numberactive),a
 75+  C6D1 DD 36 02 00      ld (ix+2),0                     ; set to inactive
 76+  C6D5 C9               ret
 77+  C6D6
 78+  C6D6              ;
 79+  C6D6              ; Processes the robots
 80+  C6D6              ;
 81+  C6D6              robots_process:
 82+  C6D6 3A 81 C6         ld a,(robots_numberactive)              ; first, check if we need to spawn a new robot
 83+  C6D9 FE 03            cp 3                                    ; 3 is the maximum
 84+  C6DB CA F5 C6         jp z,robots_process0                    ; if already three, nothing to do
 85+  C6DE 3A 80 C6         ld a,(robots_spawntimer)                ; now check the spawn timer
 86+  C6E1 FE 00            cp 0
 87+  C6E3 C2 F1 C6         jp nz,robots_process1                   ; if it hasn't reached zero yet, just decrease
 88+  C6E6 3E FA            ld a,250
 89+  C6E8 32 80 C6         ld (robots_spawntimer),a                ; reset the spawn timer
 90+  C6EB CD 9B C6         call robots_spawn                       ; spawn a robot
 91+  C6EE C3 F5 C6         jp robots_process0                      ; carry on
 92+  C6F1              robots_process1:
 93+  C6F1 3D               dec a
 94+  C6F2 32 80 C6         ld (robots_spawntimer),a                ; decrease the spawn timer and store
 95+  C6F5              robots_process0:
 96+  C6F5 06 03            ld b,3                                  ; max number of robots
 97+  C6F7 DD 21 6F C6      ld ix, robots_robots                    ; point ix at the robot array
 98+  C6FB              robots_process2:
 99+  C6FB C5               push bc
100+  C6FC DD 7E 02         ld a,(ix+2)                             ; check the state
101+  C6FF FE 00            cp 0
102+  C701 CA 0D C7         jp z,robots_process3                    ; if not active, move on
103+  C704 CD 17 C7         call robots_draw                        ; draw over existing
104+  C707 CD 16 C7         call robots_move                        ; move the robot
105+  C70A CD 17 C7         call robots_draw                        ; draw the new robot
106+  C70D              robots_process3:
107+  C70D C1               pop bc
108+  C70E 11 05 00         ld de,5
109+  C711 DD 19            add ix,de
110+  C713 10 E6            djnz robots_process2
111+  C715 C9               ret
112+  C716
113+  C716              ;
114+  C716              ; Moves a robot
115+  C716              ; Inputs:
116+  C716              ; ix - points to first byte of robot in array
117+  C716              robots_move:
118+  C716 C9               ret
119+  C717
120+  C717              ;
121+  C717              ; Draws a robot
122+  C717              ; Inputs:
123+  C717              ; ix - points to first byte of robot in array
124+  C717              robots_draw:
125+  C717 DD 4E 00 DD      ld bc,(ix)
125+  C71B 46 01
126+  C71D 21 84 B6         ld hl,robot_sprite                      ; set to the robot sprite
127+  C720 DD 7E 03         ld a,(ix+3)                             ; get the direction
128+  C723 FE 00            cp 0
129+  C725 CA 2C C7         jp z,robots_draw0                       ; if left, nothing to do
130+  C728 11 20 00         ld de,32
131+  C72B 19               add hl,de                               ; add four frames to sprite
132+  C72C              robots_draw0:
133+  C72C CD 94 A9         call sprites_drawsprite
134+  C72F C9               ret
# file closed: game/robots.asm
 49   C730
 50   C730              ;===========================================================================
 51   C730              ; main routine - the code execution starts here.
 52   C730              ; Sets up the new interrupt routine, the memory
 53   C730              ; banks and jumps to the start loop.
 54   C730              ;===========================================================================
 55   C730              main:
 56   C730
 57   C730                  ; Draw the title screen
 58   C730              main_titlescreen:
 59   C730 CD B3 AA         call titlescreen_show
 60   C733 CD 8C BB         call player_init_gamestart
 61   C736
 62   C736              main_lifestart:
 63   C736
 64   C736 CD AA BB         call player_init_lifestart
 65   C739
 66   C739 CD 19 AC         call lifescreen_draw        ; show the lives remaining screen
 67   C73C
 68   C73C CD 00 80         call init_start
 69   C73F CD 8B A7         call screen_draw
 70   C742 CD DA A6         call buffer_allbuffertoscreen
 71   C745
 72   C745 CD 9D C3         call missiles_init
 73   C748 CD 31 BD         call ship_land              ; land the ship
 74   C74B CD 44 BE         call tank_init
 75   C74E CD 65 C3         call diamonds_init
 76   C751 CD 4E C5         call thepit_init
 77   C754 CD C3 C5         call monster_init
 78   C757 CD 82 C6         call robots_init
 79   C75A
 80   C75A              mloop:
 81   C75A 76               halt
 82   C75B CD 8F C7         call main_loop_processing
 83   C75E
 84   C75E                  ;
 85   C75E                  ; Check if the player died
 86   C75E                  ;
 87   C75E 21 51 BB         ld hl,player+10
 88   C761 7E               ld a,(hl)                   ; check if the player died this frame
 89   C762 FE 01            cp 1
 90   C764 C2 7B C7         jp nz,mloop0
 91   C767 CD 11 BC         call player_died        ; do end of life housekeeping
 92   C76A 06 28            ld b,40
 93   C76C CD 82 80         call utilities_pauseforframes
 94   C76F 21 50 BB         ld hl,player+9        ; check lives remaining
 95   C772 7E               ld a,(hl)
 96   C773 FE 00            cp 0
 97   C775 CA C0 C7         jp z,main_gameover   ; leave the loop if we're done
 98   C778 C3 36 C7         jp main_lifestart    ; otherwise, start a new life
 99   C77B              mloop0:
100   C77B                  ;
101   C77B                  ; Check if the player completed the level
102   C77B                  ;
103   C77B 21 54 BB         ld hl,player+13
104   C77E 7E               ld a,(hl)
105   C77F FE 01            cp 1
106   C781 C2 5A C7         jp nz,mloop
107   C784 CD FB BC         call player_checkforexit
108   C787 FE 01            cp 1                        ; look at return, if 1, level has been completed
109   C789 CA C6 C7         jp z,main_endlevel          ; jump to level transition screen
110   C78C C3 5A C7         jp mloop                ; start the loop again
111   C78F
112   C78F
113   C78F              main_loop_processing:
114   C78F
115   C78F CD 99 A6         call buffer_buffertoscreen  ; copy buffer to screen
116   C792 CD FE A5         call buffer_clearlist       ; zero the updated lines list
117   C795 CD 56 BB         call player_getlocation     ; figure out where the player is
118   C798 CD 47 BC         call player_drawplayer      ; delete player
119   C79B CD C4 B6         call control_keyboard       ; check keyboard
120   C79E CD 47 BC         call player_drawplayer      ; draw player
121   C7A1 CD 73 BE         call tank_process           ; prcoess the tank
122   C7A4 CD 1C BD         call ship_process           ; proces the ship
123   C7A7 CD 6B C0         call rocks_processrocks     ; process falling rocks
124   C7AA CD 59 C5         call thepit_process         ; process the pit trap
125   C7AD CD C5 C3         call missiles_process       ; process missiles
126   C7B0 CD E0 C5         call monster_process        ; process monster
127   C7B3 CD D6 C6         call robots_process         ; process robots
128   C7B6 CD 44 C3         call diamonds_twinkle       ; make the diamonds twinkle
129   C7B9 CD CE C1         call scores_printscore      ; update the score on screen
130   C7BC CD 2E BB         call game_incrementframe    ; increment the game frame
131   C7BF
132   C7BF C9               ret
133   C7C0
134   C7C0              main_gameover:
135   C7C0 CD 6C AC         call gameover_draw          ; show the game over screen
136   C7C3 C3 30 C7         jp main_titlescreen         ; go back to title
137   C7C6
138   C7C6              main_endlevel:
139   C7C6 CD F7 BB         call player_recordcurrentscore
140   C7C9 CD 5A AD         call endlevel_draw          ; show the end level screen
141   C7CC C3 36 C7         jp main_lifestart           ; start a new life
142   C7CF
143   C7CF              ;===========================================================================
144   C7CF              ; Stack.
145   C7CF              ;===========================================================================
146   C7CF
147   C7CF              ; Stack: this area is reserved for the stack
148   C7CF              STACK_SIZE: equ 100    ; in words
149   C7CF
150   C7CF              ; Reserve stack space
151   C7CF 00 00            defw 0  ; WPMEM, 2
152   C7D1              stack_bottom:
153   C7D1 00 00 00...      defs    STACK_SIZE*2, 0
154   C899              stack_top:
155   C899 00 00            defw 0  ; WPMEM, 2
156   C89B
157   C89B                     SAVESNA "ThePit.sna", main
# file closed: main.asm
