# file opened: main.asm
  1   0000                  DEVICE ZXSPECTRUM48
  2   0000
  3   0000                  ORG $8000
  4   8000
  5   8000              ;===========================================================================
  6   8000              ; Persistent watchpoint.
  7   8000              ; Change WPMEMx (remove the 'x' from WPMEMx) below to activate.
  8   8000              ; If you do so the program will hit a breakpoint when it tries to
  9   8000              ; write to the first byte of the 3rd line.
 10   8000              ; When program breaks in the fill_memory sub routine please hover over hl
 11   8000              ; to see that it contains 0x5804 or COLOR_SCREEN+64.
 12   8000              ;===========================================================================
 13   8000
 14   8000              ; WPMEMx 0x5840, 1, w
 15   8000
 16   8000
 17   8000              ;===========================================================================
 18   8000              ; Include modules
 19   8000              ;===========================================================================
 20   8000                  include "init.asm"
# file opened: init.asm
  1+  8000              ;
  2+  8000              ; Set up at start up
  3+  8000              ;
  4+  8000              init_start:
  5+  8000              ; We want a black screen.
  6+  8000
  7+  8000 3E 47            ld a,71             ; white ink (7) on black paper (0),
  8+  8002                                      ; bright (64).
  9+  8002 CD 67 80         call utilities_clearscreen
 10+  8005 32 8D 5C         ld (23693),a        ; set our screen colours.
 11+  8008 AF               xor a               ; quick way to load accumulator with zero.
 12+  8009 CD 9B 22         call 8859           ; set permanent border colours.
 13+  800C
 14+  800C 21 F3 A6         ld hl,screen_offset ; reset some temp variables
 15+  800F 36 00            ld (hl),0
 16+  8011 21 F4 A6         ld hl,screen_tmp
 17+  8014 36 00            ld (hl),0
 18+  8016 21 8E A5         ld hl,buffer_tmp
 19+  8019 36 00            ld (hl),0
 20+  801B 23               inc hl
 21+  801C 36 00            ld (hl),0
 22+  801E
 23+  801E CD D4 B7         call game_resetcurrentframe ; reset current frame
 24+  8021
 25+  8021 C9               ret
 26+  8022
 27+  8022              ;
 28+  8022              ;   Start coord
 29+  8022              ;   vert c, horiz b
 30+  8022              init_coord:
 31+  8022 18 30            defb 24,48
 32+  8024
 33+  8024              ;
 34+  8024              ; Number of lives to start
 35+  8024              ;
 36+  8024              init_lives:
 37+  8024 03               defb 3
 38+  8025
 39+  8025              ;
 40+  8025              ; Score to start
 41+  8025              ;
 42+  8025              init_score:
 43+  8025 30 30 30 30      defb '000000'
 43+  8029 30 30
# file closed: init.asm
 21   802B                  include "utilities.asm"
# file opened: utilities.asm
  1+  802B              ; ##########################################################################
  2+  802B              ; Print a character
  3+  802B              ; Inputs:
  4+  802B              ; b - x coord
  5+  802B              ; c - y coord
  6+  802B              ; d - character
  7+  802B              ; e - colour
  8+  802B              ; ##########################################################################
  9+  802B              utilities_print_char:
 10+  802B 7B               ld a,e
 11+  802C 32 8F 5C         ld (23695),a        ; set our temporary screen colours.
 12+  802F 3E 16            ld a,22
 13+  8031 D7               rst 16              ; Calls the Sinclair PRINT AT routine
 14+  8032 78               ld a,b              ; Gets the X co-ordinate
 15+  8033 3D               dec a
 16+  8034 D7               rst 16
 17+  8035 79               ld a,c              ; and the Y co-ordinate
 18+  8036 D7               rst 16              ; So, essentially PRINT AT X,Y; like in BASIC
 19+  8037 7A               ld a,d              ; ASCII code for udg.
 20+  8038 D7               rst 16              ; draw block.
 21+  8039 C9               ret
 22+  803A
 23+  803A
 24+  803A              ;Inputs:
 25+  803A              ;     DE and A are factors
 26+  803A              ;Outputs:
 27+  803A              ;     A is not changed
 28+  803A              ;     B is 0
 29+  803A              ;     C is not changed
 30+  803A              ;     DE is not changed
 31+  803A              ;     HL is the product
 32+  803A              ;Time:
 33+  803A              ;     342+6x
 34+  803A              ;
 35+  803A              utilities_multiply:
 36+  803A 06 08            ld b,8          ;7           7
 37+  803C 21 00 00         ld hl,0         ;10         10
 38+  803F 29               add hl,hl     ;11*8       88
 39+  8040 07               rlca          ;4*8        32
 40+  8041 30 01            jr nc,$+3     ;(12|18)*8  96+6x
 41+  8043 19                   add hl,de   ;--         --
 42+  8044 10 F9            djnz $-5      ;13*7+8     99
 43+  8046 C9               ret             ;10         10
 44+  8047
 45+  8047              utilities_waitforkey:
 46+  8047 21 08 5C         ld hl,23560         ; LAST K system variable.
 47+  804A 36 00            ld (hl),0           ; put null value there.
 48+  804C              utilities_waitforkey0:
 49+  804C 7E               ld a,(hl)           ; new value of LAST K.
 50+  804D FE 00            cp 0                ; is it still zero?
 51+  804F 28 FB            jr z,utilities_waitforkey0           ; yes, so no key pressed.
 52+  8051 C9               ret                 ; key was pressed.
 53+  8052
 54+  8052              ;
 55+  8052              ; Waits number of frames for keypress. If got, returns 1, if not 0
 56+  8052              ; Inputs:
 57+  8052              ; a - number of frames to waits
 58+  8052              ; Ouputs:
 59+  8052              ; e - 0 not pressed, 1 pressed
 60+  8052              utilities_waitforkey_forframes:
 61+  8052 21 08 5C         ld hl,23560         ; LAST K system variable.
 62+  8055 36 00            ld (hl),0           ; put null value there.
 63+  8057 47               ld b,a              ; number of frames to wait
 64+  8058              utilities_waitforkey_forframes0:
 65+  8058 7E               ld a,(hl)           ; new value of LAST K.
 66+  8059 FE 00            cp 0                ; is it still zero?
 67+  805B 28 03            jr z,utilities_waitforkey_forframes1           ; yes, so no key pressed.
 68+  805D 1E 01            ld e,1              ; set the pressed flag
 69+  805F C9               ret                 ; key was pressed.
 70+  8060              utilities_waitforkey_forframes1:
 71+  8060 76               halt                ; wait for frame
 72+  8061 76               halt                ; wait for frame
 73+  8062 10 F4            djnz utilities_waitforkey_forframes0 ; loop again
 74+  8064 1E 00            ld e,0              ; nothing pressed in time
 75+  8066 C9               ret
 76+  8067
 77+  8067              ;
 78+  8067              ; Clears the screen
 79+  8067              ; Inputs:
 80+  8067              ; a - attribute colour
 81+  8067              utilities_clearscreen:
 82+  8067 76               halt
 83+  8068 21 00 58         ld hl,22528         ; attr
 84+  806B 11 01 58         ld de,22529         ; attr+1
 85+  806E 01 FF 02         ld bc,767
 86+  8071 77               ld (hl),a
 87+  8072 ED B0            ldir
 88+  8074
 89+  8074 21 00 40         ld hl, 16384        ;pixels
 90+  8077 11 01 40         ld de, 16385        ;pixels + 1
 91+  807A 01 FF 17         ld bc, 6143         ;pixels area length - 1
 92+  807D 36 00            ld (hl), 0          ;set first byte to '0'
 93+  807F ED B0            ldir                ;copy bytes
 94+  8081
 95+  8081 C9               ret
 96+  8082
 97+  8082              ;
 98+  8082              ; Wait for a number of frames
 99+  8082              ; Inputs:
100+  8082              ; b - number of frames
101+  8082              utilities_pauseforframes:
102+  8082 76               halt
103+  8083 10 FD            djnz utilities_pauseforframes
104+  8085 C9               ret
105+  8086
106+  8086              utilities_readkey:
107+  8086 21 A6 80         LD HL,utilties_keymap              ; Point HL at the keyboard list
108+  8089 16 08            LD D,8                                  ; This is the number of ports (rows) to check
109+  808B 0E FE            LD C,$FE                            ; C is always FEh for reading keyboard ports
110+  808D              utilities_readkey_0:
111+  808D 46               LD B,(HL)                               ; Get the keyboard port address from table
112+  808E 23               INC HL                                  ; Increment to list of keys
113+  808F ED 78            IN A,(C)                                ; Read the row of keys in
114+  8091 E6 1F            AND $1F                                     ; We are only interested in the first five bits
115+  8093 1E 05            LD E,5                                  ; This is the number of keys in the row
116+  8095              utilities_readkey_1:
117+  8095 CB 3F            SRL A                                   ; Shift A right; bit 0 sets carry bit
118+  8097 30 0B            JR NC,utilities_readkey_2   ; If the bit is 0, we've found our key
119+  8099 23               INC HL                                  ; Go to next table address
120+  809A 1D               DEC E                                   ; Decrement key loop counter
121+  809B 20 F8            JR NZ,utilities_readkey_1   ; Loop around until this row finished
122+  809D 15               DEC D                                   ; Decrement row loop counter
123+  809E 20 ED            JR NZ,utilities_readkey_0   ; Loop around until we are done
124+  80A0 A7               AND A                                   ; Clear A (no key found)
125+  80A1 C3 86 80         jp utilities_readkey
126+  80A4              utilities_readkey_2:
127+  80A4 7E               LD A,(HL)                               ; We've found a key at this point; fetch the character code!
128+  80A5 C9               RET
129+  80A6
130+  80A6              utilties_keymap:
131+  80A6 FE 23 5A 58      defb $FE,"#","Z","X","C","V"
131+  80AA 43 56
132+  80AC FD 41 53 44      defb $FD,"A","S","D","F","G"
132+  80B0 46 47
133+  80B2 FB 51 57 45      defb $FB,"Q","W","E","R","T"
133+  80B6 52 54
134+  80B8 F7 31 32 33      defb $F7,"1","2","3","4","5"
134+  80BC 34 35
135+  80BE EF 30 39 38      defb $EF,"0","9","8","7","6"
135+  80C2 37 36
136+  80C4 DF 50 4F 49      defb $DF,"P","O","I","U","Y"
136+  80C8 55 59
137+  80CA BF 23 4C 4B      defb $BF,"#","L","K","J","H"
137+  80CE 4A 48
138+  80D0 7F 20 23 4D      defb $7F," ","#","M","N","B"
138+  80D4 4E 42
# file closed: utilities.asm
 22   80D6                  include "strings.asm"
# file opened: strings.asm
  1+  80D6              string_score1:
  2+  80D6 04 00 53 43      defb 4,0,'SCORE1',255
  2+  80DA 4F 52 45 31
  2+  80DE FF
  3+  80DF              string_scorenumbers1:
  4+  80DF 04 01 30 30      defb 4,1,'000000',255
  4+  80E3 30 30 30 30
  4+  80E7 FF
  5+  80E8              string_company:
  6+  80E8 0E 00 45 4E      defb 14,0,'ENV',255
  6+  80EC 56 FF
  7+  80EE              string_credits:
  8+  80EE 0C 01 50 4C      defb 12,1,'PLAYER 1',255
  8+  80F2 41 59 45 52
  8+  80F6 20 31 FF
  9+  80F9              string_score2:
 10+  80F9 16 00 53 43      defb 22,0,'SCORE2',255
 10+  80FD 4F 52 45 32
 10+  8101 FF
 11+  8102              string_scorenumbers2:
 12+  8102 16 01 30 30      defb 22,1,'000000',255
 12+  8106 30 30 30 30
 12+  810A FF
 13+  810B              string_titlescreen_copyright:
 14+  810B 04 16 7F 20      defb 4,22, 127,' 1982 AW ZILEC ELC LTD',255
 14+  810F 31 39 38 32
 14+  8113 20 41 57 20
 14+  8117 5A 49 4C 45
 14+  811B 43 20 45 4C
 14+  811F 43 20 4C 54
 14+  8123 44 FF
 15+  8125
 16+  8125
 17+  8125              string_alttitlescreen_1:
 18+  8125 0C 00 43 52      defb 12,0,'CREDITS 1',255
 18+  8129 45 44 49 54
 18+  812D 53 20 31 FF
 19+  8131              string_alttitlescreen_2:
 20+  8131 00 02 20 20      defb 0,2,'           THE OBJECT',254
 20+  8135 20 20 20 20
 20+  8139 20 20 20 20
 20+  813D 20 54 48 45
 20+  8141 20 4F 42 4A
 20+  8145 45 43 54 FE
 21+  8149 00 03 20 20      defb 0,3,'          OF THIS GAME',254
 21+  814D 20 20 20 20
 21+  8151 20 20 20 20
 21+  8155 4F 46 20 54
 21+  8159 48 49 53 20
 21+  815D 47 41 4D 45
 21+  8161 FE
 22+  8162 00 04 20 20      defb 0,4,'         IS TO DIG DOWN',254
 22+  8166 20 20 20 20
 22+  816A 20 20 20 49
 22+  816E 53 20 54 4F
 22+  8172 20 44 49 47
 22+  8176 20 44 4F 57
 22+  817A 4E FE
 23+  817C 00 05 20 20      defb 0,5,'        TO THE BOTTOM PIT',254
 23+  8180 20 20 20 20
 23+  8184 20 20 54 4F
 23+  8188 20 54 48 45
 23+  818C 20 42 4F 54
 23+  8190 54 4F 4D 20
 23+  8194 50 49 54 FE
 24+  8198 00 06 20 20      defb 0,6,'               AND',254
 24+  819C 20 20 20 20
 24+  81A0 20 20 20 20
 24+  81A4 20 20 20 20
 24+  81A8 20 41 4E 44
 24+  81AC FE
 25+  81AD 00 07 20 20      defb 0,7,'        COLLECT AT LEAST',254
 25+  81B1 20 20 20 20
 25+  81B5 20 20 43 4F
 25+  81B9 4C 4C 45 43
 25+  81BD 54 20 41 54
 25+  81C1 20 4C 45 41
 25+  81C5 53 54 FE
 26+  81C8 00 08 20 20      defb 0,8,'         ONE LARGE JEWEL',254
 26+  81CC 20 20 20 20
 26+  81D0 20 20 20 4F
 26+  81D4 4E 45 20 4C
 26+  81D8 41 52 47 45
 26+  81DC 20 4A 45 57
 26+  81E0 45 4C FE
 27+  81E3 00 09 20 20      defb 0,9,'              THEN',254
 27+  81E7 20 20 20 20
 27+  81EB 20 20 20 20
 27+  81EF 20 20 20 20
 27+  81F3 54 48 45 4E
 27+  81F7 FE
 28+  81F8 00 0A 20 20      defb 0,10,'         RETURN TO SHIP',254
 28+  81FC 20 20 20 20
 28+  8200 20 20 20 52
 28+  8204 45 54 55 52
 28+  8208 4E 20 54 4F
 28+  820C 20 53 48 49
 28+  8210 50 FE
 29+  8212 00 0B 20 20      defb 0,11,'         THRU UPPER PIT',255
 29+  8216 20 20 20 20
 29+  821A 20 20 20 54
 29+  821E 48 52 55 20
 29+  8222 55 50 50 45
 29+  8226 52 20 50 49
 29+  822A 54 FF
 30+  822C              string_alttitlescreen_3:
 31+  822C 00 0D 20 20      defb 0,13,'    SINGLE BONUS  5000 POINTS',254
 31+  8230 20 20 53 49
 31+  8234 4E 47 4C 45
 31+  8238 20 42 4F 4E
 31+  823C 55 53 20 20
 31+  8240 35 30 30 30
 31+  8244 20 50 4F 49
 31+  8248 4E 54 53 FE
 32+  824C 00 0E 20 20      defb 0,14,'      COLLECT 1 LARGE JEWEL',254
 32+  8250 20 20 20 20
 32+  8254 43 4F 4C 4C
 32+  8258 45 43 54 20
 32+  825C 31 20 4C 41
 32+  8260 52 47 45 20
 32+  8264 4A 45 57 45
 32+  8268 4C FE
 33+  826A 00 0F 20 20      defb 0,15,'       AND RETURN TO SHIP',254
 33+  826E 20 20 20 20
 33+  8272 20 41 4E 44
 33+  8276 20 52 45 54
 33+  827A 55 52 4E 20
 33+  827E 54 4F 20 53
 33+  8282 48 49 50 FE
 34+  8286 00 11 20 20      defb 0,17,'    DOUBLE BONUS  10000 POINTS',254
 34+  828A 20 20 44 4F
 34+  828E 55 42 4C 45
 34+  8292 20 42 4F 4E
 34+  8296 55 53 20 20
 34+  829A 31 30 30 30
 34+  829E 30 20 50 4F
 34+  82A2 49 4E 54 53
 34+  82A6 FE
 35+  82A7 00 12 20 20      defb 0,18,'    COLLECT ALL 3 LARGE JEWELS',254
 35+  82AB 20 20 43 4F
 35+  82AF 4C 4C 45 43
 35+  82B3 54 20 41 4C
 35+  82B7 4C 20 33 20
 35+  82BB 4C 41 52 47
 35+  82BF 45 20 4A 45
 35+  82C3 57 45 4C 53
 35+  82C7 FE
 36+  82C8 00 13 20 20      defb 0,19,'       OR   ALL 4 SMALL JEWELS',254
 36+  82CC 20 20 20 20
 36+  82D0 20 4F 52 20
 36+  82D4 20 20 41 4C
 36+  82D8 4C 20 34 20
 36+  82DC 53 4D 41 4C
 36+  82E0 4C 20 4A 45
 36+  82E4 57 45 4C 53
 36+  82E8 FE
 37+  82E9 00 15 20 20      defb 0,21,'    TRIPLE BONUS  15000 POINTS',254
 37+  82ED 20 20 54 52
 37+  82F1 49 50 4C 45
 37+  82F5 20 42 4F 4E
 37+  82F9 55 53 20 20
 37+  82FD 31 35 30 30
 37+  8301 30 20 50 4F
 37+  8305 49 4E 54 53
 37+  8309 FE
 38+  830A 00 16 20 20      defb 0,22,'       COLLECT ALL 7 JEWELS',255
 38+  830E 20 20 20 20
 38+  8312 20 43 4F 4C
 38+  8316 4C 45 43 54
 38+  831A 20 41 4C 4C
 38+  831E 20 37 20 4A
 38+  8322 45 57 45 4C
 38+  8326 53 FF
 39+  8328
 40+  8328              string_lifescreen_player:
 41+  8328 0B 00 20 50      defb 11,0,' PLAYER 1 ',255
 41+  832C 4C 41 59 45
 41+  8330 52 20 31 20
 41+  8334 FF
 42+  8335              string_lifescreen_lives:
 43+  8335 0B 03 30 20      defb 11,3,48,' MEN LEFT',255
 43+  8339 4D 45 4E 20
 43+  833D 4C 45 46 54
 43+  8341 FF
 44+  8342              string_lifescreen_lastman:
 45+  8342 0C 03 4C 41      defb 12,3,'LAST MAN',255
 45+  8346 53 54 20 4D
 45+  834A 41 4E FF
 46+  834D
 47+  834D              string_gameoverscreen_gameover:
 48+  834D 0C 06 47 41      defb 12,6,'GAME OVER',255
 48+  8351 4D 45 20 4F
 48+  8355 56 45 52 FF
 49+  8359              string_gameoverscreen_copyright:
 50+  8359 05 12 7F 20      defb 5,18,127,' 1982 AW ZILEC ELC LTD',255
 50+  835D 31 39 38 32
 50+  8361 20 41 57 20
 50+  8365 5A 49 4C 45
 50+  8369 43 20 45 4C
 50+  836D 43 20 4C 54
 50+  8371 44 FF
 51+  8373              string_gameoverscreen_bestscores:
 52+  8373 07 16 42 45      defb 7,22,'BEST SCORES TODAY',255
 52+  8377 53 54 20 53
 52+  837B 43 4F 52 45
 52+  837F 53 20 54 4F
 52+  8383 44 41 59 FF
 53+  8387              string_gameover_credits:
 54+  8387 0C 01 43 52      defb 12,1,'CREDITS 0',255
 54+  838B 45 44 49 54
 54+  838F 53 20 30 FF
 55+  8393
 56+  8393              string_highscore_congratulations:
 57+  8393 08 05 43 4F      defb 8,5,'CONGRATULATIONS',255
 57+  8397 4E 47 52 41
 57+  839B 54 55 4C 41
 57+  839F 54 49 4F 4E
 57+  83A3 53 FF
 58+  83A5              string_highscore_player1:
 59+  83A5 0C 07 50 4C      defb 12,7,'PLAYER 1',255
 59+  83A9 41 59 45 52
 59+  83AD 20 31 FF
 60+  83B0              string_highscore_player2:
 61+  83B0 0C 07 50 4C      defb 12,7,'PLAYER 2',255
 61+  83B4 41 59 45 52
 61+  83B8 20 32 FF
 62+  83BB              string_highscore_youhaveearned:
 63+  83BB 08 0A 59 4F      defb 8,10,'YOU HAVE EARNED',255
 63+  83BF 55 20 48 41
 63+  83C3 56 45 20 45
 63+  83C7 41 52 4E 45
 63+  83CB 44 FF
 64+  83CD              string_highscore_place1:
 65+  83CD 06 0C 54 48      defb 6,12,'THE GREATEST SCORE',255
 65+  83D1 45 20 47 52
 65+  83D5 45 41 54 45
 65+  83D9 53 54 20 53
 65+  83DD 43 4F 52 45
 65+  83E1 FF
 66+  83E2              string_highscore_place2:
 67+  83E2 06 0C 54 48      defb 6,12,'THE 2ND BEST SCORE',255
 67+  83E6 45 20 32 4E
 67+  83EA 44 20 42 45
 67+  83EE 53 54 20 53
 67+  83F2 43 4F 52 45
 67+  83F6 FF
 68+  83F7              string_highscore_place3:
 69+  83F7 06 0C 54 48      defb 6,12,'THE 3RD BEST SCORE',255
 69+  83FB 45 20 33 52
 69+  83FF 44 20 42 45
 69+  8403 53 54 20 53
 69+  8407 43 4F 52 45
 69+  840B FF
 70+  840C              string_highscore_pleaseenter
 71+  840C 03 0F 52 45      defb 3,15,'RECORD YOUR INITIALS BELOW',255
 71+  8410 43 4F 52 44
 71+  8414 20 59 4F 55
 71+  8418 52 20 49 4E
 71+  841C 49 54 49 41
 71+  8420 4C 53 20 42
 71+  8424 45 4C 4F 57
 71+  8428 FF
 72+  8429
 73+  8429              string_endlevel_youhaveearned:
 74+  8429 08 0B 59 4F      defb 8,11,'YOU HAVE EARNED',255
 74+  842D 55 20 48 41
 74+  8431 56 45 20 45
 74+  8435 41 52 4E 45
 74+  8439 44 FF
 75+  843B              string_endlevel_bonus1:
 76+  843B 09 0D 53 49      defb 9,13,'SINGLE BONUS',255
 76+  843F 4E 47 4C 45
 76+  8443 20 42 4F 4E
 76+  8447 55 53 FF
 77+  844A              string_endlevel_bonus2:
 78+  844A 09 0D 44 4F      defb 9,13,'DOUBLE BONUS',255
 78+  844E 55 42 4C 45
 78+  8452 20 42 4F 4E
 78+  8456 55 53 FF
 79+  8459              string_endlevel_bonus3:
 80+  8459 09 0D 54 52      defb 9,13,'TRIPLE BONUS',255
 80+  845D 49 50 4C 45
 80+  8461 20 42 4F 4E
 80+  8465 55 53 FF
 81+  8468              string_endlevel_points1:
 82+  8468 0A 0F 35 30      defb 10,15,'5000 POINTS',255
 82+  846C 30 30 20 50
 82+  8470 4F 49 4E 54
 82+  8474 53 FF
 83+  8476              string_endlevel_points2:
 84+  8476 09 0F 31 30      defb 9,15,'10000 POINTS',255
 84+  847A 30 30 30 20
 84+  847E 50 4F 49 4E
 84+  8482 54 53 FF
 85+  8485              string_endlevel_points3:
 86+  8485 09 0F 31 35      defb 9,15,'15000 POINTS',255
 86+  8489 30 30 30 20
 86+  848D 50 4F 49 4E
 86+  8491 54 53 FF
 87+  8494              string_endlevel_anothergo:
 88+  8494 08 12 48 41      defb 8,18,'HAVE ANOTHER GO',255
 88+  8498 56 45 20 41
 88+  849C 4E 4F 54 48
 88+  84A0 45 52 20 47
 88+  84A4 4F FF
 89+  84A6              ;
 90+  84A6              ; Prints specified string
 91+  84A6              ; Inputs:
 92+  84A6              ; de: pointer to string
 93+  84A6              ; bc: length of string
 94+  84A6              ;
 95+  84A6              ; Print String Data
 96+  84A6              ; First two bytes of string contain X and Y char position, then the string
 97+  84A6              ; Individual strings are terminated with 0xFE
 98+  84A6              ; End of data is terminated with 0xFF
 99+  84A6              ; HL: Address of string
100+  84A6              ;
101+  84A6 5E           string_print:           LD E,(HL)                       ; Fetch the X coordinate
102+  84A7 23                                   INC HL                          ; Increase HL to the next memory location
103+  84A8 56                                   LD D,(HL)                       ; Fetch the Y coordinate
104+  84A9 23                                   INC HL                          ; Increase HL to the next memory location
105+  84AA CD BD 84                             CALL string_getcharaddress           ; Calculate the screen address (in DE)
106+  84AD 7E           string_print_0:         LD A,(HL)                       ; Fetch the character to print
107+  84AE 23                                   INC HL                          ; Increase HL to the next character
108+  84AF FE FE                                CP 0xFE                         ; Compare with 0xFE
109+  84B1 28 F3                                JR Z,string_print               ; If it is equal to 0xFE then loop back to print next string
110+  84B3 D0                                   RET NC                          ; If it is greater or equal to (carry bit set) then
111+  84B4 E5                                   PUSH HL                         ; Push HL on stack (Print_Char will not preserve HL)
112+  84B5 CD CD 84                             CALL Print_Char                 ; Print the character
113+  84B8 E1                                   POP HL                          ; Retrieve HL back off the stack
114+  84B9 1C                                   INC E                           ; Go to the next screen address
115+  84BA 18 F1                                JR string_print_0               ; Loop back to print next character
116+  84BC C9                                   RET
117+  84BD
118+  84BD              ; Get screen address
119+  84BD              ; D = Y character position
120+  84BD              ; E = X character position
121+  84BD              ; Returns address in DE
122+  84BD              ;
123+  84BD 7A           string_getcharaddress:       LD A,D
124+  84BE E6 07                                AND %00000111
125+  84C0 1F                                   RRA
126+  84C1 1F                                   RRA
127+  84C2 1F                                   RRA
128+  84C3 1F                                   RRA
129+  84C4 B3                                   OR E
130+  84C5 5F                                   LD E,A
131+  84C6 7A                                   LD A,D
132+  84C7 E6 18                                AND %00011000
133+  84C9 F6 40                                OR %01000000
134+  84CB 57                                   LD D,A
135+  84CC C9                                   RET                             ; Returns screen address in DE
136+  84CD
137+  84CD              ; Print a single character out
138+  84CD              ; A:  Character to print
139+  84CD              ; DE: Screen address to print character at
140+  84CD              ;
141+  84CD 21 00 3C     Print_Char:             LD HL,0x3C00                    ; Address of character set table in ROM
142+  84D0 06 00                                LD B,0                          ; Set BC to A
143+  84D2 4F                                   LD C,A
144+  84D3 E6 FF                                AND 0xFF                        ; Clear the carry bit
145+  84D5 CB 11                                RL C                            ; Multiply BC by 8 (shift left 3 times)
146+  84D7 CB 10                                RL B
147+  84D9 CB 11                                RL C
148+  84DB CB 10                                RL B
149+  84DD CB 11                                RL C
150+  84DF CB 10                                RL B
151+  84E1 09                                   ADD HL,BC                       ; Get the character address in HL
152+  84E2 0E 08                                LD C,8                          ; Loop counter
153+  84E4 D5                                   PUSH DE
154+  84E5 7E           Print_Char_1:           LD A,(HL)                       ; Get the byte from the ROM into A
155+  84E6 12                                   LD (DE),A                       ; Stick A onto the screen
156+  84E7 14                                   INC D                           ; Goto next line on screen
157+  84E8 2C                                   INC L                           ; Goto next byte of character
158+  84E9 0D                                   DEC C                           ; Decrease the loop counter
159+  84EA 20 F9                                JR NZ,Print_Char_1              ; Loop around whilst it is Not Zero (NZ)
160+  84EC D1                                   POP DE
161+  84ED C9                                   RET                             ; Return from the subroutine
# file closed: strings.asm
 23   84EE                  include "screen\buffer.asm"
# file opened: screen/buffer.asm
  1+  84EE              buffer_buffer:
  2+  84EE 00 00 00...      defs 7424                   ; area reserved for screen
  3+  A1EE
  4+  A1EE              buffer_attr_buffer:
  5+  A1EE 00 00 00...      defs 928                    ; attrs buffer area
  6+  A58E
  7+  A58E              buffer_tmp:
  8+  A58E 00 00            defb 0,0                    ; temp area
  9+  A590
 10+  A590              buffer_updatedlines:
 11+  A590 FF FF FF...      defs 21,255
 12+  A5A5
 13+  A5A5              buffer_updateall:
 14+  A5A5 00               defb 0
 15+  A5A6
 16+  A5A6              ;
 17+  A5A6              ; Stores a line number in the update list
 18+  A5A6              ; Inputs:
 19+  A5A6              ; a - row number
 20+  A5A6              buffer_marklineforupdate:
 21+  A5A6 5F               ld e,a                          ; store in e
 22+  A5A7 06 15            ld b,21
 23+  A5A9 21 90 A5         ld hl,buffer_updatedlines
 24+  A5AC              buffer_marklineforupdate0:
 25+  A5AC 7E               ld a,(hl)                       ; get the line stored in updated lines
 26+  A5AD BB               cp e                            ; is this the same as the row number passed in?
 27+  A5AE C8               ret z                           ; if so, don't need to do anything
 28+  A5AF FE FF            cp 255                          ; is this 255, ie the end of the buffer
 29+  A5B1 C2 B6 A5         jp nz,buffer_marklineforupdate1 ; if not, move to next
 30+  A5B4 73               ld (hl),e                       ; if it is, this spot is empty, so store the row number
 31+  A5B5 C9               ret                             ; and finish
 32+  A5B6              buffer_marklineforupdate1:
 33+  A5B6 23               inc hl
 34+  A5B7 10 F3            djnz buffer_marklineforupdate0
 35+  A5B9 C9               ret
 36+  A5BA
 37+  A5BA              ;
 38+  A5BA              ; Zeroes the updated lines list
 39+  A5BA              ;
 40+  A5BA              buffer_clearlist:
 41+  A5BA 06 15            ld b,21
 42+  A5BC 21 90 A5         ld hl,buffer_updatedlines
 43+  A5BF              buffer_clearlist0:
 44+  A5BF 36 FF            ld (hl),255
 45+  A5C1 23               inc hl
 46+  A5C2 10 FB            djnz buffer_clearlist0
 47+  A5C4 C9               ret
 48+  A5C5
 49+  A5C5              ;
 50+  A5C5              ; Copies the buffer to the screen. Use stack.
 51+  A5C5              ; Inputs:
 52+  A5C5              ; a - row number to display - 0 is first line
 53+  A5C5              ;
 54+  A5C5              buffer_bufferlinetoscreen:
 55+  A5C5 4F               ld c,a                          ; store a
 56+  A5C6 ED 5B F3 A6      ld de,(screen_offset)          ; load the screen offset, this is in rows, want it *256
 57+  A5CA 83               add a,e                       ; add the row number
 58+  A5CB 11 00 01         ld de,256
 59+  A5CE CD 3A 80         call utilities_multiply
 60+  A5D1 54 5D            ld de,hl
 61+  A5D3 21 EE 84         ld hl,buffer_buffer
 62+  A5D6 19               add hl,de                   ; add the offset
 63+  A5D7 79               ld a,c                      ; get original row back
 64+  A5D8 ED 73 36 A6      ld (buffer_bufferlinetoscreen1+1),sp ; this is some self-modifying code; stores the stack pointer in an ld sp,nn instruction at the end
 65+  A5DC D9               exx
 66+  A5DD 0E 00            ld c,0                      ; zero horizontal
 67+  A5DF 47               ld b,a                      ; load the row number into vertical coord
 68+  A5E0 04               inc b
 69+  A5E1 04               inc b                       ; move forward 2 to allow for scores
 70+  A5E2 CD DD A7         call screen_getcelladdress  ; get the memory into de
 71+  A5E5 21 10 00         ld hl,16                    ; offset by 16 chars to get to the centre, since populating stack from right
 72+  A5E8 19               add hl,de
 73+  A5E9              buffer_bufferlinetoscreen0:
 74+  A5E9 D9               exx                         ; hl is now buffer
 75+  A5EA 23               inc hl
 76+  A5EB 23               inc hl                      ; move hl forward 2 to skip first two blocks
 77+  A5EC F9               ld sp,hl                    ; do first fourteen for left hand side, sp pointing at buffer
 78+  A5ED F1               pop af
 79+  A5EE C1               pop bc
 80+  A5EF D1               pop de
 81+  A5F0 DD E1            pop ix
 82+  A5F2 D9               exx                         ; hl is now screen
 83+  A5F3 08               ex af,af'
 84+  A5F4 F1               pop af
 85+  A5F5 C1               pop bc
 86+  A5F6 D1               pop de
 87+  A5F7 F9               ld sp,hl                    ; sp pointing at screen
 88+  A5F8 D5               push de
 89+  A5F9 C5               push bc
 90+  A5FA F5               push af
 91+  A5FB 08               ex af,af'
 92+  A5FC D9               exx                         ; hl is now buffer
 93+  A5FD DD E5            push ix
 94+  A5FF D5               push de
 95+  A600 C5               push bc
 96+  A601 F5               push af
 97+  A602 1E 0E            ld e,14                    ; do another fourteen for right hand side
 98+  A604 16 00            ld d,0
 99+  A606 19               add hl,de
100+  A607 F9               ld sp,hl                    ; sp pointing at buffer
101+  A608 F1               pop af
102+  A609 C1               pop bc
103+  A60A D1               pop de
104+  A60B DD E1            pop ix
105+  A60D                  ;pop ix
106+  A60D D9               exx                         ; hl is now screen
107+  A60E 08               ex af,af'
108+  A60F 1E 0E            ld e,14
109+  A611 16 00            ld d,0
110+  A613 19               add hl,de
111+  A614 F1               pop af
112+  A615 C1               pop bc
113+  A616 D1               pop de
114+  A617                  ;pop iy
115+  A617 F9               ld sp,hl                    ; sp pointing at screen
116+  A618                  ;push iy
117+  A618 D5               push de
118+  A619 C5               push bc
119+  A61A F5               push af
120+  A61B 08               ex af,af'
121+  A61C D9               exx                         ; hl is now buffer
122+  A61D DD E5            push ix
123+  A61F D5               push de
124+  A620 C5               push bc
125+  A621 F5               push af
126+  A622 1E 10            ld e,16
127+  A624 16 00            ld d,0
128+  A626 19               add hl,de
129+  A627 D9               exx                         ; hl is now screen
130+  A628 1E 0E            ld e,14
131+  A62A 16 00            ld d,0
132+  A62C ED 52            sbc hl,de
133+  A62E 24               inc h
134+  A62F 7C               ld a,h
135+  A630 E6 07            and 0x07                    ; check if this is multiple of 8, if so, end of cell line
136+  A632 C2 E9 A5         jp nz,buffer_bufferlinetoscreen0 ; next line in cell
137+  A635              buffer_bufferlinetoscreen1:
138+  A635 31 00 00         ld sp,0
139+  A638 D9               exx
140+  A639 C9               ret
141+  A63A
142+  A63A              ;
143+  A63A              ; Copies the buffer to the screen for updated lines. Use stack.
144+  A63A              ; Inputs: none
145+  A63A              ;
146+  A63A              buffer_buffertoscreen:
147+  A63A 3A A5 A5         ld a,(buffer_updateall)      ; get the all update flag
148+  A63D FE 00            cp 0
149+  A63F CA 4B A6         jp z,buffer_buffertoscreen2  ; if not set, draw only updated
150+  A642 CD 6C A6         call buffer_allbuffertoscreen ; otherwise, draw whole screen
151+  A645 21 A5 A5         ld hl,buffer_updateall
152+  A648 36 00            ld (hl),0                    ; reset flag
153+  A64A C9               ret
154+  A64B              buffer_buffertoscreen2:
155+  A64B 06 15            ld b,21
156+  A64D FD 21 90 A5      ld iy,buffer_updatedlines    ; the location of the updated lines
157+  A651              buffer_buffertoscreen0:
158+  A651 FD 7E 00         ld a,(iy)
159+  A654 FE FF            cp 255
160+  A656 CA 68 A6         jp z,buffer_buffertoscreen1                       ; if this is 255, then we're at the end of the updated list
161+  A659 C5               push bc
162+  A65A FD E5            push iy
163+  A65C F3               di
164+  A65D CD C5 A5         call buffer_bufferlinetoscreen
165+  A660 FB               ei
166+  A661 FD E1            pop iy
167+  A663 C1               pop bc
168+  A664 FD 23            inc iy
169+  A666 10 E9            djnz buffer_buffertoscreen0
170+  A668              buffer_buffertoscreen1:
171+  A668 CD 80 A6         call buffer_buffertoattrsfast
172+  A66B C9               ret
173+  A66C
174+  A66C              ;
175+  A66C              ; Copies the buffer to the screen. Use stack.
176+  A66C              ; Inputs: none
177+  A66C              ;
178+  A66C              buffer_allbuffertoscreen:
179+  A66C 06 15            ld b,21
180+  A66E 3E 00            ld a,0
181+  A670              buffer_allbuffertoscreen0:
182+  A670 C5               push bc
183+  A671 F5               push af
184+  A672 F3               di
185+  A673 CD C5 A5         call buffer_bufferlinetoscreen
186+  A676 FB               ei
187+  A677 F1               pop af
188+  A678 C1               pop bc
189+  A679 3C               inc a
190+  A67A 10 F4            djnz buffer_allbuffertoscreen0
191+  A67C
192+  A67C CD 80 A6         call buffer_buffertoattrsfast
193+  A67F C9               ret
194+  A680
195+  A680              ;
196+  A680              ; Copies the attrs buffer to screen with the stack
197+  A680              ;
198+  A680              buffer_buffertoattrsfast:
199+  A680 ED 73 EF A6      ld (buffer_buffertoattrsfast1+1),sp ; this is some self-modifying code; stores the stack pointer in an ld sp,nn instruction at the end
200+  A684 3A F3 A6         ld a,(screen_offset)            ; get the screen offset in rows, so want *32
201+  A687 11 20 00         ld de,32
202+  A68A CD 3A 80         call utilities_multiply
203+  A68D 54 5D            ld de,hl
204+  A68F 21 EE A1         ld hl,buffer_attr_buffer
205+  A692 19               add hl,de                       ; add the offset, start of attr buffer now in hl
206+  A693 D9               exx
207+  A694 21 50 58         ld hl,22528+80                  ; start of attr memory + 2 lines for score + 16 to start at right side
208+  A697 FD 21 8E A5      ld iy,buffer_tmp
209+  A69B FD 36 00 15      ld (iy),21              ; number of times to loop
210+  A69F              buffer_buffertoattrsfast0:
211+  A69F D9               exx                         ; hl is now buffer
212+  A6A0 23               inc hl
213+  A6A1 23               inc hl                      ; move hl forward 2 to skip first two blocks
214+  A6A2 F9               ld sp,hl                    ; do first fourteen for left hand side, sp pointing at buffer
215+  A6A3 F1               pop af
216+  A6A4 C1               pop bc
217+  A6A5 D1               pop de
218+  A6A6 DD E1            pop ix
219+  A6A8 D9               exx                         ; hl is now screen
220+  A6A9 08               ex af,af'
221+  A6AA F1               pop af
222+  A6AB C1               pop bc
223+  A6AC D1               pop de
224+  A6AD F9               ld sp,hl                    ; sp pointing at screen
225+  A6AE D5               push de
226+  A6AF C5               push bc
227+  A6B0 F5               push af
228+  A6B1 08               ex af,af'
229+  A6B2 D9               exx                         ; hl is now buffer
230+  A6B3 DD E5            push ix
231+  A6B5 D5               push de
232+  A6B6 C5               push bc
233+  A6B7 F5               push af
234+  A6B8 1E 0E            ld e,14                    ; do another fourteen for right hand side
235+  A6BA 16 00            ld d,0
236+  A6BC 19               add hl,de
237+  A6BD F9               ld sp,hl                    ; sp pointing at buffer
238+  A6BE F1               pop af
239+  A6BF C1               pop bc
240+  A6C0 D1               pop de
241+  A6C1 DD E1            pop ix
242+  A6C3 D9               exx                         ; hl is now screen
243+  A6C4 08               ex af,af'
244+  A6C5 1E 0E            ld e,14
245+  A6C7 16 00            ld d,0
246+  A6C9 19               add hl,de
247+  A6CA F1               pop af
248+  A6CB C1               pop bc
249+  A6CC D1               pop de
250+  A6CD F9               ld sp,hl                    ; sp pointing at screen
251+  A6CE D5               push de
252+  A6CF C5               push bc
253+  A6D0 F5               push af
254+  A6D1 08               ex af,af'
255+  A6D2 D9               exx                         ; hl is now buffer
256+  A6D3 DD E5            push ix
257+  A6D5 D5               push de
258+  A6D6 C5               push bc
259+  A6D7 F5               push af
260+  A6D8 1E 10            ld e,16
261+  A6DA 16 00            ld d,0
262+  A6DC 19               add hl,de
263+  A6DD D9               exx                         ; hl is now screen
264+  A6DE 11 12 00         ld de,18
265+  A6E1 19               add hl,de
266+  A6E2 FD 7E 00         ld a,(iy)
267+  A6E5 3D               dec a
268+  A6E6 FE 00            cp 0
269+  A6E8 FD 77 00         ld (iy),a
270+  A6EB C2 9F A6         jp nz,buffer_buffertoattrsfast0 ; do another row
271+  A6EE              buffer_buffertoattrsfast1:
272+  A6EE 31 00 00         ld sp,0
273+  A6F1 D9               exx
274+  A6F2 C9               ret
# file closed: screen/buffer.asm
 24   A6F3                  include "screen\screen.asm"
# file opened: screen/screen.asm
  1+  A6F3              screen_offset:
  2+  A6F3 00               defb 0                      ; offset from top of screen in lines
  3+  A6F4
  4+  A6F4              screen_tmp:
  5+  A6F4 00 00            defb 0,0                      ; temporary memory
  6+  A6F6
  7+  A6F6              screen_setscorecolours:
  8+  A6F6 21 68 B1         ld hl,score_colours
  9+  A6F9 11 00 58         ld de,22528                     ; attrs here
 10+  A6FC 01 40 00         ld bc,64
 11+  A6FF ED B0            ldir
 12+  A701 C9               ret
 13+  A702
 14+  A702              screen_sethighscorecolours:
 15+  A702 21 A8 B1         ld hl,high_score_colours
 16+  A705 11 E0 5A         ld de,22528+736                 ; attrs here
 17+  A708 01 20 00         ld bc,32
 18+  A70B ED B0            ldir
 19+  A70D C9               ret
 20+  A70E
 21+  A70E              ; Draw the screen
 22+  A70E              ; Inputs:
 23+  A70E              ; none
 24+  A70E              ; Notes:
 25+  A70E              ; The value held at screen_offset tells the screen how many rows to scroll down. Set to five to bottom out.
 26+  A70E              screen_draw:
 27+  A70E                  ;call clear_screen
 28+  A70E 0E 00            ld c,0                      ; horiz
 29+  A710 06 00            ld b,0                      ; vert, 0 at top
 30+  A712 DD 21 2A AC      ld ix,level01               ; point ix at level data
 31+  A716 FD 21 EE A1      ld iy,buffer_attr_buffer    ; point iy at attr data
 32+  A71A              screen_draw0:
 33+  A71A DD 7E 00         ld a,(ix)                   ; load the block number
 34+  A71D C5               push bc                     ; store bc, contains loop count
 35+  A71E CD 80 A8         call screen_getattr         ; get the memory location for this cell's attr into hl
 36+  A721 7E               ld a,(hl)                   ; get the attr value at the address
 37+  A722 FD 77 00         ld (iy),a                   ; load the attr into memory
 38+  A725 DD 7E 00         ld a,(ix)                   ; load the block number
 39+  A728 CD 75 A8         call screen_getblock        ; get the block data into hl
 40+  A72B CD 5B A8         call screen_showchar        ; show this character here
 41+  A72E C1               pop bc                      ; get the loop counter back
 42+  A72F DD 23            inc ix                      ; increment level location
 43+  A731 FD 23            inc iy                      ; increment attr location
 44+  A733 0C               inc c                       ; increment horiz
 45+  A734 79               ld a,c
 46+  A735 FE 20            cp 32                       ; check if horiz has reach edge of screen
 47+  A737 C2 1A A7         jp nz,screen_draw0          ; if not, loop
 48+  A73A 0E 00            ld c,0                      ; if so, reset horiz
 49+  A73C 04               inc b                       ; increment vertical
 50+  A73D 78               ld a,b
 51+  A73E FE 1D            cp 29                       ; check if at bottom
 52+  A740 C2 1A A7         jp nz,screen_draw0          ; if not, loop
 53+  A743 21 F4 A6         ld hl, screen_tmp
 54+  A746 36 09            ld (hl),9                   ; load the block number into memory
 55+  A748 DD 21 CA AF      ld ix,level01rocks          ; rock memory
 56+  A74C CD AD A7         call screen_initobjects     ; draw rocks
 57+  A74F 21 F4 A6         ld hl, screen_tmp
 58+  A752 36 0C            ld (hl),12                  ; load the block number into memory
 59+  A754 DD 21 CA B0      ld ix,level01missiles       ; missile memory
 60+  A758 CD AD A7         call screen_initobjects     ; draw missiles
 61+  A75B 21 F4 A6         ld hl, screen_tmp
 62+  A75E 36 08            ld (hl),08                  ; load the block number into memory
 63+  A760 DD 21 43 B1      ld ix,level01diamonds       ; diamond memory
 64+  A764 CD AD A7         call screen_initobjects     ; draw diamonds
 65+  A767 21 F4 A6         ld hl, screen_tmp
 66+  A76A 36 0E            ld (hl),14                  ; load the block number into memory
 67+  A76C DD 21 53 B1      ld ix,level01gems           ; gems memory
 68+  A770 CD AD A7         call screen_initobjects     ; draw gems
 69+  A773 CD 7A A7         call screen_setuptext       ; draws text on the screen
 70+  A776 CD DB BC         call scores_printscores     ; print the current scores
 71+  A779 C9               ret
 72+  A77A
 73+  A77A              ;
 74+  A77A              ; Sets up text on the screen
 75+  A77A              ;
 76+  A77A              screen_setuptext:
 77+  A77A CD FD BC         call scores_showtable
 78+  A77D CD 02 A7         call screen_sethighscorecolours
 79+  A780 21 D6 80         ld hl, string_score1
 80+  A783 CD A6 84         call string_print
 81+  A786 21 DF 80         ld hl, string_scorenumbers1
 82+  A789 CD A6 84         call string_print
 83+  A78C 21 E8 80         ld hl, string_company
 84+  A78F CD A6 84         call string_print
 85+  A792 21 F9 80         ld hl, string_score2
 86+  A795 CD A6 84         call string_print
 87+  A798 21 02 81         ld hl, string_scorenumbers2
 88+  A79B CD A6 84         call string_print
 89+  A79E 21 EE 80         ld hl, string_credits
 90+  A7A1 CD A6 84         call string_print
 91+  A7A4 CD F6 A6         call screen_setscorecolours
 92+  A7A7 C9               ret
 93+  A7A8
 94+  A7A8              ;
 95+  A7A8              ; Sets a line of colours
 96+  A7A8              ; Inputs:
 97+  A7A8              ; a - colour to set
 98+  A7A8              ; b - number to set
 99+  A7A8              ; de - start memory location
100+  A7A8              ;
101+  A7A8              screen_setcolours:
102+  A7A8 12               ld (de),a
103+  A7A9 13               inc de
104+  A7AA 10 FC            djnz screen_setcolours
105+  A7AC C9               ret
106+  A7AD
107+  A7AD              ;
108+  A7AD              ; Draw initial object positions
109+  A7AD              ; Inputs:
110+  A7AD              ; ix - memory location of objects
111+  A7AD              ; a - graphic
112+  A7AD              screen_initobjects:
113+  A7AD DD 4E 00         ld c,(ix)                   ; get the horiz coord
114+  A7B0 79               ld a,c
115+  A7B1 FE FF            cp 255
116+  A7B3 CA DC A7         jp z,screen_initobjects2
117+  A7B6 DD 23            inc ix                      ; move to next
118+  A7B8 DD 46 00         ld b,(ix)                   ; get the vert coord
119+  A7BB DD 23            inc ix
120+  A7BD CD EE A7         call screen_getcellattradress ; get the memory address of b,c attr into de
121+  A7C0 D5               push de
122+  A7C1 3A F4 A6         ld a,(screen_tmp)                  ; get the block number back
123+  A7C4 CD 80 A8         call screen_getattr         ; get the memory location for this cell's attr into hl
124+  A7C7 D1               pop de
125+  A7C8 7E               ld a,(hl)                   ; get the attr value at the address
126+  A7C9 12               ld (de),a                   ; load the attr into memory
127+  A7CA 3A F4 A6         ld a,(screen_tmp)                  ; get the block number back
128+  A7CD CD 75 A8         call screen_getblock        ; get the block data into hl
129+  A7D0 CD 5B A8         call screen_showchar        ; show this character here
130+  A7D3
131+  A7D3              screen_initobjects1:
132+  A7D3 DD 23            inc ix                      ; move past state
133+  A7D5 DD 23            inc ix
134+  A7D7 DD 23            inc ix                      ; move past mem
135+  A7D9 C3 AD A7         jp screen_initobjects
136+  A7DC              screen_initobjects2:
137+  A7DC C9               ret
138+  A7DD
139+  A7DD
140+  A7DD              ;
141+  A7DD              ; Return character cell address offset of block at (b, c) ready for addition to screen  memory.
142+  A7DD              ; Inputs:
143+  A7DD              ; bc: coords
144+  A7DD              ; Outputs:
145+  A7DD              ; de: memory location
146+  A7DD              ;
147+  A7DD              screen_getcelladdress:
148+  A7DD 78               ld a,b      ; vertical position.
149+  A7DE E6 18            and 24      ; which segment, 0, 1 or 2?
150+  A7E0 C6 40            add a,64    ; 64*256 = 16384, Spectrum's screen memory.
151+  A7E2 57               ld d,a      ; this is our high byte.
152+  A7E3 78               ld a,b      ; what was that vertical position again?
153+  A7E4 E6 07            and 7       ; which row within segment?
154+  A7E6 0F               rrca        ; multiply row by 32.
155+  A7E7 0F               rrca
156+  A7E8 0F               rrca
157+  A7E9 5F               ld e,a      ; low byte.
158+  A7EA 79               ld a,c      ; add on y coordinate.
159+  A7EB 83               add a,e     ; mix with low byte.
160+  A7EC 5F               ld e,a      ; address of screen position in de.
161+  A7ED C9               ret
162+  A7EE
163+  A7EE              ;
164+  A7EE              ; Calculate buffer address of attribute for character at (b, c).
165+  A7EE              ; Inputs:
166+  A7EE              ; bc: coords
167+  A7EE              ; Outputs:
168+  A7EE              ; de: memory location
169+  A7EE              ;
170+  A7EE              screen_getcellattradress:
171+  A7EE 11 EE A1         ld de,buffer_attr_buffer ; memory is at base + horiz (c) + vert*32 (b)
172+  A7F1 69               ld l,c      ; x position.
173+  A7F2 26 00            ld h,0      ; 0 h
174+  A7F4 19               add hl,de
175+  A7F5 54 5D            ld de,hl    ; horiz done
176+  A7F7 78               ld a,b      ; do vert
177+  A7F8 D5               push de
178+  A7F9 C5               push bc
179+  A7FA 11 20 00         ld de,32
180+  A7FD CD 3A 80         call utilities_multiply
181+  A800 C1               pop bc
182+  A801 D1               pop de
183+  A802 19               add hl,de
184+  A803 54 5D            ld de,hl    ; vert done
185+  A805 C9               ret
186+  A806
187+  A806              ;
188+  A806              ; Calculate buffer address of attribute for character at (b, c).
189+  A806              ; Inputs:
190+  A806              ; bc: coords
191+  A806              ; Outputs:
192+  A806              ; de: memory location
193+  A806              ;
194+  A806              screen_getscreenattradress:
195+  A806 11 00 58         ld de,22528 ; memory is at base + horiz (c) + vert*32 (b)
196+  A809 69               ld l,c      ; x position.
197+  A80A 26 00            ld h,0      ; 0 h
198+  A80C 19               add hl,de
199+  A80D 54 5D            ld de,hl    ; horiz done
200+  A80F 78               ld a,b      ; do vert
201+  A810 D5               push de
202+  A811 C5               push bc
203+  A812 11 20 00         ld de,32
204+  A815 CD 3A 80         call utilities_multiply
205+  A818 C1               pop bc
206+  A819 D1               pop de
207+  A81A 19               add hl,de
208+  A81B 54 5D            ld de,hl    ; vert done
209+  A81D C9               ret
210+  A81E
211+  A81E              ;
212+  A81E              ; Gets the attr memory location for a screen coord
213+  A81E              ; Will overwrite bc
214+  A81E              ; Inputs:
215+  A81E              ; bc - screen coords
216+  A81E              ; Outputs:
217+  A81E              ; de - memory location
218+  A81E              ; bc - character coords
219+  A81E              ;
220+  A81E              screen_getattraddressfromscreencoords:
221+  A81E 78               ld a,b                          ; get the player block coords of current block
222+  A81F E6 F8            and 248                         ; find closest multiple of eight
223+  A821 0F               rrca
224+  A822 0F               rrca
225+  A823 0F               rrca                ; divide by 8
226+  A824 47               ld b,a
227+  A825 79               ld a,c
228+  A826 48               ld c,b                         ; swap b and c
229+  A827 E6 F8            and 248
230+  A829 0F               rrca
231+  A82A 0F               rrca
232+  A82B 0F               rrca                ; divide by 8
233+  A82C 47               ld b,a
234+  A82D CD EE A7         call screen_getcellattradress   ; work out memory location of current block attributes, memory in de
235+  A830 C9               ret
236+  A831
237+  A831
238+  A831              ; Gets the nearest cell coords for a screen coord
239+  A831              ; Will overwrite bc
240+  A831              ; Inputs:
241+  A831              ; bc - screen coords
242+  A831              ; Outputs:
243+  A831              ; bc - character coords
244+  A831              ;
245+  A831              screen_getcharcoordsfromscreencoords:
246+  A831 78               ld a,b                          ; get the player block coords of current block
247+  A832 E6 F8            and 248                         ; find closest multiple of eight
248+  A834 0F               rrca
249+  A835 0F               rrca
250+  A836 0F               rrca                ; divide by 8
251+  A837 47               ld b,a
252+  A838 79               ld a,c
253+  A839 48               ld c,b                         ; swap b and c
254+  A83A E6 F8            and 248
255+  A83C 0F               rrca
256+  A83D 0F               rrca
257+  A83E 0F               rrca                ; divide by 8
258+  A83F 47               ld b,a
259+  A840 C9               ret
260+  A841
261+  A841              ; Gets the screen coords for a cell coord
262+  A841              ; Will overwrite bc
263+  A841              ; Inputs:
264+  A841              ; bc - char coords
265+  A841              ; Outputs:
266+  A841              ; bc - screen coords
267+  A841              ;
268+  A841              screen_getscreencoordsfromcharcoords:
269+  A841 78               ld a,b                          ; get the player block coords of current block
270+  A842 07               rlca
271+  A843 07               rlca
272+  A844 07               rlca                ; multiply by 8
273+  A845 47               ld b,a
274+  A846 79               ld a,c
275+  A847 48               ld c,b                         ; swap b and c
276+  A848 07               rlca
277+  A849 07               rlca
278+  A84A 07               rlca                ; divide by 8
279+  A84B 47               ld b,a
280+  A84C C9               ret
281+  A84D
282+  A84D              ;
283+  A84D              ; Get buffer address for a character at b,c - b vert
284+  A84D              ; Buffer memory is stored as sequential block
285+  A84D              ; Char at 0,0 is stored 0,32,64...; 0,1 is stored at 1,33,65
286+  A84D              ; Inputs:
287+  A84D              ; bc - coords
288+  A84D              ; Outputs:
289+  A84D              ; de - memory location of first byte
290+  A84D              screen_getbufferaddress:
291+  A84D 21 EE 84         ld hl, buffer_buffer    ; first get screen buffer start
292+  A850 50               ld d,b                  ; then work out vertical offset
293+  A851 1E 00            ld e,0                  ; mult by 256, low byte becomes high byte, de now holds result
294+  A853 19               add hl,de               ; add to base
295+  A854 59               ld e,c                  ; then add horizontal offset (c)
296+  A855 16 00            ld d,0
297+  A857 19               add hl,de               ; add to base
298+  A858 54 5D            ld de,hl
299+  A85A C9               ret
300+  A85B
301+  A85B              ;
302+  A85B              ; Display character hl at (b, c) to buffer.
303+  A85B              ; Stored sequentially
304+  A85B              ; Inputs:
305+  A85B              ; hl: block address
306+  A85B              ; bc: coords
307+  A85B              ;
308+  A85B              screen_showchar:
309+  A85B 3E 00            ld a,0
310+  A85D E5               push hl
311+  A85E CD 4D A8         call screen_getbufferaddress ; get the current screen buffer pointer
312+  A861 E1               pop hl
313+  A862 06 08            ld b,8              ; number of pixels high.
314+  A864              screen_showchar0:
315+  A864 7E               ld a,(hl)           ; source graphic.
316+  A865 12               ld (de),a           ; transfer to screen.
317+  A866 23               inc hl              ; next piece of data.
318+  A867 E5               push hl             ; store hl
319+  A868 62 6B            ld hl,de            ; put de in hl
320+  A86A 1E 20            ld e,32            ; inc memory by 32, so load 32 into de
321+  A86C 16 00            ld d,0
322+  A86E 19               add hl,de              ; add de to hl
323+  A86F 54 5D            ld de,hl            ; load back to de
324+  A871 E1               pop hl              ; restore hl
325+  A872
326+  A872 10 F0            djnz screen_showchar0 ; repeat
327+  A874 C9               ret
328+  A875
329+  A875
330+  A875              ;
331+  A875              ; Get cell graphic.
332+  A875              ; Inputs:
333+  A875              ; a: block
334+  A875              ; Outputs:
335+  A875              ; hl: memory
336+  A875              ;
337+  A875              screen_getblock:
338+  A875 07               rlca                        ; multiply block number by eight.
339+  A876 07               rlca
340+  A877 07               rlca
341+  A878 5F               ld e,a                      ; displacement to graphic address.
342+  A879 16 00            ld d,0                      ; no high byte.
343+  A87B 21 C8 B1         ld hl,sprites               ; address of character blocks.
344+  A87E 19               add hl,de                   ; point to block.
345+  A87F C9               ret
346+  A880
347+  A880              ;
348+  A880              ; Get cell attribute.
349+  A880              ; Inputs:
350+  A880              ; a: block
351+  A880              ; Outputs:
352+  A880              ; hl: memory
353+  A880              ;
354+  A880              screen_getattr:
355+  A880 5F               ld e,a                      ; displacement to attribute address.
356+  A881 16 00            ld d,0                      ; no high byte.
357+  A883 21 40 B2         ld hl,sprite_attrs          ; address of block attributes.
358+  A886 19               add hl,de                   ; point to attribute.
359+  A887 C9               ret
360+  A888
# file closed: screen/screen.asm
 25   A888                  include "screen\sprites.asm"
# file opened: screen/sprites.asm
  1+  A888              ;
  2+  A888              ; This is the sprite routine and expects coordinates in (c ,b) form,
  3+  A888              ; where c is the vertical coord from the top of the screen (0-176), and
  4+  A888              ; b is the horizontal coord from the left of the screen (0 to 240).
  5+  A888              ; Sprite data is stored as you'd expect in its unshifted form as this
  6+  A888              ; routine takes care of all the shifting itself. This means that sprite
  7+  A888              ; handling isn't particularly fast but the graphics only take 1/8th of the
  8+  A888              ; space they would require in pre-shifted form.
  9+  A888              ; Inputs:
 10+  A888              ; hl - sprite data
 11+  A888              ; bc - screen coords
 12+  A888              ;
 13+  A888              sprites_drawsprite7:
 14+  A888 EE 07            xor 7               ; complement last 3 bits.
 15+  A88A 3C               inc a               ; add one for luck!
 16+  A88B              sprites_drawsprite3:
 17+  A88B CB 11            rl c                ; ...into middle byte...
 18+  A88D CB 12            rl d                ; ...and finally into left character cell.
 19+  A88F 3D               dec a               ; count shifts we've done.
 20+  A890 20 F9            jr nz,sprites_drawsprite3 ; return until all shifts complete.
 21+  A892                                      ; Line of sprite image is now in e + c + d, we need it in form c + d + e.
 22+  A892 79               ld a,c              ; left edge of image is currently in e.
 23+  A893 4A               ld c,d              ; put right edge there instead.
 24+  A894 57               ld d,a              ; and the left edge back into c.
 25+  A895 18 25            jr sprites_drawsprite0   ; we've done the switch so transfer to screen.
 26+  A897              sprites_drawsprite:
 27+  A897 ED 43 FC A8      ld (dispx),bc       ; store coords in dispx for now.
 28+  A89B E5               push hl
 29+  A89C CD DA A8         call sprites_scadd  ; calculate screen address.
 30+  A89F E1               pop hl
 31+  A8A0 3E 08            ld a,8              ; height of sprite in pixels.
 32+  A8A2              sprites_drawsprite1:
 33+  A8A2 08               ex af,af'           ; store loop counter.
 34+  A8A3 D5               push de             ; store screen address.
 35+  A8A4 4E               ld c,(hl)           ; first sprite graphic.
 36+  A8A5 23               inc hl              ; increment poiinter to sprite data.
 37+  A8A6 22 FE A8         ld (sprtmp),hl      ; store it for later.
 38+  A8A9 16 00            ld d,0              ; blank right byte for now.
 39+  A8AB 78               ld a,b              ; b holds y position.
 40+  A8AC E6 07            and 7               ; how are we straddling character cells?
 41+  A8AE 28 0C            jr z,sprites_drawsprite0 ; we're not straddling them, don't bother shifting.
 42+  A8B0 FE 05            cp 5                ; 5 or more right shifts needed?
 43+  A8B2 30 D4            jr nc,sprites_drawsprite7 ; yes, shift from left as it's quicker.
 44+  A8B4 A7               and a               ; oops, carry flag is set so clear it.
 45+  A8B5              sprites_drawsprite2:
 46+  A8B5 CB 19            rr c                ; rotate left byte right...
 47+  A8B7 CB 1A            rr d                ; ...into right byte.
 48+  A8B9 3D               dec a               ; one less shift to do.
 49+  A8BA 20 F9            jr nz,sprites_drawsprite2 ; return until all shifts complete.
 50+  A8BC              sprites_drawsprite0:
 51+  A8BC E1               pop hl              ; pop screen address from stack.
 52+  A8BD 7E               ld a,(hl)           ; what's there already.
 53+  A8BE A9               xor c               ; merge in image data.
 54+  A8BF 77               ld (hl),a           ; place onto screen.
 55+  A8C0 23               inc hl
 56+  A8C1 7E               ld a,(hl)           ; what's already there.
 57+  A8C2 AA               xor d               ; right edge of sprite image data.
 58+  A8C3 77               ld (hl),a           ; plonk it on screen.
 59+  A8C4 3A FC A8         ld a,(dispx)        ; vertical coordinate.
 60+  A8C7 3C               inc a               ; next line down.
 61+  A8C8 32 FC A8         ld (dispx),a        ; store new position.
 62+  A8CB 2B               dec hl
 63+  A8CC 11 20 00         ld de,32            ; add 32 to get to the next row
 64+  A8CF 19               add hl,de           ; add 32
 65+  A8D0              sprites_drawsprite6:
 66+  A8D0 EB               ex de,hl            ; screen address in de.
 67+  A8D1 2A FE A8         ld hl,(sprtmp)      ; restore graphic address.
 68+  A8D4 08               ex af,af'           ; restore loop counter.
 69+  A8D5 3D               dec a               ; decrement it.
 70+  A8D6 C2 A2 A8         jp nz,sprites_drawsprite1 ; not reached bottom of sprite yet to repeat.
 71+  A8D9 C9               ret                 ; job done.
 72+  A8DA
 73+  A8DA              ;
 74+  A8DA              ; This routine returns a buffer address for (c, b) in de (c vert).
 75+  A8DA              ; For example: 0,0 will be at memory offset 0
 76+  A8DA              ; 1,0 (1 down) will be at memory offset 1
 77+  A8DA              ; 0,7 will be at memory offset 0
 78+  A8DA              ; 9,1 will be at memory offset 8+1
 79+  A8DA              ; 8,0 will be at memory offset 256
 80+  A8DA              ; 9,0 will be at memory offset 257
 81+  A8DA              ; Outputs:
 82+  A8DA              ; de - coords
 83+  A8DA              ;
 84+  A8DA              sprites_scadd:
 85+  A8DA 79               ld a,c               ; calculate vertical offset
 86+  A8DB E6 F8            and 248             ;  to get nearest multiple of 8
 87+  A8DD 0F               rrca
 88+  A8DE 0F               rrca
 89+  A8DF 0F               rrca                ; divide by 8
 90+  A8E0 67               ld h,a
 91+  A8E1 78               ld a,b               ; calculate horizontal offset
 92+  A8E2 E6 F8            and 248             ;  to get nearest multiple of 8
 93+  A8E4 0F               rrca
 94+  A8E5 0F               rrca
 95+  A8E6 0F               rrca                ; divide by 8
 96+  A8E7 6F               ld l,a
 97+  A8E8 C5               push bc             ; store the screen coords
 98+  A8E9 44 4D            ld bc,hl            ; load bc with the character coords
 99+  A8EB CD 4D A8         call screen_getbufferaddress
100+  A8EE C1               pop bc              ; get back screen coords, de is now memory of character
101+  A8EF 79               ld a,c              ; now add the vertical within the cell
102+  A8F0 E6 07            and 7
103+  A8F2 0F               rrca                ; multiply by 32.
104+  A8F3 0F               rrca
105+  A8F4 0F               rrca
106+  A8F5 6F               ld l,a
107+  A8F6 26 00            ld h,0
108+  A8F8 19               add hl,de
109+  A8F9 54 5D            ld de,hl
110+  A8FB C9               ret
111+  A8FC
112+  A8FC 00           dispx   defb 0           ; general-use coordinates.
113+  A8FD 00           dispy   defb 0
114+  A8FE 00 00        sprtmp  defb 0,0           ; sprite temporary address.
115+  A900
# file closed: screen/sprites.asm
 26   A900                  include "screen\titlescreen.asm"
# file opened: screen/titlescreen.asm
  1+  A900              ;
  2+  A900              ; Draws the title screen
  3+  A900              ;
  4+  A900              titlescreen_show:
  5+  A900 CD 78 A9         call titlescreen_init
  6+  A903 CD 21 A9         call titlescreen_drawtitle
  7+  A906 3E FA            ld a,250                              ; wait for 200 frames
  8+  A908 CD 52 80         call utilities_waitforkey_forframes   ; wait for keypress
  9+  A90B 7B               ld a,e
 10+  A90C FE 01            cp 1                                  ; was anything pressed?
 11+  A90E C8               ret z                                 ; end titlescreen if so
 12+  A90F
 13+  A90F CD 8B A9         call titlescreen_alt_init             ; otherwise, draw alt screen
 14+  A912 CD 3D A9         call titlescreen_alt_drawtitle
 15+  A915 3E FA            ld a,250                              ; wait for 200 frames
 16+  A917 CD 52 80         call utilities_waitforkey_forframes   ; wait for keypress
 17+  A91A 7B               ld a,e
 18+  A91B FE 01            cp 1                                  ; was anything pressed?
 19+  A91D C2 00 A9         jp nz,titlescreen_show                ; start again if not
 20+  A920 C9               ret
 21+  A921
 22+  A921              ;
 23+  A921              ; Draws the iconic logo
 24+  A921              ;
 25+  A921              titlescreen_drawtitle:
 26+  A921 06 66            ld b,102              ; number of points
 27+  A923 DD 21 98 A9      ld ix,titlescreen_logo_data
 28+  A927              titlescreen_drawtitle0:
 29+  A927 C5               push bc
 30+  A928 DD 4E 00         ld c,(ix)                   ; got horiz
 31+  A92B DD 23            inc ix
 32+  A92D DD 46 00         ld b,(ix)                   ; got vert
 33+  A930 DD 23            inc ix
 34+  A932 CD 06 A8         call screen_getscreenattradress ; memory in de
 35+  A935 13               inc de                      ; slide one to the right, since I'm too lazy to change the data
 36+  A936 3E 13            ld a,19
 37+  A938 12               ld (de),a
 38+  A939 C1               pop bc
 39+  A93A 10 EB            djnz titlescreen_drawtitle0 ; loop if we're not at the end
 40+  A93C C9               ret
 41+  A93D
 42+  A93D              ;
 43+  A93D              ; Draws the alternate title screen
 44+  A93D              ;
 45+  A93D              titlescreen_alt_drawtitle:
 46+  A93D 21 25 81         ld hl,string_alttitlescreen_1
 47+  A940 CD A6 84         call string_print
 48+  A943 21 31 81         ld hl,string_alttitlescreen_2
 49+  A946 CD A6 84         call string_print
 50+  A949 21 2C 82         ld hl,string_alttitlescreen_3
 51+  A94C CD A6 84         call string_print
 52+  A94F 06 20            ld b,32
 53+  A951 3E 43            ld a,67
 54+  A953 11 00 58         ld de,22528                         ; top row attrs here
 55+  A956 CD A8 A7         call screen_setcolours
 56+  A959 06 20            ld b,32
 57+  A95B 3E 46            ld a,70
 58+  A95D 11 A0 59         ld de,22528+416                     ; 13th row attrs here
 59+  A960 CD A8 A7         call screen_setcolours
 60+  A963 06 20            ld b,32
 61+  A965 3E 43            ld a,67
 62+  A967 11 20 5A         ld de,22528+544                         ; 17th row attrs here
 63+  A96A CD A8 A7         call screen_setcolours
 64+  A96D 06 20            ld b,32
 65+  A96F 3E 42            ld a,66
 66+  A971 11 A0 5A         ld de,22528+672                         ; 21st row attrs here
 67+  A974 CD A8 A7         call screen_setcolours
 68+  A977 C9               ret
 69+  A978
 70+  A978              ;
 71+  A978              ; Initialises the screen
 72+  A978              ;
 73+  A978              titlescreen_init:
 74+  A978              ; We want a black screen.
 75+  A978 3E 0B            ld a,11             ; magenta ink (7) on blue paper (0),
 76+  A97A                                      ; bright (64).
 77+  A97A CD 67 80         call utilities_clearscreen
 78+  A97D 32 8D 5C         ld (23693),a        ; set our screen colours.
 79+  A980 3E 01            ld a,1              ; 2 is the code for red.
 80+  A982 D3 FE            out (254),a         ; write to port 254.
 81+  A984
 82+  A984 21 0B 81         ld hl,string_titlescreen_copyright
 83+  A987 CD A6 84         call string_print
 84+  A98A
 85+  A98A C9               ret
 86+  A98B
 87+  A98B              ;
 88+  A98B              ; Initialises the screen
 89+  A98B              ;
 90+  A98B              titlescreen_alt_init:
 91+  A98B              ; We want a black screen.
 92+  A98B 3E 47            ld a,71             ; white ink (7) on black paper (0),
 93+  A98D                                      ; bright (64).
 94+  A98D CD 67 80         call utilities_clearscreen
 95+  A990 32 8D 5C         ld (23693),a        ; set our screen colours.
 96+  A993 3E 00            ld a,0              ; 2 is the code for red.
 97+  A995 D3 FE            out (254),a         ; write to port 254.
 98+  A997
 99+  A997 C9               ret
100+  A998
101+  A998              ;
102+  A998              ; Horiz, vert
103+  A998              ;
104+  A998              titlescreen_logo_data:
105+  A998 08 00 09 00      defb 8,0,9,0,10,0,12,0,15,0,17,0,18,0,19,0
105+  A99C 0A 00 0C 00
105+  A9A0 0F 00 11 00
105+  A9A4 12 00 13 00
106+  A9A8 09 01 0C 01      defb 9,1,12,1,15,1,17,1
106+  A9AC 0F 01 11 01
107+  A9B0 09 02 0C 02      defb 9,2,12,2,13,2,14,2,15,2,17,2,18,2,19,2
107+  A9B4 0D 02 0E 02
107+  A9B8 0F 02 11 02
107+  A9BC 12 02 13 02
108+  A9C0 09 03 0C 03      defb 9,3,12,3,15,3,17,3
108+  A9C4 0F 03 11 03
109+  A9C8 09 04 0C 04      defb 9,4,12,4,15,4,17,4,18,4,19,4
109+  A9CC 0F 04 11 04
109+  A9D0 12 04 13 04
110+  A9D4 00 06 01 06      defb 0,6,1,6,2,6,3,6,4,6,5,6,6,6,7,6,8,6,9,6,10,6,11,6
110+  A9D8 02 06 03 06
110+  A9DC 04 06 05 06
110+  A9E0 06 06 07 06
110+  A9E4 08 06 09 06
110+  A9E8 0A 06 0B 06
111+  A9EC 10 06 11 06      defb 16,6,17,6,18,6,19,6,20,6,21,6,22,6,23,6,24,6,25,6,26,6,27,6
111+  A9F0 12 06 13 06
111+  A9F4 14 06 15 06
111+  A9F8 16 06 17 06
111+  A9FC 18 06 19 06
111+  AA00 1A 06 1B 06
112+  AA04 02 07 02 08      defb 2,7,2,8,2,9,2,10,2,11,2,12,2,13,2,14,2,15,2,16,2,17,2,18,2,19,2,20
112+  AA08 02 09 02 0A
112+  AA0C 02 0B 02 0C
112+  AA10 02 0D 02 0E
112+  AA14 02 0F 02 10
112+  AA18 02 11 02 12
112+  AA1C 02 13 02 14
113+  AA20 19 07 19 08      defb 25,7,25,8,25,9,25,10,25,11,25,12,25,13,25,14,25,15,25,16,25,17,25,18,25,19,25,20
113+  AA24 19 09 19 0A
113+  AA28 19 0B 19 0C
113+  AA2C 19 0D 19 0E
113+  AA30 19 0F 19 10
113+  AA34 19 11 19 12
113+  AA38 19 13 19 14
114+  AA3C 03 0B 04 0B      defb 3,11,4,11,5,11,6,11,7,11,8,11,9,11,10,11,11,11
114+  AA40 05 0B 06 0B
114+  AA44 07 0B 08 0B
114+  AA48 09 0B 0A 0B
114+  AA4C 0B 0B
115+  AA4E 0B 07 0B 08      defb 11,7,11,8,11,9,11,10
115+  AA52 0B 09 0B 0A
116+  AA56 10 0D 10 0F      defb 16,13,16,15,16,16,16,17,16,18,16,19,16,20
116+  AA5A 10 10 10 11
116+  AA5E 10 12 10 13
116+  AA62 10 14
117+  AA64
# file closed: screen/titlescreen.asm
 27   AA64                  include "screen\lifescreen.asm"
# file opened: screen/lifescreen.asm
  1+  AA64              ;
  2+  AA64              ; Draws the life remaining screen
  3+  AA64              ;
  4+  AA64              lifescreen_draw:
  5+  AA64 CD AA AA         call lifescreen_init
  6+  AA67
  7+  AA67 3A AC B7         ld a,(game_currentplayer)             ; get the current player
  8+  AA6A C6 30            add 48                                ; add 48 to get char
  9+  AA6C 21 32 83         ld hl,string_lifescreen_player+10
 10+  AA6F 77               ld (hl),a                             ; load this to the string we're about to show
 11+  AA70
 12+  AA70 21 28 83         ld hl,string_lifescreen_player
 13+  AA73 CD A6 84         call string_print
 14+  AA76
 15+  AA76 3A E3 B7         ld a,(player+9)                       ; get the current player lives
 16+  AA79 C6 30            add 48                                ; add 48 to get the character
 17+  AA7B FE 31            cp 49
 18+  AA7D C2 90 AA         jp nz,lifescreen_draw0
 19+  AA80 21 42 83         ld hl,string_lifescreen_lastman
 20+  AA83
 21+  AA83 06 08            ld b,8
 22+  AA85 3E 0A            ld a,10                                ; set red
 23+  AA87 11 6C 58         ld de,22528+108                        ; attrs here
 24+  AA8A CD A8 A7         call screen_setcolours
 25+  AA8D
 26+  AA8D C3 97 AA         jp lifescreen_draw1
 27+  AA90              lifescreen_draw0:
 28+  AA90 21 37 83         ld hl,string_lifescreen_lives+2       ; not last man, so use the normal view
 29+  AA93 77               ld (hl),a                             ; load this to the string we're about to show
 30+  AA94 21 35 83         ld hl,string_lifescreen_lives
 31+  AA97              lifescreen_draw1:
 32+  AA97 CD A6 84         call string_print
 33+  AA9A
 34+  AA9A 3E 86            ld a,134
 35+  AA9C 11 0B 58         ld de, 22528+11     ; get the colour for the top text
 36+  AA9F 06 0A            ld b,10
 37+  AAA1 CD A8 A7         call screen_setcolours
 38+  AAA4
 39+  AAA4 3E 64            ld a,100                              ; wait for 200 frames
 40+  AAA6 CD 52 80         call utilities_waitforkey_forframes   ; wait for keypress
 41+  AAA9
 42+  AAA9 C9               ret
 43+  AAAA
 44+  AAAA              ;
 45+  AAAA              ; Initialises the screen
 46+  AAAA              ;
 47+  AAAA              lifescreen_init:
 48+  AAAA              ; We want a blue screen.
 49+  AAAA                  ;call $0D6B
 50+  AAAA 3E 0E            ld a,14             ; yellow ink (6) on blue paper (1),
 51+  AAAC                                      ; bright (64).
 52+  AAAC CD 67 80         call utilities_clearscreen
 53+  AAAF 32 8D 5C         ld (23693),a        ; set our screen colours.
 54+  AAB2 3E 01            ld a,1              ; 1 is the code for blue.
 55+  AAB4 D3 FE            out (254),a         ; write to port 254.
 56+  AAB6                  ;call 3503           ; ROM routine - clears screen, opens chan 2.
 57+  AAB6
 58+  AAB6 C9               ret
# file closed: screen/lifescreen.asm
 28   AAB7                  include "screen\gameover.asm"
# file opened: screen/gameover.asm
  1+  AAB7              ;
  2+  AAB7              ; Draws the game over screen
  3+  AAB7              ;
  4+  AAB7              gameover_draw:
  5+  AAB7 CD 11 BD         call scores_processhighscores
  6+  AABA
  7+  AABA              gameover_draw0:
  8+  AABA CD FA AA         call gameover_enterhighscores
  9+  AABD
 10+  AABD CD 98 AB         call gameover_init
 11+  AAC0
 12+  AAC0 21 4D 83         ld hl,string_gameoverscreen_gameover
 13+  AAC3 CD A6 84         call string_print
 14+  AAC6
 15+  AAC6 21 59 83         ld hl,string_gameoverscreen_copyright
 16+  AAC9 CD A6 84         call string_print
 17+  AACC
 18+  AACC CD DD AA         call gameover_commontext
 19+  AACF
 20+  AACF 06 0B            ld b,11
 21+  AAD1 3E 42            ld a,66
 22+  AAD3 11 2B 58         ld de,22528+43                         ; attrs here
 23+  AAD6 CD A8 A7         call screen_setcolours
 24+  AAD9 CD 47 80         call utilities_waitforkey   ; wait for keypress
 25+  AADC
 26+  AADC C9               ret
 27+  AADD
 28+  AADD              ;
 29+  AADD              ; Draws text shared by the game over and high score screens
 30+  AADD              ;
 31+  AADD              gameover_commontext:
 32+  AADD CD 7A A7         call screen_setuptext       ; show scores
 33+  AAE0 CD DB BC         call scores_printscores     ; print the current scores
 34+  AAE3
 35+  AAE3 21 87 83         ld hl,string_gameover_credits
 36+  AAE6 CD A6 84         call string_print
 37+  AAE9
 38+  AAE9 21 73 83         ld hl,string_gameoverscreen_bestscores
 39+  AAEC CD A6 84         call string_print
 40+  AAEF
 41+  AAEF 06 20            ld b,32
 42+  AAF1 3E 45            ld a,69
 43+  AAF3 11 C0 5A         ld de,22528+704                         ; attrs here
 44+  AAF6 CD A8 A7         call screen_setcolours
 45+  AAF9
 46+  AAF9 C9               ret
 47+  AAFA
 48+  AAFA              ;
 49+  AAFA              ; If required, enter highscore
 50+  AAFA              ;
 51+  AAFA              gameover_enterhighscores:
 52+  AAFA                  ; check if we need to enter initial
 53+  AAFA 3A 10 BD         ld a,(scores_highscoretmp)
 54+  AAFD FE 00            cp 0
 55+  AAFF C8               ret z
 56+  AB00 CD 2E AB         call gameover_enterhighscores_init
 57+  AB03 3A 10 BD         ld a,(scores_highscoretmp)
 58+  AB06 3D               dec a
 59+  AB07 3D               dec a
 60+  AB08 3D               dec a                                   ; get high score location back to position of name
 61+  AB09 16 00            ld d,0
 62+  AB0B 5F               ld e,a
 63+  AB0C 21 97 BC         ld hl,scores_table
 64+  AB0F 19               add hl,de                               ; load memory into hl
 65+  AB10 08               ex af,af'
 66+  AB11 06 0F            ld b,15
 67+  AB13 CD 82 80         call utilities_pauseforframes           ; pause for a little bit
 68+  AB16 06 03            ld b,3                                  ; collect three chars
 69+  AB18              gameover_draw2:
 70+  AB18 C5               push bc
 71+  AB19 E5               push hl
 72+  AB1A CD 86 80         call utilities_readkey               ; get key into a
 73+  AB1D E1               pop hl
 74+  AB1E 77               ld (hl),a
 75+  AB1F 23               inc hl
 76+  AB20 E5               push hl
 77+  AB21 CD FD BC         call scores_showtable
 78+  AB24 E1               pop hl
 79+  AB25 06 0F            ld b,15
 80+  AB27 CD 82 80         call utilities_pauseforframes
 81+  AB2A C1               pop bc
 82+  AB2B 10 EB            djnz gameover_draw2
 83+  AB2D C9               ret
 84+  AB2E
 85+  AB2E              ;
 86+  AB2E              ; Displays the screen text for high score entry
 87+  AB2E              ;
 88+  AB2E              gameover_enterhighscores_init:
 89+  AB2E
 90+  AB2E CD 98 AB         call gameover_init
 91+  AB31 CD DD AA         call gameover_commontext
 92+  AB34
 93+  AB34 21 93 83         ld hl,string_highscore_congratulations
 94+  AB37 CD A6 84         call string_print
 95+  AB3A
 96+  AB3A 3A AC B7         ld a,(game_currentplayer)
 97+  AB3D FE 01            cp 1
 98+  AB3F 21 A5 83         ld hl,string_highscore_player1
 99+  AB42 C3 48 AB         jp gameover_enterhighscores_init1
100+  AB45              gameover_enterhighscores_init0:
101+  AB45 21 B0 83         ld hl,string_highscore_player2
102+  AB48              gameover_enterhighscores_init1:
103+  AB48 CD A6 84         call string_print
104+  AB4B 06 60            ld b,96
105+  AB4D 3E 43            ld a,67
106+  AB4F 11 A0 58         ld de,22528+160                         ; attrs here
107+  AB52 CD A8 A7         call screen_setcolours
108+  AB55
109+  AB55 21 BB 83         ld hl,string_highscore_youhaveearned
110+  AB58 CD A6 84         call string_print
111+  AB5B
112+  AB5B 3A 10 BD         ld a,(scores_highscoretmp)
113+  AB5E FE 05            cp 5
114+  AB60 CA 6E AB         jp z, gameover_enterhighscores_init2    ; first place
115+  AB63 FE 11            cp 17
116+  AB65 CA 74 AB         jp z, gameover_enterhighscores_init3    ; 2nd place
117+  AB68 21 F7 83         ld hl,string_highscore_place3           ; 3rd place
118+  AB6B C3 7A AB         jp gameover_enterhighscores_init4
119+  AB6E              gameover_enterhighscores_init2
120+  AB6E 21 CD 83         ld hl,string_highscore_place1
121+  AB71 C3 7A AB         jp gameover_enterhighscores_init4
122+  AB74              gameover_enterhighscores_init3
123+  AB74 21 E2 83         ld hl,string_highscore_place2
124+  AB77 C3 7A AB         jp gameover_enterhighscores_init4
125+  AB7A              gameover_enterhighscores_init4
126+  AB7A CD A6 84         call string_print
127+  AB7D
128+  AB7D 06 60            ld b,96
129+  AB7F 3E 42            ld a,66
130+  AB81 11 40 59         ld de,22528+320                         ; attrs here
131+  AB84 CD A8 A7         call screen_setcolours
132+  AB87
133+  AB87 21 0C 84         ld hl,string_highscore_pleaseenter
134+  AB8A CD A6 84         call string_print
135+  AB8D
136+  AB8D 06 60            ld b,96
137+  AB8F 3E 46            ld a,70
138+  AB91 11 E0 59         ld de,22528+480                         ; attrs here
139+  AB94 CD A8 A7         call screen_setcolours
140+  AB97 C9               ret
141+  AB98
142+  AB98              ;
143+  AB98              ; Initialises the screen
144+  AB98              ;
145+  AB98              gameover_init:
146+  AB98              ; We want a black screen.
147+  AB98 3E 47            ld a,71             ; white ink (7) on black paper (0),
148+  AB9A                                      ; bright (64).
149+  AB9A CD 67 80         call utilities_clearscreen
150+  AB9D 32 8D 5C         ld (23693),a        ; set our screen colours.
151+  ABA0 3E 00            ld a,0              ; 2 is the code for red.
152+  ABA2 D3 FE            out (254),a         ; write to port 254.
153+  ABA4 C9               ret
# file closed: screen/gameover.asm
 29   ABA5                  include "screen\endlevel.asm"
# file opened: screen/endlevel.asm
  1+  ABA5              ;
  2+  ABA5              ; Draws the level transition screen
  3+  ABA5              ;
  4+  ABA5              endlevel_draw:
  5+  ABA5 CD 1D AC         call endlevel_init
  6+  ABA8 CD 06 AC         call endlevel_commontext
  7+  ABAB
  8+  ABAB 21 93 83         ld hl,string_highscore_congratulations
  9+  ABAE CD A6 84         call string_print
 10+  ABB1
 11+  ABB1 3A AC B7         ld a,(game_currentplayer)
 12+  ABB4 FE 01            cp 1
 13+  ABB6 21 A5 83         ld hl,string_highscore_player1
 14+  ABB9 C3 BF AB         jp endlevel_init1
 15+  ABBC              endlevel_init0:
 16+  ABBC 21 B0 83         ld hl,string_highscore_player2
 17+  ABBF              endlevel_init1:
 18+  ABBF CD A6 84         call string_print
 19+  ABC2
 20+  ABC2 21 29 84         ld hl,string_endlevel_youhaveearned
 21+  ABC5 CD A6 84         call string_print
 22+  ABC8 21 3B 84         ld hl, string_endlevel_bonus1
 23+  ABCB CD A6 84         call string_print
 24+  ABCE 21 68 84         ld hl, string_endlevel_points1
 25+  ABD1 CD A6 84         call string_print
 26+  ABD4 21 94 84         ld hl, string_endlevel_anothergo
 27+  ABD7 CD A6 84         call string_print
 28+  ABDA
 29+  ABDA 06 20            ld b,32
 30+  ABDC 3E 63            ld a,99
 31+  ABDE 11 60 59         ld de,22528+352                         ; attrs here
 32+  ABE1 CD A8 A7         call screen_setcolours
 33+  ABE4
 34+  ABE4 06 20            ld b,32
 35+  ABE6 3E 65            ld a,101
 36+  ABE8 11 A0 59         ld de,22528+416                         ; attrs here
 37+  ABEB CD A8 A7         call screen_setcolours
 38+  ABEE
 39+  ABEE 06 20            ld b,32
 40+  ABF0 3E 63            ld a,99
 41+  ABF2 11 E0 59         ld de,22528+480                         ; attrs here
 42+  ABF5 CD A8 A7         call screen_setcolours
 43+  ABF8
 44+  ABF8 06 20            ld b,32
 45+  ABFA 3E 62            ld a,98
 46+  ABFC 11 40 5A         ld de,22528+576                         ; attrs here
 47+  ABFF CD A8 A7         call screen_setcolours
 48+  AC02
 49+  AC02 CD 47 80         call utilities_waitforkey   ; wait for keypress
 50+  AC05
 51+  AC05 C9               ret
 52+  AC06
 53+  AC06              ;
 54+  AC06              ; Draws text shared by the game over and high score screens
 55+  AC06              ;
 56+  AC06              endlevel_commontext:
 57+  AC06 CD 7A A7         call screen_setuptext       ; show scores
 58+  AC09 CD DB BC         call scores_printscores     ; print the current scores
 59+  AC0C
 60+  AC0C 21 73 83         ld hl,string_gameoverscreen_bestscores
 61+  AC0F CD A6 84         call string_print
 62+  AC12
 63+  AC12 06 20            ld b,32
 64+  AC14 3E 45            ld a,69
 65+  AC16 11 C0 5A         ld de,22528+704                         ; attrs here
 66+  AC19 CD A8 A7         call screen_setcolours
 67+  AC1C
 68+  AC1C C9               ret
 69+  AC1D
 70+  AC1D              ;
 71+  AC1D              ; Initialises the screen
 72+  AC1D              ;
 73+  AC1D              endlevel_init:
 74+  AC1D              ; We want a green screen.
 75+  AC1D 3E 61            ld a,97             ; white ink (7) on black paper (0),
 76+  AC1F                                      ; bright (64).
 77+  AC1F CD 67 80         call utilities_clearscreen
 78+  AC22 32 8D 5C         ld (23693),a        ; set our screen colours.
 79+  AC25 3E 00            ld a,0              ; 2 is the code for red.
 80+  AC27 D3 FE            out (254),a         ; write to port 254.
 81+  AC29 C9               ret
# file closed: screen/endlevel.asm
 30   AC2A
 31   AC2A                  include "leveldata\level01.asm"
# file opened: leveldata/level01.asm
  1+  AC2A              ; ###############################################################
  2+  AC2A              ; Data for level 1
  3+  AC2A              ; ###############################################################
  4+  AC2A              level01:
  5+  AC2A
  6+  AC2A                  ;defb 09,04,04,04,04,04,04,04,04,04,04,04,04,04,04,09,09,04,04,04,04,04,04,04,04,04,04,04,04,04,04,09
  7+  AC2A
  8+  AC2A 00 00 05 05      defb 00,00,05,05,05,05,05,05,05,05,05,05,05,05,02,01,01,01,03,05,05,05,05,05,05,05,05,05,05,05,00,00
  8+  AC2E 05 05 05 05
  8+  AC32 05 05 05 05
  8+  AC36 05 05 02 01
  8+  AC3A 01 01 03 05
  8+  AC3E 05 05 05 05
  8+  AC42 05 05 05 05
  8+  AC46 05 05 00 00
  9+  AC4A 00 00 05 05      defb 00,00,05,05,05,05,05,05,05,05,05,05,02,01,01,01,01,01,01,01,03,05,05,05,05,05,05,05,05,05,00,00
  9+  AC4E 05 05 05 05
  9+  AC52 05 05 05 05
  9+  AC56 02 01 01 01
  9+  AC5A 01 01 01 01
  9+  AC5E 03 05 05 05
  9+  AC62 05 05 05 05
  9+  AC66 05 05 00 00
 10+  AC6A 00 00 05 05      defb 00,00,05,05,05,05,05,05,05,05,02,01,01,01,01,01,01,01,01,01,01,01,03,05,13,13,13,13,13,13,00,00
 10+  AC6E 05 05 05 05
 10+  AC72 05 05 02 01
 10+  AC76 01 01 01 01
 10+  AC7A 01 01 01 01
 10+  AC7E 01 01 03 05
 10+  AC82 0D 0D 0D 0D
 10+  AC86 0D 0D 00 00
 11+  AC8A 00 00 01 01      defb 00,00,01,01,01,01,00,01,01,01,01,01,01,01,01,01,01,01,01,01,01,01,01,03,05,05,05,05,05,05,00,00
 11+  AC8E 01 01 00 01
 11+  AC92 01 01 01 01
 11+  AC96 01 01 01 01
 11+  AC9A 01 01 01 01
 11+  AC9E 01 01 01 03
 11+  ACA2 05 05 05 05
 11+  ACA6 05 05 00 00
 12+  ACAA 00 00 01 01      defb 00,00,01,01,04,04,04,04,04,04,01,01,01,01,01,01,01,01,01,01,01,01,01,01,01,01,01,01,00,01,00,00
 12+  ACAE 04 04 04 04
 12+  ACB2 04 04 01 01
 12+  ACB6 01 01 01 01
 12+  ACBA 01 01 01 01
 12+  ACBE 01 01 01 01
 12+  ACC2 01 01 01 01
 12+  ACC6 00 01 00 00
 13+  ACCA 00 00 01 04      defb 00,00,01,04,04,04,04,04,04,04,04,04,01,01,01,01,01,01,01,01,01,01,01,01,00,00,00,00,00,01,00,00
 13+  ACCE 04 04 04 04
 13+  ACD2 04 04 04 04
 13+  ACD6 01 01 01 01
 13+  ACDA 01 01 01 01
 13+  ACDE 01 01 01 01
 13+  ACE2 00 00 00 00
 13+  ACE6 00 01 00 00
 14+  ACEA 00 00 01 04      defb 00,00,01,04,04,01,01,01,01,01,04,04,04,04,01,01,01,01,01,01,01,00,00,00,00,01,01,01,01,01,00,00
 14+  ACEE 04 01 01 01
 14+  ACF2 01 01 04 04
 14+  ACF6 04 04 01 01
 14+  ACFA 01 01 01 01
 14+  ACFE 01 00 00 00
 14+  AD02 00 01 01 01
 14+  AD06 01 01 00 00
 15+  AD0A 00 00 01 04      defb 00,00,01,04,04,04,04,04,04,01,04,04,04,04,04,04,04,04,00,00,00,00,04,04,04,04,04,04,04,01,00,00
 15+  AD0E 04 04 04 04
 15+  AD12 04 01 04 04
 15+  AD16 04 04 04 04
 15+  AD1A 04 04 00 00
 15+  AD1E 00 00 04 04
 15+  AD22 04 04 04 04
 15+  AD26 04 01 00 00
 16+  AD2A 00 00 01 01      defb 00,00,01,01,01,04,01,01,01,01,04,04,04,04,04,04,04,04,00,04,04,04,04,04,04,04,04,04,04,01,00,00
 16+  AD2E 01 04 01 01
 16+  AD32 01 01 04 04
 16+  AD36 04 04 04 04
 16+  AD3A 04 04 00 04
 16+  AD3E 04 04 04 04
 16+  AD42 04 04 04 04
 16+  AD46 04 01 00 00
 17+  AD4A 00 00 01 00      defb 00,00,01,00,00,00,00,00,00,04,04,04,04,04,04,04,04,04,00,04,04,04,04,04,04,04,04,04,04,01,00,00
 17+  AD4E 00 00 00 00
 17+  AD52 00 04 04 04
 17+  AD56 04 04 04 04
 17+  AD5A 04 04 00 04
 17+  AD5E 04 04 04 04
 17+  AD62 04 04 04 04
 17+  AD66 04 01 00 00
 18+  AD6A 00 00 01 07      defb 00,00,01,07,07,07,07,07,07,01,04,04,04,04,04,04,04,04,00,04,04,04,04,04,04,04,04,04,04,01,00,00
 18+  AD6E 07 07 07 07
 18+  AD72 07 01 04 04
 18+  AD76 04 04 04 04
 18+  AD7A 04 04 00 04
 18+  AD7E 04 04 04 04
 18+  AD82 04 04 04 04
 18+  AD86 04 01 00 00
 19+  AD8A 00 00 01 00      defb 00,00,01,00,00,00,00,00,00,01,04,04,04,04,04,04,04,04,00,04,04,04,04,04,04,00,00,00,00,01,00,00
 19+  AD8E 00 00 00 00
 19+  AD92 00 01 04 04
 19+  AD96 04 04 04 04
 19+  AD9A 04 04 00 04
 19+  AD9E 04 04 04 04
 19+  ADA2 04 00 00 00
 19+  ADA6 00 01 00 00
 20+  ADAA 00 00 01 00      defb 00,00,01,00,00,00,00,00,00,01,04,04,04,04,04,04,04,04,00,04,04,04,04,04,04,00,04,04,00,01,00,00
 20+  ADAE 00 00 00 00
 20+  ADB2 00 01 04 04
 20+  ADB6 04 04 04 04
 20+  ADBA 04 04 00 04
 20+  ADBE 04 04 04 04
 20+  ADC2 04 00 04 04
 20+  ADC6 00 01 00 00
 21+  ADCA 00 00 01 06      defb 00,00,01,06,06,06,06,06,06,01,04,04,04,04,04,04,04,04,00,04,04,04,04,04,04,00,04,04,00,01,00,00
 21+  ADCE 06 06 06 06
 21+  ADD2 06 01 04 04
 21+  ADD6 04 04 04 04
 21+  ADDA 04 04 00 04
 21+  ADDE 04 04 04 04
 21+  ADE2 04 00 04 04
 21+  ADE6 00 01 00 00
 22+  ADEA 00 00 01 06      defb 00,00,01,06,06,06,06,06,06,01,04,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,04,04,00,01,00,00
 22+  ADEE 06 06 06 06
 22+  ADF2 06 01 04 00
 22+  ADF6 00 00 00 00
 22+  ADFA 00 00 00 00
 22+  ADFE 00 00 00 00
 22+  AE02 00 00 04 04
 22+  AE06 00 01 00 00
 23+  AE0A 00 00 01 06      defb 00,00,01,06,06,06,06,06,06,01,04,00,04,04,04,04,04,04,00,04,04,04,00,04,04,04,04,04,00,01,00,00
 23+  AE0E 06 06 06 06
 23+  AE12 06 01 04 00
 23+  AE16 04 04 04 04
 23+  AE1A 04 04 00 04
 23+  AE1E 04 04 00 04
 23+  AE22 04 04 04 04
 23+  AE26 00 01 00 00
 24+  AE2A 00 00 01 06      defb 00,00,01,06,06,06,06,06,06,01,04,00,04,04,04,04,04,04,00,04,04,04,00,04,04,04,04,04,00,01,00,00
 24+  AE2E 06 06 06 06
 24+  AE32 06 01 04 00
 24+  AE36 04 04 04 04
 24+  AE3A 04 04 00 04
 24+  AE3E 04 04 00 04
 24+  AE42 04 04 04 04
 24+  AE46 00 01 00 00
 25+  AE4A 00 00 01 01      defb 00,00,01,01,01,01,01,01,01,01,04,00,04,04,04,04,04,04,00,04,04,04,00,04,04,04,04,04,00,01,00,00
 25+  AE4E 01 01 01 01
 25+  AE52 01 01 04 00
 25+  AE56 04 04 04 04
 25+  AE5A 04 04 00 04
 25+  AE5E 04 04 00 04
 25+  AE62 04 04 04 04
 25+  AE66 00 01 00 00
 26+  AE6A 00 00 01 04      defb 00,00,01,04,04,04,04,04,04,04,04,00,04,04,04,04,04,04,00,04,04,04,00,00,00,00,04,04,04,01,00,00
 26+  AE6E 04 04 04 04
 26+  AE72 04 04 04 00
 26+  AE76 04 04 04 04
 26+  AE7A 04 04 00 04
 26+  AE7E 04 04 00 00
 26+  AE82 00 00 04 04
 26+  AE86 04 01 00 00
 27+  AE8A 00 00 01 04      defb 00,00,01,04,04,04,00,00,00,00,00,00,04,04,04,04,04,04,00,04,04,04,04,04,04,00,04,04,04,01,00,00
 27+  AE8E 04 04 00 00
 27+  AE92 00 00 00 00
 27+  AE96 04 04 04 04
 27+  AE9A 04 04 00 04
 27+  AE9E 04 04 04 04
 27+  AEA2 04 00 04 04
 27+  AEA6 04 01 00 00
 28+  AEAA 00 00 01 04      defb 00,00,01,04,04,04,00,04,04,04,04,04,04,04,04,04,04,04,00,04,04,04,04,04,04,00,04,04,04,01,00,00
 28+  AEAE 04 04 00 04
 28+  AEB2 04 04 04 04
 28+  AEB6 04 04 04 04
 28+  AEBA 04 04 00 04
 28+  AEBE 04 04 04 04
 28+  AEC2 04 00 04 04
 28+  AEC6 04 01 00 00
 29+  AECA 00 00 01 04      defb 00,00,01,04,04,04,00,04,04,04,01,01,01,01,01,01,01,01,01,01,01,01,01,01,04,00,04,04,04,01,00,00
 29+  AECE 04 04 00 04
 29+  AED2 04 04 01 01
 29+  AED6 01 01 01 01
 29+  AEDA 01 01 01 01
 29+  AEDE 01 01 01 01
 29+  AEE2 04 00 04 04
 29+  AEE6 04 01 00 00
 30+  AEEA 00 00 01 04      defb 00,00,01,04,04,04,00,04,04,04,01,00,00,00,00,00,00,00,00,00,00,00,00,01,04,00,04,04,04,01,00,00
 30+  AEEE 04 04 00 04
 30+  AEF2 04 04 01 00
 30+  AEF6 00 00 00 00
 30+  AEFA 00 00 00 00
 30+  AEFE 00 00 00 01
 30+  AF02 04 00 04 04
 30+  AF06 04 01 00 00
 31+  AF0A 00 00 01 04      defb 00,00,01,04,04,04,00,04,04,04,01,00,00,00,00,00,00,00,00,00,00,00,00,01,04,00,04,04,04,01,00,00
 31+  AF0E 04 04 00 04
 31+  AF12 04 04 01 00
 31+  AF16 00 00 00 00
 31+  AF1A 00 00 00 00
 31+  AF1E 00 00 00 01
 31+  AF22 04 00 04 04
 31+  AF26 04 01 00 00
 32+  AF2A 00 00 01 04      defb 00,00,01,04,04,04,00,04,04,04,01,00,00,00,00,00,00,00,00,00,00,00,00,01,04,00,04,04,04,01,00,00
 32+  AF2E 04 04 00 04
 32+  AF32 04 04 01 00
 32+  AF36 00 00 00 00
 32+  AF3A 00 00 00 00
 32+  AF3E 00 00 00 01
 32+  AF42 04 00 04 04
 32+  AF46 04 01 00 00
 33+  AF4A 00 00 01 04      defb 00,00,01,04,04,04,00,04,04,04,04,00,00,00,00,00,00,00,00,00,00,00,00,04,04,04,04,04,04,01,00,00
 33+  AF4E 04 04 00 04
 33+  AF52 04 04 04 00
 33+  AF56 00 00 00 00
 33+  AF5A 00 00 00 00
 33+  AF5E 00 00 00 04
 33+  AF62 04 04 04 04
 33+  AF66 04 01 00 00
 34+  AF6A 00 00 01 04      defb 00,00,01,04,04,04,04,04,04,04,01,00,00,00,00,00,00,00,00,00,00,00,00,01,04,04,04,04,04,01,00,00
 34+  AF6E 04 04 04 04
 34+  AF72 04 04 01 00
 34+  AF76 00 00 00 00
 34+  AF7A 00 00 00 00
 34+  AF7E 00 00 00 01
 34+  AF82 04 04 04 04
 34+  AF86 04 01 00 00
 35+  AF8A 00 00 01 04      defb 00,00,01,04,04,04,04,04,04,04,01,00,00,00,01,00,00,00,00,01,00,00,00,01,04,04,04,04,04,01,00,00
 35+  AF8E 04 04 04 04
 35+  AF92 04 04 01 00
 35+  AF96 00 00 01 00
 35+  AF9A 00 00 00 01
 35+  AF9E 00 00 00 01
 35+  AFA2 04 04 04 04
 35+  AFA6 04 01 00 00
 36+  AFAA 00 00 01 01      defb 00,00,01,01,01,01,01,01,01,01,01,01,01,01,01,01,01,01,01,01,01,01,01,01,01,01,01,01,01,01,00,00
 36+  AFAE 01 01 01 01
 36+  AFB2 01 01 01 01
 36+  AFB6 01 01 01 01
 36+  AFBA 01 01 01 01
 36+  AFBE 01 01 01 01
 36+  AFC2 01 01 01 01
 36+  AFC6 01 01 00 00
 37+  AFCA
 38+  AFCA              ; ###############################################################
 39+  AFCA              ; Object data: horiz, vert, state, memh, meml
 40+  AFCA              ; ###############################################################
 41+  AFCA              level01rocks:
 42+  AFCA 09 04 00 00      defb 9,4,0,0,0
 42+  AFCE 00
 43+  AFCF 0C 07 00 00      defb 12,7,0,0,0
 43+  AFD3 00
 44+  AFD4 10 07 00 00      defb 16,7,0,0,0
 44+  AFD8 00
 45+  AFD9 0B 08 00 00      defb 11,8,0,0,0
 45+  AFDD 00
 46+  AFDE 0A 0A 00 00      defb 10,10,0,0,0
 46+  AFE2 00
 47+  AFE3 0C 0A 00 00      defb 12,10,0,0,0
 47+  AFE7 00
 48+  AFE8 0D 09 00 00      defb 13,9,0,0,0
 48+  AFEC 00
 49+  AFED 0E 08 00 00      defb 14,8,0,0,0
 49+  AFF1 00
 50+  AFF2 0F 0B 00 00      defb 15,11,0,0,0
 50+  AFF6 00
 51+  AFF7 0B 0C 00 00      defb 11,12,0,0,0
 51+  AFFB 00
 52+  AFFC 11 0C 00 00      defb 17,12,0,0,0
 52+  B000 00
 53+  B001 13 08 00 00      defb 19,8,0,0,0
 53+  B005 00
 54+  B006 16 09 00 00      defb 22,9,0,0,0
 54+  B00A 00
 55+  B00B 13 0A 00 00      defb 19,10,0,0,0
 55+  B00F 00
 56+  B010 15 0A 00 00      defb 21,10,0,0,0
 56+  B014 00
 57+  B015 15 0C 00 00      defb 21,12,0,0,0
 57+  B019 00
 58+  B01A 16 0C 00 00      defb 22,12,0,0,0
 58+  B01E 00
 59+  B01F 18 0A 00 00      defb 24,10,0,0,0
 59+  B023 00
 60+  B024 19 09 00 00      defb 25,9,0,0,0
 60+  B028 00
 61+  B029 1C 09 00 00      defb 28,9,0,0,0
 61+  B02D 00
 62+  B02E 1B 0C 00 00      defb 27,12,0,0,0
 62+  B032 00
 63+  B033 1A 0D 00 00      defb 26,13,0,0,0
 63+  B037 00
 64+  B038 19 0E 00 00      defb 25,14,0,0,0
 64+  B03C 00
 65+  B03D 19 10 00 00      defb 25,16,0,0,0
 65+  B041 00
 66+  B042 1A 11 00 00      defb 26,17,0,0,0
 66+  B046 00
 67+  B047 1B 11 00 00      defb 27,17,0,0,0
 67+  B04B 00
 68+  B04C 1C 12 00 00      defb 28,18,0,0,0
 68+  B050 00
 69+  B051 1A 13 00 00      defb 26,19,0,0,0
 69+  B055 00
 70+  B056 1B 15 00 00      defb 27,21,0,0,0
 70+  B05A 00
 71+  B05B 1A 17 00 00      defb 26,23,0,0,0
 71+  B05F 00
 72+  B060 1B 18 00 00      defb 27,24,0,0,0
 72+  B064 00
 73+  B065 19 18 00 00      defb 25,24,0,0,0
 73+  B069 00
 74+  B06A 18 17 00 00      defb 24,23,0,0,0
 74+  B06E 00
 75+  B06F 13 14 00 00      defb 19,20,0,0,0
 75+  B073 00
 76+  B074 14 12 00 00      defb 20,18,0,0,0
 76+  B078 00
 77+  B079 14 10 00 00      defb 20,16,0,0,0
 77+  B07D 00
 78+  B07E 15 10 00 00      defb 21,16,0,0,0
 78+  B082 00
 79+  B083 16 12 00 00      defb 22,18,0,0,0
 79+  B087 00
 80+  B088 11 14 00 00      defb 17,20,0,0,0
 80+  B08C 00
 81+  B08D 0D 11 00 00      defb 13,17,0,0,0
 81+  B091 00
 82+  B092 0C 13 00 00      defb 12,19,0,0,0
 82+  B096 00
 83+  B097 0B 13 00 00      defb 11,19,0,0,0
 83+  B09B 00
 84+  B09C 0A 11 00 00      defb 10,17,0,0,0
 84+  B0A0 00
 85+  B0A1 05 12 00 00      defb 5,18,0,0,0
 85+  B0A5 00
 86+  B0A6 07 16 00 00      defb 7,22,0,0,0
 86+  B0AA 00
 87+  B0AB 09 17 00 00      defb 9,23,0,0,0
 87+  B0AF 00
 88+  B0B0 07 18 00 00      defb 7,24,0,0,0
 88+  B0B4 00
 89+  B0B5 05 18 00 00      defb 5,24,0,0,0
 89+  B0B9 00
 90+  B0BA 06 19 00 00      defb 6,25,0,0,0
 90+  B0BE 00
 91+  B0BF 08 19 00 00      defb 8,25,0,0,0
 91+  B0C3 00
 92+  B0C4 04 17 00 00      defb 4,23,0,0,0
 92+  B0C8 00
 93+  B0C9 FF               defb 255
 94+  B0CA
 95+  B0CA              level01missiles:
 96+  B0CA 0B 17 00 00      defb 11,23,0,0,0
 96+  B0CE 00
 97+  B0CF 0B 16 00 00      defb 11,22,0,0,0
 97+  B0D3 00
 98+  B0D4 0C 17 00 00      defb 12,23,0,0,0
 98+  B0D8 00
 99+  B0D9 0C 16 00 00      defb 12,22,0,0,0
 99+  B0DD 00
100+  B0DE 0D 17 00 00      defb 13,23,0,0,0
100+  B0E2 00
101+  B0E3 0D 16 00 00      defb 13,22,0,0,0
101+  B0E7 00
102+  B0E8 0E 17 00 00      defb 14,23,0,0,0
102+  B0EC 00
103+  B0ED 0E 16 00 00      defb 14,22,0,0,0
103+  B0F1 00
104+  B0F2 0F 17 00 00      defb 15,23,0,0,0
104+  B0F6 00
105+  B0F7 0F 16 00 00      defb 15,22,0,0,0
105+  B0FB 00
106+  B0FC 10 17 00 00      defb 16,23,0,0,0
106+  B100 00
107+  B101 10 16 00 00      defb 16,22,0,0,0
107+  B105 00
108+  B106 11 17 00 00      defb 17,23,0,0,0
108+  B10A 00
109+  B10B 11 16 00 00      defb 17,22,0,0,0
109+  B10F 00
110+  B110 12 17 00 00      defb 18,23,0,0,0
110+  B114 00
111+  B115 12 16 00 00      defb 18,22,0,0,0
111+  B119 00
112+  B11A 13 17 00 00      defb 19,23,0,0,0
112+  B11E 00
113+  B11F 13 16 00 00      defb 19,22,0,0,0
113+  B123 00
114+  B124 14 17 00 00      defb 20,23,0,0,0
114+  B128 00
115+  B129 14 16 00 00      defb 20,22,0,0,0
115+  B12D 00
116+  B12E 15 17 00 00      defb 21,23,0,0,0
116+  B132 00
117+  B133 15 16 00 00      defb 21,22,0,0,0
117+  B137 00
118+  B138 16 17 00 00      defb 22,23,0,0,0
118+  B13C 00
119+  B13D 16 16 00 00      defb 22,22,0,0,0
119+  B141 00
120+  B142 FF               defb 255
121+  B143
122+  B143              ;
123+  B143              ; Diamonds: x,y,state,mem1+mem2
124+  B143              ;
125+  B143              level01diamonds:
126+  B143 0C 1B 00 00      defb 12,27,0,0,0
126+  B147 00
127+  B148 10 1B 00 00      defb 16,27,0,0,0
127+  B14C 00
128+  B14D 15 1B 00 00      defb 21,27,0,0,0
128+  B151 00
129+  B152 FF               defb 255
130+  B153
131+  B153              level01gems:
132+  B153 12 14 00 00      defb 18,20,0,0,0
132+  B157 00
133+  B158 06 18 00 00      defb 6,24,0,0,0
133+  B15C 00
134+  B15D 19 17 00 00      defb 25,23,0,0,0
134+  B161 00
135+  B162 1C 11 00 00      defb 28,17,0,0,0
135+  B166 00
136+  B167 FF               defb 255
137+  B168              ;
138+  B168              ; Score area colours
139+  B168              ;
140+  B168              score_colours:
141+  B168 47 47 47 47      defb 71,71,71,71,71,71,71,71,71,71,71,66,67,67,67,67,67,67,67,67,66,71,71,71,71,71,71,71,71,71,71,71
141+  B16C 47 47 47 47
141+  B170 47 47 47 42
141+  B174 43 43 43 43
141+  B178 43 43 43 43
141+  B17C 42 47 47 47
141+  B180 47 47 47 47
141+  B184 47 47 47 47
142+  B188 47 47 47 47      defb 71,71,71,71,71,71,71,71,71,71,71,70,70,70,70,70,70,70,70,70,70,71,71,71,71,71,71,71,71,71,71,71
142+  B18C 47 47 47 47
142+  B190 47 47 47 46
142+  B194 46 46 46 46
142+  B198 46 46 46 46
142+  B19C 46 47 47 47
142+  B1A0 47 47 47 47
142+  B1A4 47 47 47 47
143+  B1A8
144+  B1A8              high_score_colours:
145+  B1A8 00 00 00 42      defb  0, 0, 0,66,66,66,71,71,71,71,71,71,67,67,67,71,71,71,71,71,71,70,70,70,71,71,71,71,71,71,0,0
145+  B1AC 42 42 47 47
145+  B1B0 47 47 47 47
145+  B1B4 43 43 43 47
145+  B1B8 47 47 47 47
145+  B1BC 47 46 46 46
145+  B1C0 47 47 47 47
145+  B1C4 47 47 00 00
# file closed: leveldata/level01.asm
 32   B1C8                  include "graphics\graphics.asm"
# file opened: graphics/graphics.asm
  1+  B1C8              ; Tiles graphics.
  2+  B1C8              sprites:
  3+  B1C8 00 00 00 00      defb    0  ,  0,  0,  0,  0,  0,  0,  0   ; 0, space
  3+  B1CC 00 00 00 00
  4+  B1D0 FF FF FF FF      defb    255,255,255,255,255,255,255,255   ; 1, cyan block
  4+  B1D4 FF FF FF FF
  5+  B1D8 01 03 07 0F      defb	  1,  3,  7, 15, 31, 63,127,255   ; 2, slope left
  5+  B1DC 1F 3F 7F FF
  6+  B1E0 80 C0 E0 F0      defb    128,192,224,240,248,252,254,255   ; 3, slope right
  6+  B1E4 F8 FC FE FF
  7+  B1E8 55 AA 55 AA      defb    85,170, 85,170, 85,170, 85,170    ; 4, dirt
  7+  B1EC 55 AA 55 AA
  8+  B1F0 00 00 00 00      defb    0  ,  0,  0,  0,  0,  0,  0,  0   ; 5, sky block
  8+  B1F4 00 00 00 00
  9+  B1F8 FF FF FF FF      defb    255,255,255,255,255,255,255,255   ; 6, slime block
  9+  B1FC FF FF FF FF
 10+  B200 FF FF 00 00      defb    255,255,  0,  0,  0,  0,  0,  0   ; 7, trapdoor
 10+  B204 00 00 00 00
 11+  B208 18 2C 4E 8F      defb    24, 44, 78,143,241,114, 52,  24    ; 8, diamond
 11+  B20C F1 72 34 18
 12+  B210 3C 7E FF 7F      defb    60,126,255,127,254,254,255,126    ; 9, rock
 12+  B214 FE FE FF 7E
 13+  B218 7E FF 7F 7F  	defb	126,255,127,127,254,255,126, 60    ; 10, rock 2
 13+  B21C FE FF 7E 3C
 14+  B220 00 00 00 00      defb    0  ,  0,  0,  0,  0,  0,255,255   ; 11, sky block, pixel trapdoor
 14+  B224 00 00 FF FF
 15+  B228 99 DB 7E 24  	defb    153,219,126, 36,255,126, 60, 24   ; 12, missile
 15+  B22C FF 7E 3C 18
 16+  B230 00 00 00 00      defb    0  ,  0,  0,  0,  0,  0,  0,  0   ; 13, sky block, tank background
 16+  B234 00 00 00 00
 17+  B238 00 00 00 00  	defb    0,  0,  0,  0,  0, 60, 90, 52     ; 14, gem
 17+  B23C 00 3C 5A 34
 18+  B240
 19+  B240              sprite_attrs:
 20+  B240 46               defb    070 ; 0, space
 21+  B241 65               defb    101 ; 1, cyan block
 22+  B242 4D               defb    077 ; 2, slope left
 23+  B243 4D               defb    077 ; 3, slope right
 24+  B244 46               defb    070 ; 4, dirt
 25+  B245 4E               defb    078 ; 5, sky
 26+  B246 4C               defb    076 ; 6, slime
 27+  B247 42               defb    066 ; 7, trapdoor
 28+  B248 46               defb    070 ; 8, diamond
 29+  B249 42               defb    066 ; 9, rock
 30+  B24A 42               defb    066 ; 10, rock 2
 31+  B24B 49           	defb    073 ; 11, sky, trapdoor
 32+  B24C 43           	defb    067 ; 12, missile
 33+  B24D 4A               defb    074 ; 13, sky, red ink (tank)
 34+  B24E 46               defb    070 ; 14, gem
 35+  B24F
 36+  B24F              player_sprite:
 37+  B24F 10 39 92 FC  	defb	 16, 57,146,252, 56, 61,195,128 ; 0 up/down 1
 37+  B253 38 3D C3 80
 38+  B257 08 1C 08 FC  	defb	  8, 28,  8,252, 60, 28, 22, 50 ; 1 left 1
 38+  B25B 3C 1C 16 32
 39+  B25F 10 38 10 3F      defb   	 16, 56, 16, 63, 60, 56,104, 76 ; 2 right 1
 39+  B263 3C 38 68 4C
 40+  B267 08 9C 49 3F  	defb	  8,156, 73, 63, 28,188,195,  1 ; 3 up/down 2
 40+  B26B 1C BC C3 01
 41+  B26F 08 1C 08 FC  	defb	  8, 28,  8,252, 60, 60,100, 12; 4 left 2
 41+  B273 3C 3C 64 0C
 42+  B277 10 38 10 3F  	defb	 16, 56, 16, 63, 60, 60, 38, 48 ; 5 right 2
 42+  B27B 3C 3C 26 30
 43+  B27F 54 28 10 12  	defb	 84, 40, 16, 18, 30, 92,253, 95 ; 6 shoot up
 43+  B283 1E 5C FD 5F
 44+  B287 02 87 42 BF  	defb	 2,135, 66,191, 79,143, 25,  3  ; 7 shoot left
 44+  B28B 4F 8F 19 03
 45+  B28F 40 E1 42 FD  	defb	 64,225, 66,253,242,241,152,192 ; 8 shoot right
 45+  B293 F2 F1 98 C0
 46+  B297 FA BF 3A 78  	defb	 250,191, 58,120, 72,  8, 20, 42 ; 9 shoot down
 46+  B29B 48 08 14 2A
 47+  B29F 92 BA 94 78  	defb 	 146,186,148,120, 56,120, 68,195 ; 10 crushed 1
 47+  B2A3 38 78 44 C3
 48+  B2A7 49 5D 29 1E  	defb	  73, 93, 41, 30, 28, 30, 34,195 ; 11 crushed 2
 48+  B2AB 1C 1E 22 C3
 49+  B2AF
 50+  B2AF              ;
 51+  B2AF              ; First 4 top half, next 4 bottom 1, next 4 bottom 2
 52+  B2AF              ;
 53+  B2AF              ship_sprite:
 54+  B2AF 00 00 00 01  	defb	  0,  0,  0,  1,  3, 31,127,255
 54+  B2B3 03 1F 7F FF
 55+  B2B7 1F 01 7F FF  	defb	 31,  1,127,255,255,255,255,255
 55+  B2BB FF FF FF FF
 56+  B2BF F8 80 FE FF  	defb	248,128,254,255,255,255,255,255
 56+  B2C3 FF FF FF FF
 57+  B2C7 00 00 00 80  	defb	  0,  0,  0,128,192,248,254,255
 57+  B2CB C0 F8 FE FF
 58+  B2CF B3 B3 7F 1F  	defb	179,179,127, 31,  3,  3,  2,  7
 58+  B2D3 03 03 02 07
 59+  B2D7 8F 8F FF FF  	defb	143,143,255,255,255, 15,  7,131
 59+  B2DB FF 0F 07 83
 60+  B2DF 0F 0F FF FF  	defb	 15, 15,255,255,255, 16, 32,193
 60+  B2E3 FF 10 20 C1
 61+  B2E7 19 19 FE F8  	defb	 25, 25,254,248,192,192, 64,224
 61+  B2EB C0 C0 40 E0
 62+  B2EF 98 98 7F 1F  	defb	152,152,127, 31,  3,  3,  2,  7
 62+  B2F3 03 03 02 07
 63+  B2F7 F0 F0 FF FF  	defb	240,240,255,255,255,  8,  4,131
 63+  B2FB FF 08 04 83
 64+  B2FF F1 F1 FF FF  	defb	241,241,255,255,255,240,224,193
 64+  B303 FF F0 E0 C1
 65+  B307 CD CD FE F8  	defb	205,205,254,248,192,192, 64,224
 65+  B30B C0 C0 40 E0
 66+  B30F
 67+  B30F              ;
 68+  B30F              ;  First 8 frames are tank, last frame is the gun barrel
 69+  B30F              ;
 70+  B30F              tank_sprite:
 71+  B30F 00 00 00 7F  	defb	  0,  0,  0,127,127,  0,  0,  0
 71+  B313 7F 00 00 00
 72+  B317 01 03 FE FC  	defb	  1,  3,254,252,254,255,127, 64
 72+  B31B FE FF 7F 40
 73+  B31F FF FF 03 F9  	defb	255,255,  3,249,  3,255,255,  1
 73+  B323 03 FF FF 01
 74+  B327 00 00 C0 E0  	defb	  0,  0,192,224,224,192,  0,  0
 74+  B32B E0 C0 00 00
 75+  B32F 3F 7F E1 FB  	defb	 63,127,225,251,247,225,127, 63
 75+  B333 F7 E1 7F 3F
 76+  B337 FF FF 16 52  	defb	255,255, 22, 82, 84, 22,255,255
 76+  B33B 54 16 FF FF
 77+  B33F FF FF A8 A9  	defb	255,255,168,169,155,168,255,255
 77+  B343 9B A8 FF FF
 78+  B347 FC FE 8F AF  	defb	252,254,143,175,159,175,254,252
 78+  B34B 9F AF FE FC
 79+  B34F 00 00 00 1F  	defb	  0,  0,  0, 31, 31,  0,  0,  0
 79+  B353 1F 00 00 00
# file closed: graphics/graphics.asm
 33   B357
 34   B357                  include "game\control.asm"
# file opened: game/control.asm
  1+  B357              ;
  2+  B357              ; Check the keyboard then move
  3+  B357              ;
  4+  B357              control_keyboard:
  5+  B357 3A E5 B7         ld a,(player+11)    ; first, check if player is dying
  6+  B35A FE 00            cp 0
  7+  B35C C0               ret nz               ; if so, can't move
  8+  B35D 3A DF B7         ld a,(player+5)      ; next, check if the player has pixels left to move
  9+  B360 FE 00            cp 0
 10+  B362 CA 69 B3         jp z, control_keyboard5
 11+  B365 CD 6E B4         call control_automove
 12+  B368 C9               ret
 13+  B369              control_keyboard5:
 14+  B369 3A E0 B7         ld a,(player+6)      ; next, check if the player is digging
 15+  B36C FE 00            cp 0
 16+  B36E CA 75 B3         jp z, control_keyboard0
 17+  B371 CD AC B3         call control_dig
 18+  B374 C9               ret
 19+  B375              control_keyboard0:
 20+  B375 01 FE FB         ld bc,64510         ; port for keyboard row q-t.
 21+  B378 ED 78            in a,(c)            ; read keyboard.
 22+  B37A 47               ld b,a              ; store result in b register.
 23+  B37B CB 18            rr b                ; check outermost key (q).
 24+  B37D D2 9C B3         jp nc,control_keyboard1
 25+  B380 01 FE FD         ld bc,65022         ; port for keyboard row a-f.
 26+  B383 ED 78            in a,(c)            ; read keyboard.
 27+  B385 47               ld b,a              ; store result in b register.
 28+  B386 CB 18            rr b                ; check outermost key (a).
 29+  B388 D2 A0 B3         jp nc,control_keyboard2
 30+  B38B 01 FE DF         ld bc,57342         ; port for keyboard row y-p.
 31+  B38E ED 78            in a,(c)            ; read keyboard.
 32+  B390 47               ld b,a              ; store result in b register.
 33+  B391 CB 18            rr b                ; check outermost key (p).
 34+  B393 D2 A4 B3         jp nc,control_keyboard3
 35+  B396 CB 18            rr b                ; check next key.
 36+  B398 D2 A8 B3         jp nc,control_keyboard4
 37+  B39B C9               ret
 38+  B39C              control_keyboard1:
 39+  B39C CD B7 B4         call control_pl_moveup         ; player up.
 40+  B39F C9               ret
 41+  B3A0              control_keyboard2:
 42+  B3A0 CD E6 B4         call control_pl_movedown       ; player down.
 43+  B3A3 C9               ret
 44+  B3A4              control_keyboard3:
 45+  B3A4 CD 43 B5         call control_pl_moveright       ; player left.
 46+  B3A7 C9               ret
 47+  B3A8              control_keyboard4:
 48+  B3A8 CD 13 B5         call control_pl_moveleft       ; player right.
 49+  B3AB C9               ret
 50+  B3AC
 51+  B3AC              ;
 52+  B3AC              ; Performs a dig if the counter has reset, otherwise, messes with the graphics
 53+  B3AC              ;
 54+  B3AC              control_dig:
 55+  B3AC ED 4B DA B7      ld bc,(player)      ; load the current coords into bc
 56+  B3B0 C5               push bc
 57+  B3B1 3A DC B7         ld a,(player+2)     ; get the direction
 58+  B3B4 FE 01            cp 1                ; left
 59+  B3B6 CA CE B3         jp z,control_dig0
 60+  B3B9 FE 02            cp 2                ; right
 61+  B3BB CA E3 B3         jp z,control_dig1
 62+  B3BE FE 03            cp 3                ; down
 63+  B3C0 CA 07 B4         jp z,control_dig5
 64+  B3C3 FE 00            cp 0                ; up
 65+  B3C5 CA F7 B3         jp z,control_dig4
 66+  B3C8 21 E0 B7         ld hl,player+6
 67+  B3CB 36 00            ld (hl),0           ; turn off digging
 68+  B3CD C9               ret                 ; return
 69+  B3CE              control_dig0:           ; going left
 70+  B3CE CD DA A8         call sprites_scadd  ; get the current coord
 71+  B3D1 62 6B            ld hl,de
 72+  B3D3 2B               dec hl              ; move one left
 73+  B3D4 C1               pop bc              ; get the coords back, subtract 8 from horiz, 8 from vert, store (will be coords of space above dug dirt)
 74+  B3D5 78               ld a,b
 75+  B3D6 06 08            ld b,8
 76+  B3D8 90               sub b
 77+  B3D9 47               ld b,a
 78+  B3DA 79               ld a,c
 79+  B3DB 0E 08            ld c,8
 80+  B3DD 91               sub c
 81+  B3DE 4F               ld c,a
 82+  B3DF C5               push bc
 83+  B3E0 C3 10 B4         jp control_dig2
 84+  B3E3              control_dig1:
 85+  B3E3 CD DA A8         call sprites_scadd  ; get the current coord
 86+  B3E6 62 6B            ld hl,de
 87+  B3E8 23               inc hl              ; move one right
 88+  B3E9 C1               pop bc              ; get the coords back, add 8 to horiz, subtract 8 from vert store (will be coords of space above dug dirt)
 89+  B3EA 3E 08            ld a,8
 90+  B3EC 80               add a,b
 91+  B3ED 47               ld b,a
 92+  B3EE 79               ld a,c
 93+  B3EF 0E 08            ld c,8
 94+  B3F1 91               sub c
 95+  B3F2 4F               ld c,a
 96+  B3F3 C5               push bc
 97+  B3F4 C3 10 B4         jp control_dig2
 98+  B3F7              control_dig4:
 99+  B3F7 CD DA A8         call sprites_scadd  ; get the current coord
100+  B3FA 62 6B            ld hl,de
101+  B3FC 11 20 00         ld de,32
102+  B3FF ED 52            sbc hl,de             ; move one up
103+  B401 C1               pop bc              ; get the coords back, 1 from vert, store, then we'll sub 1 from c for each row later
104+  B402 0D               dec c
105+  B403 C5               push bc
106+  B404 C3 28 B4         jp control_dig6
107+  B407              control_dig5:
108+  B407 CD DA A8         call sprites_scadd  ; get the current coord
109+  B40A 62 6B            ld hl,de
110+  B40C 24               inc h              ; move one down
111+  B40D                                     ; not bothered about working out bc here, since rock will never fall if digging down
112+  B40D C3 10 B4         jp control_dig2
113+  B410              ; Normal (not up) digging
114+  B410              control_dig2:
115+  B410 3A E2 B7         ld a,(player+8)     ; get the number of rows we need to overwrite
116+  B413 47               ld b,a              ; rows to copy over
117+  B414 E5               push hl             ; store the memory location of the first row for later
118+  B415              control_dig3:
119+  B415 CD 57 B4         call control_getpixelrow
120+  B418 77               ld (hl),a           ; load contents into row
121+  B419 11 20 00         ld de,32
122+  B41C 19               add hl,de           ; move to next row
123+  B41D 10 F6            djnz control_dig3
124+  B41F E1               pop hl              ; get the original memory location back
125+  B420 11 20 00         ld de,32
126+  B423 ED 52            sbc hl,de           ; move to above row, ready for checking for rock
127+  B425 C3 3E B4         jp control_dig10
128+  B428              ; Special case for going up
129+  B428              control_dig6:
130+  B428 3A E2 B7         ld a,(player+8)     ; get the number of rows we need to overwrite
131+  B42B 47               ld b,a              ; rows to copy over
132+  B42C              control_dig7:
133+  B42C CD 57 B4         call control_getpixelrow
134+  B42F              control_dig12:
135+  B42F 77               ld (hl),a           ; load empty into row
136+  B430 11 20 00         ld de,32
137+  B433 ED 52            sbc hl,de           ; move up to next row
138+  B435 0D               dec c               ; decrease c to track rows
139+  B436 10 F4            djnz control_dig7
140+  B438 79               ld a,c
141+  B439 D6 07            sub 7
142+  B43B C1               pop bc
143+  B43C 4F               ld c,a
144+  B43D C5               push bc             ; store the decreased c coord
145+  B43E              control_dig10:
146+  B43E DD 21 E1 B7      ld ix,player+7
147+  B442 DD 7E 00         ld a,(ix)     ; get the dig frame number
148+  B445 3D               dec a
149+  B446 DD 77 00         ld (ix),a
150+  B449                  ; call the check for rocks above the removed dirt
151+  B449 DD 21 E0 B7      ld ix,player+6
152+  B44D DD 7E 00         ld a,(ix)     ; get the dig state
153+  B450 FE 00            cp 0
154+  B452 C1               pop bc
155+  B453 CC 30 BB         call z, rocks_checkforfalling ; make the check if we're no longer digging
156+  B456 C9               ret
157+  B457
158+  B457              ;
159+  B457              ; Gets a modified pixel row to overwrite dirt - if this is the last dig, overwrite with nothing, otherwise xor to flip the dirt
160+  B457              ; Inputs:
161+  B457              ; hl - memory of pixel row
162+  B457              ; Outputs:
163+  B457              ; a - modified row to write
164+  B457              ;
165+  B457              control_getpixelrow:
166+  B457 3A E1 B7         ld a,(player+7)     ; get the dig frame number
167+  B45A FE 00            cp 0                ; is this the last dig
168+  B45C CA 63 B4         jp z,control_getpixelrow1
169+  B45F 7E               ld a,(hl)           ; if not, xor with 255 to flip it
170+  B460 EE FF            xor 255
171+  B462 C9               ret
172+  B463              control_getpixelrow1:
173+  B463 DD 21 E0 B7      ld ix,player+6
174+  B467 DD 36 00 00      ld (ix),0           ; turn off digging
175+  B46B 3E 00            ld a,0              ; if it is, load with empty
176+  B46D C9               ret
177+  B46E
178+  B46E              ;
179+  B46E              ; Auto move the player until pixels is zero
180+  B46E              ;
181+  B46E              control_automove:
182+  B46E 5F               ld e,a              ; store the number of pixels left to move in e
183+  B46F ED 4B DA B7      ld bc,(player)      ; load the current coords into bc
184+  B473 21 DC B7         ld hl,player+2      ; get the direction
185+  B476 7E               ld a,(hl)
186+  B477 FE 03            cp 3                ; down
187+  B479 CA 8D B4         jp z,control_automove3  ; don't need to do anything
188+  B47C FE 00            cp 0                ; going up
189+  B47E CA 99 B4         jp z,control_automove2
190+  B481 FE 01            cp 1                ; going left?
191+  B483 CA A5 B4         jp z,control_automove0
192+  B486 78               ld a,b
193+  B487 3C               inc a               ; if we're going right, increment a twice for two pixels
194+  B488 3C               inc a
195+  B489 47               ld b,a
196+  B48A C3 A9 B4         jp control_automove1
197+  B48D              control_automove3:
198+  B48D 79               ld a,c
199+  B48E 3C               inc a
200+  B48F 3C               inc a               ; if we're going down, increment twice
201+  B490 4F               ld c,a
202+  B491 FE 90            cp 144
203+  B493 CC 71 B5         call z, control_scroll_down
204+  B496 C3 A9 B4         jp control_automove1
205+  B499              control_automove2:
206+  B499 79               ld a,c
207+  B49A 3D               dec a
208+  B49B 3D               dec a               ; if we're going up, decrement twice
209+  B49C 4F               ld c,a
210+  B49D FE 60            cp 96
211+  B49F CC 7E B5         call z, control_scroll_up
212+  B4A2 C3 A9 B4         jp control_automove1
213+  B4A5              control_automove0:
214+  B4A5 78               ld a,b
215+  B4A6 3D               dec a               ; if we're going left, decrement a twice
216+  B4A7 3D               dec a
217+  B4A8 47               ld b,a
218+  B4A9              control_automove1:
219+  B4A9 ED 43 DA B7      ld (player),bc      ; and back to player
220+  B4AD 7B               ld a,e              ; now get the pixel count back
221+  B4AE 3D               dec a               ; decrease by one
222+  B4AF 21 DF B7         ld hl,player+5
223+  B4B2 77               ld (hl),a           ; copy back
224+  B4B3 CD 11 B9         call player_justmoved
225+  B4B6 C9               ret
226+  B4B7
227+  B4B7              ;
228+  B4B7              ; Moves the player up
229+  B4B7              ;
230+  B4B7              control_pl_moveup:
231+  B4B7 C5               push bc
232+  B4B8 ED 4B DA B7      ld bc,(player)          ; get the current coords, b horiz, c vert
233+  B4BC 79               ld a,c                  ; load c into the acc
234+  B4BD FE 18            cp 24
235+  B4BF CA DF B4         jp z,control_pl_moveup0 ; are we at the edge of the screen
236+  B4C2 FE 60            cp 96
237+  B4C4 CC 7E B5         call z, control_scroll_up
238+  B4C7 CD 1E B7         call movement_checkcanmove_up ; check we can move up, e will be 1 if we can
239+  B4CA F5               push af
240+  B4CB 7B               ld a,e                  ; put e in a
241+  B4CC FE 00            cp 0
242+  B4CE CA DE B4         jp z,control_pl_moveup1 ; don't move if we can't
243+  B4D1 F1               pop af
244+  B4D2 D6 01            sub 1                   ; subtract 1
245+  B4D4 D6 01            sub 1                   ; subtract 1
246+  B4D6 4F               ld c,a                  ; load back to c
247+  B4D7 ED 43 DA B7      ld (player),bc          ; load back to player
248+  B4DB C3 DF B4         jp control_pl_moveup0
249+  B4DE              control_pl_moveup1:
250+  B4DE F1               pop af                  ; restore af if needed
251+  B4DF              control_pl_moveup0:
252+  B4DF 3E 00            ld a,0
253+  B4E1 32 DC B7         ld (player+2),a        ; set direction to up
254+  B4E4 C1               pop bc
255+  B4E5 C9               ret
256+  B4E6              ;
257+  B4E6              ; Moves the player down
258+  B4E6              ;
259+  B4E6              control_pl_movedown:
260+  B4E6 C5               push bc
261+  B4E7 ED 4B DA B7      ld bc,(player)          ; get the current coords, b horiz, c vert
262+  B4EB 79               ld a,c                  ; load c into the acc
263+  B4EC FE E0            cp 224
264+  B4EE CA 0C B5         jp z,control_pl_movedown0 ; are we at the edge of the screen
265+  B4F1 FE 80            cp 128
266+  B4F3 CC 71 B5         call z, control_scroll_down
267+  B4F6 CD F2 B6         call movement_checkcanmove_down ; check we can move down, e will be 1 if we can
268+  B4F9 F5               push af
269+  B4FA 7B               ld a,e                  ; put e in a
270+  B4FB FE 00            cp 0
271+  B4FD CA 0B B5         jp z,control_pl_movedown1 ; don't move if we can't
272+  B500 F1               pop af
273+  B501 3C               inc a                   ; add 1
274+  B502 3C               inc a                   ; add 1
275+  B503 4F               ld c,a                  ; load back to c
276+  B504 ED 43 DA B7      ld (player),bc          ; load back to player
277+  B508 C3 0C B5         jp control_pl_movedown0
278+  B50B              control_pl_movedown1:
279+  B50B F1               pop af                  ; restore af if needed
280+  B50C              control_pl_movedown0:
281+  B50C 3E 03            ld a,3
282+  B50E 32 DC B7         ld (player+2),a        ; set direction to down
283+  B511 C1               pop bc
284+  B512 C9               ret
285+  B513              ;
286+  B513              ; Moves the player left
287+  B513              ;
288+  B513              control_pl_moveleft:
289+  B513 C5               push bc
290+  B514 ED 4B DA B7      ld bc,(player)          ; get the current coords, b horiz, c vert
291+  B518 78               ld a,b                  ; load b into the acc
292+  B519 FE 10            cp 16
293+  B51B CA 3C B5         jp z,control_pl_moveleft0 ; are we at the edge of the screen
294+  B51E CD 7D B7         call movement_checkcanmove_left ; check we can move down, e will be 1 if we can
295+  B521 F5               push af
296+  B522 7B               ld a,e                  ; put e in a
297+  B523 FE 00            cp 0
298+  B525 CA 3B B5         jp z,control_pl_moveleft1 ; don't move if we can't
299+  B528 21 DF B7         ld hl,player+5          ; need to store the amount of pixels still left to move in the player status
300+  B52B 3E 03            ld a,3
301+  B52D 77               ld (hl),a
302+  B52E F1               pop af
303+  B52F D6 01            sub 1                    ; subtract 2
304+  B531 D6 01            sub 1
305+  B533 47               ld b,a                  ; load back to c
306+  B534 ED 43 DA B7      ld (player),bc          ; load back to player
307+  B538 C3 3C B5         jp control_pl_moveleft0
308+  B53B              control_pl_moveleft1:
309+  B53B F1               pop af
310+  B53C              control_pl_moveleft0:
311+  B53C 3E 01            ld a,1
312+  B53E 32 DC B7         ld (player+2),a        ; set direction to left
313+  B541 C1               pop bc
314+  B542 C9               ret
315+  B543              ;
316+  B543              ; Moves the player right
317+  B543              ;
318+  B543              control_pl_moveright:
319+  B543 C5               push bc
320+  B544 ED 4B DA B7      ld bc,(player)          ; get the current coords, b horiz, c vert
321+  B548 78               ld a,b                  ; load b into the acc
322+  B549 FE F0            cp 240
323+  B54B CA 6A B5         jp z,control_pl_moveright0 ; are we at the edge of the screen
324+  B54E CD 51 B7         call movement_checkcanmove_right ; check we can move down, e will be 1 if we can
325+  B551 F5               push af
326+  B552 7B               ld a,e                  ; put e in a
327+  B553 FE 00            cp 0
328+  B555 CA 69 B5         jp z,control_pl_moveright1 ; don't move if we can't
329+  B558 21 DF B7         ld hl,player+5          ; need to store the amount of pixels still left to move in the player status
330+  B55B 3E 03            ld a,3
331+  B55D 77               ld (hl),a
332+  B55E F1               pop af
333+  B55F 3C               inc a                   ; add 2
334+  B560 3C               inc a
335+  B561 47               ld b,a                  ; load back to b
336+  B562 ED 43 DA B7      ld (player),bc          ; load back to player
337+  B566 C3 6A B5         jp control_pl_moveright0
338+  B569              control_pl_moveright1:
339+  B569 F1               pop af                  ; restore af if needed
340+  B56A              control_pl_moveright0:
341+  B56A 3E 02            ld a,2
342+  B56C 32 DC B7         ld (player+2),a        ; set direction to right
343+  B56F C1               pop bc
344+  B570 C9               ret
345+  B571
346+  B571              ;
347+  B571              ; Scrolls the screen down
348+  B571              ;
349+  B571              control_scroll_down:
350+  B571 F5               push af
351+  B572 3E 08            ld a,8
352+  B574 32 F3 A6         ld (screen_offset),a
353+  B577 F1               pop af
354+  B578 21 A5 A5         ld hl,buffer_updateall
355+  B57B 36 01            ld (hl),1         ; flag as screen needing update
356+  B57D C9               ret
357+  B57E
358+  B57E              ;
359+  B57E              ; Scrolls the screen up
360+  B57E              ;
361+  B57E              control_scroll_up:
362+  B57E F5               push af
363+  B57F 3E 00            ld a,0
364+  B581 32 F3 A6         ld (screen_offset),a
365+  B584 F1               pop af
366+  B585 21 A5 A5         ld hl,buffer_updateall
367+  B588 36 01            ld (hl),1         ; flag as screen needing update
368+  B58A C9               ret
369+  B58B
370+  B58B
371+  B58B
372+  B58B
# file closed: game/control.asm
 35   B58B                  include "game\movement.asm"
# file opened: game/movement.asm
  1+  B58B              ;
  2+  B58B              ; Checks the contents of a cell are empty - ie, all pixel rows are zero
  3+  B58B              ; Inputs:
  4+  B58B              ; hl - memory location of top pixel row
  5+  B58B              ; bc - screen coords, b horiz, c vert
  6+  B58B              ; Outputs:
  7+  B58B              ; e - 0 if not empty, 1 if empty
  8+  B58B              ;
  9+  B58B              movement_spaceisempty:
 10+  B58B C5               push bc
 11+  B58C E5               push hl
 12+  B58D CD B5 B5         call movement_spaceisgem        ; check if space is a gem
 13+  B590 E1               pop hl
 14+  B591 C1               pop bc
 15+  B592 7B               ld a,e
 16+  B593 FE 01            cp 1
 17+  B595 C8               ret z                           ; if e is 1, space is a gem so can move here, return
 18+  B596 3E 08            ld a,8                          ; 8 rows to check
 19+  B598              movement_spaceisempty0:
 20+  B598 08               ex af,af'                       ; store the loop counter
 21+  B599 7E               ld a,(hl)                       ; get current pixel row
 22+  B59A FE 00            cp 0
 23+  B59C C2 B0 B5         jp nz, movement_spaceisempty1    ; row is not empty, can't move here
 24+  B59F 79               ld a,c                          ; load the vertical coord
 25+  B5A0 3C               inc a                           ; next row down
 26+  B5A1 11 20 00         ld de,32
 27+  B5A4 19               add hl,de                       ; otherwise, just go one down for hl, which means add 32, because of course
 28+  B5A5 4F               ld c,a                          ; copy vert coord back to c
 29+  B5A6 08               ex af,af'                       ; get loop counter back
 30+  B5A7 3D               dec a                           ; decrease loop counter
 31+  B5A8 C2 98 B5         jp nz, movement_spaceisempty0
 32+  B5AB 16 00            ld d,0
 33+  B5AD 1E 01            ld e,1                          ; got to end, so space is empty
 34+  B5AF C9               ret
 35+  B5B0              movement_spaceisempty1:
 36+  B5B0 16 00            ld d,0
 37+  B5B2 1E 00            ld e,0                          ; returning false, ie space not empty
 38+  B5B4 C9               ret
 39+  B5B5
 40+  B5B5              ;
 41+  B5B5              ; Check if a space contains a gem
 42+  B5B5              ; Inputs:
 43+  B5B5              ; bc - screen coords
 44+  B5B5              ; Outputs:
 45+  B5B5              ; e = 1 if gem
 46+  B5B5              movement_spaceisgem:
 47+  B5B5 CD 31 A8         call screen_getcharcoordsfromscreencoords   ; get the char coords we're checking into bc
 48+  B5B8 21 43 B1         ld hl,level01diamonds           ; check diamonds first
 49+  B5BB              movement_spaceisgem0:
 50+  B5BB 5E 23 56 2B      ld de,(hl)                      ; get gem coords into de
 51+  B5BF 7B               ld a,e                          ; check for end of data
 52+  B5C0 FE FF            cp 255
 53+  B5C2 CA DD B5         jp z,movement_spaceisgem1       ; if yes, done with diamonds
 54+  B5C5 23               inc hl
 55+  B5C6 23               inc hl                          ; move to state
 56+  B5C7 7E               ld a,(hl)
 57+  B5C8 23               inc hl
 58+  B5C9 23               inc hl
 59+  B5CA 23               inc hl                          ; get to next
 60+  B5CB FE 01            cp 1                            ; check if collected
 61+  B5CD CA BB B5         jp z,movement_spaceisgem0       ; if yes, move to next diamond
 62+  B5D0 7B               ld a,e                          ; load e again
 63+  B5D1 B9               cp c                            ; otherwise, compare c with e
 64+  B5D2 C2 BB B5         jp nz,movement_spaceisgem0      ; if different, move to next diamond
 65+  B5D5 7A               ld a,d                          ; get d coord
 66+  B5D6 B8               cp b                            ; compare b with d
 67+  B5D7 C2 BB B5         jp nz,movement_spaceisgem0      ; if different, move to next diamond
 68+  B5DA 1E 01            ld e,1                          ; otherwise, exit with e = 1
 69+  B5DC C9               ret
 70+  B5DD              movement_spaceisgem1:
 71+  B5DD 21 53 B1         ld hl,level01gems              ; check gems
 72+  B5E0              movement_spaceisgem2:
 73+  B5E0 5E 23 56 2B      ld de,(hl)                      ; get gem coords into de
 74+  B5E4 7B               ld a,e                          ; check for end of data
 75+  B5E5 FE FF            cp 255
 76+  B5E7 CA 02 B6         jp z,movement_spaceisgem3       ; if yes, done with gems
 77+  B5EA 23               inc hl
 78+  B5EB 23               inc hl                          ; move to state
 79+  B5EC 7E               ld a,(hl)
 80+  B5ED 23               inc hl
 81+  B5EE 23               inc hl
 82+  B5EF 23               inc hl                          ; get to next
 83+  B5F0 FE 01            cp 1                            ; check if collected
 84+  B5F2 CA E0 B5         jp z,movement_spaceisgem2       ; if yes, move to next diamond
 85+  B5F5 7B               ld a,e                          ; load e again
 86+  B5F6 B9               cp c                            ; otherwise, compare c with e
 87+  B5F7 C2 E0 B5         jp nz,movement_spaceisgem2      ; if different, move to next gem
 88+  B5FA 7A               ld a,d                          ; get d coord
 89+  B5FB B8               cp b                            ; compare b with d
 90+  B5FC C2 E0 B5         jp nz,movement_spaceisgem2      ; if different, move to next gem
 91+  B5FF 1E 01            ld e,1                          ; otherwise, exit with e = 1
 92+  B601 C9               ret
 93+  B602              movement_spaceisgem3:
 94+  B602 1E 00            ld e,0                          ; nothing found, return e = 0
 95+  B604 C9               ret
 96+  B605
 97+  B605              ;
 98+  B605              ; Checks the line of a cell below is empty - ie, first pixel rows is zero
 99+  B605              ; Inputs:
100+  B605              ; hl - memory location of top pixel row
101+  B605              ; bc - screen coords, b horiz, c vert
102+  B605              ; Outputs:
103+  B605              ; e - 0 if not empty, 1 if empty
104+  B605              ;
105+  B605              movement_linebelowisempty:
106+  B605 C5               push bc
107+  B606 E5               push hl
108+  B607 CD B5 B5         call movement_spaceisgem        ; check if space is a gem
109+  B60A E1               pop hl
110+  B60B C1               pop bc
111+  B60C 7B               ld a,e
112+  B60D FE 01            cp 1
113+  B60F C8               ret z                           ; if e is 1, space is a gem so can move here, return
114+  B610 7E               ld a,(hl)                       ; get current pixel row
115+  B611 FE 00            cp 0
116+  B613 C2 1B B6         jp nz, movement_linebelowisempty1    ; row is not empty, can't move here
117+  B616 16 00            ld d,0
118+  B618 1E 01            ld e,1                          ; got to end, so space is empty
119+  B61A C9               ret
120+  B61B              movement_linebelowisempty1:
121+  B61B 16 00            ld d,0
122+  B61D 1E 00            ld e,0                          ; returning false, ie space not empty
123+  B61F C9               ret
124+  B620
125+  B620              ;
126+  B620              ; Checks the line of a cell above is empty - ie, last pixel rows are zero
127+  B620              ; Inputs:
128+  B620              ; hl - memory location of top pixel row
129+  B620              ; bc - screen coords, b horiz, c vert
130+  B620              ; Outputs:
131+  B620              ; e - 0 if not empty, 1 if empty
132+  B620              ;
133+  B620              movement_lineaboveisempty:
134+  B620 C5               push bc
135+  B621 E5               push hl
136+  B622 CD B5 B5         call movement_spaceisgem        ; check if space is a gem
137+  B625 E1               pop hl
138+  B626 C1               pop bc
139+  B627 7B               ld a,e
140+  B628 FE 01            cp 1
141+  B62A C8               ret z
142+  B62B 7E               ld a,(hl)                       ; get current pixel row
143+  B62C FE 00            cp 0
144+  B62E C2 36 B6         jp nz, movement_lineaboveisempty1    ; row is not empty, can't move here
145+  B631 16 00            ld d,0
146+  B633 1E 01            ld e,1                          ; got to end, so space is empty
147+  B635 C9               ret
148+  B636              movement_lineaboveisempty1:
149+  B636 16 00            ld d,0
150+  B638 1E 00            ld e,0                          ; returning false, ie space not empty
151+  B63A C9               ret
152+  B63B
153+  B63B              ;
154+  B63B              ; Checks the contents of a cell are diggable - ie, all pixel rows are dirt or empty
155+  B63B              ; Inputs:
156+  B63B              ; hl - memory location of top pixel row
157+  B63B              ; bc - screen coords, b horiz, c vert
158+  B63B              ; Outputs:
159+  B63B              ; none - puts player into digging mode
160+  B63B              ;
161+  B63B              movement_spaceisdiggable:
162+  B63B 3E 08            ld a,8                          ; 8 rows to check
163+  B63D              movement_spaceisdiggable0:
164+  B63D 08               ex af,af'                       ; store the loop counter
165+  B63E 7E               ld a,(hl)                       ; get current pixel row
166+  B63F FE 00            cp 0
167+  B641 CA 51 B6         jp z, movement_spaceisdiggable2  ; row is empty, can dig here
168+  B644 FE 55            cp 85
169+  B646 CA 51 B6         jp z, movement_spaceisdiggable2  ; row is dirt, can dig here
170+  B649 FE AA            cp 170
171+  B64B CA 51 B6         jp z, movement_spaceisdiggable2  ; row is dirt, can dig here
172+  B64E C3 69 B6         jp movement_spaceisdiggable1     ; otherwise, stop checking
173+  B651              movement_spaceisdiggable2:
174+  B651 79               ld a,c                          ; load the vertical coord
175+  B652 3C               inc a                           ; next row down
176+  B653 11 20 00         ld de,32
177+  B656 19               add hl,de                       ; otherwise, just go one down for hl, which means add 32, because of course
178+  B657 4F               ld c,a                          ; copy vert coord back to c
179+  B658 08               ex af,af'                       ; get loop counter back
180+  B659 3D               dec a                           ; decrease loop counter
181+  B65A C2 3D B6         jp nz, movement_spaceisdiggable0
182+  B65D 21 E0 B7         ld hl,player+6
183+  B660 36 01            ld (hl),1                       ; set the player into digging mode
184+  B662 23               inc hl
185+  B663 36 05            ld (hl),5                      ; set the number of frame to dig for
186+  B665 23               inc hl
187+  B666 36 08            ld (hl),8                       ; set the number of pixels to dig
188+  B668 C9               ret
189+  B669              movement_spaceisdiggable1:
190+  B669 21 E0 B7         ld hl,player+6
191+  B66C 36 00            ld (hl),0                       ; set the player out of digging mode
192+  B66E C9               ret
193+  B66F
194+  B66F              ;
195+  B66F              ; Checks the contents of a cell below are diggable - ie, at least one pixel row has dirt. If the first one isn't dirt, stop
196+  B66F              ; Inputs:
197+  B66F              ; hl - memory location of top pixel row
198+  B66F              ; bc - screen coords, b horiz, c vert
199+  B66F              ; Outputs:
200+  B66F              ; none - puts player into digging mode
201+  B66F              ;
202+  B66F              movement_spacebelowisdiggable:
203+  B66F 7E               ld a,(hl)                       ; get first pixel row
204+  B670 FE 55            cp 85
205+  B672 CA 7D B6         jp z, movement_spacebelowisdiggable3  ; row is dirt, can dig here
206+  B675 FE AA            cp 170
207+  B677 CA 7D B6         jp z, movement_spacebelowisdiggable3  ; row is dirt, can dig here
208+  B67A C3 69 B6         jp movement_spaceisdiggable1    ; the first row is not dirt, so don't bother checking the rest, can't dig
209+  B67D              movement_spacebelowisdiggable3:
210+  B67D 3E 08            ld a,8                          ; rows to check
211+  B67F 1E 00            ld e,0                          ; count of rows to dig
212+  B681              movement_spacebelowisdiggable0:
213+  B681 08               ex af,af'                       ; store the loop counter
214+  B682 7E               ld a,(hl)                       ; get current pixel row
215+  B683 FE 55            cp 85
216+  B685 CA 90 B6         jp z, movement_spacebelowisdiggable4  ; row is dirt, can dig here
217+  B688 FE AA            cp 170
218+  B68A CA 90 B6         jp z, movement_spacebelowisdiggable4  ; row is dirt, can dig here
219+  B68D C3 9F B6         jp movement_spacebelowisdiggable5     ; don't count this row and stop counting
220+  B690              movement_spacebelowisdiggable4:
221+  B690 1C               inc e                           ; inc count of rows to dig
222+  B691              movement_spacebelowisdiggable2:
223+  B691 79               ld a,c                          ; load the vertical coord
224+  B692 3C               inc a                           ; next row down
225+  B693 D5               push de                         ; need e for later
226+  B694 11 20 00         ld de,32
227+  B697 19               add hl,de                       ; otherwise, just go one down for hl, which means add 32, because of course
228+  B698 4F               ld c,a                          ; copy vert coord back to c
229+  B699 D1               pop de                          ; get e back
230+  B69A 08               ex af,af'                       ; get loop counter back
231+  B69B 3D               dec a                           ; incease loop counter
232+  B69C C2 81 B6         jp nz, movement_spacebelowisdiggable0
233+  B69F              movement_spacebelowisdiggable5:
234+  B69F 21 E0 B7         ld hl,player+6
235+  B6A2 36 01            ld (hl),1                       ; set the player into digging mode
236+  B6A4 23               inc hl
237+  B6A5 36 03            ld (hl),3                      ; set the number of frame to dig for
238+  B6A7 23               inc hl
239+  B6A8 73               ld (hl),e                       ; set the number of pixels to dig
240+  B6A9 C9               ret
241+  B6AA              movement_spacebelowisdiggable1:
242+  B6AA 21 E0 B7         ld hl,player+6
243+  B6AD 36 00            ld (hl),0                       ; set the player out of digging mode
244+  B6AF C9               ret
245+  B6B0
246+  B6B0              ;
247+  B6B0              ; Checks the contents of a cell above are diggable - ie, at least one pixel row has dirt. If the first one isn't dirt, stop
248+  B6B0              ; Inputs:
249+  B6B0              ; hl - memory location of top pixel row
250+  B6B0              ; bc - screen coords, b horiz, c vert
251+  B6B0              ; Outputs:
252+  B6B0              ; none - puts player into digging mode
253+  B6B0              ;
254+  B6B0              movement_spaceaboveisdiggable:
255+  B6B0 7E               ld a,(hl)                       ; get first pixel row
256+  B6B1 FE 55            cp 85
257+  B6B3 CA BE B6         jp z, movement_spaceaboveisdiggable3  ; row is dirt, can dig here
258+  B6B6 FE AA            cp 170
259+  B6B8 CA BE B6         jp z, movement_spaceaboveisdiggable3  ; row is dirt, can dig here
260+  B6BB C3 69 B6         jp movement_spaceisdiggable1    ; the first row is not dirt, so don't bother checking the rest, can't dig
261+  B6BE              movement_spaceaboveisdiggable3:
262+  B6BE 3E 08            ld a,8                          ; rows to check
263+  B6C0 1E 00            ld e,0                          ; count of rows to dig
264+  B6C2              movement_spaceaboveisdiggable0:
265+  B6C2 08               ex af,af'                       ; store the loop counter
266+  B6C3 7E               ld a,(hl)                       ; get current pixel row
267+  B6C4 FE 55            cp 85
268+  B6C6 CA D1 B6         jp z, movement_spaceaboveisdiggable4  ; row is dirt, can dig here
269+  B6C9 FE AA            cp 170
270+  B6CB CA D1 B6         jp z, movement_spaceaboveisdiggable4  ; row is dirt, can dig here
271+  B6CE C3 E1 B6         jp movement_spaceaboveisdiggable5     ; don't count this row and stop counting
272+  B6D1              movement_spaceaboveisdiggable4:
273+  B6D1 1C               inc e                           ; inc count of rows to dig
274+  B6D2              movement_spaceaboveisdiggable2:
275+  B6D2 79               ld a,c                          ; load the vertical coord
276+  B6D3 3D               dec a                           ; next row up
277+  B6D4 D5               push de                         ; need e for later
278+  B6D5 11 20 00         ld de,32
279+  B6D8 ED 52            sbc hl,de                       ; otherwise, just go one up for hl, which means sub 32, because of course
280+  B6DA 4F               ld c,a                          ; copy vert coord back to c
281+  B6DB D1               pop de                          ; get e back
282+  B6DC 08               ex af,af'                       ; get loop counter back
283+  B6DD 3D               dec a                           ; incease loop counter
284+  B6DE C2 C2 B6         jp nz, movement_spaceaboveisdiggable0
285+  B6E1              movement_spaceaboveisdiggable5:
286+  B6E1 21 E0 B7         ld hl,player+6
287+  B6E4 36 01            ld (hl),1                       ; set the player into digging mode
288+  B6E6 23               inc hl
289+  B6E7 36 05            ld (hl),5                       ; set the number of frame to dig for
290+  B6E9 23               inc hl
291+  B6EA 73               ld (hl),e                       ; set the number of pixels to dig
292+  B6EB C9               ret
293+  B6EC              movement_spaceaboveisdiggable1:
294+  B6EC 21 E0 B7         ld hl,player+6
295+  B6EF 36 00            ld (hl),0                       ; set the player out of digging mode
296+  B6F1 C9               ret
297+  B6F2
298+  B6F2              ;
299+  B6F2              ; Checks if the player can move down
300+  B6F2              ; Inputs:
301+  B6F2              ; bc - player coords, b horiz, c vert
302+  B6F2              ; Outputs:
303+  B6F2              ; de - 1 can move
304+  B6F2              movement_checkcanmove_down:
305+  B6F2 F5               push af
306+  B6F3 C5               push bc
307+  B6F4 CD DA A8         call sprites_scadd              ; get the memory location of cell into de
308+  B6F7 62 6B            ld hl,de                        ; look at cell directly underneath (add 256)
309+  B6F9 24               inc h                       ; memory location of cell beneath now in hl
310+  B6FA 3E 08            ld a,8                       ; look below
311+  B6FC 81               add c
312+  B6FD 4F               ld c,a
313+  B6FE CD 05 B6         call movement_linebelowisempty       ; check space is empty
314+  B701 7B               ld a,e                          ; check space empty flag
315+  B702 FE 00            cp 0
316+  B704 CA 0D B7         jp z, movement_checkcanmove_down1 ; can't move
317+  B707 CD 11 B9         call player_justmoved
318+  B70A C1               pop bc
319+  B70B F1               pop af
320+  B70C C9               ret
321+  B70D              movement_checkcanmove_down1:
322+  B70D C1               pop bc
323+  B70E CD DA A8         call sprites_scadd              ; get the memory location of cell into de
324+  B711 62 6B            ld hl,de                        ; look at cell directly underneath (add 256)
325+  B713 24               inc h
326+  B714 C5               push bc
327+  B715 CD 6F B6         call movement_spacebelowisdiggable    ; can't move here, but can we dig
328+  B718 11 00 00         ld de,0
329+  B71B C1               pop bc
330+  B71C F1               pop af
331+  B71D C9               ret
332+  B71E
333+  B71E              ;
334+  B71E              ; Checks if the player can move up
335+  B71E              ; Inputs:
336+  B71E              ; bc - player coords, b horiz, c vert
337+  B71E              ; Outputs:
338+  B71E              ; de - 1 can move
339+  B71E              movement_checkcanmove_up:
340+  B71E F5               push af
341+  B71F C5               push bc
342+  B720 CD DA A8         call sprites_scadd              ; get the memory location of cell into de
343+  B723 62 6B            ld hl,de                        ; look at cell directly above (subtract 32)
344+  B725 11 20 00         ld de,32
345+  B728 ED 52            sbc hl,de                       ; memory location of line above now in hl
346+  B72A 0D               dec c                           ; look above
347+  B72B CD 20 B6         call movement_lineaboveisempty       ; check space is empty
348+  B72E 7B               ld a,e                          ; check space empty flag
349+  B72F FE 00            cp 0
350+  B731 CA 3C B7         jp z, movement_checkcanmove_up1 ; can't move
351+  B734 1E 01            ld e,1
352+  B736 CD 11 B9         call player_justmoved
353+  B739 C1               pop bc
354+  B73A F1               pop af
355+  B73B C9               ret
356+  B73C              movement_checkcanmove_up1:
357+  B73C C1               pop bc
358+  B73D CD DA A8         call sprites_scadd              ; get the memory location of cell into de
359+  B740 62 6B            ld hl,de                        ; look at cell directly above (subtract 32)
360+  B742 11 20 00         ld de,32
361+  B745 ED 52            sbc hl,de                       ; memory location of line above now in hl
362+  B747 C5               push bc
363+  B748 CD B0 B6         call movement_spaceaboveisdiggable    ; can't move here, but can we dig
364+  B74B 11 00 00         ld de,0
365+  B74E C1               pop bc
366+  B74F F1               pop af
367+  B750 C9               ret
368+  B751
369+  B751              ;
370+  B751              ; Checks if the player can move right
371+  B751              ; Inputs:
372+  B751              ; bc - player coords, b horiz, c vert
373+  B751              ; Outputs:
374+  B751              ; de - 1 can move
375+  B751              movement_checkcanmove_right:
376+  B751 F5               push af
377+  B752 C5               push bc
378+  B753 CD DA A8         call sprites_scadd              ; get the memory location of cell into de
379+  B756 62 6B            ld hl,de                        ; look at cell directly to the right (add 1)
380+  B758 3E 08            ld a,8
381+  B75A 80               add b                           ; move one cell right
382+  B75B 47               ld b,a
383+  B75C 23               inc hl                          ; memory location of cell to the right now in hl
384+  B75D CD 8B B5         call movement_spaceisempty       ; check space is empty
385+  B760 7B               ld a,e                          ; check space empty flag
386+  B761 FE 00            cp 0
387+  B763 CA 6C B7         jp z, movement_checkcanmove_right1 ; can't move
388+  B766 CD 11 B9         call player_justmoved
389+  B769 C1               pop bc
390+  B76A F1               pop af
391+  B76B C9               ret
392+  B76C              movement_checkcanmove_right1:
393+  B76C C1               pop bc
394+  B76D CD DA A8         call sprites_scadd              ; get the memory location of cell into de
395+  B770 62 6B            ld hl,de
396+  B772 23               inc hl                          ; memory location of cell to the right now in hl
397+  B773 C5               push bc
398+  B774 CD 3B B6         call movement_spaceisdiggable    ; can't move here, but can we dig
399+  B777 11 00 00         ld de,0
400+  B77A C1               pop bc
401+  B77B F1               pop af
402+  B77C C9               ret
403+  B77D
404+  B77D              ;
405+  B77D              ; Checks if the player can move left
406+  B77D              ; Inputs:
407+  B77D              ; bc - player coords, b horiz, c vert
408+  B77D              ; Outputs:
409+  B77D              ; de - 1 can move
410+  B77D              movement_checkcanmove_left:
411+  B77D F5               push af
412+  B77E C5               push bc
413+  B77F CD DA A8         call sprites_scadd              ; get the memory location of cell into de
414+  B782 62 6B            ld hl,de                        ; look at cell directly to the right (add 1)
415+  B784 78               ld a,b
416+  B785 06 08            ld b,8
417+  B787 90               sub b                           ; move one cell left
418+  B788 47               ld b,a
419+  B789 2B               dec hl                          ; memory location of cell to the right now in hl
420+  B78A CD 8B B5         call movement_spaceisempty       ; check space is empty
421+  B78D 7B               ld a,e                          ; check space empty flag
422+  B78E FE 00            cp 0
423+  B790 CA 99 B7         jp z, movement_checkcanmove_left1 ; can't move
424+  B793 CD 11 B9         call player_justmoved
425+  B796 C1               pop bc
426+  B797 F1               pop af
427+  B798 C9               ret
428+  B799              movement_checkcanmove_left1:
429+  B799 C1               pop bc
430+  B79A CD DA A8         call sprites_scadd              ; get the memory location of cell into de
431+  B79D 62 6B            ld hl,de
432+  B79F 2B               dec hl                          ; memory location of cell to the right now in hl
433+  B7A0 C5               push bc
434+  B7A1 CD 3B B6         call movement_spaceisdiggable    ; can't move here, but can we dig
435+  B7A4 11 00 00         ld de,0
436+  B7A7 C1               pop bc
437+  B7A8 F1               pop af
438+  B7A9 C9               ret
# file closed: game/movement.asm
 36   B7AA                  include "game\game.asm"
# file opened: game/game.asm
  1+  B7AA              ;
  2+  B7AA              ; The current frame count, incremented each frame
  3+  B7AA              ;
  4+  B7AA              game_framenumber:
  5+  B7AA 00               defb    0
  6+  B7AB
  7+  B7AB              ;
  8+  B7AB              ; The number of players
  9+  B7AB              ;
 10+  B7AB              game_numberplayers:
 11+  B7AB 01               defb 1
 12+  B7AC
 13+  B7AC              ;
 14+  B7AC              ; The current player
 15+  B7AC              ;
 16+  B7AC              game_currentplayer:
 17+  B7AC 01               defb 1
 18+  B7AD
 19+  B7AD              ;
 20+  B7AD              ; The default number of lives
 21+  B7AD              ;
 22+  B7AD              game_numberlives:
 23+  B7AD 01               defb 1
 24+  B7AE
 25+  B7AE              ;
 26+  B7AE              ; Moves to the next player
 27+  B7AE              ;
 28+  B7AE              game_changeplayer:
 29+  B7AE 3A AC B7         ld a,(game_currentplayer)
 30+  B7B1 FE 01            cp 1
 31+  B7B3 C8               ret z                       ; if just one player, no need to change
 32+  B7B4 3D               dec a                       ; otherwise decrease by one
 33+  B7B5 EE 01            xor 1                       ; xor with one to flip
 34+  B7B7 3C               inc a                       ; increment
 35+  B7B8 21 AC B7         ld hl,game_currentplayer
 36+  B7BB 77               ld (hl),a                   ; store
 37+  B7BC C9               ret
 38+  B7BD
 39+  B7BD              ;
 40+  B7BD              ; Sets the number of players at the start of the game
 41+  B7BD              ; Inputs:
 42+  B7BD              ; a - number of players
 43+  B7BD              game_setnumberofplayers:
 44+  B7BD 21 AB B7         ld hl,game_numberplayers
 45+  B7C0 77               ld (hl),a
 46+  B7C1
 47+  B7C1              ;
 48+  B7C1              ; Increment frame number by 1
 49+  B7C1              ;
 50+  B7C1              game_incrementframe:
 51+  B7C1 3A AA B7         ld a,(game_framenumber)
 52+  B7C4 FE FF            cp 255
 53+  B7C6 C2 CB B7         jp nz,game_incrementframe0
 54+  B7C9 3E 00            ld a,0
 55+  B7CB              game_incrementframe0:
 56+  B7CB 3C               inc a
 57+  B7CC 32 AA B7         ld (game_framenumber),a
 58+  B7CF C9               ret
 59+  B7D0
 60+  B7D0              ;
 61+  B7D0              ; Returns current frame
 62+  B7D0              ; Outputs:
 63+  B7D0              ; a - current frame
 64+  B7D0              ;
 65+  B7D0              game_getcurrentframe:
 66+  B7D0 3A AA B7         ld a,(game_framenumber)
 67+  B7D3 C9               ret
 68+  B7D4
 69+  B7D4              ;
 70+  B7D4              ; Resets current frame
 71+  B7D4              ;
 72+  B7D4              game_resetcurrentframe:
 73+  B7D4 21 AA B7         ld hl,game_framenumber
 74+  B7D7 36 00            ld (hl),0
 75+  B7D9 C9               ret
# file closed: game/game.asm
 37   B7DA                  include "game\player.asm"
# file opened: game/player.asm
  1+  B7DA              ;
  2+  B7DA              ;   Data for current player
  3+  B7DA              ;
  4+  B7DA              player:
  5+  B7DA 00 00            defb    0,0                 ; horiz,vert (+0,+1)
  6+  B7DC 02 00 01         defb    2,0,1               ; dir (0 up, 1 left, 2 right, 3 down), frame, frame transition count (+2,+3,+4)
  7+  B7DF 00               defb    0                   ; auto move remaining (+5)
  8+  B7E0 00 00 00         defb    0,0,0               ; is digging (0 no), digging count, pixels to di (+6,+7,+8)
  9+  B7E3 00               defb    0                   ; lives remaining (+9)
 10+  B7E4 00               defb    0                   ; died this life (+10)
 11+  B7E5 00 00            defb    0,0                 ; crushed (+11), frames (+12)
 12+  B7E7 00               defb    0                   ; can finish level, whether can finish level or not (+13)
 13+  B7E8
 14+  B7E8              ;
 15+  B7E8              ; Initializes a player at start of game
 16+  B7E8              ; Copy initial coords, copy lives, copy score
 17+  B7E8              ;
 18+  B7E8              player_init_gamestart:
 19+  B7E8 3A AD B7         ld a,(game_numberlives)
 20+  B7EB 32 6C B8         ld (player1_lives),a
 21+  B7EE 32 6D B8         ld (player2_lives),a                        ; set the initial number of lives at game start
 22+  B7F1
 23+  B7F1 21 70 B8         ld hl,player1_score+2
 24+  B7F4 06 06            ld b,6
 25+  B7F6              player_init_gamestart0:
 26+  B7F6 36 30            ld (hl),48
 27+  B7F8 23               inc hl
 28+  B7F9 10 FB            djnz player_init_gamestart0                 ; zero out player 1 score
 29+  B7FB 21 79 B8         ld hl,player2_score+2
 30+  B7FE 06 06            ld b,6
 31+  B800              player_init_gamestart1:
 32+  B800 36 30            ld (hl),48
 33+  B802 23               inc hl
 34+  B803 10 FB            djnz player_init_gamestart1                 ; zero out player 2 score
 35+  B805 C9               ret
 36+  B806
 37+  B806              ;
 38+  B806              ; Initializes a player at start of a life
 39+  B806              ; Copy initial coords, copy lives, copy score
 40+  B806              ;
 41+  B806              player_init_lifestart:
 42+  B806 21 DF B7         ld hl,player+5
 43+  B809 06 09            ld b,9                      ; initialise 9 properties
 44+  B80B              player_init_lifestart2:
 45+  B80B 36 00            ld (hl),0
 46+  B80D 23               inc hl
 47+  B80E 10 FB            djnz player_init_lifestart2
 48+  B810
 49+  B810 ED 4B 22 80      ld bc,(init_coord)
 50+  B814 ED 43 DA B7      ld (player),bc
 51+  B818 01 E3 B7         ld bc,player+9
 52+  B81B 3A 6C B8         ld a,(player1_lives)
 53+  B81E 02               ld (bc),a
 54+  B81F
 55+  B81F CD 47 BE         call diamonds_init      ; initialise gems
 56+  B822
 57+  B822 01 06 00         ld bc,6
 58+  B825 11 8D BC         ld de,scores_current+2
 59+  B828 3A AC B7         ld a,(game_currentplayer)
 60+  B82B FE 01            cp 1
 61+  B82D C2 36 B8         jp nz,player_init_lifestart0
 62+  B830 21 70 B8         ld hl,player1_score+2
 63+  B833 C3 39 B8         jp player_init_lifestart1
 64+  B836              player_init_lifestart0:
 65+  B836 21 79 B8         ld hl,player2_score+2
 66+  B839              player_init_lifestart1:
 67+  B839 ED B0            ldir
 68+  B83B C9               ret
 69+  B83C
 70+  B83C              ;
 71+  B83C              ; Finalises a player at end of a life
 72+  B83C              ; Copy lives, copy score
 73+  B83C              ;
 74+  B83C              player_lifeend:
 75+  B83C 01 E3 B7         ld bc,player+9
 76+  B83F 0A               ld a,(bc)
 77+  B840 01 6C B8         ld bc,player1_lives
 78+  B843 02               ld (bc),a
 79+  B844 CD 48 B8         call player_recordcurrentscore
 80+  B847 C9               ret
 81+  B848
 82+  B848              ;
 83+  B848              ; Copies the current score in the current
 84+  B848              ;
 85+  B848              player_recordcurrentscore:
 86+  B848 01 06 00         ld bc,6                  ; copy current score back to correct player
 87+  B84B 21 8D BC         ld hl,scores_current+2
 88+  B84E 3A AC B7         ld a,(game_currentplayer)
 89+  B851 FE 01            cp 1
 90+  B853 C2 5C B8         jp nz,player_lifeend0
 91+  B856 11 70 B8         ld de,player1_score+2
 92+  B859 C3 5F B8         jp player_lifeend1
 93+  B85C              player_lifeend0:
 94+  B85C 11 79 B8         ld de,player2_score+2
 95+  B85F              player_lifeend1:
 96+  B85F ED B0            ldir
 97+  B861 C9               ret
 98+  B862
 99+  B862              ;
100+  B862              ; Player just died, subtract a life
101+  B862              ;
102+  B862              player_died:
103+  B862 01 E3 B7         ld bc,player+9
104+  B865 0A               ld a,(bc)
105+  B866 3D               dec a
106+  B867 02               ld (bc),a
107+  B868 CD 3C B8         call player_lifeend
108+  B86B C9               ret
109+  B86C
110+  B86C              ;
111+  B86C              ; Player lives
112+  B86C              ;
113+  B86C              player1_lives:
114+  B86C 03               defb 3
115+  B86D              player2_lives:
116+  B86D 03               defb 3
117+  B86E
118+  B86E              ;
119+  B86E              ; Player scores
120+  B86E              ;
121+  B86E              player1_score:
122+  B86E 04 01 30 30      defb 4,1,'000000',255
122+  B872 30 30 30 30
122+  B876 FF
123+  B877              player2_score:
124+  B877 16 01 30 30      defb 22,1,'000000',255
124+  B87B 30 30 30 30
124+  B87F FF
125+  B880
126+  B880              ;
127+  B880              ; Kills a player this life
128+  B880              ;
129+  B880              player_killplayer:
130+  B880 21 E4 B7         ld hl,player+10
131+  B883 36 01            ld (hl),1
132+  B885 C9               ret
133+  B886
134+  B886              ;
135+  B886              ; Crush a player this life
136+  B886              ;
137+  B886              player_crushplayer:
138+  B886 21 E5 B7         ld hl,player+11             ; mark as crushed
139+  B889 36 01            ld (hl),1
140+  B88B C9               ret
141+  B88C
142+  B88C              ;
143+  B88C              ; Draws the player at the current position or deletes them
144+  B88C              ;
145+  B88C              player_drawplayer:
146+  B88C 3A DC B7         ld a,(player+2)             ; get the current direction
147+  B88F FE 03            cp 3
148+  B891 C2 96 B8         jp nz,player_drawplayer0
149+  B894 3E 00            ld a,0                      ; if 3, then down, so set the direction to 0 since the sprite is the same as up
150+  B896              player_drawplayer0:
151+  B896 5F               ld e,a                      ; store in e
152+  B897 3A E5 B7         ld a,(player+11)             ; get the dying flag
153+  B89A FE 01            cp 1
154+  B89C CA AE B8         jp z,player_drawplayer3     ; if it's one, we're being crushed
155+  B89F              player_drawplayer4:
156+  B89F 3A E0 B7         ld a,(player+6)             ; get the dig flag
157+  B8A2 FE 01            cp 1
158+  B8A4 CA F7 B8         jp z,player_drawplayer1    ; get dig frame
159+  B8A7 3A DD B7         ld a,(player+3)             ; this is normal movement so get the current frame
160+  B8AA 83               add a,e
161+  B8AB C3 FC B8         jp player_drawplayer2
162+  B8AE              player_drawplayer3:
163+  B8AE 21 E6 B7         ld hl,player+12
164+  B8B1 7E               ld a,(hl)                  ; crushing, so get the current anim flag
165+  B8B2 FE 00            cp 0
166+  B8B4 C2 BD B8         jp nz,player_drawplayer5    ; if this isn't zero, then this isn't the first time round, so do the crush anim
167+  B8B7 3E 64            ld a,100
168+  B8B9 77               ld (hl),a                   ; otherwise, load up the anim frames
169+  B8BA C3 9F B8         jp player_drawplayer4       ; and return to the main loop to remove the current frame
170+  B8BD              player_drawplayer5:
171+  B8BD 3D               dec a
172+  B8BE 77               ld (hl),a
173+  B8BF FE 00            cp 0
174+  B8C1 CC 80 B8         call z,player_killplayer    ; final animation, so kill the player
175+  B8C4 FE 14            cp 20                        ; check if we should move the rock
176+  B8C6 C2 DA B8         jp nz,player_drawplayer8
177+  B8C9 D9               exx
178+  B8CA 08               ex af,af'
179+  B8CB ED 4B 2E BB      ld bc,(rocks_killerrock)    ; get the coords of the rock that killed us
180+  B8CF 21 10 B2         ld hl,sprites+72
181+  B8D2 CD 97 A8         call sprites_drawsprite     ; draw a rock over current
182+  B8D5 08               ex af,af'
183+  B8D6 D9               exx
184+  B8D7 C3 F0 B8         jp player_drawplayer6       ; continue drawing player
185+  B8DA              player_drawplayer8:
186+  B8DA FE 14            cp 20
187+  B8DC D2 F0 B8         jp nc,player_drawplayer6    ; if not in last 10 frames, draw as normal
188+  B8DF ED 4B DA B7      ld bc,(player)
189+  B8E3 CD 1E A8         call screen_getattraddressfromscreencoords ; get the attr address into de
190+  B8E6 62 6B            ld hl,de
191+  B8E8 36 42            ld (hl),66
192+  B8EA 21 10 B2         ld hl,sprites+72            ; otherwise, player is rock
193+  B8ED C3 06 B9         jp player_drawplayer7
194+  B8F0              player_drawplayer6:
195+  B8F0 E6 01            and 1                       ; check for odd
196+  B8F2 C6 0A            add 10                      ; add 10, to get either 10 or 11
197+  B8F4 C3 FC B8         jp player_drawplayer2
198+  B8F7              player_drawplayer1:
199+  B8F7 3A DC B7         ld a,(player+2)             ; digging, get the current direction again, because want all four
200+  B8FA C6 06            add a,6                     ; add direction to 6 to get frame
201+  B8FC              player_drawplayer2:
202+  B8FC 07               rlca
203+  B8FD 07               rlca
204+  B8FE 07               rlca                        ; multiply by eight
205+  B8FF 6F               ld l,a
206+  B900 26 00            ld h,0
207+  B902 11 4F B2         ld de,player_sprite
208+  B905 19               add hl,de                   ; load hl with the location of the player sprite data
209+  B906              player_drawplayer7:
210+  B906 ED 4B DA B7      ld bc,(player)              ; load bc with the start coords
211+  B90A CD 97 A8         call sprites_drawsprite     ; call the routine to draw the sprite
212+  B90D CD 3D B9         call player_storeupdatedlines ; log updated rows
213+  B910 C9               ret
214+  B911
215+  B911
216+  B911              ;
217+  B911              ; Runs after the player just moved. Changes animation frame if required
218+  B911              ;
219+  B911              player_justmoved:
220+  B911 D9               exx
221+  B912 3A DE B7         ld a,(player+4)             ; get the transition count
222+  B915 FE 00            cp 0
223+  B917 CA 1D B9         jp z, player_justmoved2     ; if zero reset and change the frame
224+  B91A C3 37 B9         jp player_justmoved1       ; otherwise decrease and continue
225+  B91D              player_justmoved2:
226+  B91D                  ; reset and change frame in here
227+  B91D 3E 01            ld a,1
228+  B91F 32 DE B7         ld (player+4),a            ; reset back to whatever
229+  B922 3A DD B7         ld a,(player+3)             ; load the frame
230+  B925 FE 03            cp 3                       ; flip between 3 and 0
231+  B927 C2 2F B9         jp nz, player_justmoved4
232+  B92A 3E 00            ld a,0
233+  B92C C3 31 B9         jp player_justmoved5
234+  B92F              player_justmoved4:
235+  B92F 3E 03            ld a,3
236+  B931              player_justmoved5:
237+  B931 32 DD B7         ld (player+3),a           ; save back
238+  B934 C3 3B B9         jp player_justmoved3
239+  B937              player_justmoved1:
240+  B937                  ; decrease count
241+  B937 3D               dec a
242+  B938 32 DE B7         ld (player+4),a
243+  B93B              player_justmoved3:
244+  B93B D9               exx;
245+  B93C C9               ret
246+  B93D
247+  B93D              ;
248+  B93D              ; Stores the updated rows associated with the player
249+  B93D              ;
250+  B93D              player_storeupdatedlines:
251+  B93D ED 4B DA B7      ld bc,(player)          ; get the screen coords into bc
252+  B941 79               ld a,c                  ; get the player block coords of current block
253+  B942 E6 F8            and 248                 ; find closest multiple of eight
254+  B944 0F               rrca
255+  B945 0F               rrca
256+  B946 0F               rrca                    ; divide by 8
257+  B947 ED 5B F3 A6      ld de,(screen_offset)          ; load the screen offset, this is in rows
258+  B94B 93               sub e
259+  B94C F5               push af
260+  B94D CD A6 A5         call buffer_marklineforupdate  ; store current row in updated lines
261+  B950 F1               pop af
262+  B951 3D               dec a
263+  B952 F5               push af
264+  B953 CD A6 A5         call buffer_marklineforupdate  ; store line above
265+  B956 F1               pop af
266+  B957 3C               inc a
267+  B958 3C               inc a
268+  B959 CD A6 A5         call buffer_marklineforupdate  ; store line beneath
269+  B95C C9               ret
270+  B95D
271+  B95D              ;
272+  B95D              ; Called if the player has collected a diamond. Checks the current coord. If it is the start coord, then return complete
273+  B95D              ; Outputs:
274+  B95D              ; a - 1 for completed level
275+  B95D              player_checkforexit:
276+  B95D ED 4B DA B7      ld bc,(player)                 ; get player coords
277+  B961 ED 5B 22 80      ld de,(init_coord)             ; get start coords
278+  B965 78               ld a,b
279+  B966 BA               cp d                         ; compare horiz
280+  B967 C2 72 B9         jp nz,player_checkforexit1
281+  B96A 79               ld a,c
282+  B96B BB               cp e                        ; compare vert
283+  B96C C2 72 B9         jp nz,player_checkforexit1
284+  B96F              player_checkforexit0:
285+  B96F 3E 01            ld a,1                       ; hasn't completed
286+  B971 C9               ret
287+  B972              player_checkforexit1:
288+  B972 3E 00            ld a,0                       ; has completed
289+  B974 C9               ret
# file closed: game/player.asm
 38   B975                  include "game\ship.asm"
# file opened: game/ship.asm
  1+  B975              ;
  2+  B975              ; Ship initial position: vert,horiz
  3+  B975              ;
  4+  B975              ship_initpos:
  5+  B975 00 24            defb 0,36
  6+  B977              ship_initpos2:
  7+  B977 00 00            defb 0,0
  8+  B979              ship_frame:
  9+  B979 00               defb 0
 10+  B97A              ;
 11+  B97A              ; The current memory location
 12+  B97A              ;
 13+  B97A              ship_current_sprite:
 14+  B97A 00 00            defb 0,0
 15+  B97C
 16+  B97C              ship_current_coords:
 17+  B97C 00 00            defb 0,0
 18+  B97E
 19+  B97E              ;
 20+  B97E              ;   Draw and land the ship - first move the ship down, then across, drawing the player in the middle
 21+  B97E              ;
 22+  B97E              ship_land:
 23+  B97E ED 4B 75 B9      ld bc,(ship_initpos)
 24+  B982 ED 43 77 B9      ld (ship_initpos2),bc        ; save the initial position for later use
 25+  B986 1E 00            ld e,0                      ; store a flag to track first time round
 26+  B988 06 09            ld b,9                      ; move down 8 pixels
 27+  B98A              ship_land0:
 28+  B98A C5               push bc
 29+  B98B 7B               ld a,e
 30+  B98C D5               push de                     ; store de for next time round
 31+  B98D FE 01            cp 1                        ; check first time flag
 32+  B98F C2 A4 B9         jp nz,ship_land1             ; don't draw over previous one if first time
 33+  B992 CD 0C BA         call ship_draw_full         ; delete old one
 34+  B995 CD E1 B9         call ship_change_frame      ; increment the frame
 35+  B998 ED 4B 77 B9      ld bc,(ship_initpos2)       ; get the current coords
 36+  B99C 81 C6 01         add c,1                     ; move down one pixels
 37+  B99F 4F               ld c,a
 38+  B9A0 ED 43 77 B9      ld (ship_initpos2),bc
 39+  B9A4              ship_land1:
 40+  B9A4 CD 0C BA         call ship_draw_full         ; draw the ship
 41+  B9A7 CD F6 B9         call ship_draw_screen
 42+  B9AA D1               pop de
 43+  B9AB 1E 01            ld e,1
 44+  B9AD C1               pop bc
 45+  B9AE 10 DA            djnz ship_land0             ; repeat for downward movement
 46+  B9B0                  ; done moving down
 47+  B9B0                  ; now move across
 48+  B9B0 CD 8C B8         call player_drawplayer      ; draw player
 49+  B9B3 CD 0C BA         call ship_draw_full         ; delete old one
 50+  B9B6 1E 00            ld e,0                      ; store a flag to track first time round
 51+  B9B8 06 14            ld b,20                      ; move back 20 pixels pixels
 52+  B9BA              ship_land3:
 53+  B9BA C5               push bc
 54+  B9BB 7B               ld a,e
 55+  B9BC D5               push de                     ; store de for next time round
 56+  B9BD FE 01            cp 1                        ; check first time flag
 57+  B9BF C2 D4 B9         jp nz,ship_land2             ; don't draw over previous one if first time
 58+  B9C2 CD 0C BA         call ship_draw_full         ; delete old one
 59+  B9C5 CD E1 B9         call ship_change_frame      ; increment the frame
 60+  B9C8 ED 4B 77 B9      ld bc,(ship_initpos2)       ; get the current coords
 61+  B9CC 78               ld a,b
 62+  B9CD D6 01            sub 1                       ; move back one pixels
 63+  B9CF 47               ld b,a
 64+  B9D0 ED 43 77 B9      ld (ship_initpos2),bc
 65+  B9D4              ship_land2:
 66+  B9D4 CD 0C BA         call ship_draw_full         ; draw the ship
 67+  B9D7 CD F6 B9         call ship_draw_screen       ; draw the frame to screen by clearing the buffer
 68+  B9DA D1               pop de
 69+  B9DB 1E 01            ld e,1                      ; set e to 1 to indicate >1 time
 70+  B9DD C1               pop bc
 71+  B9DE 10 DA            djnz ship_land3             ; repeat for vertical movement
 72+  B9E0 C9               ret
 73+  B9E1
 74+  B9E1              ;
 75+  B9E1              ; Swap the animation frame between 0 and 32. This will be added to the memory location later
 76+  B9E1              ;
 77+  B9E1              ship_change_frame:
 78+  B9E1 F5               push af
 79+  B9E2 3A 79 B9         ld a,(ship_frame)
 80+  B9E5 FE 00            cp 0
 81+  B9E7 CA EF B9         jp z,ship_change_frame0
 82+  B9EA 3E 00            ld a,0                      ; flip to 0
 83+  B9EC C3 F1 B9         jp ship_change_frame1
 84+  B9EF              ship_change_frame0:
 85+  B9EF 3E 20            ld a,32                      ; flip to 32
 86+  B9F1              ship_change_frame1:
 87+  B9F1 32 79 B9         ld (ship_frame),a            ; save the frame
 88+  B9F4 F1               pop af
 89+  B9F5 C9               ret
 90+  B9F6
 91+  B9F6              ship_draw_screen:
 92+  B9F6 3E 00            ld a,0
 93+  B9F8 CD A6 A5         call buffer_marklineforupdate
 94+  B9FB 3E 01            ld a,1
 95+  B9FD CD A6 A5         call buffer_marklineforupdate
 96+  BA00 3E 02            ld a,2
 97+  BA02 CD A6 A5         call buffer_marklineforupdate   ; mark the first three rows for update
 98+  BA05 76               halt
 99+  BA06 F3               di
100+  BA07 CD 3A A6         call buffer_buffertoscreen  ; copy buffer to screen
101+  BA0A FB               ei                          ; enable interupts
102+  BA0B C9               ret
103+  BA0C
104+  BA0C              ship_draw_full:
105+  BA0C 21 AF B2         ld hl,ship_sprite
106+  BA0F ED 4B 77 B9      ld bc,(ship_initpos2)         ; load bc with the start coords
107+  BA13 22 7A B9         ld (ship_current_sprite),hl  ; put into memory
108+  BA16 ED 43 7C B9      ld (ship_current_coords),bc  ; put into memory
109+  BA1A CD 39 BA         call ship_draw
110+  BA1D 08               ex af,af'
111+  BA1E 3A 79 B9         ld a,(ship_frame)            ; get the animation frame
112+  BA21 16 00            ld d,0
113+  BA23 5F               ld e,a
114+  BA24 19               add hl,de
115+  BA25 22 7A B9         ld (ship_current_sprite),hl  ; put into memory
116+  BA28 08               ex af,af'
117+  BA29 ED 4B 77 B9      ld bc,(ship_initpos2)         ; load bc with the start coords
118+  BA2D 81 C6 08         add c,8                      ; move one line down
119+  BA30 4F               ld c,a
120+  BA31 ED 43 7C B9      ld (ship_current_coords),bc  ; put into memory
121+  BA35 CD 39 BA         call ship_draw
122+  BA38 C9               ret
123+  BA39
124+  BA39              ;
125+  BA39              ; Draw the ship
126+  BA39              ; Inputs:
127+  BA39              ; None, all in memory
128+  BA39              ;
129+  BA39              ship_draw:
130+  BA39 3E 04            ld a,4                              ; 4 pieces per half
131+  BA3B              ship_draw0:
132+  BA3B F5               push af
133+  BA3C 2A 7A B9         ld hl,(ship_current_sprite)
134+  BA3F ED 4B 7C B9      ld bc,(ship_current_coords)         ; load bc with the start coords
135+  BA43 CD 97 A8         call sprites_drawsprite
136+  BA46 2A 7A B9         ld hl,(ship_current_sprite)
137+  BA49 ED 4B 7C B9      ld bc,(ship_current_coords)         ; load bc with the start coords
138+  BA4D 11 08 00         ld de,8
139+  BA50 19               add hl,de
140+  BA51 80 C6 08         add b,8
141+  BA54 47               ld b,a
142+  BA55 22 7A B9         ld (ship_current_sprite),hl         ; put into memory
143+  BA58 ED 43 7C B9      ld (ship_current_coords),bc         ; put into memory
144+  BA5C F1               pop af
145+  BA5D 3D               dec a
146+  BA5E FE 00            cp 0
147+  BA60 C2 3B BA         jp nz,ship_draw0
148+  BA63
149+  BA63 C9               ret
150+  BA64
# file closed: game/ship.asm
 39   BA64                  include "game\tank.asm"
# file opened: game/tank.asm
  1+  BA64              ;
  2+  BA64              ; tank initial position: vert,horiz
  3+  BA64              ;
  4+  BA64              tank_initpos:
  5+  BA64 10 D0            defb 16,208
  6+  BA66              tank_initpos2:
  7+  BA66 00 00            defb 0,0
  8+  BA68              tank_frame:
  9+  BA68 00               defb 0
 10+  BA69              tank_anim:
 11+  BA69 11               defb 17
 12+  BA6A              ;
 13+  BA6A              ; The current memory location
 14+  BA6A              ;
 15+  BA6A              tank_current_sprite:
 16+  BA6A 00 00            defb 0,0
 17+  BA6C
 18+  BA6C              tank_current_coords:
 19+  BA6C 00 00            defb 0,0
 20+  BA6E
 21+  BA6E              ;
 22+  BA6E              ; Initialise the tank
 23+  BA6E              ;
 24+  BA6E              tank_init:
 25+  BA6E ED 4B 64 BA      ld bc,(tank_initpos)
 26+  BA72 ED 43 66 BA      ld (tank_initpos2),bc       ; save the initial position for later use
 27+  BA76 21 68 BA         ld hl,tank_frame
 28+  BA79 36 00            ld (hl),0
 29+  BA7B 21 69 BA         ld hl,tank_anim
 30+  BA7E 36 11            ld (hl),17                  ; reset tank
 31+  BA80 C9               ret
 32+  BA81
 33+  BA81              ;
 34+  BA81              ;   Draw and move the tank
 35+  BA81              ;   Start processing at frame 200
 36+  BA81              ;   Don't move if anim is zero
 37+  BA81              ;   Decrement frame if moved
 38+  BA81              ;
 39+  BA81              tank_process:
 40+  BA81 3A 69 BA         ld a,(tank_anim)
 41+  BA84 FE 00            cp 0
 42+  BA86 C8               ret z                       ; return if we've already moved
 43+  BA87 CD D0 B7         call game_getcurrentframe   ; get the current frame number into a
 44+  BA8A FE 4B            cp 75
 45+  BA8C D8               ret c                       ; return if the frame number is below 100
 46+  BA8D CD 98 BA         call tank_move              ; move tank if not
 47+  BA90 3A 69 BA         ld a,(tank_anim)
 48+  BA93 3D               dec a
 49+  BA94 32 69 BA         ld (tank_anim),a            ; decrease the anim count
 50+  BA97 C9               ret
 51+  BA98
 52+  BA98              tank_move:
 53+  BA98 ED 4B 66 BA      ld bc,(tank_initpos2)
 54+  BA9C C5               push bc
 55+  BA9D 3A 69 BA         ld a,(tank_anim)
 56+  BAA0 FE 11            cp 17                       ; check first time flag
 57+  BAA2 CA B4 BA         jp z,tank_move1             ; don't draw over previous one if first time
 58+  BAA5 CD B9 BA         call tank_draw_full         ; delete old one
 59+  BAA8 ED 4B 66 BA      ld bc,(tank_initpos2)       ; get the current coords
 60+  BAAC 78               ld a,b
 61+  BAAD D6 01            sub 1                       ; move back one pixels
 62+  BAAF 47               ld b,a
 63+  BAB0 ED 43 66 BA      ld (tank_initpos2),bc
 64+  BAB4              tank_move1:
 65+  BAB4 CD B9 BA         call tank_draw_full         ; draw the tank
 66+  BAB7 C1               pop bc
 67+  BAB8 C9               ret
 68+  BAB9
 69+  BAB9              tank_draw_full:
 70+  BAB9 21 0F B3         ld hl,tank_sprite
 71+  BABC ED 4B 66 BA      ld bc,(tank_initpos2)         ; load bc with the start coords
 72+  BAC0 22 6A BA         ld (tank_current_sprite),hl  ; put into memory
 73+  BAC3 ED 43 6C BA      ld (tank_current_coords),bc  ; put into memory
 74+  BAC7 CD F0 BA         call tank_draw
 75+  BACA 08               ex af,af'
 76+  BACB 3A 68 BA         ld a,(tank_frame)            ; get the animation frame
 77+  BACE 16 00            ld d,0
 78+  BAD0 5F               ld e,a
 79+  BAD1 19               add hl,de
 80+  BAD2 22 6A BA         ld (tank_current_sprite),hl  ; put into memory
 81+  BAD5 08               ex af,af'
 82+  BAD6 ED 4B 66 BA      ld bc,(tank_initpos2)         ; load bc with the start coords
 83+  BADA 81 C6 08         add c,8                      ; move one line down
 84+  BADD 4F               ld c,a
 85+  BADE ED 43 6C BA      ld (tank_current_coords),bc  ; put into memory
 86+  BAE2 CD F0 BA         call tank_draw
 87+  BAE5 3E 02            ld a,2
 88+  BAE7 CD A6 A5         call buffer_marklineforupdate
 89+  BAEA 3E 03            ld a,3
 90+  BAEC CD A6 A5         call buffer_marklineforupdate   ; mark the first two rows for update
 91+  BAEF C9               ret
 92+  BAF0
 93+  BAF0              ;
 94+  BAF0              ; Draw the tank
 95+  BAF0              ; Inputs:
 96+  BAF0              ; None, all in memory
 97+  BAF0              ;
 98+  BAF0              tank_draw:
 99+  BAF0 3E 04            ld a,4                              ; 4 pieces per half
100+  BAF2              tank_draw0:
101+  BAF2 F5               push af
102+  BAF3 2A 6A BA         ld hl,(tank_current_sprite)
103+  BAF6 ED 4B 6C BA      ld bc,(tank_current_coords)         ; load bc with the start coords
104+  BAFA CD 97 A8         call sprites_drawsprite
105+  BAFD 2A 6A BA         ld hl,(tank_current_sprite)
106+  BB00 ED 4B 6C BA      ld bc,(tank_current_coords)         ; load bc with the start coords
107+  BB04 11 08 00         ld de,8
108+  BB07 19               add hl,de
109+  BB08 80 C6 08         add b,8
110+  BB0B 47               ld b,a
111+  BB0C 22 6A BA         ld (tank_current_sprite),hl         ; put into memory
112+  BB0F ED 43 6C BA      ld (tank_current_coords),bc         ; put into memory
113+  BB13 F1               pop af
114+  BB14 3D               dec a
115+  BB15 FE 00            cp 0
116+  BB17 C2 F2 BA         jp nz,tank_draw0
117+  BB1A
118+  BB1A C9               ret
119+  BB1B
# file closed: game/tank.asm
 40   BB1B                  include "game\rocks.asm"
# file opened: game/rocks.asm
  1+  BB1B              ;
  2+  BB1B              ; A structure of falling rocks
  3+  BB1B              ; Assume we'll never have more than 4 falling at any one time
  4+  BB1B              ; (1,2 - 16 bit memory location for rock graphic),state (0 fell, 1 falling, 2 wobbling), countdown
  5+  BB1B              ;
  6+  BB1B              rocks_falling:
  7+  BB1B 00 00 00 00      defb 0,0,0,0
  8+  BB1F 00 00 00 00      defb 0,0,0,0
  9+  BB23 00 00 00 00      defb 0,0,0,0
 10+  BB27 00 00 00 00      defb 0,0,0,0
 11+  BB2B
 12+  BB2B              rocks_tmp:
 13+  BB2B 00               defb 0
 14+  BB2C
 15+  BB2C              rocks_tmp2:
 16+  BB2C 00 00            defb 0,0
 17+  BB2E
 18+  BB2E              ;
 19+  BB2E              ; Coords of the rock that killed us
 20+  BB2E              ;
 21+  BB2E              rocks_killerrock:
 22+  BB2E 00 00            defb 0,0
 23+  BB30
 24+  BB30              ;
 25+  BB30              ; Checks for a rock that needs to start falling. Takes a memory location of the first line at the bottom of the space.
 26+  BB30              ; Checks to see if the pixel row in that location is a rock bottom. If it is, mark this rock as ready to fall.
 27+  BB30              ; If the pixel row is not the rock bottom, stop checking.
 28+  BB30              ; Inputs:
 29+  BB30              ; hl- memory location
 30+  BB30              ;
 31+  BB30              rocks_checkforfalling:
 32+  BB30 7E               ld a,(hl)           ; get the pixel row in this memory location
 33+  BB31 FE 7E            cp 126              ; check against the bottom pixel row of the rock graphic
 34+  BB33 C2 39 BB         jp nz,rocks_checkforfalling2 ; not a rock, stop
 35+  BB36 CD 3A BB         call rocks_addrocktofalling ; mark the rock as falling
 36+  BB39              rocks_checkforfalling2:
 37+  BB39 C9               ret
 38+  BB3A
 39+  BB3A              ;
 40+  BB3A              ; Adds the rock to the structure that tracks falling rocks
 41+  BB3A              ; Inputs:
 42+  BB3A              ; hl - memory location of falling rock graphic
 43+  BB3A              ; bc - coords of rock, c vert
 44+  BB3A              rocks_addrocktofalling:
 45+  BB3A C5               push bc             ; store the coords
 46+  BB3B 11 1B BB         ld de,rocks_falling
 47+  BB3E 06 04            ld b,4              ; number of possible falling rocks
 48+  BB40              rocks_addrocktofalling0:
 49+  BB40 13               inc de
 50+  BB41 13               inc de
 51+  BB42 13               inc de              ; move three along to get the state
 52+  BB43 1A               ld a,(de)           ; load the state
 53+  BB44 FE 00            cp 0                ; check if this is not falling
 54+  BB46 C2 5B BB         jp nz,rocks_addrocktofalling1 ; continue the loop if not 0
 55+  BB49 3E 10            ld a,16             ; load the number of frames to wobble
 56+  BB4B 12               ld (de),a
 57+  BB4C 1B               dec de              ; move de back to state
 58+  BB4D 3E 02            ld a,2
 59+  BB4F 12               ld (de),a           ; set the state to wobbling
 60+  BB50 1B               dec de              ; move back coords
 61+  BB51 C1               pop bc              ; get back coords
 62+  BB52 78               ld a,b
 63+  BB53 12               ld (de),a           ; store the vertical
 64+  BB54 1B               dec de
 65+  BB55 79               ld a,c
 66+  BB56 12               ld (de),a           ; store the horizontal
 67+  BB57 C5               push bc
 68+  BB58 C3 5E BB         jp rocks_addrocktofalling2 ; done
 69+  BB5B              rocks_addrocktofalling1:
 70+  BB5B 13               inc de              ; move memory along to next rock
 71+  BB5C 10 E2            djnz rocks_addrocktofalling0 ; try the next rock
 72+  BB5E              rocks_addrocktofalling2: ; done, return
 73+  BB5E C1               pop bc              ; to tidy up
 74+  BB5F C9               ret
 75+  BB60
 76+  BB60              ;
 77+  BB60              ; Processes any falling rocks
 78+  BB60              ;
 79+  BB60              rocks_processrocks:
 80+  BB60 DD 21 1B BB      ld ix,rocks_falling
 81+  BB64 06 04            ld b,4              ; the number of rocks to check
 82+  BB66              rocks_processrocks0:
 83+  BB66 C5               push bc             ; store loop count
 84+  BB67 DD 4E 00 DD      ld bc,(ix)          ; load the coords for this rock into bc
 84+  BB6B 46 01
 85+  BB6D DD 23            inc ix
 86+  BB6F DD 23            inc ix              ; move to the state
 87+  BB71 DD 7E 00         ld a,(ix)           ; load the state into a
 88+  BB74 FE 00            cp 0
 89+  BB76 CA 9A BB         jp z,rocks_processrocks3 ; if not falling, check next
 90+  BB79 FE 02            cp 2
 91+  BB7B C2 8B BB         jp nz, rocks_processrocks2
 92+  BB7E                  ; we're wobbling
 93+  BB7E DD 23            inc ix              ; get frame number for wobble
 94+  BB80 DD 7E 00         ld a,(ix)           ; get wobble frame into a
 95+  BB83 CD 58 BC         call rocks_wobble
 96+  BB86 DD 23            inc ix              ; increment for next
 97+  BB88 C3 9E BB         jp rocks_processrocks1  ; do next rock
 98+  BB8B              rocks_processrocks2:
 99+  BB8B                  ; we're falling
100+  BB8B C5               push bc
101+  BB8C CD B7 BB         call rocks_fall
102+  BB8F C1               pop bc
103+  BB90 CD A2 BB         call rocks_storeupdatedlines
104+  BB93 DD 23            inc ix
105+  BB95 DD 23            inc ix              ; inc ix to get to next
106+  BB97 C3 9E BB         jp rocks_processrocks1
107+  BB9A              rocks_processrocks3:
108+  BB9A DD 23            inc ix
109+  BB9C DD 23            inc ix
110+  BB9E              rocks_processrocks1:
111+  BB9E C1               pop bc              ; get loop count back
112+  BB9F 10 C5            djnz rocks_processrocks0
113+  BBA1 C9               ret
114+  BBA2
115+  BBA2              ;
116+  BBA2              ; Stores the updated rows associated with the rock
117+  BBA2              ; Inputs:
118+  BBA2              ; bc - coords
119+  BBA2              ;
120+  BBA2              rocks_storeupdatedlines:
121+  BBA2 79               ld a,c                  ; get the player block coords of current block
122+  BBA3 E6 F8            and 248                 ; find closest multiple of eight
123+  BBA5 0F               rrca
124+  BBA6 0F               rrca
125+  BBA7 0F               rrca                    ; divide by 8
126+  BBA8 ED 5B F3 A6      ld de,(screen_offset)          ; load the screen offset, this is in rows
127+  BBAC 93               sub e
128+  BBAD F5               push af
129+  BBAE CD A6 A5         call buffer_marklineforupdate  ; store current row in updated lines
130+  BBB1 F1               pop af
131+  BBB2 3C               inc a
132+  BBB3 CD A6 A5         call buffer_marklineforupdate  ; store line beneath
133+  BBB6 C9               ret
134+  BBB7
135+  BBB7              ;
136+  BBB7              ; Falls a rock one pixel, checks the next square down to see if it is empty, if not, stop falling
137+  BBB7              ; bc - coord of current rock graphic on screen
138+  BBB7              ; ix - memory location of current rock in rock list, currently at the 3rd position (rock state)
139+  BBB7              ;
140+  BBB7              rocks_fall:
141+  BBB7 DD 2B            dec ix
142+  BBB9 DD 2B            dec ix              ; decrease ix back to coords
143+  BBBB ED 43 2C BB      ld (rocks_tmp2),bc  ; store original coords
144+  BBBF 3E 03            ld a,3              ; move this number of pixels
145+  BBC1              rocks_fall1:
146+  BBC1 08               ex af,af'
147+  BBC2 DD 4E 00 DD      ld bc,(ix)          ; get current coords
147+  BBC6 46 01
148+  BBC8 CD DA A8         call sprites_scadd  ; get the memory of the coords into de
149+  BBCB 14               inc d               ; add 256 to get next row
150+  BBCC 1A               ld a,(de)           ; get the contents of the next row
151+  BBCD FE 00            cp 0
152+  BBCF C2 28 BC         jp nz,rocks_fall3    ; move the rock if the row is empty
153+  BBD2 0C               inc c               ; increment the vertical
154+  BBD3 DD 71 00 DD      ld (ix),bc          ; store the new coords
154+  BBD7 70 01
155+  BBD9 79               ld a,c              ; get the vertical coord into a
156+  BBDA E6 07            and 7               ; divisible by 8?
157+  BBDC FE 00            cp 0
158+  BBDE C2 F9 BB         jp nz,rocks_fall4   ; if not, carry on
159+  BBE1 CD 1E A8         call screen_getattraddressfromscreencoords ; get the attr address into de
160+  BBE4 62 6B            ld hl,de
161+  BBE6 36 42            ld (hl),66          ; load this square with the yellow colour
162+  BBE8 DD 4E 00 DD      ld bc,(ix)
162+  BBEC 46 01
163+  BBEE 79               ld a,c              ; get vertical
164+  BBEF D6 08            sub 8               ; look up one square
165+  BBF1 4F               ld c,a              ; put a back in c
166+  BBF2 CD 1E A8         call screen_getattraddressfromscreencoords ; get the attr address into de
167+  BBF5 62 6B            ld hl,de
168+  BBF7 36 46            ld (hl),70          ; load this square with the yellow colour
169+  BBF9              rocks_fall4:
170+  BBF9 08               ex af,af'
171+  BBFA 3D               dec a
172+  BBFB FE 00            cp 0
173+  BBFD C2 C1 BB         jp nz,rocks_fall1   ; do another pixel if needed
174+  BC00              rocks_fall2:
175+  BC00 3E 09            ld a,9              ; rock graphic
176+  BC02 ED 4B 2C BB      ld bc,(rocks_tmp2)  ; get the original coords
177+  BC06 CD 75 A8         call screen_getblock     ; get the memory into hl
178+  BC09 CD 97 A8         call sprites_drawsprite  ; draw the sprite - over the top of the current one
179+  BC0C 3E 09            ld a,9
180+  BC0E DD 4E 00 DD      ld bc,(ix)          ; get the new coords
180+  BC12 46 01
181+  BC14 CD 75 A8         call screen_getblock     ; get the memory into hl
182+  BC17 CD 97 A8         call sprites_drawsprite  ; draw the sprite - over the top of the current one
183+  BC1A DD 4E 00 DD      ld bc,(ix)          ; get the coords again
183+  BC1E 46 01
184+  BC20 CD 3D BC         call rocks_checkforplayer ; check to see if we hit a player
185+  BC23 DD 23            inc ix
186+  BC25 DD 23            inc ix                  ; get ix back to state
187+  BC27 C9               ret
188+  BC28              rocks_fall3:
189+  BC28 3E 00            ld a,0              ; set the state to fell
190+  BC2A DD 77 02         ld (ix+2),a           ; store the falling state
191+  BC2D DD 4E 00 DD      ld bc,(ix)          ; get the coords
191+  BC31 46 01
192+  BC33 CD 1E A8         call screen_getattraddressfromscreencoords ; get the attr address into de
193+  BC36 62 6B            ld hl,de
194+  BC38 36 42            ld (hl),66
195+  BC3A C3 00 BC         jp rocks_fall2      ; rejoin main loop
196+  BC3D
197+  BC3D              ;
198+  BC3D              ; Checks to see if the rock is hitting a player
199+  BC3D              ; Inputs:
200+  BC3D              ; bc - coords of rock we're checking
201+  BC3D              rocks_checkforplayer:
202+  BC3D ED 5B DA B7      ld de,(player)       ; get the player coords
203+  BC41 7B               ld a,e               ; get the vert coord first
204+  BC42 91               sub c                ; subtract the rock vertical coord from players
205+  BC43 FE 08            cp 8                 ; the rock will only hit a player if the player is directly underneath, so this must be 8
206+  BC45 C0               ret nz               ; if not, hasn't hit
207+  BC46 7A               ld a,d               ; get the player horiz coord
208+  BC47 90               sub b                ; subtract rock coord
209+  BC48 C6 07            add 7                ; add max distance
210+  BC4A FE 0D            cp 13                ; compare to 13? if carry flag set, they've hit
211+  BC4C DA 50 BC         jp c,rocks_checkforplayer0
212+  BC4F C9               ret
213+  BC50              rocks_checkforplayer0:
214+  BC50 ED 43 2E BB      ld (rocks_killerrock),bc; store the coords of the killer rock
215+  BC54 CD 86 B8         call player_crushplayer ; if so, jump out
216+  BC57 C9               ret
217+  BC58
218+  BC58              ;
219+  BC58              ; Wobbles a rocks
220+  BC58              ; Inputs:
221+  BC58              ; bc - coord of current rock graphic on screen
222+  BC58              ; ix - memory location of current rock in rock list, currently at the 4th position (wobble count)
223+  BC58              ; a - wobble frame
224+  BC58              rocks_wobble:
225+  BC58 3A 2B BB         ld a,(rocks_tmp)    ; get the frame toggle
226+  BC5B 1E 09            ld e,9              ; this is the rock frame
227+  BC5D 83               add a,e             ; add the frame toggle
228+  BC5E C5               push bc
229+  BC5F CD 75 A8         call screen_getblock     ; get the memory into hl
230+  BC62 CD 97 A8         call sprites_drawsprite  ; draw the sprite - over the top of the current one
231+  BC65 3A 2B BB         ld a,(rocks_tmp)    ; get the frame toggle against
232+  BC68 EE 01            xor 1               ; flip to other state
233+  BC6A 32 2B BB         ld (rocks_tmp),a    ; store
234+  BC6D 1E 09            ld e,9              ; this is the rock frame
235+  BC6F 83               add a,e             ; add the frame toggle
236+  BC70 CD 75 A8         call screen_getblock     ; get the memory into hl
237+  BC73 C1               pop bc
238+  BC74 CD 97 A8         call sprites_drawsprite  ; draw the sprite again with the new frame - next time it will do the opposite
239+  BC77 DD 7E 00         ld a,(ix)           ; get the wobble count back
240+  BC7A 3D               dec a               ; decrease
241+  BC7B DD 77 00         ld (ix),a           ; store
242+  BC7E FE 00            cp 0
243+  BC80 C0               ret nz              ; if we're not at zero, return
244+  BC81 DD 2B            dec ix              ; otherwise look to state location
245+  BC83 3E 01            ld a,1              ; set the state to falling
246+  BC85 DD 77 00         ld (ix),a           ; store the falling state
247+  BC88 DD 23            inc ix              ; set ix back to location of wobble count, and we're done
248+  BC8A C9               ret
249+  BC8B
# file closed: game/rocks.asm
 41   BC8B                  include "game\scores.asm"
# file opened: game/scores.asm
  1+  BC8B              ;
  2+  BC8B              ; The score of the current player
  3+  BC8B              ;
  4+  BC8B              scores_current:
  5+  BC8B 04 01 30 30      defb 4,1,'000000',255       ;+2
  5+  BC8F 30 30 30 30
  5+  BC93 FF
  6+  BC94
  7+  BC94              scores_defaultname:
  8+  BC94 2D 2D 2D         defb '---'
  9+  BC97
 10+  BC97              ;
 11+  BC97              ; The current high score table
 12+  BC97              ;
 13+  BC97              scores_table:
 14+  BC97 03 17 47 41      defb 03,23,'GAM000000',255         ;+0, +2, +5
 14+  BC9B 4D 30 30 30
 14+  BC9F 30 30 30 FF
 15+  BCA3 0C 17 47 41      defb 12,23,'GAM000000',255        ;+12, +14, +17
 15+  BCA7 4D 30 30 30
 15+  BCAB 30 30 30 FF
 16+  BCAF 15 17 47 41      defb 21,23,'GAM000000',255        ;+24, +26, +29
 16+  BCB3 4D 30 30 30
 16+  BCB7 30 30 30 FF
 17+  BCBB
 18+  BCBB              ;
 19+  BCBB              ; Add thousands to the score
 20+  BCBB              ; Inputs:
 21+  BCBB              ; b - number to add
 22+  BCBB              ;
 23+  BCBB              scores_addthousands:
 24+  BCBB 21 8F BC         ld hl,scores_current+4
 25+  BCBE CD E8 BC         call scores_update
 26+  BCC1 C9               ret
 27+  BCC2
 28+  BCC2              ;
 29+  BCC2              ; Prints the score to screen
 30+  BCC2              ;
 31+  BCC2              scores_printscore:
 32+  BCC2 3A AC B7         ld a,(game_currentplayer)   ; get current player
 33+  BCC5 21 8B BC         ld hl,scores_current
 34+  BCC8 FE 01            cp 1
 35+  BCCA C2 D2 BC         jp nz, score_printscore0    ; if not player 1
 36+  BCCD 36 04            ld (hl),4       ; set position for player 1
 37+  BCCF C3 D4 BC         jp score_printscore1
 38+  BCD2              score_printscore0:
 39+  BCD2 36 16            ld (hl),22       ; set position for player 2
 40+  BCD4              score_printscore1:
 41+  BCD4 21 8B BC         ld hl,scores_current
 42+  BCD7 CD A6 84         call string_print
 43+  BCDA C9               ret
 44+  BCDB
 45+  BCDB              ;
 46+  BCDB              ; Prints both scores to screen
 47+  BCDB              ;
 48+  BCDB              scores_printscores:
 49+  BCDB 21 6E B8         ld hl,player1_score
 50+  BCDE CD A6 84         call string_print
 51+  BCE1 21 77 B8         ld hl,player2_score
 52+  BCE4 CD A6 84         call string_print
 53+  BCE7 C9               ret
 54+  BCE8
 55+  BCE8              ;
 56+  BCE8              ; Updates the current score.
 57+  BCE8              ; Inputs:
 58+  BCE8              ; hl - memory location of the score column
 59+  BCE8              ; b - number to add
 60+  BCE8              ;
 61+  BCE8              scores_update:
 62+  BCE8 7E               ld a,(hl)           ; current value of digit.
 63+  BCE9 80               add a,b             ; add points to this digit.
 64+  BCEA 77               ld (hl),a           ; place new digit back in string.
 65+  BCEB FE 3A            cp 58               ; more than ASCII value '9'?
 66+  BCED D8               ret c               ; no - relax.
 67+  BCEE D6 0A            sub 10              ; subtract 10.
 68+  BCF0 77               ld (hl),a           ; put new character back in string.
 69+  BCF1              scores_update0:
 70+  BCF1 2B               dec hl              ; previous character in string.
 71+  BCF2 34               inc (hl)            ; up this by one.
 72+  BCF3 7E               ld a,(hl)           ; what's the new value?
 73+  BCF4 FE 3A            cp 58               ; gone past ASCII nine?
 74+  BCF6 D8               ret c               ; no, scoring done.
 75+  BCF7 D6 0A            sub 10              ; down by ten.
 76+  BCF9 77               ld (hl),a           ; put it back
 77+  BCFA C3 F1 BC         jp scores_update0   ; go round again.
 78+  BCFD
 79+  BCFD
 80+  BCFD              ;
 81+  BCFD              ; Displays the high score table at the bottom of the screen
 82+  BCFD              ;
 83+  BCFD              scores_showtable:
 84+  BCFD 21 97 BC         ld hl, scores_table
 85+  BD00 CD A6 84         call string_print
 86+  BD03 21 A3 BC         ld hl, scores_table+12
 87+  BD06 CD A6 84         call string_print
 88+  BD09 21 AF BC         ld hl, scores_table+24
 89+  BD0C CD A6 84         call string_print
 90+  BD0F C9               ret
 91+  BD10
 92+  BD10              ;
 93+  BD10              ; Place to store the current position we're checking
 94+  BD10              ;
 95+  BD10              scores_highscoretmp:
 96+  BD10 00               defb 0
 97+  BD11
 98+  BD11              ;
 99+  BD11              ; Updates the highscore table. Start at bottom score. Work way from left. Compare each digit. If current is higher than one we're checking,
100+  BD11              ; copy checking one down (or erase) then copy current over that one. Then move up one and do the same
101+  BD11              ;
102+  BD11              scores_processhighscores:
103+  BD11 21 10 BD         ld hl,scores_highscoretmp
104+  BD14 36 00            ld (hl),0  ; load up the tracking byte with 0 (ie, not on the table)
105+  BD16 3E 1D            ld a,29
106+  BD18              scores_processhighscores3:
107+  BD18 21 97 BC         ld hl,scores_table          ; position of first score column
108+  BD1B 5F               ld e,a
109+  BD1C 16 00            ld d,0
110+  BD1E 19               add hl,de
111+  BD1F 08               ex af,af'                   ; store a for later
112+  BD20 11 8D BC         ld de,scores_current+2      ; position of current score column
113+  BD23 06 06            ld b,6                      ; times to loop
114+  BD25              scores_processhighscores0:
115+  BD25 7E               ld a,(hl)
116+  BD26 4F               ld c,a                      ; get first score column
117+  BD27 1A               ld a,(de)                   ; get first current column
118+  BD28 B9               cp c                        ; compare current with first
119+  BD29 DA 3A BD         jp c,scores_processhighscores4  ; if c is bigger, then this is not a higher score, so end
120+  BD2C 23               inc hl
121+  BD2D 13               inc de                      ; move to next column
122+  BD2E 10 F5            djnz scores_processhighscores0 ; loop
123+  BD30 08               ex af,af'                     ; still here, so must be bigger
124+  BD31 32 10 BD         ld (scores_highscoretmp),a  ; store the position indicator in the tracking byte
125+  BD34 0E 0C            ld c,12
126+  BD36 91               sub c
127+  BD37 D2 18 BD         jp nc,scores_processhighscores3 ; if the place we're looking is less than zero, we've gone to far, so continue, otherwise go again
128+  BD3A              scores_processhighscores4
129+  BD3A CD 3E BD         call scores_updatehighscores
130+  BD3D C9               ret
131+  BD3E
132+  BD3E              ;
133+  BD3E              ; Update score table
134+  BD3E              ;
135+  BD3E              scores_updatehighscores:
136+  BD3E 3A 10 BD         ld a,(scores_highscoretmp)  ; get the place we want to overwrite
137+  BD41 FE 00            cp 0
138+  BD43 C8               ret z                       ; if this is 0, didn't get a high score
139+  BD44 FE 1D            cp 29                       ; check against 29... if it's equal, we don't want to copy the current score down one
140+  BD46 CA 79 BD         jp z, scores_updatehighscores3
141+  BD49                                              ; copy old score over one below, if not first
142+  BD49 21 97 BC         ld hl,scores_table
143+  BD4C 11 11 00         ld de,17                    ; start at second score, because this is the first one we'd ever need to copy...
144+  BD4F 19               add hl,de                   ; position of first column
145+  BD50 2B               dec hl
146+  BD51 2B               dec hl
147+  BD52 2B               dec hl
148+  BD53 E5               push hl
149+  BD54 11 0C 00         ld de,12
150+  BD57 19               add hl,de                   ; get position of next score
151+  BD58 54 5D            ld de,hl
152+  BD5A E1               pop hl                      ; get hl back
153+  BD5B 01 09 00         ld bc,9
154+  BD5E ED B0            ldir
155+  BD60 FE 11            cp 17                       ; see if we're copying into the second place slot (17 memory offset). If so, stop copying back the scores
156+  BD62 CA 79 BD         jp z,scores_updatehighscores3
157+  BD65 21 97 BC         ld hl,scores_table
158+  BD68 11 02 00         ld de,2                    ; ... otherwise, copy back the first score
159+  BD6B 19               add hl,de                   ; position of first column
160+  BD6C E5               push hl
161+  BD6D 11 0C 00         ld de,12
162+  BD70 19               add hl,de                   ; get position of next score
163+  BD71 54 5D            ld de,hl
164+  BD73 E1               pop hl                      ; get hl back
165+  BD74 01 09 00         ld bc,9
166+  BD77 ED B0            ldir
167+  BD79              scores_updatehighscores3:
168+  BD79 06 06            ld b,6                      ; now overwrite
169+  BD7B 21 97 BC         ld hl,scores_table
170+  BD7E 16 00            ld d,0
171+  BD80 5F               ld e,a
172+  BD81 19               add hl,de                   ; position of first column
173+  BD82 08               ex af,af'
174+  BD83 11 8D BC         ld de,scores_current+2      ; position of current score column
175+  BD86              scores_updatehighscores2:
176+  BD86 1A               ld a,(de)
177+  BD87 77               ld (hl),a
178+  BD88 23               inc hl
179+  BD89 13               inc de
180+  BD8A 10 FA            djnz scores_updatehighscores2
181+  BD8C 11 09 00         ld de,9
182+  BD8F ED 52            sbc hl,de
183+  BD91 54 5D            ld de,hl                    ; get back to start of entry
184+  BD93 21 94 BC         ld hl,scores_defaultname    ; still need to overwrite the name
185+  BD96 01 03 00         ld bc,3                      ; 3 chars to copy
186+  BD99 ED B0            ldir
187+  BD9B C9               ret
# file closed: game/scores.asm
 42   BD9C                  include "game\diamonds.asm"
# file opened: game/diamonds.asm
  1+  BD9C              diamonds_tmp:
  2+  BD9C 00               defb 0
  3+  BD9D
  4+  BD9D              ;
  5+  BD9D              ; Holds the number of thousands for the current gem type
  6+  BD9D              ;
  7+  BD9D              diamonds_score:
  8+  BD9D 00               defb 0
  9+  BD9E
 10+  BD9E              ;
 11+  BD9E              ; Changes the attribute of gem and diamond cells based on the frame count
 12+  BD9E              ; Inputs:
 13+  BD9E              ; hl - memory location of gem type
 14+  BD9E              diamonds_twinkle_type:
 15+  BD9E CD D0 B7         call game_getcurrentframe       ; get current frame number
 16+  BDA1 E6 07            and 7                           ; want a number from 0-7
 17+  BDA3 C6 40            add 64                          ; add to 60 to get attr colour
 18+  BDA5              diamonds_twinkle_type0:
 19+  BDA5 4E 23 46 2B      ld bc,(hl)                      ; get coords into bc
 20+  BDA9 08               ex af, af'
 21+  BDAA 79               ld a,c                          ; load c into a
 22+  BDAB FE FF            cp 255                          ; is this the end?
 23+  BDAD CA CA BD         jp z,diamonds_twinkle_type1           ; step out if so
 24+  BDB0 23               inc hl
 25+  BDB1 23               inc hl
 26+  BDB2 7E               ld a,(hl)                       ; check the state, don't process if collected
 27+  BDB3 FE 01            cp 1
 28+  BDB5 CA CB BD         jp z,diamonds_twinkle_type2           ; step out if so
 29+  BDB8 CD 07 BE         call diamonds_checkforplayer    ; check to see if we've collided with player
 30+  BDBB DC D2 BD         call c,diamonds_collect     ; we collided
 31+  BDBE 23               inc hl
 32+  BDBF 08               ex af,af'
 33+  BDC0 5E 23 56 2B      ld de,(hl)                      ; get the memory location into de
 34+  BDC4 12               ld (de),a                       ; set the value of attr
 35+  BDC5 23               inc hl
 36+  BDC6 23               inc hl                          ; move to next diamond
 37+  BDC7 C3 A5 BD         jp diamonds_twinkle_type0
 38+  BDCA              diamonds_twinkle_type1:
 39+  BDCA C9               ret
 40+  BDCB              diamonds_twinkle_type2:
 41+  BDCB 23               inc hl                          ; do stuff the we would have done anyway to get to next gem
 42+  BDCC 23               inc hl
 43+  BDCD 23               inc hl
 44+  BDCE 08               ex af,af'
 45+  BDCF C3 A5 BD         jp diamonds_twinkle_type0       ; rejoin main loop
 46+  BDD2
 47+  BDD2              ;
 48+  BDD2              ; Collect the diamond we collided with
 49+  BDD2              ; Inputs:
 50+  BDD2              ; hl - memory location of current diamond, currently on state
 51+  BDD2              ; Output:
 52+  BDD2              ; a - 70 - for yellow on black
 53+  BDD2              diamonds_collect:
 54+  BDD2 36 01            ld (hl),1                       ; collected
 55+  BDD4 E5               push hl
 56+  BDD5 2B               dec hl
 57+  BDD6 2B               dec hl
 58+  BDD7 4E 23 46 2B      ld bc,(hl)                      ; get the coords
 59+  BDDB CD 41 A8         call screen_getscreencoordsfromcharcoords ; get the screen coords into bc
 60+  BDDE ED 5B 9C BD      ld de,(diamonds_tmp)            ; tmp stores the offset for this type of gem
 61+  BDE2 16 00            ld d,0
 62+  BDE4 21 C8 B1         ld hl,sprites
 63+  BDE7 19               add hl,de
 64+  BDE8 CD 97 A8         call sprites_drawsprite     ; call the routine to draw the sprite
 65+  BDEB E1               pop hl
 66+  BDEC 08               ex af,af'
 67+  BDED 3E 46            ld a,70
 68+  BDEF 08               ex af,af'                       ; make sure a is in the af we'll use for the attr
 69+  BDF0 D9               exx
 70+  BDF1 3A 9D BD         ld a,(diamonds_score)
 71+  BDF4 47               ld b,a
 72+  BDF5 CD BB BC         call scores_addthousands
 73+  BDF8 3A 9C BD         ld a,(diamonds_tmp)
 74+  BDFB FE 40            cp 64                       ; check the gem type offset, if its 64 this is a diamond, so mark the level as completable
 75+  BDFD C2 05 BE         jp nz,diamonds_collect0
 76+  BE00 21 E7 B7         ld hl,player+13
 77+  BE03 36 01            ld (hl),1                   ; mark the player as able to complete the level
 78+  BE05              diamonds_collect0:
 79+  BE05 D9               exx
 80+  BE06 C9               ret
 81+  BE07
 82+  BE07              ;
 83+  BE07              ; Checks to see if the gem is hitting a player
 84+  BE07              ; Inputs:
 85+  BE07              ; bc - coords of diamond we're checking
 86+  BE07              diamonds_checkforplayer:
 87+  BE07 78               ld a,b               ; multiply b by 8
 88+  BE08 07               rlca
 89+  BE09 07               rlca
 90+  BE0A 07               rlca
 91+  BE0B 47               ld b,a
 92+  BE0C ED 5B DA B7      ld de,(player)       ; get the player coords
 93+  BE10 7B               ld a,e               ; get the vert coord first
 94+  BE11 90               sub b                ; subtract the diamond vertical coord from players
 95+  BE12 C6 04            add 4                ; add the max distance
 96+  BE14 FE 09            cp 9                ; compare to max*2+1? if carry flag set, they've hit
 97+  BE16 D0               ret nc               ; if not, hasn't hit
 98+  BE17 79               ld a,c               ; multiply c by 8
 99+  BE18 07               rlca
100+  BE19 07               rlca
101+  BE1A 07               rlca
102+  BE1B 4F               ld c,a
103+  BE1C 7A               ld a,d               ; get the player horiz coord
104+  BE1D 91               sub c                ; subtract rock coord
105+  BE1E C6 04            add 4                ; add max distance
106+  BE20 FE 09            cp 9                ; compare to max*2+1? if carry flag set, they've hit
107+  BE22 D0               ret nc
108+  BE23 3E 00            ld a,0
109+  BE25 C9               ret
110+  BE26
111+  BE26
112+  BE26              ;
113+  BE26              ; Initialise diamonds and gems
114+  BE26              ;
115+  BE26              diamonds_twinkle
116+  BE26 21 9D BD         ld hl,diamonds_score
117+  BE29 36 02            ld (hl),2         ; store the score we'll add
118+  BE2B 21 9C BD         ld hl,diamonds_tmp
119+  BE2E 36 40            ld (hl),64         ; store the location the diamond sprite
120+  BE30 21 43 B1         ld hl, level01diamonds
121+  BE33 CD 9E BD         call diamonds_twinkle_type
122+  BE36 21 9D BD         ld hl,diamonds_score
123+  BE39 36 01            ld (hl),1         ; store the score we'll add
124+  BE3B 21 9C BD         ld hl,diamonds_tmp
125+  BE3E 36 70            ld (hl),112         ; store the location the gem sprite
126+  BE40 21 53 B1         ld hl, level01gems
127+  BE43 CD 9E BD         call diamonds_twinkle_type
128+  BE46 C9               ret
129+  BE47
130+  BE47              ;
131+  BE47              ; Initialise diamonds and gems
132+  BE47              ;
133+  BE47              diamonds_init:
134+  BE47 21 43 B1         ld hl, level01diamonds
135+  BE4A CD 54 BE         call diamonds_init_type
136+  BE4D 21 53 B1         ld hl, level01gems
137+  BE50 CD 54 BE         call diamonds_init_type
138+  BE53 C9               ret
139+  BE54
140+  BE54              ;
141+  BE54              ; Initialise diamonds or gems, get memory addresses
142+  BE54              ; Inputs:
143+  BE54              ; hl - memory location
144+  BE54              diamonds_init_type:
145+  BE54 4E               ld c,(hl)                      ; get coords into c
146+  BE55 79               ld a,c                          ; load c into add
147+  BE56 FE FF            cp 255                          ; is this the end?
148+  BE58 CA 6F BE         jp z,diamonds_init_type1             ; step out if so
149+  BE5B 23               inc hl
150+  BE5C 46               ld b,(hl)                       ; get coords into b
151+  BE5D E5               push hl
152+  BE5E CD EE A7         call screen_getcellattradress ; get memory of attr for this diamond into de
153+  BE61 E1               pop hl
154+  BE62 23               inc hl                          ; move to state
155+  BE63 36 00            ld (hl),0
156+  BE65 23               inc hl                          ; move to memory
157+  BE66 73 23 72 2B      ld (hl),de                      ; store the memory location
158+  BE6A 23               inc hl                          ; move to next diamond
159+  BE6B 23               inc hl
160+  BE6C C3 54 BE         jp diamonds_init_type
161+  BE6F              diamonds_init_type1:
162+  BE6F C9               ret
# file closed: game/diamonds.asm
 43   BE70
 44   BE70              ;===========================================================================
 45   BE70              ; main routine - the code execution starts here.
 46   BE70              ; Sets up the new interrupt routine, the memory
 47   BE70              ; banks and jumps to the start loop.
 48   BE70              ;===========================================================================
 49   BE70              main:
 50   BE70
 51   BE70                  ; Draw the title screen
 52   BE70              main_titlescreen:
 53   BE70 CD 00 A9         call titlescreen_show
 54   BE73 CD E8 B7         call player_init_gamestart
 55   BE76
 56   BE76              main_lifestart:
 57   BE76
 58   BE76 CD 06 B8         call player_init_lifestart
 59   BE79
 60   BE79 CD 64 AA         call lifescreen_draw        ; show the lives remaining screen
 61   BE7C
 62   BE7C CD 00 80         call init_start
 63   BE7F CD 0E A7         call screen_draw
 64   BE82 CD 6C A6         call buffer_allbuffertoscreen
 65   BE85
 66   BE85 CD 7E B9         call ship_land              ; land the ship
 67   BE88 CD 6E BA         call tank_init
 68   BE8B CD 47 BE         call diamonds_init
 69   BE8E
 70   BE8E              mloop:
 71   BE8E 76               halt
 72   BE8F CD BB BE         call main_loop_processing
 73   BE92
 74   BE92                  ;
 75   BE92                  ; Check if the player died
 76   BE92                  ;
 77   BE92 21 E4 B7         ld hl,player+10
 78   BE95 7E               ld a,(hl)                   ; check if the player died this frame
 79   BE96 FE 01            cp 1
 80   BE98 C2 A7 BE         jp nz,mloop0
 81   BE9B CD 62 B8         call player_died        ; do end of life housekeeping
 82   BE9E 21 E3 B7         ld hl,player+9        ; check lives remaining
 83   BEA1 7E               ld a,(hl)
 84   BEA2 FE 00            cp 0
 85   BEA4 CA DA BE         jp z,main_gameover   ; leave the loop if we're done
 86   BEA7
 87   BEA7              mloop0:
 88   BEA7                  ;
 89   BEA7                  ; Check if the player completed the level
 90   BEA7                  ;
 91   BEA7 21 E7 B7         ld hl,player+13
 92   BEAA 7E               ld a,(hl)
 93   BEAB FE 01            cp 1
 94   BEAD C2 8E BE         jp nz,mloop
 95   BEB0 CD 5D B9         call player_checkforexit
 96   BEB3 FE 01            cp 1                        ; look at return, if 1, level has been completed
 97   BEB5 CA E0 BE         jp z,main_endlevel          ; jump to level transition screen
 98   BEB8 C3 8E BE         jp mloop                ; start the loop again
 99   BEBB
100   BEBB
101   BEBB              main_loop_processing:
102   BEBB CD 3A A6         call buffer_buffertoscreen  ; copy buffer to screen
103   BEBE CD BA A5         call buffer_clearlist       ; zero the updated lines list
104   BEC1 CD 8C B8         call player_drawplayer      ; delete player
105   BEC4 CD 57 B3         call control_keyboard       ; check keyboard
106   BEC7 CD 8C B8         call player_drawplayer      ; draw player
107   BECA CD 81 BA         call tank_process           ; prcoess the tank
108   BECD CD 60 BB         call rocks_processrocks     ; process falling rocks
109   BED0 CD 26 BE         call diamonds_twinkle       ; make the diamonds twinkle
110   BED3 CD C2 BC         call scores_printscore      ; update the score on screen
111   BED6 CD C1 B7         call game_incrementframe    ; increment the game frame
112   BED9
113   BED9 C9               ret
114   BEDA
115   BEDA              main_gameover:
116   BEDA CD B7 AA         call gameover_draw          ; show the game over screen
117   BEDD C3 70 BE         jp main_titlescreen         ; go back to title
118   BEE0
119   BEE0              main_endlevel:
120   BEE0 CD 48 B8         call player_recordcurrentscore
121   BEE3 CD A5 AB         call endlevel_draw          ; show the end level screen
122   BEE6 C3 76 BE         jp main_lifestart           ; start a new life
123   BEE9
124   BEE9              ;===========================================================================
125   BEE9              ; Stack.
126   BEE9              ;===========================================================================
127   BEE9
128   BEE9              ; Stack: this area is reserved for the stack
129   BEE9              STACK_SIZE: equ 100    ; in words
130   BEE9
131   BEE9              ; Reserve stack space
132   BEE9 00 00            defw 0  ; WPMEM, 2
133   BEEB              stack_bottom:
134   BEEB 00 00 00...      defs    STACK_SIZE*2, 0
135   BFB3              stack_top:
136   BFB3 00 00            defw 0  ; WPMEM, 2
137   BFB5
138   BFB5                     SAVESNA "ThePit.sna", main
# file closed: main.asm
