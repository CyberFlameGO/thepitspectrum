# file opened: main.asm
  1   0000                  DEVICE ZXSPECTRUM48
  2   0000
  3   0000                  ORG $8000
  4   8000
  5   8000              ;===========================================================================
  6   8000              ; Persistent watchpoint.
  7   8000              ; Change WPMEMx (remove the 'x' from WPMEMx) below to activate.
  8   8000              ; If you do so the program will hit a breakpoint when it tries to
  9   8000              ; write to the first byte of the 3rd line.
 10   8000              ; When program breaks in the fill_memory sub routine please hover over hl
 11   8000              ; to see that it contains 0x5804 or COLOR_SCREEN+64.
 12   8000              ;===========================================================================
 13   8000
 14   8000              ; WPMEMx 0x5840, 1, w
 15   8000
 16   8000
 17   8000              ;===========================================================================
 18   8000              ; Include modules
 19   8000              ;===========================================================================
 20   8000                  include "init.asm"
# file opened: init.asm
  1+  8000              ;
  2+  8000              ; Set up at start up
  3+  8000              ;
  4+  8000              init_start:
  5+  8000              ; We want a black screen.
  6+  8000
  7+  8000 3E 47            ld a,71             ; white ink (7) on black paper (0),
  8+  8002                                      ; bright (64).
  9+  8002 CD 67 80         call utilities_clearscreen
 10+  8005 32 8D 5C         ld (23693),a        ; set our screen colours.
 11+  8008 AF               xor a               ; quick way to load accumulator with zero.
 12+  8009 CD 9B 22         call 8859           ; set permanent border colours.
 13+  800C
 14+  800C 21 8C A5         ld hl,screen_offset ; reset some temp variables
 15+  800F 36 00            ld (hl),0
 16+  8011 21 8D A5         ld hl,screen_tmp
 17+  8014 36 00            ld (hl),0
 18+  8016 21 27 A4         ld hl,buffer_tmp
 19+  8019 36 00            ld (hl),0
 20+  801B 23               inc hl
 21+  801C 36 00            ld (hl),0
 22+  801E
 23+  801E CD 9F B4         call game_resetcurrentframe ; reset current frame
 24+  8021
 25+  8021 C9               ret
 26+  8022
 27+  8022              ;
 28+  8022              ;   Start coord
 29+  8022              ;   vert c, horiz b
 30+  8022              init_coord:
 31+  8022 18 30            defb 24,48
 32+  8024
 33+  8024              ;
 34+  8024              ; Number of lives to start
 35+  8024              ;
 36+  8024              init_lives:
 37+  8024 03               defb 3
 38+  8025
 39+  8025              ;
 40+  8025              ; Score to start
 41+  8025              ;
 42+  8025              init_score:
 43+  8025 30 30 30 30      defb '000000'
 43+  8029 30 30
# file closed: init.asm
 21   802B                  include "utilities.asm"
# file opened: utilities.asm
  1+  802B              ; ##########################################################################
  2+  802B              ; Print a character
  3+  802B              ; Inputs:
  4+  802B              ; b - x coord
  5+  802B              ; c - y coord
  6+  802B              ; d - character
  7+  802B              ; e - colour
  8+  802B              ; ##########################################################################
  9+  802B              utilities_print_char:
 10+  802B 7B               ld a,e
 11+  802C 32 8F 5C         ld (23695),a        ; set our temporary screen colours.
 12+  802F 3E 16            ld a,22
 13+  8031 D7               rst 16              ; Calls the Sinclair PRINT AT routine
 14+  8032 78               ld a,b              ; Gets the X co-ordinate
 15+  8033 3D               dec a
 16+  8034 D7               rst 16
 17+  8035 79               ld a,c              ; and the Y co-ordinate
 18+  8036 D7               rst 16              ; So, essentially PRINT AT X,Y; like in BASIC
 19+  8037 7A               ld a,d              ; ASCII code for udg.
 20+  8038 D7               rst 16              ; draw block.
 21+  8039 C9               ret
 22+  803A
 23+  803A
 24+  803A              ;Inputs:
 25+  803A              ;     DE and A are factors
 26+  803A              ;Outputs:
 27+  803A              ;     A is not changed
 28+  803A              ;     B is 0
 29+  803A              ;     C is not changed
 30+  803A              ;     DE is not changed
 31+  803A              ;     HL is the product
 32+  803A              ;Time:
 33+  803A              ;     342+6x
 34+  803A              ;
 35+  803A              utilities_multiply:
 36+  803A 06 08            ld b,8          ;7           7
 37+  803C 21 00 00         ld hl,0         ;10         10
 38+  803F 29               add hl,hl     ;11*8       88
 39+  8040 07               rlca          ;4*8        32
 40+  8041 30 01            jr nc,$+3     ;(12|18)*8  96+6x
 41+  8043 19                   add hl,de   ;--         --
 42+  8044 10 F9            djnz $-5      ;13*7+8     99
 43+  8046 C9               ret             ;10         10
 44+  8047
 45+  8047              utilities_waitforkey:
 46+  8047 21 08 5C         ld hl,23560         ; LAST K system variable.
 47+  804A 36 00            ld (hl),0           ; put null value there.
 48+  804C              utilities_waitforkey0:
 49+  804C 7E               ld a,(hl)           ; new value of LAST K.
 50+  804D FE 00            cp 0                ; is it still zero?
 51+  804F 28 FB            jr z,utilities_waitforkey0           ; yes, so no key pressed.
 52+  8051 C9               ret                 ; key was pressed.
 53+  8052
 54+  8052              ;
 55+  8052              ; Waits number of frames for keypress. If got, returns 1, if not 0
 56+  8052              ; Inputs:
 57+  8052              ; a - number of frames to waits
 58+  8052              ; Ouputs:
 59+  8052              ; e - 0 not pressed, 1 pressed
 60+  8052              utilities_waitforkey_forframes:
 61+  8052 21 08 5C         ld hl,23560         ; LAST K system variable.
 62+  8055 36 00            ld (hl),0           ; put null value there.
 63+  8057 47               ld b,a              ; number of frames to wait
 64+  8058              utilities_waitforkey_forframes0:
 65+  8058 7E               ld a,(hl)           ; new value of LAST K.
 66+  8059 FE 00            cp 0                ; is it still zero?
 67+  805B 28 03            jr z,utilities_waitforkey_forframes1           ; yes, so no key pressed.
 68+  805D 1E 01            ld e,1              ; set the pressed flag
 69+  805F C9               ret                 ; key was pressed.
 70+  8060              utilities_waitforkey_forframes1:
 71+  8060 76               halt                ; wait for frame
 72+  8061 76               halt                ; wait for frame
 73+  8062 10 F4            djnz utilities_waitforkey_forframes0 ; loop again
 74+  8064 1E 00            ld e,0              ; nothing pressed in time
 75+  8066 C9               ret
 76+  8067
 77+  8067              ;
 78+  8067              ; Clears the screen
 79+  8067              ; Inputs:
 80+  8067              ; a - attribute colour
 81+  8067              utilities_clearscreen:
 82+  8067 76               halt
 83+  8068 21 00 58         ld hl,22528         ; attr
 84+  806B 11 01 58         ld de,22529         ; attr+1
 85+  806E 01 FF 02         ld bc,767
 86+  8071 77               ld (hl),a
 87+  8072 ED B0            ldir
 88+  8074
 89+  8074 21 00 40         ld hl, 16384        ;pixels
 90+  8077 11 01 40         ld de, 16385        ;pixels + 1
 91+  807A 01 FF 17         ld bc, 6143         ;pixels area length - 1
 92+  807D 36 00            ld (hl), 0          ;set first byte to '0'
 93+  807F ED B0            ldir                ;copy bytes
 94+  8081
 95+  8081 C9               ret
 96+  8082
# file closed: utilities.asm
 22   8082                  include "strings.asm"
# file opened: strings.asm
  1+  8082              string_score1:
  2+  8082 04 00 53 43      defb 4,0,'SCORE1',255
  2+  8086 4F 52 45 31
  2+  808A FF
  3+  808B              string_scorenumbers1:
  4+  808B 04 01 30 30      defb 4,1,'000000',255
  4+  808F 30 30 30 30
  4+  8093 FF
  5+  8094              string_company:
  6+  8094 0F 00 45 4E      defb 15,0,'ENV',255
  6+  8098 56 FF
  7+  809A              string_credits:
  8+  809A 0C 01 50 4C      defb 12,1,'PLAYER 1',255
  8+  809E 41 59 45 52
  8+  80A2 20 31 FF
  9+  80A5              string_score2:
 10+  80A5 16 00 53 43      defb 22,0,'SCORE2',255
 10+  80A9 4F 52 45 32
 10+  80AD FF
 11+  80AE              string_scorenumbers2:
 12+  80AE 16 01 30 30      defb 22,1,'000000',255
 12+  80B2 30 30 30 30
 12+  80B6 FF
 13+  80B7              string_titlescreen_copyright:
 14+  80B7 04 16 7F 20      defb 4,22, 127,' 1982 AW ZILEC ELC LTD',255
 14+  80BB 31 39 38 32
 14+  80BF 20 41 57 20
 14+  80C3 5A 49 4C 45
 14+  80C7 43 20 45 4C
 14+  80CB 43 20 4C 54
 14+  80CF 44 FF
 15+  80D1
 16+  80D1
 17+  80D1              string_alttitlescreen_1:
 18+  80D1 0C 00 43 52      defb 12,0,'CREDITS 1',255
 18+  80D5 45 44 49 54
 18+  80D9 53 20 31 FF
 19+  80DD              string_alttitlescreen_2:
 20+  80DD 00 02 20 20      defb 0,2,'           THE OBJECT',254
 20+  80E1 20 20 20 20
 20+  80E5 20 20 20 20
 20+  80E9 20 54 48 45
 20+  80ED 20 4F 42 4A
 20+  80F1 45 43 54 FE
 21+  80F5 00 03 20 20      defb 0,3,'          OF THIS GAME',254
 21+  80F9 20 20 20 20
 21+  80FD 20 20 20 20
 21+  8101 4F 46 20 54
 21+  8105 48 49 53 20
 21+  8109 47 41 4D 45
 21+  810D FE
 22+  810E 00 04 20 20      defb 0,4,'         IS TO DIG DOWN',254
 22+  8112 20 20 20 20
 22+  8116 20 20 20 49
 22+  811A 53 20 54 4F
 22+  811E 20 44 49 47
 22+  8122 20 44 4F 57
 22+  8126 4E FE
 23+  8128 00 05 20 20      defb 0,5,'        TO THE BOTTOM PIT',254
 23+  812C 20 20 20 20
 23+  8130 20 20 54 4F
 23+  8134 20 54 48 45
 23+  8138 20 42 4F 54
 23+  813C 54 4F 4D 20
 23+  8140 50 49 54 FE
 24+  8144 00 06 20 20      defb 0,6,'               AND',254
 24+  8148 20 20 20 20
 24+  814C 20 20 20 20
 24+  8150 20 20 20 20
 24+  8154 20 41 4E 44
 24+  8158 FE
 25+  8159 00 07 20 20      defb 0,7,'        COLLECT AT LEAST',254
 25+  815D 20 20 20 20
 25+  8161 20 20 43 4F
 25+  8165 4C 4C 45 43
 25+  8169 54 20 41 54
 25+  816D 20 4C 45 41
 25+  8171 53 54 FE
 26+  8174 00 08 20 20      defb 0,8,'         ONE LARGE JEWEL',254
 26+  8178 20 20 20 20
 26+  817C 20 20 20 4F
 26+  8180 4E 45 20 4C
 26+  8184 41 52 47 45
 26+  8188 20 4A 45 57
 26+  818C 45 4C FE
 27+  818F 00 09 20 20      defb 0,9,'              THEN',254
 27+  8193 20 20 20 20
 27+  8197 20 20 20 20
 27+  819B 20 20 20 20
 27+  819F 54 48 45 4E
 27+  81A3 FE
 28+  81A4 00 0A 20 20      defb 0,10,'         RETURN TO SHIP',254
 28+  81A8 20 20 20 20
 28+  81AC 20 20 20 52
 28+  81B0 45 54 55 52
 28+  81B4 4E 20 54 4F
 28+  81B8 20 53 48 49
 28+  81BC 50 FE
 29+  81BE 00 0B 20 20      defb 0,11,'         THRU UPPER PIT',255
 29+  81C2 20 20 20 20
 29+  81C6 20 20 20 54
 29+  81CA 48 52 55 20
 29+  81CE 55 50 50 45
 29+  81D2 52 20 50 49
 29+  81D6 54 FF
 30+  81D8              string_alttitlescreen_3:
 31+  81D8 00 0D 20 20      defb 0,13,'    SINGLE BONUS  5000 POINTS',254
 31+  81DC 20 20 53 49
 31+  81E0 4E 47 4C 45
 31+  81E4 20 42 4F 4E
 31+  81E8 55 53 20 20
 31+  81EC 35 30 30 30
 31+  81F0 20 50 4F 49
 31+  81F4 4E 54 53 FE
 32+  81F8 00 0E 20 20      defb 0,14,'      COLLECT 1 LARGE JEWEL',254
 32+  81FC 20 20 20 20
 32+  8200 43 4F 4C 4C
 32+  8204 45 43 54 20
 32+  8208 31 20 4C 41
 32+  820C 52 47 45 20
 32+  8210 4A 45 57 45
 32+  8214 4C FE
 33+  8216 00 0F 20 20      defb 0,15,'       AND RETURN TO SHIP',254
 33+  821A 20 20 20 20
 33+  821E 20 41 4E 44
 33+  8222 20 52 45 54
 33+  8226 55 52 4E 20
 33+  822A 54 4F 20 53
 33+  822E 48 49 50 FE
 34+  8232 00 11 20 20      defb 0,17,'    DOUBLE BONUS  10000 POINTS',254
 34+  8236 20 20 44 4F
 34+  823A 55 42 4C 45
 34+  823E 20 42 4F 4E
 34+  8242 55 53 20 20
 34+  8246 31 30 30 30
 34+  824A 30 20 50 4F
 34+  824E 49 4E 54 53
 34+  8252 FE
 35+  8253 00 12 20 20      defb 0,18,'    COLLECT ALL 3 LARGE JEWELS',254
 35+  8257 20 20 43 4F
 35+  825B 4C 4C 45 43
 35+  825F 54 20 41 4C
 35+  8263 4C 20 33 20
 35+  8267 4C 41 52 47
 35+  826B 45 20 4A 45
 35+  826F 57 45 4C 53
 35+  8273 FE
 36+  8274 00 13 20 20      defb 0,19,'       OR   ALL 4 SMALL JEWELS',254
 36+  8278 20 20 20 20
 36+  827C 20 4F 52 20
 36+  8280 20 20 41 4C
 36+  8284 4C 20 34 20
 36+  8288 53 4D 41 4C
 36+  828C 4C 20 4A 45
 36+  8290 57 45 4C 53
 36+  8294 FE
 37+  8295 00 15 20 20      defb 0,21,'    TRIPLE BONUS  15000 POINTS',254
 37+  8299 20 20 54 52
 37+  829D 49 50 4C 45
 37+  82A1 20 42 4F 4E
 37+  82A5 55 53 20 20
 37+  82A9 31 35 30 30
 37+  82AD 30 20 50 4F
 37+  82B1 49 4E 54 53
 37+  82B5 FE
 38+  82B6 00 16 20 20      defb 0,22,'       COLLECT ALL 7 JEWELS',255
 38+  82BA 20 20 20 20
 38+  82BE 20 43 4F 4C
 38+  82C2 4C 45 43 54
 38+  82C6 20 41 4C 4C
 38+  82CA 20 37 20 4A
 38+  82CE 45 57 45 4C
 38+  82D2 53 FF
 39+  82D4
 40+  82D4              string_lifescreen_player:
 41+  82D4 0B 00 20 50      defb 11,0,' PLAYER 1 ',255
 41+  82D8 4C 41 59 45
 41+  82DC 52 20 31 20
 41+  82E0 FF
 42+  82E1              string_lifescreen_lives:
 43+  82E1 0B 03 30 20      defb 11,3,48,' MEN LEFT',255
 43+  82E5 4D 45 4E 20
 43+  82E9 4C 45 46 54
 43+  82ED FF
 44+  82EE              string_lifescreen_lastman:
 45+  82EE 0C 03 4C 41      defb 12,3,'LAST MAN',255
 45+  82F2 53 54 20 4D
 45+  82F6 41 4E FF
 46+  82F9
 47+  82F9              string_gameoverscreen_gameover:
 48+  82F9 0C 06 47 41      defb 12,6,'GAME OVER',255
 48+  82FD 4D 45 20 4F
 48+  8301 56 45 52 FF
 49+  8305              string_gameoverscreen_copyright:
 50+  8305 05 12 7F 20      defb 5,18,127,' 1982 AW ZILEC ELC LTD',255
 50+  8309 31 39 38 32
 50+  830D 20 41 57 20
 50+  8311 5A 49 4C 45
 50+  8315 43 20 45 4C
 50+  8319 43 20 4C 54
 50+  831D 44 FF
 51+  831F              string_gameoverscreen_bestscores:
 52+  831F 07 16 42 45      defb 7,22,'BEST SCORES TODAY',255
 52+  8323 53 54 20 53
 52+  8327 43 4F 52 45
 52+  832B 53 20 54 4F
 52+  832F 44 41 59 FF
 53+  8333              string_gameover_credits:
 54+  8333 0C 01 43 52      defb 12,1,'CREDITS 0',255
 54+  8337 45 44 49 54
 54+  833B 53 20 30 FF
 55+  833F
 56+  833F              ;
 57+  833F              ; Prints specified string
 58+  833F              ; Inputs:
 59+  833F              ; de: pointer to string
 60+  833F              ; bc: length of string
 61+  833F              ;
 62+  833F              ; Print String Data
 63+  833F              ; First two bytes of string contain X and Y char position, then the string
 64+  833F              ; Individual strings are terminated with 0xFE
 65+  833F              ; End of data is terminated with 0xFF
 66+  833F              ; HL: Address of string
 67+  833F              ;
 68+  833F 5E           string_print:           LD E,(HL)                       ; Fetch the X coordinate
 69+  8340 23                                   INC HL                          ; Increase HL to the next memory location
 70+  8341 56                                   LD D,(HL)                       ; Fetch the Y coordinate
 71+  8342 23                                   INC HL                          ; Increase HL to the next memory location
 72+  8343 CD 56 83                             CALL string_getcharaddress           ; Calculate the screen address (in DE)
 73+  8346 7E           string_print_0:         LD A,(HL)                       ; Fetch the character to print
 74+  8347 23                                   INC HL                          ; Increase HL to the next character
 75+  8348 FE FE                                CP 0xFE                         ; Compare with 0xFE
 76+  834A 28 F3                                JR Z,string_print               ; If it is equal to 0xFE then loop back to print next string
 77+  834C D0                                   RET NC                          ; If it is greater or equal to (carry bit set) then
 78+  834D E5                                   PUSH HL                         ; Push HL on stack (Print_Char will not preserve HL)
 79+  834E CD 66 83                             CALL Print_Char                 ; Print the character
 80+  8351 E1                                   POP HL                          ; Retrieve HL back off the stack
 81+  8352 1C                                   INC E                           ; Go to the next screen address
 82+  8353 18 F1                                JR string_print_0               ; Loop back to print next character
 83+  8355 C9                                   RET
 84+  8356
 85+  8356              ; Get screen address
 86+  8356              ; D = Y character position
 87+  8356              ; E = X character position
 88+  8356              ; Returns address in DE
 89+  8356              ;
 90+  8356 7A           string_getcharaddress:       LD A,D
 91+  8357 E6 07                                AND %00000111
 92+  8359 1F                                   RRA
 93+  835A 1F                                   RRA
 94+  835B 1F                                   RRA
 95+  835C 1F                                   RRA
 96+  835D B3                                   OR E
 97+  835E 5F                                   LD E,A
 98+  835F 7A                                   LD A,D
 99+  8360 E6 18                                AND %00011000
100+  8362 F6 40                                OR %01000000
101+  8364 57                                   LD D,A
102+  8365 C9                                   RET                             ; Returns screen address in DE
103+  8366
104+  8366              ; Print a single character out
105+  8366              ; A:  Character to print
106+  8366              ; DE: Screen address to print character at
107+  8366              ;
108+  8366 21 00 3C     Print_Char:             LD HL,0x3C00                    ; Address of character set table in ROM
109+  8369 06 00                                LD B,0                          ; Set BC to A
110+  836B 4F                                   LD C,A
111+  836C E6 FF                                AND 0xFF                        ; Clear the carry bit
112+  836E CB 11                                RL C                            ; Multiply BC by 8 (shift left 3 times)
113+  8370 CB 10                                RL B
114+  8372 CB 11                                RL C
115+  8374 CB 10                                RL B
116+  8376 CB 11                                RL C
117+  8378 CB 10                                RL B
118+  837A 09                                   ADD HL,BC                       ; Get the character address in HL
119+  837B 0E 08                                LD C,8                          ; Loop counter
120+  837D D5                                   PUSH DE
121+  837E 7E           Print_Char_1:           LD A,(HL)                       ; Get the byte from the ROM into A
122+  837F 12                                   LD (DE),A                       ; Stick A onto the screen
123+  8380 14                                   INC D                           ; Goto next line on screen
124+  8381 2C                                   INC L                           ; Goto next byte of character
125+  8382 0D                                   DEC C                           ; Decrease the loop counter
126+  8383 20 F9                                JR NZ,Print_Char_1              ; Loop around whilst it is Not Zero (NZ)
127+  8385 D1                                   POP DE
128+  8386 C9                                   RET                             ; Return from the subroutine
# file closed: strings.asm
 23   8387                  include "screen\buffer.asm"
# file opened: screen/buffer.asm
  1+  8387              buffer_buffer:
  2+  8387 00 00 00...      defs 7424                   ; area reserved for screen
  3+  A087
  4+  A087              buffer_attr_buffer:
  5+  A087 00 00 00...      defs 928                    ; attrs buffer area
  6+  A427
  7+  A427              buffer_tmp:
  8+  A427 00 00            defb 0,0                    ; temp area
  9+  A429
 10+  A429              buffer_updatedlines:
 11+  A429 FF FF FF...      defs 21,255
 12+  A43E
 13+  A43E              buffer_updateall:
 14+  A43E 00               defb 0
 15+  A43F
 16+  A43F              ;
 17+  A43F              ; Stores a line number in the update list
 18+  A43F              ; Inputs:
 19+  A43F              ; a - row number
 20+  A43F              buffer_marklineforupdate:
 21+  A43F 5F               ld e,a                          ; store in e
 22+  A440 06 15            ld b,21
 23+  A442 21 29 A4         ld hl,buffer_updatedlines
 24+  A445              buffer_marklineforupdate0:
 25+  A445 7E               ld a,(hl)                       ; get the line stored in updated lines
 26+  A446 BB               cp e                            ; is this the same as the row number passed in?
 27+  A447 C8               ret z                           ; if so, don't need to do anything
 28+  A448 FE FF            cp 255                          ; is this 255, ie the end of the buffer
 29+  A44A C2 4F A4         jp nz,buffer_marklineforupdate1 ; if not, move to next
 30+  A44D 73               ld (hl),e                       ; if it is, this spot is empty, so store the row number
 31+  A44E C9               ret                             ; and finish
 32+  A44F              buffer_marklineforupdate1:
 33+  A44F 23               inc hl
 34+  A450 10 F3            djnz buffer_marklineforupdate0
 35+  A452 C9               ret
 36+  A453
 37+  A453              ;
 38+  A453              ; Zeroes the updated lines list
 39+  A453              ;
 40+  A453              buffer_clearlist:
 41+  A453 06 15            ld b,21
 42+  A455 21 29 A4         ld hl,buffer_updatedlines
 43+  A458              buffer_clearlist0:
 44+  A458 36 FF            ld (hl),255
 45+  A45A 23               inc hl
 46+  A45B 10 FB            djnz buffer_clearlist0
 47+  A45D C9               ret
 48+  A45E
 49+  A45E              ;
 50+  A45E              ; Copies the buffer to the screen. Use stack.
 51+  A45E              ; Inputs:
 52+  A45E              ; a - row number to display - 0 is first line
 53+  A45E              ;
 54+  A45E              buffer_bufferlinetoscreen:
 55+  A45E 4F               ld c,a                          ; store a
 56+  A45F ED 5B 8C A5      ld de,(screen_offset)          ; load the screen offset, this is in rows, want it *256
 57+  A463 83               add a,e                       ; add the row number
 58+  A464 11 00 01         ld de,256
 59+  A467 CD 3A 80         call utilities_multiply
 60+  A46A 54 5D            ld de,hl
 61+  A46C 21 87 83         ld hl,buffer_buffer
 62+  A46F 19               add hl,de                   ; add the offset
 63+  A470 79               ld a,c                      ; get original row back
 64+  A471 ED 73 CF A4      ld (buffer_bufferlinetoscreen1+1),sp ; this is some self-modifying code; stores the stack pointer in an ld sp,nn instruction at the end
 65+  A475 D9               exx
 66+  A476 0E 00            ld c,0                      ; zero horizontal
 67+  A478 47               ld b,a                      ; load the row number into vertical coord
 68+  A479 04               inc b
 69+  A47A 04               inc b                       ; move forward 2 to allow for scores
 70+  A47B CD 73 A6         call screen_getcelladdress  ; get the memory into de
 71+  A47E 21 10 00         ld hl,16                    ; offset by 16 chars to get to the centre, since populating stack from right
 72+  A481 19               add hl,de
 73+  A482              buffer_bufferlinetoscreen0:
 74+  A482 D9               exx                         ; hl is now buffer
 75+  A483 23               inc hl
 76+  A484 23               inc hl                      ; move hl forward 2 to skip first two blocks
 77+  A485 F9               ld sp,hl                    ; do first fourteen for left hand side, sp pointing at buffer
 78+  A486 F1               pop af
 79+  A487 C1               pop bc
 80+  A488 D1               pop de
 81+  A489 DD E1            pop ix
 82+  A48B D9               exx                         ; hl is now screen
 83+  A48C 08               ex af,af'
 84+  A48D F1               pop af
 85+  A48E C1               pop bc
 86+  A48F D1               pop de
 87+  A490 F9               ld sp,hl                    ; sp pointing at screen
 88+  A491 D5               push de
 89+  A492 C5               push bc
 90+  A493 F5               push af
 91+  A494 08               ex af,af'
 92+  A495 D9               exx                         ; hl is now buffer
 93+  A496 DD E5            push ix
 94+  A498 D5               push de
 95+  A499 C5               push bc
 96+  A49A F5               push af
 97+  A49B 1E 0E            ld e,14                    ; do another fourteen for right hand side
 98+  A49D 16 00            ld d,0
 99+  A49F 19               add hl,de
100+  A4A0 F9               ld sp,hl                    ; sp pointing at buffer
101+  A4A1 F1               pop af
102+  A4A2 C1               pop bc
103+  A4A3 D1               pop de
104+  A4A4 DD E1            pop ix
105+  A4A6                  ;pop ix
106+  A4A6 D9               exx                         ; hl is now screen
107+  A4A7 08               ex af,af'
108+  A4A8 1E 0E            ld e,14
109+  A4AA 16 00            ld d,0
110+  A4AC 19               add hl,de
111+  A4AD F1               pop af
112+  A4AE C1               pop bc
113+  A4AF D1               pop de
114+  A4B0                  ;pop iy
115+  A4B0 F9               ld sp,hl                    ; sp pointing at screen
116+  A4B1                  ;push iy
117+  A4B1 D5               push de
118+  A4B2 C5               push bc
119+  A4B3 F5               push af
120+  A4B4 08               ex af,af'
121+  A4B5 D9               exx                         ; hl is now buffer
122+  A4B6 DD E5            push ix
123+  A4B8 D5               push de
124+  A4B9 C5               push bc
125+  A4BA F5               push af
126+  A4BB 1E 10            ld e,16
127+  A4BD 16 00            ld d,0
128+  A4BF 19               add hl,de
129+  A4C0 D9               exx                         ; hl is now screen
130+  A4C1 1E 0E            ld e,14
131+  A4C3 16 00            ld d,0
132+  A4C5 ED 52            sbc hl,de
133+  A4C7 24               inc h
134+  A4C8 7C               ld a,h
135+  A4C9 E6 07            and 0x07                    ; check if this is multiple of 8, if so, end of cell line
136+  A4CB C2 82 A4         jp nz,buffer_bufferlinetoscreen0 ; next line in cell
137+  A4CE              buffer_bufferlinetoscreen1:
138+  A4CE 31 00 00         ld sp,0
139+  A4D1 D9               exx
140+  A4D2 C9               ret
141+  A4D3
142+  A4D3              ;
143+  A4D3              ; Copies the buffer to the screen for updated lines. Use stack.
144+  A4D3              ; Inputs: none
145+  A4D3              ;
146+  A4D3              buffer_buffertoscreen:
147+  A4D3 3A 3E A4         ld a,(buffer_updateall)      ; get the all update flag
148+  A4D6 FE 00            cp 0
149+  A4D8 CA E4 A4         jp z,buffer_buffertoscreen2  ; if not set, draw only updated
150+  A4DB CD 05 A5         call buffer_allbuffertoscreen ; otherwise, draw whole screen
151+  A4DE 21 3E A4         ld hl,buffer_updateall
152+  A4E1 36 00            ld (hl),0                    ; reset flag
153+  A4E3 C9               ret
154+  A4E4              buffer_buffertoscreen2:
155+  A4E4 06 15            ld b,21
156+  A4E6 FD 21 29 A4      ld iy,buffer_updatedlines    ; the location of the updated lines
157+  A4EA              buffer_buffertoscreen0:
158+  A4EA FD 7E 00         ld a,(iy)
159+  A4ED FE FF            cp 255
160+  A4EF CA 01 A5         jp z,buffer_buffertoscreen1                       ; if this is 255, then we're at the end of the updated list
161+  A4F2 C5               push bc
162+  A4F3 FD E5            push iy
163+  A4F5 F3               di
164+  A4F6 CD 5E A4         call buffer_bufferlinetoscreen
165+  A4F9 FB               ei
166+  A4FA FD E1            pop iy
167+  A4FC C1               pop bc
168+  A4FD FD 23            inc iy
169+  A4FF 10 E9            djnz buffer_buffertoscreen0
170+  A501              buffer_buffertoscreen1:
171+  A501 CD 19 A5         call buffer_buffertoattrsfast
172+  A504 C9               ret
173+  A505
174+  A505              ;
175+  A505              ; Copies the buffer to the screen. Use stack.
176+  A505              ; Inputs: none
177+  A505              ;
178+  A505              buffer_allbuffertoscreen:
179+  A505 06 15            ld b,21
180+  A507 3E 00            ld a,0
181+  A509              buffer_allbuffertoscreen0:
182+  A509 C5               push bc
183+  A50A F5               push af
184+  A50B F3               di
185+  A50C CD 5E A4         call buffer_bufferlinetoscreen
186+  A50F FB               ei
187+  A510 F1               pop af
188+  A511 C1               pop bc
189+  A512 3C               inc a
190+  A513 10 F4            djnz buffer_allbuffertoscreen0
191+  A515
192+  A515 CD 19 A5         call buffer_buffertoattrsfast
193+  A518 C9               ret
194+  A519
195+  A519              ;
196+  A519              ; Copies the attrs buffer to screen with the stack
197+  A519              ;
198+  A519              buffer_buffertoattrsfast:
199+  A519 ED 73 88 A5      ld (buffer_buffertoattrsfast1+1),sp ; this is some self-modifying code; stores the stack pointer in an ld sp,nn instruction at the end
200+  A51D 3A 8C A5         ld a,(screen_offset)            ; get the screen offset in rows, so want *32
201+  A520 11 20 00         ld de,32
202+  A523 CD 3A 80         call utilities_multiply
203+  A526 54 5D            ld de,hl
204+  A528 21 87 A0         ld hl,buffer_attr_buffer
205+  A52B 19               add hl,de                       ; add the offset, start of attr buffer now in hl
206+  A52C D9               exx
207+  A52D 21 50 58         ld hl,22528+80                  ; start of attr memory + 2 lines for score + 16 to start at right side
208+  A530 FD 21 27 A4      ld iy,buffer_tmp
209+  A534 FD 36 00 15      ld (iy),21              ; number of times to loop
210+  A538              buffer_buffertoattrsfast0:
211+  A538 D9               exx                         ; hl is now buffer
212+  A539 23               inc hl
213+  A53A 23               inc hl                      ; move hl forward 2 to skip first two blocks
214+  A53B F9               ld sp,hl                    ; do first fourteen for left hand side, sp pointing at buffer
215+  A53C F1               pop af
216+  A53D C1               pop bc
217+  A53E D1               pop de
218+  A53F DD E1            pop ix
219+  A541 D9               exx                         ; hl is now screen
220+  A542 08               ex af,af'
221+  A543 F1               pop af
222+  A544 C1               pop bc
223+  A545 D1               pop de
224+  A546 F9               ld sp,hl                    ; sp pointing at screen
225+  A547 D5               push de
226+  A548 C5               push bc
227+  A549 F5               push af
228+  A54A 08               ex af,af'
229+  A54B D9               exx                         ; hl is now buffer
230+  A54C DD E5            push ix
231+  A54E D5               push de
232+  A54F C5               push bc
233+  A550 F5               push af
234+  A551 1E 0E            ld e,14                    ; do another fourteen for right hand side
235+  A553 16 00            ld d,0
236+  A555 19               add hl,de
237+  A556 F9               ld sp,hl                    ; sp pointing at buffer
238+  A557 F1               pop af
239+  A558 C1               pop bc
240+  A559 D1               pop de
241+  A55A DD E1            pop ix
242+  A55C D9               exx                         ; hl is now screen
243+  A55D 08               ex af,af'
244+  A55E 1E 0E            ld e,14
245+  A560 16 00            ld d,0
246+  A562 19               add hl,de
247+  A563 F1               pop af
248+  A564 C1               pop bc
249+  A565 D1               pop de
250+  A566 F9               ld sp,hl                    ; sp pointing at screen
251+  A567 D5               push de
252+  A568 C5               push bc
253+  A569 F5               push af
254+  A56A 08               ex af,af'
255+  A56B D9               exx                         ; hl is now buffer
256+  A56C DD E5            push ix
257+  A56E D5               push de
258+  A56F C5               push bc
259+  A570 F5               push af
260+  A571 1E 10            ld e,16
261+  A573 16 00            ld d,0
262+  A575 19               add hl,de
263+  A576 D9               exx                         ; hl is now screen
264+  A577 11 12 00         ld de,18
265+  A57A 19               add hl,de
266+  A57B FD 7E 00         ld a,(iy)
267+  A57E 3D               dec a
268+  A57F FE 00            cp 0
269+  A581 FD 77 00         ld (iy),a
270+  A584 C2 38 A5         jp nz,buffer_buffertoattrsfast0 ; do another row
271+  A587              buffer_buffertoattrsfast1:
272+  A587 31 00 00         ld sp,0
273+  A58A D9               exx
274+  A58B C9               ret
# file closed: screen/buffer.asm
 24   A58C                  include "screen\screen.asm"
# file opened: screen/screen.asm
  1+  A58C              screen_offset:
  2+  A58C 00               defb 0                      ; offset from top of screen in lines
  3+  A58D
  4+  A58D              screen_tmp:
  5+  A58D 00 00            defb 0,0                      ; temporary memory
  6+  A58F
  7+  A58F              screen_setscorecolours:
  8+  A58F 21 B2 AE         ld hl,score_colours
  9+  A592 11 00 58         ld de,22528                     ; attrs here
 10+  A595 01 40 00         ld bc,64
 11+  A598 ED B0            ldir
 12+  A59A C9               ret
 13+  A59B
 14+  A59B              screen_sethighscorecolours:
 15+  A59B 21 F2 AE         ld hl,high_score_colours
 16+  A59E 11 E0 5A         ld de,22528+736                 ; attrs here
 17+  A5A1 01 20 00         ld bc,32
 18+  A5A4 ED B0            ldir
 19+  A5A6 C9               ret
 20+  A5A7
 21+  A5A7              ; Draw the screen
 22+  A5A7              ; Inputs:
 23+  A5A7              ; none
 24+  A5A7              ; Notes:
 25+  A5A7              ; The value held at screen_offset tells the screen how many rows to scroll down. Set to five to bottom out.
 26+  A5A7              screen_draw:
 27+  A5A7                  ;call clear_screen
 28+  A5A7 0E 00            ld c,0                      ; horiz
 29+  A5A9 06 00            ld b,0                      ; vert, 0 at top
 30+  A5AB DD 21 74 A9      ld ix,level01               ; point ix at level data
 31+  A5AF FD 21 87 A0      ld iy,buffer_attr_buffer    ; point iy at attr data
 32+  A5B3              screen_draw0:
 33+  A5B3 DD 7E 00         ld a,(ix)                   ; load the block number
 34+  A5B6 C5               push bc                     ; store bc, contains loop count
 35+  A5B7 CD FA A6         call screen_getattr         ; get the memory location for this cell's attr into hl
 36+  A5BA 7E               ld a,(hl)                   ; get the attr value at the address
 37+  A5BB FD 77 00         ld (iy),a                   ; load the attr into memory
 38+  A5BE DD 7E 00         ld a,(ix)                   ; load the block number
 39+  A5C1 CD EF A6         call screen_getblock        ; get the block data into hl
 40+  A5C4 CD D5 A6         call screen_showchar        ; show this character here
 41+  A5C7 C1               pop bc                      ; get the loop counter back
 42+  A5C8 DD 23            inc ix                      ; increment level location
 43+  A5CA FD 23            inc iy                      ; increment attr location
 44+  A5CC 0C               inc c                       ; increment horiz
 45+  A5CD 79               ld a,c
 46+  A5CE FE 20            cp 32                       ; check if horiz has reach edge of screen
 47+  A5D0 C2 B3 A5         jp nz,screen_draw0          ; if not, loop
 48+  A5D3 0E 00            ld c,0                      ; if so, reset horiz
 49+  A5D5 04               inc b                       ; increment vertical
 50+  A5D6 78               ld a,b
 51+  A5D7 FE 1D            cp 29                       ; check if at bottom
 52+  A5D9 C2 B3 A5         jp nz,screen_draw0          ; if not, loop
 53+  A5DC 21 8D A5         ld hl, screen_tmp
 54+  A5DF 36 09            ld (hl),9                   ; load the block number into memory
 55+  A5E1 DD 21 14 AD      ld ix,level01rocks          ; rock memory
 56+  A5E5 CD 43 A6         call screen_initobjects     ; draw rocks
 57+  A5E8 21 8D A5         ld hl, screen_tmp
 58+  A5EB 36 0C            ld (hl),12                  ; load the block number into memory
 59+  A5ED DD 21 14 AE      ld ix,level01missiles       ; missile memory
 60+  A5F1 CD 43 A6         call screen_initobjects     ; draw missiles
 61+  A5F4 21 8D A5         ld hl, screen_tmp
 62+  A5F7 36 08            ld (hl),08                  ; load the block number into memory
 63+  A5F9 DD 21 8D AE      ld ix,level01diamonds       ; diamond memory
 64+  A5FD CD 43 A6         call screen_initobjects     ; draw diamonds
 65+  A600 21 8D A5         ld hl, screen_tmp
 66+  A603 36 0E            ld (hl),14                  ; load the block number into memory
 67+  A605 DD 21 9D AE      ld ix,level01gems           ; gems memory
 68+  A609 CD 43 A6         call screen_initobjects     ; draw gems
 69+  A60C CD 10 A6         call screen_setuptext       ; draws text on the screen
 70+  A60F C9               ret
 71+  A610
 72+  A610              ;
 73+  A610              ; Sets up text on the screen
 74+  A610              ;
 75+  A610              screen_setuptext:
 76+  A610 CD FE B8         call scores_showtable
 77+  A613 CD 9B A5         call screen_sethighscorecolours
 78+  A616 21 82 80         ld hl, string_score1
 79+  A619 CD 3F 83         call string_print
 80+  A61C 21 8B 80         ld hl, string_scorenumbers1
 81+  A61F CD 3F 83         call string_print
 82+  A622 21 94 80         ld hl, string_company
 83+  A625 CD 3F 83         call string_print
 84+  A628 21 A5 80         ld hl, string_score2
 85+  A62B CD 3F 83         call string_print
 86+  A62E 21 AE 80         ld hl, string_scorenumbers2
 87+  A631 CD 3F 83         call string_print
 88+  A634 21 9A 80         ld hl, string_credits
 89+  A637 CD 3F 83         call string_print
 90+  A63A CD 8F A5         call screen_setscorecolours
 91+  A63D C9               ret
 92+  A63E
 93+  A63E              ;
 94+  A63E              ; Sets a line of colours
 95+  A63E              ; Inputs:
 96+  A63E              ; a - colour to set
 97+  A63E              ; b - number to set
 98+  A63E              ; de - start memory location
 99+  A63E              ;
100+  A63E              screen_setcolours:
101+  A63E 12               ld (de),a
102+  A63F 13               inc de
103+  A640 10 FC            djnz screen_setcolours
104+  A642 C9               ret
105+  A643
106+  A643              ;
107+  A643              ; Draw initial object positions
108+  A643              ; Inputs:
109+  A643              ; ix - memory location of objects
110+  A643              ; a - graphic
111+  A643              screen_initobjects:
112+  A643 DD 4E 00         ld c,(ix)                   ; get the horiz coord
113+  A646 79               ld a,c
114+  A647 FE FF            cp 255
115+  A649 CA 72 A6         jp z,screen_initobjects2
116+  A64C DD 23            inc ix                      ; move to next
117+  A64E DD 46 00         ld b,(ix)                   ; get the vert coord
118+  A651 DD 23            inc ix
119+  A653 CD 84 A6         call screen_getcellattradress ; get the memory address of b,c attr into de
120+  A656 D5               push de
121+  A657 3A 8D A5         ld a,(screen_tmp)                  ; get the block number back
122+  A65A CD FA A6         call screen_getattr         ; get the memory location for this cell's attr into hl
123+  A65D D1               pop de
124+  A65E 7E               ld a,(hl)                   ; get the attr value at the address
125+  A65F 12               ld (de),a                   ; load the attr into memory
126+  A660 3A 8D A5         ld a,(screen_tmp)                  ; get the block number back
127+  A663 CD EF A6         call screen_getblock        ; get the block data into hl
128+  A666 CD D5 A6         call screen_showchar        ; show this character here
129+  A669
130+  A669              screen_initobjects1:
131+  A669 DD 23            inc ix                      ; move past state
132+  A66B DD 23            inc ix
133+  A66D DD 23            inc ix                      ; move past mem
134+  A66F C3 43 A6         jp screen_initobjects
135+  A672              screen_initobjects2:
136+  A672 C9               ret
137+  A673
138+  A673
139+  A673              ;
140+  A673              ; Return character cell address offset of block at (b, c) ready for addition to screen  memory.
141+  A673              ; Inputs:
142+  A673              ; bc: coords
143+  A673              ; Outputs:
144+  A673              ; de: memory location
145+  A673              ;
146+  A673              screen_getcelladdress:
147+  A673 78               ld a,b      ; vertical position.
148+  A674 E6 18            and 24      ; which segment, 0, 1 or 2?
149+  A676 C6 40            add a,64    ; 64*256 = 16384, Spectrum's screen memory.
150+  A678 57               ld d,a      ; this is our high byte.
151+  A679 78               ld a,b      ; what was that vertical position again?
152+  A67A E6 07            and 7       ; which row within segment?
153+  A67C 0F               rrca        ; multiply row by 32.
154+  A67D 0F               rrca
155+  A67E 0F               rrca
156+  A67F 5F               ld e,a      ; low byte.
157+  A680 79               ld a,c      ; add on y coordinate.
158+  A681 83               add a,e     ; mix with low byte.
159+  A682 5F               ld e,a      ; address of screen position in de.
160+  A683 C9               ret
161+  A684
162+  A684              ;
163+  A684              ; Calculate buffer address of attribute for character at (b, c).
164+  A684              ; Inputs:
165+  A684              ; bc: coords
166+  A684              ; Outputs:
167+  A684              ; de: memory location
168+  A684              ;
169+  A684              screen_getcellattradress:
170+  A684 11 87 A0         ld de,buffer_attr_buffer ; memory is at base + horiz (c) + vert*32 (b)
171+  A687 69               ld l,c      ; x position.
172+  A688 26 00            ld h,0      ; 0 h
173+  A68A 19               add hl,de
174+  A68B 54 5D            ld de,hl    ; horiz done
175+  A68D 78               ld a,b      ; do vert
176+  A68E D5               push de
177+  A68F C5               push bc
178+  A690 11 20 00         ld de,32
179+  A693 CD 3A 80         call utilities_multiply
180+  A696 C1               pop bc
181+  A697 D1               pop de
182+  A698 19               add hl,de
183+  A699 54 5D            ld de,hl    ; vert done
184+  A69B C9               ret
185+  A69C
186+  A69C              ;
187+  A69C              ; Calculate buffer address of attribute for character at (b, c).
188+  A69C              ; Inputs:
189+  A69C              ; bc: coords
190+  A69C              ; Outputs:
191+  A69C              ; de: memory location
192+  A69C              ;
193+  A69C              screen_getscreenattradress:
194+  A69C 11 00 58         ld de,22528 ; memory is at base + horiz (c) + vert*32 (b)
195+  A69F 69               ld l,c      ; x position.
196+  A6A0 26 00            ld h,0      ; 0 h
197+  A6A2 19               add hl,de
198+  A6A3 54 5D            ld de,hl    ; horiz done
199+  A6A5 78               ld a,b      ; do vert
200+  A6A6 D5               push de
201+  A6A7 C5               push bc
202+  A6A8 11 20 00         ld de,32
203+  A6AB CD 3A 80         call utilities_multiply
204+  A6AE C1               pop bc
205+  A6AF D1               pop de
206+  A6B0 19               add hl,de
207+  A6B1 54 5D            ld de,hl    ; vert done
208+  A6B3 C9               ret
209+  A6B4
210+  A6B4              ;
211+  A6B4              ; Gets the attr memory location for a screen coord
212+  A6B4              ; Will overwrite bc
213+  A6B4              ; Inputs:
214+  A6B4              ; bc - screen coords
215+  A6B4              ; Outputs:
216+  A6B4              ; de - memory location
217+  A6B4              ; bc - character coords
218+  A6B4              ;
219+  A6B4              screen_getattraddressfromscreencoords:
220+  A6B4 78               ld a,b                          ; get the player block coords of current block
221+  A6B5 E6 F8            and 248                         ; find closest multiple of eight
222+  A6B7 0F               rrca
223+  A6B8 0F               rrca
224+  A6B9 0F               rrca                ; divide by 8
225+  A6BA 47               ld b,a
226+  A6BB 79               ld a,c
227+  A6BC 48               ld c,b                         ; swap b and c
228+  A6BD E6 F8            and 248
229+  A6BF 0F               rrca
230+  A6C0 0F               rrca
231+  A6C1 0F               rrca                ; divide by 8
232+  A6C2 47               ld b,a
233+  A6C3 CD 84 A6         call screen_getcellattradress   ; work out memory location of current block attributes, memory in de
234+  A6C6 C9               ret
235+  A6C7
236+  A6C7              ;
237+  A6C7              ; Get buffer address for a character at b,c - b vert
238+  A6C7              ; Buffer memory is stored as sequential block
239+  A6C7              ; Char at 0,0 is stored 0,32,64...; 0,1 is stored at 1,33,65
240+  A6C7              ; Inputs:
241+  A6C7              ; bc - coords
242+  A6C7              ; Outputs:
243+  A6C7              ; de - memory location of first byte
244+  A6C7              screen_getbufferaddress:
245+  A6C7 21 87 83         ld hl, buffer_buffer    ; first get screen buffer start
246+  A6CA 50               ld d,b                  ; then work out vertical offset
247+  A6CB 1E 00            ld e,0                  ; mult by 256, low byte becomes high byte, de now holds result
248+  A6CD 19               add hl,de               ; add to base
249+  A6CE 59               ld e,c                  ; then add horizontal offset (c)
250+  A6CF 16 00            ld d,0
251+  A6D1 19               add hl,de               ; add to base
252+  A6D2 54 5D            ld de,hl
253+  A6D4 C9               ret
254+  A6D5
255+  A6D5              ;
256+  A6D5              ; Display character hl at (b, c) to buffer.
257+  A6D5              ; Stored sequentially
258+  A6D5              ; Inputs:
259+  A6D5              ; hl: block address
260+  A6D5              ; bc: coords
261+  A6D5              ;
262+  A6D5              screen_showchar:
263+  A6D5 3E 00            ld a,0
264+  A6D7 E5               push hl
265+  A6D8 CD C7 A6         call screen_getbufferaddress ; get the current screen buffer pointer
266+  A6DB E1               pop hl
267+  A6DC 06 08            ld b,8              ; number of pixels high.
268+  A6DE              screen_showchar0:
269+  A6DE 7E               ld a,(hl)           ; source graphic.
270+  A6DF 12               ld (de),a           ; transfer to screen.
271+  A6E0 23               inc hl              ; next piece of data.
272+  A6E1 E5               push hl             ; store hl
273+  A6E2 62 6B            ld hl,de            ; put de in hl
274+  A6E4 1E 20            ld e,32            ; inc memory by 32, so load 32 into de
275+  A6E6 16 00            ld d,0
276+  A6E8 19               add hl,de              ; add de to hl
277+  A6E9 54 5D            ld de,hl            ; load back to de
278+  A6EB E1               pop hl              ; restore hl
279+  A6EC
280+  A6EC 10 F0            djnz screen_showchar0 ; repeat
281+  A6EE C9               ret
282+  A6EF
283+  A6EF
284+  A6EF              ;
285+  A6EF              ; Get cell graphic.
286+  A6EF              ; Inputs:
287+  A6EF              ; a: block
288+  A6EF              ; Outputs:
289+  A6EF              ; hl: memory
290+  A6EF              ;
291+  A6EF              screen_getblock:
292+  A6EF 07               rlca                        ; multiply block number by eight.
293+  A6F0 07               rlca
294+  A6F1 07               rlca
295+  A6F2 5F               ld e,a                      ; displacement to graphic address.
296+  A6F3 16 00            ld d,0                      ; no high byte.
297+  A6F5 21 12 AF         ld hl,sprites               ; address of character blocks.
298+  A6F8 19               add hl,de                   ; point to block.
299+  A6F9 C9               ret
300+  A6FA
301+  A6FA              ;
302+  A6FA              ; Get cell attribute.
303+  A6FA              ; Inputs:
304+  A6FA              ; a: block
305+  A6FA              ; Outputs:
306+  A6FA              ; hl: memory
307+  A6FA              ;
308+  A6FA              screen_getattr:
309+  A6FA 5F               ld e,a                      ; displacement to attribute address.
310+  A6FB 16 00            ld d,0                      ; no high byte.
311+  A6FD 21 8A AF         ld hl,sprite_attrs          ; address of block attributes.
312+  A700 19               add hl,de                   ; point to attribute.
313+  A701 C9               ret
314+  A702
# file closed: screen/screen.asm
 25   A702                  include "screen\sprites.asm"
# file opened: screen/sprites.asm
  1+  A702              ;
  2+  A702              ; This is the sprite routine and expects coordinates in (c ,b) form,
  3+  A702              ; where c is the vertical coord from the top of the screen (0-176), and
  4+  A702              ; b is the horizontal coord from the left of the screen (0 to 240).
  5+  A702              ; Sprite data is stored as you'd expect in its unshifted form as this
  6+  A702              ; routine takes care of all the shifting itself. This means that sprite
  7+  A702              ; handling isn't particularly fast but the graphics only take 1/8th of the
  8+  A702              ; space they would require in pre-shifted form.
  9+  A702              ; Inputs:
 10+  A702              ; hl - sprite data
 11+  A702              ; bc - screen coords
 12+  A702              ;
 13+  A702              sprites_drawsprite7:
 14+  A702 EE 07            xor 7               ; complement last 3 bits.
 15+  A704 3C               inc a               ; add one for luck!
 16+  A705              sprites_drawsprite3:
 17+  A705 CB 11            rl c                ; ...into middle byte...
 18+  A707 CB 12            rl d                ; ...and finally into left character cell.
 19+  A709 3D               dec a               ; count shifts we've done.
 20+  A70A 20 F9            jr nz,sprites_drawsprite3 ; return until all shifts complete.
 21+  A70C                                      ; Line of sprite image is now in e + c + d, we need it in form c + d + e.
 22+  A70C 79               ld a,c              ; left edge of image is currently in e.
 23+  A70D 4A               ld c,d              ; put right edge there instead.
 24+  A70E 57               ld d,a              ; and the left edge back into c.
 25+  A70F 18 25            jr sprites_drawsprite0   ; we've done the switch so transfer to screen.
 26+  A711              sprites_drawsprite:
 27+  A711 ED 43 76 A7      ld (dispx),bc       ; store coords in dispx for now.
 28+  A715 E5               push hl
 29+  A716 CD 54 A7         call sprites_scadd  ; calculate screen address.
 30+  A719 E1               pop hl
 31+  A71A 3E 08            ld a,8              ; height of sprite in pixels.
 32+  A71C              sprites_drawsprite1:
 33+  A71C 08               ex af,af'           ; store loop counter.
 34+  A71D D5               push de             ; store screen address.
 35+  A71E 4E               ld c,(hl)           ; first sprite graphic.
 36+  A71F 23               inc hl              ; increment poiinter to sprite data.
 37+  A720 22 78 A7         ld (sprtmp),hl      ; store it for later.
 38+  A723 16 00            ld d,0              ; blank right byte for now.
 39+  A725 78               ld a,b              ; b holds y position.
 40+  A726 E6 07            and 7               ; how are we straddling character cells?
 41+  A728 28 0C            jr z,sprites_drawsprite0 ; we're not straddling them, don't bother shifting.
 42+  A72A FE 05            cp 5                ; 5 or more right shifts needed?
 43+  A72C 30 D4            jr nc,sprites_drawsprite7 ; yes, shift from left as it's quicker.
 44+  A72E A7               and a               ; oops, carry flag is set so clear it.
 45+  A72F              sprites_drawsprite2:
 46+  A72F CB 19            rr c                ; rotate left byte right...
 47+  A731 CB 1A            rr d                ; ...into right byte.
 48+  A733 3D               dec a               ; one less shift to do.
 49+  A734 20 F9            jr nz,sprites_drawsprite2 ; return until all shifts complete.
 50+  A736              sprites_drawsprite0:
 51+  A736 E1               pop hl              ; pop screen address from stack.
 52+  A737 7E               ld a,(hl)           ; what's there already.
 53+  A738 A9               xor c               ; merge in image data.
 54+  A739 77               ld (hl),a           ; place onto screen.
 55+  A73A 23               inc hl
 56+  A73B 7E               ld a,(hl)           ; what's already there.
 57+  A73C AA               xor d               ; right edge of sprite image data.
 58+  A73D 77               ld (hl),a           ; plonk it on screen.
 59+  A73E 3A 76 A7         ld a,(dispx)        ; vertical coordinate.
 60+  A741 3C               inc a               ; next line down.
 61+  A742 32 76 A7         ld (dispx),a        ; store new position.
 62+  A745 2B               dec hl
 63+  A746 11 20 00         ld de,32            ; add 32 to get to the next row
 64+  A749 19               add hl,de           ; add 32
 65+  A74A              sprites_drawsprite6:
 66+  A74A EB               ex de,hl            ; screen address in de.
 67+  A74B 2A 78 A7         ld hl,(sprtmp)      ; restore graphic address.
 68+  A74E 08               ex af,af'           ; restore loop counter.
 69+  A74F 3D               dec a               ; decrement it.
 70+  A750 C2 1C A7         jp nz,sprites_drawsprite1 ; not reached bottom of sprite yet to repeat.
 71+  A753 C9               ret                 ; job done.
 72+  A754
 73+  A754              ;
 74+  A754              ; This routine returns a buffer address for (c, b) in de (c vert).
 75+  A754              ; For example: 0,0 will be at memory offset 0
 76+  A754              ; 1,0 (1 down) will be at memory offset 1
 77+  A754              ; 0,7 will be at memory offset 0
 78+  A754              ; 9,1 will be at memory offset 8+1
 79+  A754              ; 8,0 will be at memory offset 256
 80+  A754              ; 9,0 will be at memory offset 257
 81+  A754              ; Outputs:
 82+  A754              ; de - coords
 83+  A754              ;
 84+  A754              sprites_scadd:
 85+  A754 79               ld a,c               ; calculate vertical offset
 86+  A755 E6 F8            and 248             ;  to get nearest multiple of 8
 87+  A757 0F               rrca
 88+  A758 0F               rrca
 89+  A759 0F               rrca                ; divide by 8
 90+  A75A 67               ld h,a
 91+  A75B 78               ld a,b               ; calculate horizontal offset
 92+  A75C E6 F8            and 248             ;  to get nearest multiple of 8
 93+  A75E 0F               rrca
 94+  A75F 0F               rrca
 95+  A760 0F               rrca                ; divide by 8
 96+  A761 6F               ld l,a
 97+  A762 C5               push bc             ; store the screen coords
 98+  A763 44 4D            ld bc,hl            ; load bc with the character coords
 99+  A765 CD C7 A6         call screen_getbufferaddress
100+  A768 C1               pop bc              ; get back screen coords, de is now memory of character
101+  A769 79               ld a,c              ; now add the vertical within the cell
102+  A76A E6 07            and 7
103+  A76C 0F               rrca                ; multiply by 32.
104+  A76D 0F               rrca
105+  A76E 0F               rrca
106+  A76F 6F               ld l,a
107+  A770 26 00            ld h,0
108+  A772 19               add hl,de
109+  A773 54 5D            ld de,hl
110+  A775 C9               ret
111+  A776
112+  A776 00           dispx   defb 0           ; general-use coordinates.
113+  A777 00           dispy   defb 0
114+  A778 00 00        sprtmp  defb 0,0           ; sprite temporary address.
115+  A77A
# file closed: screen/sprites.asm
 26   A77A                  include "screen\titlescreen.asm"
# file opened: screen/titlescreen.asm
  1+  A77A              ;
  2+  A77A              ; Draws the title screen
  3+  A77A              ;
  4+  A77A              titlescreen_show:
  5+  A77A CD F2 A7         call titlescreen_init
  6+  A77D CD 9B A7         call titlescreen_drawtitle
  7+  A780 3E FA            ld a,250                              ; wait for 200 frames
  8+  A782 CD 52 80         call utilities_waitforkey_forframes   ; wait for keypress
  9+  A785 7B               ld a,e
 10+  A786 FE 01            cp 1                                  ; was anything pressed?
 11+  A788 C8               ret z                                 ; end titlescreen if so
 12+  A789
 13+  A789 CD 05 A8         call titlescreen_alt_init             ; otherwise, draw alt screen
 14+  A78C CD B7 A7         call titlescreen_alt_drawtitle
 15+  A78F 3E FA            ld a,250                              ; wait for 200 frames
 16+  A791 CD 52 80         call utilities_waitforkey_forframes   ; wait for keypress
 17+  A794 7B               ld a,e
 18+  A795 FE 01            cp 1                                  ; was anything pressed?
 19+  A797 C2 7A A7         jp nz,titlescreen_show                ; start again if not
 20+  A79A C9               ret
 21+  A79B
 22+  A79B              ;
 23+  A79B              ; Draws the iconic logo
 24+  A79B              ;
 25+  A79B              titlescreen_drawtitle:
 26+  A79B 06 66            ld b,102              ; number of points
 27+  A79D DD 21 12 A8      ld ix,titlescreen_logo_data
 28+  A7A1              titlescreen_drawtitle0:
 29+  A7A1 C5               push bc
 30+  A7A2 DD 4E 00         ld c,(ix)                   ; got horiz
 31+  A7A5 DD 23            inc ix
 32+  A7A7 DD 46 00         ld b,(ix)                   ; got vert
 33+  A7AA DD 23            inc ix
 34+  A7AC CD 9C A6         call screen_getscreenattradress ; memory in de
 35+  A7AF 13               inc de                      ; slide one to the right, since I'm too lazy to change the data
 36+  A7B0 3E 13            ld a,19
 37+  A7B2 12               ld (de),a
 38+  A7B3 C1               pop bc
 39+  A7B4 10 EB            djnz titlescreen_drawtitle0 ; loop if we're not at the end
 40+  A7B6 C9               ret
 41+  A7B7
 42+  A7B7              ;
 43+  A7B7              ; Draws the alternate title screen
 44+  A7B7              ;
 45+  A7B7              titlescreen_alt_drawtitle:
 46+  A7B7 21 D1 80         ld hl,string_alttitlescreen_1
 47+  A7BA CD 3F 83         call string_print
 48+  A7BD 21 DD 80         ld hl,string_alttitlescreen_2
 49+  A7C0 CD 3F 83         call string_print
 50+  A7C3 21 D8 81         ld hl,string_alttitlescreen_3
 51+  A7C6 CD 3F 83         call string_print
 52+  A7C9 06 20            ld b,32
 53+  A7CB 3E 43            ld a,67
 54+  A7CD 11 00 58         ld de,22528                         ; top row attrs here
 55+  A7D0 CD 3E A6         call screen_setcolours
 56+  A7D3 06 20            ld b,32
 57+  A7D5 3E 46            ld a,70
 58+  A7D7 11 A0 59         ld de,22528+416                     ; 13th row attrs here
 59+  A7DA CD 3E A6         call screen_setcolours
 60+  A7DD 06 20            ld b,32
 61+  A7DF 3E 43            ld a,67
 62+  A7E1 11 20 5A         ld de,22528+544                         ; 17th row attrs here
 63+  A7E4 CD 3E A6         call screen_setcolours
 64+  A7E7 06 20            ld b,32
 65+  A7E9 3E 42            ld a,66
 66+  A7EB 11 A0 5A         ld de,22528+672                         ; 21st row attrs here
 67+  A7EE CD 3E A6         call screen_setcolours
 68+  A7F1 C9               ret
 69+  A7F2
 70+  A7F2              ;
 71+  A7F2              ; Initialises the screen
 72+  A7F2              ;
 73+  A7F2              titlescreen_init:
 74+  A7F2              ; We want a black screen.
 75+  A7F2 3E 0B            ld a,11             ; magenta ink (7) on blue paper (0),
 76+  A7F4                                      ; bright (64).
 77+  A7F4 CD 67 80         call utilities_clearscreen
 78+  A7F7 32 8D 5C         ld (23693),a        ; set our screen colours.
 79+  A7FA 3E 01            ld a,1              ; 2 is the code for red.
 80+  A7FC D3 FE            out (254),a         ; write to port 254.
 81+  A7FE
 82+  A7FE 21 B7 80         ld hl,string_titlescreen_copyright
 83+  A801 CD 3F 83         call string_print
 84+  A804
 85+  A804 C9               ret
 86+  A805
 87+  A805              ;
 88+  A805              ; Initialises the screen
 89+  A805              ;
 90+  A805              titlescreen_alt_init:
 91+  A805              ; We want a black screen.
 92+  A805 3E 47            ld a,71             ; white ink (7) on black paper (0),
 93+  A807                                      ; bright (64).
 94+  A807 CD 67 80         call utilities_clearscreen
 95+  A80A 32 8D 5C         ld (23693),a        ; set our screen colours.
 96+  A80D 3E 00            ld a,0              ; 2 is the code for red.
 97+  A80F D3 FE            out (254),a         ; write to port 254.
 98+  A811
 99+  A811 C9               ret
100+  A812
101+  A812              ;
102+  A812              ; Horiz, vert
103+  A812              ;
104+  A812              titlescreen_logo_data:
105+  A812 08 00 09 00      defb 8,0,9,0,10,0,12,0,15,0,17,0,18,0,19,0
105+  A816 0A 00 0C 00
105+  A81A 0F 00 11 00
105+  A81E 12 00 13 00
106+  A822 09 01 0C 01      defb 9,1,12,1,15,1,17,1
106+  A826 0F 01 11 01
107+  A82A 09 02 0C 02      defb 9,2,12,2,13,2,14,2,15,2,17,2,18,2,19,2
107+  A82E 0D 02 0E 02
107+  A832 0F 02 11 02
107+  A836 12 02 13 02
108+  A83A 09 03 0C 03      defb 9,3,12,3,15,3,17,3
108+  A83E 0F 03 11 03
109+  A842 09 04 0C 04      defb 9,4,12,4,15,4,17,4,18,4,19,4
109+  A846 0F 04 11 04
109+  A84A 12 04 13 04
110+  A84E 00 06 01 06      defb 0,6,1,6,2,6,3,6,4,6,5,6,6,6,7,6,8,6,9,6,10,6,11,6
110+  A852 02 06 03 06
110+  A856 04 06 05 06
110+  A85A 06 06 07 06
110+  A85E 08 06 09 06
110+  A862 0A 06 0B 06
111+  A866 10 06 11 06      defb 16,6,17,6,18,6,19,6,20,6,21,6,22,6,23,6,24,6,25,6,26,6,27,6
111+  A86A 12 06 13 06
111+  A86E 14 06 15 06
111+  A872 16 06 17 06
111+  A876 18 06 19 06
111+  A87A 1A 06 1B 06
112+  A87E 02 07 02 08      defb 2,7,2,8,2,9,2,10,2,11,2,12,2,13,2,14,2,15,2,16,2,17,2,18,2,19,2,20
112+  A882 02 09 02 0A
112+  A886 02 0B 02 0C
112+  A88A 02 0D 02 0E
112+  A88E 02 0F 02 10
112+  A892 02 11 02 12
112+  A896 02 13 02 14
113+  A89A 19 07 19 08      defb 25,7,25,8,25,9,25,10,25,11,25,12,25,13,25,14,25,15,25,16,25,17,25,18,25,19,25,20
113+  A89E 19 09 19 0A
113+  A8A2 19 0B 19 0C
113+  A8A6 19 0D 19 0E
113+  A8AA 19 0F 19 10
113+  A8AE 19 11 19 12
113+  A8B2 19 13 19 14
114+  A8B6 03 0B 04 0B      defb 3,11,4,11,5,11,6,11,7,11,8,11,9,11,10,11,11,11
114+  A8BA 05 0B 06 0B
114+  A8BE 07 0B 08 0B
114+  A8C2 09 0B 0A 0B
114+  A8C6 0B 0B
115+  A8C8 0B 07 0B 08      defb 11,7,11,8,11,9,11,10
115+  A8CC 0B 09 0B 0A
116+  A8D0 10 0D 10 0F      defb 16,13,16,15,16,16,16,17,16,18,16,19,16,20
116+  A8D4 10 10 10 11
116+  A8D8 10 12 10 13
116+  A8DC 10 14
117+  A8DE
# file closed: screen/titlescreen.asm
 27   A8DE                  include "screen\lifescreen.asm"
# file opened: screen/lifescreen.asm
  1+  A8DE              ;
  2+  A8DE              ; Draws the life remaining screen
  3+  A8DE              ;
  4+  A8DE              lifescreen_draw:
  5+  A8DE CD 24 A9         call lifescreen_init
  6+  A8E1
  7+  A8E1 3A 77 B4         ld a,(game_currentplayer)             ; get the current player
  8+  A8E4 C6 30            add 48                                ; add 48 to get char
  9+  A8E6 21 DE 82         ld hl,string_lifescreen_player+10
 10+  A8E9 77               ld (hl),a                             ; load this to the string we're about to show
 11+  A8EA
 12+  A8EA 21 D4 82         ld hl,string_lifescreen_player
 13+  A8ED CD 3F 83         call string_print
 14+  A8F0
 15+  A8F0 3A AE B4         ld a,(player+9)                       ; get the current player lives
 16+  A8F3 C6 30            add 48                                ; add 48 to get the character
 17+  A8F5 FE 31            cp 49
 18+  A8F7 C2 0A A9         jp nz,lifescreen_draw0
 19+  A8FA 21 EE 82         ld hl,string_lifescreen_lastman
 20+  A8FD
 21+  A8FD 06 08            ld b,8
 22+  A8FF 3E 0A            ld a,10                                ; set red
 23+  A901 11 6C 58         ld de,22528+108                        ; attrs here
 24+  A904 CD 3E A6         call screen_setcolours
 25+  A907
 26+  A907 C3 11 A9         jp lifescreen_draw1
 27+  A90A              lifescreen_draw0:
 28+  A90A 21 E3 82         ld hl,string_lifescreen_lives+2       ; not last man, so use the normal view
 29+  A90D 77               ld (hl),a                             ; load this to the string we're about to show
 30+  A90E 21 E1 82         ld hl,string_lifescreen_lives
 31+  A911              lifescreen_draw1:
 32+  A911 CD 3F 83         call string_print
 33+  A914
 34+  A914 3E 86            ld a,134
 35+  A916 11 0B 58         ld de, 22528+11     ; get the colour for the top text
 36+  A919 06 0A            ld b,10
 37+  A91B CD 3E A6         call screen_setcolours
 38+  A91E
 39+  A91E 3E 64            ld a,100                              ; wait for 200 frames
 40+  A920 CD 52 80         call utilities_waitforkey_forframes   ; wait for keypress
 41+  A923
 42+  A923 C9               ret
 43+  A924
 44+  A924              ;
 45+  A924              ; Initialises the screen
 46+  A924              ;
 47+  A924              lifescreen_init:
 48+  A924              ; We want a blue screen.
 49+  A924                  ;call $0D6B
 50+  A924 3E 0E            ld a,14             ; yellow ink (6) on blue paper (1),
 51+  A926                                      ; bright (64).
 52+  A926 CD 67 80         call utilities_clearscreen
 53+  A929 32 8D 5C         ld (23693),a        ; set our screen colours.
 54+  A92C 3E 01            ld a,1              ; 1 is the code for blue.
 55+  A92E D3 FE            out (254),a         ; write to port 254.
 56+  A930                  ;call 3503           ; ROM routine - clears screen, opens chan 2.
 57+  A930
 58+  A930 C9               ret
# file closed: screen/lifescreen.asm
 28   A931                  include "screen\gameover.asm"
# file opened: screen/gameover.asm
  1+  A931              ;
  2+  A931              ; Draws the game over screen
  3+  A931              ;
  4+  A931              gameover_draw:
  5+  A931 CD 67 A9         call gameover_init
  6+  A934 CD 10 A6         call screen_setuptext       ; show scores
  7+  A937
  8+  A937 21 F9 82         ld hl,string_gameoverscreen_gameover
  9+  A93A CD 3F 83         call string_print
 10+  A93D
 11+  A93D 21 05 83         ld hl,string_gameoverscreen_copyright
 12+  A940 CD 3F 83         call string_print
 13+  A943
 14+  A943 21 33 83         ld hl,string_gameover_credits
 15+  A946 CD 3F 83         call string_print
 16+  A949
 17+  A949 21 1F 83         ld hl,string_gameoverscreen_bestscores
 18+  A94C CD 3F 83         call string_print
 19+  A94F
 20+  A94F 06 20            ld b,32
 21+  A951 3E 45            ld a,69
 22+  A953 11 C0 5A         ld de,22528+704                         ; attrs here
 23+  A956 CD 3E A6         call screen_setcolours
 24+  A959
 25+  A959 06 0B            ld b,11
 26+  A95B 3E 42            ld a,66
 27+  A95D 11 2B 58         ld de,22528+43                         ; attrs here
 28+  A960 CD 3E A6         call screen_setcolours
 29+  A963
 30+  A963 CD 47 80         call utilities_waitforkey   ; wait for keypress
 31+  A966
 32+  A966 C9               ret
 33+  A967
 34+  A967              ;
 35+  A967              ; Initialises the screen
 36+  A967              ;
 37+  A967              gameover_init:
 38+  A967              ; We want a black screen.
 39+  A967 3E 47            ld a,71             ; white ink (7) on black paper (0),
 40+  A969                                      ; bright (64).
 41+  A969 CD 67 80         call utilities_clearscreen
 42+  A96C 32 8D 5C         ld (23693),a        ; set our screen colours.
 43+  A96F 3E 00            ld a,0              ; 2 is the code for red.
 44+  A971 D3 FE            out (254),a         ; write to port 254.
 45+  A973 C9               ret
# file closed: screen/gameover.asm
 29   A974
 30   A974                  include "leveldata\level01.asm"
# file opened: leveldata/level01.asm
  1+  A974              ; ###############################################################
  2+  A974              ; Data for level 1
  3+  A974              ; ###############################################################
  4+  A974              level01:
  5+  A974
  6+  A974                  ;defb 09,04,04,04,04,04,04,04,04,04,04,04,04,04,04,09,09,04,04,04,04,04,04,04,04,04,04,04,04,04,04,09
  7+  A974
  8+  A974 00 00 05 05      defb 00,00,05,05,05,05,05,05,05,05,05,05,05,05,02,01,01,01,03,05,05,05,05,05,05,05,05,05,05,05,00,00
  8+  A978 05 05 05 05
  8+  A97C 05 05 05 05
  8+  A980 05 05 02 01
  8+  A984 01 01 03 05
  8+  A988 05 05 05 05
  8+  A98C 05 05 05 05
  8+  A990 05 05 00 00
  9+  A994 00 00 05 05      defb 00,00,05,05,05,05,05,05,05,05,05,05,02,01,01,01,01,01,01,01,03,05,05,05,05,05,05,05,05,05,00,00
  9+  A998 05 05 05 05
  9+  A99C 05 05 05 05
  9+  A9A0 02 01 01 01
  9+  A9A4 01 01 01 01
  9+  A9A8 03 05 05 05
  9+  A9AC 05 05 05 05
  9+  A9B0 05 05 00 00
 10+  A9B4 00 00 05 05      defb 00,00,05,05,05,05,05,05,05,05,02,01,01,01,01,01,01,01,01,01,01,01,03,05,13,13,13,13,13,13,00,00
 10+  A9B8 05 05 05 05
 10+  A9BC 05 05 02 01
 10+  A9C0 01 01 01 01
 10+  A9C4 01 01 01 01
 10+  A9C8 01 01 03 05
 10+  A9CC 0D 0D 0D 0D
 10+  A9D0 0D 0D 00 00
 11+  A9D4 00 00 01 01      defb 00,00,01,01,01,01,00,01,01,01,01,01,01,01,01,01,01,01,01,01,01,01,01,03,05,05,05,05,05,05,00,00
 11+  A9D8 01 01 00 01
 11+  A9DC 01 01 01 01
 11+  A9E0 01 01 01 01
 11+  A9E4 01 01 01 01
 11+  A9E8 01 01 01 03
 11+  A9EC 05 05 05 05
 11+  A9F0 05 05 00 00
 12+  A9F4 00 00 01 01      defb 00,00,01,01,04,04,04,04,04,04,01,01,01,01,01,01,01,01,01,01,01,01,01,01,01,01,01,01,00,01,00,00
 12+  A9F8 04 04 04 04
 12+  A9FC 04 04 01 01
 12+  AA00 01 01 01 01
 12+  AA04 01 01 01 01
 12+  AA08 01 01 01 01
 12+  AA0C 01 01 01 01
 12+  AA10 00 01 00 00
 13+  AA14 00 00 01 04      defb 00,00,01,04,04,04,04,04,04,04,04,04,01,01,01,01,01,01,01,01,01,01,01,01,00,00,00,00,00,01,00,00
 13+  AA18 04 04 04 04
 13+  AA1C 04 04 04 04
 13+  AA20 01 01 01 01
 13+  AA24 01 01 01 01
 13+  AA28 01 01 01 01
 13+  AA2C 00 00 00 00
 13+  AA30 00 01 00 00
 14+  AA34 00 00 01 04      defb 00,00,01,04,04,01,01,01,01,01,04,04,04,04,01,01,01,01,01,01,01,00,00,00,00,01,01,01,01,01,00,00
 14+  AA38 04 01 01 01
 14+  AA3C 01 01 04 04
 14+  AA40 04 04 01 01
 14+  AA44 01 01 01 01
 14+  AA48 01 00 00 00
 14+  AA4C 00 01 01 01
 14+  AA50 01 01 00 00
 15+  AA54 00 00 01 04      defb 00,00,01,04,04,04,04,04,04,01,04,04,04,04,04,04,04,04,00,00,00,00,04,04,04,04,04,04,04,01,00,00
 15+  AA58 04 04 04 04
 15+  AA5C 04 01 04 04
 15+  AA60 04 04 04 04
 15+  AA64 04 04 00 00
 15+  AA68 00 00 04 04
 15+  AA6C 04 04 04 04
 15+  AA70 04 01 00 00
 16+  AA74 00 00 01 01      defb 00,00,01,01,01,04,01,01,01,01,04,04,04,04,04,04,04,04,00,04,04,04,04,04,04,04,04,04,04,01,00,00
 16+  AA78 01 04 01 01
 16+  AA7C 01 01 04 04
 16+  AA80 04 04 04 04
 16+  AA84 04 04 00 04
 16+  AA88 04 04 04 04
 16+  AA8C 04 04 04 04
 16+  AA90 04 01 00 00
 17+  AA94 00 00 01 00      defb 00,00,01,00,00,00,00,00,00,04,04,04,04,04,04,04,04,04,00,04,04,04,04,04,04,04,04,04,04,01,00,00
 17+  AA98 00 00 00 00
 17+  AA9C 00 04 04 04
 17+  AAA0 04 04 04 04
 17+  AAA4 04 04 00 04
 17+  AAA8 04 04 04 04
 17+  AAAC 04 04 04 04
 17+  AAB0 04 01 00 00
 18+  AAB4 00 00 01 07      defb 00,00,01,07,07,07,07,07,07,01,04,04,04,04,04,04,04,04,00,04,04,04,04,04,04,04,04,04,04,01,00,00
 18+  AAB8 07 07 07 07
 18+  AABC 07 01 04 04
 18+  AAC0 04 04 04 04
 18+  AAC4 04 04 00 04
 18+  AAC8 04 04 04 04
 18+  AACC 04 04 04 04
 18+  AAD0 04 01 00 00
 19+  AAD4 00 00 01 00      defb 00,00,01,00,00,00,00,00,00,01,04,04,04,04,04,04,04,04,00,04,04,04,04,04,04,00,00,00,00,01,00,00
 19+  AAD8 00 00 00 00
 19+  AADC 00 01 04 04
 19+  AAE0 04 04 04 04
 19+  AAE4 04 04 00 04
 19+  AAE8 04 04 04 04
 19+  AAEC 04 00 00 00
 19+  AAF0 00 01 00 00
 20+  AAF4 00 00 01 00      defb 00,00,01,00,00,00,00,00,00,01,04,04,04,04,04,04,04,04,00,04,04,04,04,04,04,00,04,04,00,01,00,00
 20+  AAF8 00 00 00 00
 20+  AAFC 00 01 04 04
 20+  AB00 04 04 04 04
 20+  AB04 04 04 00 04
 20+  AB08 04 04 04 04
 20+  AB0C 04 00 04 04
 20+  AB10 00 01 00 00
 21+  AB14 00 00 01 06      defb 00,00,01,06,06,06,06,06,06,01,04,04,04,04,04,04,04,04,00,04,04,04,04,04,04,00,04,04,00,01,00,00
 21+  AB18 06 06 06 06
 21+  AB1C 06 01 04 04
 21+  AB20 04 04 04 04
 21+  AB24 04 04 00 04
 21+  AB28 04 04 04 04
 21+  AB2C 04 00 04 04
 21+  AB30 00 01 00 00
 22+  AB34 00 00 01 06      defb 00,00,01,06,06,06,06,06,06,01,04,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,04,04,00,01,00,00
 22+  AB38 06 06 06 06
 22+  AB3C 06 01 04 00
 22+  AB40 00 00 00 00
 22+  AB44 00 00 00 00
 22+  AB48 00 00 00 00
 22+  AB4C 00 00 04 04
 22+  AB50 00 01 00 00
 23+  AB54 00 00 01 06      defb 00,00,01,06,06,06,06,06,06,01,04,00,04,04,04,04,04,04,00,04,04,04,00,04,04,04,04,04,00,01,00,00
 23+  AB58 06 06 06 06
 23+  AB5C 06 01 04 00
 23+  AB60 04 04 04 04
 23+  AB64 04 04 00 04
 23+  AB68 04 04 00 04
 23+  AB6C 04 04 04 04
 23+  AB70 00 01 00 00
 24+  AB74 00 00 01 06      defb 00,00,01,06,06,06,06,06,06,01,04,00,04,04,04,04,04,04,00,04,04,04,00,04,04,04,04,04,00,01,00,00
 24+  AB78 06 06 06 06
 24+  AB7C 06 01 04 00
 24+  AB80 04 04 04 04
 24+  AB84 04 04 00 04
 24+  AB88 04 04 00 04
 24+  AB8C 04 04 04 04
 24+  AB90 00 01 00 00
 25+  AB94 00 00 01 01      defb 00,00,01,01,01,01,01,01,01,01,04,00,04,04,04,04,04,04,00,04,04,04,00,04,04,04,04,04,00,01,00,00
 25+  AB98 01 01 01 01
 25+  AB9C 01 01 04 00
 25+  ABA0 04 04 04 04
 25+  ABA4 04 04 00 04
 25+  ABA8 04 04 00 04
 25+  ABAC 04 04 04 04
 25+  ABB0 00 01 00 00
 26+  ABB4 00 00 01 04      defb 00,00,01,04,04,04,04,04,04,04,04,00,04,04,04,04,04,04,00,04,04,04,00,00,00,00,04,04,04,01,00,00
 26+  ABB8 04 04 04 04
 26+  ABBC 04 04 04 00
 26+  ABC0 04 04 04 04
 26+  ABC4 04 04 00 04
 26+  ABC8 04 04 00 00
 26+  ABCC 00 00 04 04
 26+  ABD0 04 01 00 00
 27+  ABD4 00 00 01 04      defb 00,00,01,04,04,04,00,00,00,00,00,00,04,04,04,04,04,04,00,04,04,04,04,04,04,00,04,04,04,01,00,00
 27+  ABD8 04 04 00 00
 27+  ABDC 00 00 00 00
 27+  ABE0 04 04 04 04
 27+  ABE4 04 04 00 04
 27+  ABE8 04 04 04 04
 27+  ABEC 04 00 04 04
 27+  ABF0 04 01 00 00
 28+  ABF4 00 00 01 04      defb 00,00,01,04,04,04,00,04,04,04,04,04,04,04,04,04,04,04,00,04,04,04,04,04,04,00,04,04,04,01,00,00
 28+  ABF8 04 04 00 04
 28+  ABFC 04 04 04 04
 28+  AC00 04 04 04 04
 28+  AC04 04 04 00 04
 28+  AC08 04 04 04 04
 28+  AC0C 04 00 04 04
 28+  AC10 04 01 00 00
 29+  AC14 00 00 01 04      defb 00,00,01,04,04,04,00,04,04,04,01,01,01,01,01,01,01,01,01,01,01,01,01,01,04,00,04,04,04,01,00,00
 29+  AC18 04 04 00 04
 29+  AC1C 04 04 01 01
 29+  AC20 01 01 01 01
 29+  AC24 01 01 01 01
 29+  AC28 01 01 01 01
 29+  AC2C 04 00 04 04
 29+  AC30 04 01 00 00
 30+  AC34 00 00 01 04      defb 00,00,01,04,04,04,00,04,04,04,01,00,00,00,00,00,00,00,00,00,00,00,00,01,04,00,04,04,04,01,00,00
 30+  AC38 04 04 00 04
 30+  AC3C 04 04 01 00
 30+  AC40 00 00 00 00
 30+  AC44 00 00 00 00
 30+  AC48 00 00 00 01
 30+  AC4C 04 00 04 04
 30+  AC50 04 01 00 00
 31+  AC54 00 00 01 04      defb 00,00,01,04,04,04,00,04,04,04,01,00,00,00,00,00,00,00,00,00,00,00,00,01,04,00,04,04,04,01,00,00
 31+  AC58 04 04 00 04
 31+  AC5C 04 04 01 00
 31+  AC60 00 00 00 00
 31+  AC64 00 00 00 00
 31+  AC68 00 00 00 01
 31+  AC6C 04 00 04 04
 31+  AC70 04 01 00 00
 32+  AC74 00 00 01 04      defb 00,00,01,04,04,04,00,04,04,04,01,00,00,00,00,00,00,00,00,00,00,00,00,01,04,00,04,04,04,01,00,00
 32+  AC78 04 04 00 04
 32+  AC7C 04 04 01 00
 32+  AC80 00 00 00 00
 32+  AC84 00 00 00 00
 32+  AC88 00 00 00 01
 32+  AC8C 04 00 04 04
 32+  AC90 04 01 00 00
 33+  AC94 00 00 01 04      defb 00,00,01,04,04,04,00,04,04,04,04,00,00,00,00,00,00,00,00,00,00,00,00,04,04,04,04,04,04,01,00,00
 33+  AC98 04 04 00 04
 33+  AC9C 04 04 04 00
 33+  ACA0 00 00 00 00
 33+  ACA4 00 00 00 00
 33+  ACA8 00 00 00 04
 33+  ACAC 04 04 04 04
 33+  ACB0 04 01 00 00
 34+  ACB4 00 00 01 04      defb 00,00,01,04,04,04,04,04,04,04,01,00,00,00,00,00,00,00,00,00,00,00,00,01,04,04,04,04,04,01,00,00
 34+  ACB8 04 04 04 04
 34+  ACBC 04 04 01 00
 34+  ACC0 00 00 00 00
 34+  ACC4 00 00 00 00
 34+  ACC8 00 00 00 01
 34+  ACCC 04 04 04 04
 34+  ACD0 04 01 00 00
 35+  ACD4 00 00 01 04      defb 00,00,01,04,04,04,04,04,04,04,01,00,00,00,01,00,00,00,00,01,00,00,00,01,04,04,04,04,04,01,00,00
 35+  ACD8 04 04 04 04
 35+  ACDC 04 04 01 00
 35+  ACE0 00 00 01 00
 35+  ACE4 00 00 00 01
 35+  ACE8 00 00 00 01
 35+  ACEC 04 04 04 04
 35+  ACF0 04 01 00 00
 36+  ACF4 00 00 01 01      defb 00,00,01,01,01,01,01,01,01,01,01,01,01,01,01,01,01,01,01,01,01,01,01,01,01,01,01,01,01,01,00,00
 36+  ACF8 01 01 01 01
 36+  ACFC 01 01 01 01
 36+  AD00 01 01 01 01
 36+  AD04 01 01 01 01
 36+  AD08 01 01 01 01
 36+  AD0C 01 01 01 01
 36+  AD10 01 01 00 00
 37+  AD14
 38+  AD14              ; ###############################################################
 39+  AD14              ; Object data: horiz, vert, state, memh, meml
 40+  AD14              ; ###############################################################
 41+  AD14              level01rocks:
 42+  AD14 09 04 00 00      defb 9,4,0,0,0
 42+  AD18 00
 43+  AD19 0C 07 00 00      defb 12,7,0,0,0
 43+  AD1D 00
 44+  AD1E 10 07 00 00      defb 16,7,0,0,0
 44+  AD22 00
 45+  AD23 0B 08 00 00      defb 11,8,0,0,0
 45+  AD27 00
 46+  AD28 0A 0A 00 00      defb 10,10,0,0,0
 46+  AD2C 00
 47+  AD2D 0C 0A 00 00      defb 12,10,0,0,0
 47+  AD31 00
 48+  AD32 0D 09 00 00      defb 13,9,0,0,0
 48+  AD36 00
 49+  AD37 0E 08 00 00      defb 14,8,0,0,0
 49+  AD3B 00
 50+  AD3C 0F 0B 00 00      defb 15,11,0,0,0
 50+  AD40 00
 51+  AD41 0B 0C 00 00      defb 11,12,0,0,0
 51+  AD45 00
 52+  AD46 11 0C 00 00      defb 17,12,0,0,0
 52+  AD4A 00
 53+  AD4B 13 08 00 00      defb 19,8,0,0,0
 53+  AD4F 00
 54+  AD50 16 09 00 00      defb 22,9,0,0,0
 54+  AD54 00
 55+  AD55 13 0A 00 00      defb 19,10,0,0,0
 55+  AD59 00
 56+  AD5A 15 0A 00 00      defb 21,10,0,0,0
 56+  AD5E 00
 57+  AD5F 15 0C 00 00      defb 21,12,0,0,0
 57+  AD63 00
 58+  AD64 16 0C 00 00      defb 22,12,0,0,0
 58+  AD68 00
 59+  AD69 18 0A 00 00      defb 24,10,0,0,0
 59+  AD6D 00
 60+  AD6E 19 09 00 00      defb 25,9,0,0,0
 60+  AD72 00
 61+  AD73 1C 09 00 00      defb 28,9,0,0,0
 61+  AD77 00
 62+  AD78 1B 0C 00 00      defb 27,12,0,0,0
 62+  AD7C 00
 63+  AD7D 1A 0D 00 00      defb 26,13,0,0,0
 63+  AD81 00
 64+  AD82 19 0E 00 00      defb 25,14,0,0,0
 64+  AD86 00
 65+  AD87 19 10 00 00      defb 25,16,0,0,0
 65+  AD8B 00
 66+  AD8C 1A 11 00 00      defb 26,17,0,0,0
 66+  AD90 00
 67+  AD91 1B 11 00 00      defb 27,17,0,0,0
 67+  AD95 00
 68+  AD96 1C 12 00 00      defb 28,18,0,0,0
 68+  AD9A 00
 69+  AD9B 1A 13 00 00      defb 26,19,0,0,0
 69+  AD9F 00
 70+  ADA0 1B 15 00 00      defb 27,21,0,0,0
 70+  ADA4 00
 71+  ADA5 1A 17 00 00      defb 26,23,0,0,0
 71+  ADA9 00
 72+  ADAA 1B 18 00 00      defb 27,24,0,0,0
 72+  ADAE 00
 73+  ADAF 19 18 00 00      defb 25,24,0,0,0
 73+  ADB3 00
 74+  ADB4 18 17 00 00      defb 24,23,0,0,0
 74+  ADB8 00
 75+  ADB9 13 14 00 00      defb 19,20,0,0,0
 75+  ADBD 00
 76+  ADBE 14 12 00 00      defb 20,18,0,0,0
 76+  ADC2 00
 77+  ADC3 14 10 00 00      defb 20,16,0,0,0
 77+  ADC7 00
 78+  ADC8 15 10 00 00      defb 21,16,0,0,0
 78+  ADCC 00
 79+  ADCD 16 12 00 00      defb 22,18,0,0,0
 79+  ADD1 00
 80+  ADD2 11 14 00 00      defb 17,20,0,0,0
 80+  ADD6 00
 81+  ADD7 0D 11 00 00      defb 13,17,0,0,0
 81+  ADDB 00
 82+  ADDC 0C 13 00 00      defb 12,19,0,0,0
 82+  ADE0 00
 83+  ADE1 0B 13 00 00      defb 11,19,0,0,0
 83+  ADE5 00
 84+  ADE6 0A 11 00 00      defb 10,17,0,0,0
 84+  ADEA 00
 85+  ADEB 05 12 00 00      defb 5,18,0,0,0
 85+  ADEF 00
 86+  ADF0 07 16 00 00      defb 7,22,0,0,0
 86+  ADF4 00
 87+  ADF5 09 17 00 00      defb 9,23,0,0,0
 87+  ADF9 00
 88+  ADFA 07 18 00 00      defb 7,24,0,0,0
 88+  ADFE 00
 89+  ADFF 05 18 00 00      defb 5,24,0,0,0
 89+  AE03 00
 90+  AE04 06 19 00 00      defb 6,25,0,0,0
 90+  AE08 00
 91+  AE09 08 19 00 00      defb 8,25,0,0,0
 91+  AE0D 00
 92+  AE0E 04 17 00 00      defb 4,23,0,0,0
 92+  AE12 00
 93+  AE13 FF               defb 255
 94+  AE14
 95+  AE14              level01missiles:
 96+  AE14 0B 17 00 00      defb 11,23,0,0,0
 96+  AE18 00
 97+  AE19 0B 16 00 00      defb 11,22,0,0,0
 97+  AE1D 00
 98+  AE1E 0C 17 00 00      defb 12,23,0,0,0
 98+  AE22 00
 99+  AE23 0C 16 00 00      defb 12,22,0,0,0
 99+  AE27 00
100+  AE28 0D 17 00 00      defb 13,23,0,0,0
100+  AE2C 00
101+  AE2D 0D 16 00 00      defb 13,22,0,0,0
101+  AE31 00
102+  AE32 0E 17 00 00      defb 14,23,0,0,0
102+  AE36 00
103+  AE37 0E 16 00 00      defb 14,22,0,0,0
103+  AE3B 00
104+  AE3C 0F 17 00 00      defb 15,23,0,0,0
104+  AE40 00
105+  AE41 0F 16 00 00      defb 15,22,0,0,0
105+  AE45 00
106+  AE46 10 17 00 00      defb 16,23,0,0,0
106+  AE4A 00
107+  AE4B 10 16 00 00      defb 16,22,0,0,0
107+  AE4F 00
108+  AE50 11 17 00 00      defb 17,23,0,0,0
108+  AE54 00
109+  AE55 11 16 00 00      defb 17,22,0,0,0
109+  AE59 00
110+  AE5A 12 17 00 00      defb 18,23,0,0,0
110+  AE5E 00
111+  AE5F 12 16 00 00      defb 18,22,0,0,0
111+  AE63 00
112+  AE64 13 17 00 00      defb 19,23,0,0,0
112+  AE68 00
113+  AE69 13 16 00 00      defb 19,22,0,0,0
113+  AE6D 00
114+  AE6E 14 17 00 00      defb 20,23,0,0,0
114+  AE72 00
115+  AE73 14 16 00 00      defb 20,22,0,0,0
115+  AE77 00
116+  AE78 15 17 00 00      defb 21,23,0,0,0
116+  AE7C 00
117+  AE7D 15 16 00 00      defb 21,22,0,0,0
117+  AE81 00
118+  AE82 16 17 00 00      defb 22,23,0,0,0
118+  AE86 00
119+  AE87 16 16 00 00      defb 22,22,0,0,0
119+  AE8B 00
120+  AE8C FF               defb 255
121+  AE8D
122+  AE8D              level01diamonds:
123+  AE8D 0C 1B 00 00      defb 12,27,0,0,0
123+  AE91 00
124+  AE92 10 1B 00 00      defb 16,27,0,0,0
124+  AE96 00
125+  AE97 15 1B 00 00      defb 21,27,0,0,0
125+  AE9B 00
126+  AE9C FF               defb 255
127+  AE9D
128+  AE9D              level01gems:
129+  AE9D 12 14 00 00      defb 18,20,0,0,0
129+  AEA1 00
130+  AEA2 06 18 00 00      defb 6,24,0,0,0
130+  AEA6 00
131+  AEA7 19 17 00 00      defb 25,23,0,0,0
131+  AEAB 00
132+  AEAC 1C 11 00 00      defb 28,17,0,0,0
132+  AEB0 00
133+  AEB1 FF               defb 255
134+  AEB2              ;
135+  AEB2              ; Score area colours
136+  AEB2              ;
137+  AEB2              score_colours:
138+  AEB2 47 47 47 47      defb 71,71,71,71,71,71,71,71,71,71,71,66,67,67,67,67,67,67,67,67,66,71,71,71,71,71,71,71,71,71,71,71
138+  AEB6 47 47 47 47
138+  AEBA 47 47 47 42
138+  AEBE 43 43 43 43
138+  AEC2 43 43 43 43
138+  AEC6 42 47 47 47
138+  AECA 47 47 47 47
138+  AECE 47 47 47 47
139+  AED2 47 47 47 47      defb 71,71,71,71,71,71,71,71,71,71,71,70,70,70,70,70,70,70,70,70,70,71,71,71,71,71,71,71,71,71,71,71
139+  AED6 47 47 47 47
139+  AEDA 47 47 47 46
139+  AEDE 46 46 46 46
139+  AEE2 46 46 46 46
139+  AEE6 46 47 47 47
139+  AEEA 47 47 47 47
139+  AEEE 47 47 47 47
140+  AEF2
141+  AEF2              high_score_colours:
142+  AEF2 00 00 00 42      defb  0, 0, 0,66,66,66,71,71,71,71,71,71,67,67,67,71,71,71,71,71,71,70,70,70,71,71,71,71,71,71,0,0
142+  AEF6 42 42 47 47
142+  AEFA 47 47 47 47
142+  AEFE 43 43 43 47
142+  AF02 47 47 47 47
142+  AF06 47 46 46 46
142+  AF0A 47 47 47 47
142+  AF0E 47 47 00 00
# file closed: leveldata/level01.asm
 31   AF12                  include "graphics\graphics.asm"
# file opened: graphics/graphics.asm
  1+  AF12              ; Tiles graphics.
  2+  AF12              sprites:
  3+  AF12 00 00 00 00      defb    0  ,  0,  0,  0,  0,  0,  0,  0   ; 0, space
  3+  AF16 00 00 00 00
  4+  AF1A FF FF FF FF      defb    255,255,255,255,255,255,255,255   ; 1, cyan block
  4+  AF1E FF FF FF FF
  5+  AF22 01 03 07 0F      defb	  1,  3,  7, 15, 31, 63,127,255   ; 2, slope left
  5+  AF26 1F 3F 7F FF
  6+  AF2A 80 C0 E0 F0      defb    128,192,224,240,248,252,254,255   ; 3, slope right
  6+  AF2E F8 FC FE FF
  7+  AF32 55 AA 55 AA      defb    85,170, 85,170, 85,170, 85,170    ; 4, dirt
  7+  AF36 55 AA 55 AA
  8+  AF3A 00 00 00 00      defb    0  ,  0,  0,  0,  0,  0,  0,  0   ; 5, sky block
  8+  AF3E 00 00 00 00
  9+  AF42 FF FF FF FF      defb    255,255,255,255,255,255,255,255   ; 6, slime block
  9+  AF46 FF FF FF FF
 10+  AF4A FF FF 00 00      defb    255,255,  0,  0,  0,  0,  0,  0   ; 7, trapdoor
 10+  AF4E 00 00 00 00
 11+  AF52 18 2C 4E 8F      defb    24, 44, 78,143,241,114, 52,  24    ; 8, diamond
 11+  AF56 F1 72 34 18
 12+  AF5A 3C 7E FF 7F      defb    60,126,255,127,254,254,255,126    ; 9, rock
 12+  AF5E FE FE FF 7E
 13+  AF62 7E FF 7F 7F  	defb	126,255,127,127,254,255,126, 60    ; 10, rock 2
 13+  AF66 FE FF 7E 3C
 14+  AF6A 00 00 00 00      defb    0  ,  0,  0,  0,  0,  0,255,255   ; 11, sky block, pixel trapdoor
 14+  AF6E 00 00 FF FF
 15+  AF72 99 DB 7E 24  	defb    153,219,126, 36,255,126, 60, 24   ; 12, missile
 15+  AF76 FF 7E 3C 18
 16+  AF7A 00 00 00 00      defb    0  ,  0,  0,  0,  0,  0,  0,  0   ; 13, sky block, tank background
 16+  AF7E 00 00 00 00
 17+  AF82 00 00 00 00  	defb    0,  0,  0,  0,  0, 60, 90, 52     ; 14, gem
 17+  AF86 00 3C 5A 34
 18+  AF8A
 19+  AF8A              sprite_attrs:
 20+  AF8A 46               defb    070 ; 0, space
 21+  AF8B 65               defb    101 ; 1, cyan block
 22+  AF8C 4D               defb    077 ; 2, slope left
 23+  AF8D 4D               defb    077 ; 3, slope right
 24+  AF8E 46               defb    070 ; 4, dirt
 25+  AF8F 4E               defb    078 ; 5, sky
 26+  AF90 4C               defb    076 ; 6, slime
 27+  AF91 42               defb    066 ; 7, trapdoor
 28+  AF92 46               defb    070 ; 8, diamond
 29+  AF93 42               defb    066 ; 9, rock
 30+  AF94 42               defb    066 ; 10, rock 2
 31+  AF95 49           	defb    073 ; 11, sky, trapdoor
 32+  AF96 43           	defb    067 ; 12, missile
 33+  AF97 4A               defb    074 ; 13, sky, red ink (tank)
 34+  AF98 46               defb    070 ; 14, gem
 35+  AF99
 36+  AF99              player_sprite:
 37+  AF99 10 39 92 FC  	defb	 16, 57,146,252, 56, 61,195,128 ; 0 up/down 1
 37+  AF9D 38 3D C3 80
 38+  AFA1 08 1C 08 FC  	defb	  8, 28,  8,252, 60, 28, 22, 50 ; 1 left 1
 38+  AFA5 3C 1C 16 32
 39+  AFA9 10 38 10 3F      defb   	 16, 56, 16, 63, 60, 56,104, 76 ; 2 right 1
 39+  AFAD 3C 38 68 4C
 40+  AFB1 08 9C 49 3F  	defb	  8,156, 73, 63, 28,188,195,  1 ; 3 up/down 2
 40+  AFB5 1C BC C3 01
 41+  AFB9 08 1C 08 FC  	defb	  8, 28,  8,252, 60, 60,100, 12; 4 left 2
 41+  AFBD 3C 3C 64 0C
 42+  AFC1 10 38 10 3F  	defb	 16, 56, 16, 63, 60, 60, 38, 48 ; 5 right 2
 42+  AFC5 3C 3C 26 30
 43+  AFC9 54 28 10 12  	defb	 84, 40, 16, 18, 30, 92,253, 95 ; 6 shoot up
 43+  AFCD 1E 5C FD 5F
 44+  AFD1 02 87 42 BF  	defb	 2,135, 66,191, 79,143, 25,  3  ; 7 shoot left
 44+  AFD5 4F 8F 19 03
 45+  AFD9 40 E1 42 FD  	defb	 64,225, 66,253,242,241,152,192 ; 8 shoot right
 45+  AFDD F2 F1 98 C0
 46+  AFE1 FA BF 3A 78  	defb	 250,191, 58,120, 72,  8, 20, 42 ; 9 shoot down
 46+  AFE5 48 08 14 2A
 47+  AFE9 92 BA 94 78  	defb 	 146,186,148,120, 56,120, 68,195 ; 10 crushed 1
 47+  AFED 38 78 44 C3
 48+  AFF1 49 5D 29 1E  	defb	  73, 93, 41, 30, 28, 30, 34,195 ; 11 crushed 2
 48+  AFF5 1C 1E 22 C3
 49+  AFF9
 50+  AFF9              ;
 51+  AFF9              ; First 4 top half, next 4 bottom 1, next 4 bottom 2
 52+  AFF9              ;
 53+  AFF9              ship_sprite:
 54+  AFF9 00 00 00 01  	defb	  0,  0,  0,  1,  3, 31,127,255
 54+  AFFD 03 1F 7F FF
 55+  B001 1F 01 7F FF  	defb	 31,  1,127,255,255,255,255,255
 55+  B005 FF FF FF FF
 56+  B009 F8 80 FE FF  	defb	248,128,254,255,255,255,255,255
 56+  B00D FF FF FF FF
 57+  B011 00 00 00 80  	defb	  0,  0,  0,128,192,248,254,255
 57+  B015 C0 F8 FE FF
 58+  B019 B3 B3 7F 1F  	defb	179,179,127, 31,  3,  3,  2,  7
 58+  B01D 03 03 02 07
 59+  B021 8F 8F FF FF  	defb	143,143,255,255,255, 15,  7,131
 59+  B025 FF 0F 07 83
 60+  B029 0F 0F FF FF  	defb	 15, 15,255,255,255, 16, 32,193
 60+  B02D FF 10 20 C1
 61+  B031 19 19 FE F8  	defb	 25, 25,254,248,192,192, 64,224
 61+  B035 C0 C0 40 E0
 62+  B039 98 98 7F 1F  	defb	152,152,127, 31,  3,  3,  2,  7
 62+  B03D 03 03 02 07
 63+  B041 F0 F0 FF FF  	defb	240,240,255,255,255,  8,  4,131
 63+  B045 FF 08 04 83
 64+  B049 F1 F1 FF FF  	defb	241,241,255,255,255,240,224,193
 64+  B04D FF F0 E0 C1
 65+  B051 CD CD FE F8  	defb	205,205,254,248,192,192, 64,224
 65+  B055 C0 C0 40 E0
 66+  B059
 67+  B059              ;
 68+  B059              ;  First 8 frames are tank, last frame is the gun barrel
 69+  B059              ;
 70+  B059              tank_sprite:
 71+  B059 00 00 00 7F  	defb	  0,  0,  0,127,127,  0,  0,  0
 71+  B05D 7F 00 00 00
 72+  B061 01 03 FE FC  	defb	  1,  3,254,252,254,255,127, 64
 72+  B065 FE FF 7F 40
 73+  B069 FF FF 03 F9  	defb	255,255,  3,249,  3,255,255,  1
 73+  B06D 03 FF FF 01
 74+  B071 00 00 C0 E0  	defb	  0,  0,192,224,224,192,  0,  0
 74+  B075 E0 C0 00 00
 75+  B079 3F 7F E1 FB  	defb	 63,127,225,251,247,225,127, 63
 75+  B07D F7 E1 7F 3F
 76+  B081 FF FF 16 52  	defb	255,255, 22, 82, 84, 22,255,255
 76+  B085 54 16 FF FF
 77+  B089 FF FF A8 A9  	defb	255,255,168,169,155,168,255,255
 77+  B08D 9B A8 FF FF
 78+  B091 FC FE 8F AF  	defb	252,254,143,175,159,175,254,252
 78+  B095 9F AF FE FC
 79+  B099 00 00 00 1F  	defb	  0,  0,  0, 31, 31,  0,  0,  0
 79+  B09D 1F 00 00 00
# file closed: graphics/graphics.asm
 32   B0A1
 33   B0A1                  include "game\control.asm"
# file opened: game/control.asm
  1+  B0A1              ;
  2+  B0A1              ; Check the keyboard then move
  3+  B0A1              ;
  4+  B0A1              control_keyboard:
  5+  B0A1 3A B0 B4         ld a,(player+11)    ; first, check if player is dying
  6+  B0A4 FE 00            cp 0
  7+  B0A6 C0               ret nz               ; if so, can't move
  8+  B0A7 3A AA B4         ld a,(player+5)      ; next, check if the player has pixels left to move
  9+  B0AA FE 00            cp 0
 10+  B0AC CA B3 B0         jp z, control_keyboard5
 11+  B0AF CD B8 B1         call control_automove
 12+  B0B2 C9               ret
 13+  B0B3              control_keyboard5:
 14+  B0B3 3A AB B4         ld a,(player+6)      ; next, check if the player is digging
 15+  B0B6 FE 00            cp 0
 16+  B0B8 CA BF B0         jp z, control_keyboard0
 17+  B0BB CD F6 B0         call control_dig
 18+  B0BE C9               ret
 19+  B0BF              control_keyboard0:
 20+  B0BF 01 FE FB         ld bc,64510         ; port for keyboard row q-t.
 21+  B0C2 ED 78            in a,(c)            ; read keyboard.
 22+  B0C4 47               ld b,a              ; store result in b register.
 23+  B0C5 CB 18            rr b                ; check outermost key (q).
 24+  B0C7 D2 E6 B0         jp nc,control_keyboard1
 25+  B0CA 01 FE FD         ld bc,65022         ; port for keyboard row a-f.
 26+  B0CD ED 78            in a,(c)            ; read keyboard.
 27+  B0CF 47               ld b,a              ; store result in b register.
 28+  B0D0 CB 18            rr b                ; check outermost key (a).
 29+  B0D2 D2 EA B0         jp nc,control_keyboard2
 30+  B0D5 01 FE DF         ld bc,57342         ; port for keyboard row y-p.
 31+  B0D8 ED 78            in a,(c)            ; read keyboard.
 32+  B0DA 47               ld b,a              ; store result in b register.
 33+  B0DB CB 18            rr b                ; check outermost key (p).
 34+  B0DD D2 EE B0         jp nc,control_keyboard3
 35+  B0E0 CB 18            rr b                ; check next key.
 36+  B0E2 D2 F2 B0         jp nc,control_keyboard4
 37+  B0E5 C9               ret
 38+  B0E6              control_keyboard1:
 39+  B0E6 CD 01 B2         call control_pl_moveup         ; player up.
 40+  B0E9 C9               ret
 41+  B0EA              control_keyboard2:
 42+  B0EA CD 30 B2         call control_pl_movedown       ; player down.
 43+  B0ED C9               ret
 44+  B0EE              control_keyboard3:
 45+  B0EE CD 8D B2         call control_pl_moveright       ; player left.
 46+  B0F1 C9               ret
 47+  B0F2              control_keyboard4:
 48+  B0F2 CD 5D B2         call control_pl_moveleft       ; player right.
 49+  B0F5 C9               ret
 50+  B0F6
 51+  B0F6              ;
 52+  B0F6              ; Performs a dig if the counter has reset, otherwise, messes with the graphics
 53+  B0F6              ;
 54+  B0F6              control_dig:
 55+  B0F6 ED 4B A5 B4      ld bc,(player)      ; load the current coords into bc
 56+  B0FA C5               push bc
 57+  B0FB 3A A7 B4         ld a,(player+2)     ; get the direction
 58+  B0FE FE 01            cp 1                ; left
 59+  B100 CA 18 B1         jp z,control_dig0
 60+  B103 FE 02            cp 2                ; right
 61+  B105 CA 2D B1         jp z,control_dig1
 62+  B108 FE 03            cp 3                ; down
 63+  B10A CA 51 B1         jp z,control_dig5
 64+  B10D FE 00            cp 0                ; up
 65+  B10F CA 41 B1         jp z,control_dig4
 66+  B112 21 AB B4         ld hl,player+6
 67+  B115 36 00            ld (hl),0           ; turn off digging
 68+  B117 C9               ret                 ; return
 69+  B118              control_dig0:           ; going left
 70+  B118 CD 54 A7         call sprites_scadd  ; get the current coord
 71+  B11B 62 6B            ld hl,de
 72+  B11D 2B               dec hl              ; move one left
 73+  B11E C1               pop bc              ; get the coords back, subtract 8 from horiz, 8 from vert, store (will be coords of space above dug dirt)
 74+  B11F 78               ld a,b
 75+  B120 06 08            ld b,8
 76+  B122 90               sub b
 77+  B123 47               ld b,a
 78+  B124 79               ld a,c
 79+  B125 0E 08            ld c,8
 80+  B127 91               sub c
 81+  B128 4F               ld c,a
 82+  B129 C5               push bc
 83+  B12A C3 5A B1         jp control_dig2
 84+  B12D              control_dig1:
 85+  B12D CD 54 A7         call sprites_scadd  ; get the current coord
 86+  B130 62 6B            ld hl,de
 87+  B132 23               inc hl              ; move one right
 88+  B133 C1               pop bc              ; get the coords back, add 8 to horiz, subtract 8 from vert store (will be coords of space above dug dirt)
 89+  B134 3E 08            ld a,8
 90+  B136 80               add a,b
 91+  B137 47               ld b,a
 92+  B138 79               ld a,c
 93+  B139 0E 08            ld c,8
 94+  B13B 91               sub c
 95+  B13C 4F               ld c,a
 96+  B13D C5               push bc
 97+  B13E C3 5A B1         jp control_dig2
 98+  B141              control_dig4:
 99+  B141 CD 54 A7         call sprites_scadd  ; get the current coord
100+  B144 62 6B            ld hl,de
101+  B146 11 20 00         ld de,32
102+  B149 ED 52            sbc hl,de             ; move one up
103+  B14B C1               pop bc              ; get the coords back, 1 from vert, store, then we'll sub 1 from c for each row later
104+  B14C 0D               dec c
105+  B14D C5               push bc
106+  B14E C3 72 B1         jp control_dig6
107+  B151              control_dig5:
108+  B151 CD 54 A7         call sprites_scadd  ; get the current coord
109+  B154 62 6B            ld hl,de
110+  B156 24               inc h              ; move one down
111+  B157                                     ; not bothered about working out bc here, since rock will never fall if digging down
112+  B157 C3 5A B1         jp control_dig2
113+  B15A              ; Normal (not up) digging
114+  B15A              control_dig2:
115+  B15A 3A AD B4         ld a,(player+8)     ; get the number of rows we need to overwrite
116+  B15D 47               ld b,a              ; rows to copy over
117+  B15E E5               push hl             ; store the memory location of the first row for later
118+  B15F              control_dig3:
119+  B15F CD A1 B1         call control_getpixelrow
120+  B162 77               ld (hl),a           ; load contents into row
121+  B163 11 20 00         ld de,32
122+  B166 19               add hl,de           ; move to next row
123+  B167 10 F6            djnz control_dig3
124+  B169 E1               pop hl              ; get the original memory location back
125+  B16A 11 20 00         ld de,32
126+  B16D ED 52            sbc hl,de           ; move to above row, ready for checking for rock
127+  B16F C3 88 B1         jp control_dig10
128+  B172              ; Special case for going up
129+  B172              control_dig6:
130+  B172 3A AD B4         ld a,(player+8)     ; get the number of rows we need to overwrite
131+  B175 47               ld b,a              ; rows to copy over
132+  B176              control_dig7:
133+  B176 CD A1 B1         call control_getpixelrow
134+  B179              control_dig12:
135+  B179 77               ld (hl),a           ; load empty into row
136+  B17A 11 20 00         ld de,32
137+  B17D ED 52            sbc hl,de           ; move up to next row
138+  B17F 0D               dec c               ; decrease c to track rows
139+  B180 10 F4            djnz control_dig7
140+  B182 79               ld a,c
141+  B183 D6 07            sub 7
142+  B185 C1               pop bc
143+  B186 4F               ld c,a
144+  B187 C5               push bc             ; store the decreased c coord
145+  B188              control_dig10:
146+  B188 DD 21 AC B4      ld ix,player+7
147+  B18C DD 7E 00         ld a,(ix)     ; get the dig frame number
148+  B18F 3D               dec a
149+  B190 DD 77 00         ld (ix),a
150+  B193                  ; call the check for rocks above the removed dirt
151+  B193 DD 21 AB B4      ld ix,player+6
152+  B197 DD 7E 00         ld a,(ix)     ; get the dig state
153+  B19A FE 00            cp 0
154+  B19C C1               pop bc
155+  B19D CC 78 B7         call z, rocks_checkforfalling ; make the check if we're no longer digging
156+  B1A0 C9               ret
157+  B1A1
158+  B1A1              ;
159+  B1A1              ; Gets a modified pixel row to overwrite dirt - if this is the last dig, overwrite with nothing, otherwise xor to flip the dirt
160+  B1A1              ; Inputs:
161+  B1A1              ; hl - memory of pixel row
162+  B1A1              ; Outputs:
163+  B1A1              ; a - modified row to write
164+  B1A1              ;
165+  B1A1              control_getpixelrow:
166+  B1A1 3A AC B4         ld a,(player+7)     ; get the dig frame number
167+  B1A4 FE 00            cp 0                ; is this the last dig
168+  B1A6 CA AD B1         jp z,control_getpixelrow1
169+  B1A9 7E               ld a,(hl)           ; if not, xor with 255 to flip it
170+  B1AA EE FF            xor 255
171+  B1AC C9               ret
172+  B1AD              control_getpixelrow1:
173+  B1AD DD 21 AB B4      ld ix,player+6
174+  B1B1 DD 36 00 00      ld (ix),0           ; turn off digging
175+  B1B5 3E 00            ld a,0              ; if it is, load with empty
176+  B1B7 C9               ret
177+  B1B8
178+  B1B8              ;
179+  B1B8              ; Auto move the player until pixels is zero
180+  B1B8              ;
181+  B1B8              control_automove:
182+  B1B8 5F               ld e,a              ; store the number of pixels left to move in e
183+  B1B9 ED 4B A5 B4      ld bc,(player)      ; load the current coords into bc
184+  B1BD 21 A7 B4         ld hl,player+2      ; get the direction
185+  B1C0 7E               ld a,(hl)
186+  B1C1 FE 03            cp 3                ; down
187+  B1C3 CA D7 B1         jp z,control_automove3  ; don't need to do anything
188+  B1C6 FE 00            cp 0                ; going up
189+  B1C8 CA E3 B1         jp z,control_automove2
190+  B1CB FE 01            cp 1                ; going left?
191+  B1CD CA EF B1         jp z,control_automove0
192+  B1D0 78               ld a,b
193+  B1D1 3C               inc a               ; if we're going right, increment a twice for two pixels
194+  B1D2 3C               inc a
195+  B1D3 47               ld b,a
196+  B1D4 C3 F3 B1         jp control_automove1
197+  B1D7              control_automove3:
198+  B1D7 79               ld a,c
199+  B1D8 3C               inc a
200+  B1D9 3C               inc a               ; if we're going down, increment twice
201+  B1DA 4F               ld c,a
202+  B1DB FE 90            cp 144
203+  B1DD CC BB B2         call z, control_scroll_down
204+  B1E0 C3 F3 B1         jp control_automove1
205+  B1E3              control_automove2:
206+  B1E3 79               ld a,c
207+  B1E4 3D               dec a
208+  B1E5 3D               dec a               ; if we're going up, decrement twice
209+  B1E6 4F               ld c,a
210+  B1E7 FE 60            cp 96
211+  B1E9 CC C8 B2         call z, control_scroll_up
212+  B1EC C3 F3 B1         jp control_automove1
213+  B1EF              control_automove0:
214+  B1EF 78               ld a,b
215+  B1F0 3D               dec a               ; if we're going left, decrement a twice
216+  B1F1 3D               dec a
217+  B1F2 47               ld b,a
218+  B1F3              control_automove1:
219+  B1F3 ED 43 A5 B4      ld (player),bc      ; and back to player
220+  B1F7 7B               ld a,e              ; now get the pixel count back
221+  B1F8 3D               dec a               ; decrease by one
222+  B1F9 21 AA B4         ld hl,player+5
223+  B1FC 77               ld (hl),a           ; copy back
224+  B1FD CD 73 B5         call player_justmoved
225+  B200 C9               ret
226+  B201
227+  B201              ;
228+  B201              ; Moves the player up
229+  B201              ;
230+  B201              control_pl_moveup:
231+  B201 C5               push bc
232+  B202 ED 4B A5 B4      ld bc,(player)          ; get the current coords, b horiz, c vert
233+  B206 79               ld a,c                  ; load c into the acc
234+  B207 FE 18            cp 24
235+  B209 CA 29 B2         jp z,control_pl_moveup0 ; are we at the edge of the screen
236+  B20C FE 60            cp 96
237+  B20E CC C8 B2         call z, control_scroll_up
238+  B211 CD F3 B3         call movement_checkcanmove_up ; check we can move up, e will be 1 if we can
239+  B214 F5               push af
240+  B215 7B               ld a,e                  ; put e in a
241+  B216 FE 00            cp 0
242+  B218 CA 28 B2         jp z,control_pl_moveup1 ; don't move if we can't
243+  B21B F1               pop af
244+  B21C D6 01            sub 1                   ; subtract 1
245+  B21E D6 01            sub 1                   ; subtract 1
246+  B220 4F               ld c,a                  ; load back to c
247+  B221 ED 43 A5 B4      ld (player),bc          ; load back to player
248+  B225 C3 29 B2         jp control_pl_moveup0
249+  B228              control_pl_moveup1:
250+  B228 F1               pop af                  ; restore af if needed
251+  B229              control_pl_moveup0:
252+  B229 3E 00            ld a,0
253+  B22B 32 A7 B4         ld (player+2),a        ; set direction to up
254+  B22E C1               pop bc
255+  B22F C9               ret
256+  B230              ;
257+  B230              ; Moves the player down
258+  B230              ;
259+  B230              control_pl_movedown:
260+  B230 C5               push bc
261+  B231 ED 4B A5 B4      ld bc,(player)          ; get the current coords, b horiz, c vert
262+  B235 79               ld a,c                  ; load c into the acc
263+  B236 FE E0            cp 224
264+  B238 CA 56 B2         jp z,control_pl_movedown0 ; are we at the edge of the screen
265+  B23B FE 80            cp 128
266+  B23D CC BB B2         call z, control_scroll_down
267+  B240 CD CB B3         call movement_checkcanmove_down ; check we can move down, e will be 1 if we can
268+  B243 F5               push af
269+  B244 7B               ld a,e                  ; put e in a
270+  B245 FE 00            cp 0
271+  B247 CA 55 B2         jp z,control_pl_movedown1 ; don't move if we can't
272+  B24A F1               pop af
273+  B24B 3C               inc a                   ; add 1
274+  B24C 3C               inc a                   ; add 1
275+  B24D 4F               ld c,a                  ; load back to c
276+  B24E ED 43 A5 B4      ld (player),bc          ; load back to player
277+  B252 C3 56 B2         jp control_pl_movedown0
278+  B255              control_pl_movedown1:
279+  B255 F1               pop af                  ; restore af if needed
280+  B256              control_pl_movedown0:
281+  B256 3E 03            ld a,3
282+  B258 32 A7 B4         ld (player+2),a        ; set direction to down
283+  B25B C1               pop bc
284+  B25C C9               ret
285+  B25D              ;
286+  B25D              ; Moves the player left
287+  B25D              ;
288+  B25D              control_pl_moveleft:
289+  B25D C5               push bc
290+  B25E ED 4B A5 B4      ld bc,(player)          ; get the current coords, b horiz, c vert
291+  B262 78               ld a,b                  ; load b into the acc
292+  B263 FE 10            cp 16
293+  B265 CA 86 B2         jp z,control_pl_moveleft0 ; are we at the edge of the screen
294+  B268 CD 4D B4         call movement_checkcanmove_left ; check we can move down, e will be 1 if we can
295+  B26B F5               push af
296+  B26C 7B               ld a,e                  ; put e in a
297+  B26D FE 00            cp 0
298+  B26F CA 85 B2         jp z,control_pl_moveleft1 ; don't move if we can't
299+  B272 21 AA B4         ld hl,player+5          ; need to store the amount of pixels still left to move in the player status
300+  B275 3E 03            ld a,3
301+  B277 77               ld (hl),a
302+  B278 F1               pop af
303+  B279 D6 01            sub 1                    ; subtract 2
304+  B27B D6 01            sub 1
305+  B27D 47               ld b,a                  ; load back to c
306+  B27E ED 43 A5 B4      ld (player),bc          ; load back to player
307+  B282 C3 86 B2         jp control_pl_moveleft0
308+  B285              control_pl_moveleft1:
309+  B285 F1               pop af
310+  B286              control_pl_moveleft0:
311+  B286 3E 01            ld a,1
312+  B288 32 A7 B4         ld (player+2),a        ; set direction to left
313+  B28B C1               pop bc
314+  B28C C9               ret
315+  B28D              ;
316+  B28D              ; Moves the player right
317+  B28D              ;
318+  B28D              control_pl_moveright:
319+  B28D C5               push bc
320+  B28E ED 4B A5 B4      ld bc,(player)          ; get the current coords, b horiz, c vert
321+  B292 78               ld a,b                  ; load b into the acc
322+  B293 FE F0            cp 240
323+  B295 CA B4 B2         jp z,control_pl_moveright0 ; are we at the edge of the screen
324+  B298 CD 25 B4         call movement_checkcanmove_right ; check we can move down, e will be 1 if we can
325+  B29B F5               push af
326+  B29C 7B               ld a,e                  ; put e in a
327+  B29D FE 00            cp 0
328+  B29F CA B3 B2         jp z,control_pl_moveright1 ; don't move if we can't
329+  B2A2 21 AA B4         ld hl,player+5          ; need to store the amount of pixels still left to move in the player status
330+  B2A5 3E 03            ld a,3
331+  B2A7 77               ld (hl),a
332+  B2A8 F1               pop af
333+  B2A9 3C               inc a                   ; add 2
334+  B2AA 3C               inc a
335+  B2AB 47               ld b,a                  ; load back to b
336+  B2AC ED 43 A5 B4      ld (player),bc          ; load back to player
337+  B2B0 C3 B4 B2         jp control_pl_moveright0
338+  B2B3              control_pl_moveright1:
339+  B2B3 F1               pop af                  ; restore af if needed
340+  B2B4              control_pl_moveright0:
341+  B2B4 3E 02            ld a,2
342+  B2B6 32 A7 B4         ld (player+2),a        ; set direction to right
343+  B2B9 C1               pop bc
344+  B2BA C9               ret
345+  B2BB
346+  B2BB              ;
347+  B2BB              ; Scrolls the screen down
348+  B2BB              ;
349+  B2BB              control_scroll_down:
350+  B2BB F5               push af
351+  B2BC 3E 08            ld a,8
352+  B2BE 32 8C A5         ld (screen_offset),a
353+  B2C1 F1               pop af
354+  B2C2 21 3E A4         ld hl,buffer_updateall
355+  B2C5 36 01            ld (hl),1         ; flag as screen needing update
356+  B2C7 C9               ret
357+  B2C8
358+  B2C8              ;
359+  B2C8              ; Scrolls the screen up
360+  B2C8              ;
361+  B2C8              control_scroll_up:
362+  B2C8 F5               push af
363+  B2C9 3E 00            ld a,0
364+  B2CB 32 8C A5         ld (screen_offset),a
365+  B2CE F1               pop af
366+  B2CF 21 3E A4         ld hl,buffer_updateall
367+  B2D2 36 01            ld (hl),1         ; flag as screen needing update
368+  B2D4 C9               ret
369+  B2D5
370+  B2D5
371+  B2D5
372+  B2D5
# file closed: game/control.asm
 34   B2D5                  include "game\movement.asm"
# file opened: game/movement.asm
  1+  B2D5              ;
  2+  B2D5              ; Checks the contents of a cell are empty - ie, all pixel rows are zero
  3+  B2D5              ; Inputs:
  4+  B2D5              ; hl - memory location of top pixel row
  5+  B2D5              ; bc - screen coords, b horiz, c vert
  6+  B2D5              ; Outputs:
  7+  B2D5              ; e - 0 if not empty, 1 if empty
  8+  B2D5              ;
  9+  B2D5              movement_spaceisempty:
 10+  B2D5 3E 08            ld a,8                          ; 8 rows to check
 11+  B2D7              movement_spaceisempty0:
 12+  B2D7 08               ex af,af'                       ; store the loop counter
 13+  B2D8 7E               ld a,(hl)                       ; get current pixel row
 14+  B2D9 FE 00            cp 0
 15+  B2DB C2 EF B2         jp nz, movement_spaceisempty1    ; row is not empty, can't move here
 16+  B2DE 79               ld a,c                          ; load the vertical coord
 17+  B2DF 3C               inc a                           ; next row down
 18+  B2E0 11 20 00         ld de,32
 19+  B2E3 19               add hl,de                       ; otherwise, just go one down for hl, which means add 32, because of course
 20+  B2E4 4F               ld c,a                          ; copy vert coord back to c
 21+  B2E5 08               ex af,af'                       ; get loop counter back
 22+  B2E6 3D               dec a                           ; decrease loop counter
 23+  B2E7 C2 D7 B2         jp nz, movement_spaceisempty0
 24+  B2EA 16 00            ld d,0
 25+  B2EC 1E 01            ld e,1                          ; got to end, so space is empty
 26+  B2EE C9               ret
 27+  B2EF              movement_spaceisempty1:
 28+  B2EF 16 00            ld d,0
 29+  B2F1 1E 00            ld e,0                          ; returning false, ie space not empty
 30+  B2F3 C9               ret
 31+  B2F4
 32+  B2F4              ;
 33+  B2F4              ; Checks the line of a cell below is empty - ie, first pixel rows is zero
 34+  B2F4              ; Inputs:
 35+  B2F4              ; hl - memory location of top pixel row
 36+  B2F4              ; bc - screen coords, b horiz, c vert
 37+  B2F4              ; Outputs:
 38+  B2F4              ; e - 0 if not empty, 1 if empty
 39+  B2F4              ;
 40+  B2F4              movement_linebelowisempty:
 41+  B2F4 7E               ld a,(hl)                       ; get current pixel row
 42+  B2F5 FE 00            cp 0
 43+  B2F7 C2 FF B2         jp nz, movement_linebelowisempty1    ; row is not empty, can't move here
 44+  B2FA 16 00            ld d,0
 45+  B2FC 1E 01            ld e,1                          ; got to end, so space is empty
 46+  B2FE C9               ret
 47+  B2FF              movement_linebelowisempty1:
 48+  B2FF 16 00            ld d,0
 49+  B301 1E 00            ld e,0                          ; returning false, ie space not empty
 50+  B303 C9               ret
 51+  B304
 52+  B304              ;
 53+  B304              ; Checks the line of a cell above is empty - ie, last pixel rows are zero
 54+  B304              ; Inputs:
 55+  B304              ; hl - memory location of top pixel row
 56+  B304              ; bc - screen coords, b horiz, c vert
 57+  B304              ; Outputs:
 58+  B304              ; e - 0 if not empty, 1 if empty
 59+  B304              ;
 60+  B304              movement_lineaboveisempty:
 61+  B304 7E               ld a,(hl)                       ; get current pixel row
 62+  B305 FE 00            cp 0
 63+  B307 C2 0F B3         jp nz, movement_lineaboveisempty1    ; row is not empty, can't move here
 64+  B30A 16 00            ld d,0
 65+  B30C 1E 01            ld e,1                          ; got to end, so space is empty
 66+  B30E C9               ret
 67+  B30F              movement_lineaboveisempty1:
 68+  B30F 16 00            ld d,0
 69+  B311 1E 00            ld e,0                          ; returning false, ie space not empty
 70+  B313 C9               ret
 71+  B314
 72+  B314              ;
 73+  B314              ; Checks the contents of a cell are diggable - ie, all pixel rows are dirt or empty
 74+  B314              ; Inputs:
 75+  B314              ; hl - memory location of top pixel row
 76+  B314              ; bc - screen coords, b horiz, c vert
 77+  B314              ; Outputs:
 78+  B314              ; none - puts player into digging mode
 79+  B314              ;
 80+  B314              movement_spaceisdiggable:
 81+  B314 3E 08            ld a,8                          ; 8 rows to check
 82+  B316              movement_spaceisdiggable0:
 83+  B316 08               ex af,af'                       ; store the loop counter
 84+  B317 7E               ld a,(hl)                       ; get current pixel row
 85+  B318 FE 00            cp 0
 86+  B31A CA 2A B3         jp z, movement_spaceisdiggable2  ; row is empty, can dig here
 87+  B31D FE 55            cp 85
 88+  B31F CA 2A B3         jp z, movement_spaceisdiggable2  ; row is dirt, can dig here
 89+  B322 FE AA            cp 170
 90+  B324 CA 2A B3         jp z, movement_spaceisdiggable2  ; row is dirt, can dig here
 91+  B327 C3 42 B3         jp movement_spaceisdiggable1     ; otherwise, stop checking
 92+  B32A              movement_spaceisdiggable2:
 93+  B32A 79               ld a,c                          ; load the vertical coord
 94+  B32B 3C               inc a                           ; next row down
 95+  B32C 11 20 00         ld de,32
 96+  B32F 19               add hl,de                       ; otherwise, just go one down for hl, which means add 32, because of course
 97+  B330 4F               ld c,a                          ; copy vert coord back to c
 98+  B331 08               ex af,af'                       ; get loop counter back
 99+  B332 3D               dec a                           ; decrease loop counter
100+  B333 C2 16 B3         jp nz, movement_spaceisdiggable0
101+  B336 21 AB B4         ld hl,player+6
102+  B339 36 01            ld (hl),1                       ; set the player into digging mode
103+  B33B 23               inc hl
104+  B33C 36 05            ld (hl),5                      ; set the number of frame to dig for
105+  B33E 23               inc hl
106+  B33F 36 08            ld (hl),8                       ; set the number of pixels to dig
107+  B341 C9               ret
108+  B342              movement_spaceisdiggable1:
109+  B342 21 AB B4         ld hl,player+6
110+  B345 36 00            ld (hl),0                       ; set the player out of digging mode
111+  B347 C9               ret
112+  B348
113+  B348              ;
114+  B348              ; Checks the contents of a cell below are diggable - ie, at least one pixel row has dirt. If the first one isn't dirt, stop
115+  B348              ; Inputs:
116+  B348              ; hl - memory location of top pixel row
117+  B348              ; bc - screen coords, b horiz, c vert
118+  B348              ; Outputs:
119+  B348              ; none - puts player into digging mode
120+  B348              ;
121+  B348              movement_spacebelowisdiggable:
122+  B348 7E               ld a,(hl)                       ; get first pixel row
123+  B349 FE 55            cp 85
124+  B34B CA 56 B3         jp z, movement_spacebelowisdiggable3  ; row is dirt, can dig here
125+  B34E FE AA            cp 170
126+  B350 CA 56 B3         jp z, movement_spacebelowisdiggable3  ; row is dirt, can dig here
127+  B353 C3 42 B3         jp movement_spaceisdiggable1    ; the first row is not dirt, so don't bother checking the rest, can't dig
128+  B356              movement_spacebelowisdiggable3:
129+  B356 3E 08            ld a,8                          ; rows to check
130+  B358 1E 00            ld e,0                          ; count of rows to dig
131+  B35A              movement_spacebelowisdiggable0:
132+  B35A 08               ex af,af'                       ; store the loop counter
133+  B35B 7E               ld a,(hl)                       ; get current pixel row
134+  B35C FE 55            cp 85
135+  B35E CA 69 B3         jp z, movement_spacebelowisdiggable4  ; row is dirt, can dig here
136+  B361 FE AA            cp 170
137+  B363 CA 69 B3         jp z, movement_spacebelowisdiggable4  ; row is dirt, can dig here
138+  B366 C3 78 B3         jp movement_spacebelowisdiggable5     ; don't count this row and stop counting
139+  B369              movement_spacebelowisdiggable4:
140+  B369 1C               inc e                           ; inc count of rows to dig
141+  B36A              movement_spacebelowisdiggable2:
142+  B36A 79               ld a,c                          ; load the vertical coord
143+  B36B 3C               inc a                           ; next row down
144+  B36C D5               push de                         ; need e for later
145+  B36D 11 20 00         ld de,32
146+  B370 19               add hl,de                       ; otherwise, just go one down for hl, which means add 32, because of course
147+  B371 4F               ld c,a                          ; copy vert coord back to c
148+  B372 D1               pop de                          ; get e back
149+  B373 08               ex af,af'                       ; get loop counter back
150+  B374 3D               dec a                           ; incease loop counter
151+  B375 C2 5A B3         jp nz, movement_spacebelowisdiggable0
152+  B378              movement_spacebelowisdiggable5:
153+  B378 21 AB B4         ld hl,player+6
154+  B37B 36 01            ld (hl),1                       ; set the player into digging mode
155+  B37D 23               inc hl
156+  B37E 36 03            ld (hl),3                      ; set the number of frame to dig for
157+  B380 23               inc hl
158+  B381 73               ld (hl),e                       ; set the number of pixels to dig
159+  B382 C9               ret
160+  B383              movement_spacebelowisdiggable1:
161+  B383 21 AB B4         ld hl,player+6
162+  B386 36 00            ld (hl),0                       ; set the player out of digging mode
163+  B388 C9               ret
164+  B389
165+  B389              ;
166+  B389              ; Checks the contents of a cell above are diggable - ie, at least one pixel row has dirt. If the first one isn't dirt, stop
167+  B389              ; Inputs:
168+  B389              ; hl - memory location of top pixel row
169+  B389              ; bc - screen coords, b horiz, c vert
170+  B389              ; Outputs:
171+  B389              ; none - puts player into digging mode
172+  B389              ;
173+  B389              movement_spaceaboveisdiggable:
174+  B389 7E               ld a,(hl)                       ; get first pixel row
175+  B38A FE 55            cp 85
176+  B38C CA 97 B3         jp z, movement_spaceaboveisdiggable3  ; row is dirt, can dig here
177+  B38F FE AA            cp 170
178+  B391 CA 97 B3         jp z, movement_spaceaboveisdiggable3  ; row is dirt, can dig here
179+  B394 C3 42 B3         jp movement_spaceisdiggable1    ; the first row is not dirt, so don't bother checking the rest, can't dig
180+  B397              movement_spaceaboveisdiggable3:
181+  B397 3E 08            ld a,8                          ; rows to check
182+  B399 1E 00            ld e,0                          ; count of rows to dig
183+  B39B              movement_spaceaboveisdiggable0:
184+  B39B 08               ex af,af'                       ; store the loop counter
185+  B39C 7E               ld a,(hl)                       ; get current pixel row
186+  B39D FE 55            cp 85
187+  B39F CA AA B3         jp z, movement_spaceaboveisdiggable4  ; row is dirt, can dig here
188+  B3A2 FE AA            cp 170
189+  B3A4 CA AA B3         jp z, movement_spaceaboveisdiggable4  ; row is dirt, can dig here
190+  B3A7 C3 BA B3         jp movement_spaceaboveisdiggable5     ; don't count this row and stop counting
191+  B3AA              movement_spaceaboveisdiggable4:
192+  B3AA 1C               inc e                           ; inc count of rows to dig
193+  B3AB              movement_spaceaboveisdiggable2:
194+  B3AB 79               ld a,c                          ; load the vertical coord
195+  B3AC 3D               dec a                           ; next row up
196+  B3AD D5               push de                         ; need e for later
197+  B3AE 11 20 00         ld de,32
198+  B3B1 ED 52            sbc hl,de                       ; otherwise, just go one up for hl, which means sub 32, because of course
199+  B3B3 4F               ld c,a                          ; copy vert coord back to c
200+  B3B4 D1               pop de                          ; get e back
201+  B3B5 08               ex af,af'                       ; get loop counter back
202+  B3B6 3D               dec a                           ; incease loop counter
203+  B3B7 C2 9B B3         jp nz, movement_spaceaboveisdiggable0
204+  B3BA              movement_spaceaboveisdiggable5:
205+  B3BA 21 AB B4         ld hl,player+6
206+  B3BD 36 01            ld (hl),1                       ; set the player into digging mode
207+  B3BF 23               inc hl
208+  B3C0 36 05            ld (hl),5                       ; set the number of frame to dig for
209+  B3C2 23               inc hl
210+  B3C3 73               ld (hl),e                       ; set the number of pixels to dig
211+  B3C4 C9               ret
212+  B3C5              movement_spaceaboveisdiggable1:
213+  B3C5 21 AB B4         ld hl,player+6
214+  B3C8 36 00            ld (hl),0                       ; set the player out of digging mode
215+  B3CA C9               ret
216+  B3CB
217+  B3CB              ;
218+  B3CB              ; Checks if the player can move down
219+  B3CB              ; Inputs:
220+  B3CB              ; bc - player coords, b horiz, c vert
221+  B3CB              ; Outputs:
222+  B3CB              ; de - 1 can move
223+  B3CB              movement_checkcanmove_down:
224+  B3CB F5               push af
225+  B3CC C5               push bc
226+  B3CD CD 54 A7         call sprites_scadd              ; get the memory location of cell into de
227+  B3D0 62 6B            ld hl,de                        ; look at cell directly underneath (add 256)
228+  B3D2 24               inc h                       ; memory location of cell beneath now in hl
229+  B3D3 CD F4 B2         call movement_linebelowisempty       ; check space is empty
230+  B3D6 7B               ld a,e                          ; check space empty flag
231+  B3D7 FE 00            cp 0
232+  B3D9 CA E2 B3         jp z, movement_checkcanmove_down1 ; can't move
233+  B3DC CD 73 B5         call player_justmoved
234+  B3DF C1               pop bc
235+  B3E0 F1               pop af
236+  B3E1 C9               ret
237+  B3E2              movement_checkcanmove_down1:
238+  B3E2 C1               pop bc
239+  B3E3 CD 54 A7         call sprites_scadd              ; get the memory location of cell into de
240+  B3E6 62 6B            ld hl,de                        ; look at cell directly underneath (add 256)
241+  B3E8 24               inc h
242+  B3E9 C5               push bc
243+  B3EA CD 48 B3         call movement_spacebelowisdiggable    ; can't move here, but can we dig
244+  B3ED 11 00 00         ld de,0
245+  B3F0 C1               pop bc
246+  B3F1 F1               pop af
247+  B3F2 C9               ret
248+  B3F3
249+  B3F3              ;
250+  B3F3              ; Checks if the player can move up
251+  B3F3              ; Inputs:
252+  B3F3              ; bc - player coords, b horiz, c vert
253+  B3F3              ; Outputs:
254+  B3F3              ; de - 1 can move
255+  B3F3              movement_checkcanmove_up:
256+  B3F3 F5               push af
257+  B3F4 C5               push bc
258+  B3F5 CD 54 A7         call sprites_scadd              ; get the memory location of cell into de
259+  B3F8 62 6B            ld hl,de                        ; look at cell directly above (subtract 32)
260+  B3FA 11 20 00         ld de,32
261+  B3FD ED 52            sbc hl,de                       ; memory location of line above now in hl
262+  B3FF CD 04 B3         call movement_lineaboveisempty       ; check space is empty
263+  B402 7B               ld a,e                          ; check space empty flag
264+  B403 FE 00            cp 0
265+  B405 CA 10 B4         jp z, movement_checkcanmove_up1 ; can't move
266+  B408 1E 01            ld e,1
267+  B40A CD 73 B5         call player_justmoved
268+  B40D C1               pop bc
269+  B40E F1               pop af
270+  B40F C9               ret
271+  B410              movement_checkcanmove_up1:
272+  B410 C1               pop bc
273+  B411 CD 54 A7         call sprites_scadd              ; get the memory location of cell into de
274+  B414 62 6B            ld hl,de                        ; look at cell directly above (subtract 32)
275+  B416 11 20 00         ld de,32
276+  B419 ED 52            sbc hl,de                       ; memory location of line above now in hl
277+  B41B C5               push bc
278+  B41C CD 89 B3         call movement_spaceaboveisdiggable    ; can't move here, but can we dig
279+  B41F 11 00 00         ld de,0
280+  B422 C1               pop bc
281+  B423 F1               pop af
282+  B424 C9               ret
283+  B425
284+  B425              ;
285+  B425              ; Checks if the player can move right
286+  B425              ; Inputs:
287+  B425              ; bc - player coords, b horiz, c vert
288+  B425              ; Outputs:
289+  B425              ; de - 1 can move
290+  B425              movement_checkcanmove_right:
291+  B425 F5               push af
292+  B426 C5               push bc
293+  B427 CD 54 A7         call sprites_scadd              ; get the memory location of cell into de
294+  B42A 62 6B            ld hl,de                        ; look at cell directly to the right (add 1)
295+  B42C 23               inc hl                          ; memory location of cell to the right now in hl
296+  B42D CD D5 B2         call movement_spaceisempty       ; check space is empty
297+  B430 7B               ld a,e                          ; check space empty flag
298+  B431 FE 00            cp 0
299+  B433 CA 3C B4         jp z, movement_checkcanmove_right1 ; can't move
300+  B436 CD 73 B5         call player_justmoved
301+  B439 C1               pop bc
302+  B43A F1               pop af
303+  B43B C9               ret
304+  B43C              movement_checkcanmove_right1:
305+  B43C C1               pop bc
306+  B43D CD 54 A7         call sprites_scadd              ; get the memory location of cell into de
307+  B440 62 6B            ld hl,de
308+  B442 23               inc hl                          ; memory location of cell to the right now in hl
309+  B443 C5               push bc
310+  B444 CD 14 B3         call movement_spaceisdiggable    ; can't move here, but can we dig
311+  B447 11 00 00         ld de,0
312+  B44A C1               pop bc
313+  B44B F1               pop af
314+  B44C C9               ret
315+  B44D
316+  B44D              ;
317+  B44D              ; Checks if the player can move left
318+  B44D              ; Inputs:
319+  B44D              ; bc - player coords, b horiz, c vert
320+  B44D              ; Outputs:
321+  B44D              ; de - 1 can move
322+  B44D              movement_checkcanmove_left:
323+  B44D F5               push af
324+  B44E C5               push bc
325+  B44F CD 54 A7         call sprites_scadd              ; get the memory location of cell into de
326+  B452 62 6B            ld hl,de                        ; look at cell directly to the right (add 1)
327+  B454 2B               dec hl                          ; memory location of cell to the right now in hl
328+  B455 CD D5 B2         call movement_spaceisempty       ; check space is empty
329+  B458 7B               ld a,e                          ; check space empty flag
330+  B459 FE 00            cp 0
331+  B45B CA 64 B4         jp z, movement_checkcanmove_left1 ; can't move
332+  B45E CD 73 B5         call player_justmoved
333+  B461 C1               pop bc
334+  B462 F1               pop af
335+  B463 C9               ret
336+  B464              movement_checkcanmove_left1:
337+  B464 C1               pop bc
338+  B465 CD 54 A7         call sprites_scadd              ; get the memory location of cell into de
339+  B468 62 6B            ld hl,de
340+  B46A 2B               dec hl                          ; memory location of cell to the right now in hl
341+  B46B C5               push bc
342+  B46C CD 14 B3         call movement_spaceisdiggable    ; can't move here, but can we dig
343+  B46F 11 00 00         ld de,0
344+  B472 C1               pop bc
345+  B473 F1               pop af
346+  B474 C9               ret
# file closed: game/movement.asm
 35   B475                  include "game\game.asm"
# file opened: game/game.asm
  1+  B475              ;
  2+  B475              ; The current frame count, incremented each frame
  3+  B475              ;
  4+  B475              game_framenumber:
  5+  B475 00               defb    0
  6+  B476
  7+  B476              ;
  8+  B476              ; The number of players
  9+  B476              ;
 10+  B476              game_numberplayers:
 11+  B476 01               defb 1
 12+  B477
 13+  B477              ;
 14+  B477              ; The current player
 15+  B477              ;
 16+  B477              game_currentplayer:
 17+  B477 01               defb 1
 18+  B478
 19+  B478              ;
 20+  B478              ; The default number of lives
 21+  B478              ;
 22+  B478              game_numberlives:
 23+  B478 04               defb 4
 24+  B479
 25+  B479              ;
 26+  B479              ; Moves to the next player
 27+  B479              ;
 28+  B479              game_changeplayer:
 29+  B479 3A 77 B4         ld a,(game_currentplayer)
 30+  B47C FE 01            cp 1
 31+  B47E C8               ret z                       ; if just one player, no need to change
 32+  B47F 3D               dec a                       ; otherwise decrease by one
 33+  B480 EE 01            xor 1                       ; xor with one to flip
 34+  B482 3C               inc a                       ; increment
 35+  B483 21 77 B4         ld hl,game_currentplayer
 36+  B486 77               ld (hl),a                   ; store
 37+  B487 C9               ret
 38+  B488
 39+  B488              ;
 40+  B488              ; Sets the number of players at the start of the game
 41+  B488              ; Inputs:
 42+  B488              ; a - number of players
 43+  B488              game_setnumberofplayers:
 44+  B488 21 76 B4         ld hl,game_numberplayers
 45+  B48B 77               ld (hl),a
 46+  B48C
 47+  B48C              ;
 48+  B48C              ; Increment frame number by 1
 49+  B48C              ;
 50+  B48C              game_incrementframe:
 51+  B48C 3A 75 B4         ld a,(game_framenumber)
 52+  B48F FE FF            cp 255
 53+  B491 C2 96 B4         jp nz,game_incrementframe0
 54+  B494 3E 00            ld a,0
 55+  B496              game_incrementframe0:
 56+  B496 3C               inc a
 57+  B497 32 75 B4         ld (game_framenumber),a
 58+  B49A C9               ret
 59+  B49B
 60+  B49B              ;
 61+  B49B              ; Returns current frame
 62+  B49B              ; Outputs:
 63+  B49B              ; a - current frame
 64+  B49B              ;
 65+  B49B              game_getcurrentframe:
 66+  B49B 3A 75 B4         ld a,(game_framenumber)
 67+  B49E C9               ret
 68+  B49F
 69+  B49F              ;
 70+  B49F              ; Resets current frame
 71+  B49F              ;
 72+  B49F              game_resetcurrentframe:
 73+  B49F 21 75 B4         ld hl,game_framenumber
 74+  B4A2 36 00            ld (hl),0
 75+  B4A4 C9               ret
# file closed: game/game.asm
 36   B4A5                  include "game\player.asm"
# file opened: game/player.asm
  1+  B4A5              ;
  2+  B4A5              ;   Data for current player
  3+  B4A5              ;
  4+  B4A5              player:
  5+  B4A5 00 00            defb    0,0                 ; horiz,vert (+0,+1)
  6+  B4A7 02 00 01         defb    2,0,1               ; dir (0 up, 1 left, 2 right, 3 down), frame, frame transition count (+2,+3,+4)
  7+  B4AA 00               defb    0                   ; auto move remaining (+5)
  8+  B4AB 00 00 00         defb    0,0,0               ; is digging (0 no), digging count, pixels to di (+6,+7,+8)
  9+  B4AE 00               defb    0                   ; lives remaining (+9)
 10+  B4AF 00               defb    0                   ; died this life (+10)
 11+  B4B0 00 00            defb    0,0                 ; crushed (+11), frames (+12)
 12+  B4B2
 13+  B4B2              ;
 14+  B4B2              ; Score for the current player
 15+  B4B2              ;
 16+  B4B2              player_score:
 17+  B4B2 30 30 30 30      defb '000000'
 17+  B4B6 30 30
 18+  B4B8              ;
 19+  B4B8              ; Initializes a player at start of game
 20+  B4B8              ; Copy initial coords, copy lives, copy score
 21+  B4B8              ;
 22+  B4B8              player_init_gamestart:
 23+  B4B8 3A 78 B4         ld a,(game_numberlives)
 24+  B4BB 32 00 B5         ld (player1_lives),a
 25+  B4BE 32 01 B5         ld (player2_lives),a                        ; set the initial number of lives at game start
 26+  B4C1 C9               ret
 27+  B4C2
 28+  B4C2              ;
 29+  B4C2              ; Initializes a player at start of a life
 30+  B4C2              ; Copy initial coords, copy lives, copy score
 31+  B4C2              ;
 32+  B4C2              player_init_lifestart:
 33+  B4C2 ED 4B 22 80      ld bc,(init_coord)
 34+  B4C6 ED 43 A5 B4      ld (player),bc
 35+  B4CA 01 AE B4         ld bc,player+9
 36+  B4CD 3A 00 B5         ld a,(player1_lives)
 37+  B4D0 02               ld (bc),a
 38+  B4D1 01 AF B4         ld bc,player+10
 39+  B4D4 3E 00            ld a,0
 40+  B4D6 02               ld (bc),a
 41+  B4D7 01 B0 B4         ld bc,player+11         ; crushed
 42+  B4DA 3E 00            ld a,0
 43+  B4DC 02               ld (bc),a
 44+  B4DD 01 B1 B4         ld bc,player+12         ; crush count
 45+  B4E0 3E 00            ld a,0
 46+  B4E2 02               ld (bc),a
 47+  B4E3 01 A7 B4         ld bc,player+2         ; frame
 48+  B4E6 3E 02            ld a,2
 49+  B4E8 02               ld (bc),a
 50+  B4E9 CD 95 B9         call diamonds_init      ; initialise gems
 51+  B4EC C9               ret
 52+  B4ED
 53+  B4ED              ;
 54+  B4ED              ; Finalises a player at end of a life
 55+  B4ED              ; Copy lives, copy score
 56+  B4ED              ;
 57+  B4ED              player_lifeend:
 58+  B4ED 01 AE B4         ld bc,player+9
 59+  B4F0 0A               ld a,(bc)
 60+  B4F1 01 00 B5         ld bc,player1_lives
 61+  B4F4 02               ld (bc),a
 62+  B4F5 C9               ret
 63+  B4F6
 64+  B4F6              ;
 65+  B4F6              ; Player just died, subtract a life
 66+  B4F6              ;
 67+  B4F6              player_died:
 68+  B4F6 01 AE B4         ld bc,player+9
 69+  B4F9 0A               ld a,(bc)
 70+  B4FA 3D               dec a
 71+  B4FB 02               ld (bc),a
 72+  B4FC CD ED B4         call player_lifeend
 73+  B4FF C9               ret
 74+  B500
 75+  B500              ;
 76+  B500              ; Player lives
 77+  B500              ;
 78+  B500              player1_lives:
 79+  B500 03               defb 3
 80+  B501              player2_lives:
 81+  B501 03               defb 3
 82+  B502
 83+  B502              ;
 84+  B502              ; Player scores
 85+  B502              ;
 86+  B502              player1_score:
 87+  B502 30 30 30 30      defb '000000'
 87+  B506 30 30
 88+  B508              player2_score:
 89+  B508 30 30 30 30      defb '000000'
 89+  B50C 30 30
 90+  B50E
 91+  B50E              ;
 92+  B50E              ; Kills a player this life
 93+  B50E              ;
 94+  B50E              player_killplayer:
 95+  B50E 21 AF B4         ld hl,player+10
 96+  B511 36 01            ld (hl),1
 97+  B513 C9               ret
 98+  B514
 99+  B514              ;
100+  B514              ; Crush a player this life
101+  B514              ;
102+  B514              player_crushplayer:
103+  B514 21 B0 B4         ld hl,player+11             ; mark as crushed
104+  B517 36 01            ld (hl),1
105+  B519 C9               ret
106+  B51A
107+  B51A              ;
108+  B51A              ; Draws the player at the current position or deletes them
109+  B51A              ;
110+  B51A              player_drawplayer:
111+  B51A 3A A7 B4         ld a,(player+2)             ; get the current direction
112+  B51D FE 03            cp 3
113+  B51F C2 24 B5         jp nz,player_drawplayer0
114+  B522 3E 00            ld a,0                      ; if 3, then down, so set the direction to 0 since the sprite is the same as up
115+  B524              player_drawplayer0:
116+  B524 5F               ld e,a                      ; store in e
117+  B525 3A B0 B4         ld a,(player+11)             ; get the dying flag
118+  B528 FE 01            cp 1
119+  B52A CA 3C B5         jp z,player_drawplayer3     ; if it's one, we're being crushed
120+  B52D 3A AB B4         ld a,(player+6)             ; get the dig flag
121+  B530 FE 01            cp 1
122+  B532 CA 59 B5         jp z,player_drawplayer1    ; get dig frame
123+  B535              player_drawplayer4:
124+  B535 3A A8 B4         ld a,(player+3)             ; this is normal movement so get the current frame
125+  B538 83               add a,e
126+  B539 C3 5E B5         jp player_drawplayer2
127+  B53C              player_drawplayer3:
128+  B53C 21 B1 B4         ld hl,player+12
129+  B53F 7E               ld a,(hl)                  ; crushing, so get the current anim flag
130+  B540 FE 00            cp 0
131+  B542 C2 4B B5         jp nz,player_drawplayer5    ; if this isn't zero, then this isn't the first time round, so do the crush anim
132+  B545 3E 32            ld a,50
133+  B547 77               ld (hl),a                   ; otherwise, load up the anim frames
134+  B548 C3 35 B5         jp player_drawplayer4       ; and return to the main loop to remove the current frame
135+  B54B              player_drawplayer5:
136+  B54B 3D               dec a
137+  B54C 77               ld (hl),a
138+  B54D FE 00            cp 0
139+  B54F CC 0E B5         call z,player_killplayer    ; final animation, so kill the player
140+  B552 E6 01            and 1                       ; check for odd
141+  B554 C6 0A            add 10                      ; add 10, to get either 10 or 11
142+  B556 C3 5E B5         jp player_drawplayer2
143+  B559              player_drawplayer1:
144+  B559 3A A7 B4         ld a,(player+2)             ; digging, get the current direction again, because want all four
145+  B55C C6 06            add a,6                     ; add direction to 6 to get frame
146+  B55E              player_drawplayer2:
147+  B55E 07               rlca
148+  B55F 07               rlca
149+  B560 07               rlca                        ; multiply by eight
150+  B561 6F               ld l,a
151+  B562 26 00            ld h,0
152+  B564 11 99 AF         ld de,player_sprite
153+  B567 19               add hl,de                   ; load hl with the location of the player sprite data
154+  B568 ED 4B A5 B4      ld bc,(player)              ; load bc with the start coords
155+  B56C CD 11 A7         call sprites_drawsprite     ; call the routine to draw the sprite
156+  B56F CD 9F B5         call player_storeupdatedlines ; log updated rows
157+  B572 C9               ret
158+  B573
159+  B573
160+  B573              ;
161+  B573              ; Runs after the player just moved. Changes animation frame if required
162+  B573              ;
163+  B573              player_justmoved:
164+  B573 D9               exx
165+  B574 3A A9 B4         ld a,(player+4)             ; get the transition count
166+  B577 FE 00            cp 0
167+  B579 CA 7F B5         jp z, player_justmoved2     ; if zero reset and change the frame
168+  B57C C3 99 B5         jp player_justmoved1       ; otherwise decrease and continue
169+  B57F              player_justmoved2:
170+  B57F                  ; reset and change frame in here
171+  B57F 3E 01            ld a,1
172+  B581 32 A9 B4         ld (player+4),a            ; reset back to whatever
173+  B584 3A A8 B4         ld a,(player+3)             ; load the frame
174+  B587 FE 03            cp 3                       ; flip between 3 and 0
175+  B589 C2 91 B5         jp nz, player_justmoved4
176+  B58C 3E 00            ld a,0
177+  B58E C3 93 B5         jp player_justmoved5
178+  B591              player_justmoved4:
179+  B591 3E 03            ld a,3
180+  B593              player_justmoved5:
181+  B593 32 A8 B4         ld (player+3),a           ; save back
182+  B596 C3 9D B5         jp player_justmoved3
183+  B599              player_justmoved1:
184+  B599                  ; decrease count
185+  B599 3D               dec a
186+  B59A 32 A9 B4         ld (player+4),a
187+  B59D              player_justmoved3:
188+  B59D D9               exx;
189+  B59E C9               ret
190+  B59F
191+  B59F              ;
192+  B59F              ; Stores the updated rows associated with the player
193+  B59F              ;
194+  B59F              player_storeupdatedlines:
195+  B59F ED 4B A5 B4      ld bc,(player)          ; get the screen coords into bc
196+  B5A3 79               ld a,c                  ; get the player block coords of current block
197+  B5A4 E6 F8            and 248                 ; find closest multiple of eight
198+  B5A6 0F               rrca
199+  B5A7 0F               rrca
200+  B5A8 0F               rrca                    ; divide by 8
201+  B5A9 ED 5B 8C A5      ld de,(screen_offset)          ; load the screen offset, this is in rows
202+  B5AD 93               sub e
203+  B5AE F5               push af
204+  B5AF CD 3F A4         call buffer_marklineforupdate  ; store current row in updated lines
205+  B5B2 F1               pop af
206+  B5B3 3D               dec a
207+  B5B4 F5               push af
208+  B5B5 CD 3F A4         call buffer_marklineforupdate  ; store line above
209+  B5B8 F1               pop af
210+  B5B9 3C               inc a
211+  B5BA 3C               inc a
212+  B5BB CD 3F A4         call buffer_marklineforupdate  ; store line beneath
213+  B5BE C9               ret
# file closed: game/player.asm
 37   B5BF                  include "game\ship.asm"
# file opened: game/ship.asm
  1+  B5BF              ;
  2+  B5BF              ; Ship initial position: vert,horiz
  3+  B5BF              ;
  4+  B5BF              ship_initpos:
  5+  B5BF 00 24            defb 0,36
  6+  B5C1              ship_initpos2:
  7+  B5C1 00 00            defb 0,0
  8+  B5C3              ship_frame:
  9+  B5C3 00               defb 0
 10+  B5C4              ;
 11+  B5C4              ; The current memory location
 12+  B5C4              ;
 13+  B5C4              ship_current_sprite:
 14+  B5C4 00 00            defb 0,0
 15+  B5C6
 16+  B5C6              ship_current_coords:
 17+  B5C6 00 00            defb 0,0
 18+  B5C8
 19+  B5C8              ;
 20+  B5C8              ;   Draw and land the ship - first move the ship down, then across, drawing the player in the middle
 21+  B5C8              ;
 22+  B5C8              ship_land:
 23+  B5C8 ED 4B BF B5      ld bc,(ship_initpos)
 24+  B5CC ED 43 C1 B5      ld (ship_initpos2),bc        ; save the initial position for later use
 25+  B5D0 1E 00            ld e,0                      ; store a flag to track first time round
 26+  B5D2 06 09            ld b,9                      ; move down 8 pixels
 27+  B5D4              ship_land0:
 28+  B5D4 C5               push bc
 29+  B5D5 7B               ld a,e
 30+  B5D6 D5               push de                     ; store de for next time round
 31+  B5D7 FE 01            cp 1                        ; check first time flag
 32+  B5D9 C2 EE B5         jp nz,ship_land1             ; don't draw over previous one if first time
 33+  B5DC CD 56 B6         call ship_draw_full         ; delete old one
 34+  B5DF CD 2B B6         call ship_change_frame      ; increment the frame
 35+  B5E2 ED 4B C1 B5      ld bc,(ship_initpos2)       ; get the current coords
 36+  B5E6 81 C6 01         add c,1                     ; move down one pixels
 37+  B5E9 4F               ld c,a
 38+  B5EA ED 43 C1 B5      ld (ship_initpos2),bc
 39+  B5EE              ship_land1:
 40+  B5EE CD 56 B6         call ship_draw_full         ; draw the ship
 41+  B5F1 CD 40 B6         call ship_draw_screen
 42+  B5F4 D1               pop de
 43+  B5F5 1E 01            ld e,1
 44+  B5F7 C1               pop bc
 45+  B5F8 10 DA            djnz ship_land0             ; repeat for downward movement
 46+  B5FA                  ; done moving down
 47+  B5FA                  ; now move across
 48+  B5FA CD 1A B5         call player_drawplayer      ; draw player
 49+  B5FD CD 56 B6         call ship_draw_full         ; delete old one
 50+  B600 1E 00            ld e,0                      ; store a flag to track first time round
 51+  B602 06 14            ld b,20                      ; move back 20 pixels pixels
 52+  B604              ship_land3:
 53+  B604 C5               push bc
 54+  B605 7B               ld a,e
 55+  B606 D5               push de                     ; store de for next time round
 56+  B607 FE 01            cp 1                        ; check first time flag
 57+  B609 C2 1E B6         jp nz,ship_land2             ; don't draw over previous one if first time
 58+  B60C CD 56 B6         call ship_draw_full         ; delete old one
 59+  B60F CD 2B B6         call ship_change_frame      ; increment the frame
 60+  B612 ED 4B C1 B5      ld bc,(ship_initpos2)       ; get the current coords
 61+  B616 78               ld a,b
 62+  B617 D6 01            sub 1                       ; move back one pixels
 63+  B619 47               ld b,a
 64+  B61A ED 43 C1 B5      ld (ship_initpos2),bc
 65+  B61E              ship_land2:
 66+  B61E CD 56 B6         call ship_draw_full         ; draw the ship
 67+  B621 CD 40 B6         call ship_draw_screen       ; draw the frame to screen by clearing the buffer
 68+  B624 D1               pop de
 69+  B625 1E 01            ld e,1                      ; set e to 1 to indicate >1 time
 70+  B627 C1               pop bc
 71+  B628 10 DA            djnz ship_land3             ; repeat for vertical movement
 72+  B62A C9               ret
 73+  B62B
 74+  B62B              ;
 75+  B62B              ; Swap the animation frame between 0 and 32. This will be added to the memory location later
 76+  B62B              ;
 77+  B62B              ship_change_frame:
 78+  B62B F5               push af
 79+  B62C 3A C3 B5         ld a,(ship_frame)
 80+  B62F FE 00            cp 0
 81+  B631 CA 39 B6         jp z,ship_change_frame0
 82+  B634 3E 00            ld a,0                      ; flip to 0
 83+  B636 C3 3B B6         jp ship_change_frame1
 84+  B639              ship_change_frame0:
 85+  B639 3E 20            ld a,32                      ; flip to 32
 86+  B63B              ship_change_frame1:
 87+  B63B 32 C3 B5         ld (ship_frame),a            ; save the frame
 88+  B63E F1               pop af
 89+  B63F C9               ret
 90+  B640
 91+  B640              ship_draw_screen:
 92+  B640 3E 00            ld a,0
 93+  B642 CD 3F A4         call buffer_marklineforupdate
 94+  B645 3E 01            ld a,1
 95+  B647 CD 3F A4         call buffer_marklineforupdate
 96+  B64A 3E 02            ld a,2
 97+  B64C CD 3F A4         call buffer_marklineforupdate   ; mark the first three rows for update
 98+  B64F 76               halt
 99+  B650 F3               di
100+  B651 CD D3 A4         call buffer_buffertoscreen  ; copy buffer to screen
101+  B654 FB               ei                          ; enable interupts
102+  B655 C9               ret
103+  B656
104+  B656              ship_draw_full:
105+  B656 21 F9 AF         ld hl,ship_sprite
106+  B659 ED 4B C1 B5      ld bc,(ship_initpos2)         ; load bc with the start coords
107+  B65D 22 C4 B5         ld (ship_current_sprite),hl  ; put into memory
108+  B660 ED 43 C6 B5      ld (ship_current_coords),bc  ; put into memory
109+  B664 CD 83 B6         call ship_draw
110+  B667 08               ex af,af'
111+  B668 3A C3 B5         ld a,(ship_frame)            ; get the animation frame
112+  B66B 16 00            ld d,0
113+  B66D 5F               ld e,a
114+  B66E 19               add hl,de
115+  B66F 22 C4 B5         ld (ship_current_sprite),hl  ; put into memory
116+  B672 08               ex af,af'
117+  B673 ED 4B C1 B5      ld bc,(ship_initpos2)         ; load bc with the start coords
118+  B677 81 C6 08         add c,8                      ; move one line down
119+  B67A 4F               ld c,a
120+  B67B ED 43 C6 B5      ld (ship_current_coords),bc  ; put into memory
121+  B67F CD 83 B6         call ship_draw
122+  B682 C9               ret
123+  B683
124+  B683              ;
125+  B683              ; Draw the ship
126+  B683              ; Inputs:
127+  B683              ; None, all in memory
128+  B683              ;
129+  B683              ship_draw:
130+  B683 3E 04            ld a,4                              ; 4 pieces per half
131+  B685              ship_draw0:
132+  B685 F5               push af
133+  B686 2A C4 B5         ld hl,(ship_current_sprite)
134+  B689 ED 4B C6 B5      ld bc,(ship_current_coords)         ; load bc with the start coords
135+  B68D CD 11 A7         call sprites_drawsprite
136+  B690 2A C4 B5         ld hl,(ship_current_sprite)
137+  B693 ED 4B C6 B5      ld bc,(ship_current_coords)         ; load bc with the start coords
138+  B697 11 08 00         ld de,8
139+  B69A 19               add hl,de
140+  B69B 80 C6 08         add b,8
141+  B69E 47               ld b,a
142+  B69F 22 C4 B5         ld (ship_current_sprite),hl         ; put into memory
143+  B6A2 ED 43 C6 B5      ld (ship_current_coords),bc         ; put into memory
144+  B6A6 F1               pop af
145+  B6A7 3D               dec a
146+  B6A8 FE 00            cp 0
147+  B6AA C2 85 B6         jp nz,ship_draw0
148+  B6AD
149+  B6AD C9               ret
150+  B6AE
# file closed: game/ship.asm
 38   B6AE                  include "game\tank.asm"
# file opened: game/tank.asm
  1+  B6AE              ;
  2+  B6AE              ; tank initial position: vert,horiz
  3+  B6AE              ;
  4+  B6AE              tank_initpos:
  5+  B6AE 10 D0            defb 16,208
  6+  B6B0              tank_initpos2:
  7+  B6B0 00 00            defb 0,0
  8+  B6B2              tank_frame:
  9+  B6B2 00               defb 0
 10+  B6B3              tank_anim:
 11+  B6B3 11               defb 17
 12+  B6B4              ;
 13+  B6B4              ; The current memory location
 14+  B6B4              ;
 15+  B6B4              tank_current_sprite:
 16+  B6B4 00 00            defb 0,0
 17+  B6B6
 18+  B6B6              tank_current_coords:
 19+  B6B6 00 00            defb 0,0
 20+  B6B8
 21+  B6B8              ;
 22+  B6B8              ; Initialise the tank
 23+  B6B8              ;
 24+  B6B8              tank_init:
 25+  B6B8 ED 4B AE B6      ld bc,(tank_initpos)
 26+  B6BC ED 43 B0 B6      ld (tank_initpos2),bc       ; save the initial position for later use
 27+  B6C0 21 B2 B6         ld hl,tank_frame
 28+  B6C3 36 00            ld (hl),0
 29+  B6C5 21 B3 B6         ld hl,tank_anim
 30+  B6C8 36 11            ld (hl),17                  ; reset tank
 31+  B6CA C9               ret
 32+  B6CB
 33+  B6CB              ;
 34+  B6CB              ;   Draw and move the tank
 35+  B6CB              ;   Start processing at frame 200
 36+  B6CB              ;   Don't move if anim is zero
 37+  B6CB              ;   Decrement frame if moved
 38+  B6CB              ;
 39+  B6CB              tank_process:
 40+  B6CB 3A B3 B6         ld a,(tank_anim)
 41+  B6CE FE 00            cp 0
 42+  B6D0 C8               ret z                       ; return if we've already moved
 43+  B6D1 CD 9B B4         call game_getcurrentframe   ; get the current frame number into a
 44+  B6D4 FE 4B            cp 75
 45+  B6D6 D8               ret c                       ; return if the frame number is below 100
 46+  B6D7 CD E2 B6         call tank_move              ; move tank if not
 47+  B6DA 3A B3 B6         ld a,(tank_anim)
 48+  B6DD 3D               dec a
 49+  B6DE 32 B3 B6         ld (tank_anim),a            ; decrease the anim count
 50+  B6E1 C9               ret
 51+  B6E2
 52+  B6E2              tank_move:
 53+  B6E2 ED 4B B0 B6      ld bc,(tank_initpos2)
 54+  B6E6 C5               push bc
 55+  B6E7 3A B3 B6         ld a,(tank_anim)
 56+  B6EA FE 11            cp 17                       ; check first time flag
 57+  B6EC CA FE B6         jp z,tank_move1             ; don't draw over previous one if first time
 58+  B6EF CD 03 B7         call tank_draw_full         ; delete old one
 59+  B6F2 ED 4B B0 B6      ld bc,(tank_initpos2)       ; get the current coords
 60+  B6F6 78               ld a,b
 61+  B6F7 D6 01            sub 1                       ; move back one pixels
 62+  B6F9 47               ld b,a
 63+  B6FA ED 43 B0 B6      ld (tank_initpos2),bc
 64+  B6FE              tank_move1:
 65+  B6FE CD 03 B7         call tank_draw_full         ; draw the tank
 66+  B701 C1               pop bc
 67+  B702 C9               ret
 68+  B703
 69+  B703              tank_draw_full:
 70+  B703 21 59 B0         ld hl,tank_sprite
 71+  B706 ED 4B B0 B6      ld bc,(tank_initpos2)         ; load bc with the start coords
 72+  B70A 22 B4 B6         ld (tank_current_sprite),hl  ; put into memory
 73+  B70D ED 43 B6 B6      ld (tank_current_coords),bc  ; put into memory
 74+  B711 CD 3A B7         call tank_draw
 75+  B714 08               ex af,af'
 76+  B715 3A B2 B6         ld a,(tank_frame)            ; get the animation frame
 77+  B718 16 00            ld d,0
 78+  B71A 5F               ld e,a
 79+  B71B 19               add hl,de
 80+  B71C 22 B4 B6         ld (tank_current_sprite),hl  ; put into memory
 81+  B71F 08               ex af,af'
 82+  B720 ED 4B B0 B6      ld bc,(tank_initpos2)         ; load bc with the start coords
 83+  B724 81 C6 08         add c,8                      ; move one line down
 84+  B727 4F               ld c,a
 85+  B728 ED 43 B6 B6      ld (tank_current_coords),bc  ; put into memory
 86+  B72C CD 3A B7         call tank_draw
 87+  B72F 3E 02            ld a,2
 88+  B731 CD 3F A4         call buffer_marklineforupdate
 89+  B734 3E 03            ld a,3
 90+  B736 CD 3F A4         call buffer_marklineforupdate   ; mark the first two rows for update
 91+  B739 C9               ret
 92+  B73A
 93+  B73A              ;
 94+  B73A              ; Draw the tank
 95+  B73A              ; Inputs:
 96+  B73A              ; None, all in memory
 97+  B73A              ;
 98+  B73A              tank_draw:
 99+  B73A 3E 04            ld a,4                              ; 4 pieces per half
100+  B73C              tank_draw0:
101+  B73C F5               push af
102+  B73D 2A B4 B6         ld hl,(tank_current_sprite)
103+  B740 ED 4B B6 B6      ld bc,(tank_current_coords)         ; load bc with the start coords
104+  B744 CD 11 A7         call sprites_drawsprite
105+  B747 2A B4 B6         ld hl,(tank_current_sprite)
106+  B74A ED 4B B6 B6      ld bc,(tank_current_coords)         ; load bc with the start coords
107+  B74E 11 08 00         ld de,8
108+  B751 19               add hl,de
109+  B752 80 C6 08         add b,8
110+  B755 47               ld b,a
111+  B756 22 B4 B6         ld (tank_current_sprite),hl         ; put into memory
112+  B759 ED 43 B6 B6      ld (tank_current_coords),bc         ; put into memory
113+  B75D F1               pop af
114+  B75E 3D               dec a
115+  B75F FE 00            cp 0
116+  B761 C2 3C B7         jp nz,tank_draw0
117+  B764
118+  B764 C9               ret
119+  B765
# file closed: game/tank.asm
 39   B765                  include "game\rocks.asm"
# file opened: game/rocks.asm
  1+  B765              ;
  2+  B765              ; A structure of falling rocks
  3+  B765              ; Assume we'll never have more than 4 falling at any one time
  4+  B765              ; (1,2 - 16 bit memory location for rock graphic),state (0 fell, 1 falling, 2 wobbling), countdown
  5+  B765              ;
  6+  B765              rocks_falling:
  7+  B765 00 00 00 00      defb 0,0,0,0
  8+  B769 00 00 00 00      defb 0,0,0,0
  9+  B76D 00 00 00 00      defb 0,0,0,0
 10+  B771 00 00 00 00      defb 0,0,0,0
 11+  B775
 12+  B775              rocks_tmp:
 13+  B775 00               defb 0
 14+  B776
 15+  B776              rocks_tmp2:
 16+  B776 00 00            defb 0,0
 17+  B778
 18+  B778              ;
 19+  B778              ; Checks for a rock that needs to start falling. Takes a memory location of the first line at the bottom of the space.
 20+  B778              ; Checks to see if the pixel row in that location is a rock bottom. If it is, mark this rock as ready to fall.
 21+  B778              ; If the pixel row is not the rock bottom, stop checking.
 22+  B778              ; Inputs:
 23+  B778              ; hl- memory location
 24+  B778              ;
 25+  B778              rocks_checkforfalling:
 26+  B778 7E               ld a,(hl)           ; get the pixel row in this memory location
 27+  B779 FE 7E            cp 126              ; check against the bottom pixel row of the rock graphic
 28+  B77B C2 81 B7         jp nz,rocks_checkforfalling2 ; not a rock, stop
 29+  B77E CD 82 B7         call rocks_addrocktofalling ; mark the rock as falling
 30+  B781              rocks_checkforfalling2:
 31+  B781 C9               ret
 32+  B782
 33+  B782              ;
 34+  B782              ; Adds the rock to the structure that tracks falling rocks
 35+  B782              ; Inputs:
 36+  B782              ; hl - memory location of falling rock graphic
 37+  B782              ; bc - coords of rock, c vert
 38+  B782              rocks_addrocktofalling:
 39+  B782 C5               push bc             ; store the coords
 40+  B783 11 65 B7         ld de,rocks_falling
 41+  B786 06 04            ld b,4              ; number of possible falling rocks
 42+  B788              rocks_addrocktofalling0:
 43+  B788 13               inc de
 44+  B789 13               inc de
 45+  B78A 13               inc de              ; move three along to get the state
 46+  B78B 1A               ld a,(de)           ; load the state
 47+  B78C FE 00            cp 0                ; check if this is not falling
 48+  B78E C2 A3 B7         jp nz,rocks_addrocktofalling1 ; continue the loop if not 0
 49+  B791 3E 10            ld a,16             ; load the number of frames to wobble
 50+  B793 12               ld (de),a
 51+  B794 1B               dec de              ; move de back to state
 52+  B795 3E 02            ld a,2
 53+  B797 12               ld (de),a           ; set the state to wobbling
 54+  B798 1B               dec de              ; move back coords
 55+  B799 C1               pop bc              ; get back coords
 56+  B79A 78               ld a,b
 57+  B79B 12               ld (de),a           ; store the vertical
 58+  B79C 1B               dec de
 59+  B79D 79               ld a,c
 60+  B79E 12               ld (de),a           ; store the horizontal
 61+  B79F C5               push bc
 62+  B7A0 C3 A6 B7         jp rocks_addrocktofalling2 ; done
 63+  B7A3              rocks_addrocktofalling1:
 64+  B7A3 13               inc de              ; move memory along to next rock
 65+  B7A4 10 E2            djnz rocks_addrocktofalling0 ; try the next rock
 66+  B7A6              rocks_addrocktofalling2: ; done, return
 67+  B7A6 C1               pop bc              ; to tidy up
 68+  B7A7 C9               ret
 69+  B7A8
 70+  B7A8              ;
 71+  B7A8              ; Processes any falling rocks
 72+  B7A8              ;
 73+  B7A8              rocks_processrocks:
 74+  B7A8 DD 21 65 B7      ld ix,rocks_falling
 75+  B7AC 06 04            ld b,4              ; the number of rocks to check
 76+  B7AE              rocks_processrocks0:
 77+  B7AE C5               push bc             ; store loop count
 78+  B7AF DD 4E 00 DD      ld bc,(ix)          ; load the coords for this rock into bc
 78+  B7B3 46 01
 79+  B7B5 DD 23            inc ix
 80+  B7B7 DD 23            inc ix              ; move to the state
 81+  B7B9 DD 7E 00         ld a,(ix)           ; load the state into a
 82+  B7BC FE 00            cp 0
 83+  B7BE CA E2 B7         jp z,rocks_processrocks3 ; if not falling, check next
 84+  B7C1 FE 02            cp 2
 85+  B7C3 C2 D3 B7         jp nz, rocks_processrocks2
 86+  B7C6                  ; we're wobbling
 87+  B7C6 DD 23            inc ix              ; get frame number for wobble
 88+  B7C8 DD 7E 00         ld a,(ix)           ; get wobble frame into a
 89+  B7CB CD 98 B8         call rocks_wobble
 90+  B7CE DD 23            inc ix              ; increment for next
 91+  B7D0 C3 E6 B7         jp rocks_processrocks1  ; do next rock
 92+  B7D3              rocks_processrocks2:
 93+  B7D3                  ; we're falling
 94+  B7D3 C5               push bc
 95+  B7D4 CD FF B7         call rocks_fall
 96+  B7D7 C1               pop bc
 97+  B7D8 CD EA B7         call rocks_storeupdatedlines
 98+  B7DB DD 23            inc ix
 99+  B7DD DD 23            inc ix              ; inc ix to get to next
100+  B7DF C3 E6 B7         jp rocks_processrocks1
101+  B7E2              rocks_processrocks3:
102+  B7E2 DD 23            inc ix
103+  B7E4 DD 23            inc ix
104+  B7E6              rocks_processrocks1:
105+  B7E6 C1               pop bc              ; get loop count back
106+  B7E7 10 C5            djnz rocks_processrocks0
107+  B7E9 C9               ret
108+  B7EA
109+  B7EA              ;
110+  B7EA              ; Stores the updated rows associated with the rock
111+  B7EA              ; Inputs:
112+  B7EA              ; bc - coords
113+  B7EA              ;
114+  B7EA              rocks_storeupdatedlines:
115+  B7EA 79               ld a,c                  ; get the player block coords of current block
116+  B7EB E6 F8            and 248                 ; find closest multiple of eight
117+  B7ED 0F               rrca
118+  B7EE 0F               rrca
119+  B7EF 0F               rrca                    ; divide by 8
120+  B7F0 ED 5B 8C A5      ld de,(screen_offset)          ; load the screen offset, this is in rows
121+  B7F4 93               sub e
122+  B7F5 F5               push af
123+  B7F6 CD 3F A4         call buffer_marklineforupdate  ; store current row in updated lines
124+  B7F9 F1               pop af
125+  B7FA 3C               inc a
126+  B7FB CD 3F A4         call buffer_marklineforupdate  ; store line beneath
127+  B7FE C9               ret
128+  B7FF
129+  B7FF              ;
130+  B7FF              ; Falls a rock one pixel, checks the next square down to see if it is empty, if not, stop falling
131+  B7FF              ; bc - coord of current rock graphic on screen
132+  B7FF              ; ix - memory location of current rock in rock list, currently at the 3rd position (rock state)
133+  B7FF              ;
134+  B7FF              rocks_fall:
135+  B7FF DD 2B            dec ix
136+  B801 DD 2B            dec ix              ; decrease ix back to coords
137+  B803 ED 43 76 B7      ld (rocks_tmp2),bc  ; store original coords
138+  B807 3E 03            ld a,3              ; move this number of pixels
139+  B809              rocks_fall1:
140+  B809 08               ex af,af'
141+  B80A DD 4E 00 DD      ld bc,(ix)          ; get current coords
141+  B80E 46 01
142+  B810 CD 54 A7         call sprites_scadd  ; get the memory of the coords into de
143+  B813 14               inc d               ; add 256 to get next row
144+  B814 1A               ld a,(de)           ; get the contents of the next row
145+  B815 FE 00            cp 0
146+  B817 C2 70 B8         jp nz,rocks_fall3    ; move the rock if the row is empty
147+  B81A 0C               inc c               ; increment the vertical
148+  B81B DD 71 00 DD      ld (ix),bc          ; store the new coords
148+  B81F 70 01
149+  B821 79               ld a,c              ; get the vertical coord into a
150+  B822 E6 07            and 7               ; divisible by 8?
151+  B824 FE 00            cp 0
152+  B826 C2 41 B8         jp nz,rocks_fall4   ; if not, carry on
153+  B829 CD B4 A6         call screen_getattraddressfromscreencoords ; get the attr address into de
154+  B82C 62 6B            ld hl,de
155+  B82E 36 42            ld (hl),66          ; load this square with the yellow colour
156+  B830 DD 4E 00 DD      ld bc,(ix)
156+  B834 46 01
157+  B836 79               ld a,c              ; get vertical
158+  B837 D6 08            sub 8               ; look up one square
159+  B839 4F               ld c,a              ; put a back in c
160+  B83A CD B4 A6         call screen_getattraddressfromscreencoords ; get the attr address into de
161+  B83D 62 6B            ld hl,de
162+  B83F 36 46            ld (hl),70          ; load this square with the yellow colour
163+  B841              rocks_fall4:
164+  B841 08               ex af,af'
165+  B842 3D               dec a
166+  B843 FE 00            cp 0
167+  B845 C2 09 B8         jp nz,rocks_fall1   ; do another pixel if needed
168+  B848              rocks_fall2:
169+  B848 3E 09            ld a,9              ; rock graphic
170+  B84A ED 4B 76 B7      ld bc,(rocks_tmp2)  ; get the original coords
171+  B84E CD EF A6         call screen_getblock     ; get the memory into hl
172+  B851 CD 11 A7         call sprites_drawsprite  ; draw the sprite - over the top of the current one
173+  B854 3E 09            ld a,9
174+  B856 DD 4E 00 DD      ld bc,(ix)          ; get the new coords
174+  B85A 46 01
175+  B85C CD EF A6         call screen_getblock     ; get the memory into hl
176+  B85F CD 11 A7         call sprites_drawsprite  ; draw the sprite - over the top of the current one
177+  B862 DD 4E 00 DD      ld bc,(ix)          ; get the coords again
177+  B866 46 01
178+  B868 CD 85 B8         call rocks_checkforplayer ; check to see if we hit a player
179+  B86B DD 23            inc ix
180+  B86D DD 23            inc ix                  ; get ix back to state
181+  B86F C9               ret
182+  B870              rocks_fall3:
183+  B870 3E 00            ld a,0              ; set the state to fell
184+  B872 DD 77 02         ld (ix+2),a           ; store the falling state
185+  B875 DD 4E 00 DD      ld bc,(ix)          ; get the coords
185+  B879 46 01
186+  B87B CD B4 A6         call screen_getattraddressfromscreencoords ; get the attr address into de
187+  B87E 62 6B            ld hl,de
188+  B880 36 42            ld (hl),66
189+  B882 C3 48 B8         jp rocks_fall2      ; rejoin main loop
190+  B885
191+  B885              ;
192+  B885              ; Checks to see if the rock is hitting a player
193+  B885              ; Inputs:
194+  B885              ; bc - coords of rock we're checking
195+  B885              rocks_checkforplayer:
196+  B885 ED 5B A5 B4      ld de,(player)       ; get the player coords
197+  B889 7B               ld a,e               ; get the vert coord first
198+  B88A 91               sub c                ; subtract the rock vertical coord from players
199+  B88B FE 08            cp 8                 ; the rock will only hit a player if the player is directly underneath, so this must be 8
200+  B88D C0               ret nz               ; if not, hasn't hit
201+  B88E 7A               ld a,d               ; get the player horiz coord
202+  B88F 90               sub b                ; subtract rock coord
203+  B890 C6 07            add 7                ; add max distance
204+  B892 FE 0D            cp 13                ; compare to 13? if carry flag set, they've hit
205+  B894 DC 14 B5         call c, player_crushplayer ; if so, jump out
206+  B897 C9               ret
207+  B898
208+  B898              ;
209+  B898              ; Wobbles a rocks
210+  B898              ; Inputs:
211+  B898              ; bc - coord of current rock graphic on screen
212+  B898              ; ix - memory location of current rock in rock list, currently at the 4th position (wobble count)
213+  B898              ; a - wobble frame
214+  B898              rocks_wobble:
215+  B898 3A 75 B7         ld a,(rocks_tmp)    ; get the frame toggle
216+  B89B 1E 09            ld e,9              ; this is the rock frame
217+  B89D 83               add a,e             ; add the frame toggle
218+  B89E C5               push bc
219+  B89F CD EF A6         call screen_getblock     ; get the memory into hl
220+  B8A2 CD 11 A7         call sprites_drawsprite  ; draw the sprite - over the top of the current one
221+  B8A5 3A 75 B7         ld a,(rocks_tmp)    ; get the frame toggle against
222+  B8A8 EE 01            xor 1               ; flip to other state
223+  B8AA 32 75 B7         ld (rocks_tmp),a    ; store
224+  B8AD 1E 09            ld e,9              ; this is the rock frame
225+  B8AF 83               add a,e             ; add the frame toggle
226+  B8B0 CD EF A6         call screen_getblock     ; get the memory into hl
227+  B8B3 C1               pop bc
228+  B8B4 CD 11 A7         call sprites_drawsprite  ; draw the sprite again with the new frame - next time it will do the opposite
229+  B8B7 DD 7E 00         ld a,(ix)           ; get the wobble count back
230+  B8BA 3D               dec a               ; decrease
231+  B8BB DD 77 00         ld (ix),a           ; store
232+  B8BE FE 00            cp 0
233+  B8C0 C0               ret nz              ; if we're not at zero, return
234+  B8C1 DD 2B            dec ix              ; otherwise look to state location
235+  B8C3 3E 01            ld a,1              ; set the state to falling
236+  B8C5 DD 77 00         ld (ix),a           ; store the falling state
237+  B8C8 DD 23            inc ix              ; set ix back to location of wobble count, and we're done
238+  B8CA C9               ret
239+  B8CB
# file closed: game/rocks.asm
 40   B8CB                  include "game\scores.asm"
# file opened: game/scores.asm
  1+  B8CB              ;
  2+  B8CB              ; The score of the current player
  3+  B8CB              ;
  4+  B8CB              scores_current:
  5+  B8CB 30 30 30 30      defb '000000'
  5+  B8CF 30 30
  6+  B8D1
  7+  B8D1              ;
  8+  B8D1              ; The current high score table
  9+  B8D1              ;
 10+  B8D1              scores_table:
 11+  B8D1 03 17 47 41      defb 3,23,'GAM',255
 11+  B8D5 4D FF
 12+  B8D7 06 17 30 30      defb 6,23,'00000 ',255
 12+  B8DB 30 30 30 20
 12+  B8DF FF
 13+  B8E0 0C 17 47 41      defb 12,23,'GAM',255
 13+  B8E4 4D FF
 14+  B8E6 0F 17 30 30      defb 15,23,'00000 ',255
 14+  B8EA 30 30 30 20
 14+  B8EE FF
 15+  B8EF 15 17 47 41      defb 21,23,'GAM',255
 15+  B8F3 4D FF
 16+  B8F5 18 17 30 30      defb 24,23,'00000 ',255
 16+  B8F9 30 30 30 20
 16+  B8FD FF
 17+  B8FE
 18+  B8FE              ;
 19+  B8FE              ; Displays the high score table at the bottom of the screen
 20+  B8FE              ;
 21+  B8FE              scores_showtable:
 22+  B8FE 21 D1 B8         ld hl, scores_table
 23+  B901 CD 3F 83         call string_print
 24+  B904 21 D7 B8         ld hl, scores_table+6
 25+  B907 CD 3F 83         call string_print
 26+  B90A 21 E0 B8         ld hl, scores_table+15
 27+  B90D CD 3F 83         call string_print
 28+  B910 21 E6 B8         ld hl, scores_table+21
 29+  B913 CD 3F 83         call string_print
 30+  B916 21 EF B8         ld hl, scores_table+30
 31+  B919 CD 3F 83         call string_print
 32+  B91C 21 F5 B8         ld hl, scores_table+36
 33+  B91F CD 3F 83         call string_print
 34+  B922 C9               ret
# file closed: game/scores.asm
 41   B923                  include "game\diamonds.asm"
# file opened: game/diamonds.asm
  1+  B923              ;
  2+  B923              ; Changes the attribute of gem and diamond cells based on the frame count
  3+  B923              ; Inputs:
  4+  B923              ; hl - memory location of gem type
  5+  B923              diamonds_twinkle_type:
  6+  B923 CD 9B B4         call game_getcurrentframe       ; get current frame number
  7+  B926 E6 07            and 7                           ; want a number from 0-7
  8+  B928 C6 40            add 64                          ; add to 60 to get attr colour
  9+  B92A              diamonds_twinkle_type0:
 10+  B92A 4E 23 46 2B      ld bc,(hl)                      ; get coords into bc
 11+  B92E 08               ex af, af'
 12+  B92F 79               ld a,c                          ; load c into a
 13+  B930 FE FF            cp 255                          ; is this the end?
 14+  B932 CA 4F B9         jp z,diamonds_twinkle_type1           ; step out if so
 15+  B935 23               inc hl
 16+  B936 23               inc hl
 17+  B937 7E               ld a,(hl)                       ; check the state, don't process if collected
 18+  B938 FE 01            cp 1
 19+  B93A CA 50 B9         jp z,diamonds_twinkle_type2           ; step out if so
 20+  B93D CD 6C B9         call diamonds_checkforplayer    ; check to see if we've collided with player
 21+  B940 DC 57 B9         call c,diamonds_collect     ; we collided
 22+  B943 23               inc hl
 23+  B944 08               ex af,af'
 24+  B945 5E 23 56 2B      ld de,(hl)                      ; get the memory location into de
 25+  B949 12               ld (de),a                       ; set the value of attr
 26+  B94A 23               inc hl
 27+  B94B 23               inc hl                          ; move to next diamond
 28+  B94C C3 2A B9         jp diamonds_twinkle_type0
 29+  B94F              diamonds_twinkle_type1:
 30+  B94F C9               ret
 31+  B950              diamonds_twinkle_type2:
 32+  B950 23               inc hl                          ; do stuff the we would have done anyway to get to next gem
 33+  B951 23               inc hl
 34+  B952 23               inc hl
 35+  B953 08               ex af,af'
 36+  B954 C3 2A B9         jp diamonds_twinkle_type0       ; rejoin main loop
 37+  B957
 38+  B957              ;
 39+  B957              ; Collect the diamond we collided with
 40+  B957              ; Inputs:
 41+  B957              ; hl - memory location of current diamond, currently on state
 42+  B957              ; Output:
 43+  B957              ; a - 70 - for yellow on black
 44+  B957              diamonds_collect:
 45+  B957 36 01            ld (hl),1                       ; collected
 46+  B959 E5               push hl
 47+  B95A 2B               dec hl
 48+  B95B 2B               dec hl
 49+  B95C 4E 23 46 2B      ld bc,(hl)                      ; get the coords
 50+  B960 21 12 AF         ld hl,sprites
 51+  B963 CD D5 A6         call screen_showchar
 52+  B966 E1               pop hl
 53+  B967 08               ex af,af'
 54+  B968 3E 46            ld a,70
 55+  B96A 08               ex af,af'                       ; make sure a is in the af we'll use for the attr
 56+  B96B C9               ret
 57+  B96C
 58+  B96C              ;
 59+  B96C              ; Checks to see if the gem is hitting a player
 60+  B96C              ; Inputs:
 61+  B96C              ; bc - coords of diamond we're checking
 62+  B96C              diamonds_checkforplayer:
 63+  B96C 78               ld a,b               ; multiply b by 8
 64+  B96D 07               rlca
 65+  B96E 07               rlca
 66+  B96F 07               rlca
 67+  B970 47               ld b,a
 68+  B971 ED 5B A5 B4      ld de,(player)       ; get the player coords
 69+  B975 7B               ld a,e               ; get the vert coord first
 70+  B976 90               sub b                ; subtract the diamond vertical coord from players
 71+  B977 C6 09            add 9                ; add the max distance
 72+  B979 FE 0D            cp 13                ; compare to 13? if carry flag set, they've hit
 73+  B97B D0               ret nc               ; if not, hasn't hit
 74+  B97C 79               ld a,c               ; multiply c by 8
 75+  B97D 07               rlca
 76+  B97E 07               rlca
 77+  B97F 07               rlca
 78+  B980 4F               ld c,a
 79+  B981 7A               ld a,d               ; get the player horiz coord
 80+  B982 91               sub c                ; subtract rock coord
 81+  B983 C6 09            add 9                ; add max distance
 82+  B985 FE 0D            cp 13                ; compare to 13? if carry flag set, they've hit
 83+  B987 C9               ret
 84+  B988
 85+  B988
 86+  B988              ;
 87+  B988              ; Initialise diamonds and gems
 88+  B988              ;
 89+  B988              diamonds_twinkle
 90+  B988 21 8D AE         ld hl, level01diamonds
 91+  B98B CD 23 B9         call diamonds_twinkle_type
 92+  B98E 21 9D AE         ld hl, level01gems
 93+  B991 CD 23 B9         call diamonds_twinkle_type
 94+  B994 C9               ret
 95+  B995
 96+  B995              ;
 97+  B995              ; Initialise diamonds and gems
 98+  B995              ;
 99+  B995              diamonds_init:
100+  B995 21 8D AE         ld hl, level01diamonds
101+  B998 CD A2 B9         call diamonds_init_type
102+  B99B 21 9D AE         ld hl, level01gems
103+  B99E CD A2 B9         call diamonds_init_type
104+  B9A1 C9               ret
105+  B9A2
106+  B9A2              ;
107+  B9A2              ; Initialise diamonds or gems, get memory addresses
108+  B9A2              ; Inputs:
109+  B9A2              ; hl - memory location
110+  B9A2              diamonds_init_type:
111+  B9A2 4E               ld c,(hl)                      ; get coords into c
112+  B9A3 79               ld a,c                          ; load c into add
113+  B9A4 FE FF            cp 255                          ; is this the end?
114+  B9A6 CA BD B9         jp z,diamonds_init_type1             ; step out if so
115+  B9A9 23               inc hl
116+  B9AA 46               ld b,(hl)                       ; get coords into b
117+  B9AB E5               push hl
118+  B9AC CD 84 A6         call screen_getcellattradress ; get memory of attr for this diamond into de
119+  B9AF E1               pop hl
120+  B9B0 23               inc hl                          ; move to state
121+  B9B1 36 00            ld (hl),0
122+  B9B3 23               inc hl                          ; move to memory
123+  B9B4 73 23 72 2B      ld (hl),de                      ; store the memory location
124+  B9B8 23               inc hl                          ; move to next diamond
125+  B9B9 23               inc hl
126+  B9BA C3 A2 B9         jp diamonds_init_type
127+  B9BD              diamonds_init_type1:
128+  B9BD C9               ret
# file closed: game/diamonds.asm
 42   B9BE
 43   B9BE              ;===========================================================================
 44   B9BE              ; main routine - the code execution starts here.
 45   B9BE              ; Sets up the new interrupt routine, the memory
 46   B9BE              ; banks and jumps to the start loop.
 47   B9BE              ;===========================================================================
 48   B9BE              main:
 49   B9BE
 50   B9BE                  ; Setup stack
 51   B9BE 31 E7 BA         ld sp,stack_top
 52   B9C1
 53   B9C1                  ; Draw the title screen
 54   B9C1              main_titlescreen:
 55   B9C1 CD 7A A7         call titlescreen_show
 56   B9C4 CD B8 B4         call player_init_gamestart
 57   B9C7
 58   B9C7              main_lifestart:
 59   B9C7
 60   B9C7 CD C2 B4         call player_init_lifestart
 61   B9CA
 62   B9CA CD DE A8         call lifescreen_draw        ; show the lives remaining screen
 63   B9CD
 64   B9CD CD 00 80         call init_start
 65   B9D0 CD A7 A5         call screen_draw
 66   B9D3 CD 05 A5         call buffer_allbuffertoscreen
 67   B9D6
 68   B9D6 CD C8 B5         call ship_land              ; land the ship
 69   B9D9 CD B8 B6         call tank_init
 70   B9DC CD 95 B9         call diamonds_init
 71   B9DF              mloop:
 72   B9DF 76               halt
 73   B9E0 CD FB B9         call main_loop_processing
 74   B9E3
 75   B9E3 21 AF B4         ld hl,player+10
 76   B9E6 7E               ld a,(hl)                   ; check if the player died this frame
 77   B9E7 FE 01            cp 1
 78   B9E9 C2 DF B9         jp nz,mloop
 79   B9EC CD F6 B4         call player_died        ; do end of life housekeeping
 80   B9EF 21 AE B4         ld hl,player+9        ; check lives remaining
 81   B9F2 7E               ld a,(hl)
 82   B9F3 FE 00            cp 0
 83   B9F5 CA 17 BA         jp z,main_gameover   ; leave the loop if we're done
 84   B9F8 C3 C7 B9         jp main_lifestart
 85   B9FB
 86   B9FB              main_loop_processing:
 87   B9FB CD D3 A4         call buffer_buffertoscreen  ; copy buffer to screen
 88   B9FE CD 53 A4         call buffer_clearlist       ; zero the updated lines list
 89   BA01 CD 1A B5         call player_drawplayer      ; delete player
 90   BA04 CD A1 B0         call control_keyboard       ; check keyboard
 91   BA07 CD 1A B5         call player_drawplayer      ; draw player
 92   BA0A CD CB B6         call tank_process           ; prcoess the tank
 93   BA0D CD A8 B7         call rocks_processrocks     ; process falling rocks
 94   BA10 CD 88 B9         call diamonds_twinkle       ; make the diamonds twinkle
 95   BA13
 96   BA13 CD 8C B4         call game_incrementframe    ; increment the game frame
 97   BA16
 98   BA16 C9               ret
 99   BA17
100   BA17              main_gameover:
101   BA17 CD 31 A9         call gameover_draw          ; show the game over screen
102   BA1A C3 C1 B9         jp main_titlescreen         ; go back to title
103   BA1D
104   BA1D              ;===========================================================================
105   BA1D              ; Stack.
106   BA1D              ;===========================================================================
107   BA1D
108   BA1D              ; Stack: this area is reserved for the stack
109   BA1D              STACK_SIZE: equ 100    ; in words
110   BA1D
111   BA1D              ; Reserve stack space
112   BA1D 00 00            defw 0  ; WPMEM, 2
113   BA1F              stack_bottom:
114   BA1F 00 00 00...      defs    STACK_SIZE*2, 0
115   BAE7              stack_top:
116   BAE7 00 00            defw 0  ; WPMEM, 2
117   BAE9
118   BAE9                     SAVESNA "ThePit.sna", main
# file closed: main.asm
