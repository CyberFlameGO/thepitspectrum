# file opened: main.asm
  1   0000                  DEVICE ZXSPECTRUM48
  2   0000
  3   0000                  ORG $8000
  4   8000
  5   8000              ;===========================================================================
  6   8000              ; Persistent watchpoint.
  7   8000              ; Change WPMEMx (remove the 'x' from WPMEMx) below to activate.
  8   8000              ; If you do so the program will hit a breakpoint when it tries to
  9   8000              ; write to the first byte of the 3rd line.
 10   8000              ; When program breaks in the fill_memory sub routine please hover over hl
 11   8000              ; to see that it contains 0x5804 or COLOR_SCREEN+64.
 12   8000              ;===========================================================================
 13   8000
 14   8000              ; WPMEMx 0x5840, 1, w
 15   8000
 16   8000
 17   8000              ;===========================================================================
 18   8000              ; main routine - the code execution starts here.
 19   8000              ; Sets up the new interrupt routine, the memory
 20   8000              ; banks and jumps to the start loop.
 21   8000              ;===========================================================================
 22   8000              main:
 23   8000 21 59 B8         ld hl,font
 24   8003 22 36 5C         ld (23606),hl
 25   8006 CD 5E B0         call options_show
 26   8009
 27   8009                  ; Draw the title screen
 28   8009              main_titlescreen:
 29   8009 CD 2B AC         call titlescreen_show
 30   800C CD 3D C5         call player_init_gamestart
 31   800F
 32   800F              main_lifestart:
 33   800F
 34   800F CD 63 C5         call player_init_lifestart
 35   8012 CD 72 C4         call game_setcurrentrocks   ; set the current rocks based on the level
 36   8015                  ;ld a,12
 37   8015                  ;ld (game_difficulty),a
 38   8015 CD B2 C4         call game_setdifficulty     ; set the current difficulty
 39   8018
 40   8018 CD C3 AD         call lifescreen_draw        ; show the lives remaining screen
 41   801B
 42   801B CD C6 80         call init_start
 43   801E CD F5 A8         call screen_draw
 44   8021 CD 44 A8         call buffer_allbuffertoscreen
 45   8024
 46   8024 CD 77 CE         call missiles_init
 47   8027 CD 64 C7         call ship_land              ; land the ship
 48   802A CD 83 C8         call tank_init
 49   802D CD 3E CE         call diamonds_init
 50   8030 CD 2F D0         call thepit_init
 51   8033 CD CB D0         call monster_init
 52   8036 CD 1A D2         call robots_init
 53   8039 CD AA D5         call bullet_init
 54   803C
 55   803C              mloop:
 56   803C                  ;halt
 57   803C CD 83 80         call main_loop_processing
 58   803F
 59   803F                  ;
 60   803F                  ; Check if the player died
 61   803F                  ;
 62   803F 21 01 C5         ld hl,player+10
 63   8042 7E               ld a,(hl)                   ; check if the player died this frame
 64   8043 FE 01            cp 1
 65   8045 C2 6F 80         jp nz,mloop0
 66   8048 CD F4 C5         call player_died        ; do end of life housekeeping
 67   804B 06 28            ld b,40
 68   804D CD 61 81         call utilities_pauseforframes
 69   8050
 70   8050 21 00 C5         ld hl,player+9        ; check lives remaining
 71   8053 7E               ld a,(hl)
 72   8054 FE 00            cp 0
 73   8056 C2 69 80         jp nz,mloop1         ; haven't finished, so keep going
 74   8059
 75   8059 3A 07 C4         ld a,(game_numberplayers) ; get the number of players
 76   805C FE 01            cp 1
 77   805E CA B7 80         jp z,main_gameover   ; if just one player, then this is game over
 78   8061
 79   8061 3A 08 C4         ld a,(game_currentplayer) ; get the current player
 80   8064 FE 02            cp 2                    ; if we're here, we have no lives, and if the current player is 2, then we're done
 81   8066 CA B7 80         jp z,main_gameover            ; if it's  two game over
 82   8069
 83   8069              mloop1:
 84   8069 CD 56 C4         call game_changeplayer ; change player if needed
 85   806C C3 0F 80         jp main_lifestart    ; otherwise, start a new life
 86   806F              mloop0:
 87   806F                  ;
 88   806F                  ; Check if the player completed the level
 89   806F                  ;
 90   806F 21 04 C5         ld hl,player+13
 91   8072 7E               ld a,(hl)
 92   8073 FE 01            cp 1
 93   8075 C2 3C 80         jp nz,mloop
 94   8078 CD 2E C7         call player_checkforexit
 95   807B FE 01            cp 1                        ; look at return, if 1, level has been completed
 96   807D CA BD 80         jp z,main_endlevel          ; jump to level transition screen
 97   8080 C3 3C 80         jp mloop                ; start the loop again
 98   8083
 99   8083
100   8083              main_loop_processing:
101   8083
102   8083 CD 03 A8         call buffer_buffertoscreen  ; copy buffer to screen
103   8086 CD 68 A7         call buffer_clearlist       ; zero the updated lines list
104   8089 CD 07 C5         call player_getlocation     ; figure out where the player is
105   808C CD 38 C6         call player_drawplayer      ; delete player
106   808F CD FD BE         call control_input          ; check input
107   8092 CD 38 C6         call player_drawplayer      ; draw player
108   8095 CD B2 C8         call tank_process           ; prcoess the tank
109   8098 CD 4F C7         call ship_process           ; proces the ship
110   809B CD BC CA         call rocks_processrocks     ; process falling rocks
111   809E CD 3B D0         call thepit_process         ; process the pit trap
112   80A1 CD 9F CE         call missiles_process       ; process missiles
113   80A4 CD E8 D0         call monster_process        ; process monster
114   80A7 CD 9D D2         call robots_process         ; process robots
115   80AA CD F1 D5         call bullet_process         ; process the bullet
116   80AD CD 1D CE         call diamonds_twinkle       ; make the diamonds twinkle
117   80B0 CD 2F CC         call scores_printscore      ; update the score on screen
118   80B3 CD 92 C4         call game_incrementframe    ; increment the game frame
119   80B6
120   80B6 C9               ret
121   80B7
122   80B7              main_gameover:
123   80B7 CD 23 AE         call gameover_draw          ; show the game over screen
124   80BA C3 09 80         jp main_titlescreen         ; go back to title
125   80BD
126   80BD              main_endlevel:
127   80BD CD C2 C5         call player_recordcurrentstate
128   80C0 CD 53 AF         call endlevel_draw          ; show the end level screen
129   80C3 C3 0F 80         jp main_lifestart           ; start a new life
130   80C6
131   80C6
132   80C6              ;===========================================================================
133   80C6              ; Include modules
134   80C6              ;===========================================================================
135   80C6                  include "init.asm"
# file opened: init.asm
  1+  80C6              ;
  2+  80C6              ; Set up at start up
  3+  80C6              ;
  4+  80C6              init_start:
  5+  80C6              ; We want a black screen.
  6+  80C6
  7+  80C6 3E 47            ld a,71             ; white ink (7) on black paper (0),
  8+  80C8                                      ; bright (64).
  9+  80C8 CD 46 81         call utilities_clearscreen
 10+  80CB 32 8D 5C         ld (23693),a        ; set our screen colours.
 11+  80CE AF               xor a               ; quick way to load accumulator with zero.
 12+  80CF CD 9B 22         call 8859           ; set permanent border colours.
 13+  80D2
 14+  80D2 21 DA A8         ld hl,screen_offset ; reset some temp variables
 15+  80D5 36 00            ld (hl),0
 16+  80D7 21 DB A8         ld hl,screen_tmp
 17+  80DA 36 00            ld (hl),0
 18+  80DC 21 10 A7         ld hl,buffer_tmp
 19+  80DF 36 00            ld (hl),0
 20+  80E1 23               inc hl
 21+  80E2 36 00            ld (hl),0
 22+  80E4
 23+  80E4 CD A5 C4         call game_resetcurrentframe ; reset current frame
 24+  80E7
 25+  80E7 C9               ret
 26+  80E8
 27+  80E8              ;
 28+  80E8              ;   Start coord
 29+  80E8              ;   vert c, horiz b
 30+  80E8              init_coord:
 31+  80E8 18 30            defb 24,48
 32+  80EA
 33+  80EA              ;
 34+  80EA              ; Number of lives to start
 35+  80EA              ;
 36+  80EA              init_lives:
 37+  80EA 03               defb 3
 38+  80EB
 39+  80EB              ;
 40+  80EB              ; Score to start
 41+  80EB              ;
 42+  80EB              init_score:
 43+  80EB 30 30 30 30      defb '000000'
 43+  80EF 30 30
# file closed: init.asm
136   80F1                  include "utilities.asm"
# file opened: utilities.asm
  1+  80F1              ; ##########################################################################
  2+  80F1              ; Print a character
  3+  80F1              ; Inputs:
  4+  80F1              ; b - x coord
  5+  80F1              ; c - y coord
  6+  80F1              ; d - character
  7+  80F1              ; e - colour
  8+  80F1              ; ##########################################################################
  9+  80F1              utilities_print_char:
 10+  80F1 7B               ld a,e
 11+  80F2 32 8F 5C         ld (23695),a        ; set our temporary screen colours.
 12+  80F5 3E 16            ld a,22
 13+  80F7 D7               rst 16              ; Calls the Sinclair PRINT AT routine
 14+  80F8 78               ld a,b              ; Gets the X co-ordinate
 15+  80F9 3D               dec a
 16+  80FA D7               rst 16
 17+  80FB 79               ld a,c              ; and the Y co-ordinate
 18+  80FC D7               rst 16              ; So, essentially PRINT AT X,Y; like in BASIC
 19+  80FD 7A               ld a,d              ; ASCII code for udg.
 20+  80FE D7               rst 16              ; draw block.
 21+  80FF C9               ret
 22+  8100
 23+  8100
 24+  8100              ;Inputs:
 25+  8100              ;     DE and A are factors
 26+  8100              ;Outputs:
 27+  8100              ;     A is not changed
 28+  8100              ;     B is 0
 29+  8100              ;     C is not changed
 30+  8100              ;     DE is not changed
 31+  8100              ;     HL is the product
 32+  8100              ;Time:
 33+  8100              ;     342+6x
 34+  8100              ;
 35+  8100              utilities_multiply:
 36+  8100 06 08            ld b,8          ;7           7
 37+  8102 21 00 00         ld hl,0         ;10         10
 38+  8105 29               add hl,hl     ;11*8       88
 39+  8106 07               rlca          ;4*8        32
 40+  8107 30 01            jr nc,$+3     ;(12|18)*8  96+6x
 41+  8109 19                   add hl,de   ;--         --
 42+  810A 10 F9            djnz $-5      ;13*7+8     99
 43+  810C C9               ret             ;10         10
 44+  810D
 45+  810D              utilities_waitforkey:
 46+  810D 21 08 5C         ld hl,23560         ; LAST K system variable.
 47+  8110 36 00            ld (hl),0           ; put null value there.
 48+  8112              utilities_waitforkey0:
 49+  8112 7E               ld a,(hl)           ; new value of LAST K.
 50+  8113 FE 00            cp 0                ; is it still zero?
 51+  8115 20 0A            jr nz,utilities_waitforkey1           ; yes, so no key pressed.
 52+  8117 01 1F 00         ld bc,31                        ; Kempston joystick port.
 53+  811A ED 78            in a,(c)                        ; read input.
 54+  811C E6 10            and 16
 55+  811E CA 12 81         jp z,utilities_waitforkey0
 56+  8121              utilities_waitforkey1:
 57+  8121 C9               ret                 ; key was pressed.
 58+  8122
 59+  8122              ;
 60+  8122              ; Waits number of frames for keypress. If got, returns 1, if not 0
 61+  8122              ; Inputs:
 62+  8122              ; a - number of frames to waits
 63+  8122              ; Ouputs:
 64+  8122              ; e - 0 not pressed, 1 pressed
 65+  8122              utilities_waitforkey_forframes:
 66+  8122 21 08 5C         ld hl,23560         ; LAST K system variable.
 67+  8125 36 00            ld (hl),0           ; put null value there.
 68+  8127 47               ld b,a              ; number of frames to wait
 69+  8128              utilities_waitforkey_forframes0:
 70+  8128 7E               ld a,(hl)           ; new value of LAST K.
 71+  8129 FE 00            cp 0                ; is it still zero?
 72+  812B 28 03            jr z,utilities_waitforkey_forframes1           ; yes, so no key pressed.
 73+  812D 1E 01            ld e,1              ; set the pressed flag
 74+  812F C9               ret                 ; key was pressed.
 75+  8130              utilities_waitforkey_forframes1:
 76+  8130 C5               push bc
 77+  8131 01 1F 00         ld bc,31                        ; Kempston joystick port.
 78+  8134 ED 78            in a,(c)                        ; read input.
 79+  8136 C1               pop bc
 80+  8137 E6 10            and 16
 81+  8139 CA 3F 81         jp z,utilities_waitforkey_forframes2
 82+  813C 1E 01            ld e,1              ; set the pressed flag
 83+  813E C9               ret                 ; key was pressed.
 84+  813F              utilities_waitforkey_forframes2:
 85+  813F 76               halt                ; wait for frame
 86+  8140 76               halt                ; wait for frame
 87+  8141 10 E5            djnz utilities_waitforkey_forframes0 ; loop again
 88+  8143 1E 00            ld e,0              ; nothing pressed in time
 89+  8145 C9               ret
 90+  8146
 91+  8146              ;
 92+  8146              ; Clears the screen
 93+  8146              ; Inputs:
 94+  8146              ; a - attribute colour
 95+  8146              utilities_clearscreen:
 96+  8146 76               halt
 97+  8147 21 00 58         ld hl,22528         ; attr
 98+  814A 11 01 58         ld de,22529         ; attr+1
 99+  814D 01 FF 02         ld bc,767
100+  8150 77               ld (hl),a
101+  8151 ED B0            ldir
102+  8153
103+  8153 21 00 40         ld hl, 16384        ;pixels
104+  8156 11 01 40         ld de, 16385        ;pixels + 1
105+  8159 01 FF 17         ld bc, 6143         ;pixels area length - 1
106+  815C 36 00            ld (hl), 0          ;set first byte to '0'
107+  815E ED B0            ldir                ;copy bytes
108+  8160
109+  8160 C9               ret
110+  8161
111+  8161              ;
112+  8161              ; Wait for a number of frames
113+  8161              ; Inputs:
114+  8161              ; b - number of frames
115+  8161              utilities_pauseforframes:
116+  8161 76               halt
117+  8162 10 FD            djnz utilities_pauseforframes
118+  8164 C9               ret
119+  8165
120+  8165              utilities_readkey:
121+  8165 21 85 81         LD HL,utilties_keymap              ; Point HL at the keyboard list
122+  8168 16 08            LD D,8                                  ; This is the number of ports (rows) to check
123+  816A 0E FE            LD C,$FE                            ; C is always FEh for reading keyboard ports
124+  816C              utilities_readkey_0:
125+  816C 46               LD B,(HL)                               ; Get the keyboard port address from table
126+  816D 23               INC HL                                  ; Increment to list of keys
127+  816E ED 78            IN A,(C)                                ; Read the row of keys in
128+  8170 E6 1F            AND $1F                                     ; We are only interested in the first five bits
129+  8172 1E 05            LD E,5                                  ; This is the number of keys in the row
130+  8174              utilities_readkey_1:
131+  8174 CB 3F            SRL A                                   ; Shift A right; bit 0 sets carry bit
132+  8176 30 0B            JR NC,utilities_readkey_2   ; If the bit is 0, we've found our key
133+  8178 23               INC HL                                  ; Go to next table address
134+  8179 1D               DEC E                                   ; Decrement key loop counter
135+  817A 20 F8            JR NZ,utilities_readkey_1   ; Loop around until this row finished
136+  817C 15               DEC D                                   ; Decrement row loop counter
137+  817D 20 ED            JR NZ,utilities_readkey_0   ; Loop around until we are done
138+  817F A7               AND A                                   ; Clear A (no key found)
139+  8180 C3 65 81         jp utilities_readkey
140+  8183              utilities_readkey_2:
141+  8183 7E               LD A,(HL)                               ; We've found a key at this point; fetch the character code!
142+  8184 C9               RET
143+  8185
144+  8185              utilties_keymap:
145+  8185 FE 23 5A 58      defb $FE,"#","Z","X","C","V"
145+  8189 43 56
146+  818B FD 41 53 44      defb $FD,"A","S","D","F","G"
146+  818F 46 47
147+  8191 FB 51 57 45      defb $FB,"Q","W","E","R","T"
147+  8195 52 54
148+  8197 F7 31 32 33      defb $F7,"1","2","3","4","5"
148+  819B 34 35
149+  819D EF 30 39 38      defb $EF,"0","9","8","7","6"
149+  81A1 37 36
150+  81A3 DF 50 4F 49      defb $DF,"P","O","I","U","Y"
150+  81A7 55 59
151+  81A9 BF 23 4C 4B      defb $BF,"#","L","K","J","H"
151+  81AD 4A 48
152+  81AF 7F 20 23 4D      defb $7F," ","#","M","N","B"
152+  81B3 4E 42
153+  81B5
154+  81B5
155+  81B5              ;
156+  81B5              ; Generates a randomish number in the range 0 to e
157+  81B5              ; Inputs:
158+  81B5              ; e - upper value
159+  81B5              ; Outputs:
160+  81B5              ; a - random number
161+  81B5              utilities_randomupper
162+  81B5 3A 06 C4         ld a,(game_framenumber)
163+  81B8 6F               ld l,a
164+  81B9 26 00            ld h,0
165+  81BB 16 00            ld d,0
166+  81BD 42 4B            ld bc,de
167+  81BF              utilities_randomupper0:
168+  81BF B7               or a
169+  81C0 ED 42            sbc hl,bc
170+  81C2 F2 BF 81         jp p,utilities_randomupper0
171+  81C5 09               add hl,bc
172+  81C6 01 00 00         ld bc,0
173+  81C9 09               add hl,bc
174+  81CA 7D               ld a,l
175+  81CB C9               ret
176+  81CC
# file closed: utilities.asm
137   81CC                  include "strings.asm"
# file opened: strings.asm
  1+  81CC              string_score1:
  2+  81CC 04 00 53 43      defb 4,0,'SCORE1',255
  2+  81D0 4F 52 45 31
  2+  81D4 FF
  3+  81D5              string_scorenumbers1:
  4+  81D5 04 01 30 30      defb 4,1,'000000',255
  4+  81D9 30 30 30 30
  4+  81DD FF
  5+  81DE              string_company:
  6+  81DE 0C 00 43 45      defb 12,0,'CENTURI',255
  6+  81E2 4E 54 55 52
  6+  81E6 49 FF
  7+  81E8              string_player1:
  8+  81E8 0C 01 50 4C      defb 12,1,'PLAYER 1',255
  8+  81EC 41 59 45 52
  8+  81F0 20 31 FF
  9+  81F3              string_player2:
 10+  81F3 0C 01 50 4C      defb 12,1,'PLAYER 2',255
 10+  81F7 41 59 45 52
 10+  81FB 20 32 FF
 11+  81FE              string_score2:
 12+  81FE 16 00 53 43      defb 22,0,'SCORE2',255
 12+  8202 4F 52 45 32
 12+  8206 FF
 13+  8207              string_scorenumbers2:
 14+  8207 16 01 30 30      defb 22,1,'000000',255
 14+  820B 30 30 30 30
 14+  820F FF
 15+  8210              string_titlescreen_copyright:
 16+  8210 06 15 7F 31      defb 6,21, 127,'1982  CENTURI INC',255
 16+  8214 39 38 32 20
 16+  8218 20 43 45 4E
 16+  821C 54 55 52 49
 16+  8220 20 49 4E 43
 16+  8224 FF
 17+  8225
 18+  8225
 19+  8225              string_alttitlescreen_1:
 20+  8225 0C 00 43 52      defb 12,0,'CREDITS 1',255
 20+  8229 45 44 49 54
 20+  822D 53 20 31 FF
 21+  8231              string_alttitlescreen_2:
 22+  8231 00 02 20 20      defb 0,2,'           THE OBJECT',254
 22+  8235 20 20 20 20
 22+  8239 20 20 20 20
 22+  823D 20 54 48 45
 22+  8241 20 4F 42 4A
 22+  8245 45 43 54 FE
 23+  8249 00 03 20 20      defb 0,3,'          OF THIS GAME',254
 23+  824D 20 20 20 20
 23+  8251 20 20 20 20
 23+  8255 4F 46 20 54
 23+  8259 48 49 53 20
 23+  825D 47 41 4D 45
 23+  8261 FE
 24+  8262 00 04 20 20      defb 0,4,'         IS TO DIG DOWN',254
 24+  8266 20 20 20 20
 24+  826A 20 20 20 49
 24+  826E 53 20 54 4F
 24+  8272 20 44 49 47
 24+  8276 20 44 4F 57
 24+  827A 4E FE
 25+  827C 00 05 20 20      defb 0,5,'        TO THE BOTTOM PIT',254
 25+  8280 20 20 20 20
 25+  8284 20 20 54 4F
 25+  8288 20 54 48 45
 25+  828C 20 42 4F 54
 25+  8290 54 4F 4D 20
 25+  8294 50 49 54 FE
 26+  8298 00 06 20 20      defb 0,6,'               AND',254
 26+  829C 20 20 20 20
 26+  82A0 20 20 20 20
 26+  82A4 20 20 20 20
 26+  82A8 20 41 4E 44
 26+  82AC FE
 27+  82AD 00 07 20 20      defb 0,7,'        COLLECT AT LEAST',254
 27+  82B1 20 20 20 20
 27+  82B5 20 20 43 4F
 27+  82B9 4C 4C 45 43
 27+  82BD 54 20 41 54
 27+  82C1 20 4C 45 41
 27+  82C5 53 54 FE
 28+  82C8 00 08 20 20      defb 0,8,'         ONE LARGE JEWEL',254
 28+  82CC 20 20 20 20
 28+  82D0 20 20 20 4F
 28+  82D4 4E 45 20 4C
 28+  82D8 41 52 47 45
 28+  82DC 20 4A 45 57
 28+  82E0 45 4C FE
 29+  82E3 00 09 20 20      defb 0,9,'              THEN',254
 29+  82E7 20 20 20 20
 29+  82EB 20 20 20 20
 29+  82EF 20 20 20 20
 29+  82F3 54 48 45 4E
 29+  82F7 FE
 30+  82F8 00 0A 20 20      defb 0,10,'         RETURN TO SHIP',254
 30+  82FC 20 20 20 20
 30+  8300 20 20 20 52
 30+  8304 45 54 55 52
 30+  8308 4E 20 54 4F
 30+  830C 20 53 48 49
 30+  8310 50 FE
 31+  8312 00 0B 20 20      defb 0,11,'         THRU UPPER PIT',255
 31+  8316 20 20 20 20
 31+  831A 20 20 20 54
 31+  831E 48 52 55 20
 31+  8322 55 50 50 45
 31+  8326 52 20 50 49
 31+  832A 54 FF
 32+  832C              string_alttitlescreen_3:
 33+  832C 00 0D 20 20      defb 0,13,'    SINGLE BONUS  5000 POINTS',254
 33+  8330 20 20 53 49
 33+  8334 4E 47 4C 45
 33+  8338 20 42 4F 4E
 33+  833C 55 53 20 20
 33+  8340 35 30 30 30
 33+  8344 20 50 4F 49
 33+  8348 4E 54 53 FE
 34+  834C 00 0E 20 20      defb 0,14,'      COLLECT 1 LARGE JEWEL',254
 34+  8350 20 20 20 20
 34+  8354 43 4F 4C 4C
 34+  8358 45 43 54 20
 34+  835C 31 20 4C 41
 34+  8360 52 47 45 20
 34+  8364 4A 45 57 45
 34+  8368 4C FE
 35+  836A 00 0F 20 20      defb 0,15,'       AND RETURN TO SHIP',254
 35+  836E 20 20 20 20
 35+  8372 20 41 4E 44
 35+  8376 20 52 45 54
 35+  837A 55 52 4E 20
 35+  837E 54 4F 20 53
 35+  8382 48 49 50 FE
 36+  8386 00 11 20 20      defb 0,17,'    DOUBLE BONUS  10000 POINTS',254
 36+  838A 20 20 44 4F
 36+  838E 55 42 4C 45
 36+  8392 20 42 4F 4E
 36+  8396 55 53 20 20
 36+  839A 31 30 30 30
 36+  839E 30 20 50 4F
 36+  83A2 49 4E 54 53
 36+  83A6 FE
 37+  83A7 00 12 20 20      defb 0,18,'    COLLECT ALL 3 LARGE JEWELS',254
 37+  83AB 20 20 43 4F
 37+  83AF 4C 4C 45 43
 37+  83B3 54 20 41 4C
 37+  83B7 4C 20 33 20
 37+  83BB 4C 41 52 47
 37+  83BF 45 20 4A 45
 37+  83C3 57 45 4C 53
 37+  83C7 FE
 38+  83C8 00 13 20 20      defb 0,19,'       OR   ALL 4 SMALL JEWELS',254
 38+  83CC 20 20 20 20
 38+  83D0 20 4F 52 20
 38+  83D4 20 20 41 4C
 38+  83D8 4C 20 34 20
 38+  83DC 53 4D 41 4C
 38+  83E0 4C 20 4A 45
 38+  83E4 57 45 4C 53
 38+  83E8 FE
 39+  83E9 00 15 20 20      defb 0,21,'    TRIPLE BONUS  15000 POINTS',254
 39+  83ED 20 20 54 52
 39+  83F1 49 50 4C 45
 39+  83F5 20 42 4F 4E
 39+  83F9 55 53 20 20
 39+  83FD 31 35 30 30
 39+  8401 30 20 50 4F
 39+  8405 49 4E 54 53
 39+  8409 FE
 40+  840A 00 16 20 20      defb 0,22,'       COLLECT ALL 7 JEWELS',255
 40+  840E 20 20 20 20
 40+  8412 20 43 4F 4C
 40+  8416 4C 45 43 54
 40+  841A 20 41 4C 4C
 40+  841E 20 37 20 4A
 40+  8422 45 57 45 4C
 40+  8426 53 FF
 41+  8428
 42+  8428              string_lifescreen_player:
 43+  8428 0B 00 20 50      defb 11,0,' PLAYER 1 ',255
 43+  842C 4C 41 59 45
 43+  8430 52 20 31 20
 43+  8434 FF
 44+  8435              string_lifescreen_lives:
 45+  8435 0B 03 30 20      defb 11,3,48,' MEN LEFT',255
 45+  8439 4D 45 4E 20
 45+  843D 4C 45 46 54
 45+  8441 FF
 46+  8442              string_lifescreen_lastman:
 47+  8442 0C 03 4C 41      defb 12,3,'LAST MAN',255
 47+  8446 53 54 20 4D
 47+  844A 41 4E FF
 48+  844D
 49+  844D              string_gameoverscreen_gameover:
 50+  844D 0B 06 47 41      defb 11,6,'GAME OVER',255
 50+  8451 4D 45 20 4F
 50+  8455 56 45 52 FF
 51+  8459              string_gameoverscreen_copyright:
 52+  8459 07 12 7F 31      defb 7,18,127,'1982 CENTURI INC',255
 52+  845D 39 38 32 20
 52+  8461 43 45 4E 54
 52+  8465 55 52 49 20
 52+  8469 49 4E 43 FF
 53+  846D              string_gameoverscreen_bestscores:
 54+  846D 07 16 42 45      defb 7,22,'BEST SCORES TODAY',255
 54+  8471 53 54 20 53
 54+  8475 43 4F 52 45
 54+  8479 53 20 54 4F
 54+  847D 44 41 59 FF
 55+  8481              string_gameover_credits:
 56+  8481 0C 01 43 52      defb 12,1,'CREDITS 0',255
 56+  8485 45 44 49 54
 56+  8489 53 20 30 FF
 57+  848D
 58+  848D              string_highscore_congratulations:
 59+  848D 08 05 43 4F      defb 8,5,'CONGRATULATIONS',255
 59+  8491 4E 47 52 41
 59+  8495 54 55 4C 41
 59+  8499 54 49 4F 4E
 59+  849D 53 FF
 60+  849F              string_highscore_player1:
 61+  849F 0C 07 50 4C      defb 12,7,'PLAYER 1',255
 61+  84A3 41 59 45 52
 61+  84A7 20 31 FF
 62+  84AA              string_highscore_player2:
 63+  84AA 0C 07 50 4C      defb 12,7,'PLAYER 2',255
 63+  84AE 41 59 45 52
 63+  84B2 20 32 FF
 64+  84B5              string_highscore_youhaveearned:
 65+  84B5 08 0A 59 4F      defb 8,10,'YOU HAVE EARNED',255
 65+  84B9 55 20 48 41
 65+  84BD 56 45 20 45
 65+  84C1 41 52 4E 45
 65+  84C5 44 FF
 66+  84C7              string_highscore_place1:
 67+  84C7 06 0C 54 48      defb 6,12,'THE GREATEST SCORE',255
 67+  84CB 45 20 47 52
 67+  84CF 45 41 54 45
 67+  84D3 53 54 20 53
 67+  84D7 43 4F 52 45
 67+  84DB FF
 68+  84DC              string_highscore_place2:
 69+  84DC 06 0C 54 48      defb 6,12,'THE 2ND BEST SCORE',255
 69+  84E0 45 20 32 4E
 69+  84E4 44 20 42 45
 69+  84E8 53 54 20 53
 69+  84EC 43 4F 52 45
 69+  84F0 FF
 70+  84F1              string_highscore_place3:
 71+  84F1 06 0C 54 48      defb 6,12,'THE 3RD BEST SCORE',255
 71+  84F5 45 20 33 52
 71+  84F9 44 20 42 45
 71+  84FD 53 54 20 53
 71+  8501 43 4F 52 45
 71+  8505 FF
 72+  8506              string_highscore_pleaseenter
 73+  8506 03 0F 52 45      defb 3,15,'RECORD YOUR INITIALS BELOW',255
 73+  850A 43 4F 52 44
 73+  850E 20 59 4F 55
 73+  8512 52 20 49 4E
 73+  8516 49 54 49 41
 73+  851A 4C 53 20 42
 73+  851E 45 4C 4F 57
 73+  8522 FF
 74+  8523
 75+  8523              string_endlevel_youhaveearned:
 76+  8523 08 0B 59 4F      defb 8,11,'YOU HAVE EARNED',255
 76+  8527 55 20 48 41
 76+  852B 56 45 20 45
 76+  852F 41 52 4E 45
 76+  8533 44 FF
 77+  8535              string_endlevel_bonus1:
 78+  8535 09 0D 53 49      defb 9,13,'SINGLE BONUS',255
 78+  8539 4E 47 4C 45
 78+  853D 20 42 4F 4E
 78+  8541 55 53 FF
 79+  8544              string_endlevel_bonus2:
 80+  8544 09 0D 44 4F      defb 9,13,'DOUBLE BONUS',255
 80+  8548 55 42 4C 45
 80+  854C 20 42 4F 4E
 80+  8550 55 53 FF
 81+  8553              string_endlevel_bonus3:
 82+  8553 09 0D 54 52      defb 9,13,'TRIPLE BONUS',255
 82+  8557 49 50 4C 45
 82+  855B 20 42 4F 4E
 82+  855F 55 53 FF
 83+  8562              string_endlevel_points1:
 84+  8562 0A 0F 35 30      defb 10,15,'5000 POINTS',255
 84+  8566 30 30 20 50
 84+  856A 4F 49 4E 54
 84+  856E 53 FF
 85+  8570              string_endlevel_points2:
 86+  8570 09 0F 31 30      defb 9,15,'10000 POINTS',255
 86+  8574 30 30 30 20
 86+  8578 50 4F 49 4E
 86+  857C 54 53 FF
 87+  857F              string_endlevel_points3:
 88+  857F 09 0F 31 35      defb 9,15,'15000 POINTS',255
 88+  8583 30 30 30 20
 88+  8587 50 4F 49 4E
 88+  858B 54 53 FF
 89+  858E              string_endlevel_anothergo:
 90+  858E 08 12 48 41      defb 8,18,'HAVE ANOTHER GO',255
 90+  8592 56 45 20 41
 90+  8596 4E 4F 54 48
 90+  859A 45 52 20 47
 90+  859E 4F FF
 91+  85A0
 92+  85A0              string_zonk:
 93+  85A0 00 00 5A 4F      defb 0,0,'ZONK!!',255
 93+  85A4 4E 4B 21 21
 93+  85A8 FF
 94+  85A9
 95+  85A9
 96+  85A9              string_options_title:
 97+  85A9 0D 03 54 48      defb 13,3,'THE PIT',255
 97+  85AD 45 20 50 49
 97+  85B1 54 FF
 98+  85B3              string_options_1player:
 99+  85B3 0A 06 31 2E      defb 10,6,'1. ONE PLAYER',255
 99+  85B7 20 4F 4E 45
 99+  85BB 20 50 4C 41
 99+  85BF 59 45 52 FF
100+  85C3              string_options_2player:
101+  85C3 0A 07 32 2E      defb 10,7,'2. TWO PLAYER',255
101+  85C7 20 54 57 4F
101+  85CB 20 50 4C 41
101+  85CF 59 45 52 FF
102+  85D3              string_options_keyboard:
103+  85D3 0A 08 33 2E      defb 10,8,'3. KEYBOARD',255
103+  85D7 20 4B 45 59
103+  85DB 42 4F 41 52
103+  85DF 44 FF
104+  85E1              string_options_joystick:
105+  85E1 0A 09 34 2E      defb 10,9,'4. KEMPSTON',255
105+  85E5 20 4B 45 4D
105+  85E9 50 53 54 4F
105+  85ED 4E FF
106+  85EF              string_options_start:
107+  85EF 0A 0A 35 2E      defb 10,10,'5. START',255
107+  85F3 20 53 54 41
107+  85F7 52 54 FF
108+  85FA              string_options_vanity:
109+  85FA 08 16 53 70      defb 8,22,'Spectrum Conversion',254
109+  85FE 65 63 74 72
109+  8602 75 6D 20 43
109+  8606 6F 6E 76 65
109+  860A 72 73 69 6F
109+  860E 6E FE
110+  8610 07 17 62 79      defb 7,23,'by Dave Tansley, 2020',255
110+  8614 20 44 61 76
110+  8618 65 20 54 61
110+  861C 6E 73 6C 65
110+  8620 79 2C 20 32
110+  8624 30 32 30 FF
111+  8628
112+  8628              ;
113+  8628              ; Prints specified string
114+  8628              ; Inputs:
115+  8628              ; de: pointer to string
116+  8628              ; bc: length of string
117+  8628              ;
118+  8628              ; Print String Data
119+  8628              ; First two bytes of string contain X and Y char position, then the string
120+  8628              ; Individual strings are terminated with 0xFE
121+  8628              ; End of data is terminated with 0xFF
122+  8628              ; HL: Address of string
123+  8628              ;
124+  8628 5E           string_print:           LD E,(HL)                       ; Fetch the X coordinate
125+  8629 23                                   INC HL                          ; Increase HL to the next memory location
126+  862A 56                                   LD D,(HL)                       ; Fetch the Y coordinate
127+  862B 23                                   INC HL                          ; Increase HL to the next memory location
128+  862C CD 3F 86                             CALL string_getcharaddress           ; Calculate the screen address (in DE)
129+  862F 7E           string_print_0:         LD A,(HL)                       ; Fetch the character to print
130+  8630 23                                   INC HL                          ; Increase HL to the next character
131+  8631 FE FE                                CP 0xFE                         ; Compare with 0xFE
132+  8633 28 F3                                JR Z,string_print               ; If it is equal to 0xFE then loop back to print next string
133+  8635 D0                                   RET NC                          ; If it is greater or equal to (carry bit set) then
134+  8636 E5                                   PUSH HL                         ; Push HL on stack (Print_Char will not preserve HL)
135+  8637 CD 4F 86                             CALL Print_Char                 ; Print the character
136+  863A E1                                   POP HL                          ; Retrieve HL back off the stack
137+  863B 1C                                   INC E                           ; Go to the next screen address
138+  863C 18 F1                                JR string_print_0               ; Loop back to print next character
139+  863E C9                                   RET
140+  863F
141+  863F              ; Get screen address
142+  863F              ; D = Y character position
143+  863F              ; E = X character position
144+  863F              ; Returns address in DE
145+  863F              ;
146+  863F 7A           string_getcharaddress:       LD A,D
147+  8640 E6 07                                AND %00000111
148+  8642 1F                                   RRA
149+  8643 1F                                   RRA
150+  8644 1F                                   RRA
151+  8645 1F                                   RRA
152+  8646 B3                                   OR E
153+  8647 5F                                   LD E,A
154+  8648 7A                                   LD A,D
155+  8649 E6 18                                AND %00011000
156+  864B F6 40                                OR %01000000
157+  864D 57                                   LD D,A
158+  864E C9                                   RET                             ; Returns screen address in DE
159+  864F
160+  864F              ; Print a single character out
161+  864F              ; A:  Character to print
162+  864F              ; DE: Screen address to print character at
163+  864F              ;
164+  864F 2A 36 5C     Print_Char:             LD HL,(23606)                    ; Address of character set table in ROM
165+  8652 06 00                                LD B,0                          ; Set BC to A
166+  8654 4F                                   LD C,A
167+  8655 E6 FF                                AND 0xFF                        ; Clear the carry bit
168+  8657 CB 11                                RL C                            ; Multiply BC by 8 (shift left 3 times)
169+  8659 CB 10                                RL B
170+  865B CB 11                                RL C
171+  865D CB 10                                RL B
172+  865F CB 11                                RL C
173+  8661 CB 10                                RL B
174+  8663 09                                   ADD HL,BC                       ; Get the character address in HL
175+  8664 0E 08                                LD C,8                          ; Loop counter
176+  8666 D5                                   PUSH DE
177+  8667 7E           Print_Char_1:           LD A,(HL)                       ; Get the byte from the ROM into A
178+  8668 12                                   LD (DE),A                       ; Stick A onto the screen
179+  8669 14                                   INC D                           ; Goto next line on screen
180+  866A 23                                   INC HL                           ; Goto next byte of character
181+  866B 0D                                   DEC C                           ; Decrease the loop counter
182+  866C 20 F9                                JR NZ,Print_Char_1              ; Loop around whilst it is Not Zero (NZ)
183+  866E D1                                   POP DE
184+  866F C9                                   RET                             ; Return from the subroutine
# file closed: strings.asm
138   8670                  include "screen\buffer.asm"
# file opened: screen/buffer.asm
  1+  8670              buffer_buffer:
  2+  8670 00 00 00...      defs 7424                   ; area reserved for screen
  3+  A370
  4+  A370              buffer_attr_buffer:
  5+  A370 00 00 00...      defs 928                    ; attrs buffer area
  6+  A710
  7+  A710              buffer_tmp:
  8+  A710 00 00            defb 0,0                    ; temp area
  9+  A712
 10+  A712              ;
 11+  A712              ; This list stores lines to be updated by the buffer.
 12+  A712              ; This is done by half line. Lines are encded with.
 13+  A712              ; 00hlllll
 14+  A712              ; Where h is the half of the screen (0 or 1), lllll is the line number
 15+  A712              buffer_updatedlines:
 16+  A712 FF FF FF...      defs 21,255
 17+  A727
 18+  A727              buffer_updateall:
 19+  A727 00               defb 0
 20+  A728
 21+  A728              ;
 22+  A728              ; Stores a line number in the update list
 23+  A728              ; Inputs:
 24+  A728              ; a - row number
 25+  A728              buffer_marklineforupdate:
 26+  A728 FE 15            cp 21
 27+  A72A D0               ret nc                          ; dont store lines that we shouldn't draw
 28+  A72B 5F               ld e,a                          ; store in e
 29+  A72C ED 4B 23 AC      ld bc,(origcoords)              ; this should hold the coords of what was drawn
 30+  A730 79               ld a,c                          ; get the horiz coord
 31+  A731 FE 0F            cp 15
 32+  A733 CA 4A A7         jp z,buffer_marklineforupdate3  ; if 15 or 16, store both halves
 33+  A736 FE 10            cp 16                           ; if this is 15 or less, the first half of screen
 34+  A738 CA 4A A7         jp z,buffer_marklineforupdate3  ; if 15 or 16, store both halves
 35+  A73B DA 46 A7         jp c,buffer_marklineforupdate4  ; if first half, nothing to do
 36+  A73E 78               ld a,b                          ; get the vertical
 37+  A73F 3E 20            ld a,32                         ; set the 6th bit by adding 32
 38+  A741 83               add a,e
 39+  A742 5F               ld e,a                          ; store this value
 40+  A743 C3 51 A7         jp buffer_marklineforupdate2
 41+  A746              buffer_marklineforupdate4:
 42+  A746 78               ld a,b
 43+  A747 C3 51 A7         jp buffer_marklineforupdate2    ; just get the vertical
 44+  A74A              buffer_marklineforupdate3:          ; special case for 15,16 - need to render both halves, since might be between
 45+  A74A CD 55 A7         call buffer_storelineforupdate  ; call store update for e
 46+  A74D 3E 20            ld a,32
 47+  A74F 83               add a,e
 48+  A750 5F               ld e,a
 49+  A751              buffer_marklineforupdate2:
 50+  A751 CD 55 A7         call buffer_storelineforupdate  ; call store update for e
 51+  A754 C9               ret
 52+  A755
 53+  A755
 54+  A755              ;
 55+  A755              ; Stores the calculated line and half if needed
 56+  A755              ; Inputs:
 57+  A755              ; e - half/row
 58+  A755              ;
 59+  A755              buffer_storelineforupdate:
 60+  A755 06 15            ld b,21
 61+  A757 21 12 A7         ld hl,buffer_updatedlines
 62+  A75A              buffer_storelineforupdate0:
 63+  A75A 7E               ld a,(hl)                       ; get the line stored in updated lines
 64+  A75B BB               cp e                            ; is this the same as the row number passed in?
 65+  A75C C8               ret z                           ; if so, don't need to do anything
 66+  A75D FE FF            cp 255                          ; is this 255, ie the end of the buffer
 67+  A75F C2 64 A7         jp nz,buffer_storelineforupdate1 ; if not, move to next
 68+  A762 73               ld (hl),e
 69+  A763 C9               ret
 70+  A764              buffer_storelineforupdate1:
 71+  A764 23               inc hl
 72+  A765 10 F3            djnz buffer_storelineforupdate0
 73+  A767 C9               ret
 74+  A768
 75+  A768              ;
 76+  A768              ; Zeroes the updated lines list
 77+  A768              ;
 78+  A768              buffer_clearlist:
 79+  A768 06 15            ld b,21
 80+  A76A 21 12 A7         ld hl,buffer_updatedlines
 81+  A76D              buffer_clearlist0:
 82+  A76D 36 FF            ld (hl),255
 83+  A76F 23               inc hl
 84+  A770 10 FB            djnz buffer_clearlist0
 85+  A772 C9               ret
 86+  A773
 87+  A773              ;
 88+  A773              ; Which half are we displaying? 0 left 1 right
 89+  A773              ;
 90+  A773              buffer_bufferhalf:
 91+  A773 00               defb 0
 92+  A774
 93+  A774              ;
 94+  A774              ; Copies the buffer to the screen. Use stack.
 95+  A774              ; Inputs:
 96+  A774              ; hl - half/line number to display - 0 is first half, 0 is first line
 97+  A774              ;
 98+  A774              buffer_bufferlinetoscreen:
 99+  A774 7C               ld a,h
100+  A775 32 73 A7         ld (buffer_bufferhalf),a        ; store the half
101+  A778 7D               ld a,l
102+  A779 4F               ld c,a                          ; store a
103+  A77A ED 5B DA A8      ld de,(screen_offset)          ; load the screen offset, this is in rows, want it *256
104+  A77E 83               add a,e                       ; add the row number
105+  A77F 11 00 01         ld de,256
106+  A782 CD 00 81         call utilities_multiply
107+  A785 54 5D            ld de,hl
108+  A787 21 70 86         ld hl,buffer_buffer
109+  A78A 19               add hl,de                   ; add the offset
110+  A78B 79               ld a,c                      ; get original row back
111+  A78C ED 73 FF A7      ld (buffer_bufferlinetoscreen3+1),sp ; this is some self-modifying code; stores the stack pointer in an ld sp,nn instruction at the end
112+  A790 D9               exx
113+  A791 0E 00            ld c,0                      ; zero horizontal
114+  A793 47               ld b,a                      ; load the row number into vertical coord
115+  A794 04               inc b
116+  A795 04               inc b                       ; move forward 2 to allow for scores
117+  A796 CD D2 A9         call screen_getcelladdress  ; get the memory into de
118+  A799 21 10 00         ld hl,16                    ; offset by 16 chars to get to the centre, since populating stack from right
119+  A79C 19               add hl,de
120+  A79D 3A 73 A7         ld a,(buffer_bufferhalf)    ; get the half
121+  A7A0 FE 01            cp 1
122+  A7A2 CA CF A7         jp z,buffer_bufferlinetoscreen4
123+  A7A5              buffer_bufferlinetoscreen0:     ; PROCESS THE LEFT HALF
124+  A7A5 D9               exx                         ; hl is now buffer
125+  A7A6 23               inc hl
126+  A7A7 23               inc hl                      ; move hl forward 2 to skip first two blocks
127+  A7A8 F9               ld sp,hl                    ; do first fourteen for left hand side, sp pointing at buffer
128+  A7A9 F1               pop af
129+  A7AA C1               pop bc
130+  A7AB D1               pop de
131+  A7AC DD E1            pop ix
132+  A7AE D9               exx                         ; hl is now screen
133+  A7AF 08               ex af,af'
134+  A7B0 F1               pop af
135+  A7B1 C1               pop bc
136+  A7B2 D1               pop de
137+  A7B3 F9               ld sp,hl                    ; sp pointing at screen
138+  A7B4 D5               push de
139+  A7B5 C5               push bc
140+  A7B6 F5               push af
141+  A7B7 08               ex af,af'
142+  A7B8 D9               exx                         ; hl is now buffer
143+  A7B9 DD E5            push ix
144+  A7BB D5               push de
145+  A7BC C5               push bc
146+  A7BD F5               push af
147+  A7BE 11 1E 00         ld de,30                    ; add thirty to get to next line
148+  A7C1 19               add hl,de
149+  A7C2 F9               ld sp,hl                    ; sp pointing at buffer
150+  A7C3 D9               exx                         ; hl is now screen
151+  A7C4 08               ex af,af'
152+  A7C5 24               inc h
153+  A7C6 7C               ld a,h
154+  A7C7 E6 07            and 0x07                    ; check if this is multiple of 8, if so, end of cell line
155+  A7C9 C2 A5 A7         jp nz,buffer_bufferlinetoscreen0 ; next line in cell
156+  A7CC              buffer_bufferlinetoscreen1:
157+  A7CC C3 FE A7         jp buffer_bufferlinetoscreen3
158+  A7CF              buffer_bufferlinetoscreen4:     ; PROCESS THE RIGHT HALF
159+  A7CF D9               exx                         ; hl is buffer
160+  A7D0 11 10 00         ld de,16
161+  A7D3 19               add hl,de                   ; move halfway across
162+  A7D4 D9               exx                         ; hl is screen
163+  A7D5 11 0E 00         ld de,14
164+  A7D8 19               add hl,de
165+  A7D9              buffer_bufferlinetoscreen2:
166+  A7D9 D9               exx                         ; hl is now buffer
167+  A7DA F9               ld sp,hl                    ; do first fourteen for right hand side, sp pointing at buffer
168+  A7DB F1               pop af
169+  A7DC C1               pop bc
170+  A7DD D1               pop de
171+  A7DE DD E1            pop ix
172+  A7E0 D9               exx                         ; hl is now screen
173+  A7E1 08               ex af,af'
174+  A7E2 F1               pop af
175+  A7E3 C1               pop bc
176+  A7E4 D1               pop de
177+  A7E5 F9               ld sp,hl                    ; sp pointing at screen
178+  A7E6 D5               push de
179+  A7E7 C5               push bc
180+  A7E8 F5               push af
181+  A7E9 08               ex af,af'
182+  A7EA D9               exx                         ; hl is now buffer
183+  A7EB DD E5            push ix
184+  A7ED D5               push de
185+  A7EE C5               push bc
186+  A7EF F5               push af
187+  A7F0 11 20 00         ld de,32                    ; add thirty two to get to next line
188+  A7F3 19               add hl,de
189+  A7F4 F9               ld sp,hl                    ; sp pointing at buffer
190+  A7F5 D9               exx                         ; hl is now screen
191+  A7F6 08               ex af,af'
192+  A7F7 24               inc h
193+  A7F8 7C               ld a,h
194+  A7F9 E6 07            and 0x07                    ; check if this is multiple of 8, if so, end of cell line
195+  A7FB C2 D9 A7         jp nz,buffer_bufferlinetoscreen2 ; next line in cell
196+  A7FE              buffer_bufferlinetoscreen3:
197+  A7FE 31 00 00         ld sp,0
198+  A801 D9               exx
199+  A802 C9               ret
200+  A803
201+  A803              ;
202+  A803              ; Copies the buffer to the screen for updated lines. Use stack.
203+  A803              ; Inputs: none
204+  A803              ;
205+  A803              buffer_buffertoscreen:
206+  A803 3A 27 A7         ld a,(buffer_updateall)      ; get the all update flag
207+  A806 FE 00            cp 0
208+  A808 CA 14 A8         jp z,buffer_buffertoscreen2  ; if not set, draw only updated
209+  A80B CD 44 A8         call buffer_allbuffertoscreen ; otherwise, draw whole screen
210+  A80E 21 27 A7         ld hl,buffer_updateall
211+  A811 36 00            ld (hl),0                    ; reset flag
212+  A813 C9               ret
213+  A814              buffer_buffertoscreen2:
214+  A814 06 15            ld b,21
215+  A816 FD 21 12 A7      ld iy,buffer_updatedlines    ; the location of the updated lines
216+  A81A              buffer_buffertoscreen0:
217+  A81A FD 7E 00         ld a,(iy)
218+  A81D FE FF            cp 255
219+  A81F CA 43 A8         jp z,buffer_buffertoscreen1                       ; if this is 255, then we're at the end of the updated list
220+  A822 6F               ld l,a
221+  A823 26 00            ld h,0
222+  A825 E6 20            and 32                      ; and with 32 to see if 6th bit is set
223+  A827 FE 20            cp 32                       ; if so, second half of screen
224+  A829 C2 34 A8         jp nz,buffer_buffertoscreen3
225+  A82C 26 01            ld h,1                      ; store half in h
226+  A82E FD 7E 00         ld a,(iy)
227+  A831 D6 20            sub 32                      ; remove 32
228+  A833 6F               ld l,a                      ; stor in line number
229+  A834              buffer_buffertoscreen3:
230+  A834 C5               push bc
231+  A835 FD E5            push iy
232+  A837 F3               di
233+  A838 CD 74 A7         call buffer_bufferlinetoscreen      ; hl has h=half (0 or 1), l=line
234+  A83B FB               ei
235+  A83C FD E1            pop iy
236+  A83E C1               pop bc
237+  A83F FD 23            inc iy
238+  A841 10 D7            djnz buffer_buffertoscreen0
239+  A843              buffer_buffertoscreen1:
240+  A843                  ;call buffer_buffertoattrsfast
241+  A843 C9               ret
242+  A844
243+  A844              ;
244+  A844              ; Copies the buffer to the screen. Use stack.
245+  A844              ; Inputs: none
246+  A844              ;
247+  A844              buffer_allbuffertoscreen:
248+  A844 06 15            ld b,21
249+  A846 3E 00            ld a,0
250+  A848              buffer_allbuffertoscreen0:
251+  A848 C5               push bc
252+  A849 F5               push af
253+  A84A F3               di
254+  A84B 26 00            ld h,0
255+  A84D 6F               ld l,a
256+  A84E CD 74 A7         call buffer_bufferlinetoscreen
257+  A851 FB               ei
258+  A852 F1               pop af
259+  A853 F5               push af
260+  A854 F3               di
261+  A855 26 01            ld h,1
262+  A857 6F               ld l,a
263+  A858 CD 74 A7         call buffer_bufferlinetoscreen
264+  A85B FB               ei
265+  A85C F1               pop af
266+  A85D C1               pop bc
267+  A85E 3C               inc a
268+  A85F 10 E7            djnz buffer_allbuffertoscreen0
269+  A861 F3               di
270+  A862 CD 67 A8         call buffer_buffertoattrsfast
271+  A865 FB               ei
272+  A866 C9               ret
273+  A867
274+  A867              ;
275+  A867              ; Copies the attrs buffer to screen with the stack
276+  A867              ;
277+  A867              buffer_buffertoattrsfast:
278+  A867 ED 73 D6 A8      ld (buffer_buffertoattrsfast1+1),sp ; this is some self-modifying code; stores the stack pointer in an ld sp,nn instruction at the end
279+  A86B 3A DA A8         ld a,(screen_offset)            ; get the screen offset in rows, so want *32
280+  A86E 11 20 00         ld de,32
281+  A871 CD 00 81         call utilities_multiply
282+  A874 54 5D            ld de,hl
283+  A876 21 70 A3         ld hl,buffer_attr_buffer
284+  A879 19               add hl,de                       ; add the offset, start of attr buffer now in hl
285+  A87A D9               exx
286+  A87B 21 50 58         ld hl,22528+80                  ; start of attr memory + 2 lines for score + 16 to start at right side
287+  A87E FD 21 10 A7      ld iy,buffer_tmp
288+  A882 FD 36 00 15      ld (iy),21              ; number of times to loop
289+  A886              buffer_buffertoattrsfast0:
290+  A886 D9               exx                         ; hl is now buffer
291+  A887 23               inc hl
292+  A888 23               inc hl                      ; move hl forward 2 to skip first two blocks
293+  A889 F9               ld sp,hl                    ; do first fourteen for left hand side, sp pointing at buffer
294+  A88A F1               pop af
295+  A88B C1               pop bc
296+  A88C D1               pop de
297+  A88D DD E1            pop ix
298+  A88F D9               exx                         ; hl is now screen
299+  A890 08               ex af,af'
300+  A891 F1               pop af
301+  A892 C1               pop bc
302+  A893 D1               pop de
303+  A894 F9               ld sp,hl                    ; sp pointing at screen
304+  A895 D5               push de
305+  A896 C5               push bc
306+  A897 F5               push af
307+  A898 08               ex af,af'
308+  A899 D9               exx                         ; hl is now buffer
309+  A89A DD E5            push ix
310+  A89C D5               push de
311+  A89D C5               push bc
312+  A89E F5               push af
313+  A89F 1E 0E            ld e,14                    ; do another fourteen for right hand side
314+  A8A1 16 00            ld d,0
315+  A8A3 19               add hl,de
316+  A8A4 F9               ld sp,hl                    ; sp pointing at buffer
317+  A8A5 F1               pop af
318+  A8A6 C1               pop bc
319+  A8A7 D1               pop de
320+  A8A8 DD E1            pop ix
321+  A8AA D9               exx                         ; hl is now screen
322+  A8AB 08               ex af,af'
323+  A8AC 1E 0E            ld e,14
324+  A8AE 16 00            ld d,0
325+  A8B0 19               add hl,de
326+  A8B1 F1               pop af
327+  A8B2 C1               pop bc
328+  A8B3 D1               pop de
329+  A8B4 F9               ld sp,hl                    ; sp pointing at screen
330+  A8B5 D5               push de
331+  A8B6 C5               push bc
332+  A8B7 F5               push af
333+  A8B8 08               ex af,af'
334+  A8B9 D9               exx                         ; hl is now buffer
335+  A8BA DD E5            push ix
336+  A8BC D5               push de
337+  A8BD C5               push bc
338+  A8BE F5               push af
339+  A8BF 1E 10            ld e,16
340+  A8C1 16 00            ld d,0
341+  A8C3 19               add hl,de
342+  A8C4 D9               exx                         ; hl is now screen
343+  A8C5 11 12 00         ld de,18
344+  A8C8 19               add hl,de
345+  A8C9 FD 7E 00         ld a,(iy)
346+  A8CC 3D               dec a
347+  A8CD FE 00            cp 0
348+  A8CF FD 77 00         ld (iy),a
349+  A8D2 C2 86 A8         jp nz,buffer_buffertoattrsfast0 ; do another row
350+  A8D5              buffer_buffertoattrsfast1:
351+  A8D5 31 00 00         ld sp,0
352+  A8D8 D9               exx
353+  A8D9 C9               ret
# file closed: screen/buffer.asm
139   A8DA                  include "screen\screen.asm"
# file opened: screen/screen.asm
  1+  A8DA              screen_offset:
  2+  A8DA 00               defb 0                      ; offset from top of screen in lines
  3+  A8DB
  4+  A8DB              screen_tmp:
  5+  A8DB 00 00            defb 0,0                      ; temporary memory
  6+  A8DD
  7+  A8DD              screen_setscorecolours:
  8+  A8DD 21 F9 B7         ld hl,score_colours
  9+  A8E0 11 00 58         ld de,22528                     ; attrs here
 10+  A8E3 01 40 00         ld bc,64
 11+  A8E6 ED B0            ldir
 12+  A8E8 C9               ret
 13+  A8E9
 14+  A8E9              screen_sethighscorecolours:
 15+  A8E9 21 39 B8         ld hl,high_score_colours
 16+  A8EC 11 E0 5A         ld de,22528+736                 ; attrs here
 17+  A8EF 01 20 00         ld bc,32
 18+  A8F2 ED B0            ldir
 19+  A8F4 C9               ret
 20+  A8F5
 21+  A8F5              ; Draw the screen
 22+  A8F5              ; Inputs:
 23+  A8F5              ; none
 24+  A8F5              ; Notes:
 25+  A8F5              ; The value held at screen_offset tells the screen how many rows to scroll down. Set to five to bottom out.
 26+  A8F5              screen_draw:
 27+  A8F5                  ;call clear_screen
 28+  A8F5 0E 00            ld c,0                      ; horiz
 29+  A8F7 06 00            ld b,0                      ; vert, 0 at top
 30+  A8F9 DD 21 D4 B1      ld ix,level_layout               ; point ix at level data
 31+  A8FD FD 21 70 A3      ld iy,buffer_attr_buffer    ; point iy at attr data
 32+  A901              screen_draw0:
 33+  A901 DD 7E 00         ld a,(ix)                   ; load the block number
 34+  A904 C5               push bc                     ; store bc, contains loop count
 35+  A905 CD C0 AA         call screen_getattr         ; get the memory location for this cell's attr into hl
 36+  A908 7E               ld a,(hl)                   ; get the attr value at the address
 37+  A909 FD 77 00         ld (iy),a                   ; load the attr into memory
 38+  A90C DD 7E 00         ld a,(ix)                   ; load the block number
 39+  A90F CD 87 AA         call screen_getblock        ; get the block data into hl
 40+  A912 CD 64 AA         call screen_showchar        ; show this character here
 41+  A915 C1               pop bc                      ; get the loop counter back
 42+  A916 DD 23            inc ix                      ; increment level location
 43+  A918 FD 23            inc iy                      ; increment attr location
 44+  A91A 0C               inc c                       ; increment horiz
 45+  A91B 79               ld a,c
 46+  A91C FE 20            cp 32                       ; check if horiz has reach edge of screen
 47+  A91E C2 01 A9         jp nz,screen_draw0          ; if not, loop
 48+  A921 0E 00            ld c,0                      ; if so, reset horiz
 49+  A923 04               inc b                       ; increment vertical
 50+  A924 78               ld a,b
 51+  A925 FE 1D            cp 29                       ; check if at bottom
 52+  A927 C2 01 A9         jp nz,screen_draw0          ; if not, loop
 53+  A92A 21 DB A8         ld hl, screen_tmp
 54+  A92D 36 09            ld (hl),9                   ; load the block number into memory
 55+  A92F DD 2A 0C C4      ld ix,(game_current_rocks)  ; current rock memory
 56+  A933 CD A2 A9         call screen_initobjects     ; draw rocks
 57+  A936 21 DB A8         ld hl, screen_tmp
 58+  A939 36 0C            ld (hl),12                  ; load the block number into memory
 59+  A93B DD 21 5B B7      ld ix,level_missiles       ; missile memory
 60+  A93F CD A2 A9         call screen_initobjects     ; draw missiles
 61+  A942 21 DB A8         ld hl, screen_tmp
 62+  A945 36 08            ld (hl),08                  ; load the block number into memory
 63+  A947 DD 21 D4 B7      ld ix,level_diamonds       ; diamond memory
 64+  A94B CD A2 A9         call screen_initobjects     ; draw diamonds
 65+  A94E 21 DB A8         ld hl, screen_tmp
 66+  A951 36 0E            ld (hl),14                  ; load the block number into memory
 67+  A953 DD 21 E4 B7      ld ix,level_gems           ; gems memory
 68+  A957 CD A2 A9         call screen_initobjects     ; draw gems
 69+  A95A CD 61 A9         call screen_setuptext       ; draws text on the screen
 70+  A95D CD 6F CC         call scores_printscores     ; print the current scores
 71+  A960 C9               ret
 72+  A961
 73+  A961              ;
 74+  A961              ; Sets up text on the screen
 75+  A961              ;
 76+  A961              screen_setuptext:
 77+  A961 CD CB CC         call scores_showtable
 78+  A964 CD E9 A8         call screen_sethighscorecolours
 79+  A967 21 CC 81         ld hl, string_score1
 80+  A96A CD 28 86         call string_print
 81+  A96D 21 D5 81         ld hl, string_scorenumbers1
 82+  A970 CD 28 86         call string_print
 83+  A973 21 DE 81         ld hl, string_company
 84+  A976 CD 28 86         call string_print
 85+  A979 21 FE 81         ld hl, string_score2
 86+  A97C CD 28 86         call string_print
 87+  A97F 21 07 82         ld hl, string_scorenumbers2
 88+  A982 CD 28 86         call string_print
 89+  A985 3A 08 C4         ld a,(game_currentplayer)
 90+  A988 FE 01            cp 1
 91+  A98A C2 93 A9         jp nz,screen_setuptext0
 92+  A98D 21 E8 81         ld hl, string_player1
 93+  A990 C3 96 A9         jp screen_setuptext1
 94+  A993              screen_setuptext0:
 95+  A993 21 F3 81         ld hl, string_player2
 96+  A996              screen_setuptext1:
 97+  A996 CD 28 86         call string_print
 98+  A999 CD DD A8         call screen_setscorecolours
 99+  A99C C9               ret
100+  A99D
101+  A99D              ;
102+  A99D              ; Sets a line of colours
103+  A99D              ; Inputs:
104+  A99D              ; a - colour to set
105+  A99D              ; b - number to set
106+  A99D              ; de - start memory location
107+  A99D              ;
108+  A99D              screen_setcolours:
109+  A99D 12               ld (de),a
110+  A99E 13               inc de
111+  A99F 10 FC            djnz screen_setcolours
112+  A9A1 C9               ret
113+  A9A2
114+  A9A2              ;
115+  A9A2              ; Draw initial object positions
116+  A9A2              ; Inputs:
117+  A9A2              ; ix - memory location of objects
118+  A9A2              ; a - graphic
119+  A9A2              screen_initobjects:
120+  A9A2 DD 4E 00         ld c,(ix)                   ; get the horiz coord
121+  A9A5 79               ld a,c
122+  A9A6 FE FF            cp 255
123+  A9A8 CA D1 A9         jp z,screen_initobjects2
124+  A9AB DD 23            inc ix                      ; move to next
125+  A9AD DD 46 00         ld b,(ix)                   ; get the vert coord
126+  A9B0 DD 23            inc ix
127+  A9B2 CD E3 A9         call screen_getcellattradress ; get the memory address of b,c attr into de
128+  A9B5 D5               push de
129+  A9B6 3A DB A8         ld a,(screen_tmp)                  ; get the block number back
130+  A9B9 CD C0 AA         call screen_getattr         ; get the memory location for this cell's attr into hl
131+  A9BC D1               pop de
132+  A9BD 7E               ld a,(hl)                   ; get the attr value at the address
133+  A9BE 12               ld (de),a                   ; load the attr into memory
134+  A9BF 3A DB A8         ld a,(screen_tmp)                  ; get the block number back
135+  A9C2 CD 87 AA         call screen_getblock        ; get the block data into hl
136+  A9C5 CD 64 AA         call screen_showchar        ; show this character here
137+  A9C8
138+  A9C8              screen_initobjects1:
139+  A9C8 DD 23            inc ix                      ; move past state
140+  A9CA DD 23            inc ix
141+  A9CC DD 23            inc ix                      ; move past mem
142+  A9CE C3 A2 A9         jp screen_initobjects
143+  A9D1              screen_initobjects2:
144+  A9D1 C9               ret
145+  A9D2
146+  A9D2
147+  A9D2              ;
148+  A9D2              ; Return character cell address offset of block at (b, c) ready for addition to screen  memory.
149+  A9D2              ; Inputs:
150+  A9D2              ; bc: coords
151+  A9D2              ; Outputs:
152+  A9D2              ; de: memory location
153+  A9D2              ;
154+  A9D2              screen_getcelladdress:
155+  A9D2 78               ld a,b      ; vertical position.
156+  A9D3 E6 18            and 24      ; which segment, 0, 1 or 2?
157+  A9D5 C6 40            add a,64    ; 64*256 = 16384, Spectrum's screen memory.
158+  A9D7 57               ld d,a      ; this is our high byte.
159+  A9D8 78               ld a,b      ; what was that vertical position again?
160+  A9D9 E6 07            and 7       ; which row within segment?
161+  A9DB 0F               rrca        ; multiply row by 32.
162+  A9DC 0F               rrca
163+  A9DD 0F               rrca
164+  A9DE 5F               ld e,a      ; low byte.
165+  A9DF 79               ld a,c      ; add on y coordinate.
166+  A9E0 83               add a,e     ; mix with low byte.
167+  A9E1 5F               ld e,a      ; address of screen position in de.
168+  A9E2 C9               ret
169+  A9E3
170+  A9E3              ;
171+  A9E3              ; Calculate buffer address of attribute for character at (b, c).
172+  A9E3              ; Inputs:
173+  A9E3              ; bc: coords
174+  A9E3              ; Outputs:
175+  A9E3              ; de: memory location
176+  A9E3              ;
177+  A9E3              screen_getcellattradress:
178+  A9E3 11 70 A3         ld de,buffer_attr_buffer ; memory is at base + horiz (c) + vert*32 (b)
179+  A9E6 69               ld l,c      ; x position.
180+  A9E7 26 00            ld h,0      ; 0 h
181+  A9E9 19               add hl,de
182+  A9EA 54 5D            ld de,hl    ; horiz done
183+  A9EC 78               ld a,b      ; do vert
184+  A9ED D5               push de
185+  A9EE C5               push bc
186+  A9EF 11 20 00         ld de,32
187+  A9F2 CD 00 81         call utilities_multiply
188+  A9F5 C1               pop bc
189+  A9F6 D1               pop de
190+  A9F7 19               add hl,de
191+  A9F8 54 5D            ld de,hl    ; vert done
192+  A9FA C9               ret
193+  A9FB
194+  A9FB              ;
195+  A9FB              ; Calculate buffer address offset of attribute for character at (b, c).
196+  A9FB              ; Inputs:
197+  A9FB              ; bc: coords
198+  A9FB              ; Outputs:
199+  A9FB              ; de: memory location
200+  A9FB              ;
201+  A9FB              screen_getcellattroffset:
202+  A9FB 69               ld l,c      ; x position.
203+  A9FC 26 00            ld h,0      ; 0 h
204+  A9FE 54 5D            ld de,hl    ; horiz done
205+  AA00 78               ld a,b      ; do vert
206+  AA01 D5               push de
207+  AA02 C5               push bc
208+  AA03 11 20 00         ld de,32
209+  AA06 CD 00 81         call utilities_multiply
210+  AA09 C1               pop bc
211+  AA0A D1               pop de
212+  AA0B 19               add hl,de
213+  AA0C 54 5D            ld de,hl    ; vert done
214+  AA0E C9               ret
215+  AA0F
216+  AA0F              ;
217+  AA0F              ; Calculate buffer address of attribute for character at (b, c).
218+  AA0F              ; Inputs:
219+  AA0F              ; bc: coords
220+  AA0F              ; Outputs:
221+  AA0F              ; de: memory location
222+  AA0F              ;
223+  AA0F              screen_getscreenattradress:
224+  AA0F 11 00 58         ld de,22528 ; memory is at base + horiz (c) + vert*32 (b)
225+  AA12 69               ld l,c      ; x position.
226+  AA13 26 00            ld h,0      ; 0 h
227+  AA15 19               add hl,de
228+  AA16 54 5D            ld de,hl    ; horiz done
229+  AA18 78               ld a,b      ; do vert
230+  AA19 D5               push de
231+  AA1A C5               push bc
232+  AA1B 11 20 00         ld de,32
233+  AA1E CD 00 81         call utilities_multiply
234+  AA21 C1               pop bc
235+  AA22 D1               pop de
236+  AA23 19               add hl,de
237+  AA24 54 5D            ld de,hl    ; vert done
238+  AA26 C9               ret
239+  AA27
240+  AA27              ;
241+  AA27              ; Gets the attr memory location for a screen coord
242+  AA27              ; Will overwrite bc
243+  AA27              ; Inputs:
244+  AA27              ; bc - screen coords
245+  AA27              ; Outputs:
246+  AA27              ; de - memory location
247+  AA27              ; bc - character coords
248+  AA27              ;
249+  AA27              screen_getattraddressfromscreencoords:
250+  AA27 78               ld a,b                          ; get the player block coords of current block
251+  AA28 E6 F8            and 248                         ; find closest multiple of eight
252+  AA2A 0F               rrca
253+  AA2B 0F               rrca
254+  AA2C 0F               rrca                ; divide by 8
255+  AA2D 47               ld b,a
256+  AA2E 79               ld a,c
257+  AA2F 48               ld c,b                         ; swap b and c
258+  AA30 E6 F8            and 248
259+  AA32 0F               rrca
260+  AA33 0F               rrca
261+  AA34 0F               rrca                ; divide by 8
262+  AA35 47               ld b,a
263+  AA36 CD E3 A9         call screen_getcellattradress   ; work out memory location of current block attributes, memory in de
264+  AA39 C9               ret
265+  AA3A
266+  AA3A
267+  AA3A              ; Gets the nearest cell coords for a screen coord
268+  AA3A              ; Will overwrite bc
269+  AA3A              ; Inputs:
270+  AA3A              ; bc - screen coords
271+  AA3A              ; Outputs:
272+  AA3A              ; bc - character coords
273+  AA3A              ;
274+  AA3A              screen_getcharcoordsfromscreencoords:
275+  AA3A 78               ld a,b                          ; get the player block coords of current block
276+  AA3B E6 F8            and 248                         ; find closest multiple of eight
277+  AA3D 0F               rrca
278+  AA3E 0F               rrca
279+  AA3F 0F               rrca                ; divide by 8
280+  AA40 47               ld b,a
281+  AA41 79               ld a,c
282+  AA42 48               ld c,b                         ; swap b and c
283+  AA43 E6 F8            and 248
284+  AA45 0F               rrca
285+  AA46 0F               rrca
286+  AA47 0F               rrca                ; divide by 8
287+  AA48 47               ld b,a
288+  AA49 C9               ret
289+  AA4A
290+  AA4A              ; Gets the screen coords for a cell coord
291+  AA4A              ; Will overwrite bc
292+  AA4A              ; Inputs:
293+  AA4A              ; bc - char coords
294+  AA4A              ; Outputs:
295+  AA4A              ; bc - screen coords
296+  AA4A              ;
297+  AA4A              screen_getscreencoordsfromcharcoords:
298+  AA4A 78               ld a,b                          ; get the player block coords of current block
299+  AA4B 07               rlca
300+  AA4C 07               rlca
301+  AA4D 07               rlca                ; multiply by 8
302+  AA4E 47               ld b,a
303+  AA4F 79               ld a,c
304+  AA50 48               ld c,b                         ; swap b and c
305+  AA51 07               rlca
306+  AA52 07               rlca
307+  AA53 07               rlca                ; divide by 8
308+  AA54 47               ld b,a
309+  AA55 C9               ret
310+  AA56
311+  AA56              ;
312+  AA56              ; Get buffer address for a character at b,c - b vert
313+  AA56              ; Buffer memory is stored as sequential block
314+  AA56              ; Char at 0,0 is stored 0,32,64...; 0,1 is stored at 1,33,65
315+  AA56              ; Inputs:
316+  AA56              ; bc - coords
317+  AA56              ; Outputs:
318+  AA56              ; de - memory location of first byte
319+  AA56              screen_getbufferaddress:
320+  AA56 21 70 86         ld hl, buffer_buffer    ; first get screen buffer start
321+  AA59 50               ld d,b                  ; then work out vertical offset
322+  AA5A 1E 00            ld e,0                  ; mult by 256, low byte becomes high byte, de now holds result
323+  AA5C 19               add hl,de               ; add to base
324+  AA5D 59               ld e,c                  ; then add horizontal offset (c)
325+  AA5E 16 00            ld d,0
326+  AA60 19               add hl,de               ; add to base
327+  AA61 54 5D            ld de,hl
328+  AA63 C9               ret
329+  AA64
330+  AA64              ;
331+  AA64              ; Display character hl at (b, c) to buffer.
332+  AA64              ; Stored sequentially
333+  AA64              ; Inputs:
334+  AA64              ; hl: block address
335+  AA64              ; bc: coords
336+  AA64              ;
337+  AA64              screen_showchar:
338+  AA64 ED 43 23 AC      ld (origcoords),bc   ; store char coords
339+  AA68 3E 00            ld a,0
340+  AA6A E5               push hl
341+  AA6B CD 56 AA         call screen_getbufferaddress ; get the current screen buffer pointer
342+  AA6E E1               pop hl
343+  AA6F 06 08            ld b,8              ; number of pixels high.
344+  AA71              screen_showchar0:
345+  AA71 7E               ld a,(hl)           ; source graphic.
346+  AA72 12               ld (de),a           ; transfer to screen.
347+  AA73 23               inc hl              ; next piece of data.
348+  AA74 E5               push hl             ; store hl
349+  AA75 62 6B            ld hl,de            ; put de in hl
350+  AA77 1E 20            ld e,32            ; inc memory by 32, so load 32 into de
351+  AA79 16 00            ld d,0
352+  AA7B 19               add hl,de              ; add de to hl
353+  AA7C 54 5D            ld de,hl            ; load back to de
354+  AA7E E1               pop hl              ; restore hl
355+  AA7F
356+  AA7F 10 F0            djnz screen_showchar0 ; repeat
357+  AA81 2E 01            ld l,1
358+  AA83 CD D4 AB         call sprites_marklinesforupdatechar
359+  AA86
360+  AA86 C9               ret
361+  AA87
362+  AA87
363+  AA87              ;
364+  AA87              ; Get cell graphic.
365+  AA87              ; Inputs:
366+  AA87              ; a: block
367+  AA87              ; Outputs:
368+  AA87              ; hl: memory
369+  AA87              ;
370+  AA87              screen_getblock:
371+  AA87 07               rlca                        ; multiply block number by eight.
372+  AA88 07               rlca
373+  AA89 07               rlca
374+  AA8A 5F               ld e,a                      ; displacement to graphic address.
375+  AA8B 16 00            ld d,0                      ; no high byte.
376+  AA8D 21 59 BC         ld hl,sprites               ; address of character blocks.
377+  AA90 19               add hl,de                   ; point to block.
378+  AA91 C9               ret
379+  AA92
380+  AA92              ;
381+  AA92              ; Set a the attr of a coord
382+  AA92              ; Inputs:
383+  AA92              ; bc - char coords
384+  AA92              ; a - attr
385+  AA92              ;
386+  AA92              screen_setattr:
387+  AA92 DD E5            push ix
388+  AA94 C5               push bc
389+  AA95 08               ex af, af'
390+  AA96 CD FB A9         call screen_getcellattroffset   ; get offset into de
391+  AA99 21 70 A3         ld hl,buffer_attr_buffer
392+  AA9C 19               add hl,de                       ; get the memory location
393+  AA9D 08               ex af, af'                      ; get attr back
394+  AA9E 77               ld (hl),a                         ; set the attr
395+  AA9F 08               ex af, af'                      ; get attr back
396+  AAA0 ED 5B DA A8      ld de,(screen_offset)           ; get the offset
397+  AAA4 78               ld a,b                          ; get the vertical
398+  AAA5 93               sub e                           ; subtract the offset
399+  AAA6 DA BC AA         jp c,screen_setattr0            ; if less than zero, don't update the attr on screen
400+  AAA9 FE 15            cp 21
401+  AAAB D2 BC AA         jp nc,screen_setattr0           ; if more than 21, don't update the attr on screen
402+  AAAE 47               ld b,a                          ; put the coord back in b
403+  AAAF CD 0F AA         call screen_getscreenattradress ; screen attr address in de
404+  AAB2 21 40 00         ld hl,64                        ; attr memory + two rows for scores
405+  AAB5 19               add hl,de
406+  AAB6 08               ex af, af'                      ; get attr back
407+  AAB7 77               ld (hl),a
408+  AAB8 C1               pop bc
409+  AAB9 DD E1            pop ix
410+  AABB C9               ret
411+  AABC              screen_setattr0:
412+  AABC C1               pop bc
413+  AABD DD E1            pop ix
414+  AABF C9               ret
415+  AAC0
416+  AAC0              ;
417+  AAC0              ; Get cell attribute.
418+  AAC0              ; Inputs:
419+  AAC0              ; a: block
420+  AAC0              ; Outputs:
421+  AAC0              ; hl: memory
422+  AAC0              ;
423+  AAC0              screen_getattr:
424+  AAC0 5F               ld e,a                      ; displacement to attribute address.
425+  AAC1 16 00            ld d,0                      ; no high byte.
426+  AAC3 21 39 BD         ld hl,sprite_attrs          ; address of block attributes.
427+  AAC6 19               add hl,de                   ; point to attribute.
428+  AAC7 C9               ret
429+  AAC8
430+  AAC8              ;
431+  AAC8              ; Checks whether a character block has anything in it
432+  AAC8              ; Inputs:
433+  AAC8              ; bc - char coords
434+  AAC8              ; Outputs:
435+  AAC8              ; a - 1, empty
436+  AAC8              screen_ischarempty:
437+  AAC8 CD 56 AA         call screen_getbufferaddress ; get the current screen buffer pointer
438+  AACB 06 08            ld b,8                      ; check 8 rows
439+  AACD              screen_ischarempty2:
440+  AACD 1A               ld a,(de)                   ; check line
441+  AACE FE 00            cp 0
442+  AAD0 C2 DE AA         jp nz,screen_ischarempty1   ; if not zero, jump out with false
443+  AAD3 21 20 00         ld hl,32
444+  AAD6 19               add hl,de
445+  AAD7 54 5D            ld de,hl                    ; move to next row
446+  AAD9 10 F2            djnz screen_ischarempty2
447+  AADB              screen_ischarempty0:
448+  AADB 3E 01            ld a,1
449+  AADD C9               ret
450+  AADE              screen_ischarempty1:
451+  AADE 3E 00            ld a,0
452+  AAE0 C9               ret
453+  AAE1
454+  AAE1              ;
455+  AAE1              ; Copies a block from one place to another directly underneath, leaves the original empty
456+  AAE1              ; Inputs:
457+  AAE1              ; bc - coords of block to copy from
458+  AAE1              screen_copyblockdown
459+  AAE1 CD 56 AA         call screen_getbufferaddress ; get the current screen buffer pointer for source
460+  AAE4 06 08            ld b,8                      ; copy 8 rows
461+  AAE6              screen_copyblock0:
462+  AAE6 1A               ld a,(de)                    ; get what we're copying
463+  AAE7 08               ex af,af'
464+  AAE8 3E 00            ld a,0
465+  AAEA 12               ld (de),a                    ; replace with empty
466+  AAEB 08               ex af,af'
467+  AAEC 14               inc d                        ; add 256 to get to the next row
468+  AAED 12               ld (de),a                    ; copy to the next row
469+  AAEE 15               dec d
470+  AAEF 21 20 00         ld hl,32
471+  AAF2 19               add hl,de                       ; return back to source, next row down
472+  AAF3 54 5D            ld de,hl
473+  AAF5 10 EF            djnz screen_copyblock0
474+  AAF7 C9               ret
475+  AAF8
476+  AAF8              ;
477+  AAF8              ; Returns the first byte of a character. Useful for figuring out what's there
478+  AAF8              ; Inputs:
479+  AAF8              ; bc - coords
480+  AAF8              ; Outputs:
481+  AAF8              ; a - first byte
482+  AAF8              ;
483+  AAF8              screen_getcharfirstbyte:
484+  AAF8 CD 56 AA         call screen_getbufferaddress ; get the current screen buffer pointer for source
485+  AAFB 1A               ld a,(de)
486+  AAFC C9               ret
487+  AAFD
# file closed: screen/screen.asm
140   AAFD                  include "screen\sprites.asm"
# file opened: screen/sprites.asm
  1+  AAFD              ;
  2+  AAFD              ; This is the sprite routine and expects coordinates in (c ,b) form,
  3+  AAFD              ; where c is the vertical coord from the top of the screen (0-176), and
  4+  AAFD              ; b is the horizontal coord from the left of the screen (0 to 240).
  5+  AAFD              ; Sprite data is stored as you'd expect in its unshifted form as this
  6+  AAFD              ; routine takes care of all the shifting itself. This means that sprite
  7+  AAFD              ; handling isn't particularly fast but the graphics only take 1/8th of the
  8+  AAFD              ; space they would require in pre-shifted form.
  9+  AAFD              ; Inputs:
 10+  AAFD              ; hl - sprite data
 11+  AAFD              ; bc - screen coords
 12+  AAFD              ;
 13+  AAFD              sprites_drawsprite7:
 14+  AAFD EE 07            xor 7               ; complement last 3 bits.
 15+  AAFF 3C               inc a               ; add one for luck!
 16+  AB00              sprites_drawsprite3:
 17+  AB00 CB 11            rl c                ; ...into middle byte...
 18+  AB02 CB 12            rl d                ; ...and finally into left character cell.
 19+  AB04 3D               dec a               ; count shifts we've done.
 20+  AB05 20 F9            jr nz,sprites_drawsprite3 ; return until all shifts complete.
 21+  AB07                                      ; Line of sprite image is now in e + c + d, we need it in form c + d + e.
 22+  AB07 79               ld a,c              ; left edge of image is currently in e.
 23+  AB08 4A               ld c,d              ; put right edge there instead.
 24+  AB09 57               ld d,a              ; and the left edge back into c.
 25+  AB0A 18 29            jr sprites_drawsprite0   ; we've done the switch so transfer to screen.
 26+  AB0C              sprites_drawsprite:
 27+  AB0C ED 43 23 AC      ld (origcoords),bc  ; store coords
 28+  AB10 ED 43 25 AC      ld (dispx),bc       ; store coords in dispx for now.
 29+  AB14 E5               push hl
 30+  AB15 CD 01 AC         call sprites_scadd  ; calculate screen address.
 31+  AB18 E1               pop hl
 32+  AB19 3E 08            ld a,8              ; height of sprite in pixels.
 33+  AB1B              sprites_drawsprite1:
 34+  AB1B 08               ex af,af'           ; store loop counter.
 35+  AB1C D5               push de             ; store screen address.
 36+  AB1D 4E               ld c,(hl)           ; first sprite graphic.
 37+  AB1E 23               inc hl              ; increment poiinter to sprite data.
 38+  AB1F 22 27 AC         ld (sprtmp),hl      ; store it for later.
 39+  AB22 16 00            ld d,0              ; blank right byte for now.
 40+  AB24 78               ld a,b              ; b holds y position.
 41+  AB25 E6 07            and 7               ; how are we straddling character cells?
 42+  AB27 28 0C            jr z,sprites_drawsprite0 ; we're not straddling them, don't bother shifting.
 43+  AB29 FE 05            cp 5                ; 5 or more right shifts needed?
 44+  AB2B 30 D0            jr nc,sprites_drawsprite7 ; yes, shift from left as it's quicker.
 45+  AB2D A7               and a               ; oops, carry flag is set so clear it.
 46+  AB2E              sprites_drawsprite2:
 47+  AB2E CB 19            rr c                ; rotate left byte right...
 48+  AB30 CB 1A            rr d                ; ...into right byte.
 49+  AB32 3D               dec a               ; one less shift to do.
 50+  AB33 20 F9            jr nz,sprites_drawsprite2 ; return until all shifts complete.
 51+  AB35              sprites_drawsprite0:
 52+  AB35 E1               pop hl              ; pop screen address from stack.
 53+  AB36 7E               ld a,(hl)           ; what's there already.
 54+  AB37 A9               xor c               ; merge in image data.
 55+  AB38 77               ld (hl),a           ; place onto screen.
 56+  AB39 23               inc hl
 57+  AB3A 7E               ld a,(hl)           ; what's already there.
 58+  AB3B AA               xor d               ; right edge of sprite image data.
 59+  AB3C 77               ld (hl),a           ; plonk it on screen.
 60+  AB3D 3A 25 AC         ld a,(dispx)        ; vertical coordinate.
 61+  AB40 3C               inc a               ; next line down.
 62+  AB41 32 25 AC         ld (dispx),a        ; store new position.
 63+  AB44 2B               dec hl
 64+  AB45 11 20 00         ld de,32            ; add 32 to get to the next row
 65+  AB48 19               add hl,de           ; add 32
 66+  AB49              sprites_drawsprite6:
 67+  AB49 EB               ex de,hl            ; screen address in de.
 68+  AB4A 2A 27 AC         ld hl,(sprtmp)      ; restore graphic address.
 69+  AB4D 08               ex af,af'           ; restore loop counter.
 70+  AB4E 3D               dec a               ; decrement it.
 71+  AB4F C2 1B AB         jp nz,sprites_drawsprite1 ; not reached bottom of sprite yet to repeat.
 72+  AB52 2E 02            ld l,2
 73+  AB54 CD C3 AB         call sprites_marklinesforupdatescreen
 74+  AB57 C9               ret                 ; job done.
 75+  AB58
 76+  AB58              ; Inputs:
 77+  AB58              ; hl - sprite data
 78+  AB58              ; bc - screen coords
 79+  AB58              ;
 80+  AB58              sprites_draw2by2sprite7
 81+  AB58 EE 07            xor 7               ; complement last 3 bits.
 82+  AB5A 3C               inc a               ; add one for luck!
 83+  AB5B              sprites_draw2by2sprite3
 84+  AB5B CB 12            rl d                ; rotate left...
 85+  AB5D CB 11            rl c                ; ...into middle byte...
 86+  AB5F CB 13            rl e                ; ...and finally into left character cell.
 87+  AB61 3D               dec a               ; count shifts we've done.
 88+  AB62 20 F7            jr nz,sprites_draw2by2sprite3 ; return until all shifts complete.
 89+  AB64                                      ; Line of sprite image is now in e + c + d, we need it in form c + d + e.
 90+  AB64 7B               ld a,e              ; left edge of image is currently in e.
 91+  AB65 5A               ld e,d              ; put right edge there instead.
 92+  AB66 51               ld d,c              ; middle bit goes in d.
 93+  AB67 4F               ld c,a              ; and the left edge back into c.
 94+  AB68 18 31            jr sprites_draw2by2sprite0 ; we've done the switch so transfer to screen.
 95+  AB6A              sprites_draw2by2sprite
 96+  AB6A ED 43 23 AC      ld (origcoords),bc  ; store coords
 97+  AB6E ED 43 25 AC      ld (dispx),bc       ; store coords in dispx for now.
 98+  AB72 79               ld a,c
 99+  AB73 32 29 AC         ld (sprtmp0),a         ; store vertical.
100+  AB76 E5               push hl
101+  AB77 CD 01 AC         call sprites_scadd          ; calculate screen address.
102+  AB7A E1               pop hl
103+  AB7B 3E 10            ld a,16             ; height of sprite in pixels.
104+  AB7D              sprites_draw2by2sprite1
105+  AB7D 08               ex af,af'           ; store loop counter.
106+  AB7E D5               push de             ; store screen address.
107+  AB7F 4E               ld c,(hl)           ; first sprite graphic.
108+  AB80 23               inc hl              ; increment poiinter to sprite data.
109+  AB81 56               ld d,(hl)           ; next bit of sprite image.
110+  AB82 23               inc hl              ; point to next row of sprite data.
111+  AB83 22 27 AC         ld (sprtmp),hl        ; store in tmp0 for later.
112+  AB86 1E 00            ld e,0              ; blank right byte for now.
113+  AB88 78               ld a,b              ; b holds y position.
114+  AB89 E6 07            and 7               ; how are we straddling character cells?
115+  AB8B 28 0E            jr z,sprites_draw2by2sprite0 ; we're not straddling them, don't bother shifting.
116+  AB8D FE 05            cp 5                ; 5 or more right shifts needed?
117+  AB8F 30 C7            jr nc,sprites_draw2by2sprite7 ; yes, shift from left as it's quicker.
118+  AB91 A7               and a               ; oops, carry flag is set so clear it.
119+  AB92              sprites_draw2by2sprite2
120+  AB92 CB 19            rr c                ; rotate left byte right...
121+  AB94 CB 1A            rr d                ; ...through middle byte...
122+  AB96 CB 1B            rr e                ; ...into right byte.
123+  AB98 3D               dec a               ; one less shift to do.
124+  AB99 20 F7            jr nz,sprites_draw2by2sprite2 ; return until all shifts complete.
125+  AB9B              sprites_draw2by2sprite0
126+  AB9B E1               pop hl              ; pop screen address from stack.
127+  AB9C 7E               ld a,(hl)           ; what's there already.
128+  AB9D A9               xor c               ; merge in image data.
129+  AB9E 77               ld (hl),a           ; place onto screen.
130+  AB9F 23               inc hl               ; next character cell to right please.
131+  ABA0 7E               ld a,(hl)           ; what's there already.
132+  ABA1 AA               xor d               ; merge with middle bit of image.
133+  ABA2 77               ld (hl),a           ; put back onto screen.
134+  ABA3 23               inc hl              ; next bit of screen area.
135+  ABA4 7E               ld a,(hl)           ; what's already there.
136+  ABA5 AB               xor e               ; right edge of sprite image data.
137+  ABA6 77               ld (hl),a           ; plonk it on screen.
138+  ABA7 3A 29 AC         ld a,(sprtmp0)         ; temporary vertical coordinate.
139+  ABAA 3C               inc a               ; next line down.
140+  ABAB 32 29 AC         ld (sprtmp0),a         ; store new position.
141+  ABAE 2B               dec hl
142+  ABAF 2B               dec hl
143+  ABB0 11 20 00         ld de,32            ; add 32 to get to the next row
144+  ABB3 19               add hl,de           ; add 32
145+  ABB4              sprites_draw2by2sprite6
146+  ABB4 EB               ex de,hl            ; screen address in de.
147+  ABB5 2A 27 AC         ld hl,(sprtmp)        ; restore graphic address.
148+  ABB8 08               ex af,af'           ; restore loop counter.
149+  ABB9 3D               dec a               ; decrement it.
150+  ABBA C2 7D AB         jp nz,sprites_draw2by2sprite1 ; not reached bottom of sprite yet to repeat.
151+  ABBD 2E 03            ld l,3
152+  ABBF CD C3 AB         call sprites_marklinesforupdatescreen
153+  ABC2 C9               ret                 ; job done.
154+  ABC3
155+  ABC3              ;
156+  ABC3              ; Marks lines for update with screen coords
157+  ABC3              ; Inputs:
158+  ABC3              ; l - number to update
159+  ABC3              ;
160+  ABC3              sprites_marklinesforupdatescreen:
161+  ABC3 F5               push af
162+  ABC4 ED 4B 23 AC      ld bc,(origcoords)
163+  ABC8 CD 3A AA         call screen_getcharcoordsfromscreencoords
164+  ABCB ED 43 23 AC      ld (origcoords),bc
165+  ABCF CD DE AB         call sprites_marklinesforupdate
166+  ABD2 F1               pop af
167+  ABD3 C9               ret
168+  ABD4
169+  ABD4              ;
170+  ABD4              ; Marks lines for update with char coords
171+  ABD4              ; Inputs:
172+  ABD4              ; l - number to update
173+  ABD4              ;
174+  ABD4              sprites_marklinesforupdatechar:
175+  ABD4 F5               push af
176+  ABD5 ED 43 23 AC      ld (origcoords),bc
177+  ABD9 CD DE AB         call sprites_marklinesforupdate
178+  ABDC F1               pop af
179+  ABDD C9               ret
180+  ABDE
181+  ABDE              ;
182+  ABDE              ; Marks lines for update
183+  ABDE              ; Inputs:
184+  ABDE              ; l - number to update
185+  ABDE              ;
186+  ABDE              sprites_marklinesforupdate:
187+  ABDE ED 4B 23 AC      ld bc,(origcoords)
188+  ABE2 ED 5B DA A8      ld de,(screen_offset)          ; load the screen offset, this is in rows
189+  ABE6 78               ld a,b
190+  ABE7 93               sub e
191+  ABE8 47               ld b,a
192+  ABE9 7D               ld a,l                          ; get loop counter
193+  ABEA              sprites_marklinesforupdate0:
194+  ABEA C5               push bc
195+  ABEB 08               ex af,af'                     ; store loop counter
196+  ABEC 78               ld a,b
197+  ABED CD 28 A7         call buffer_marklineforupdate ; mark this line for update
198+  ABF0 ED 4B 23 AC      ld bc,(origcoords)            ; move the coords for the next line
199+  ABF4 04               inc b
200+  ABF5 ED 43 23 AC      ld (origcoords),bc
201+  ABF9 C1               pop bc
202+  ABFA 04               inc b
203+  ABFB 08               ex af,af'                     ; restore loop counter
204+  ABFC 3D               dec a
205+  ABFD C2 EA AB         jp nz,sprites_marklinesforupdate0
206+  AC00 C9               ret
207+  AC01
208+  AC01              ;
209+  AC01              ; This routine returns a buffer address for (c, b) in de (c vert).
210+  AC01              ; For example: 0,0 will be at memory offset 0
211+  AC01              ; 1,0 (1 down) will be at memory offset 1
212+  AC01              ; 0,7 will be at memory offset 0
213+  AC01              ; 9,1 will be at memory offset 8+1
214+  AC01              ; 8,0 will be at memory offset 256
215+  AC01              ; 9,0 will be at memory offset 257
216+  AC01              ; Outputs:
217+  AC01              ; de - coords
218+  AC01              ;
219+  AC01              sprites_scadd:
220+  AC01 79               ld a,c               ; calculate vertical offset
221+  AC02 E6 F8            and 248             ;  to get nearest multiple of 8
222+  AC04 0F               rrca
223+  AC05 0F               rrca
224+  AC06 0F               rrca                ; divide by 8
225+  AC07 67               ld h,a
226+  AC08 78               ld a,b               ; calculate horizontal offset
227+  AC09 E6 F8            and 248             ;  to get nearest multiple of 8
228+  AC0B 0F               rrca
229+  AC0C 0F               rrca
230+  AC0D 0F               rrca                ; divide by 8
231+  AC0E 6F               ld l,a
232+  AC0F C5               push bc             ; store the screen coords
233+  AC10 44 4D            ld bc,hl            ; load bc with the character coords
234+  AC12 CD 56 AA         call screen_getbufferaddress
235+  AC15 C1               pop bc              ; get back screen coords, de is now memory of character
236+  AC16 79               ld a,c              ; now add the vertical within the cell
237+  AC17 E6 07            and 7
238+  AC19 0F               rrca                ; multiply by 32.
239+  AC1A 0F               rrca
240+  AC1B 0F               rrca
241+  AC1C 6F               ld l,a
242+  AC1D 26 00            ld h,0
243+  AC1F 19               add hl,de
244+  AC20 54 5D            ld de,hl
245+  AC22 C9               ret
246+  AC23
247+  AC23 00 00        origcoords   defb 0,0           ; general-use coordinates.
248+  AC25
249+  AC25 00           dispx   defb 0           ; general-use coordinates.
250+  AC26 00           dispy   defb 0
251+  AC27 00 00        sprtmp  defb 0,0           ; sprite temporary address.
252+  AC29 00 00        sprtmp0  defb 0,0           ; sprite temporary address.
253+  AC2B
# file closed: screen/sprites.asm
141   AC2B                  include "screen\titlescreen.asm"
# file opened: screen/titlescreen.asm
  1+  AC2B              ;
  2+  AC2B              ; Draws the title screen
  3+  AC2B              ;
  4+  AC2B              titlescreen_show:
  5+  AC2B CD DB AC         call titlescreen_preinit
  6+  AC2E CD 0A B1         call sound_gamestart
  7+  AC31 06 3C            ld b,60
  8+  AC33 CD 61 81         call utilities_pauseforframes         ; pause for a second
  9+  AC36              titlescreen_show2:
 10+  AC36 CD C8 AC         call titlescreen_init
 11+  AC39 CD 71 AC         call titlescreen_drawtitle
 12+  AC3C 3A 0B C4         ld a,(game_control)
 13+  AC3F FE 00            cp 0
 14+  AC41 CA 49 AC         jp z,titlescreen_show1
 15+  AC44 06 32            ld b,50
 16+  AC46 CD 61 81         call utilities_pauseforframes         ; pause for a second
 17+  AC49              titlescreen_show1:
 18+  AC49 3E FA            ld a,250                              ; wait for 200 frames
 19+  AC4B CD 22 81         call utilities_waitforkey_forframes   ; wait for keypress
 20+  AC4E 7B               ld a,e
 21+  AC4F FE 01            cp 1                                  ; was anything pressed?
 22+  AC51 C8               ret z                                 ; end titlescreen if so
 23+  AC52
 24+  AC52 CD E8 AC         call titlescreen_alt_init             ; otherwise, draw alt screen
 25+  AC55 CD 8D AC         call titlescreen_alt_drawtitle
 26+  AC58 3A 0B C4         ld a,(game_control)
 27+  AC5B FE 00            cp 0
 28+  AC5D CA 65 AC         jp z,titlescreen_show0
 29+  AC60 06 32            ld b,50
 30+  AC62 CD 61 81         call utilities_pauseforframes         ; pause for a second if joystick
 31+  AC65              titlescreen_show0:
 32+  AC65 3E FA            ld a,250                              ; wait for 200 frames
 33+  AC67 CD 22 81         call utilities_waitforkey_forframes   ; wait for keypress
 34+  AC6A 7B               ld a,e
 35+  AC6B FE 01            cp 1                                  ; was anything pressed?
 36+  AC6D C2 36 AC         jp nz,titlescreen_show2               ; start again if not
 37+  AC70 C9               ret
 38+  AC71
 39+  AC71              ;
 40+  AC71              ; Draws the iconic logo
 41+  AC71              ;
 42+  AC71              titlescreen_drawtitle:
 43+  AC71 06 67            ld b,103              ; number of points
 44+  AC73 DD 21 F5 AC      ld ix,titlescreen_logo_data
 45+  AC77              titlescreen_drawtitle0:
 46+  AC77 C5               push bc
 47+  AC78 DD 4E 00         ld c,(ix)                   ; got horiz
 48+  AC7B DD 23            inc ix
 49+  AC7D DD 46 00         ld b,(ix)                   ; got vert
 50+  AC80 DD 23            inc ix
 51+  AC82 CD 0F AA         call screen_getscreenattradress ; memory in de
 52+  AC85 13               inc de                      ; slide one to the right, since I'm too lazy to change the data
 53+  AC86 3E 13            ld a,19
 54+  AC88 12               ld (de),a
 55+  AC89 C1               pop bc
 56+  AC8A 10 EB            djnz titlescreen_drawtitle0 ; loop if we're not at the end
 57+  AC8C C9               ret
 58+  AC8D
 59+  AC8D              ;
 60+  AC8D              ; Draws the alternate title screen
 61+  AC8D              ;
 62+  AC8D              titlescreen_alt_drawtitle:
 63+  AC8D 21 25 82         ld hl,string_alttitlescreen_1
 64+  AC90 CD 28 86         call string_print
 65+  AC93 21 31 82         ld hl,string_alttitlescreen_2
 66+  AC96 CD 28 86         call string_print
 67+  AC99 21 2C 83         ld hl,string_alttitlescreen_3
 68+  AC9C CD 28 86         call string_print
 69+  AC9F 06 20            ld b,32
 70+  ACA1 3E 43            ld a,67
 71+  ACA3 11 00 58         ld de,22528                         ; top row attrs here
 72+  ACA6 CD 9D A9         call screen_setcolours
 73+  ACA9 06 20            ld b,32
 74+  ACAB 3E 46            ld a,70
 75+  ACAD 11 A0 59         ld de,22528+416                     ; 13th row attrs here
 76+  ACB0 CD 9D A9         call screen_setcolours
 77+  ACB3 06 20            ld b,32
 78+  ACB5 3E 43            ld a,67
 79+  ACB7 11 20 5A         ld de,22528+544                         ; 17th row attrs here
 80+  ACBA CD 9D A9         call screen_setcolours
 81+  ACBD 06 20            ld b,32
 82+  ACBF 3E 42            ld a,66
 83+  ACC1 11 A0 5A         ld de,22528+672                         ; 21st row attrs here
 84+  ACC4 CD 9D A9         call screen_setcolours
 85+  ACC7 C9               ret
 86+  ACC8
 87+  ACC8              ;
 88+  ACC8              ; Initialises the screen
 89+  ACC8              ;
 90+  ACC8              titlescreen_init:
 91+  ACC8              ; We want a black screen.
 92+  ACC8 3E 0B            ld a,11             ; magenta ink (7) on blue paper (0),
 93+  ACCA                                      ; bright (64).
 94+  ACCA CD 46 81         call utilities_clearscreen
 95+  ACCD 32 8D 5C         ld (23693),a        ; set our screen colours.
 96+  ACD0 3E 01            ld a,1              ; 2 is the code for red.
 97+  ACD2 D3 FE            out (254),a         ; write to port 254.
 98+  ACD4
 99+  ACD4 21 10 82         ld hl,string_titlescreen_copyright
100+  ACD7 CD 28 86         call string_print
101+  ACDA
102+  ACDA C9               ret
103+  ACDB
104+  ACDB              ;
105+  ACDB              ; Initialises the pre-screen
106+  ACDB              ;
107+  ACDB              titlescreen_preinit:
108+  ACDB              ; We want a red screen.
109+  ACDB 3E 10            ld a,16             ; magenta ink (7) on blue paper (0),
110+  ACDD                                      ; bright (64).
111+  ACDD CD 46 81         call utilities_clearscreen
112+  ACE0 32 8D 5C         ld (23693),a        ; set our screen colours.
113+  ACE3 3E 02            ld a,2              ; 2 is the code for red.
114+  ACE5 D3 FE            out (254),a         ; write to port 254.
115+  ACE7 C9               ret
116+  ACE8
117+  ACE8              ;
118+  ACE8              ; Initialises the screen
119+  ACE8              ;
120+  ACE8              titlescreen_alt_init:
121+  ACE8              ; We want a black screen.
122+  ACE8 3E 47            ld a,71             ; white ink (7) on black paper (0),
123+  ACEA                                      ; bright (64).
124+  ACEA CD 46 81         call utilities_clearscreen
125+  ACED 32 8D 5C         ld (23693),a        ; set our screen colours.
126+  ACF0 3E 00            ld a,0              ; 2 is the code for red.
127+  ACF2 D3 FE            out (254),a         ; write to port 254.
128+  ACF4
129+  ACF4 C9               ret
130+  ACF5
131+  ACF5              ;
132+  ACF5              ; Horiz, vert
133+  ACF5              ;
134+  ACF5              titlescreen_logo_data:
135+  ACF5 08 00 09 00      defb 8,0,9,0,10,0,12,0,15,0,17,0,18,0,19,0
135+  ACF9 0A 00 0C 00
135+  ACFD 0F 00 11 00
135+  AD01 12 00 13 00
136+  AD05 09 01 0C 01      defb 9,1,12,1,15,1,17,1
136+  AD09 0F 01 11 01
137+  AD0D 09 02 0C 02      defb 9,2,12,2,13,2,14,2,15,2,17,2,18,2,19,2
137+  AD11 0D 02 0E 02
137+  AD15 0F 02 11 02
137+  AD19 12 02 13 02
138+  AD1D 09 03 0C 03      defb 9,3,12,3,15,3,17,3
138+  AD21 0F 03 11 03
139+  AD25 09 04 0C 04      defb 9,4,12,4,15,4,17,4,18,4,19,4
139+  AD29 0F 04 11 04
139+  AD2D 12 04 13 04
140+  AD31 00 06 01 06      defb 0,6,1,6,2,6,3,6,4,6,5,6,6,6,7,6,8,6,9,6,10,6,11,6
140+  AD35 02 06 03 06
140+  AD39 04 06 05 06
140+  AD3D 06 06 07 06
140+  AD41 08 06 09 06
140+  AD45 0A 06 0B 06
141+  AD49 10 06 11 06      defb 16,6,17,6,18,6,19,6,20,6,21,6,22,6,23,6,24,6,25,6,26,6,27,6
141+  AD4D 12 06 13 06
141+  AD51 14 06 15 06
141+  AD55 16 06 17 06
141+  AD59 18 06 19 06
141+  AD5D 1A 06 1B 06
142+  AD61 02 07 02 08      defb 2,7,2,8,2,9,2,10,2,11,2,12,2,13,2,14,2,15,2,16,2,17,2,18,2,19,2,20,2,21
142+  AD65 02 09 02 0A
142+  AD69 02 0B 02 0C
142+  AD6D 02 0D 02 0E
142+  AD71 02 0F 02 10
142+  AD75 02 11 02 12
142+  AD79 02 13 02 14
142+  AD7D 02 15
143+  AD7F 19 07 19 08      defb 25,7,25,8,25,9,25,10,25,11,25,12,25,13,25,14,25,15,25,16,25,17,25,18,25,19,25,20,25,21
143+  AD83 19 09 19 0A
143+  AD87 19 0B 19 0C
143+  AD8B 19 0D 19 0E
143+  AD8F 19 0F 19 10
143+  AD93 19 11 19 12
143+  AD97 19 13 19 14
143+  AD9B 19 15
144+  AD9D 03 0B 04 0B      defb 3,11,4,11,5,11,6,11,7,11,8,11,9,11,10,11,11,11
144+  ADA1 05 0B 06 0B
144+  ADA5 07 0B 08 0B
144+  ADA9 09 0B 0A 0B
144+  ADAD 0B 0B
145+  ADAF 0B 07 0B 08      defb 11,7,11,8,11,9,11,10
145+  ADB3 0B 09 0B 0A
146+  ADB7 10 0D 10 0F      defb 16,13,16,15,16,16,16,17,16,18,16,19
146+  ADBB 10 10 10 11
146+  ADBF 10 12 10 13
147+  ADC3
# file closed: screen/titlescreen.asm
142   ADC3                  include "screen\lifescreen.asm"
# file opened: screen/lifescreen.asm
  1+  ADC3              ;
  2+  ADC3              ; Draws the life remaining screen
  3+  ADC3              ;
  4+  ADC3              lifescreen_draw:
  5+  ADC3 CD 16 AE         call lifescreen_init
  6+  ADC6
  7+  ADC6 3A 08 C4         ld a,(game_currentplayer)             ; get the current player
  8+  ADC9 C6 30            add 48                                ; add 48 to get char
  9+  ADCB 21 32 84         ld hl,string_lifescreen_player+10
 10+  ADCE 77               ld (hl),a                             ; load this to the string we're about to show
 11+  ADCF
 12+  ADCF 21 28 84         ld hl,string_lifescreen_player
 13+  ADD2 CD 28 86         call string_print
 14+  ADD5
 15+  ADD5 3A 00 C5         ld a,(player+9)                       ; get the current player lives
 16+  ADD8 C6 30            add 48                                ; add 48 to get the character
 17+  ADDA FE 31            cp 49
 18+  ADDC C2 EF AD         jp nz,lifescreen_draw0
 19+  ADDF 21 42 84         ld hl,string_lifescreen_lastman
 20+  ADE2
 21+  ADE2 06 08            ld b,8
 22+  ADE4 3E 0A            ld a,10                                ; set red
 23+  ADE6 11 6C 58         ld de,22528+108                        ; attrs here
 24+  ADE9 CD 9D A9         call screen_setcolours
 25+  ADEC
 26+  ADEC C3 F6 AD         jp lifescreen_draw1
 27+  ADEF              lifescreen_draw0:
 28+  ADEF 21 37 84         ld hl,string_lifescreen_lives+2       ; not last man, so use the normal view
 29+  ADF2 77               ld (hl),a                             ; load this to the string we're about to show
 30+  ADF3 21 35 84         ld hl,string_lifescreen_lives
 31+  ADF6              lifescreen_draw1:
 32+  ADF6 CD 28 86         call string_print
 33+  ADF9
 34+  ADF9 3E 86            ld a,134
 35+  ADFB 11 0B 58         ld de, 22528+11     ; get the colour for the top text
 36+  ADFE 06 0A            ld b,10
 37+  AE00 CD 9D A9         call screen_setcolours
 38+  AE03 3A 0B C4         ld a,(game_control)
 39+  AE06 FE 00            cp 0
 40+  AE08 CA 10 AE         jp z,lifescreen_draw2
 41+  AE0B 06 32            ld b,50
 42+  AE0D CD 61 81         call utilities_pauseforframes         ; pause for a second if joystick
 43+  AE10              lifescreen_draw2:
 44+  AE10 3E 64            ld a,100                              ; wait for 200 frames
 45+  AE12 CD 22 81         call utilities_waitforkey_forframes   ; wait for keypress
 46+  AE15
 47+  AE15 C9               ret
 48+  AE16
 49+  AE16              ;
 50+  AE16              ; Initialises the screen
 51+  AE16              ;
 52+  AE16              lifescreen_init:
 53+  AE16              ; We want a blue screen.
 54+  AE16                  ;call $0D6B
 55+  AE16 3E 0E            ld a,14             ; yellow ink (6) on blue paper (1),
 56+  AE18                                      ; bright (64).
 57+  AE18 CD 46 81         call utilities_clearscreen
 58+  AE1B 32 8D 5C         ld (23693),a        ; set our screen colours.
 59+  AE1E 3E 01            ld a,1              ; 1 is the code for blue.
 60+  AE20 D3 FE            out (254),a         ; write to port 254.
 61+  AE22                  ;call 3503           ; ROM routine - clears screen, opens chan 2.
 62+  AE22
 63+  AE22 C9               ret
# file closed: screen/lifescreen.asm
143   AE23                  include "screen\gameover.asm"
# file opened: screen/gameover.asm
  1+  AE23              ;
  2+  AE23              ; Draws the game over screen
  3+  AE23              ;
  4+  AE23              gameover_draw:
  5+  AE23 3E 01            ld a,1
  6+  AE25 32 08 C4         ld (game_currentplayer),a               ; do the first player first
  7+  AE28 CD 63 C5         call player_init_lifestart              ; get the player config
  8+  AE2B CD 7E AE         call gameover_enterhighscores
  9+  AE2E
 10+  AE2E 3A 07 C4         ld a,(game_numberplayers)               ; check if we need to do player 2
 11+  AE31 FE 02            cp 2
 12+  AE33 C2 41 AE         jp nz,gameover_draw0
 13+  AE36 3E 02            ld a,2
 14+  AE38 32 08 C4         ld (game_currentplayer),a               ; do the second player
 15+  AE3B CD 63 C5         call player_init_lifestart              ; get the player config
 16+  AE3E CD 7E AE         call gameover_enterhighscores
 17+  AE41              gameover_draw0:
 18+  AE41 CD 46 AF         call gameover_init
 19+  AE44
 20+  AE44 21 4D 84         ld hl,string_gameoverscreen_gameover
 21+  AE47 CD 28 86         call string_print
 22+  AE4A
 23+  AE4A 21 59 84         ld hl,string_gameoverscreen_copyright
 24+  AE4D CD 28 86         call string_print
 25+  AE50
 26+  AE50 CD 61 AE         call gameover_commontext
 27+  AE53
 28+  AE53 06 0B            ld b,11
 29+  AE55 3E 42            ld a,66
 30+  AE57 11 2B 58         ld de,22528+43                         ; attrs here
 31+  AE5A CD 9D A9         call screen_setcolours
 32+  AE5D CD 0D 81         call utilities_waitforkey   ; wait for keypress
 33+  AE60
 34+  AE60 C9               ret
 35+  AE61
 36+  AE61              ;
 37+  AE61              ; Draws text shared by the game over and high score screens
 38+  AE61              ;
 39+  AE61              gameover_commontext:
 40+  AE61 CD 61 A9         call screen_setuptext       ; show scores
 41+  AE64 CD 6F CC         call scores_printscores     ; print the current scores
 42+  AE67
 43+  AE67 21 81 84         ld hl,string_gameover_credits
 44+  AE6A CD 28 86         call string_print
 45+  AE6D
 46+  AE6D 21 6D 84         ld hl,string_gameoverscreen_bestscores
 47+  AE70 CD 28 86         call string_print
 48+  AE73
 49+  AE73 06 20            ld b,32
 50+  AE75 3E 45            ld a,69
 51+  AE77 11 C0 5A         ld de,22528+704                         ; attrs here
 52+  AE7A CD 9D A9         call screen_setcolours
 53+  AE7D
 54+  AE7D C9               ret
 55+  AE7E
 56+  AE7E              ;
 57+  AE7E              ; If required, enter highscore
 58+  AE7E              ;
 59+  AE7E              gameover_enterhighscores:
 60+  AE7E                  ; check if we need to enter initial
 61+  AE7E CD E0 CC         call scores_processhighscores
 62+  AE81
 63+  AE81 3A DE CC         ld a,(scores_highscoretmp)
 64+  AE84 FE 00            cp 0
 65+  AE86 C8               ret z
 66+  AE87 CD DC AE         call gameover_enterhighscores_init
 67+  AE8A                  ; Set the flash
 68+  AE8A 3A DE CC         ld a,(scores_highscoretmp)              ; scoretmp has the memory offset of the start of the number
 69+  AE8D 1E 05            ld e,5
 70+  AE8F 93               sub e                                   ; get the score position back to coords
 71+  AE90 11 00 00         ld de,0
 72+  AE93 5F               ld e,a                                  ; load into de
 73+  AE94 21 F4 CB         ld hl,scores_table
 74+  AE97 19               add hl,de                               ; get the memory location
 75+  AE98 4E 23 46 2B      ld bc,(hl)                              ; get the coords
 76+  AE9C CD 0F AA         call screen_getscreenattradress         ; get the memory location of the cell attr into de
 77+  AE9F 1A               ld a,(de)                               ; get the current attr
 78+  AEA0 F6 80            or 128                                  ; make it flash
 79+  AEA2 12               ld (de),a
 80+  AEA3 13               inc de
 81+  AEA4 12               ld (de),a
 82+  AEA5 13               inc de
 83+  AEA6 12               ld (de),a                               ; make all three flash
 84+  AEA7 3A DE CC         ld a,(scores_highscoretmp)              ; get the score back again
 85+  AEAA 3D               dec a
 86+  AEAB 3D               dec a
 87+  AEAC 3D               dec a                                   ; get high score location back to position of name
 88+  AEAD 16 00            ld d,0
 89+  AEAF 5F               ld e,a
 90+  AEB0 21 F4 CB         ld hl,scores_table
 91+  AEB3 19               add hl,de                               ; load memory into hl
 92+  AEB4 08               ex af,af'
 93+  AEB5 06 0F            ld b,15
 94+  AEB7 CD 61 81         call utilities_pauseforframes           ; pause for a little bit
 95+  AEBA 06 03            ld b,3                                  ; collect three chars
 96+  AEBC              gameover_enterhighscores2:
 97+  AEBC C5               push bc
 98+  AEBD E5               push hl
 99+  AEBE              gameover_enterhighscores3:
100+  AEBE CD 65 81         call utilities_readkey               ; get key into a
101+  AEC1 FE 41            cp 65
102+  AEC3 DA BE AE         jp c,gameover_enterhighscores3
103+  AEC6 FE 5B            cp 91
104+  AEC8 D2 BE AE         jp nc,gameover_enterhighscores3      ; if not a letter, get another
105+  AECB E1               pop hl
106+  AECC 77               ld (hl),a
107+  AECD 23               inc hl
108+  AECE E5               push hl
109+  AECF CD CB CC         call scores_showtable
110+  AED2 E1               pop hl
111+  AED3 06 0F            ld b,15
112+  AED5 CD 61 81         call utilities_pauseforframes
113+  AED8 C1               pop bc
114+  AED9 10 E1            djnz gameover_enterhighscores2
115+  AEDB C9               ret
116+  AEDC
117+  AEDC              ;
118+  AEDC              ; Displays the screen text for high score entry
119+  AEDC              ;
120+  AEDC              gameover_enterhighscores_init:
121+  AEDC
122+  AEDC CD 46 AF         call gameover_init
123+  AEDF CD 61 AE         call gameover_commontext
124+  AEE2
125+  AEE2 21 8D 84         ld hl,string_highscore_congratulations
126+  AEE5 CD 28 86         call string_print
127+  AEE8
128+  AEE8 3A 08 C4         ld a,(game_currentplayer)
129+  AEEB FE 01            cp 1
130+  AEED 21 9F 84         ld hl,string_highscore_player1
131+  AEF0 C3 F6 AE         jp gameover_enterhighscores_init1
132+  AEF3              gameover_enterhighscores_init0:
133+  AEF3 21 AA 84         ld hl,string_highscore_player2
134+  AEF6              gameover_enterhighscores_init1:
135+  AEF6 CD 28 86         call string_print
136+  AEF9 06 60            ld b,96
137+  AEFB 3E 43            ld a,67
138+  AEFD 11 A0 58         ld de,22528+160                         ; attrs here
139+  AF00 CD 9D A9         call screen_setcolours
140+  AF03
141+  AF03 21 B5 84         ld hl,string_highscore_youhaveearned
142+  AF06 CD 28 86         call string_print
143+  AF09
144+  AF09 3A DE CC         ld a,(scores_highscoretmp)
145+  AF0C FE 05            cp 5
146+  AF0E CA 1C AF         jp z, gameover_enterhighscores_init2    ; first place
147+  AF11 FE 11            cp 17
148+  AF13 CA 22 AF         jp z, gameover_enterhighscores_init3    ; 2nd place
149+  AF16 21 F1 84         ld hl,string_highscore_place3           ; 3rd place
150+  AF19 C3 28 AF         jp gameover_enterhighscores_init4
151+  AF1C              gameover_enterhighscores_init2
152+  AF1C 21 C7 84         ld hl,string_highscore_place1
153+  AF1F C3 28 AF         jp gameover_enterhighscores_init4
154+  AF22              gameover_enterhighscores_init3
155+  AF22 21 DC 84         ld hl,string_highscore_place2
156+  AF25 C3 28 AF         jp gameover_enterhighscores_init4
157+  AF28              gameover_enterhighscores_init4
158+  AF28 CD 28 86         call string_print
159+  AF2B
160+  AF2B 06 60            ld b,96
161+  AF2D 3E 42            ld a,66
162+  AF2F 11 40 59         ld de,22528+320                         ; attrs here
163+  AF32 CD 9D A9         call screen_setcolours
164+  AF35
165+  AF35 21 06 85         ld hl,string_highscore_pleaseenter
166+  AF38 CD 28 86         call string_print
167+  AF3B
168+  AF3B 06 60            ld b,96
169+  AF3D 3E 46            ld a,70
170+  AF3F 11 E0 59         ld de,22528+480                         ; attrs here
171+  AF42 CD 9D A9         call screen_setcolours
172+  AF45 C9               ret
173+  AF46
174+  AF46              ;
175+  AF46              ; Initialises the screen
176+  AF46              ;
177+  AF46              gameover_init:
178+  AF46              ; We want a black screen.
179+  AF46 3E 47            ld a,71             ; white ink (7) on black paper (0),
180+  AF48                                      ; bright (64).
181+  AF48 CD 46 81         call utilities_clearscreen
182+  AF4B 32 8D 5C         ld (23693),a        ; set our screen colours.
183+  AF4E 3E 00            ld a,0              ; 2 is the code for red.
184+  AF50 D3 FE            out (254),a         ; write to port 254.
185+  AF52 C9               ret
# file closed: screen/gameover.asm
144   AF53                  include "screen\endlevel.asm"
# file opened: screen/endlevel.asm
  1+  AF53              ;
  2+  AF53              ; Draws the level transition screen
  3+  AF53              ;
  4+  AF53              endlevel_draw:
  5+  AF53 CD 51 B0         call endlevel_init
  6+  AF56 CD 3A B0         call endlevel_commontext
  7+  AF59
  8+  AF59 21 8D 84         ld hl,string_highscore_congratulations
  9+  AF5C CD 28 86         call string_print
 10+  AF5F
 11+  AF5F 3A 08 C4         ld a,(game_currentplayer)
 12+  AF62 FE 01            cp 1
 13+  AF64 21 9F 84         ld hl,string_highscore_player1
 14+  AF67 C3 6D AF         jp endlevel_init1
 15+  AF6A              endlevel_init0:
 16+  AF6A 21 AA 84         ld hl,string_highscore_player2
 17+  AF6D              endlevel_init1:
 18+  AF6D CD 28 86         call string_print
 19+  AF70
 20+  AF70 21 23 85         ld hl,string_endlevel_youhaveearned
 21+  AF73 CD 28 86         call string_print
 22+  AF76
 23+  AF76 CD D9 AF         call endlevel_workoutbonus
 24+  AF79 D5               push de
 25+  AF7A 08               ex af,af'                               ; store the a value for later
 26+  AF7B CD 28 86         call string_print
 27+  AF7E D1               pop de
 28+  AF7F 62 6B            ld hl,de                                ; get the points text into de
 29+  AF81 CD 28 86         call string_print
 30+  AF84
 31+  AF84 21 8E 85         ld hl, string_endlevel_anothergo
 32+  AF87 CD 28 86         call string_print
 33+  AF8A
 34+  AF8A 06 20            ld b,32
 35+  AF8C 3E 23            ld a,35
 36+  AF8E 11 60 59         ld de,22528+352                         ; attrs here
 37+  AF91 CD 9D A9         call screen_setcolours
 38+  AF94
 39+  AF94 06 20            ld b,32
 40+  AF96 3E 25            ld a,37
 41+  AF98 11 A0 59         ld de,22528+416                         ; attrs here
 42+  AF9B CD 9D A9         call screen_setcolours
 43+  AF9E
 44+  AF9E 06 20            ld b,32
 45+  AFA0 3E 23            ld a,35
 46+  AFA2 11 E0 59         ld de,22528+480                         ; attrs here
 47+  AFA5 CD 9D A9         call screen_setcolours
 48+  AFA8
 49+  AFA8 06 20            ld b,32
 50+  AFAA 3E 22            ld a,34
 51+  AFAC 11 40 5A         ld de,22528+576                         ; attrs here
 52+  AFAF CD 9D A9         call screen_setcolours
 53+  AFB2
 54+  AFB2 08               ex af,af'                               ; get back a value with bonus type
 55+  AFB3 06 14            ld b,20
 56+  AFB5 CD 61 81         call utilities_pauseforframes
 57+  AFB8
 58+  AFB8 47               ld b,a                      ; put the bonus count in b
 59+  AFB9              endlevel_init2:
 60+  AFB9 C5               push bc
 61+  AFBA 06 01            ld b,1
 62+  AFBC CD 18 CC         call scores_addthousands
 63+  AFBF CD C2 C5         call player_recordcurrentstate
 64+  AFC2 CD 2F CC         call scores_printscore     ; print the current scores
 65+  AFC5 06 0A            ld b,10
 66+  AFC7 CD 61 81         call utilities_pauseforframes
 67+  AFCA C1               pop bc
 68+  AFCB 10 EC            djnz endlevel_init2
 69+  AFCD
 70+  AFCD CD AB C4         call game_increasedifficulty ; move the difficulty up a level
 71+  AFD0 CD C2 C5         call player_recordcurrentstate
 72+  AFD3
 73+  AFD3 3E 64            ld a,100                              ; wait for 200 frames
 74+  AFD5 CD 22 81         call utilities_waitforkey_forframes   ; wait for keypress
 75+  AFD8
 76+  AFD8 C9               ret
 77+  AFD9
 78+  AFD9              ;
 79+  AFD9              ; Works out the bonus
 80+  AFD9              ; Outputs:
 81+  AFD9              ; a = 15 (all seven)
 82+  AFD9              ; a = 10 (3 large or 4 small)
 83+  AFD9              ; a = 5 (1 large diamond)
 84+  AFD9              ; hl - pointer to bonus text
 85+  AFD9              ; de - pointer to points text
 86+  AFD9              ;
 87+  AFD9              endlevel_workoutbonus:
 88+  AFD9 21 D6 B7         ld hl,level_diamonds+2     ; location of state of first diamond
 89+  AFDC 06 03            ld b,3                      ; number to check
 90+  AFDE 16 00            ld d,0                      ; zero diamond count
 91+  AFE0              endlevel_workoutbonus0:
 92+  AFE0 7E               ld a,(hl)                   ; get state
 93+  AFE1 FE 01            cp 1
 94+  AFE3 C2 E7 AF         jp nz,endlevel_workoutbonus1 ; if not, move on
 95+  AFE6 14               inc d                       ; increment diamond count
 96+  AFE7              endlevel_workoutbonus1:
 97+  AFE7 23               inc hl
 98+  AFE8 23               inc hl
 99+  AFE9 23               inc hl
100+  AFEA 23               inc hl
101+  AFEB 23               inc hl                      ; get to next state
102+  AFEC 10 F2            djnz endlevel_workoutbonus0
103+  AFEE
104+  AFEE 21 E6 B7         ld hl,level_gems+2     ; location of state of first gem
105+  AFF1 06 04            ld b,4                      ; number to check
106+  AFF3 1E 00            ld e,0                      ; zero gem count
107+  AFF5              endlevel_workoutbonus2:
108+  AFF5 7E               ld a,(hl)                   ; get state
109+  AFF6 FE 01            cp 1
110+  AFF8 C2 FC AF         jp nz,endlevel_workoutbonus3 ; if not, move on
111+  AFFB 1C               inc e                       ; increment diamond count
112+  AFFC              endlevel_workoutbonus3:
113+  AFFC 23               inc hl
114+  AFFD 23               inc hl
115+  AFFE 23               inc hl
116+  AFFF 23               inc hl
117+  B000 23               inc hl                     ; get to next state
118+  B001 10 F2            djnz endlevel_workoutbonus2
119+  B003
120+  B003 7A               ld a,d
121+  B004 83               add e
122+  B005 FE 07            cp 7                        ; check for max bonus
123+  B007 C2 13 B0         jp nz,endlevel_workoutbonus4 ;
124+  B00A 3E 0F            ld a,15
125+  B00C 21 53 85         ld hl, string_endlevel_bonus3
126+  B00F 11 7F 85         ld de, string_endlevel_points3
127+  B012 C9               ret                         ; return with bonus of 15
128+  B013              endlevel_workoutbonus4:
129+  B013 7A               ld a,d                      ; check for for diamonds
130+  B014 FE 03            cp 3
131+  B016 C2 22 B0         jp nz,endlevel_workoutbonus5
132+  B019 3E 0A            ld a,10
133+  B01B 21 44 85         ld hl, string_endlevel_bonus2
134+  B01E 11 70 85         ld de, string_endlevel_points2
135+  B021 C9               ret                         ; return with bonus of ten
136+  B022              endlevel_workoutbonus5:
137+  B022 7B               ld a,e                      ; check for four gems
138+  B023 FE 04            cp 4
139+  B025 C2 31 B0         jp nz,endlevel_workoutbonus6
140+  B028 3E 0A            ld a,10
141+  B02A 21 44 85         ld hl, string_endlevel_bonus2
142+  B02D 11 70 85         ld de, string_endlevel_points2
143+  B030 C9               ret                         ; return with bonus of 10
144+  B031              endlevel_workoutbonus6:
145+  B031 3E 05            ld a,5                      ; otherwise, bonus is 5
146+  B033 21 35 85         ld hl, string_endlevel_bonus1
147+  B036 11 62 85         ld de, string_endlevel_points1
148+  B039 C9               ret
149+  B03A
150+  B03A              ;
151+  B03A              ; Draws text shared by the game over and high score screens
152+  B03A              ;
153+  B03A              endlevel_commontext:
154+  B03A CD 61 A9         call screen_setuptext       ; show scores
155+  B03D CD 6F CC         call scores_printscores     ; print the current scores
156+  B040
157+  B040 21 6D 84         ld hl,string_gameoverscreen_bestscores
158+  B043 CD 28 86         call string_print
159+  B046
160+  B046 06 20            ld b,32
161+  B048 3E 45            ld a,69
162+  B04A 11 C0 5A         ld de,22528+704                         ; attrs here
163+  B04D CD 9D A9         call screen_setcolours
164+  B050
165+  B050 C9               ret
166+  B051
167+  B051              ;
168+  B051              ; Initialises the screen
169+  B051              ;
170+  B051              endlevel_init:
171+  B051              ; We want a green screen.
172+  B051 3E 21            ld a,33             ; white ink (7) on black paper (0),
173+  B053                                      ; bright (64).
174+  B053 CD 46 81         call utilities_clearscreen
175+  B056 32 8D 5C         ld (23693),a        ; set our screen colours.
176+  B059 3E 00            ld a,0              ; 2 is the code for red.
177+  B05B D3 FE            out (254),a         ; write to port 254.
178+  B05D C9               ret
# file closed: screen/endlevel.asm
145   B05E                  include "screen\options.asm"
# file opened: screen/options.asm
  1+  B05E              ;
  2+  B05E              ; Show the options screen
  3+  B05E              ;
  4+  B05E              options_show:
  5+  B05E CD F9 B0         call options_init
  6+  B061
  7+  B061 21 A9 85         ld hl,string_options_title
  8+  B064 CD 28 86         call string_print
  9+  B067 21 B3 85         ld hl,string_options_1player
 10+  B06A CD 28 86         call string_print
 11+  B06D 21 C3 85         ld hl,string_options_2player
 12+  B070 CD 28 86         call string_print
 13+  B073 21 D3 85         ld hl,string_options_keyboard
 14+  B076 CD 28 86         call string_print
 15+  B079 21 E1 85         ld hl,string_options_joystick
 16+  B07C CD 28 86         call string_print
 17+  B07F 21 EF 85         ld hl,string_options_start
 18+  B082 CD 28 86         call string_print
 19+  B085 21 FA 85         ld hl,string_options_vanity
 20+  B088 CD 28 86         call string_print
 21+  B08B
 22+  B08B 3A 07 C4         ld a,(game_numberplayers)
 23+  B08E FE 01            cp 1
 24+  B090 C2 99 B0         jp nz,options_show0
 25+  B093 11 CA 58         ld de,22528+202                         ; top row attrs here
 26+  B096 C3 9C B0         jp options_show1
 27+  B099              options_show0:
 28+  B099 11 EA 58         ld de,22528+234                         ; top row attrs here
 29+  B09C              options_show1:
 30+  B09C 06 0D            ld b,13
 31+  B09E 3E C7            ld a,199
 32+  B0A0 CD 9D A9         call screen_setcolours                  ; highlight current player
 33+  B0A3
 34+  B0A3 3A 0B C4         ld a,(game_control)
 35+  B0A6 FE 00            cp 0
 36+  B0A8 C2 B1 B0         jp nz,options_show6
 37+  B0AB 11 0A 59         ld de,22528+266                         ; top row attrs here
 38+  B0AE C3 B4 B0         jp options_show7
 39+  B0B1              options_show6:
 40+  B0B1 11 2A 59         ld de,22528+298                         ; top row attrs here
 41+  B0B4              options_show7:
 42+  B0B4 06 0D            ld b,13
 43+  B0B6 3E C7            ld a,199
 44+  B0B8 CD 9D A9         call screen_setcolours                  ; highlight current control
 45+  B0BB              options_show8:
 46+  B0BB CD 65 81         call utilities_readkey
 47+  B0BE FE 31            cp 49                                   ; was 1 pressed
 48+  B0C0 C2 CB B0         jp nz,options_show2
 49+  B0C3 21 07 C4         ld hl,game_numberplayers
 50+  B0C6 36 01            ld (hl),1
 51+  B0C8 C3 5E B0         jp options_show
 52+  B0CB              options_show2:
 53+  B0CB FE 32            cp 50                                   ; was 2 pressed
 54+  B0CD C2 D8 B0         jp nz,options_show3
 55+  B0D0 21 07 C4         ld hl,game_numberplayers
 56+  B0D3 36 02            ld (hl),2
 57+  B0D5 C3 5E B0         jp options_show
 58+  B0D8              options_show3:
 59+  B0D8 FE 33            cp 51                                   ; was 3 pressed
 60+  B0DA C2 E5 B0         jp nz,options_show4
 61+  B0DD 21 0B C4         ld hl,game_control
 62+  B0E0 36 00            ld (hl),0
 63+  B0E2 C3 5E B0         jp options_show
 64+  B0E5              options_show4:
 65+  B0E5 FE 34            cp 52                                   ; was 4 pressed
 66+  B0E7 C2 F2 B0         jp nz,options_show5
 67+  B0EA 21 0B C4         ld hl,game_control
 68+  B0ED 36 01            ld (hl),1
 69+  B0EF C3 5E B0         jp options_show
 70+  B0F2              options_show5:
 71+  B0F2 FE 35            cp 53                                   ; was 5 pressed
 72+  B0F4 C8               ret z                                   ; exit if so
 73+  B0F5 C3 BB B0         jp options_show8                         ; otherwise, jump to top
 74+  B0F8 C9               ret
 75+  B0F9
 76+  B0F9              ;
 77+  B0F9              ; Initialise the options screen
 78+  B0F9              ;
 79+  B0F9              options_init:
 80+  B0F9 3E 47            ld a,71             ; white ink (7) on black paper (0),
 81+  B0FB                                      ; bright (64).
 82+  B0FB CD 46 81         call utilities_clearscreen
 83+  B0FE 32 8D 5C         ld (23693),a        ; set our screen colours.
 84+  B101 3E 00            ld a,0              ; 2 is the code for red.
 85+  B103 D3 FE            out (254),a         ; write to port 254.
 86+  B105
 87+  B105 C9               ret
 88+  B106 C9               ret
# file closed: screen/options.asm
146   B107
147   B107                  include "sound\sound.asm"
# file opened: sound/sound.asm
  1+  B107              sound_dig:
  2+  B107 D9               exx
  3+  B108
  4+  B108 D9               exx
  5+  B109 C9           	ret
  6+  B10A
  7+  B10A              sound_gamestart:
  8+  B10A F3               di
  9+  B10B 06 03            ld b,3
 10+  B10D              sound_gamestart0:
 11+  B10D C5               push bc
 12+  B10E 21 2A 02         ld hl,554 ; pitch.
 13+  B111 11 96 00         ld de,150 ; duration.
 14+  B114 3E 10            ld a,16
 15+  B116 E6 F8            and 248
 16+  B118 CD B5 03         call 949 ; ROM beeper routine.
 17+  B11B 3E 02            ld a,2              ; 2 is the code for red.
 18+  B11D D3 FE            out (254),a         ; write to port 254.
 19+  B11F 21 10 03         ld hl,784 ; pitch.
 20+  B122 11 96 00         ld de,150 ; duration.
 21+  B125 3E 10            ld a,16
 22+  B127 E6 F8            and 248
 23+  B129 CD B5 03         call 949 ; ROM beeper routine.
 24+  B12C 3E 02            ld a,2              ; 2 is the code for red.
 25+  B12E D3 FE            out (254),a         ; write to port 254.
 26+  B130 C1               pop bc
 27+  B131 10 DA            djnz sound_gamestart0
 28+  B133 FB               ei
 29+  B134 C9               ret
 30+  B135
 31+  B135
 32+  B135              sound_laser:
 33+  B135 16 10        	ld d,16		            ;speaker = bit 4
 34+  B137 1E 00        	ld e,0		            ;distance between speaker move counter
 35+  B139 06 80        	ld b,128	            ;overall length counter
 36+  B13B              sound_laser0:
 37+  B13B 7A               ld a,d
 38+  B13C E6 F8        	and 248		            ;keep border colour the same
 39+  B13E D3 FE        	out (254),a	            ;move the speaker in or out depending on bit 4
 40+  B140 2F           	cpl		                ;toggle, so we alternative between speaker in and out to make sound
 41+  B141 57           	ld d,a		            ;store it
 42+  B142 4B           	ld c,e		            ;now a pause
 43+  B143              sound_laser1:
 44+  B143 0D               dec c
 45+  B144 20 FD        	jr nz,sound_laser1
 46+  B146 1D           	dec e		            ;change to inc e to reverse the sound, or remove to make it a note
 47+  B147 10 F2        	djnz sound_laser0	;repeat B=255 times
 48+  B149 C9           	ret
 49+  B14A
 50+  B14A              sound_gemcollected:
 51+  B14A 16 10        	ld d,16		            ;speaker = bit 4
 52+  B14C 1E 00        	ld e,0		            ;distance between speaker move counter
 53+  B14E 06 80        	ld b,128	            ;overall length counter
 54+  B150              sound_gemcollected0:
 55+  B150 7A               ld a,d
 56+  B151 E6 F8        	and 248		            ;keep border colour the same
 57+  B153 D3 FE        	out (254),a	            ;move the speaker in or out depending on bit 4
 58+  B155 2F           	cpl		                ;toggle, so we alternative between speaker in and out to make sound
 59+  B156 57           	ld d,a		            ;store it
 60+  B157 4B           	ld c,e		            ;now a pause
 61+  B158              sound_gemcollected1:
 62+  B158 0D               dec c
 63+  B159 20 FD        	jr nz,sound_gemcollected1
 64+  B15B 1C           	inc e		            ;change to inc e to reverse the sound, or remove to make it a note
 65+  B15C 10 F2        	djnz sound_gemcollected0	;repeat B=255 times
 66+  B15E C9           	ret
 67+  B15F
 68+  B15F              sound_pitchbend:
 69+  B15F 21 F4 01         ld hl,500 ; starting pitch.
 70+  B162 06 FA            ld b,250 ; length of pitch bend.
 71+  B164              sound_pitchbend0:
 72+  B164 C5                push bc
 73+  B165 E5               push hl ; store pitch.
 74+  B166 11 01 00         ld de,1 ; very short duration.
 75+  B169 CD B5 03         call 949 ; ROM beeper routine.
 76+  B16C E1               pop hl ; restore pitch.
 77+  B16D 23               inc hl ; pitch going up.
 78+  B16E C1               pop bc
 79+  B16F 10 F3            djnz sound_pitchbend0 ; repeat.
 80+  B171 C9               ret
 81+  B172
 82+  B172              sound_rockfell:
 83+  B172 08               ex af,af'
 84+  B173 1E 32            ld e,50 ; repeat 250 times.
 85+  B175 21 00 00         ld hl,0 ; start pointer in ROM.
 86+  B178              sound_rockfell2
 87+  B178 D5               push de
 88+  B179 06 20            ld b,32 ; length of step.
 89+  B17B C5           sound_rockfell0 push bc
 90+  B17C 7E               ld a,(hl) ; next "random" number.
 91+  B17D 23               inc hl ; pointer.
 92+  B17E E6 F8            and 248 ; we want a black border.
 93+  B180 D3 FE            out (254),a ; write to speaker.
 94+  B182 7B               ld a,e ; as e gets smaller...
 95+  B183 2F               cpl ; ...we increase the delay.
 96+  B184 3D           sound_rockfell1 dec a ; decrement loop counter.
 97+  B185 20 FD            jr nz,sound_rockfell1 ; delay loop.
 98+  B187 C1               pop bc
 99+  B188 10 F1            djnz sound_rockfell0 ; next step.
100+  B18A D1               pop de
101+  B18B 7B               ld a,e
102+  B18C D6 18            sub 24 ; size of step.
103+  B18E FE 1E            cp 30 ; end of range.
104+  B190 CA A1 B1         jp z,sound_rockfell5
105+  B193 DA A1 B1         jp c, sound_rockfell5
106+  B196 5F               ld e,a
107+  B197 2F               cpl
108+  B198 06 28        sound_rockfell3 ld b,40 ; silent period.
109+  B19A 10 FE        sound_rockfell4 djnz sound_rockfell4
110+  B19C 3D               dec a
111+  B19D 20 F9            jr nz,sound_rockfell3
112+  B19F 18 D7            jr sound_rockfell2
113+  B1A1              sound_rockfell5
114+  B1A1 08               ex af,af'
115+  B1A2 C9               ret
116+  B1A3
117+  B1A3              sound_tankshoot:
118+  B1A3 08               ex af,af'
119+  B1A4 1E 32            ld e,50 ; repeat 250 times.
120+  B1A6 21 00 00         ld hl,0 ; start pointer in ROM.
121+  B1A9              sound_tankshoot2
122+  B1A9 D5               push de
123+  B1AA 06 08            ld b,8 ; length of step.
124+  B1AC C5           sound_tankshoot0 push bc
125+  B1AD 7E               ld a,(hl) ; next "random" number.
126+  B1AE 23               inc hl ; pointer.
127+  B1AF E6 F8            and 248 ; we want a black border.
128+  B1B1 D3 FE            out (254),a ; write to speaker.
129+  B1B3 7B               ld a,e ; as e gets smaller...
130+  B1B4 2F               cpl ; ...we increase the delay.
131+  B1B5 3D           sound_tankshoot1 dec a ; decrement loop counter.
132+  B1B6 20 FD            jr nz,sound_tankshoot1 ; delay loop.
133+  B1B8 C1               pop bc
134+  B1B9 10 F1            djnz sound_tankshoot0 ; next step.
135+  B1BB D1               pop de
136+  B1BC 7B               ld a,e
137+  B1BD D6 18            sub 24 ; size of step.
138+  B1BF FE 1E            cp 30 ; end of range.
139+  B1C1 CA D2 B1         jp z,sound_tankshoot5
140+  B1C4 DA D2 B1         jp c, sound_tankshoot5
141+  B1C7 5F               ld e,a
142+  B1C8 2F               cpl
143+  B1C9 06 28        sound_tankshoot3 ld b,40 ; silent period.
144+  B1CB 10 FE        sound_tankshoot4 djnz sound_tankshoot4
145+  B1CD 3D               dec a
146+  B1CE 20 F9            jr nz,sound_tankshoot3
147+  B1D0 18 D7            jr sound_tankshoot2
148+  B1D2              sound_tankshoot5
149+  B1D2 08               ex af,af'
150+  B1D3 C9               ret
151+  B1D4
# file closed: sound/sound.asm
148   B1D4
149   B1D4                  include "leveldata\level.asm"
# file opened: leveldata/level.asm
  1+  B1D4              ; ###############################################################
  2+  B1D4              ; Data for level 1
  3+  B1D4              ; ###############################################################
  4+  B1D4              level_layout:
  5+  B1D4
  6+  B1D4                  ;defb 09,04,04,04,04,04,04,04,04,04,04,04,04,04,04,09,09,04,04,04,04,04,04,04,04,04,04,04,04,04,04,09
  7+  B1D4
  8+  B1D4 00 00 05 05      defb 00,00,05,05,05,05,05,05,05,05,05,05,05,05,02,01,01,01,03,05,05,05,05,05,05,05,05,05,05,05,00,00
  8+  B1D8 05 05 05 05
  8+  B1DC 05 05 05 05
  8+  B1E0 05 05 02 01
  8+  B1E4 01 01 03 05
  8+  B1E8 05 05 05 05
  8+  B1EC 05 05 05 05
  8+  B1F0 05 05 00 00
  9+  B1F4 00 00 05 05      defb 00,00,05,05,05,05,05,05,05,05,05,05,02,01,01,01,01,01,01,01,03,05,05,05,05,05,05,05,05,05,00,00
  9+  B1F8 05 05 05 05
  9+  B1FC 05 05 05 05
  9+  B200 02 01 01 01
  9+  B204 01 01 01 01
  9+  B208 03 05 05 05
  9+  B20C 05 05 05 05
  9+  B210 05 05 00 00
 10+  B214 00 00 05 05      defb 00,00,05,05,05,05,05,05,05,05,02,01,01,01,01,01,01,01,01,01,01,01,03,05,13,13,13,13,13,13,00,00
 10+  B218 05 05 05 05
 10+  B21C 05 05 02 01
 10+  B220 01 01 01 01
 10+  B224 01 01 01 01
 10+  B228 01 01 03 05
 10+  B22C 0D 0D 0D 0D
 10+  B230 0D 0D 00 00
 11+  B234 00 00 01 01      defb 00,00,01,01,01,01,00,01,01,01,01,01,01,01,01,01,01,01,01,01,01,01,01,03,05,05,05,05,05,05,00,00
 11+  B238 01 01 00 01
 11+  B23C 01 01 01 01
 11+  B240 01 01 01 01
 11+  B244 01 01 01 01
 11+  B248 01 01 01 03
 11+  B24C 05 05 05 05
 11+  B250 05 05 00 00
 12+  B254 00 00 01 01      defb 00,00,01,01,04,04,04,04,04,04,01,01,01,01,01,01,01,01,01,01,01,01,01,01,01,01,01,01,00,01,00,00
 12+  B258 04 04 04 04
 12+  B25C 04 04 01 01
 12+  B260 01 01 01 01
 12+  B264 01 01 01 01
 12+  B268 01 01 01 01
 12+  B26C 01 01 01 01
 12+  B270 00 01 00 00
 13+  B274 00 00 01 04      defb 00,00,01,04,04,04,04,04,04,04,04,04,01,01,01,01,01,01,01,01,01,01,01,01,00,00,00,00,00,01,00,00
 13+  B278 04 04 04 04
 13+  B27C 04 04 04 04
 13+  B280 01 01 01 01
 13+  B284 01 01 01 01
 13+  B288 01 01 01 01
 13+  B28C 00 00 00 00
 13+  B290 00 01 00 00
 14+  B294 00 00 01 04      defb 00,00,01,04,04,01,01,01,01,01,04,04,04,04,01,01,01,01,01,01,01,00,00,00,00,01,01,01,01,01,00,00
 14+  B298 04 01 01 01
 14+  B29C 01 01 04 04
 14+  B2A0 04 04 01 01
 14+  B2A4 01 01 01 01
 14+  B2A8 01 00 00 00
 14+  B2AC 00 01 01 01
 14+  B2B0 01 01 00 00
 15+  B2B4 00 00 01 04      defb 00,00,01,04,04,04,04,04,04,01,04,04,04,04,04,04,04,04,00,00,00,00,04,04,04,04,04,04,04,01,00,00
 15+  B2B8 04 04 04 04
 15+  B2BC 04 01 04 04
 15+  B2C0 04 04 04 04
 15+  B2C4 04 04 00 00
 15+  B2C8 00 00 04 04
 15+  B2CC 04 04 04 04
 15+  B2D0 04 01 00 00
 16+  B2D4 00 00 01 01      defb 00,00,01,01,01,04,01,01,01,01,04,04,04,04,04,04,04,04,00,04,04,04,04,04,04,04,04,04,04,01,00,00
 16+  B2D8 01 04 01 01
 16+  B2DC 01 01 04 04
 16+  B2E0 04 04 04 04
 16+  B2E4 04 04 00 04
 16+  B2E8 04 04 04 04
 16+  B2EC 04 04 04 04
 16+  B2F0 04 01 00 00
 17+  B2F4 00 00 01 00      defb 00,00,01,00,00,00,00,00,00,04,04,04,04,04,04,04,04,04,00,04,04,04,04,04,04,04,04,04,04,01,00,00
 17+  B2F8 00 00 00 00
 17+  B2FC 00 04 04 04
 17+  B300 04 04 04 04
 17+  B304 04 04 00 04
 17+  B308 04 04 04 04
 17+  B30C 04 04 04 04
 17+  B310 04 01 00 00
 18+  B314 00 00 01 15      defb 00,00,01,21,21,21,21,21,21,01,04,04,04,04,04,04,04,04,00,04,04,04,04,04,04,04,04,04,04,01,00,00
 18+  B318 15 15 15 15
 18+  B31C 15 01 04 04
 18+  B320 04 04 04 04
 18+  B324 04 04 00 04
 18+  B328 04 04 04 04
 18+  B32C 04 04 04 04
 18+  B330 04 01 00 00
 19+  B334 00 00 01 00      defb 00,00,01,00,00,00,00,00,00,01,04,04,04,04,04,04,04,04,00,04,04,04,04,04,04,00,00,00,00,01,00,00
 19+  B338 00 00 00 00
 19+  B33C 00 01 04 04
 19+  B340 04 04 04 04
 19+  B344 04 04 00 04
 19+  B348 04 04 04 04
 19+  B34C 04 00 00 00
 19+  B350 00 01 00 00
 20+  B354 00 00 01 00      defb 00,00,01,00,00,00,00,00,00,01,04,04,04,04,04,04,04,04,00,04,04,04,04,04,04,00,04,04,00,01,00,00
 20+  B358 00 00 00 00
 20+  B35C 00 01 04 04
 20+  B360 04 04 04 04
 20+  B364 04 04 00 04
 20+  B368 04 04 04 04
 20+  B36C 04 00 04 04
 20+  B370 00 01 00 00
 21+  B374 00 00 01 06      defb 00,00,01,06,06,06,06,06,06,01,04,04,04,04,04,04,04,04,00,04,04,04,04,04,04,00,04,04,00,01,00,00
 21+  B378 06 06 06 06
 21+  B37C 06 01 04 04
 21+  B380 04 04 04 04
 21+  B384 04 04 00 04
 21+  B388 04 04 04 04
 21+  B38C 04 00 04 04
 21+  B390 00 01 00 00
 22+  B394 00 00 01 1A      defb 00,00,01,26,26,26,26,26,26,01,04,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,04,04,00,01,00,00
 22+  B398 1A 1A 1A 1A
 22+  B39C 1A 01 04 00
 22+  B3A0 00 00 00 00
 22+  B3A4 00 00 00 00
 22+  B3A8 00 00 00 00
 22+  B3AC 00 00 04 04
 22+  B3B0 00 01 00 00
 23+  B3B4 00 00 01 1A      defb 00,00,01,26,26,26,26,26,26,01,04,00,04,04,04,04,04,04,00,04,04,04,00,04,04,04,04,04,00,01,00,00
 23+  B3B8 1A 1A 1A 1A
 23+  B3BC 1A 01 04 00
 23+  B3C0 04 04 04 04
 23+  B3C4 04 04 00 04
 23+  B3C8 04 04 00 04
 23+  B3CC 04 04 04 04
 23+  B3D0 00 01 00 00
 24+  B3D4 00 00 01 1A      defb 00,00,01,26,26,26,26,26,26,01,04,00,04,04,04,04,04,04,00,04,04,04,00,04,04,04,04,04,00,01,00,00
 24+  B3D8 1A 1A 1A 1A
 24+  B3DC 1A 01 04 00
 24+  B3E0 04 04 04 04
 24+  B3E4 04 04 00 04
 24+  B3E8 04 04 00 04
 24+  B3EC 04 04 04 04
 24+  B3F0 00 01 00 00
 25+  B3F4 00 00 01 01      defb 00,00,01,01,01,01,01,01,01,01,04,00,04,04,04,04,04,04,00,04,04,04,00,04,04,04,04,04,00,01,00,00
 25+  B3F8 01 01 01 01
 25+  B3FC 01 01 04 00
 25+  B400 04 04 04 04
 25+  B404 04 04 00 04
 25+  B408 04 04 00 04
 25+  B40C 04 04 04 04
 25+  B410 00 01 00 00
 26+  B414 00 00 01 04      defb 00,00,01,04,04,04,04,04,04,04,04,00,04,04,04,04,04,04,00,04,04,04,00,00,00,00,04,04,04,01,00,00
 26+  B418 04 04 04 04
 26+  B41C 04 04 04 00
 26+  B420 04 04 04 04
 26+  B424 04 04 00 04
 26+  B428 04 04 00 00
 26+  B42C 00 00 04 04
 26+  B430 04 01 00 00
 27+  B434 00 00 01 04      defb 00,00,01,04,04,04,00,00,00,00,00,00,04,04,04,04,04,04,00,04,04,04,04,04,04,00,04,04,04,01,00,00
 27+  B438 04 04 00 00
 27+  B43C 00 00 00 00
 27+  B440 04 04 04 04
 27+  B444 04 04 00 04
 27+  B448 04 04 04 04
 27+  B44C 04 00 04 04
 27+  B450 04 01 00 00
 28+  B454 00 00 01 04      defb 00,00,01,04,04,04,00,04,04,04,04,04,04,04,04,04,04,04,00,04,04,04,04,04,04,00,04,04,04,01,00,00
 28+  B458 04 04 00 04
 28+  B45C 04 04 04 04
 28+  B460 04 04 04 04
 28+  B464 04 04 00 04
 28+  B468 04 04 04 04
 28+  B46C 04 00 04 04
 28+  B470 04 01 00 00
 29+  B474 00 00 01 04      defb 00,00,01,04,04,04,00,04,04,04,01,01,01,01,01,01,01,01,01,01,01,01,01,01,04,00,04,04,04,01,00,00
 29+  B478 04 04 00 04
 29+  B47C 04 04 01 01
 29+  B480 01 01 01 01
 29+  B484 01 01 01 01
 29+  B488 01 01 01 01
 29+  B48C 04 00 04 04
 29+  B490 04 01 00 00
 30+  B494 00 00 01 04      defb 00,00,01,04,04,04,00,04,04,04,01,00,00,00,00,00,00,00,00,00,00,00,00,01,04,00,04,04,04,01,00,00
 30+  B498 04 04 00 04
 30+  B49C 04 04 01 00
 30+  B4A0 00 00 00 00
 30+  B4A4 00 00 00 00
 30+  B4A8 00 00 00 01
 30+  B4AC 04 00 04 04
 30+  B4B0 04 01 00 00
 31+  B4B4 00 00 01 04      defb 00,00,01,04,04,04,00,04,04,04,01,00,00,00,00,00,00,00,00,00,00,00,00,01,04,00,04,04,04,01,00,00
 31+  B4B8 04 04 00 04
 31+  B4BC 04 04 01 00
 31+  B4C0 00 00 00 00
 31+  B4C4 00 00 00 00
 31+  B4C8 00 00 00 01
 31+  B4CC 04 00 04 04
 31+  B4D0 04 01 00 00
 32+  B4D4 00 00 01 04      defb 00,00,01,04,04,04,00,04,04,04,01,00,00,00,00,00,00,00,00,00,00,00,00,01,04,00,04,04,04,01,00,00
 32+  B4D8 04 04 00 04
 32+  B4DC 04 04 01 00
 32+  B4E0 00 00 00 00
 32+  B4E4 00 00 00 00
 32+  B4E8 00 00 00 01
 32+  B4EC 04 00 04 04
 32+  B4F0 04 01 00 00
 33+  B4F4 00 00 01 04      defb 00,00,01,04,04,04,00,04,04,04,04,00,00,00,00,00,00,00,00,00,00,00,00,04,04,04,04,04,04,01,00,00
 33+  B4F8 04 04 00 04
 33+  B4FC 04 04 04 00
 33+  B500 00 00 00 00
 33+  B504 00 00 00 00
 33+  B508 00 00 00 04
 33+  B50C 04 04 04 04
 33+  B510 04 01 00 00
 34+  B514 00 00 01 04      defb 00,00,01,04,04,04,04,04,04,04,01,00,00,00,00,00,00,00,00,00,00,00,00,01,04,04,04,04,04,01,00,00
 34+  B518 04 04 04 04
 34+  B51C 04 04 01 00
 34+  B520 00 00 00 00
 34+  B524 00 00 00 00
 34+  B528 00 00 00 01
 34+  B52C 04 04 04 04
 34+  B530 04 01 00 00
 35+  B534 00 00 01 04      defb 00,00,01,04,04,04,04,04,04,04,01,00,00,00,01,00,00,00,00,01,00,00,00,01,04,04,04,04,04,01,00,00
 35+  B538 04 04 04 04
 35+  B53C 04 04 01 00
 35+  B540 00 00 01 00
 35+  B544 00 00 00 01
 35+  B548 00 00 00 01
 35+  B54C 04 04 04 04
 35+  B550 04 01 00 00
 36+  B554 00 00 01 01      defb 00,00,01,01,01,01,01,01,01,01,01,01,01,01,01,01,01,01,01,01,01,01,01,01,01,01,01,01,01,01,00,00
 36+  B558 01 01 01 01
 36+  B55C 01 01 01 01
 36+  B560 01 01 01 01
 36+  B564 01 01 01 01
 36+  B568 01 01 01 01
 36+  B56C 01 01 01 01
 36+  B570 01 01 00 00
 37+  B574
 38+  B574              ; ###############################################################
 39+  B574              ; Object data: horiz, vert, state, memh, meml
 40+  B574              ; ###############################################################
 41+  B574              level_rocks:
 42+  B574 09 04 00 00      defb 9,4,0,0,0
 42+  B578 00
 43+  B579 0C 07 00 00      defb 12,7,0,0,0
 43+  B57D 00
 44+  B57E 10 07 00 00      defb 16,7,0,0,0
 44+  B582 00
 45+  B583 0B 08 00 00      defb 11,8,0,0,0
 45+  B587 00
 46+  B588 0A 0A 00 00      defb 10,10,0,0,0
 46+  B58C 00
 47+  B58D 0C 0A 00 00      defb 12,10,0,0,0
 47+  B591 00
 48+  B592 0D 09 00 00      defb 13,9,0,0,0
 48+  B596 00
 49+  B597 0E 08 00 00      defb 14,8,0,0,0
 49+  B59B 00
 50+  B59C 0F 0B 00 00      defb 15,11,0,0,0
 50+  B5A0 00
 51+  B5A1 0B 0C 00 00      defb 11,12,0,0,0
 51+  B5A5 00
 52+  B5A6 11 0C 00 00      defb 17,12,0,0,0
 52+  B5AA 00
 53+  B5AB 13 08 00 00      defb 19,8,0,0,0
 53+  B5AF 00
 54+  B5B0 16 09 00 00      defb 22,9,0,0,0
 54+  B5B4 00
 55+  B5B5 13 0A 00 00      defb 19,10,0,0,0
 55+  B5B9 00
 56+  B5BA 15 0A 00 00      defb 21,10,0,0,0
 56+  B5BE 00
 57+  B5BF 15 0C 00 00      defb 21,12,0,0,0
 57+  B5C3 00
 58+  B5C4 16 0C 00 00      defb 22,12,0,0,0
 58+  B5C8 00
 59+  B5C9 18 0A 00 00      defb 24,10,0,0,0
 59+  B5CD 00
 60+  B5CE 19 09 00 00      defb 25,9,0,0,0
 60+  B5D2 00
 61+  B5D3 1C 09 00 00      defb 28,9,0,0,0
 61+  B5D7 00
 62+  B5D8 1B 0C 00 00      defb 27,12,0,0,0
 62+  B5DC 00
 63+  B5DD 1A 0D 00 00      defb 26,13,0,0,0
 63+  B5E1 00
 64+  B5E2 19 0E 00 00      defb 25,14,0,0,0
 64+  B5E6 00
 65+  B5E7 19 10 00 00      defb 25,16,0,0,0
 65+  B5EB 00
 66+  B5EC 1A 11 00 00      defb 26,17,0,0,0
 66+  B5F0 00
 67+  B5F1 1B 11 00 00      defb 27,17,0,0,0
 67+  B5F5 00
 68+  B5F6 1C 12 00 00      defb 28,18,0,0,0
 68+  B5FA 00
 69+  B5FB 1A 13 00 00      defb 26,19,0,0,0
 69+  B5FF 00
 70+  B600 1B 15 00 00      defb 27,21,0,0,0
 70+  B604 00
 71+  B605 1A 17 00 00      defb 26,23,0,0,0
 71+  B609 00
 72+  B60A 1B 18 00 00      defb 27,24,0,0,0
 72+  B60E 00
 73+  B60F 19 18 00 00      defb 25,24,0,0,0
 73+  B613 00
 74+  B614 18 17 00 00      defb 24,23,0,0,0
 74+  B618 00
 75+  B619 13 14 00 00      defb 19,20,0,0,0
 75+  B61D 00
 76+  B61E 14 12 00 00      defb 20,18,0,0,0
 76+  B622 00
 77+  B623 14 10 00 00      defb 20,16,0,0,0
 77+  B627 00
 78+  B628 15 10 00 00      defb 21,16,0,0,0
 78+  B62C 00
 79+  B62D 16 12 00 00      defb 22,18,0,0,0
 79+  B631 00
 80+  B632 11 14 00 00      defb 17,20,0,0,0
 80+  B636 00
 81+  B637 0D 11 00 00      defb 13,17,0,0,0
 81+  B63B 00
 82+  B63C 0C 13 00 00      defb 12,19,0,0,0
 82+  B640 00
 83+  B641 0B 13 00 00      defb 11,19,0,0,0
 83+  B645 00
 84+  B646 0A 11 00 00      defb 10,17,0,0,0
 84+  B64A 00
 85+  B64B 05 12 00 00      defb 5,18,0,0,0
 85+  B64F 00
 86+  B650 07 16 00 00      defb 7,22,0,0,0
 86+  B654 00
 87+  B655 09 16 00 00      defb 9,22,0,0,0
 87+  B659 00
 88+  B65A 07 18 00 00      defb 7,24,0,0,0
 88+  B65E 00
 89+  B65F 05 18 00 00      defb 5,24,0,0,0
 89+  B663 00
 90+  B664 06 19 00 00      defb 6,25,0,0,0
 90+  B668 00
 91+  B669 08 19 00 00      defb 8,25,0,0,0
 91+  B66D 00
 92+  B66E 04 17 00 00      defb 4,23,0,0,0
 92+  B672 00
 93+  B673 FF               defb 255
 94+  B674
 95+  B674              level_rocks_alt:
 96+  B674 09 04 00 00      defb 9,4,0,0,0
 96+  B678 00
 97+  B679 0C 07 00 00      defb 12,7,0,0,0
 97+  B67D 00
 98+  B67E 0B 07 00 00      defb 11,7,0,0,0
 98+  B682 00
 99+  B683 0A 08 00 00      defb 10,8,0,0,0
 99+  B687 00
100+  B688 10 07 00 00      defb 16,7,0,0,0
100+  B68C 00
101+  B68D 0E 08 00 00      defb 14,8,0,0,0
101+  B691 00
102+  B692 0D 09 00 00      defb 13,9,0,0,0
102+  B696 00
103+  B697 0C 0A 00 00      defb 12,10,0,0,0
103+  B69B 00
104+  B69C 0A 0B 00 00      defb 10,11,0,0,0
104+  B6A0 00
105+  B6A1 0B 0C 00 00      defb 11,12,0,0,0
105+  B6A5 00
106+  B6A6 0F 0B 00 00      defb 15,11,0,0,0
106+  B6AA 00
107+  B6AB 11 0C 00 00      defb 17,12,0,0,0
107+  B6AF 00
108+  B6B0 15 0B 00 00      defb 21,11,0,0,0
108+  B6B4 00
109+  B6B5 16 0C 00 00      defb 22,12,0,0,0
109+  B6B9 00
110+  B6BA 19 09 00 00      defb 25,9,0,0,0
110+  B6BE 00
111+  B6BF 1C 09 00 00      defb 28,9,0,0,0
111+  B6C3 00
112+  B6C4 1B 0C 00 00      defb 27,12,0,0,0
112+  B6C8 00
113+  B6C9 1B 0E 00 00      defb 27,14,0,0,0
113+  B6CD 00
114+  B6CE 1A 0F 00 00      defb 26,15,0,0,0
114+  B6D2 00
115+  B6D3 1B 10 00 00      defb 27,16,0,0,0
115+  B6D7 00
116+  B6D8 1C 12 00 00      defb 28,18,0,0,0
116+  B6DC 00
117+  B6DD 1A 13 00 00      defb 26,19,0,0,0
117+  B6E1 00
118+  B6E2 1A 15 00 00      defb 26,21,0,0,0
118+  B6E6 00
119+  B6E7 1B 17 00 00      defb 27,23,0,0,0
119+  B6EB 00
120+  B6EC 1A 17 00 00      defb 26,23,0,0,0
120+  B6F0 00
121+  B6F1 19 18 00 00      defb 25,24,0,0,0
121+  B6F5 00
122+  B6F6 18 17 00 00      defb 24,23,0,0,0
122+  B6FA 00
123+  B6FB 17 10 00 00      defb 23,16,0,0,0
123+  B6FF 00
124+  B700 15 10 00 00      defb 21,16,0,0,0
124+  B704 00
125+  B705 14 12 00 00      defb 20,18,0,0,0
125+  B709 00
126+  B70A 13 14 00 00      defb 19,20,0,0,0
126+  B70E 00
127+  B70F 10 13 00 00      defb 16,19,0,0,0
127+  B713 00
128+  B714 0D 14 00 00      defb 13,20,0,0,0
128+  B718 00
129+  B719 0E 11 00 00      defb 14,17,0,0,0
129+  B71D 00
130+  B71E 0C 12 00 00      defb 12,18,0,0,0
130+  B722 00
131+  B723 0A 11 00 00      defb 10,17,0,0,0
131+  B727 00
132+  B728 05 12 00 00      defb 5,18,0,0,0
132+  B72C 00
133+  B72D 09 14 00 00      defb 9,20,0,0,0
133+  B731 00
134+  B732 08 15 00 00      defb 8,21,0,0,0
134+  B736 00
135+  B737 07 16 00 00      defb 7,22,0,0,0
135+  B73B 00
136+  B73C 08 17 00 00      defb 8,23,0,0,0
136+  B740 00
137+  B741 07 18 00 00      defb 7,24,0,0,0
137+  B745 00
138+  B746 08 1A 00 00      defb 8,26,0,0,0
138+  B74A 00
139+  B74B 06 19 00 00      defb 6,25,0,0,0
139+  B74F 00
140+  B750 05 18 00 00      defb 5,24,0,0,0
140+  B754 00
141+  B755 04 17 00 00      defb 4,23,0,0,0
141+  B759 00
142+  B75A FF               defb 255
143+  B75B
144+  B75B              level_missiles:
145+  B75B 0B 17 00 00      defb 11,23,0,0,0
145+  B75F 00
146+  B760 0B 16 00 00      defb 11,22,0,0,0
146+  B764 00
147+  B765 0C 17 00 00      defb 12,23,0,0,0
147+  B769 00
148+  B76A 0C 16 00 00      defb 12,22,0,0,0
148+  B76E 00
149+  B76F 0D 17 00 00      defb 13,23,0,0,0
149+  B773 00
150+  B774 0D 16 00 00      defb 13,22,0,0,0
150+  B778 00
151+  B779 0E 17 00 00      defb 14,23,0,0,0
151+  B77D 00
152+  B77E 0E 16 00 00      defb 14,22,0,0,0
152+  B782 00
153+  B783 0F 17 00 00      defb 15,23,0,0,0
153+  B787 00
154+  B788 0F 16 00 00      defb 15,22,0,0,0
154+  B78C 00
155+  B78D 10 17 00 00      defb 16,23,0,0,0
155+  B791 00
156+  B792 10 16 00 00      defb 16,22,0,0,0
156+  B796 00
157+  B797 11 17 00 00      defb 17,23,0,0,0
157+  B79B 00
158+  B79C 11 16 00 00      defb 17,22,0,0,0
158+  B7A0 00
159+  B7A1 12 17 00 00      defb 18,23,0,0,0
159+  B7A5 00
160+  B7A6 12 16 00 00      defb 18,22,0,0,0
160+  B7AA 00
161+  B7AB 13 17 00 00      defb 19,23,0,0,0
161+  B7AF 00
162+  B7B0 13 16 00 00      defb 19,22,0,0,0
162+  B7B4 00
163+  B7B5 14 17 00 00      defb 20,23,0,0,0
163+  B7B9 00
164+  B7BA 14 16 00 00      defb 20,22,0,0,0
164+  B7BE 00
165+  B7BF 15 17 00 00      defb 21,23,0,0,0
165+  B7C3 00
166+  B7C4 15 16 00 00      defb 21,22,0,0,0
166+  B7C8 00
167+  B7C9 16 17 00 00      defb 22,23,0,0,0
167+  B7CD 00
168+  B7CE 16 16 00 00      defb 22,22,0,0,0
168+  B7D2 00
169+  B7D3 FF               defb 255
170+  B7D4
171+  B7D4              ;
172+  B7D4              ; Diamonds: x,y,state,mem1+mem2
173+  B7D4              ;
174+  B7D4              level_diamonds:
175+  B7D4 0C 1B 00 00      defb 12,27,0,0,0
175+  B7D8 00
176+  B7D9 10 1B 00 00      defb 16,27,0,0,0
176+  B7DD 00
177+  B7DE 15 1B 00 00      defb 21,27,0,0,0
177+  B7E2 00
178+  B7E3 FF               defb 255
179+  B7E4
180+  B7E4              level_gems:
181+  B7E4 12 14 00 00      defb 18,20,0,0,0
181+  B7E8 00
182+  B7E9 06 18 00 00      defb 6,24,0,0,0
182+  B7ED 00
183+  B7EE 19 17 00 00      defb 25,23,0,0,0
183+  B7F2 00
184+  B7F3 1C 11 00 00      defb 28,17,0,0,0
184+  B7F7 00
185+  B7F8 FF               defb 255
186+  B7F9              ;
187+  B7F9              ; Score area colours
188+  B7F9              ;
189+  B7F9              score_colours:
190+  B7F9 47 47 47 47      defb 71,71,71,71,71,71,71,71,71,71,71,66,67,67,67,67,67,67,67,67,66,71,71,71,71,71,71,71,71,71,71,71
190+  B7FD 47 47 47 47
190+  B801 47 47 47 42
190+  B805 43 43 43 43
190+  B809 43 43 43 43
190+  B80D 42 47 47 47
190+  B811 47 47 47 47
190+  B815 47 47 47 47
191+  B819 47 47 47 47      defb 71,71,71,71,71,71,71,71,71,71,71,70,70,70,70,70,70,70,70,70,70,71,71,71,71,71,71,71,71,71,71,71
191+  B81D 47 47 47 47
191+  B821 47 47 47 46
191+  B825 46 46 46 46
191+  B829 46 46 46 46
191+  B82D 46 47 47 47
191+  B831 47 47 47 47
191+  B835 47 47 47 47
192+  B839
193+  B839              high_score_colours:
194+  B839 00 00 00 42      defb  0, 0, 0,66,66,66,71,71,71,71,71,71,67,67,67,71,71,71,71,71,71,70,70,70,71,71,71,71,71,71,0,0
194+  B83D 42 42 47 47
194+  B841 47 47 47 47
194+  B845 43 43 43 47
194+  B849 47 47 47 47
194+  B84D 47 46 46 46
194+  B851 47 47 47 47
194+  B855 47 47 00 00
# file closed: leveldata/level.asm
150   B859                  include "graphics\font.asm"
# file opened: graphics/font.asm
  1+  B859              font:
  2+  B859 00 00 00...  	defs 256
  3+  B959              	; end 1
  4+  B959 00 00 00 00  	defb	  0,  0,  0,  0,  0,  0,  0,  0 ; space
  4+  B95D 00 00 00 00
  5+  B961 18 18 18 18  	defb	  24, 24, 24, 24, 24,  0, 24, 0 ;!
  5+  B965 18 00 18 00
  6+  B969 00 00 00 00  	defb	  0,  0,  0,  0,  0,  0,  0,  0 ; "
  6+  B96D 00 00 00 00
  7+  B971 00 00 00 00  	defb	  0,  0,  0,  0,  0,  0,  0,  0 ; #
  7+  B975 00 00 00 00
  8+  B979 00 00 00 00  	defb	  0,  0,  0,  0,  0,  0,  0,  0 ; $
  8+  B97D 00 00 00 00
  9+  B981 00 00 00 00  	defb	  0,  0,  0,  0,  0,  0,  0,  0 ; %
  9+  B985 00 00 00 00
 10+  B989 00 00 00 00  	defb	  0,  0,  0,  0,  0,  0,  0,  0 ; &
 10+  B98D 00 00 00 00
 11+  B991 00 00 00 00  	defb	  0,  0,  0,  0,  0,  0,  0,  0 ; '
 11+  B995 00 00 00 00
 12+  B999 00 00 00 00  	defb	  0,  0,  0,  0,  0,  0,  0,  0 ; (
 12+  B99D 00 00 00 00
 13+  B9A1 00 00 00 00  	defb	  0,  0,  0,  0,  0,  0,  0,  0 ; )
 13+  B9A5 00 00 00 00
 14+  B9A9 00 00 00 00  	defb	  0,  0,  0,  0,  0,  0,  0,  0 ; *
 14+  B9AD 00 00 00 00
 15+  B9B1 00 00 00 00  	defb	  0,  0,  0,  0,  0,  0,  0,  0 ; +
 15+  B9B5 00 00 00 00
 16+  B9B9 00 00 00 00  	defb	  0,  0,  0,  0,  0,  8, 24,  0 ; ,
 16+  B9BD 00 08 18 00
 17+  B9C1 00 00 00 3C  	defb	  0,  0,  0, 60,  0,  0,  0,  0 ; -
 17+  B9C5 00 00 00 00
 18+  B9C9 00 00 00 00  	defb	  0,  0,  0,  0,  0,  24,24,  0 ; .
 18+  B9CD 00 18 18 00
 19+  B9D1 00 00 00 00  	defb	  0,  0,  0,  0,  0,  0,  0,  0 ; /
 19+  B9D5 00 00 00 00
 20+  B9D9 1C 26 63 63  	defb	 28, 38, 99, 99, 99, 50, 28,  0 ; 0
 20+  B9DD 63 32 1C 00
 21+  B9E1 0C 1C 0C 0C  	defb	   12, 28, 12, 12, 12, 12, 63,0 ; 1
 21+  B9E5 0C 0C 3F 00
 22+  B9E9 3E 63 07 1E  	defb	  62, 99,  7, 30, 60, 96,127, 0 ; 2
 22+  B9ED 3C 60 7F 00
 23+  B9F1 3F 06 0C 1E  	defb	  63,  6, 12, 30,  3, 51, 30, 0 ; 3
 23+  B9F5 03 33 1E 00
 24+  B9F9 0E 1E 36 66  	defb	  14, 30, 54,102,127,  6,  6, 0 ; 4
 24+  B9FD 7F 06 06 00
 25+  BA01 7E 40 7E 03  	defb	 126, 64,126,  3,  3, 99, 62, 0 ; 5
 25+  BA05 03 63 3E 00
 26+  BA09 1E 30 60 7E  	defb	 30, 48, 96,126, 99, 99, 62,  0 ; 6
 26+  BA0D 63 63 3E 00
 27+  BA11 7F 63 06 0C  	defb	  127, 99,  6, 12, 24, 24, 24,0 ; 7
 27+  BA15 18 18 18 00
 28+  BA19 3C 62 72 3C  	defb	  60, 98,114, 60, 79, 67,62,0   ; 8
 28+  BA1D 4F 43 3E 00
 29+  BA21 3E 63 63 3F  	defb	  62, 99, 99, 63,  3,  6, 60, 0 ; 9
 29+  BA25 03 06 3C 00
 30+  BA29 00 00 18 18  	defb	  0,  0, 24, 24,  0,  24,24,  0 ; :
 30+  BA2D 00 18 18 00
 31+  BA31 00 00 00 00  	defb	  0,  0,  0,  0,  0,  0,  0,  0 ; ;
 31+  BA35 00 00 00 00
 32+  BA39 00 00 00 00  	defb	  0,  0,  0,  0,  0,  0,  0,  0 ; <
 32+  BA3D 00 00 00 00
 33+  BA41 00 00 00 00  	defb	  0,  0,  0,  0,  0,  0,  0,  0 ; =
 33+  BA45 00 00 00 00
 34+  BA49 00 00 00 00  	defb	  0,  0,  0,  0,  0,  0,  0,  0 ; >
 34+  BA4D 00 00 00 00
 35+  BA51 00 00 00 00  	defb	  0,  0,  0,  0,  0,  0,  0,  0 ; ?
 35+  BA55 00 00 00 00
 36+  BA59              	; end 2
 37+  BA59 00 00 00 00  	defb	  0,  0,  0,  0,  0,  0,  0,  0 ; @
 37+  BA5D 00 00 00 00
 38+  BA61 1C 36 63 63  	defb	  28, 54, 99, 99,127, 99, 99, 0 ; A
 38+  BA65 7F 63 63 00
 39+  BA69 7E 63 63 7E  	defb	  126, 99, 99,126, 99, 99,126,0 ; B
 39+  BA6D 63 63 7E 00
 40+  BA71 1E 33 60 60  	defb	  30, 51, 96, 96, 96, 51, 30, 0 ; C
 40+  BA75 60 33 1E 00
 41+  BA79 7C 66 63 63  	defb	  124,102, 99, 99, 99,102,124,0 ; D
 41+  BA7D 63 66 7C 00
 42+  BA81 7F 60 60 7E  	defb	  127, 96, 96,126, 96, 96,127,0 ; E
 42+  BA85 60 60 7F 00
 43+  BA89 7F 60 60 7E  	defb	  127, 96, 96,126, 96, 96, 96,0 ; F
 43+  BA8D 60 60 60 00
 44+  BA91 1F 30 60 67  	defb	  31, 48, 96,103, 99, 51, 31, 0 ; G
 44+  BA95 63 33 1F 00
 45+  BA99 63 63 63 7F  	defb	  99, 99, 99,127, 99, 99, 99, 0 ; H
 45+  BA9D 63 63 63 00
 46+  BAA1 3F 0C 0C 0C  	defb	  63, 12, 12, 12, 12, 12, 63, 0 ; I
 46+  BAA5 0C 0C 3F 00
 47+  BAA9 03 03 03 03  	defb	  3,  3,  3,  3,  3, 99, 62,  0 ; J
 47+  BAAD 03 63 3E 00
 48+  BAB1 63 66 6C 78  	defb	  99,102,108,120,124,110,103, 0 ; K
 48+  BAB5 7C 6E 67 00
 49+  BAB9 30 30 30 30  	defb	  48, 48, 48, 48, 48, 48, 63, 0 ; L
 49+  BABD 30 30 3F 00
 50+  BAC1 63 77 7F 7F  	defb	  99,119,127,127,107, 99, 99, 0 ; M
 50+  BAC5 6B 63 63 00
 51+  BAC9 63 73 7B 7F  	defb	  99,115,123,127,111,103, 99, 0 ; N
 51+  BACD 6F 67 63 00
 52+  BAD1 3E 63 63 63  	defb	  62, 99, 99, 99, 99, 99, 62, 0 ; O
 52+  BAD5 63 63 3E 00
 53+  BAD9 7E 61 61 61  	defb	  126, 97, 97, 97,126, 96, 96,0 ; P
 53+  BADD 7E 60 60 00
 54+  BAE1 3E 63 63 63  	defb	  62, 99, 99, 99,111,102, 61, 0 ; Q
 54+  BAE5 6F 66 3D 00
 55+  BAE9 7E 63 63 67  	defb	  126, 99, 99,103,124,110,103,0 ; R
 55+  BAED 7C 6E 67 00
 56+  BAF1 3C 66 60 3E  	defb	  60,102, 96, 62,  3, 99, 62, 0 ; S
 56+  BAF5 03 63 3E 00
 57+  BAF9 7E 18 18 18  	defb	  126, 24, 24, 24, 24, 24, 24,0 ; T
 57+  BAFD 18 18 18 00
 58+  BB01 63 63 63 63  	defb	  99, 99, 99, 99, 99, 99, 62, 0 ; U
 58+  BB05 63 63 3E 00
 59+  BB09 63 63 63 77  	defb	  99, 99, 99,119, 62, 28,  8, 0 ; V
 59+  BB0D 3E 1C 08 00
 60+  BB11 63 63 6B 7F  	defb	  99, 99,107,127,127, 54, 34, 0 ; W
 60+  BB15 7F 36 22 00
 61+  BB19 63 77 3E 1C  	defb	  99,119, 62, 28, 62,119, 99, 0 ; X
 61+  BB1D 3E 77 63 00
 62+  BB21 33 33 12 1E  	defb	  51, 51, 18, 30, 12, 12, 12, 0 ; Y
 62+  BB25 0C 0C 0C 00
 63+  BB29 7F 07 0E 1C  	defb	  127,  7, 14, 28, 56,112,127,0 ; Z
 63+  BB2D 38 70 7F 00
 64+  BB31 00 00 00 00  	defb	  0,  0,  0,  0,  0,  0,  0,  0 ; [
 64+  BB35 00 00 00 00
 65+  BB39 00 00 00 00  	defb	  0,  0,  0,  0,  0,  0,  0,  0 ; \
 65+  BB3D 00 00 00 00
 66+  BB41 00 00 00 00  	defb	  0,  0,  0,  0,  0,  0,  0,  0 ; ]
 66+  BB45 00 00 00 00
 67+  BB49 00 00 00 00  	defb	  0,  0,  0,  0,  0,  0,  0,  0 ; ^
 67+  BB4D 00 00 00 00
 68+  BB51 00 00 00 00  	defb	  0,  0,  0,  0,  0,  0,  0,  0 ; _
 68+  BB55 00 00 00 00
 69+  BB59              	; end 3
 70+  BB59 00 00 00 00  	defb	  0,  0,  0,  0,  0,  0,  0,  0 ; £
 70+  BB5D 00 00 00 00
 71+  BB61 1C 36 63 63  	defb	  28, 54, 99, 99,127, 99, 99, 0 ; A
 71+  BB65 7F 63 63 00
 72+  BB69 7E 63 63 7E  	defb	  126, 99, 99,126, 99, 99,126,0 ; B
 72+  BB6D 63 63 7E 00
 73+  BB71 1E 33 60 60  	defb	  30, 51, 96, 96, 96, 51, 30, 0 ; C
 73+  BB75 60 33 1E 00
 74+  BB79 7C 66 63 63  	defb	  124,102, 99, 99, 99,102,124,0 ; D
 74+  BB7D 63 66 7C 00
 75+  BB81 7F 60 60 7E  	defb	  127, 96, 96,126, 96, 96,127,0 ; E
 75+  BB85 60 60 7F 00
 76+  BB89 7F 60 60 7E  	defb	  127, 96, 96,126, 96, 96, 96,0 ; F
 76+  BB8D 60 60 60 00
 77+  BB91 1F 30 60 67  	defb	  31, 48, 96,103, 99, 51, 31, 0 ; G
 77+  BB95 63 33 1F 00
 78+  BB99 63 63 63 7F  	defb	  99, 99, 99,127, 99, 99, 99, 0 ; H
 78+  BB9D 63 63 63 00
 79+  BBA1 3F 0C 0C 0C  	defb	  63, 12, 12, 12, 12, 12, 63, 0 ; I
 79+  BBA5 0C 0C 3F 00
 80+  BBA9 03 03 03 03  	defb	  3,  3,  3,  3,  3, 99, 62,  0 ; J
 80+  BBAD 03 63 3E 00
 81+  BBB1 63 66 6C 78  	defb	  99,102,108,120,124,110,103, 0 ; K
 81+  BBB5 7C 6E 67 00
 82+  BBB9 30 30 30 30  	defb	  48, 48, 48, 48, 48, 48, 63, 0 ; L
 82+  BBBD 30 30 3F 00
 83+  BBC1 63 77 7F 7F  	defb	  99,119,127,127,107, 99, 99, 0 ; M
 83+  BBC5 6B 63 63 00
 84+  BBC9 63 73 7B 7F  	defb	  99,115,123,127,111,103, 99, 0 ; N
 84+  BBCD 6F 67 63 00
 85+  BBD1 3E 63 63 63  	defb	  62, 99, 99, 99, 99, 99, 62, 0 ; O
 85+  BBD5 63 63 3E 00
 86+  BBD9 7E 61 61 61  	defb	  126, 97, 97, 97,126, 96, 96,0 ; P
 86+  BBDD 7E 60 60 00
 87+  BBE1 3E 63 63 63  	defb	  62, 99, 99, 99,111,102, 61, 0 ; Q
 87+  BBE5 6F 66 3D 00
 88+  BBE9 7E 63 63 67  	defb	  126, 99, 99,103,124,110,103,0 ; R
 88+  BBED 7C 6E 67 00
 89+  BBF1 3C 66 60 3E  	defb	  60,102, 96, 62,  3, 99, 62, 0 ; S
 89+  BBF5 03 63 3E 00
 90+  BBF9 7E 18 18 18  	defb	  126, 24, 24, 24, 24, 24, 24,0 ; T
 90+  BBFD 18 18 18 00
 91+  BC01 63 63 63 63  	defb	  99, 99, 99, 99, 99, 99, 62, 0 ; U
 91+  BC05 63 63 3E 00
 92+  BC09 63 63 63 77  	defb	  99, 99, 99,119, 62, 28,  8, 0 ; V
 92+  BC0D 3E 1C 08 00
 93+  BC11 63 63 6B 7F  	defb	  99, 99,107,127,127, 54, 34, 0 ; W
 93+  BC15 7F 36 22 00
 94+  BC19 63 77 3E 1C  	defb	  99,119, 62, 28, 62,119, 99, 0 ; X
 94+  BC1D 3E 77 63 00
 95+  BC21 33 33 12 1E  	defb	  51, 51, 18, 30, 12, 12, 12, 0 ; Y
 95+  BC25 0C 0C 0C 00
 96+  BC29 7F 07 0E 1C  	defb	  127,  7, 14, 28, 56,112,127,0 ; Z
 96+  BC2D 38 70 7F 00
 97+  BC31 00 00 00 00  	defb	  0,  0,  0,  0,  0,  0,  0,  0
 97+  BC35 00 00 00 00
 98+  BC39 00 00 00 00  	defb	  0,  0,  0,  0,  0,  0,  0,  0
 98+  BC3D 00 00 00 00
 99+  BC41 00 00 00 00  	defb	  0,  0,  0,  0,  0,  0,  0,  0
 99+  BC45 00 00 00 00
100+  BC49 00 00 00 00  	defb	  0,  0,  0,  0,  0,  0,  0,  0
100+  BC4D 00 00 00 00
101+  BC51 3C 42 99 A1  	defb	  60, 66,153,161,161,153, 66, 60 ; 	©
101+  BC55 A1 99 42 3C
# file closed: graphics/font.asm
151   BC59                  include "graphics\graphics.asm"
# file opened: graphics/graphics.asm
  1+  BC59              ; Tiles graphics.
  2+  BC59              sprites:
  3+  BC59 00 00 00 00      defb    0  ,  0,  0,  0,  0,  0,  0,  0   ; 0, space
  3+  BC5D 00 00 00 00
  4+  BC61 FF FF FF FF      defb    255,255,255,255,255,255,255,255   ; 1, cyan block
  4+  BC65 FF FF FF FF
  5+  BC69 01 03 07 0F      defb	  1,  3,  7, 15, 31, 63,127,255   ; 2, slope left
  5+  BC6D 1F 3F 7F FF
  6+  BC71 80 C0 E0 F0      defb    128,192,224,240,248,252,254,255   ; 3, slope right
  6+  BC75 F8 FC FE FF
  7+  BC79 55 AA 55 AA      defb    85,170, 85,170, 85,170, 85,170    ; 4, dirt
  7+  BC7D 55 AA 55 AA
  8+  BC81 00 00 00 00      defb    0  ,  0,  0,  0,  0,  0,  0,  0   ; 5, sky block
  8+  BC85 00 00 00 00
  9+  BC89 00 00 00 00      defb    0  ,  0,  0,  0,  0,  0,  0,  0   ; 6, slime block
  9+  BC8D 00 00 00 00
 10+  BC91 00 00 00 00      defb    0  ,0  ,  0,  0,  0,  0,  0,  0   ; 7, for reuse
 10+  BC95 00 00 00 00
 11+  BC99 18 2C 4E 8F      defb    24, 44, 78,143,241,114, 52,  24    ; 8, diamond
 11+  BC9D F1 72 34 18
 12+  BCA1 3C 7E FF 7F      defb    60,126,255,127,254,254,255,126    ; 9, rock
 12+  BCA5 FE FE FF 7E
 13+  BCA9 7E FF 7F 7F  	defb	126,255,127,127,254,255,126, 60    ; 10, rock 2
 13+  BCAD FE FF 7E 3C
 14+  BCB1 00 00 00 00      defb    0  ,  0,  0,  0,  0,  0,255,255   ; 11, sky block, pixel trapdoor
 14+  BCB5 00 00 FF FF
 15+  BCB9 99 DB 7E 24  	defb    153,219,126, 36,255, 66, 36, 24   ; 12, missile
 15+  BCBD FF 42 24 18
 16+  BCC1 00 00 00 00      defb    0  ,  0,  0,  0,  0,  0,  0,  0   ; 13, sky block, tank background
 16+  BCC5 00 00 00 00
 17+  BCC9 00 00 00 00  	defb    0,  0,  0,  0,  0, 60, 90, 52     ; 14, gem
 17+  BCCD 00 3C 5A 34
 18+  BCD1 FD FE FD FE  	defb	253,254,253,254,253,254,253,254   ; 15, damaged mountain
 18+  BCD5 FD FE FD FE
 19+  BCD9 F4 F8 F4 F8  	defb	244,248,244,248,244,248,244,248   ; 16, damaged mountain 2
 19+  BCDD F4 F8 F4 F8
 20+  BCE1 D0 E0 D0 E0  	defb	208,224,208,224,208,224,208,224   ; 17, damaged mountain 3
 20+  BCE5 D0 E0 D0 E0
 21+  BCE9 40 80 40 80  	defb	 64,128, 64,128, 64,128, 64,128   ; 18, damaged mountain 4
 21+  BCED 40 80 40 80
 22+  BCF1 00 00 00 ED  	defb	0,  0,  0,237,237,  0,  0,  0	  ; 19, tank missile
 22+  BCF5 ED 00 00 00
 23+  BCF9 99 DB 7E 24  	defb    153,219,126, 36,255,126, 60, 24   ; 20, missile active
 23+  BCFD FF 7E 3C 18
 24+  BD01 FF FF 00 00      defb	255,255,  0,  0,  0,  0,  0,  0	  ; 21, the pit 1
 24+  BD05 00 00 00 00
 25+  BD09 FC FC 00 00  	defb	252,252,  0,  0,  0,  0,  0,  0	  ; 22, the pit 2
 25+  BD0D 00 00 00 00
 26+  BD11 F0 F0 00 00  	defb	240,240,  0,  0,  0,  0,  0,  0	  ; 23, the pit 3
 26+  BD15 00 00 00 00
 27+  BD19 C0 C0 00 00  	defb	192,192,  0,  0,  0,  0,  0,  0	  ; 24, the pit 4
 27+  BD1D 00 00 00 00
 28+  BD21 00 00 00 00  	defb	0,0,  0,  0,  0,  0,  0,  0	  	  ; 25, the pit 5
 28+  BD25 00 00 00 00
 29+  BD29 FF FF FF FF      defb    255,255,255,255,255,255,255,255   ; 26, slime block, green on green
 29+  BD2D FF FF FF FF
 30+  BD31 00 00 00 66  	defb    0,  0,  0,102,  0,  0,  0,  0     ; 27, bullet
 30+  BD35 00 00 00 00
 31+  BD39
 32+  BD39
 33+  BD39              sprite_attrs:
 34+  BD39 46               defb    070 ; 0, space
 35+  BD3A 4D               defb    077 ; 1, cyan block
 36+  BD3B 4D               defb    077 ; 2, slope left
 37+  BD3C 4D               defb    077 ; 3, slope right
 38+  BD3D 46               defb    070 ; 4, dirt
 39+  BD3E 4E               defb    078 ; 5, sky
 40+  BD3F 66               defb    102 ; 6, slime
 41+  BD40 42               defb    066 ; 7, trapdoor
 42+  BD41 46               defb    070 ; 8, diamond
 43+  BD42 42               defb    066 ; 9, rock
 44+  BD43 42               defb    066 ; 10, rock 2
 45+  BD44 49           	defb    073 ; 11, sky, trapdoor
 46+  BD45 43           	defb    067 ; 12, missile
 47+  BD46 4A               defb    074 ; 13, sky, red ink (tank)
 48+  BD47 46               defb    070 ; 14, gem
 49+  BD48 4D               defb    077 ; 15, damaged mountain
 50+  BD49 4D               defb    077 ; 16, damaged mountain 2
 51+  BD4A 4D               defb    077 ; 17, damaged mountain 3
 52+  BD4B 4D               defb    077 ; 18, damaged mountain 4
 53+  BD4C 00           	defb 	000 ; 19, tank missile (not used
 54+  BD4D 43           	defb    067 ; 20, missile active
 55+  BD4E 42           	defb	066	; 21, the pit 1
 56+  BD4F 42           	defb	066	; 22, the pit 2
 57+  BD50 42           	defb	066	; 23, the pit 3
 58+  BD51 42           	defb	066	; 24, the pit 4
 59+  BD52 42           	defb	066	; 25, the pit 5
 60+  BD53 64           	defb    100 ; 26, slime, green on green
 61+  BD54 46           	defb 	070 ; 27, bullet
 62+  BD55
 63+  BD55
 64+  BD55              player_sprite:
 65+  BD55 10 39 92 FC  	defb	 16, 57,146,252, 56, 61,195,128 ; 0 up/down 1
 65+  BD59 38 3D C3 80
 66+  BD5D 08 1C 08 FC  	defb	  8, 28,  8,252, 60, 28, 22, 50 ; 1 left 1
 66+  BD61 3C 1C 16 32
 67+  BD65 10 38 10 3F      defb   	 16, 56, 16, 63, 60, 56,104, 76 ; 2 right 1
 67+  BD69 3C 38 68 4C
 68+  BD6D 08 9C 49 3F  	defb	  8,156, 73, 63, 28,188,195,  1 ; 3 up/down 2
 68+  BD71 1C BC C3 01
 69+  BD75 08 1C 08 FC  	defb	  8, 28,  8,252, 60, 60,100, 12; 4 left 2
 69+  BD79 3C 3C 64 0C
 70+  BD7D 10 38 10 3F  	defb	 16, 56, 16, 63, 60, 60, 38, 48 ; 5 right 2
 70+  BD81 3C 3C 26 30
 71+  BD85 54 28 10 12  	defb	 84, 40, 16, 18, 30, 92,253, 95 ; 6 shoot up
 71+  BD89 1E 5C FD 5F
 72+  BD8D 02 87 42 BF  	defb	 2,135, 66,191, 79,143, 25,  3  ; 7 shoot left
 72+  BD91 4F 8F 19 03
 73+  BD95 40 E1 42 FD  	defb	 64,225, 66,253,242,241,152,192 ; 8 shoot right
 73+  BD99 F2 F1 98 C0
 74+  BD9D FA BF 3A 78  	defb	 250,191, 58,120, 72,  8, 20, 42 ; 9 shoot down
 74+  BDA1 48 08 14 2A
 75+  BDA5 92 BA 94 78  	defb 	 146,186,148,120, 56,120, 68,195 ; 10 crushed 1
 75+  BDA9 38 78 44 C3
 76+  BDAD 49 5D 29 1E  	defb	  73, 93, 41, 30, 28, 30, 34,195 ; 11 crushed 2
 76+  BDB1 1C 1E 22 C3
 77+  BDB5 72 57 72 67  	defb	114, 87,114,103,111, 69,225,155  ; 12 fight 1
 77+  BDB9 6F 45 E1 9B
 78+  BDBD 4E EA 4E E6  	defb	 78,234, 78,230,246,162,135,217  ; 13 fight 2
 78+  BDC1 F6 A2 87 D9
 79+  BDC5
 80+  BDC5              ;
 81+  BDC5              ; First 4 top half, next 4 bottom 1, next 4 bottom 2
 82+  BDC5              ;
 83+  BDC5              ship_sprite:
 84+  BDC5 00 00 00 01  	defb	  0,  0,  0,  1,  3, 31,127,255
 84+  BDC9 03 1F 7F FF
 85+  BDCD 1F 01 7F FF  	defb	 31,  1,127,255,255,255,255,255
 85+  BDD1 FF FF FF FF
 86+  BDD5 F8 80 FE FF  	defb	248,128,254,255,255,255,255,255
 86+  BDD9 FF FF FF FF
 87+  BDDD 00 00 00 80  	defb	  0,  0,  0,128,192,248,254,255
 87+  BDE1 C0 F8 FE FF
 88+  BDE5 B3 B3 7F 1F  	defb	179,179,127, 31,  3,  3,  2,  7
 88+  BDE9 03 03 02 07
 89+  BDED 8F 8F FF FF  	defb	143,143,255,255,255, 15,  7,131
 89+  BDF1 FF 0F 07 83
 90+  BDF5 0F 0F FF FF  	defb	 15, 15,255,255,255, 16, 32,193
 90+  BDF9 FF 10 20 C1
 91+  BDFD 19 19 FE F8  	defb	 25, 25,254,248,192,192, 64,224
 91+  BE01 C0 C0 40 E0
 92+  BE05 98 98 7F 1F  	defb	152,152,127, 31,  3,  3,  2,  7
 92+  BE09 03 03 02 07
 93+  BE0D F0 F0 FF FF  	defb	240,240,255,255,255,  8,  4,131
 93+  BE11 FF 08 04 83
 94+  BE15 F1 F1 FF FF  	defb	241,241,255,255,255,240,224,193
 94+  BE19 FF F0 E0 C1
 95+  BE1D CD CD FE F8  	defb	205,205,254,248,192,192, 64,224
 95+  BE21 C0 C0 40 E0
 96+  BE25
 97+  BE25              ;
 98+  BE25              ;  First 8 frames are tank, last frame is the gun barrel
 99+  BE25              ;
100+  BE25              tank_sprite:
101+  BE25 00 00 00 7F  	defb	  0,  0,  0,127,127,  0,  0,  0
101+  BE29 7F 00 00 00
102+  BE2D 01 03 FE FC  	defb	  1,  3,254,252,254,255,127, 64
102+  BE31 FE FF 7F 40
103+  BE35 FF FF 03 F9  	defb	255,255,  3,249,  3,255,255,  1
103+  BE39 03 FF FF 01
104+  BE3D 00 00 C0 E0  	defb	  0,  0,192,224,224,192,  0,  0
104+  BE41 E0 C0 00 00
105+  BE45 3F 7F E1 FB  	defb	 63,127,225,251,247,225,127, 63
105+  BE49 F7 E1 7F 3F
106+  BE4D FF FF 16 52  	defb	255,255, 22, 82, 84, 22,255,255
106+  BE51 54 16 FF FF
107+  BE55 FF FF A8 A9  	defb	255,255,168,169,155,168,255,255
107+  BE59 9B A8 FF FF
108+  BE5D FC FE 8F AF  	defb	252,254,143,175,159,175,254,252
108+  BE61 9F AF FE FC
109+  BE65 00 00 00 1F  	defb	  0,  0,  0, 31, 31,  0,  0,  0 ; +64
109+  BE69 1F 00 00 00
110+  BE6D
111+  BE6D              monster_sprite:
112+  BE6D 02 40 06 60  	defb	  2, 64,  6, 96, 11,208, 22,104
112+  BE71 0B D0 16 68
113+  BE75 19 98 17 E8  	defb	 25,152, 23,232, 53,172,127,254
113+  BE79 35 AC 7F FE
114+  BE7D FE 7F EC 37  	defb	254,127,236, 55,143,241,143,241
114+  BE81 8F F1 8F F1
115+  BE85 08 10 08 10  	defb	  8, 16,  8, 16, 24, 24,  0,  0		; frame 1
115+  BE89 18 18 00 00
116+  BE8D 02 40 06 60  	defb	  2, 64,  6, 96, 11,208, 22,104
116+  BE91 0B D0 16 68
117+  BE95 19 98 17 E8  	defb	 25,152, 23,232,245,175,255,255
117+  BE99 F5 AF FF FF
118+  BE9D BC 3D 0E 70  	defb	188, 61, 14,112, 15,240, 15,240
118+  BEA1 0F F0 0F F0
119+  BEA5 10 08 30 0C  	defb	 16,  8, 48, 12,  0,  0,  0,  0		; frame 2
119+  BEA9 00 00 00 00
120+  BEAD
121+  BEAD              robot_sprite:
122+  BEAD 0E 0A CE 3E  	defb	 14, 10,206, 62,206, 18, 34,102		; left 1
122+  BEB1 CE 12 22 66
123+  BEB5 0E 0A 4E FE  	defb	 14, 10, 78,254, 78, 18, 36,108		; 2
123+  BEB9 4E 12 24 6C
124+  BEBD 0E 0A 4E FE  	defb	 14, 10, 78,254, 78, 50, 99,  3		; 3
124+  BEC1 4E 32 63 03
125+  BEC5 0E 0A CE 3E  	defb	 14, 10,206, 62,206, 10,  9, 27		; 4
125+  BEC9 CE 0A 09 1B
126+  BECD 70 50 73 7C  	defb	112, 80,115,124,115, 72, 68,102		; right 1
126+  BED1 73 48 44 66
127+  BED5 70 50 72 7F  	defb	112, 80,114,127,114, 72, 36, 54		; 2
127+  BED9 72 48 24 36
128+  BEDD 70 50 72 7F  	defb	112, 80,114,127,114, 76,198,192		; 3
128+  BEE1 72 4C C6 C0
129+  BEE5 70 50 73 7C  	defb	112, 80,115,124,115, 80,144,216		; 4
129+  BEE9 73 50 90 D8
130+  BEED 38 A9 BA 7C  	defb     56,169,186,124, 56, 42, 38, 96     ; dead 1
130+  BEF1 38 2A 26 60
131+  BEF5 1C 95 5D 3E  	defb	 28,149, 93, 62, 28, 84,100,  6		; dead 2
131+  BEF9 1C 54 64 06
132+  BEFD
# file closed: graphics/graphics.asm
152   BEFD
153   BEFD                  include "game\control.asm"
# file opened: game/control.asm
  1+  BEFD              ;
  2+  BEFD              ; Check the preferred input method then move
  3+  BEFD              ;
  4+  BEFD              control_input:
  5+  BEFD 3A 02 C5         ld a,(player+11)    ; first, check if player is dying
  6+  BF00 FE 04            cp 4                ; is the player falling
  7+  BF02 CC CC BF         call z, control_fall
  8+  BF05 FE 05            cp 5                ; is the player fighting
  9+  BF07 CC B9 BF         call z, control_fight
 10+  BF0A 3A 02 C5         ld a,(player+11)    ; first, check if player is dying
 11+  BF0D FE 00            cp 0
 12+  BF0F C0               ret nz               ; if so, can't move
 13+  BF10 3A FC C4         ld a,(player+5)      ; next, check if the player has pixels left to move
 14+  BF13 FE 00            cp 0
 15+  BF15 CA 1C BF         jp z, control_input0
 16+  BF18 CD AA C0         call control_automove
 17+  BF1B C9               ret
 18+  BF1C              control_input0:
 19+  BF1C 3A FD C4         ld a,(player+6)      ; next, check if the player is digging
 20+  BF1F FE 00            cp 0
 21+  BF21 CA 28 BF         jp z, control_input1
 22+  BF24 CD E8 BF         call control_dig
 23+  BF27 C9               ret
 24+  BF28              control_input1:
 25+  BF28 3A 0B C4         ld a,(game_control)
 26+  BF2B FE 00            cp 0                ; is this keyboard
 27+  BF2D C2 34 BF         jp nz,control_input2
 28+  BF30 CD 38 BF         call control_keyboard
 29+  BF33 C9               ret
 30+  BF34              control_input2:
 31+  BF34                  ; do joystick
 32+  BF34 CD 7E BF         call control_joystick
 33+  BF37 C9               ret
 34+  BF38
 35+  BF38              ;
 36+  BF38              ; Check the keyboard
 37+  BF38              ;
 38+  BF38              control_keyboard:
 39+  BF38 01 FE FB         ld bc,64510         ; port for keyboard row q-t.
 40+  BF3B ED 78            in a,(c)            ; read keyboard.
 41+  BF3D 47               ld b,a              ; store result in b register.
 42+  BF3E CB 18            rr b                ; check outermost key (q).
 43+  BF40 D2 6A BF         jp nc,control_keyboard1
 44+  BF43 01 FE FD         ld bc,65022         ; port for keyboard row a-f.
 45+  BF46 ED 78            in a,(c)            ; read keyboard.
 46+  BF48 47               ld b,a              ; store result in b register.
 47+  BF49 CB 18            rr b                ; check outermost key (a).
 48+  BF4B D2 6E BF         jp nc,control_keyboard2
 49+  BF4E 01 FE DF         ld bc,57342         ; port for keyboard row y-p.
 50+  BF51 ED 78            in a,(c)            ; read keyboard.
 51+  BF53 47               ld b,a              ; store result in b register.
 52+  BF54 CB 18            rr b                ; check outermost key (p).
 53+  BF56 D2 72 BF         jp nc,control_keyboard3
 54+  BF59 CB 18            rr b                ; check next key.
 55+  BF5B D2 76 BF         jp nc,control_keyboard4
 56+  BF5E 01 FE 7F         ld bc,32766         ; port for keyboard row b-space.
 57+  BF61 ED 78            in a,(c)            ; read keyboard.
 58+  BF63 47               ld b,a              ; store result in b register.
 59+  BF64 CB 18            rr b                ; check outermost key (space).
 60+  BF66 D2 7A BF         jp nc,control_keyboard5
 61+  BF69 C9               ret
 62+  BF6A              control_keyboard1:
 63+  BF6A CD F3 C0         call control_pl_moveup         ; player up.
 64+  BF6D C9               ret
 65+  BF6E              control_keyboard2:
 66+  BF6E CD 20 C1         call control_pl_movedown       ; player down.
 67+  BF71 C9               ret
 68+  BF72              control_keyboard3:
 69+  BF72 CD 7C C1         call control_pl_moveright       ; player left.
 70+  BF75 C9               ret
 71+  BF76              control_keyboard4:
 72+  BF76 CD 4C C1         call control_pl_moveleft       ; player right.
 73+  BF79 C9               ret
 74+  BF7A              control_keyboard5:
 75+  BF7A CD AA C1         call control_pl_fire       ; player fire.
 76+  BF7D C9               ret
 77+  BF7E
 78+  BF7E              ;
 79+  BF7E              ; Check the joystick
 80+  BF7E              ;
 81+  BF7E              control_joystick:
 82+  BF7E 01 1F 00         ld bc,31                        ; Kempston joystick port.
 83+  BF81 ED 78            in a,(c)                        ; read input.
 84+  BF83 E6 02            and 2                           ; check "left" bit.
 85+  BF85 C2 AD BF         jp nz,control_joystick3       ; move left.
 86+  BF88 ED 78            in a,(c)                        ; read input.
 87+  BF8A E6 01            and 1                           ; test "right" bit.
 88+  BF8C C2 B1 BF         jp nz,control_joystick4       ; move right.
 89+  BF8F ED 78            in a,(c)                        ; read input.
 90+  BF91 E6 08            and 8                           ; check "up" bit.
 91+  BF93 C2 A5 BF         jp nz,control_joystick1       ; move up.
 92+  BF96 ED 78            in a,(c)                        ; read input.
 93+  BF98 E6 04            and 4                           ; check "down" bit.
 94+  BF9A C2 A9 BF         jp nz,control_joystick2       ; move down.
 95+  BF9D ED 78            in a,(c)                        ; read input.
 96+  BF9F E6 10            and 16                          ; try the fire bit.
 97+  BFA1 C2 B5 BF         jp nz,control_joystick5       ; fire pressed.
 98+  BFA4 C9               ret
 99+  BFA5              control_joystick1:
100+  BFA5 CD F3 C0         call control_pl_moveup         ; player up.
101+  BFA8 C9               ret
102+  BFA9              control_joystick2:
103+  BFA9 CD 20 C1         call control_pl_movedown       ; player down.
104+  BFAC C9               ret
105+  BFAD              control_joystick3:
106+  BFAD CD 4C C1         call control_pl_moveleft       ; player left.
107+  BFB0 C9               ret
108+  BFB1              control_joystick4:
109+  BFB1 CD 7C C1         call control_pl_moveright       ; player right.
110+  BFB4 C9               ret
111+  BFB5              control_joystick5:
112+  BFB5 CD AA C1         call control_pl_fire
113+  BFB8 C9               ret
114+  BFB9
115+  BFB9              ;
116+  BFB9              ; Fights the player - just flips the players anim frame
117+  BFB9              ;
118+  BFB9              control_fight:
119+  BFB9 3A FA C4         ld a,(player+3)             ; load the frame
120+  BFBC FE 0C            cp 12                       ; flip between 12 and 13
121+  BFBE CA C6 BF         jp z,control_fight0
122+  BFC1 3E 0C            ld a,12
123+  BFC3 C3 C8 BF         jp control_fight1
124+  BFC6              control_fight0:
125+  BFC6 3E 0D            ld a,13
126+  BFC8              control_fight1:
127+  BFC8 32 FA C4         ld (player+3),a           ; save back
128+  BFCB C9               ret
129+  BFCC
130+  BFCC              ;
131+  BFCC              ; Falls the player
132+  BFCC              ;
133+  BFCC              control_fall:
134+  BFCC ED 4B F7 C4      ld bc,(player)              ; get coords
135+  BFD0 0C               inc c
136+  BFD1 ED 43 F7 C4      ld (player),bc
137+  BFD5 3A FA C4         ld a,(player+3)             ; load the frame
138+  BFD8 FE 03            cp 3                       ; flip between 3 and 0
139+  BFDA C2 E2 BF         jp nz, control_fall0
140+  BFDD 3E 00            ld a,0
141+  BFDF C3 E4 BF         jp control_fall1
142+  BFE2              control_fall0:
143+  BFE2 3E 03            ld a,3
144+  BFE4              control_fall1:
145+  BFE4 32 FA C4         ld (player+3),a           ; save back
146+  BFE7 C9               ret
147+  BFE8
148+  BFE8              ;
149+  BFE8              ; Performs a dig if the counter has reset, otherwise, messes with the graphics
150+  BFE8              ;
151+  BFE8              control_dig:
152+  BFE8 ED 4B F7 C4      ld bc,(player)      ; load the current coords into bc
153+  BFEC C5               push bc
154+  BFED 3A F9 C4         ld a,(player+2)     ; get the direction
155+  BFF0 FE 01            cp 1                ; left
156+  BFF2 CA 0A C0         jp z,control_dig0
157+  BFF5 FE 02            cp 2                ; right
158+  BFF7 CA 1F C0         jp z,control_dig1
159+  BFFA FE 03            cp 3                ; down
160+  BFFC CA 43 C0         jp z,control_dig5
161+  BFFF FE 00            cp 0                ; up
162+  C001 CA 33 C0         jp z,control_dig4
163+  C004 21 FD C4         ld hl,player+6
164+  C007 36 00            ld (hl),0           ; turn off digging
165+  C009 C9               ret                 ; return
166+  C00A              control_dig0:           ; going left
167+  C00A CD 01 AC         call sprites_scadd  ; get the current coord
168+  C00D 62 6B            ld hl,de
169+  C00F 2B               dec hl              ; move one left
170+  C010 C1               pop bc              ; get the coords back, subtract 8 from horiz, 8 from vert, store (will be coords of space above dug dirt)
171+  C011 78               ld a,b
172+  C012 06 08            ld b,8
173+  C014 90               sub b
174+  C015 47               ld b,a
175+  C016 79               ld a,c
176+  C017 0E 08            ld c,8
177+  C019 91               sub c
178+  C01A 4F               ld c,a
179+  C01B C5               push bc
180+  C01C C3 4C C0         jp control_dig2
181+  C01F              control_dig1:
182+  C01F CD 01 AC         call sprites_scadd  ; get the current coord
183+  C022 62 6B            ld hl,de
184+  C024 23               inc hl              ; move one right
185+  C025 C1               pop bc              ; get the coords back, add 8 to horiz, subtract 8 from vert store (will be coords of space above dug dirt)
186+  C026 3E 08            ld a,8
187+  C028 80               add a,b
188+  C029 47               ld b,a
189+  C02A 79               ld a,c
190+  C02B 0E 08            ld c,8
191+  C02D 91               sub c
192+  C02E 4F               ld c,a
193+  C02F C5               push bc
194+  C030 C3 4C C0         jp control_dig2
195+  C033              control_dig4:
196+  C033 CD 01 AC         call sprites_scadd  ; get the current coord
197+  C036 62 6B            ld hl,de
198+  C038 11 20 00         ld de,32
199+  C03B ED 52            sbc hl,de             ; move one up
200+  C03D C1               pop bc              ; get the coords back, 1 from vert, store, then we'll sub 1 from c for each row later
201+  C03E 0D               dec c
202+  C03F C5               push bc
203+  C040 C3 64 C0         jp control_dig6
204+  C043              control_dig5:
205+  C043 CD 01 AC         call sprites_scadd  ; get the current coord
206+  C046 62 6B            ld hl,de
207+  C048 24               inc h              ; move one down
208+  C049                                     ; not bothered about working out bc here, since rock will never fall if digging down
209+  C049 C3 4C C0         jp control_dig2
210+  C04C              ; Normal (not up) digging
211+  C04C              control_dig2:
212+  C04C 3A FF C4         ld a,(player+8)     ; get the number of rows we need to overwrite
213+  C04F 47               ld b,a              ; rows to copy over
214+  C050 E5               push hl             ; store the memory location of the first row for later
215+  C051              control_dig3:
216+  C051 CD 93 C0         call control_getpixelrow
217+  C054 77               ld (hl),a           ; load contents into row
218+  C055 11 20 00         ld de,32
219+  C058 19               add hl,de           ; move to next row
220+  C059 10 F6            djnz control_dig3
221+  C05B E1               pop hl              ; get the original memory location back
222+  C05C 11 20 00         ld de,32
223+  C05F ED 52            sbc hl,de           ; move to above row, ready for checking for rock
224+  C061 C3 7A C0         jp control_dig10
225+  C064              ; Special case for going up
226+  C064              control_dig6:
227+  C064 3A FF C4         ld a,(player+8)     ; get the number of rows we need to overwrite
228+  C067 47               ld b,a              ; rows to copy over
229+  C068              control_dig7:
230+  C068 CD 93 C0         call control_getpixelrow
231+  C06B              control_dig12:
232+  C06B 77               ld (hl),a           ; load empty into row
233+  C06C 11 20 00         ld de,32
234+  C06F ED 52            sbc hl,de           ; move up to next row
235+  C071 0D               dec c               ; decrease c to track rows
236+  C072 10 F4            djnz control_dig7
237+  C074 79               ld a,c
238+  C075 D6 07            sub 7
239+  C077 C1               pop bc
240+  C078 4F               ld c,a
241+  C079 C5               push bc             ; store the decreased c coord
242+  C07A              control_dig10:
243+  C07A DD 21 FE C4      ld ix,player+7
244+  C07E DD 7E 00         ld a,(ix)     ; get the dig frame number
245+  C081 3D               dec a
246+  C082 DD 77 00         ld (ix),a
247+  C085                  ; call the check for rocks above the removed dirt
248+  C085 DD 21 FD C4      ld ix,player+6
249+  C089 DD 7E 00         ld a,(ix)     ; get the dig state
250+  C08C FE 00            cp 0
251+  C08E C1               pop bc
252+  C08F CC 8A CA         call z, rocks_checkforfalling ; make the check if we're no longer digging
253+  C092 C9               ret
254+  C093
255+  C093              ;
256+  C093              ; Gets a modified pixel row to overwrite dirt - if this is the last dig, overwrite with nothing, otherwise xor to flip the dirt
257+  C093              ; Inputs:
258+  C093              ; hl - memory of pixel row
259+  C093              ; Outputs:
260+  C093              ; a - modified row to write
261+  C093              ;
262+  C093              control_getpixelrow:
263+  C093 3A FE C4         ld a,(player+7)     ; get the dig frame number
264+  C096 FE 00            cp 0                ; is this the last dig
265+  C098 CA 9F C0         jp z,control_getpixelrow1
266+  C09B 7E               ld a,(hl)           ; if not, xor with 255 to flip it
267+  C09C EE FF            xor 255
268+  C09E C9               ret
269+  C09F              control_getpixelrow1:
270+  C09F DD 21 FD C4      ld ix,player+6
271+  C0A3 DD 36 00 00      ld (ix),0           ; turn off digging
272+  C0A7 3E 00            ld a,0              ; if it is, load with empty
273+  C0A9 C9               ret
274+  C0AA
275+  C0AA              ;
276+  C0AA              ; Auto move the player until pixels is zero
277+  C0AA              ;
278+  C0AA              control_automove:
279+  C0AA 5F               ld e,a              ; store the number of pixels left to move in e
280+  C0AB ED 4B F7 C4      ld bc,(player)      ; load the current coords into bc
281+  C0AF 21 F9 C4         ld hl,player+2      ; get the direction
282+  C0B2 7E               ld a,(hl)
283+  C0B3 FE 03            cp 3                ; down
284+  C0B5 CA C9 C0         jp z,control_automove3  ; don't need to do anything
285+  C0B8 FE 00            cp 0                ; going up
286+  C0BA CA D5 C0         jp z,control_automove2
287+  C0BD FE 01            cp 1                ; going left?
288+  C0BF CA E1 C0         jp z,control_automove0
289+  C0C2 78               ld a,b
290+  C0C3 3C               inc a               ; if we're going right, increment a twice for two pixels
291+  C0C4 3C               inc a
292+  C0C5 47               ld b,a
293+  C0C6 C3 E5 C0         jp control_automove1
294+  C0C9              control_automove3:
295+  C0C9 79               ld a,c
296+  C0CA 3C               inc a
297+  C0CB 3C               inc a               ; if we're going down, increment twice
298+  C0CC 4F               ld c,a
299+  C0CD FE 90            cp 144
300+  C0CF CC C3 C1         call z, control_scroll_down
301+  C0D2 C3 E5 C0         jp control_automove1
302+  C0D5              control_automove2:
303+  C0D5 79               ld a,c
304+  C0D6 3D               dec a
305+  C0D7 3D               dec a               ; if we're going up, decrement twice
306+  C0D8 4F               ld c,a
307+  C0D9 FE 60            cp 96
308+  C0DB CC D0 C1         call z, control_scroll_up
309+  C0DE C3 E5 C0         jp control_automove1
310+  C0E1              control_automove0:
311+  C0E1 78               ld a,b
312+  C0E2 3D               dec a               ; if we're going left, decrement a twice
313+  C0E3 3D               dec a
314+  C0E4 47               ld b,a
315+  C0E5              control_automove1:
316+  C0E5 ED 43 F7 C4      ld (player),bc      ; and back to player
317+  C0E9 7B               ld a,e              ; now get the pixel count back
318+  C0EA 3D               dec a               ; decrease by one
319+  C0EB 21 FC C4         ld hl,player+5
320+  C0EE 77               ld (hl),a           ; copy back
321+  C0EF CD 02 C7         call player_justmoved
322+  C0F2 C9               ret
323+  C0F3
324+  C0F3              ;
325+  C0F3              ; Moves the player up
326+  C0F3              ;
327+  C0F3              control_pl_moveup:
328+  C0F3 C5               push bc
329+  C0F4 ED 4B F7 C4      ld bc,(player)          ; get the current coords, b horiz, c vert
330+  C0F8 79               ld a,c                  ; load c into the acc
331+  C0F9 FE 18            cp 24
332+  C0FB CA 19 C1         jp z,control_pl_moveup0 ; are we at the edge of the screen
333+  C0FE FE 60            cp 96
334+  C100 CC D0 C1         call z, control_scroll_up
335+  C103 CD 7A C3         call movement_checkcanmove_up ; check we can move up, e will be 1 if we can
336+  C106 F5               push af
337+  C107 7B               ld a,e                  ; put e in a
338+  C108 FE 00            cp 0
339+  C10A CA 18 C1         jp z,control_pl_moveup1 ; don't move if we can't
340+  C10D F1               pop af
341+  C10E D6 01            sub 1                   ; subtract 1
342+  C110                  ;sub 1                   ; subtract 1
343+  C110 4F               ld c,a                  ; load back to c
344+  C111 ED 43 F7 C4      ld (player),bc          ; load back to player
345+  C115 C3 19 C1         jp control_pl_moveup0
346+  C118              control_pl_moveup1:
347+  C118 F1               pop af                  ; restore af if needed
348+  C119              control_pl_moveup0:
349+  C119 3E 00            ld a,0
350+  C11B 32 F9 C4         ld (player+2),a        ; set direction to up
351+  C11E C1               pop bc
352+  C11F C9               ret
353+  C120              ;
354+  C120              ; Moves the player down
355+  C120              ;
356+  C120              control_pl_movedown:
357+  C120 C5               push bc
358+  C121 ED 4B F7 C4      ld bc,(player)          ; get the current coords, b horiz, c vert
359+  C125 79               ld a,c                  ; load c into the acc
360+  C126 FE E0            cp 224
361+  C128 CA 45 C1         jp z,control_pl_movedown0 ; are we at the edge of the screen
362+  C12B FE 80            cp 128
363+  C12D CC C3 C1         call z, control_scroll_down
364+  C130 CD 4E C3         call movement_checkcanmove_down ; check we can move down, e will be 1 if we can
365+  C133 F5               push af
366+  C134 7B               ld a,e                  ; put e in a
367+  C135 FE 00            cp 0
368+  C137 CA 44 C1         jp z,control_pl_movedown1 ; don't move if we can't
369+  C13A F1               pop af
370+  C13B 3C               inc a                   ; add 1
371+  C13C                  ;inc a                   ; add 1
372+  C13C 4F               ld c,a                  ; load back to c
373+  C13D ED 43 F7 C4      ld (player),bc          ; load back to player
374+  C141 C3 45 C1         jp control_pl_movedown0
375+  C144              control_pl_movedown1:
376+  C144 F1               pop af                  ; restore af if needed
377+  C145              control_pl_movedown0:
378+  C145 3E 03            ld a,3
379+  C147 32 F9 C4         ld (player+2),a        ; set direction to down
380+  C14A C1               pop bc
381+  C14B C9               ret
382+  C14C              ;
383+  C14C              ; Moves the player left
384+  C14C              ;
385+  C14C              control_pl_moveleft:
386+  C14C C5               push bc
387+  C14D ED 4B F7 C4      ld bc,(player)          ; get the current coords, b horiz, c vert
388+  C151 78               ld a,b                  ; load b into the acc
389+  C152 FE 10            cp 16
390+  C154 CA 75 C1         jp z,control_pl_moveleft0 ; are we at the edge of the screen
391+  C157 CD D9 C3         call movement_checkcanmove_left ; check we can move down, e will be 1 if we can
392+  C15A F5               push af
393+  C15B 7B               ld a,e                  ; put e in a
394+  C15C FE 00            cp 0
395+  C15E CA 74 C1         jp z,control_pl_moveleft1 ; don't move if we can't
396+  C161 21 FC C4         ld hl,player+5          ; need to store the amount of pixels still left to move in the player status
397+  C164 3E 03            ld a,3
398+  C166 77               ld (hl),a
399+  C167 F1               pop af
400+  C168 D6 01            sub 1                    ; subtract 2
401+  C16A D6 01            sub 1
402+  C16C 47               ld b,a                  ; load back to c
403+  C16D ED 43 F7 C4      ld (player),bc          ; load back to player
404+  C171 C3 75 C1         jp control_pl_moveleft0
405+  C174              control_pl_moveleft1:
406+  C174 F1               pop af
407+  C175              control_pl_moveleft0:
408+  C175 3E 01            ld a,1
409+  C177 32 F9 C4         ld (player+2),a        ; set direction to left
410+  C17A C1               pop bc
411+  C17B C9               ret
412+  C17C              ;
413+  C17C              ; Moves the player right
414+  C17C              ;
415+  C17C              control_pl_moveright:
416+  C17C C5               push bc
417+  C17D ED 4B F7 C4      ld bc,(player)          ; get the current coords, b horiz, c vert
418+  C181 78               ld a,b                  ; load b into the acc
419+  C182 FE F0            cp 240
420+  C184 CA A3 C1         jp z,control_pl_moveright0 ; are we at the edge of the screen
421+  C187 CD AD C3         call movement_checkcanmove_right ; check we can move down, e will be 1 if we can
422+  C18A F5               push af
423+  C18B 7B               ld a,e                  ; put e in a
424+  C18C FE 00            cp 0
425+  C18E CA A2 C1         jp z,control_pl_moveright1 ; don't move if we can't
426+  C191 21 FC C4         ld hl,player+5          ; need to store the amount of pixels still left to move in the player status
427+  C194 3E 03            ld a,3
428+  C196 77               ld (hl),a
429+  C197 F1               pop af
430+  C198 3C               inc a                   ; add 2
431+  C199 3C               inc a
432+  C19A 47               ld b,a                  ; load back to b
433+  C19B ED 43 F7 C4      ld (player),bc          ; load back to player
434+  C19F C3 A3 C1         jp control_pl_moveright0
435+  C1A2              control_pl_moveright1:
436+  C1A2 F1               pop af                  ; restore af if needed
437+  C1A3              control_pl_moveright0:
438+  C1A3 3E 02            ld a,2
439+  C1A5 32 F9 C4         ld (player+2),a        ; set direction to right
440+  C1A8 C1               pop bc
441+  C1A9 C9               ret
442+  C1AA
443+  C1AA              ;
444+  C1AA              ; Player fires
445+  C1AA              ;
446+  C1AA              control_pl_fire:
447+  C1AA 3A F9 C4         ld a,(player+2)         ; get player direction
448+  C1AD FE 00            cp 0
449+  C1AF C8               ret z
450+  C1B0 FE 03            cp 3
451+  C1B2 C8               ret z                   ; if up or down, don't fire
452+  C1B3 3A A9 D5         ld a,(bullet_state+3)       ; get the state
453+  C1B6 FE 01            cp 1
454+  C1B8 C8               ret z                   ; if currently firing, don't fire
455+  C1B9 CD AA D5         call bullet_init        ; initialise the bullet
456+  C1BC CD BF D5         call bullet_shoot       ; shoot the bullet
457+  C1BF CD 35 B1         call sound_laser
458+  C1C2 C9               ret
459+  C1C3
460+  C1C3              ;
461+  C1C3              ; Scrolls the screen down
462+  C1C3              ;
463+  C1C3              control_scroll_down:
464+  C1C3 F5               push af
465+  C1C4 3E 08            ld a,8
466+  C1C6 32 DA A8         ld (screen_offset),a
467+  C1C9 F1               pop af
468+  C1CA 21 27 A7         ld hl,buffer_updateall
469+  C1CD 36 01            ld (hl),1         ; flag as screen needing update
470+  C1CF C9               ret
471+  C1D0
472+  C1D0              ;
473+  C1D0              ; Scrolls the screen up
474+  C1D0              ;
475+  C1D0              control_scroll_up:
476+  C1D0 F5               push af
477+  C1D1 3E 00            ld a,0
478+  C1D3 32 DA A8         ld (screen_offset),a
479+  C1D6 F1               pop af
480+  C1D7 21 27 A7         ld hl,buffer_updateall
481+  C1DA 36 01            ld (hl),1         ; flag as screen needing update
482+  C1DC C9               ret
483+  C1DD
484+  C1DD
485+  C1DD
486+  C1DD
# file closed: game/control.asm
154   C1DD                  include "game\movement.asm"
# file opened: game/movement.asm
  1+  C1DD              ;
  2+  C1DD              ; The number of frames to dig for
  3+  C1DD              ;
  4+  C1DD              movement_numberdigframes:
  5+  C1DD 0A               defb 10
  6+  C1DE
  7+  C1DE              ;
  8+  C1DE              ; Checks the contents of a cell are empty - ie, all pixel rows are zero
  9+  C1DE              ; Inputs:
 10+  C1DE              ; hl - memory location of top pixel row
 11+  C1DE              ; bc - screen coords, b horiz, c vert
 12+  C1DE              ; Outputs:
 13+  C1DE              ; e - 0 if not empty, 1 if empty
 14+  C1DE              ;
 15+  C1DE              movement_spaceisempty:
 16+  C1DE C5               push bc
 17+  C1DF E5               push hl
 18+  C1E0 CD 08 C2         call movement_spaceisgem        ; check if space is a gem
 19+  C1E3 E1               pop hl
 20+  C1E4 C1               pop bc
 21+  C1E5 7B               ld a,e
 22+  C1E6 FE 01            cp 1
 23+  C1E8 C8               ret z                           ; if e is 1, space is a gem so can move here, return
 24+  C1E9 3E 08            ld a,8                          ; 8 rows to check
 25+  C1EB              movement_spaceisempty0:
 26+  C1EB 08               ex af,af'                       ; store the loop counter
 27+  C1EC 7E               ld a,(hl)                       ; get current pixel row
 28+  C1ED FE 00            cp 0
 29+  C1EF C2 03 C2         jp nz, movement_spaceisempty1    ; row is not empty, can't move here
 30+  C1F2 79               ld a,c                          ; load the vertical coord
 31+  C1F3 3C               inc a                           ; next row down
 32+  C1F4 11 20 00         ld de,32
 33+  C1F7 19               add hl,de                       ; otherwise, just go one down for hl, which means add 32, because of course
 34+  C1F8 4F               ld c,a                          ; copy vert coord back to c
 35+  C1F9 08               ex af,af'                       ; get loop counter back
 36+  C1FA 3D               dec a                           ; decrease loop counter
 37+  C1FB C2 EB C1         jp nz, movement_spaceisempty0
 38+  C1FE 16 00            ld d,0
 39+  C200 1E 01            ld e,1                          ; got to end, so space is empty
 40+  C202 C9               ret
 41+  C203              movement_spaceisempty1:
 42+  C203 16 00            ld d,0
 43+  C205 1E 00            ld e,0                          ; returning false, ie space not empty
 44+  C207 C9               ret
 45+  C208
 46+  C208              ;
 47+  C208              ; Check if a space contains a gem
 48+  C208              ; Inputs:
 49+  C208              ; bc - screen coords
 50+  C208              ; Outputs:
 51+  C208              ; e = 1 if gem
 52+  C208              movement_spaceisgem:
 53+  C208 CD 3A AA         call screen_getcharcoordsfromscreencoords   ; get the char coords we're checking into bc
 54+  C20B 21 D4 B7         ld hl,level_diamonds           ; check diamonds first
 55+  C20E              movement_spaceisgem0:
 56+  C20E 5E 23 56 2B      ld de,(hl)                      ; get gem coords into de
 57+  C212 7B               ld a,e                          ; check for end of data
 58+  C213 FE FF            cp 255
 59+  C215 CA 30 C2         jp z,movement_spaceisgem1       ; if yes, done with diamonds
 60+  C218 23               inc hl
 61+  C219 23               inc hl                          ; move to state
 62+  C21A 7E               ld a,(hl)
 63+  C21B 23               inc hl
 64+  C21C 23               inc hl
 65+  C21D 23               inc hl                          ; get to next
 66+  C21E FE 01            cp 1                            ; check if collected
 67+  C220 CA 0E C2         jp z,movement_spaceisgem0       ; if yes, move to next diamond
 68+  C223 7B               ld a,e                          ; load e again
 69+  C224 B9               cp c                            ; otherwise, compare c with e
 70+  C225 C2 0E C2         jp nz,movement_spaceisgem0      ; if different, move to next diamond
 71+  C228 7A               ld a,d                          ; get d coord
 72+  C229 B8               cp b                            ; compare b with d
 73+  C22A C2 0E C2         jp nz,movement_spaceisgem0      ; if different, move to next diamond
 74+  C22D 1E 01            ld e,1                          ; otherwise, exit with e = 1
 75+  C22F C9               ret
 76+  C230              movement_spaceisgem1:
 77+  C230 21 E4 B7         ld hl,level_gems              ; check gems
 78+  C233              movement_spaceisgem2:
 79+  C233 5E 23 56 2B      ld de,(hl)                      ; get gem coords into de
 80+  C237 7B               ld a,e                          ; check for end of data
 81+  C238 FE FF            cp 255
 82+  C23A CA 55 C2         jp z,movement_spaceisgem3       ; if yes, done with gems
 83+  C23D 23               inc hl
 84+  C23E 23               inc hl                          ; move to state
 85+  C23F 7E               ld a,(hl)
 86+  C240 23               inc hl
 87+  C241 23               inc hl
 88+  C242 23               inc hl                          ; get to next
 89+  C243 FE 01            cp 1                            ; check if collected
 90+  C245 CA 33 C2         jp z,movement_spaceisgem2       ; if yes, move to next diamond
 91+  C248 7B               ld a,e                          ; load e again
 92+  C249 B9               cp c                            ; otherwise, compare c with e
 93+  C24A C2 33 C2         jp nz,movement_spaceisgem2      ; if different, move to next gem
 94+  C24D 7A               ld a,d                          ; get d coord
 95+  C24E B8               cp b                            ; compare b with d
 96+  C24F C2 33 C2         jp nz,movement_spaceisgem2      ; if different, move to next gem
 97+  C252 1E 01            ld e,1                          ; otherwise, exit with e = 1
 98+  C254 C9               ret
 99+  C255              movement_spaceisgem3:
100+  C255 1E 00            ld e,0                          ; nothing found, return e = 0
101+  C257 C9               ret
102+  C258
103+  C258              ;
104+  C258              ; Checks the line of a cell below is empty - ie, first pixel rows is zero
105+  C258              ; Inputs:
106+  C258              ; hl - memory location of top pixel row
107+  C258              ; bc - screen coords, b horiz, c vert
108+  C258              ; Outputs:
109+  C258              ; e - 0 if not empty, 1 if empty
110+  C258              ;
111+  C258              movement_linebelowisempty:
112+  C258 C5               push bc
113+  C259 E5               push hl
114+  C25A CD 08 C2         call movement_spaceisgem        ; check if space is a gem
115+  C25D E1               pop hl
116+  C25E C1               pop bc
117+  C25F 7B               ld a,e
118+  C260 FE 01            cp 1
119+  C262 C8               ret z                           ; if e is 1, space is a gem so can move here, return
120+  C263 7E               ld a,(hl)                       ; get current pixel row
121+  C264 FE 00            cp 0
122+  C266 C2 6E C2         jp nz, movement_linebelowisempty1    ; row is not empty, can't move here
123+  C269 16 00            ld d,0
124+  C26B 1E 01            ld e,1                          ; got to end, so space is empty
125+  C26D C9               ret
126+  C26E              movement_linebelowisempty1:
127+  C26E 16 00            ld d,0
128+  C270 1E 00            ld e,0                          ; returning false, ie space not empty
129+  C272 C9               ret
130+  C273
131+  C273              ;
132+  C273              ; Checks the line of a cell above is empty - ie, last pixel rows are zero
133+  C273              ; Inputs:
134+  C273              ; hl - memory location of top pixel row
135+  C273              ; bc - screen coords, b horiz, c vert
136+  C273              ; Outputs:
137+  C273              ; e - 0 if not empty, 1 if empty
138+  C273              ;
139+  C273              movement_lineaboveisempty:
140+  C273 C5               push bc
141+  C274 E5               push hl
142+  C275 CD 08 C2         call movement_spaceisgem        ; check if space is a gem
143+  C278 E1               pop hl
144+  C279 C1               pop bc
145+  C27A 7B               ld a,e
146+  C27B FE 01            cp 1
147+  C27D C8               ret z
148+  C27E 7E               ld a,(hl)                       ; get current pixel row
149+  C27F FE 00            cp 0
150+  C281 C2 89 C2         jp nz, movement_lineaboveisempty1    ; row is not empty, can't move here
151+  C284 16 00            ld d,0
152+  C286 1E 01            ld e,1                          ; got to end, so space is empty
153+  C288 C9               ret
154+  C289              movement_lineaboveisempty1:
155+  C289 16 00            ld d,0
156+  C28B 1E 00            ld e,0                          ; returning false, ie space not empty
157+  C28D C9               ret
158+  C28E
159+  C28E              ;
160+  C28E              ; Checks the contents of a cell are diggable - ie, all pixel rows are dirt or empty
161+  C28E              ; Inputs:
162+  C28E              ; hl - memory location of top pixel row
163+  C28E              ; bc - screen coords, b horiz, c vert
164+  C28E              ; Outputs:
165+  C28E              ; none - puts player into digging mode
166+  C28E              ;
167+  C28E              movement_spaceisdiggable:
168+  C28E 3E 08            ld a,8                          ; 8 rows to check
169+  C290              movement_spaceisdiggable0:
170+  C290 08               ex af,af'                       ; store the loop counter
171+  C291 7E               ld a,(hl)                       ; get current pixel row
172+  C292 FE 00            cp 0
173+  C294 CA A4 C2         jp z, movement_spaceisdiggable2  ; row is empty, can dig here
174+  C297 FE 55            cp 85
175+  C299 CA A4 C2         jp z, movement_spaceisdiggable2  ; row is dirt, can dig here
176+  C29C FE AA            cp 170
177+  C29E CA A4 C2         jp z, movement_spaceisdiggable2  ; row is dirt, can dig here
178+  C2A1 C3 C1 C2         jp movement_spaceisdiggable1     ; otherwise, stop checking
179+  C2A4              movement_spaceisdiggable2:
180+  C2A4 79               ld a,c                          ; load the vertical coord
181+  C2A5 3C               inc a                           ; next row down
182+  C2A6 11 20 00         ld de,32
183+  C2A9 19               add hl,de                       ; otherwise, just go one down for hl, which means add 32, because of course
184+  C2AA 4F               ld c,a                          ; copy vert coord back to c
185+  C2AB 08               ex af,af'                       ; get loop counter back
186+  C2AC 3D               dec a                           ; decrease loop counter
187+  C2AD C2 90 C2         jp nz, movement_spaceisdiggable0
188+  C2B0 21 FD C4         ld hl,player+6
189+  C2B3 36 01            ld (hl),1                       ; set the player into digging mode
190+  C2B5 23               inc hl
191+  C2B6 3A DD C1         ld a,(movement_numberdigframes)
192+  C2B9 77               ld (hl),a                       ; set the number of frame to dig for
193+  C2BA 23               inc hl
194+  C2BB 36 08            ld (hl),8                       ; set the number of pixels to dig
195+  C2BD CD 07 B1         call sound_dig
196+  C2C0 C9               ret
197+  C2C1              movement_spaceisdiggable1:
198+  C2C1 21 FD C4         ld hl,player+6
199+  C2C4 36 00            ld (hl),0                       ; set the player out of digging mode
200+  C2C6 C9               ret
201+  C2C7
202+  C2C7              ;
203+  C2C7              ; Checks the contents of a cell below are diggable - ie, at least one pixel row has dirt. If the first one isn't dirt, stop
204+  C2C7              ; Inputs:
205+  C2C7              ; hl - memory location of top pixel row
206+  C2C7              ; bc - screen coords, b horiz, c vert
207+  C2C7              ; Outputs:
208+  C2C7              ; none - puts player into digging mode
209+  C2C7              ;
210+  C2C7              movement_spacebelowisdiggable:
211+  C2C7 7E               ld a,(hl)                       ; get first pixel row
212+  C2C8 FE 55            cp 85
213+  C2CA CA D5 C2         jp z, movement_spacebelowisdiggable3  ; row is dirt, can dig here
214+  C2CD FE AA            cp 170
215+  C2CF CA D5 C2         jp z, movement_spacebelowisdiggable3  ; row is dirt, can dig here
216+  C2D2 C3 C1 C2         jp movement_spaceisdiggable1    ; the first row is not dirt, so don't bother checking the rest, can't dig
217+  C2D5              movement_spacebelowisdiggable3:
218+  C2D5 3E 08            ld a,8                          ; rows to check
219+  C2D7 1E 00            ld e,0                          ; count of rows to dig
220+  C2D9              movement_spacebelowisdiggable0:
221+  C2D9 08               ex af,af'                       ; store the loop counter
222+  C2DA 7E               ld a,(hl)                       ; get current pixel row
223+  C2DB FE 55            cp 85
224+  C2DD CA E8 C2         jp z, movement_spacebelowisdiggable4  ; row is dirt, can dig here
225+  C2E0 FE AA            cp 170
226+  C2E2 CA E8 C2         jp z, movement_spacebelowisdiggable4  ; row is dirt, can dig here
227+  C2E5 C3 F7 C2         jp movement_spacebelowisdiggable5     ; don't count this row and stop counting
228+  C2E8              movement_spacebelowisdiggable4:
229+  C2E8 1C               inc e                           ; inc count of rows to dig
230+  C2E9              movement_spacebelowisdiggable2:
231+  C2E9 79               ld a,c                          ; load the vertical coord
232+  C2EA 3C               inc a                           ; next row down
233+  C2EB D5               push de                         ; need e for later
234+  C2EC 11 20 00         ld de,32
235+  C2EF 19               add hl,de                       ; otherwise, just go one down for hl, which means add 32, because of course
236+  C2F0 4F               ld c,a                          ; copy vert coord back to c
237+  C2F1 D1               pop de                          ; get e back
238+  C2F2 08               ex af,af'                       ; get loop counter back
239+  C2F3 3D               dec a                           ; incease loop counter
240+  C2F4 C2 D9 C2         jp nz, movement_spacebelowisdiggable0
241+  C2F7              movement_spacebelowisdiggable5:
242+  C2F7 21 FD C4         ld hl,player+6
243+  C2FA 36 01            ld (hl),1                       ; set the player into digging mode
244+  C2FC 23               inc hl
245+  C2FD 3A DD C1         ld a,(movement_numberdigframes)
246+  C300 77               ld (hl),a                       ; set the number of frame to dig for
247+  C301 23               inc hl
248+  C302 73               ld (hl),e                       ; set the number of pixels to dig
249+  C303 C9               ret
250+  C304              movement_spacebelowisdiggable1:
251+  C304 21 FD C4         ld hl,player+6
252+  C307 36 00            ld (hl),0                       ; set the player out of digging mode
253+  C309 C9               ret
254+  C30A
255+  C30A              ;
256+  C30A              ; Checks the contents of a cell above are diggable - ie, at least one pixel row has dirt. If the first one isn't dirt, stop
257+  C30A              ; Inputs:
258+  C30A              ; hl - memory location of top pixel row
259+  C30A              ; bc - screen coords, b horiz, c vert
260+  C30A              ; Outputs:
261+  C30A              ; none - puts player into digging mode
262+  C30A              ;
263+  C30A              movement_spaceaboveisdiggable:
264+  C30A 7E               ld a,(hl)                       ; get first pixel row
265+  C30B FE 55            cp 85
266+  C30D CA 18 C3         jp z, movement_spaceaboveisdiggable3  ; row is dirt, can dig here
267+  C310 FE AA            cp 170
268+  C312 CA 18 C3         jp z, movement_spaceaboveisdiggable3  ; row is dirt, can dig here
269+  C315 C3 C1 C2         jp movement_spaceisdiggable1    ; the first row is not dirt, so don't bother checking the rest, can't dig
270+  C318              movement_spaceaboveisdiggable3:
271+  C318 3E 08            ld a,8                          ; rows to check
272+  C31A 1E 00            ld e,0                          ; count of rows to dig
273+  C31C              movement_spaceaboveisdiggable0:
274+  C31C 08               ex af,af'                       ; store the loop counter
275+  C31D 7E               ld a,(hl)                       ; get current pixel row
276+  C31E FE 55            cp 85
277+  C320 CA 2B C3         jp z, movement_spaceaboveisdiggable4  ; row is dirt, can dig here
278+  C323 FE AA            cp 170
279+  C325 CA 2B C3         jp z, movement_spaceaboveisdiggable4  ; row is dirt, can dig here
280+  C328 C3 3B C3         jp movement_spaceaboveisdiggable5     ; don't count this row and stop counting
281+  C32B              movement_spaceaboveisdiggable4:
282+  C32B 1C               inc e                           ; inc count of rows to dig
283+  C32C              movement_spaceaboveisdiggable2:
284+  C32C 79               ld a,c                          ; load the vertical coord
285+  C32D 3D               dec a                           ; next row up
286+  C32E D5               push de                         ; need e for later
287+  C32F 11 20 00         ld de,32
288+  C332 ED 52            sbc hl,de                       ; otherwise, just go one up for hl, which means sub 32, because of course
289+  C334 4F               ld c,a                          ; copy vert coord back to c
290+  C335 D1               pop de                          ; get e back
291+  C336 08               ex af,af'                       ; get loop counter back
292+  C337 3D               dec a                           ; incease loop counter
293+  C338 C2 1C C3         jp nz, movement_spaceaboveisdiggable0
294+  C33B              movement_spaceaboveisdiggable5:
295+  C33B 21 FD C4         ld hl,player+6
296+  C33E 36 01            ld (hl),1                       ; set the player into digging mode
297+  C340 23               inc hl
298+  C341 3A DD C1         ld a,(movement_numberdigframes)
299+  C344 77               ld (hl),a                       ; set the number of frame to dig for
300+  C345 23               inc hl
301+  C346 73               ld (hl),e                       ; set the number of pixels to dig
302+  C347 C9               ret
303+  C348              movement_spaceaboveisdiggable1:
304+  C348 21 FD C4         ld hl,player+6
305+  C34B 36 00            ld (hl),0                       ; set the player out of digging mode
306+  C34D C9               ret
307+  C34E
308+  C34E              ;
309+  C34E              ; Checks if the player can move down
310+  C34E              ; Inputs:
311+  C34E              ; bc - player coords, b horiz, c vert
312+  C34E              ; Outputs:
313+  C34E              ; de - 1 can move
314+  C34E              movement_checkcanmove_down:
315+  C34E F5               push af
316+  C34F C5               push bc
317+  C350 CD 01 AC         call sprites_scadd              ; get the memory location of cell into de
318+  C353 62 6B            ld hl,de                        ; look at cell directly underneath (add 256)
319+  C355 24               inc h                       ; memory location of cell beneath now in hl
320+  C356 3E 08            ld a,8                       ; look below
321+  C358 81               add c
322+  C359 4F               ld c,a
323+  C35A CD 58 C2         call movement_linebelowisempty       ; check space is empty
324+  C35D 7B               ld a,e                          ; check space empty flag
325+  C35E FE 00            cp 0
326+  C360 CA 69 C3         jp z, movement_checkcanmove_down1 ; can't move
327+  C363 CD 02 C7         call player_justmoved
328+  C366 C1               pop bc
329+  C367 F1               pop af
330+  C368 C9               ret
331+  C369              movement_checkcanmove_down1:
332+  C369 C1               pop bc
333+  C36A CD 01 AC         call sprites_scadd              ; get the memory location of cell into de
334+  C36D 62 6B            ld hl,de                        ; look at cell directly underneath (add 256)
335+  C36F 24               inc h
336+  C370 C5               push bc
337+  C371 CD C7 C2         call movement_spacebelowisdiggable    ; can't move here, but can we dig
338+  C374 11 00 00         ld de,0
339+  C377 C1               pop bc
340+  C378 F1               pop af
341+  C379 C9               ret
342+  C37A
343+  C37A              ;
344+  C37A              ; Checks if the player can move up
345+  C37A              ; Inputs:
346+  C37A              ; bc - player coords, b horiz, c vert
347+  C37A              ; Outputs:
348+  C37A              ; de - 1 can move
349+  C37A              movement_checkcanmove_up:
350+  C37A F5               push af
351+  C37B C5               push bc
352+  C37C CD 01 AC         call sprites_scadd              ; get the memory location of cell into de
353+  C37F 62 6B            ld hl,de                        ; look at cell directly above (subtract 32)
354+  C381 11 20 00         ld de,32
355+  C384 ED 52            sbc hl,de                       ; memory location of line above now in hl
356+  C386 0D               dec c                           ; look above
357+  C387 CD 73 C2         call movement_lineaboveisempty       ; check space is empty
358+  C38A 7B               ld a,e                          ; check space empty flag
359+  C38B FE 00            cp 0
360+  C38D CA 98 C3         jp z, movement_checkcanmove_up1 ; can't move
361+  C390 1E 01            ld e,1
362+  C392 CD 02 C7         call player_justmoved
363+  C395 C1               pop bc
364+  C396 F1               pop af
365+  C397 C9               ret
366+  C398              movement_checkcanmove_up1:
367+  C398 C1               pop bc
368+  C399 CD 01 AC         call sprites_scadd              ; get the memory location of cell into de
369+  C39C 62 6B            ld hl,de                        ; look at cell directly above (subtract 32)
370+  C39E 11 20 00         ld de,32
371+  C3A1 ED 52            sbc hl,de                       ; memory location of line above now in hl
372+  C3A3 C5               push bc
373+  C3A4 CD 0A C3         call movement_spaceaboveisdiggable    ; can't move here, but can we dig
374+  C3A7 11 00 00         ld de,0
375+  C3AA C1               pop bc
376+  C3AB F1               pop af
377+  C3AC C9               ret
378+  C3AD
379+  C3AD              ;
380+  C3AD              ; Checks if the player can move right
381+  C3AD              ; Inputs:
382+  C3AD              ; bc - player coords, b horiz, c vert
383+  C3AD              ; Outputs:
384+  C3AD              ; de - 1 can move
385+  C3AD              movement_checkcanmove_right:
386+  C3AD F5               push af
387+  C3AE C5               push bc
388+  C3AF CD 01 AC         call sprites_scadd              ; get the memory location of cell into de
389+  C3B2 62 6B            ld hl,de                        ; look at cell directly to the right (add 1)
390+  C3B4 3E 08            ld a,8
391+  C3B6 80               add b                           ; move one cell right
392+  C3B7 47               ld b,a
393+  C3B8 23               inc hl                          ; memory location of cell to the right now in hl
394+  C3B9 CD DE C1         call movement_spaceisempty       ; check space is empty
395+  C3BC 7B               ld a,e                          ; check space empty flag
396+  C3BD FE 00            cp 0
397+  C3BF CA C8 C3         jp z, movement_checkcanmove_right1 ; can't move
398+  C3C2 CD 02 C7         call player_justmoved
399+  C3C5 C1               pop bc
400+  C3C6 F1               pop af
401+  C3C7 C9               ret
402+  C3C8              movement_checkcanmove_right1:
403+  C3C8 C1               pop bc
404+  C3C9 CD 01 AC         call sprites_scadd              ; get the memory location of cell into de
405+  C3CC 62 6B            ld hl,de
406+  C3CE 23               inc hl                          ; memory location of cell to the right now in hl
407+  C3CF C5               push bc
408+  C3D0 CD 8E C2         call movement_spaceisdiggable    ; can't move here, but can we dig
409+  C3D3 11 00 00         ld de,0
410+  C3D6 C1               pop bc
411+  C3D7 F1               pop af
412+  C3D8 C9               ret
413+  C3D9
414+  C3D9              ;
415+  C3D9              ; Checks if the player can move left
416+  C3D9              ; Inputs:
417+  C3D9              ; bc - player coords, b horiz, c vert
418+  C3D9              ; Outputs:
419+  C3D9              ; de - 1 can move
420+  C3D9              movement_checkcanmove_left:
421+  C3D9 F5               push af
422+  C3DA C5               push bc
423+  C3DB CD 01 AC         call sprites_scadd              ; get the memory location of cell into de
424+  C3DE 62 6B            ld hl,de                        ; look at cell directly to the right (add 1)
425+  C3E0 78               ld a,b
426+  C3E1 06 08            ld b,8
427+  C3E3 90               sub b                           ; move one cell left
428+  C3E4 47               ld b,a
429+  C3E5 2B               dec hl                          ; memory location of cell to the right now in hl
430+  C3E6 CD DE C1         call movement_spaceisempty       ; check space is empty
431+  C3E9 7B               ld a,e                          ; check space empty flag
432+  C3EA FE 00            cp 0
433+  C3EC CA F5 C3         jp z, movement_checkcanmove_left1 ; can't move
434+  C3EF CD 02 C7         call player_justmoved
435+  C3F2 C1               pop bc
436+  C3F3 F1               pop af
437+  C3F4 C9               ret
438+  C3F5              movement_checkcanmove_left1:
439+  C3F5 C1               pop bc
440+  C3F6 CD 01 AC         call sprites_scadd              ; get the memory location of cell into de
441+  C3F9 62 6B            ld hl,de
442+  C3FB 2B               dec hl                          ; memory location of cell to the right now in hl
443+  C3FC C5               push bc
444+  C3FD CD 8E C2         call movement_spaceisdiggable    ; can't move here, but can we dig
445+  C400 11 00 00         ld de,0
446+  C403 C1               pop bc
447+  C404 F1               pop af
448+  C405 C9               ret
# file closed: game/movement.asm
155   C406                  include "game\game.asm"
# file opened: game/game.asm
  1+  C406              ;
  2+  C406              ; The current frame count, incremented each frame
  3+  C406              ;
  4+  C406              game_framenumber:
  5+  C406 00               defb    0
  6+  C407
  7+  C407              ;
  8+  C407              ; The number of players
  9+  C407              ;
 10+  C407              game_numberplayers:
 11+  C407 01               defb 1
 12+  C408
 13+  C408              ;
 14+  C408              ; The current player
 15+  C408              ;
 16+  C408              game_currentplayer:
 17+  C408 01               defb 1
 18+  C409
 19+  C409              ;
 20+  C409              ; The default number of lives
 21+  C409              ;
 22+  C409              game_numberlives:
 23+  C409 04               defb 4
 24+  C40A
 25+  C40A              ;
 26+  C40A              ; The current difficulty
 27+  C40A              ;
 28+  C40A              game_difficulty:
 29+  C40A 01               defb 1
 30+  C40B
 31+  C40B              ;
 32+  C40B              ; Control method: 0 for keyboard, 1 for kempston
 33+  C40B              ;
 34+  C40B              game_control:
 35+  C40B 00               defb 0
 36+  C40C
 37+  C40C              ;
 38+  C40C              ; The current rocks used
 39+  C40C              ;
 40+  C40C              game_current_rocks:
 41+  C40C 00 00            defb 0,0
 42+  C40E
 43+  C40E
 44+  C40E              game_tankdifficulty:
 45+  C40E 46 41 3C 37      defb 70,65,60,55,50,45,40,35,30,25,20,12
 45+  C412 32 2D 28 23
 45+  C416 1E 19 14 0C
 46+  C41A              game_pitdifficulty:
 47+  C41A 07 05 05 04      defb 7,5,5,4,4,4,2,2,2,2,2,2
 47+  C41E 04 04 02 02
 47+  C422 02 02 02 02
 48+  C426              game_robotdifficulty:
 49+  C426 06 04 04 04      defb 6,4,4,4,3,3,3,2,0,0,0,0
 49+  C42A 03 03 03 02
 49+  C42E 00 00 00 00
 50+  C432              game_digdifficulty:
 51+  C432 14 0E 0A 0A      defb 20,14,10,10,8,8,8,8,6,6,6,4
 51+  C436 08 08 08 08
 51+  C43A 06 06 06 04
 52+  C43E              game_rockdifficulty:
 53+  C43E 28 1C 14 14      defb 40,28,20,20,16,16,16,16,16,16,16,16
 53+  C442 10 10 10 10
 53+  C446 10 10 10 10
 54+  C44A              game_missiledifficulty:
 55+  C44A 46 32 2D 2D      defb 70,50,45,45,40,35,35,30,30,25,25,20
 55+  C44E 28 23 23 1E
 55+  C452 1E 19 19 14
 56+  C456              ;
 57+  C456              ; Moves to the next player
 58+  C456              ;
 59+  C456              game_changeplayer:
 60+  C456 3A 07 C4         ld a,(game_numberplayers)
 61+  C459 FE 01            cp 1
 62+  C45B C8               ret z                       ; if just one player, no need to change
 63+  C45C 3A 08 C4         ld a,(game_currentplayer)   ; get current player
 64+  C45F 3D               dec a                       ; otherwise decrease by one
 65+  C460 EE 01            xor 1                       ; xor with one to flip
 66+  C462 3C               inc a                       ; increment
 67+  C463 21 08 C4         ld hl,game_currentplayer
 68+  C466 77               ld (hl),a                   ; store
 69+  C467 C9               ret
 70+  C468
 71+  C468              ;
 72+  C468              ; Sets the number of players at the start of the game
 73+  C468              ; Inputs:
 74+  C468              ; a - number of players
 75+  C468              game_setnumberofplayers:
 76+  C468 21 07 C4         ld hl,game_numberplayers
 77+  C46B 77               ld (hl),a
 78+  C46C
 79+  C46C              ;
 80+  C46C              ; Starts a game
 81+  C46C              ;
 82+  C46C              game_init:
 83+  C46C 3E 01            ld a,1
 84+  C46E 32 08 C4         ld (game_currentplayer),a
 85+  C471 C9               ret
 86+  C472
 87+  C472              ;
 88+  C472              ; Sets the current rock layout. Odd gets 1, even gets 2
 89+  C472              ;
 90+  C472              game_setcurrentrocks:
 91+  C472 3A 0A C4         ld a,(game_difficulty)
 92+  C475 E6 01            and 1
 93+  C477 FE 00            cp 0
 94+  C479 CA 87 C4         jp z,game_setcurrentrocks0
 95+  C47C 11 74 B5         ld de,level_rocks
 96+  C47F 21 0C C4         ld hl,game_current_rocks
 97+  C482 73 23 72 2B      ld (hl),de
 98+  C486 C9               ret
 99+  C487              game_setcurrentrocks0:
100+  C487 11 74 B6         ld de,level_rocks_alt
101+  C48A 21 0C C4         ld hl,game_current_rocks
102+  C48D 73 23 72 2B      ld (hl),de
103+  C491 C9               ret
104+  C492
105+  C492              ;
106+  C492              ; Increment frame number by 1
107+  C492              ;
108+  C492              game_incrementframe:
109+  C492 3A 06 C4         ld a,(game_framenumber)
110+  C495 FE FF            cp 255
111+  C497 C2 9C C4         jp nz,game_incrementframe0
112+  C49A 3E 00            ld a,0
113+  C49C              game_incrementframe0:
114+  C49C 3C               inc a
115+  C49D 32 06 C4         ld (game_framenumber),a
116+  C4A0 C9               ret
117+  C4A1
118+  C4A1              ;
119+  C4A1              ; Returns current frame
120+  C4A1              ; Outputs:
121+  C4A1              ; a - current frame
122+  C4A1              ;
123+  C4A1              game_getcurrentframe:
124+  C4A1 3A 06 C4         ld a,(game_framenumber)
125+  C4A4 C9               ret
126+  C4A5
127+  C4A5              ;
128+  C4A5              ; Resets current frame
129+  C4A5              ;
130+  C4A5              game_resetcurrentframe:
131+  C4A5 21 06 C4         ld hl,game_framenumber
132+  C4A8 36 00            ld (hl),0
133+  C4AA C9               ret
134+  C4AB
135+  C4AB              ;
136+  C4AB              ; Increases the current difficulty
137+  C4AB              ;
138+  C4AB              game_increasedifficulty:
139+  C4AB 3A 0A C4         ld a,(game_difficulty)
140+  C4AE 3C               inc a
141+  C4AF 32 0A C4         ld (game_difficulty),a
142+  C4B2
143+  C4B2              ;
144+  C4B2              ; Sets the various difficulties
145+  C4B2              ;
146+  C4B2              game_setdifficulty:
147+  C4B2 3A 0A C4         ld a,(game_difficulty)
148+  C4B5 FE 0D            cp 13
149+  C4B7 C2 BC C4         jp nz,game_setdifficulty0
150+  C4BA 3E 0C            ld a,12                         ; limit difficulty to twelve
151+  C4BC              game_setdifficulty0:
152+  C4BC 11 00 00         ld de,0
153+  C4BF 5F               ld e,a                          ; keep the difficulty in de
154+  C4C0                  ; Set the tank difficulty
155+  C4C0 21 0E C4         ld hl,game_tankdifficulty
156+  C4C3 2B               dec hl
157+  C4C4 19               add hl,de                       ; add the difficulty
158+  C4C5 7E               ld a,(hl)                       ; get the value
159+  C4C6 32 82 C8         ld (tank_speed),a               ; set the tank speed
160+  C4C9                  ; Set the pit difficulty
161+  C4C9 21 1A C4         ld hl,game_pitdifficulty
162+  C4CC 2B               dec hl
163+  C4CD 19               add hl,de                       ; add the difficulty
164+  C4CE 7E               ld a,(hl)                       ; get the value
165+  C4CF 32 3A D0         ld (thepit_speed),a               ; set the pit speed
166+  C4D2                  ; Set the robot difficulty
167+  C4D2 21 26 C4         ld hl,game_robotdifficulty
168+  C4D5 2B               dec hl
169+  C4D6 19               add hl,de                       ; add the difficulty
170+  C4D7 7E               ld a,(hl)                       ; get the value
171+  C4D8 32 18 D2         ld (robots_robotspeed),a        ; set the robot speed
172+  C4DB                  ; Set the dig difficulty
173+  C4DB 21 32 C4         ld hl,game_digdifficulty
174+  C4DE 2B               dec hl
175+  C4DF 19               add hl,de                       ; add the difficulty
176+  C4E0 7E               ld a,(hl)                       ; get the value
177+  C4E1 32 DD C1         ld (movement_numberdigframes),a ; set the dig frames
178+  C4E4                  ; Set the rock difficulty
179+  C4E4 21 3E C4         ld hl,game_rockdifficulty
180+  C4E7 2B               dec hl
181+  C4E8 19               add hl,de                       ; add the difficulty
182+  C4E9 7E               ld a,(hl)                       ; get the value
183+  C4EA 32 87 CA         ld (rocks_numberofframestowobble),a ; set the wobble frames
184+  C4ED                  ; Set the missile difficulty
185+  C4ED 21 4A C4         ld hl,game_missiledifficulty
186+  C4F0 2B               dec hl
187+  C4F1 19               add hl,de                       ; add the difficulty
188+  C4F2 7E               ld a,(hl)                       ; get the value
189+  C4F3 32 76 CE         ld (missiles_speed),a           ; set the missile difficulty
190+  C4F6 C9               ret
# file closed: game/game.asm
156   C4F7                  include "game\player.asm"
# file opened: game/player.asm
  1+  C4F7              ;
  2+  C4F7              ;   Data for current player
  3+  C4F7              ;
  4+  C4F7              player:
  5+  C4F7 00 00            defb    0,0                 ; horiz,vert (+0,+1)
  6+  C4F9 02 00 01         defb    2,0,1               ; dir (0 up, 1 left, 2 right, 3 down), frame, frame transition count (+2,+3,+4)
  7+  C4FC 00               defb    0                   ; auto move remaining (+5)
  8+  C4FD 00 00 00         defb    0,0,0               ; is digging (0 no), digging count, pixels to di (+6,+7,+8)
  9+  C500 00               defb    0                   ; lives remaining (+9)
 10+  C501 00               defb    0                   ; died this life (+10)
 11+  C502 00 00            defb    0,0                 ; dying (+11), frames (+12)
 12+  C504 00               defb    0                   ; can finish level, whether can finish level or not (+13)
 13+  C505 00               defb    0                   ; difficulty (+14)
 14+  C506
 15+  C506              player_location:
 16+  C506 00               defb 0                      ; 0 normal, 1 diamond cavern, 2 the pit
 17+  C507
 18+  C507              ;
 19+  C507              ; Works out which part of the screen the player is in
 20+  C507              ; Pit is between 3,9 and 8,9
 21+  C507              ; Diamond cavern is between 11,22 and 22,28
 22+  C507              ;
 23+  C507              player_getlocation:
 24+  C507 ED 4B F7 C4      ld bc,(player)              ; get screen coords
 25+  C50B CD 3A AA         call screen_getcharcoordsfromscreencoords ; get char coords, c horiz
 26+  C50E 78               ld a,b                      ; check for pit first
 27+  C50F FE 09            cp 9                        ; if not on this row, not in the pit
 28+  C511 C2 20 C5         jp nz,player_getlocation0
 29+  C514 79               ld a,c                      ; check horizontal
 30+  C515 FE 09            cp 9
 31+  C517 D2 20 C5         jp nc, player_getlocation0  ; if more than 9, not in the pit
 32+  C51A 21 06 C5         ld hl,player_location
 33+  C51D 36 02            ld (hl),2                   ; load location with 2, the pit
 34+  C51F C9               ret                         ; done
 35+  C520              player_getlocation0:            ; check for diamond cavern
 36+  C520 78               ld a,b                      ; first check vertical
 37+  C521 FE 16            cp 22                       ; if above row 22, then not in cavern
 38+  C523 DA 37 C5         jp c,player_getlocation1
 39+  C526 79               ld a,c                      ; get the horizontal next
 40+  C527 FE 0B            cp 11
 41+  C529 DA 37 C5         jp c,player_getlocation1    ; if less than 11 not in diamond cave
 42+  C52C FE 16            cp 22
 43+  C52E D2 37 C5         jp nc,player_getlocation1    ; if less than 11 not in diamond cave
 44+  C531 21 06 C5         ld hl,player_location
 45+  C534 36 01            ld (hl),1                   ; load location with 1, the cavern
 46+  C536 C9               ret
 47+  C537              player_getlocation1:
 48+  C537 21 06 C5         ld hl,player_location
 49+  C53A 36 00            ld (hl),0                   ; load location with 2, the pit
 50+  C53C C9               ret                         ; done
 51+  C53D
 52+  C53D
 53+  C53D              ;
 54+  C53D              ; Initializes a player at start of game
 55+  C53D              ; Copy initial coords, copy lives, copy score
 56+  C53D              ;
 57+  C53D              player_init_gamestart:
 58+  C53D 3A 09 C4         ld a,(game_numberlives)
 59+  C540 32 FE C5         ld (player1_lives),a
 60+  C543 32 FF C5         ld (player2_lives),a                        ; set the initial number of lives at game start
 61+  C546
 62+  C546 21 02 C6         ld hl,player1_score+2
 63+  C549 06 06            ld b,6
 64+  C54B              player_init_gamestart0:
 65+  C54B 36 30            ld (hl),48
 66+  C54D 23               inc hl
 67+  C54E 10 FB            djnz player_init_gamestart0                 ; zero out player 1 score
 68+  C550 21 0B C6         ld hl,player2_score+2
 69+  C553 06 06            ld b,6
 70+  C555              player_init_gamestart1:
 71+  C555 36 30            ld (hl),48
 72+  C557 23               inc hl
 73+  C558 10 FB            djnz player_init_gamestart1                 ; zero out player 2 score
 74+  C55A 3E 01            ld a,1
 75+  C55C 32 12 C6         ld (player1_difficulty),a
 76+  C55F 32 13 C6         ld (player2_difficulty),a                   ; set player difficulties to zero
 77+  C562 C9               ret
 78+  C563
 79+  C563              ;
 80+  C563              ; Initializes a player at start of a life
 81+  C563              ; Copy initial coords, copy lives, copy score
 82+  C563              ;
 83+  C563              player_init_lifestart:
 84+  C563 21 FC C4         ld hl,player+5
 85+  C566 06 09            ld b,9                      ; initialise 9 properties
 86+  C568              player_init_lifestart2:
 87+  C568 36 00            ld (hl),0
 88+  C56A 23               inc hl
 89+  C56B 10 FB            djnz player_init_lifestart2
 90+  C56D
 91+  C56D 21 F9 C4         ld hl,player+2              ; initialise some properties
 92+  C570 36 02            ld (hl),2
 93+  C572 23               inc hl
 94+  C573 36 00            ld (hl),0
 95+  C575 23               inc hl
 96+  C576 36 01            ld (hl),1
 97+  C578
 98+  C578 ED 4B E8 80      ld bc,(init_coord)
 99+  C57C ED 43 F7 C4      ld (player),bc
100+  C580
101+  C580 3A 08 C4         ld a,(game_currentplayer)
102+  C583 FE 01            cp 1
103+  C585 C2 92 C5         jp nz,player_init_lifestart4
104+  C588 01 00 C5         ld bc,player+9
105+  C58B 3A FE C5         ld a,(player1_lives)
106+  C58E 02               ld (bc),a
107+  C58F C3 99 C5         jp player_init_lifestart3
108+  C592              player_init_lifestart4:
109+  C592 01 00 C5         ld bc,player+9
110+  C595 3A FF C5         ld a,(player2_lives)
111+  C598 02               ld (bc),a
112+  C599              player_init_lifestart3:
113+  C599 CD 3E CE         call diamonds_init      ; initialise gems
114+  C59C 01 06 00         ld bc,6
115+  C59F 11 EA CB         ld de,scores_current+2
116+  C5A2 3A 08 C4         ld a,(game_currentplayer)
117+  C5A5 FE 01            cp 1
118+  C5A7 C2 B6 C5         jp nz,player_init_lifestart0
119+  C5AA 3A 12 C6         ld a,(player1_difficulty)       ; initialise player 1 difficulty
120+  C5AD 32 0A C4         ld (game_difficulty),a
121+  C5B0 21 02 C6         ld hl,player1_score+2           ; itialise player 1 scores
122+  C5B3 C3 BF C5         jp player_init_lifestart1
123+  C5B6              player_init_lifestart0:
124+  C5B6 3A 13 C6         ld a,(player2_difficulty)       ; initialise player 2 difficulty
125+  C5B9 32 0A C4         ld (game_difficulty),a
126+  C5BC 21 0B C6         ld hl,player2_score+2           ; initialise player 2 scores
127+  C5BF              player_init_lifestart1:
128+  C5BF ED B0            ldir
129+  C5C1 C9               ret
130+  C5C2
131+  C5C2
132+  C5C2              ;
133+  C5C2              ; Copies the current score and difficulty in the current player
134+  C5C2              ;
135+  C5C2              player_recordcurrentstate:
136+  C5C2 01 06 00         ld bc,6                  ; copy current score back to correct player
137+  C5C5 21 EA CB         ld hl,scores_current+2
138+  C5C8 3A 08 C4         ld a,(game_currentplayer)
139+  C5CB FE 01            cp 1
140+  C5CD C2 E2 C5         jp nz,player_recordcurrentstate0
141+  C5D0 3A 0A C4         ld a,(game_difficulty)
142+  C5D3 32 12 C6         ld (player1_difficulty),a       ; store difficulty
143+  C5D6 11 02 C6         ld de,player1_score+2
144+  C5D9 3A 00 C5         ld a,(player+9)
145+  C5DC 32 FE C5         ld (player1_lives),a              ; record lives
146+  C5DF C3 F1 C5         jp player_recordcurrentstate1
147+  C5E2              player_recordcurrentstate0:         ; do player 2
148+  C5E2 3A 0A C4         ld a,(game_difficulty)
149+  C5E5 32 13 C6         ld (player2_difficulty),a       ; store difficulty
150+  C5E8 3A 00 C5         ld a,(player+9)
151+  C5EB 32 FF C5         ld (player2_lives),a              ; record lives
152+  C5EE 11 0B C6         ld de,player2_score+2
153+  C5F1              player_recordcurrentstate1:
154+  C5F1 ED B0            ldir
155+  C5F3 C9               ret
156+  C5F4
157+  C5F4              ;
158+  C5F4              ; Player just died, subtract a life
159+  C5F4              ;
160+  C5F4              player_died:
161+  C5F4 01 00 C5         ld bc,player+9
162+  C5F7 0A               ld a,(bc)
163+  C5F8 3D               dec a
164+  C5F9 02               ld (bc),a
165+  C5FA CD C2 C5         call player_recordcurrentstate
166+  C5FD C9               ret
167+  C5FE
168+  C5FE              ;
169+  C5FE              ; Player lives
170+  C5FE              ;
171+  C5FE              player1_lives:
172+  C5FE 03               defb 3
173+  C5FF              player2_lives:
174+  C5FF 03               defb 3
175+  C600
176+  C600              ;
177+  C600              ; Player scores
178+  C600              ;
179+  C600              player1_score:
180+  C600 04 01 30 30      defb 4,1,'000000',255
180+  C604 30 30 30 30
180+  C608 FF
181+  C609              player2_score:
182+  C609 16 01 30 30      defb 22,1,'000000',255
182+  C60D 30 30 30 30
182+  C611 FF
183+  C612
184+  C612              ;
185+  C612              ; Player difficulties
186+  C612              ;
187+  C612              player1_difficulty:
188+  C612 00               defb 0
189+  C613              player2_difficulty:
190+  C613 00               defb 0
191+  C614
192+  C614              ;
193+  C614              ; Kills a player this life
194+  C614              ;
195+  C614              player_killplayer:
196+  C614 21 01 C5         ld hl,player+10
197+  C617 36 01            ld (hl),1
198+  C619 C9               ret
199+  C61A
200+  C61A              ;
201+  C61A              ; Crush a player this life
202+  C61A              ;
203+  C61A              player_crushplayer:
204+  C61A 21 02 C5         ld hl,player+11             ; mark as crushed
205+  C61D 36 01            ld (hl),1
206+  C61F C9               ret
207+  C620
208+  C620              player_tankkillplayer
209+  C620 21 02 C5         ld hl,player+11             ; mark as tanked
210+  C623 36 02            ld (hl),2
211+  C625 C9               ret
212+  C626
213+  C626              player_zonkplayer
214+  C626 21 02 C5         ld hl,player+11             ; mark as zonked (missile)
215+  C629 36 03            ld (hl),3
216+  C62B C9               ret
217+  C62C
218+  C62C              player_pitkillplayer
219+  C62C 21 02 C5         ld hl,player+11             ; mark as pit killed
220+  C62F 36 04            ld (hl),4
221+  C631 C9               ret
222+  C632
223+  C632              player_robotkillplayer
224+  C632 21 02 C5         ld hl,player+11             ; mark as robot killed
225+  C635 36 05            ld (hl),5
226+  C637 C9               ret
227+  C638
228+  C638              ;
229+  C638              ; Draws the player at the current position or deletes them
230+  C638              ;
231+  C638              player_drawplayer:
232+  C638 3A F9 C4         ld a,(player+2)             ; get the current direction
233+  C63B FE 03            cp 3
234+  C63D C2 42 C6         jp nz,player_drawplayer0
235+  C640 3E 00            ld a,0                      ; if 3, then down, so set the direction to 0 since the sprite is the same as up
236+  C642              player_drawplayer0:             ; DYING CHECKS
237+  C642 5F               ld e,a                      ; store in e
238+  C643 3A 02 C5         ld a,(player+11)             ; get the dying flag
239+  C646 FE 01            cp 1
240+  C648 CA 82 C6         jp z,player_drawplayer3     ; if it's one, we're being crushed
241+  C64B FE 04            cp 4
242+  C64D CA CA C6         jp z,player_drawplayer9     ; player is falling into the pit
243+  C650 FE 05            cp 5
244+  C652 CA E6 C6         jp z,player_drawplayer12    ; player has been killed by a robot
245+  C655              player_drawplayer4:             ; CHECK FOR DIGGING
246+  C655 3A FD C4         ld a,(player+6)             ; get the dig flag
247+  C658 FE 01            cp 1
248+  C65A CA 6B C6         jp z,player_drawplayer1    ; get dig frame
249+  C65D 3A FA C4         ld a,(player+3)             ; this is normal movement so get the current frame
250+  C660 83               add a,e
251+  C661 C3 70 C6         jp player_drawplayer2
252+  C664              player_drawplayer6:             ; GETTING THE DIG FRAM
253+  C664 E6 01            and 1                       ; check for odd
254+  C666 C6 0A            add 10                      ; add 10, to get either 10 or 11
255+  C668 C3 70 C6         jp player_drawplayer2
256+  C66B              player_drawplayer1:             ; GET THE NORMAL FRAME
257+  C66B 3A F9 C4         ld a,(player+2)             ; digging, get the current direction again, because want all four
258+  C66E C6 06            add a,6                     ; add direction to 6 to get frame
259+  C670              player_drawplayer2:             ; WORK OUT THE FRAME
260+  C670 07               rlca
261+  C671 07               rlca
262+  C672 07               rlca                        ; multiply by eight
263+  C673 6F               ld l,a
264+  C674 26 00            ld h,0
265+  C676 11 55 BD         ld de,player_sprite
266+  C679 19               add hl,de                   ; load hl with the location of the player sprite data
267+  C67A              player_drawplayer7:             ; DRAW THE PlAYER
268+  C67A ED 4B F7 C4      ld bc,(player)              ; load bc with the start coords
269+  C67E CD 0C AB         call sprites_drawsprite     ; call the routine to draw the sprite
270+  C681                  ;call player_storeupdatedlines ; log updated rows
271+  C681 C9               ret
272+  C682              ;
273+  C682              ; CRUSHING
274+  C682              ;
275+  C682              player_drawplayer3:
276+  C682 21 03 C5         ld hl,player+12
277+  C685 7E               ld a,(hl)                  ; crushing, so get the current anim flag
278+  C686 FE 00            cp 0
279+  C688 C2 91 C6         jp nz,player_drawplayer5    ; if this isn't zero, then this isn't the first time round, so do the crush anim
280+  C68B 3E 64            ld a,100
281+  C68D 77               ld (hl),a                   ; otherwise, load up the anim frames
282+  C68E C3 55 C6         jp player_drawplayer4       ; and return to the main loop to remove the current frame
283+  C691              player_drawplayer5:
284+  C691 3D               dec a
285+  C692 77               ld (hl),a
286+  C693 FE 00            cp 0
287+  C695 CC 14 C6         call z,player_killplayer     ; final animation, so kill the player
288+  C698 FE 0A            cp 10                         ; play the sound
289+  C69A CC 72 B1         call z, sound_rockfell
290+  C69D FE 14            cp 20                        ; check if we should move the rock
291+  C69F C2 B3 C6         jp nz,player_drawplayer8
292+  C6A2 D9               exx
293+  C6A3 F5               push af
294+  C6A4 ED 4B 88 CA      ld bc,(rocks_killerrock)    ; get the coords of the rock that killed us
295+  C6A8 21 A1 BC         ld hl,sprites+72
296+  C6AB CD 0C AB         call sprites_drawsprite     ; draw a rock over current
297+  C6AE F1               pop af
298+  C6AF D9               exx
299+  C6B0 C3 64 C6         jp player_drawplayer6       ; continue drawing player
300+  C6B3              player_drawplayer8:
301+  C6B3 FE 14            cp 20
302+  C6B5 D2 64 C6         jp nc,player_drawplayer6    ; if not in last 10 frames, draw as normal
303+  C6B8 ED 4B F7 C4      ld bc,(player)
304+  C6BC CD 3A AA         call screen_getcharcoordsfromscreencoords ; get the char coords into bc
305+  C6BF 3E 42            ld a,66             ; load red
306+  C6C1 CD 92 AA         call screen_setattr
307+  C6C4 21 A1 BC         ld hl,sprites+72            ; otherwise, player is rock
308+  C6C7 C3 7A C6         jp player_drawplayer7
309+  C6CA              ;
310+  C6CA              ; FALLING
311+  C6CA              ;
312+  C6CA              player_drawplayer9:             ; player is falling into the pit
313+  C6CA 21 03 C5         ld hl,player+12
314+  C6CD 7E               ld a,(hl)                   ; get the frames
315+  C6CE FE 00            cp 0
316+  C6D0 C2 D9 C6         jp nz,player_drawplayer10    ; if this isn't zero, then this isn't the first time round, so do the crush anim
317+  C6D3 3E 50            ld a,80
318+  C6D5 77               ld (hl),a                   ; otherwise, load up the anim frames
319+  C6D6 C3 55 C6         jp player_drawplayer4       ; and return to the main loop to remove the current frame
320+  C6D9              player_drawplayer10:
321+  C6D9 3D               dec a
322+  C6DA 77               ld (hl),a
323+  C6DB FE 00            cp 0
324+  C6DD CC 14 C6         call z,player_killplayer     ; final frame, so kill the player
325+  C6E0 3A FA C4         ld a,(player+3)
326+  C6E3 C3 70 C6         jp player_drawplayer2
327+  C6E6              ;
328+  C6E6              ; ROBOT KILLED
329+  C6E6              ;
330+  C6E6              player_drawplayer12:
331+  C6E6 21 03 C5         ld hl,player+12
332+  C6E9 7E               ld a,(hl)                   ; get the frames
333+  C6EA FE 00            cp 0
334+  C6EC C2 F5 C6         jp nz,player_drawplayer13    ; if this isn't zero, then this isn't the first time round, so do the crush anim
335+  C6EF 3E C8            ld a,200
336+  C6F1 77               ld (hl),a                   ; otherwise, load up the anim frames
337+  C6F2 C3 55 C6         jp player_drawplayer4       ; and return to the main loop to remove the current frame
338+  C6F5              player_drawplayer13:
339+  C6F5 3D               dec a
340+  C6F6 77               ld (hl),a
341+  C6F7 FE 00            cp 0
342+  C6F9 CC 14 C6         call z,player_killplayer     ; final frame, so kill the player
343+  C6FC 3A FA C4         ld a,(player+3)
344+  C6FF C3 70 C6         jp player_drawplayer2
345+  C702
346+  C702              ;
347+  C702              ; Runs after the player just moved. Changes animation frame if required
348+  C702              ;
349+  C702              player_justmoved:
350+  C702 D9               exx
351+  C703 3A FB C4         ld a,(player+4)             ; get the transition count
352+  C706 FE 00            cp 0
353+  C708 CA 0E C7         jp z, player_justmoved2     ; if zero reset and change the frame
354+  C70B C3 28 C7         jp player_justmoved1       ; otherwise decrease and continue
355+  C70E              player_justmoved2:
356+  C70E                  ; reset and change frame in here
357+  C70E 3E 01            ld a,1
358+  C710 32 FB C4         ld (player+4),a            ; reset back to whatever
359+  C713 3A FA C4         ld a,(player+3)             ; load the frame
360+  C716 FE 03            cp 3                       ; flip between 3 and 0
361+  C718 C2 20 C7         jp nz, player_justmoved4
362+  C71B 3E 00            ld a,0
363+  C71D C3 22 C7         jp player_justmoved5
364+  C720              player_justmoved4:
365+  C720 3E 03            ld a,3
366+  C722              player_justmoved5:
367+  C722 32 FA C4         ld (player+3),a           ; save back
368+  C725 C3 2C C7         jp player_justmoved3
369+  C728              player_justmoved1:
370+  C728                  ; decrease count
371+  C728 3D               dec a
372+  C729 32 FB C4         ld (player+4),a
373+  C72C              player_justmoved3:
374+  C72C D9               exx;
375+  C72D C9               ret
376+  C72E
377+  C72E              ;
378+  C72E              ; Called if the player has collected a diamond. Checks the current coord. If it is the start coord, then return complete
379+  C72E              ; Outputs:
380+  C72E              ; a - 1 for completed level
381+  C72E              player_checkforexit:
382+  C72E ED 4B F7 C4      ld bc,(player)                 ; get player coords
383+  C732 ED 5B E8 80      ld de,(init_coord)             ; get start coords
384+  C736 78               ld a,b
385+  C737 BA               cp d                         ; compare horiz
386+  C738 C2 43 C7         jp nz,player_checkforexit1
387+  C73B 79               ld a,c
388+  C73C BB               cp e                        ; compare vert
389+  C73D C2 43 C7         jp nz,player_checkforexit1
390+  C740              player_checkforexit0:
391+  C740 3E 01            ld a,1                       ; hasn't completed
392+  C742 C9               ret
393+  C743              player_checkforexit1:
394+  C743 3E 00            ld a,0                       ; has completed
395+  C745 C9               ret
# file closed: game/player.asm
157   C746                  include "game\ship.asm"
# file opened: game/ship.asm
  1+  C746              ;
  2+  C746              ; Ship initial position: vert,horiz
  3+  C746              ;
  4+  C746              ship_initpos:
  5+  C746 00 24            defb 0,36
  6+  C748              ship_initpos2:
  7+  C748 00 00            defb 0,0
  8+  C74A              ship_frame:
  9+  C74A 00               defb 0
 10+  C74B              ;
 11+  C74B              ; The current memory location
 12+  C74B              ;
 13+  C74B              ship_current_sprite:
 14+  C74B 00 00            defb 0,0
 15+  C74D
 16+  C74D              ship_current_coords:
 17+  C74D 00 00            defb 0,0
 18+  C74F
 19+  C74F              ship_process:
 20+  C74F 3A 02 C5         ld a,(player+11)
 21+  C752 FE 02            cp 2                        ; has the player been killed by tank?
 22+  C754 C0               ret nz                      ; do nothing if not
 23+  C755 CD D0 C1         call control_scroll_up           ; make sure the screen is on the top screen
 24+  C758 CD D2 C7         call ship_takeoff           ; bye bye
 25+  C75B CD 14 C6         call player_killplayer      ; killed
 26+  C75E 06 32            ld b,50
 27+  C760 CD 61 81         call utilities_pauseforframes
 28+  C763 C9               ret
 29+  C764
 30+  C764              ;
 31+  C764              ;   Draw and land the ship - first move the ship down, then across, drawing the player in the middle
 32+  C764              ;
 33+  C764              ship_land:
 34+  C764 ED 4B 46 C7      ld bc,(ship_initpos)
 35+  C768 ED 43 48 C7      ld (ship_initpos2),bc        ; save the initial position for later use
 36+  C76C 1E 00            ld e,0                      ; store a flag to track first time round
 37+  C76E 06 09            ld b,9                      ; move down 8 pixels
 38+  C770              ship_land0:
 39+  C770 C5               push bc
 40+  C771 7B               ld a,e
 41+  C772 D5               push de                     ; store de for next time round
 42+  C773 FE 01            cp 1                        ; check first time flag
 43+  C775 C2 8A C7         jp nz,ship_land1             ; don't draw over previous one if first time
 44+  C778 CD 1A C8         call ship_draw_full         ; delete old one
 45+  C77B CD FE C7         call ship_change_frame      ; increment the frame
 46+  C77E ED 4B 48 C7      ld bc,(ship_initpos2)       ; get the current coords
 47+  C782 81 C6 01         add c,1                     ; move down one pixels
 48+  C785 4F               ld c,a
 49+  C786 ED 43 48 C7      ld (ship_initpos2),bc
 50+  C78A              ship_land1:
 51+  C78A CD 1A C8         call ship_draw_full         ; draw the ship
 52+  C78D D1               pop de
 53+  C78E 7B               ld a,e
 54+  C78F FE 00            cp 0
 55+  C791 C2 97 C7         jp nz,ship_land4
 56+  C794 CD 5F B1         call sound_pitchbend        ; play sound if first frame
 57+  C797              ship_land4:
 58+  C797 D5               push de
 59+  C798 CD 13 C8         call ship_draw_screen
 60+  C79B D1               pop de
 61+  C79C 1E 01            ld e,1
 62+  C79E C1               pop bc
 63+  C79F 10 CF            djnz ship_land0             ; repeat for downward movement
 64+  C7A1                  ; done moving down
 65+  C7A1                  ; now move across
 66+  C7A1 CD 38 C6         call player_drawplayer      ; draw player
 67+  C7A4 CD 1A C8         call ship_draw_full         ; delete old one
 68+  C7A7 1E 00            ld e,0                      ; store a flag to track first time round
 69+  C7A9 06 14            ld b,20                      ; move back 20 pixels pixels
 70+  C7AB              ship_land3:
 71+  C7AB C5               push bc
 72+  C7AC 7B               ld a,e
 73+  C7AD D5               push de                     ; store de for next time round
 74+  C7AE FE 01            cp 1                        ; check first time flag
 75+  C7B0 C2 C5 C7         jp nz,ship_land2             ; don't draw over previous one if first time
 76+  C7B3 CD 1A C8         call ship_draw_full         ; delete old one
 77+  C7B6 CD FE C7         call ship_change_frame      ; increment the frame
 78+  C7B9 ED 4B 48 C7      ld bc,(ship_initpos2)       ; get the current coords
 79+  C7BD 78               ld a,b
 80+  C7BE D6 01            sub 1                       ; move back one pixels
 81+  C7C0 47               ld b,a
 82+  C7C1 ED 43 48 C7      ld (ship_initpos2),bc
 83+  C7C5              ship_land2:
 84+  C7C5 CD 1A C8         call ship_draw_full         ; draw the ship
 85+  C7C8 CD 13 C8         call ship_draw_screen       ; draw the frame to screen by clearing the buffer
 86+  C7CB D1               pop de
 87+  C7CC 1E 01            ld e,1                      ; set e to 1 to indicate >1 time
 88+  C7CE C1               pop bc
 89+  C7CF 10 DA            djnz ship_land3             ; repeat for vertical movement
 90+  C7D1 C9               ret
 91+  C7D2
 92+  C7D2              ;
 93+  C7D2              ;   Take off the ship
 94+  C7D2              ;
 95+  C7D2              ship_takeoff:
 96+  C7D2 1E 01            ld e,1                      ; store a flag to track first time round
 97+  C7D4 06 08            ld b,8                      ; move up 8 pixels
 98+  C7D6              ship_takeoff0:
 99+  C7D6 C5               push bc
100+  C7D7 7B               ld a,e
101+  C7D8 D5               push de                     ; store de for next time round
102+  C7D9 FE 01            cp 1                        ; check first time flag
103+  C7DB C2 F1 C7         jp nz,ship_takeoff1             ; don't draw over previous one if first time
104+  C7DE ED 4B 48 C7      ld bc,(ship_initpos2)       ; get the current coords
105+  C7E2 CD 1A C8         call ship_draw_full         ; delete old one
106+  C7E5 CD FE C7         call ship_change_frame      ; increment the frame
107+  C7E8 ED 4B 48 C7      ld bc,(ship_initpos2)       ; get the current coords
108+  C7EC 0D               dec c                       ; move up one pixels
109+  C7ED ED 43 48 C7      ld (ship_initpos2),bc
110+  C7F1              ship_takeoff1:
111+  C7F1 CD 1A C8         call ship_draw_full         ; draw the ship
112+  C7F4 CD 13 C8         call ship_draw_screen
113+  C7F7 D1               pop de
114+  C7F8 1E 01            ld e,1
115+  C7FA C1               pop bc
116+  C7FB 10 D9            djnz ship_takeoff0             ; repeat for upward movement
117+  C7FD                  ; done moving up
118+  C7FD C9               ret
119+  C7FE
120+  C7FE              ;
121+  C7FE              ; Swap the animation frame between 0 and 32. This will be added to the memory location later
122+  C7FE              ;
123+  C7FE              ship_change_frame:
124+  C7FE F5               push af
125+  C7FF 3A 4A C7         ld a,(ship_frame)
126+  C802 FE 00            cp 0
127+  C804 CA 0C C8         jp z,ship_change_frame0
128+  C807 3E 00            ld a,0                      ; flip to 0
129+  C809 C3 0E C8         jp ship_change_frame1
130+  C80C              ship_change_frame0:
131+  C80C 3E 20            ld a,32                      ; flip to 32
132+  C80E              ship_change_frame1:
133+  C80E 32 4A C7         ld (ship_frame),a            ; save the frame
134+  C811 F1               pop af
135+  C812 C9               ret
136+  C813
137+  C813              ship_draw_screen:
138+  C813 76               halt
139+  C814 F3               di
140+  C815 CD 03 A8         call buffer_buffertoscreen  ; copy buffer to screen
141+  C818 FB               ei                          ; enable interupts
142+  C819 C9               ret
143+  C81A
144+  C81A              ship_draw_full:
145+  C81A 21 C5 BD         ld hl,ship_sprite
146+  C81D ED 4B 48 C7      ld bc,(ship_initpos2)         ; load bc with the start coords
147+  C821 22 4B C7         ld (ship_current_sprite),hl  ; put into memory
148+  C824 ED 43 4D C7      ld (ship_current_coords),bc  ; put into memory
149+  C828 CD 47 C8         call ship_draw
150+  C82B 08               ex af,af'
151+  C82C 3A 4A C7         ld a,(ship_frame)            ; get the animation frame
152+  C82F 16 00            ld d,0
153+  C831 5F               ld e,a
154+  C832 19               add hl,de
155+  C833 22 4B C7         ld (ship_current_sprite),hl  ; put into memory
156+  C836 08               ex af,af'
157+  C837 ED 4B 48 C7      ld bc,(ship_initpos2)         ; load bc with the start coords
158+  C83B 81 C6 08         add c,8                      ; move one line down
159+  C83E 4F               ld c,a
160+  C83F ED 43 4D C7      ld (ship_current_coords),bc  ; put into memory
161+  C843 CD 47 C8         call ship_draw
162+  C846 C9               ret
163+  C847
164+  C847              ;
165+  C847              ; Draw the ship
166+  C847              ; Inputs:
167+  C847              ; None, all in memory
168+  C847              ;
169+  C847              ship_draw:
170+  C847 3E 04            ld a,4                              ; 4 pieces per half
171+  C849              ship_draw0:
172+  C849 F5               push af
173+  C84A 2A 4B C7         ld hl,(ship_current_sprite)
174+  C84D ED 4B 4D C7      ld bc,(ship_current_coords)         ; load bc with the start coords
175+  C851 CD 0C AB         call sprites_drawsprite
176+  C854 2A 4B C7         ld hl,(ship_current_sprite)
177+  C857 ED 4B 4D C7      ld bc,(ship_current_coords)         ; load bc with the start coords
178+  C85B 11 08 00         ld de,8
179+  C85E 19               add hl,de
180+  C85F 80 C6 08         add b,8
181+  C862 47               ld b,a
182+  C863 22 4B C7         ld (ship_current_sprite),hl         ; put into memory
183+  C866 ED 43 4D C7      ld (ship_current_coords),bc         ; put into memory
184+  C86A F1               pop af
185+  C86B 3D               dec a
186+  C86C FE 00            cp 0
187+  C86E C2 49 C8         jp nz,ship_draw0
188+  C871
189+  C871 C9               ret
190+  C872
# file closed: game/ship.asm
158   C872                  include "game\tank.asm"
# file opened: game/tank.asm
  1+  C872              ;
  2+  C872              ; tank initial position: vert,horiz
  3+  C872              ;
  4+  C872              tank_initpos:
  5+  C872 10 D0            defb 16,208
  6+  C874              tank_initpos2:
  7+  C874 00 00            defb 0,0
  8+  C876              tank_frame:
  9+  C876 00               defb 0
 10+  C877              tank_anim:
 11+  C877 11               defb 17
 12+  C878
 13+  C878              ;
 14+  C878              ; The damage countdown
 15+  C878              ;
 16+  C878              tank_currentdamage:
 17+  C878 F0               defb 240
 18+  C879
 19+  C879              ;
 20+  C879              ; The damage coordinate
 21+  C879              ;
 22+  C879              tank_currentdamagecoord:
 23+  C879 16 02            defb 22,2
 24+  C87B
 25+  C87B              ;
 26+  C87B              ; Controls when the tank shoots
 27+  C87B              ;
 28+  C87B              tank_count:
 29+  C87B 00               defb 0
 30+  C87C
 31+  C87C              ;
 32+  C87C              ; Holds the block number of the current damage sprite
 33+  C87C              ;
 34+  C87C              tank_damageframe:
 35+  C87C 00               defb 0
 36+  C87D
 37+  C87D              ;
 38+  C87D              ; The current memory location
 39+  C87D              ;
 40+  C87D              tank_current_sprite:
 41+  C87D 00 00            defb 0,0
 42+  C87F
 43+  C87F              tank_current_coords:
 44+  C87F 00 00            defb 0,0
 45+  C881
 46+  C881              ;
 47+  C881              ; Is the missile displayed - will be 19 if so, 0 if not
 48+  C881              ;
 49+  C881              tank_missile_displayed:
 50+  C881 00               defb 0
 51+  C882
 52+  C882              ;
 53+  C882              ; Speed that the tank fires
 54+  C882              ;
 55+  C882              tank_speed:
 56+  C882 00               defb 0
 57+  C883
 58+  C883              ;
 59+  C883              ; Initialise the tank
 60+  C883              ;
 61+  C883              tank_init:
 62+  C883 ED 4B 72 C8      ld bc,(tank_initpos)
 63+  C887 ED 43 74 C8      ld (tank_initpos2),bc       ; save the initial position for later use
 64+  C88B 21 76 C8         ld hl,tank_frame
 65+  C88E 36 00            ld (hl),0
 66+  C890 21 77 C8         ld hl,tank_anim
 67+  C893 36 11            ld (hl),17
 68+  C895 21 7C C8         ld hl,tank_damageframe              ; reset tank
 69+  C898 36 00            ld (hl),0
 70+  C89A 21 7B C8         ld hl,tank_count
 71+  C89D 36 00            ld (hl),0
 72+  C89F 21 78 C8         ld hl,tank_currentdamage
 73+  C8A2 36 F0            ld (hl),240
 74+  C8A4 21 79 C8         ld hl,tank_currentdamagecoord
 75+  C8A7 36 16            ld (hl),22
 76+  C8A9 23               inc hl
 77+  C8AA 36 02            ld (hl),2
 78+  C8AC 21 81 C8         ld hl,tank_missile_displayed
 79+  C8AF 36 00            ld (hl),0
 80+  C8B1
 81+  C8B1 C9               ret
 82+  C8B2
 83+  C8B2              ;
 84+  C8B2              ;   Draw and move the tank
 85+  C8B2              ;   Start processing at frame 200
 86+  C8B2              ;   Don't move if anim is zero
 87+  C8B2              ;   Decrement frame if moved
 88+  C8B2              ;
 89+  C8B2              tank_process:
 90+  C8B2 3A 77 C8         ld a,(tank_anim)
 91+  C8B5 FE 00            cp 0
 92+  C8B7 C2 BE C8         jp nz,tank_process0         ; fire the tank if we've already moved, or jump to movement
 93+  C8BA CD CF C8         call tank_fire
 94+  C8BD C9               ret
 95+  C8BE              tank_process0:
 96+  C8BE CD A1 C4         call game_getcurrentframe   ; get the current frame number into a
 97+  C8C1 FE 4B            cp 75
 98+  C8C3 D8               ret c                       ; return if the frame number is below 100
 99+  C8C4 CD FB C9         call tank_move              ; move tank if not
100+  C8C7 3A 77 C8         ld a,(tank_anim)
101+  C8CA 3D               dec a
102+  C8CB 32 77 C8         ld (tank_anim),a            ; decrease the anim count
103+  C8CE C9               ret
104+  C8CF
105+  C8CF              ;
106+  C8CF              ; Fires the tank
107+  C8CF              ;
108+  C8CF              tank_fire:
109+  C8CF 3A 7B C8         ld a,(tank_count)            ; if not, don't do anything
110+  C8D2 3C               inc a                        ; increment
111+  C8D3 ED 5B 82 C8      ld de,(tank_speed)
112+  C8D7 BB               cp e                        ; have we reached the speed
113+  C8D8 C2 DD C8         jp nz,tank_fire0
114+  C8DB 3E 00            ld a,0                       ; reset if reached fifty
115+  C8DD              tank_fire0:                      ; DEALING WITH A NEW BLOCK
116+  C8DD 32 7B C8         ld (tank_count),a            ; store tank count
117+  C8E0 FE 00            cp 0
118+  C8E2 CA 03 C9         jp z,tank_fire7              ; If this is zero, fire
119+  C8E5 3A 81 C8         ld a,(tank_missile_displayed) ; is the missile displaying?
120+  C8E8 FE 00            cp 0
121+  C8EA C8               ret z                       ; don't do anything if not
122+  C8EB CD B5 C9         call tank_missilegraphic     ; if not, overwrite the previous tank missile
123+  C8EE 3E 00            ld a,0                       ; reset the flag
124+  C8F0 32 81 C8         ld (tank_missile_displayed),a
125+  C8F3 3E 02            ld a,2
126+  C8F5 ED 4B 79 C8      ld bc,(tank_currentdamagecoord)
127+  C8F9 0C               inc c
128+  C8FA 0C               inc c
129+  C8FB ED 43 23 AC      ld (origcoords),bc
130+  C8FF CD 28 A7         call buffer_marklineforupdate
131+  C902 C9               ret                        ; only shoot if we're on 0
132+  C903              tank_fire7:
133+  C903 3A 78 C8         ld a,(tank_currentdamage)    ; get the damage countdown
134+  C906 E6 07            and 7                       ; check if multiple of 8 - house keeping when moving onto a new block
135+  C908 C2 3E C9         jp nz,tank_fire1            ; not, so just do a normal frame
136+  C90B ED 4B 79 C8      ld bc,(tank_currentdamagecoord) ; get the current damage coord into bc
137+  C90F 79               ld a,c
138+  C910 FE 0A            cp 10
139+  C912 C2 19 C9         jp nz, tank_fire6
140+  C915 CD ED C9         call tank_killedbytank      ; we're through, so the player has died. Kill them.
141+  C918 C9               ret                         ; return if we're through the mountain
142+  C919              tank_fire6:
143+  C919 3E 0F            ld a,15
144+  C91B 32 7C C8         ld (tank_damageframe),a     ; reset the damage frame
145+  C91E 21 59 BC         ld hl,sprites               ; location of the empty block
146+  C921 CD 64 AA         call screen_showchar        ; show this character here
147+  C924 ED 4B 79 C8      ld bc,(tank_currentdamagecoord) ; get the current damage coord into bc
148+  C928 05               dec b                       ; look one above
149+  C929 CD C8 AA         call screen_ischarempty     ; check if it is empty
150+  C92C ED 4B 79 C8      ld bc,(tank_currentdamagecoord) ; get the current damage coord into bc again
151+  C930 FE 01            cp 1
152+  C932 C2 75 C9         jp nz,tank_fire2             ; block above isn't empty, so can't move on, copy down above blocks
153+  C935 ED 4B 79 C8      ld bc,(tank_currentdamagecoord) ; get the current damage coord into bc
154+  C939 0D               dec c
155+  C93A ED 43 79 C8      ld (tank_currentdamagecoord),bc ; store the coord
156+  C93E              tank_fire1:                         ; DEALING WITH NORMAL DAMAGE
157+  C93E ED 4B 79 C8      ld bc,(tank_currentdamagecoord) ; get the current damage coord into bc
158+  C942 3A 78 C8         ld a,(tank_currentdamage)    ; get the damage countdown
159+  C945 E6 07            and 7                       ; is it a multiple of 8? only want to do the first line check then
160+  C947 C2 52 C9         jp nz, tank_fire5
161+  C94A CD F8 AA         call screen_getcharfirstbyte    ; get the first byte to check if this is a slope
162+  C94D FE FF            cp 255                      ; if it's a full line, it will be 255 and not a slope
163+  C94F C2 93 C9         jp nz,tank_fire3            ; if it's a slope, handle this differently
164+  C952              tank_fire5:
165+  C952 3A 7C C8         ld a,(tank_damageframe)
166+  C955 CD 87 AA         call screen_getblock        ; get the block data into hl
167+  C958 CD 64 AA         call screen_showchar        ; show this character here
168+  C95B 3A 7C C8         ld a,(tank_damageframe)
169+  C95E 3C               inc a
170+  C95F 32 7C C8         ld (tank_damageframe),a     ; increment the damage block and store
171+  C962 3A 78 C8         ld a,(tank_currentdamage)    ; get the damage countdown
172+  C965 3D               dec a
173+  C966 3D               dec a
174+  C967 32 78 C8         ld (tank_currentdamage),a     ; decrease current damage by 2 and store
175+  C96A 3A 81 C8         ld a,(tank_missile_displayed) ; is the missile displaying?
176+  C96D FE 00            cp 0
177+  C96F CC B5 C9         call z, tank_missilegraphic
178+  C972 C3 9C C9         jp tank_fire4
179+  C975              tank_fire2:                     ; DEALING WITH COPYING BLOCKS FROM ABOVE
180+  C975 05               dec b
181+  C976 C5               push bc
182+  C977 CD E1 AA         call screen_copyblockdown       ; copy the block down
183+  C97A ED 4B 79 C8      ld bc,(tank_currentdamagecoord) ; get the current damage coord into bc
184+  C97E C1               pop bc                      ; get the coord we just checked back
185+  C97F 78               ld a,b
186+  C980 FE 00            cp 0
187+  C982 CA 3E C9         jp z,tank_fire1             ; if we're at the top of the screen, don't check any more
188+  C985 C5               push bc
189+  C986 05               dec b
190+  C987 CD C8 AA         call screen_ischarempty     ; check if it is empty
191+  C98A C1               pop bc
192+  C98B FE 01            cp 1                        ; if empty
193+  C98D C2 75 C9         jp nz, tank_fire2            ; copy another one down
194+  C990 C3 3E C9         jp tank_fire1               ; otherwise, return to main thread
195+  C993              tank_fire3:                      ; dealing with slopes
196+  C993 3A 78 C8         ld a,(tank_currentdamage)    ; get the damage countdown
197+  C996 06 08            ld b,8
198+  C998 90               sub b                        ; special case for slopes
199+  C999 32 78 C8         ld (tank_currentdamage),a    ; decrease the damage countdown by 8, so that next time, we get rid of this block without eroding it
200+  C99C              tank_fire4:                     ; TIDY UP
201+  C99C ED 4B 79 C8      ld bc,(tank_currentdamagecoord)
202+  C9A0 ED 43 23 AC      ld (origcoords),bc
203+  C9A4 CD 28 A7         call buffer_marklineforupdate
204+  C9A7 3E 01            ld a,1
205+  C9A9 CD 28 A7         call buffer_marklineforupdate
206+  C9AC 3E 02            ld a,2
207+  C9AE CD 28 A7         call buffer_marklineforupdate
208+  C9B1 CD A3 B1         call sound_tankshoot
209+  C9B4 C9               ret
210+  C9B5
211+  C9B5              ;
212+  C9B5              ; Displays or hides the missile graphic, and changes the gun
213+  C9B5              ;
214+  C9B5              tank_missilegraphic:
215+  C9B5 3A 81 C8         ld a,(tank_missile_displayed)
216+  C9B8 FE 00            cp 0
217+  C9BA C2 C2 C9         jp nz,tank_missilegraphic0
218+  C9BD 3E 13            ld a,19
219+  C9BF C3 C4 C9         jp tank_missilegraphic1
220+  C9C2              tank_missilegraphic0:
221+  C9C2 3E 00            ld a,0
222+  C9C4              tank_missilegraphic1:
223+  C9C4 32 81 C8         ld (tank_missile_displayed),a ; store the flipped graphic
224+  C9C7 ED 4B 79 C8      ld bc,(tank_currentdamagecoord)
225+  C9CB 0C               inc c
226+  C9CC 0C               inc c                   ; print the graphic 2 spaces right
227+  C9CD CD 87 AA         call screen_getblock        ; get the block data into hl
228+  C9D0 CD 64 AA         call screen_showchar        ; show this character here
229+  C9D3 06 02            ld b,2
230+  C9D5 0E 18            ld c,24                     ; set gunbarrel coords
231+  C9D7 11 00 00         ld de,0
232+  C9DA 21 25 BE         ld hl,tank_sprite           ; set hl to gunbarrel gfx, shooting is +64
233+  C9DD 3A 81 C8         ld a,(tank_missile_displayed)
234+  C9E0 FE 00            cp 0
235+  C9E2 CA E8 C9         jp z,tank_missilegraphic2
236+  C9E5 11 40 00         ld de,64
237+  C9E8              tank_missilegraphic2:
238+  C9E8 19               add hl,de                   ; work out missile graphic
239+  C9E9 CD 64 AA         call screen_showchar        ; show this character here
240+  C9EC C9               ret
241+  C9ED
242+  C9ED              ;
243+  C9ED              ; Deal with the player being killed by the tank
244+  C9ED              ;
245+  C9ED              tank_killedbytank:
246+  C9ED ED 4B 79 C8      ld bc,(tank_currentdamagecoord) ; get the current damage coord into bc
247+  C9F1 21 59 BC         ld hl,sprites                   ; empty sprite
248+  C9F4 CD 64 AA         call screen_showchar            ; hide the last piece of dirt
249+  C9F7 CD 20 C6         call player_tankkillplayer
250+  C9FA C9               ret
251+  C9FB
252+  C9FB              tank_move:
253+  C9FB ED 4B 74 C8      ld bc,(tank_initpos2)
254+  C9FF C5               push bc
255+  CA00 3A 77 C8         ld a,(tank_anim)
256+  CA03 FE 11            cp 17                       ; check first time flag
257+  CA05 CA 17 CA         jp z,tank_move1             ; don't draw over previous one if first time
258+  CA08 CD 1C CA         call tank_draw_full         ; delete old one
259+  CA0B ED 4B 74 C8      ld bc,(tank_initpos2)       ; get the current coords
260+  CA0F 78               ld a,b
261+  CA10 D6 01            sub 1                       ; move back one pixels
262+  CA12 47               ld b,a
263+  CA13 ED 43 74 C8      ld (tank_initpos2),bc
264+  CA17              tank_move1:
265+  CA17 CD 1C CA         call tank_draw_full         ; draw the tank
266+  CA1A C1               pop bc
267+  CA1B C9               ret
268+  CA1C
269+  CA1C              tank_draw_full:
270+  CA1C 21 25 BE         ld hl,tank_sprite
271+  CA1F ED 4B 74 C8      ld bc,(tank_initpos2)         ; load bc with the start coords
272+  CA23 22 7D C8         ld (tank_current_sprite),hl  ; put into memory
273+  CA26 ED 43 7F C8      ld (tank_current_coords),bc  ; put into memory
274+  CA2A CD 49 CA         call tank_draw
275+  CA2D 08               ex af,af'
276+  CA2E 3A 76 C8         ld a,(tank_frame)            ; get the animation frame
277+  CA31 16 00            ld d,0
278+  CA33 5F               ld e,a
279+  CA34 19               add hl,de
280+  CA35 22 7D C8         ld (tank_current_sprite),hl  ; put into memory
281+  CA38 08               ex af,af'
282+  CA39 ED 4B 74 C8      ld bc,(tank_initpos2)         ; load bc with the start coords
283+  CA3D 81 C6 08         add c,8                      ; move one line down
284+  CA40 4F               ld c,a
285+  CA41 ED 43 7F C8      ld (tank_current_coords),bc  ; put into memory
286+  CA45 CD 49 CA         call tank_draw
287+  CA48 C9               ret
288+  CA49
289+  CA49              ;
290+  CA49              ; Draw the tank
291+  CA49              ; Inputs:
292+  CA49              ; None, all in memory
293+  CA49              ;
294+  CA49              tank_draw:
295+  CA49 3E 04            ld a,4                              ; 4 pieces per half
296+  CA4B              tank_draw0:
297+  CA4B F5               push af
298+  CA4C 2A 7D C8         ld hl,(tank_current_sprite)
299+  CA4F ED 4B 7F C8      ld bc,(tank_current_coords)         ; load bc with the start coords
300+  CA53 CD 0C AB         call sprites_drawsprite
301+  CA56 2A 7D C8         ld hl,(tank_current_sprite)
302+  CA59 ED 4B 7F C8      ld bc,(tank_current_coords)         ; load bc with the start coords
303+  CA5D 11 08 00         ld de,8
304+  CA60 19               add hl,de
305+  CA61 80 C6 08         add b,8
306+  CA64 47               ld b,a
307+  CA65 22 7D C8         ld (tank_current_sprite),hl         ; put into memory
308+  CA68 ED 43 7F C8      ld (tank_current_coords),bc         ; put into memory
309+  CA6C F1               pop af
310+  CA6D 3D               dec a
311+  CA6E FE 00            cp 0
312+  CA70 C2 4B CA         jp nz,tank_draw0
313+  CA73
314+  CA73 C9               ret
315+  CA74
# file closed: game/tank.asm
159   CA74                  include "game\rocks.asm"
# file opened: game/rocks.asm
  1+  CA74              ;
  2+  CA74              ; A structure of falling rocks
  3+  CA74              ; Assume we'll never have more than 4 falling at any one time
  4+  CA74              ; (1,2 - 16 bit memory location for rock graphic),state (0 fell, 1 falling, 2 wobbling), countdown
  5+  CA74              ;
  6+  CA74              rocks_falling:
  7+  CA74 00 00 00 00      defb 0,0,0,0
  8+  CA78 00 00 00 00      defb 0,0,0,0
  9+  CA7C 00 00 00 00      defb 0,0,0,0
 10+  CA80 00 00 00 00      defb 0,0,0,0
 11+  CA84
 12+  CA84              rocks_tmp:
 13+  CA84 00               defb 0
 14+  CA85
 15+  CA85              rocks_tmp2:
 16+  CA85 00 00            defb 0,0
 17+  CA87
 18+  CA87              ;
 19+  CA87              ; The number of frames to wobble for
 20+  CA87              ; Must always be 10 more than the number of frames a player digs
 21+  CA87              ;
 22+  CA87              rocks_numberofframestowobble:
 23+  CA87 14               defb 20
 24+  CA88
 25+  CA88              ;
 26+  CA88              ; Coords of the rock that killed us
 27+  CA88              ;
 28+  CA88              rocks_killerrock:
 29+  CA88 00 00            defb 0,0
 30+  CA8A
 31+  CA8A              ;
 32+  CA8A              ; Checks for a rock that needs to start falling. Takes a memory location of the first line at the bottom of the space.
 33+  CA8A              ; Checks to see if the pixel row in that location is a rock bottom. If it is, mark this rock as ready to fall.
 34+  CA8A              ; If the pixel row is not the rock bottom, stop checking.
 35+  CA8A              ; Inputs:
 36+  CA8A              ; hl- memory location
 37+  CA8A              ;
 38+  CA8A              rocks_checkforfalling:
 39+  CA8A 7E               ld a,(hl)           ; get the pixel row in this memory location
 40+  CA8B FE 7E            cp 126              ; check against the bottom pixel row of the rock graphic
 41+  CA8D C2 93 CA         jp nz,rocks_checkforfalling2 ; not a rock, stop
 42+  CA90 CD 94 CA         call rocks_addrocktofalling ; mark the rock as falling
 43+  CA93              rocks_checkforfalling2:
 44+  CA93 C9               ret
 45+  CA94
 46+  CA94              ;
 47+  CA94              ; Adds the rock to the structure that tracks falling rocks
 48+  CA94              ; Inputs:
 49+  CA94              ; hl - memory location of falling rock graphic
 50+  CA94              ; bc - coords of rock, c vert
 51+  CA94              rocks_addrocktofalling:
 52+  CA94 C5               push bc             ; store the coords
 53+  CA95 11 74 CA         ld de,rocks_falling
 54+  CA98 06 04            ld b,4              ; number of possible falling rocks
 55+  CA9A              rocks_addrocktofalling0:
 56+  CA9A 13               inc de
 57+  CA9B                  ;inc de
 58+  CA9B 13               inc de              ; move three along to get the state
 59+  CA9C 1A               ld a,(de)           ; load the state
 60+  CA9D FE 00            cp 0                ; check if this is not falling
 61+  CA9F C2 B6 CA         jp nz,rocks_addrocktofalling1 ; continue the loop if not 0
 62+  CAA2 13               inc de              ; move to frame
 63+  CAA3 3A 87 CA         ld a,(rocks_numberofframestowobble) ; load the number of frames to wobble
 64+  CAA6 12               ld (de),a
 65+  CAA7 1B               dec de              ; move de back to state
 66+  CAA8 3E 02            ld a,2
 67+  CAAA 12               ld (de),a           ; set the state to wobbling
 68+  CAAB 1B               dec de              ; move back coords
 69+  CAAC C1               pop bc              ; get back coords
 70+  CAAD 78               ld a,b
 71+  CAAE 12               ld (de),a           ; store the vertical
 72+  CAAF 1B               dec de
 73+  CAB0 79               ld a,c
 74+  CAB1 12               ld (de),a           ; store the horizontal
 75+  CAB2 C5               push bc
 76+  CAB3 C3 BA CA         jp rocks_addrocktofalling2 ; done
 77+  CAB6              rocks_addrocktofalling1:
 78+  CAB6 13               inc de
 79+  CAB7 13               inc de              ; move memory along to next rock
 80+  CAB8 10 E0            djnz rocks_addrocktofalling0 ; try the next rock
 81+  CABA              rocks_addrocktofalling2: ; done, return
 82+  CABA C1               pop bc              ; to tidy up
 83+  CABB C9               ret
 84+  CABC
 85+  CABC              ;
 86+  CABC              ; Processes any falling rocks
 87+  CABC              ;
 88+  CABC              rocks_processrocks:
 89+  CABC DD 21 74 CA      ld ix,rocks_falling
 90+  CAC0 06 04            ld b,4              ; the number of rocks to check
 91+  CAC2              rocks_processrocks0:
 92+  CAC2 C5               push bc             ; store loop count
 93+  CAC3 DD 4E 00 DD      ld bc,(ix)          ; load the coords for this rock into bc
 93+  CAC7 46 01
 94+  CAC9 DD 23            inc ix
 95+  CACB DD 23            inc ix              ; move to the state
 96+  CACD DD 7E 00         ld a,(ix)           ; load the state into a
 97+  CAD0 FE 00            cp 0
 98+  CAD2 CA F3 CA         jp z,rocks_processrocks3 ; if not falling, check next
 99+  CAD5 FE 02            cp 2
100+  CAD7 C2 E7 CA         jp nz, rocks_processrocks2
101+  CADA                  ; we're wobbling
102+  CADA DD 23            inc ix              ; get frame number for wobble
103+  CADC DD 7E 00         ld a,(ix)           ; get wobble frame into a
104+  CADF CD B6 CB         call rocks_wobble
105+  CAE2 DD 23            inc ix              ; increment for next
106+  CAE4 C3 F7 CA         jp rocks_processrocks1  ; do next rock
107+  CAE7              rocks_processrocks2:
108+  CAE7                  ; we're falling
109+  CAE7 C5               push bc
110+  CAE8 CD FB CA         call rocks_fall
111+  CAEB C1               pop bc
112+  CAEC DD 23            inc ix
113+  CAEE DD 23            inc ix              ; inc ix to get to next
114+  CAF0 C3 F7 CA         jp rocks_processrocks1
115+  CAF3              rocks_processrocks3:
116+  CAF3 DD 23            inc ix
117+  CAF5 DD 23            inc ix
118+  CAF7              rocks_processrocks1:
119+  CAF7 C1               pop bc              ; get loop count back
120+  CAF8 10 C8            djnz rocks_processrocks0
121+  CAFA C9               ret
122+  CAFB
123+  CAFB              ;
124+  CAFB              ; Falls a rock one pixel, checks the next square down to see if it is empty, if not, stop falling
125+  CAFB              ; bc - coord of current rock graphic on screen
126+  CAFB              ; ix - memory location of current rock in rock list, currently at the 3rd position (rock state)
127+  CAFB              ;
128+  CAFB              rocks_fall:
129+  CAFB DD 2B            dec ix
130+  CAFD DD 2B            dec ix              ; decrease ix back to coords
131+  CAFF ED 43 85 CA      ld (rocks_tmp2),bc  ; store original coords
132+  CB03 3E 03            ld a,3              ; move this number of pixels
133+  CB05              rocks_fall1:
134+  CB05 32 84 CA         ld (rocks_tmp),a    ; store loop counter
135+  CB08 DD 4E 00 DD      ld bc,(ix)          ; get current coords
135+  CB0C 46 01
136+  CB0E CD 01 AC         call sprites_scadd  ; get the memory of the coords into de
137+  CB11 14               inc d               ; add 256 to get next row
138+  CB12 1A               ld a,(de)           ; get the contents of the next row
139+  CB13 FE 00            cp 0
140+  CB15 C2 75 CB         jp nz,rocks_fall3    ; move the rock if the row is empty
141+  CB18 0C               inc c               ; increment the vertical
142+  CB19 DD 71 00 DD      ld (ix),bc          ; store the new coords
142+  CB1D 70 01
143+  CB1F 79               ld a,c              ; get the vertical coord into a
144+  CB20 E6 07            and 7               ; divisible by 8?
145+  CB22 FE 00            cp 0
146+  CB24 C2 41 CB         jp nz,rocks_fall4   ; if not, carry on
147+  CB27 CD 3A AA         call screen_getcharcoordsfromscreencoords ; get the char coords into bc
148+  CB2A 3E 42            ld a,66             ; load red
149+  CB2C CD 92 AA         call screen_setattr
150+  CB2F DD 4E 00 DD      ld bc,(ix)
150+  CB33 46 01
151+  CB35 79               ld a,c              ; get vertical
152+  CB36 D6 08            sub 8               ; look up one square
153+  CB38 4F               ld c,a              ; put a back in c
154+  CB39 CD 3A AA         call screen_getcharcoordsfromscreencoords ; get the char coords into bc
155+  CB3C 3E 46            ld a,70             ; load yellow
156+  CB3E CD 92 AA         call screen_setattr
157+  CB41              rocks_fall4:
158+  CB41 3A 84 CA         ld a,(rocks_tmp)    ; get the loop counter
159+  CB44 3D               dec a
160+  CB45 FE 00            cp 0
161+  CB47 C2 05 CB         jp nz,rocks_fall1   ; do another pixel if needed
162+  CB4A              rocks_fall2:
163+  CB4A 3E 09            ld a,9              ; rock graphic
164+  CB4C ED 4B 85 CA      ld bc,(rocks_tmp2)  ; get the original coords
165+  CB50 CD 87 AA         call screen_getblock     ; get the memory into hl
166+  CB53 CD 0C AB         call sprites_drawsprite  ; draw the sprite - over the top of the current one
167+  CB56 3E 09            ld a,9
168+  CB58 DD 4E 00 DD      ld bc,(ix)          ; get the new coords
168+  CB5C 46 01
169+  CB5E CD 87 AA         call screen_getblock     ; get the memory into hl
170+  CB61 CD 0C AB         call sprites_drawsprite  ; draw the sprite - over the top of the current one
171+  CB64 DD 4E 00 DD      ld bc,(ix)          ; get the coords again
171+  CB68 46 01
172+  CB6A CD 9B CB         call rocks_checkforplayer ; check to see if we hit a player
173+  CB6D DD 23            inc ix
174+  CB6F DD 23            inc ix                  ; get ix back to state
175+  CB71 CD 8B CB         call rocks_makesound
176+  CB74 C9               ret
177+  CB75              rocks_fall3:
178+  CB75 3E 00            ld a,0              ; set the state to fell
179+  CB77 DD 77 02         ld (ix+2),a           ; store the falling state
180+  CB7A DD 4E 00 DD      ld bc,(ix)          ; get the coords
180+  CB7E 46 01
181+  CB80 CD 3A AA         call screen_getcharcoordsfromscreencoords ; get the char coords into bc
182+  CB83 3E 42            ld a,66             ; load magenta
183+  CB85 CD 92 AA         call screen_setattr
184+  CB88 C3 4A CB         jp rocks_fall2      ; rejoin main loop
185+  CB8B
186+  CB8B              ;
187+  CB8B              ; Makes the rock sound if we're no longer falling, and if we didn't hit a player
188+  CB8B              ;
189+  CB8B              rocks_makesound:
190+  CB8B DD 7E 00         ld a,(ix)           ; get the state
191+  CB8E FE 00            cp 0
192+  CB90 C0               ret nz              ; if we haven't fallen, don't do anything
193+  CB91 21 02 C5         ld hl,player+11
194+  CB94 7E               ld a,(hl)
195+  CB95 FE 01            cp 1
196+  CB97 C4 72 B1         call nz, sound_rockfell ; only make sound if didn't kill player
197+  CB9A C9               ret
198+  CB9B
199+  CB9B              ;
200+  CB9B              ; Checks to see if the rock is hitting a player
201+  CB9B              ; Inputs:
202+  CB9B              ; bc - coords of rock we're checking
203+  CB9B              rocks_checkforplayer:
204+  CB9B ED 5B F7 C4      ld de,(player)       ; get the player coords
205+  CB9F 7B               ld a,e               ; get the vert coord first
206+  CBA0 91               sub c                ; subtract the rock vertical coord from players
207+  CBA1 FE 08            cp 8                 ; the rock will only hit a player if the player is directly underneath, so this must be 8
208+  CBA3 C0               ret nz               ; if not, hasn't hit
209+  CBA4 7A               ld a,d               ; get the player horiz coord
210+  CBA5 90               sub b                ; subtract rock coord
211+  CBA6 C6 07            add 7                ; add max distance
212+  CBA8 FE 0D            cp 13                ; compare to 13? if carry flag set, they've hit
213+  CBAA DA AE CB         jp c,rocks_checkforplayer0
214+  CBAD C9               ret
215+  CBAE              rocks_checkforplayer0:
216+  CBAE ED 43 88 CA      ld (rocks_killerrock),bc; store the coords of the killer rock
217+  CBB2 CD 1A C6         call player_crushplayer ; if so, jump out
218+  CBB5 C9               ret
219+  CBB6
220+  CBB6              ;
221+  CBB6              ; Wobbles a rocks
222+  CBB6              ; Inputs:
223+  CBB6              ; bc - coord of current rock graphic on screen
224+  CBB6              ; ix - memory location of current rock in rock list, currently at the 4th position (wobble count)
225+  CBB6              ; a - wobble frame
226+  CBB6              rocks_wobble:
227+  CBB6 DD 7E 00         ld a,(ix)           ; get the wobble count, which we'll use as frame toggle
228+  CBB9 E6 01            and 1               ; is it odd or even, gets 1 or 0
229+  CBBB 1E 09            ld e,9              ; this is the rock frame
230+  CBBD 83               add a,e             ; add the frame toggle
231+  CBBE C5               push bc
232+  CBBF CD 87 AA         call screen_getblock     ; get the memory into hl
233+  CBC2 CD 0C AB         call sprites_drawsprite  ; draw the sprite - over the top of the current one
234+  CBC5 DD 7E 00         ld a,(ix)           ; get the frame toggle again
235+  CBC8 3D               dec a               ; decrease
236+  CBC9 DD 77 00         ld (ix),a           ; store
237+  CBCC E6 01            and 1
238+  CBCE 1E 09            ld e,9              ; this is the rock frame
239+  CBD0 83               add a,e             ; add the frame toggle
240+  CBD1 CD 87 AA         call screen_getblock     ; get the memory into hl
241+  CBD4 C1               pop bc
242+  CBD5 CD 0C AB         call sprites_drawsprite  ; draw the sprite again with the new frame - next time it will do the opposite
243+  CBD8 DD 7E 00         ld a,(ix)           ; get the wobble count back
244+  CBDB FE 00            cp 0
245+  CBDD C0               ret nz              ; if we're not at zero, return
246+  CBDE DD 2B            dec ix              ; otherwise look to state location
247+  CBE0 3E 01            ld a,1              ; set the state to falling
248+  CBE2 DD 77 00         ld (ix),a           ; store the falling state
249+  CBE5 DD 23            inc ix              ; set ix back to location of wobble count, and we're done
250+  CBE7 C9               ret
251+  CBE8
# file closed: game/rocks.asm
160   CBE8                  include "game\scores.asm"
# file opened: game/scores.asm
  1+  CBE8              ;
  2+  CBE8              ; The score of the current player
  3+  CBE8              ;
  4+  CBE8              scores_current:
  5+  CBE8 04 01 30 30      defb 4,1,'000000',255       ;+2
  5+  CBEC 30 30 30 30
  5+  CBF0 FF
  6+  CBF1
  7+  CBF1              scores_defaultname:
  8+  CBF1 2D 2D 2D         defb '---'
  9+  CBF4
 10+  CBF4              ;
 11+  CBF4              ; The current high score table
 12+  CBF4              ;
 13+  CBF4              scores_table:
 14+  CBF4 03 17 47 41      defb 03,23,'GAM000000',255         ;+0, +2, +5
 14+  CBF8 4D 30 30 30
 14+  CBFC 30 30 30 FF
 15+  CC00 0C 17 47 41      defb 12,23,'GAM000000',255        ;+12, +14, +17
 15+  CC04 4D 30 30 30
 15+  CC08 30 30 30 FF
 16+  CC0C 15 17 47 41      defb 21,23,'GAM000000',255        ;+24, +26, +29
 16+  CC10 4D 30 30 30
 16+  CC14 30 30 30 FF
 17+  CC18
 18+  CC18              ;
 19+  CC18              ; Add thousands to the score
 20+  CC18              ; Inputs:
 21+  CC18              ; b - number to add
 22+  CC18              ;
 23+  CC18              scores_addthousands:
 24+  CC18 21 EC CB         ld hl,scores_current+4
 25+  CC1B CD 7C CC         call scores_update
 26+  CC1E C9               ret
 27+  CC1F
 28+  CC1F              ;
 29+  CC1F              ; Add hundreds to the score
 30+  CC1F              ; Inputs:
 31+  CC1F              ; b - number to add
 32+  CC1F              ;
 33+  CC1F              scores_addhundreds:
 34+  CC1F 21 ED CB         ld hl,scores_current+5
 35+  CC22 CD 7C CC         call scores_update
 36+  CC25 C9               ret
 37+  CC26
 38+  CC26              ;
 39+  CC26              ; Temporary area for printing scores
 40+  CC26              ;
 41+  CC26              scores_printscore_tmp:
 42+  CC26 00 00 00 00      defb 0,0,0,0,0,0,0,0,255
 42+  CC2A 00 00 00 00
 42+  CC2E FF
 43+  CC2F
 44+  CC2F              ;
 45+  CC2F              ; Prints the score to screen
 46+  CC2F              ;
 47+  CC2F              scores_printscore:
 48+  CC2F 3A 08 C4         ld a,(game_currentplayer)   ; get current player
 49+  CC32 21 E8 CB         ld hl,scores_current
 50+  CC35 FE 01            cp 1
 51+  CC37 C2 3F CC         jp nz, score_printscore0    ; if not player 1
 52+  CC3A 36 04            ld (hl),4       ; set position for player 1
 53+  CC3C C3 41 CC         jp score_printscore1
 54+  CC3F              score_printscore0:
 55+  CC3F 36 16            ld (hl),22       ; set position for player 2
 56+  CC41              score_printscore1:
 57+  CC41 CD 45 CC         call score_printscoreformatted
 58+  CC44 C9               ret
 59+  CC45
 60+  CC45              ;
 61+  CC45              ; Formats a score and prints to the top screen
 62+  CC45              ; Inputs:
 63+  CC45              ; hl - where is the score
 64+  CC45              score_printscoreformatted:
 65+  CC45 01 08 00         ld bc,8
 66+  CC48 11 26 CC         ld de,scores_printscore_tmp
 67+  CC4B ED B0            ldir                        ; copy to temp
 68+  CC4D 21 26 CC         ld hl,scores_printscore_tmp
 69+  CC50 E5 DD E1         ld ix,hl
 70+  CC53 DD 7E 02         ld a,(ix+2)
 71+  CC56 FE 30            cp 48                   ; is it a leading zero?
 72+  CC58 C2 6B CC         jp nz,score_printscore2
 73+  CC5B DD 36 02 20      ld (ix+2),32              ; load it with a space
 74+  CC5F DD 7E 03         ld a,(ix+3)
 75+  CC62 FE 30            cp 48                   ; is it a leading zero?
 76+  CC64 C2 6B CC         jp nz,score_printscore2
 77+  CC67 DD 36 03 20      ld (ix+3),32              ; load it with a space
 78+  CC6B              score_printscore2:
 79+  CC6B CD 28 86         call string_print
 80+  CC6E C9               ret
 81+  CC6F
 82+  CC6F              ;
 83+  CC6F              ; Prints both scores to screen
 84+  CC6F              ;
 85+  CC6F              scores_printscores:
 86+  CC6F 21 00 C6         ld hl,player1_score
 87+  CC72 CD 45 CC         call score_printscoreformatted
 88+  CC75 21 09 C6         ld hl,player2_score
 89+  CC78 CD 45 CC         call score_printscoreformatted
 90+  CC7B C9               ret
 91+  CC7C
 92+  CC7C              ;
 93+  CC7C              ; Updates the current score.
 94+  CC7C              ; Inputs:
 95+  CC7C              ; hl - memory location of the score column
 96+  CC7C              ; b - number to add
 97+  CC7C              ;
 98+  CC7C              scores_update:
 99+  CC7C 7E               ld a,(hl)           ; current value of digit.
100+  CC7D 80               add a,b             ; add points to this digit.
101+  CC7E 77               ld (hl),a           ; place new digit back in string.
102+  CC7F FE 3A            cp 58               ; more than ASCII value '9'?
103+  CC81 D8               ret c               ; no - relax.
104+  CC82 D6 0A            sub 10              ; subtract 10.
105+  CC84 77               ld (hl),a           ; put new character back in string.
106+  CC85              scores_update0:
107+  CC85 2B               dec hl              ; previous character in string.
108+  CC86 34               inc (hl)            ; up this by one.
109+  CC87 7E               ld a,(hl)           ; what's the new value?
110+  CC88 FE 3A            cp 58               ; gone past ASCII nine?
111+  CC8A D8               ret c               ; no, scoring done.
112+  CC8B D6 0A            sub 10              ; down by ten.
113+  CC8D 77               ld (hl),a           ; put it back
114+  CC8E C3 85 CC         jp scores_update0   ; go round again.
115+  CC91
116+  CC91
117+  CC91              ;
118+  CC91              ; Temporary area to store score
119+  CC91              ;
120+  CC91              scores_showtable_tmp:
121+  CC91 00 00 00 00      defb 0,0,0,0,0,0,0,0,0,0,0,255
121+  CC95 00 00 00 00
121+  CC99 00 00 00 FF
122+  CC9D
123+  CC9D              ;
124+  CC9D              ; Processes a score
125+  CC9D              ; Inputs:
126+  CC9D              ; hl - location on table
127+  CC9D              ;
128+  CC9D              scores_showtable_process:
129+  CC9D 01 0B 00         ld bc,11                     ; copy this many
130+  CCA0 11 91 CC         ld de,scores_showtable_tmp
131+  CCA3 ED B0            ldir
132+  CCA5 DD 21 91 CC      ld ix,scores_showtable_tmp   ; decide whether to show five or six numbers
133+  CCA9 DD 7E 05         ld a,(ix+5)
134+  CCAC FE 30            cp 48                        ; is this a zero?
135+  CCAE C2 C4 CC         jp nz,scores_showtable_process0 ; if not, show the whole thing
136+  CCB1 01 05 00         ld bc,5                      ; copy this many
137+  CCB4 DD E5 E1         ld hl,ix
138+  CCB7 11 06 00         ld de,6
139+  CCBA 19               add hl,de                    ; move to second digit
140+  CCBB 54 5D            ld de,hl
141+  CCBD 1B               dec de
142+  CCBE ED B0            ldir
143+  CCC0 DD 36 0A 20      ld (ix+10),32                ; stick a space at the end
144+  CCC4              scores_showtable_process0:
145+  CCC4 21 91 CC         ld hl,scores_showtable_tmp
146+  CCC7 CD 28 86         call string_print
147+  CCCA C9               ret
148+  CCCB
149+  CCCB              ;
150+  CCCB              ; Displays the high score table at the bottom of the screen
151+  CCCB              ;
152+  CCCB              scores_showtable:
153+  CCCB 21 F4 CB         ld hl, scores_table
154+  CCCE CD 9D CC         call scores_showtable_process
155+  CCD1 21 00 CC         ld hl, scores_table+12
156+  CCD4 CD 9D CC         call scores_showtable_process
157+  CCD7 21 0C CC         ld hl, scores_table+24
158+  CCDA CD 9D CC         call scores_showtable_process
159+  CCDD C9               ret
160+  CCDE
161+  CCDE              ;
162+  CCDE              ; Place to store the current position we're checking
163+  CCDE              ;
164+  CCDE              scores_highscoretmp:
165+  CCDE 00               defb 0
166+  CCDF
167+  CCDF              ;
168+  CCDF              ; Place to store the equal indicator
169+  CCDF              ;
170+  CCDF              scores_highscoretmp2:
171+  CCDF 00               defb 0
172+  CCE0
173+  CCE0              ;
174+  CCE0              ; Updates the highscore table. Start at bottom score. Work way from left. Compare each digit. If current is higher than one we're checking,
175+  CCE0              ; copy checking one down (or erase) then copy current over that one. Then move up one and do the same
176+  CCE0              ;
177+  CCE0              scores_processhighscores:
178+  CCE0 21 DE CC         ld hl,scores_highscoretmp
179+  CCE3 36 00            ld (hl),0  ; load up the tracking byte with 0 (ie, not on the table)
180+  CCE5 3E 1D            ld a,29
181+  CCE7              scores_processhighscores3:
182+  CCE7 21 F4 CB         ld hl,scores_table          ; position of first score column
183+  CCEA 5F               ld e,a
184+  CCEB 16 00            ld d,0
185+  CCED 19               add hl,de
186+  CCEE 08               ex af,af'                   ; store a for later
187+  CCEF 11 EA CB         ld de,scores_current+2      ; position of current score column
188+  CCF2 3E 01            ld a,1
189+  CCF4 32 DF CC         ld (scores_highscoretmp2),a ; set the equal indicator to 1 - this will be set to zero if a different number is found
190+  CCF7 06 06            ld b,6                      ; times to loop
191+  CCF9              scores_processhighscores0:
192+  CCF9 7E               ld a,(hl)
193+  CCFA 4F               ld c,a                      ; get first score column
194+  CCFB 1A               ld a,(de)                   ; get first current column
195+  CCFC B9               cp c                        ; compare current with first
196+  CCFD DA 1F CD         jp c,scores_processhighscores4  ; if c is bigger, then this is not a higher score, so end
197+  CD00 CA 08 CD         jp z,scores_processhighscores5  ; if c is equal, then this is not a higher score, so end
198+  CD03 3E 00            ld a,0
199+  CD05 32 DF CC         ld (scores_highscoretmp2),a ; zero the equality indicator
200+  CD08              scores_processhighscores5:
201+  CD08 23               inc hl
202+  CD09 13               inc de                      ; move to next column
203+  CD0A 10 ED            djnz scores_processhighscores0 ; loop
204+  CD0C 3A DF CC         ld a,(scores_highscoretmp2)   ; get the equality indicator
205+  CD0F FE 01            cp 1
206+  CD11 CA 1F CD         jp z,scores_processhighscores4 ; if it is equal, not a highscore
207+  CD14 B7               or a                            ; clear the carry flag
208+  CD15 08               ex af,af'                     ; still here, so must be bigger
209+  CD16 32 DE CC         ld (scores_highscoretmp),a  ; store the position indicator in the tracking byte
210+  CD19 0E 0C            ld c,12
211+  CD1B 91               sub c
212+  CD1C D2 E7 CC         jp nc,scores_processhighscores3 ; if the place we're looking is less than zero, we've gone to far, so continue, otherwise go again
213+  CD1F              scores_processhighscores4
214+  CD1F CD 23 CD         call scores_updatehighscores
215+  CD22 C9               ret
216+  CD23
217+  CD23              ;
218+  CD23              ; Update score table
219+  CD23              ;
220+  CD23              scores_updatehighscores:
221+  CD23 3A DE CC         ld a,(scores_highscoretmp)  ; get the place we want to overwrite
222+  CD26 FE 00            cp 0
223+  CD28 C8               ret z                       ; if this is 0, didn't get a high score
224+  CD29 FE 1D            cp 29                       ; check against 29... if it's equal, we don't want to copy the current score down one
225+  CD2B CA 5E CD         jp z, scores_updatehighscores3
226+  CD2E                                              ; copy old score over one below, if not first
227+  CD2E 21 F4 CB         ld hl,scores_table
228+  CD31 11 11 00         ld de,17                    ; start at second score, because this is the first one we'd ever need to copy...
229+  CD34 19               add hl,de                   ; position of first column
230+  CD35 2B               dec hl
231+  CD36 2B               dec hl
232+  CD37 2B               dec hl
233+  CD38 E5               push hl
234+  CD39 11 0C 00         ld de,12
235+  CD3C 19               add hl,de                   ; get position of next score
236+  CD3D 54 5D            ld de,hl
237+  CD3F E1               pop hl                      ; get hl back
238+  CD40 01 09 00         ld bc,9
239+  CD43 ED B0            ldir
240+  CD45 FE 11            cp 17                       ; see if we're copying into the second place slot (17 memory offset). If so, stop copying back the scores
241+  CD47 CA 5E CD         jp z,scores_updatehighscores3
242+  CD4A 21 F4 CB         ld hl,scores_table
243+  CD4D 11 02 00         ld de,2                    ; ... otherwise, copy back the first score
244+  CD50 19               add hl,de                   ; position of first column
245+  CD51 E5               push hl
246+  CD52 11 0C 00         ld de,12
247+  CD55 19               add hl,de                   ; get position of next score
248+  CD56 54 5D            ld de,hl
249+  CD58 E1               pop hl                      ; get hl back
250+  CD59 01 09 00         ld bc,9
251+  CD5C ED B0            ldir
252+  CD5E              scores_updatehighscores3:
253+  CD5E 06 06            ld b,6                      ; now overwrite
254+  CD60 21 F4 CB         ld hl,scores_table
255+  CD63 16 00            ld d,0
256+  CD65 5F               ld e,a
257+  CD66 19               add hl,de                   ; position of first column
258+  CD67 08               ex af,af'
259+  CD68 11 EA CB         ld de,scores_current+2      ; position of current score column
260+  CD6B              scores_updatehighscores2:
261+  CD6B 1A               ld a,(de)
262+  CD6C 77               ld (hl),a
263+  CD6D 23               inc hl
264+  CD6E 13               inc de
265+  CD6F 10 FA            djnz scores_updatehighscores2
266+  CD71 11 09 00         ld de,9
267+  CD74 ED 52            sbc hl,de
268+  CD76 54 5D            ld de,hl                    ; get back to start of entry
269+  CD78 21 F1 CB         ld hl,scores_defaultname    ; still need to overwrite the name
270+  CD7B 01 03 00         ld bc,3                      ; 3 chars to copy
271+  CD7E ED B0            ldir
272+  CD80 C9               ret
# file closed: game/scores.asm
161   CD81                  include "game\diamonds.asm"
# file opened: game/diamonds.asm
  1+  CD81              diamonds_tmp:
  2+  CD81 00               defb 0
  3+  CD82
  4+  CD82              diamonds_tmp2:
  5+  CD82 00               defb 0
  6+  CD83
  7+  CD83              ;
  8+  CD83              ; Holds the number of thousands for the current gem type
  9+  CD83              ;
 10+  CD83              diamonds_score:
 11+  CD83 00               defb 0
 12+  CD84
 13+  CD84              ;
 14+  CD84              ; Changes the attribute of gem and diamond cells based on the frame count
 15+  CD84              ; Inputs:
 16+  CD84              ; hl - memory location of gem type
 17+  CD84              diamonds_twinkle_type:
 18+  CD84 CD A1 C4         call game_getcurrentframe       ; get current frame number
 19+  CD87 E6 07            and 7                           ; want a number from 0-7
 20+  CD89 C6 40            add 64                          ; add to 60 to get attr colour
 21+  CD8B 32 82 CD         ld (diamonds_tmp2),a             ; store the colour
 22+  CD8E              diamonds_twinkle_type0:
 23+  CD8E 4E 23 46 2B      ld bc,(hl)                      ; get coords into bc
 24+  CD92 79               ld a,c                          ; load c into a
 25+  CD93 FE FF            cp 255                          ; is this the end?
 26+  CD95 CA BD CD         jp z,diamonds_twinkle_type1           ; step out if so
 27+  CD98 23               inc hl
 28+  CD99 23               inc hl
 29+  CD9A 7E               ld a,(hl)                       ; check the state, don't process if collected
 30+  CD9B FE 01            cp 1
 31+  CD9D CA BE CD         jp z,diamonds_twinkle_type2           ; step out if so
 32+  CDA0 CD FE CD         call diamonds_checkforplayer    ; check to see if we've collided with player
 33+  CDA3 DC C5 CD         call c,diamonds_collect     ; we collided
 34+  CDA6 23               inc hl
 35+  CDA7 E5               push hl
 36+  CDA8 E5 DD E1         ld ix,hl
 37+  CDAB DD 4E FD DD      ld bc,(ix-3)                    ; get coords again
 37+  CDAF 46 FE
 38+  CDB1 3A 82 CD         ld a,(diamonds_tmp2)
 39+  CDB4 CD 92 AA         call screen_setattr
 40+  CDB7 E1               pop hl
 41+  CDB8 23               inc hl
 42+  CDB9 23               inc hl                          ; move to next diamond
 43+  CDBA C3 8E CD         jp diamonds_twinkle_type0
 44+  CDBD              diamonds_twinkle_type1:
 45+  CDBD C9               ret
 46+  CDBE              diamonds_twinkle_type2:
 47+  CDBE 23               inc hl                          ; do stuff the we would have done anyway to get to next gem
 48+  CDBF 23               inc hl
 49+  CDC0 23               inc hl
 50+  CDC1 08               ex af,af'
 51+  CDC2 C3 8E CD         jp diamonds_twinkle_type0       ; rejoin main loop
 52+  CDC5
 53+  CDC5              ;
 54+  CDC5              ; Collect the diamond we collided with
 55+  CDC5              ; Inputs:
 56+  CDC5              ; hl - memory location of current diamond, currently on state
 57+  CDC5              ; Output:
 58+  CDC5              ; a - 70 - for yellow on black
 59+  CDC5              diamonds_collect:
 60+  CDC5 36 01            ld (hl),1                       ; collected
 61+  CDC7 E5               push hl
 62+  CDC8 2B               dec hl
 63+  CDC9 2B               dec hl
 64+  CDCA 4E 23 46 2B      ld bc,(hl)                      ; get the coords
 65+  CDCE CD 4A AA         call screen_getscreencoordsfromcharcoords ; get the screen coords into bc
 66+  CDD1 ED 5B 81 CD      ld de,(diamonds_tmp)            ; tmp stores the offset for this type of gem
 67+  CDD5 16 00            ld d,0
 68+  CDD7 21 59 BC         ld hl,sprites
 69+  CDDA 19               add hl,de
 70+  CDDB CD 0C AB         call sprites_drawsprite     ; call the routine to draw the sprite
 71+  CDDE E1               pop hl
 72+  CDDF 3E 46            ld a,70                     ; pass this back to overwrite the attr
 73+  CDE1 32 82 CD         ld (diamonds_tmp2),a
 74+  CDE4 D9               exx
 75+  CDE5 3A 83 CD         ld a,(diamonds_score)
 76+  CDE8 47               ld b,a
 77+  CDE9 CD 18 CC         call scores_addthousands
 78+  CDEC 3A 81 CD         ld a,(diamonds_tmp)
 79+  CDEF FE 40            cp 64                       ; check the gem type offset, if its 64 this is a diamond, so mark the level as completable
 80+  CDF1 C2 F9 CD         jp nz,diamonds_collect0
 81+  CDF4 21 04 C5         ld hl,player+13
 82+  CDF7 36 01            ld (hl),1                   ; mark the player as able to complete the level
 83+  CDF9              diamonds_collect0:
 84+  CDF9 CD 4A B1         call sound_gemcollected
 85+  CDFC D9               exx
 86+  CDFD C9               ret
 87+  CDFE
 88+  CDFE              ;
 89+  CDFE              ; Checks to see if the gem is hitting a player
 90+  CDFE              ; Inputs:
 91+  CDFE              ; bc - coords of diamond we're checking
 92+  CDFE              diamonds_checkforplayer:
 93+  CDFE 78               ld a,b               ; multiply b by 8
 94+  CDFF 07               rlca
 95+  CE00 07               rlca
 96+  CE01 07               rlca
 97+  CE02 47               ld b,a
 98+  CE03 ED 5B F7 C4      ld de,(player)       ; get the player coords
 99+  CE07 7B               ld a,e               ; get the vert coord first
100+  CE08 90               sub b                ; subtract the diamond vertical coord from players
101+  CE09 C6 04            add 4                ; add the max distance
102+  CE0B FE 09            cp 9                ; compare to max*2+1? if carry flag set, they've hit
103+  CE0D D0               ret nc               ; if not, hasn't hit
104+  CE0E 79               ld a,c               ; multiply c by 8
105+  CE0F 07               rlca
106+  CE10 07               rlca
107+  CE11 07               rlca
108+  CE12 4F               ld c,a
109+  CE13 7A               ld a,d               ; get the player horiz coord
110+  CE14 91               sub c                ; subtract rock coord
111+  CE15 C6 04            add 4                ; add max distance
112+  CE17 FE 09            cp 9                ; compare to max*2+1? if carry flag set, they've hit
113+  CE19 D0               ret nc
114+  CE1A 3E 00            ld a,0
115+  CE1C C9               ret
116+  CE1D
117+  CE1D
118+  CE1D              ;
119+  CE1D              ; Initialise diamonds and gems
120+  CE1D              ;
121+  CE1D              diamonds_twinkle
122+  CE1D 21 83 CD         ld hl,diamonds_score
123+  CE20 36 02            ld (hl),2         ; store the score we'll add
124+  CE22 21 81 CD         ld hl,diamonds_tmp
125+  CE25 36 40            ld (hl),64         ; store the location the diamond sprite
126+  CE27 21 D4 B7         ld hl, level_diamonds
127+  CE2A CD 84 CD         call diamonds_twinkle_type
128+  CE2D 21 83 CD         ld hl,diamonds_score
129+  CE30 36 01            ld (hl),1         ; store the score we'll add
130+  CE32 21 81 CD         ld hl,diamonds_tmp
131+  CE35 36 70            ld (hl),112         ; store the location the gem sprite
132+  CE37 21 E4 B7         ld hl, level_gems
133+  CE3A CD 84 CD         call diamonds_twinkle_type
134+  CE3D C9               ret
135+  CE3E
136+  CE3E              ;
137+  CE3E              ; Initialise diamonds and gems
138+  CE3E              ;
139+  CE3E              diamonds_init:
140+  CE3E 21 D4 B7         ld hl, level_diamonds
141+  CE41 CD 4B CE         call diamonds_init_type
142+  CE44 21 E4 B7         ld hl, level_gems
143+  CE47 CD 4B CE         call diamonds_init_type
144+  CE4A C9               ret
145+  CE4B
146+  CE4B              ;
147+  CE4B              ; Initialise diamonds or gems, get memory addresses
148+  CE4B              ; Inputs:
149+  CE4B              ; hl - memory location
150+  CE4B              diamonds_init_type:
151+  CE4B 4E               ld c,(hl)                      ; get coords into c
152+  CE4C 79               ld a,c                          ; load c into add
153+  CE4D FE FF            cp 255                          ; is this the end?
154+  CE4F CA 66 CE         jp z,diamonds_init_type1             ; step out if so
155+  CE52 23               inc hl
156+  CE53 46               ld b,(hl)                       ; get coords into b
157+  CE54 E5               push hl
158+  CE55 CD FB A9         call screen_getcellattroffset ; get memory of attr for this diamond into de
159+  CE58 E1               pop hl
160+  CE59 23               inc hl                          ; move to state
161+  CE5A 36 00            ld (hl),0
162+  CE5C 23               inc hl                          ; move to memory
163+  CE5D 73 23 72 2B      ld (hl),de                      ; store the memory location
164+  CE61 23               inc hl                          ; move to next diamond
165+  CE62 23               inc hl
166+  CE63 C3 4B CE         jp diamonds_init_type
167+  CE66              diamonds_init_type1:
168+  CE66 C9               ret
# file closed: game/diamonds.asm
162   CE67                  include "game\missiles.asm"
# file opened: game/missiles.asm
  1+  CE67              ;
  2+  CE67              ; Controls when missiles fall
  3+  CE67              ;
  4+  CE67              missiles_count:
  5+  CE67 00               defb 0
  6+  CE68
  7+  CE68              ;
  8+  CE68              ; A structure of falling missiles
  9+  CE68              ; Assume we'll never have more than 4 falling at any one time
 10+  CE68              ; (1,2 - 16 bit memory location for missile graphic),state (0 fell, 1 falling)
 11+  CE68              ;
 12+  CE68              missiles_falling:
 13+  CE68 00 00 00         defb 0,0,0
 14+  CE6B 00 00 00         defb 0,0,0
 15+  CE6E 00 00 00         defb 0,0,0
 16+  CE71 00 00 00         defb 0,0,0
 17+  CE74
 18+  CE74              ;
 19+  CE74              ; The coords of the missile that killed us
 20+  CE74              ;
 21+  CE74              missiles_killermissile:
 22+  CE74 00 00            defb 0,0
 23+  CE76
 24+  CE76              ;
 25+  CE76              ; The speed of the missiles
 26+  CE76              ;
 27+  CE76              missiles_speed:
 28+  CE76 00               defb 0
 29+  CE77
 30+  CE77              ;
 31+  CE77              ; Zeroes the state of each missile
 32+  CE77              ;
 33+  CE77              missiles_init:
 34+  CE77 06 0C            ld b,12
 35+  CE79 DD 21 5B B7      ld ix,level_missiles
 36+  CE7D              missiles_init0:
 37+  CE7D DD 36 02 00      ld (ix+2),0               ; set the state to zero
 38+  CE81 11 05 00         ld de,5
 39+  CE84 DD 19            add ix,de
 40+  CE86 DD 36 02 00      ld (ix+2),0
 41+  CE8A DD 19            add ix,de
 42+  CE8C 10 EF            djnz missiles_init0
 43+  CE8E 06 04            ld b,4                  ; reset four falling missiles
 44+  CE90 21 68 CE         ld hl,missiles_falling
 45+  CE93              missiles_init1:
 46+  CE93 36 00            ld (hl),0
 47+  CE95 23               inc hl
 48+  CE96 36 00            ld (hl),0
 49+  CE98 23               inc hl
 50+  CE99 36 00            ld (hl),0
 51+  CE9B 23               inc hl
 52+  CE9C 10 F5            djnz missiles_init1
 53+  CE9E C9               ret
 54+  CE9F
 55+  CE9F              ;
 56+  CE9F              ; Runs each frame and checks if a missile can fall, then selects one at random and adds to the falling missiles
 57+  CE9F              ; Processes any already falling missiles
 58+  CE9F              ;
 59+  CE9F              missiles_process:
 60+  CE9F 3A 02 C5         ld a,(player+11)                        ; check if the player was hit by a missile previously
 61+  CEA2 FE 03            cp 3
 62+  CEA4 C2 AB CE         jp nz,missiles_process3                 ; if not, continue
 63+  CEA7 CD EB CF         call missiles_zonkplayer
 64+  CEAA C9               ret
 65+  CEAB              missiles_process3:
 66+  CEAB 3A 06 C5         ld a,(player_location)
 67+  CEAE FE 01            cp 1
 68+  CEB0 C2 21 CF         jp nz, missiles_process0                ; if not 1 we're not in the cavern so no need to make any more fall
 69+  CEB3 21 04 C5         ld hl,player+13
 70+  CEB6 7E               ld a,(hl)                               ; check if player has collected a diamond
 71+  CEB7 FE 01            cp 1
 72+  CEB9 C2 21 CF         jp nz, missiles_process0                ; don't activate if not
 73+  CEBC 21 67 CE         ld hl,missiles_count
 74+  CEBF 7E               ld a,(hl)                   ; get the missiles count
 75+  CEC0 3C               inc a
 76+  CEC1 ED 5B 76 CE      ld de,(missiles_speed)
 77+  CEC5 BB               cp e                                   ; have we reached the count yet
 78+  CEC6 CA CD CE         jp z,missiles_process2                 ; if not, don't activate a new one
 79+  CEC9 77               ld (hl),a                               ; store the updated count, and continue without activating
 80+  CECA C3 21 CF         jp missiles_process0
 81+  CECD              missiles_process2:
 82+  CECD 36 00            ld (hl),0                               ; zero the counter
 83+  CECF 1E 0C            ld e,12
 84+  CED1 CD B5 81         call utilities_randomupper              ; get random number from 0 to 11
 85+  CED4 11 0A 00         ld de,10
 86+  CED7 CD 00 81         call utilities_multiply                 ; multiple random number by 10
 87+  CEDA 54 5D            ld de,hl                                ; this is the offset for the random missile
 88+  CEDC DD 21 5B B7      ld ix,level_missiles                   ; load the location of the missile definitions
 89+  CEE0 DD 19            add ix,de                               ; get to location of missile
 90+  CEE2 DD 7E 02         ld a,(ix+2)
 91+  CEE5 FE 00            cp 0
 92+  CEE7 CA F7 CE         jp z,missiles_process1                  ; if this missile isn't active, activate it
 93+  CEEA 11 05 00         ld de,5                                 ; otherwise, check the missile above
 94+  CEED DD 19            add ix,de
 95+  CEEF DD 7E 02         ld a,(ix+2)
 96+  CEF2 FE 00            cp 0
 97+  CEF4 C2 21 CF         jp nz,missiles_process0                 ; if this is active as well, the player got lucky
 98+  CEF7              missiles_process1:                          ; activate a missile
 99+  CEF7 DD 36 02 01      ld (ix+2),1                               ; mark this missile as active
100+  CEFB DD 4E 00 DD      ld bc,(ix)                              ; get char coords from the missile
100+  CEFF 46 01
101+  CF01 78               ld a,b
102+  CF02 ED 5B DA A8      ld de,(screen_offset)          ; load the screen offset, this is in rows
103+  CF06 93               sub e
104+  CF07 CD 4A AA         call screen_getscreencoordsfromcharcoords ; get screen coords into bc
105+  CF0A C5               push bc
106+  CF0B 3E 0C            ld a,12                                 ; inactive missile sprite
107+  CF0D CD 87 AA         call screen_getblock
108+  CF10 CD 0C AB         call sprites_drawsprite                 ; draw the sprite over the old one
109+  CF13 C1               pop bc
110+  CF14 C5               push bc
111+  CF15 3E 14            ld a,20                                 ; active missile sprite
112+  CF17 CD 87 AA         call screen_getblock
113+  CF1A CD 0C AB         call sprites_drawsprite                 ; draw the sprite over the old one
114+  CF1D C1               pop bc
115+  CF1E CD AF CF         call missiles_addmissiletofalling
116+  CF21              missiles_process0:
117+  CF21 CD 25 CF         call missiles_fall
118+  CF24 C9               ret
119+  CF25
120+  CF25              ;
121+  CF25              ; Processes falling missiles
122+  CF25              ;
123+  CF25              missiles_fall:
124+  CF25 06 04            ld b,4              ; number of possible falling missiles
125+  CF27 DD 21 68 CE      ld ix,missiles_falling
126+  CF2B              missiles_fall0:
127+  CF2B C5               push bc
128+  CF2C DD 7E 02         ld a,(ix+2)
129+  CF2F FE 00            cp 0
130+  CF31 CA 8E CF         jp z,missiles_fall1 ; not falling move to next
131+  CF34 FE 01            cp 1                ; is this ready to fall
132+  CF36 CA 3C CF         jp z, missiles_fall3
133+  CF39 C3 A8 CF         jp missiles_fall4   ; if not, decrease the countdown
134+  CF3C              missiles_fall3:
135+  CF3C DD 4E 00 DD      ld bc,(ix)          ; load coords into bc
135+  CF40 46 01
136+  CF42 CD 01 AC         call sprites_scadd  ; get the memory of the coords into de
137+  CF45 14               inc d               ; add 256 to get next row
138+  CF46 1A               ld a,(de)           ; get the contents of the next row
139+  CF47 FE 00            cp 0
140+  CF49 C2 A1 CF         jp nz,missiles_fall2 ; if this is not empty, stop this missile falling
141+  CF4C 3E 14            ld a,20                                 ; active missile sprite
142+  CF4E CD 87 AA         call screen_getblock
143+  CF51 CD 0C AB         call sprites_drawsprite                 ; draw the sprite over the old one
144+  CF54 DD 4E 00 DD      ld bc,(ix)          ; load coords into bc
144+  CF58 46 01
145+  CF5A 0C               inc c               ; move down one pixel
146+  CF5B DD 71 00 DD      ld (ix),bc          ; store the new coords
146+  CF5F 70 01
147+  CF61 3E 14            ld a,20                                 ; active missile sprite
148+  CF63 CD 87 AA         call screen_getblock
149+  CF66 CD 0C AB         call sprites_drawsprite                 ; draw the sprite
150+  CF69 DD 4E 00 DD      ld bc,(ix)          ; load coords into bc
150+  CF6D 46 01
151+  CF6F 79               ld a,c              ; get the vertical coord into a
152+  CF70 E6 07            and 7               ; divisible by 8?
153+  CF72 FE 00            cp 0
154+  CF74 C2 8E CF         jp nz,missiles_fall1   ; if not, carry on
155+  CF77 CD 3A AA         call screen_getcharcoordsfromscreencoords ; get the char coords into bc
156+  CF7A 3E 43            ld a,67             ; load magenta
157+  CF7C CD 92 AA         call screen_setattr
158+  CF7F DD 4E 00 DD      ld bc,(ix)
158+  CF83 46 01
159+  CF85 CD 3A AA         call screen_getcharcoordsfromscreencoords ; get the attr address into de
160+  CF88 05               dec b               ; look one square above
161+  CF89 3E 46            ld a,70             ; load yellow
162+  CF8B CD 92 AA         call screen_setattr
163+  CF8E              missiles_fall1:         ; hl at state
164+  CF8E DD 4E 00 DD      ld bc,(ix)          ; get coords back
164+  CF92 46 01
165+  CF94 CD D0 CF         call missiles_checkforplayer ; check for player
166+  CF97 DD 23            inc ix
167+  CF99 DD 23            inc ix
168+  CF9B DD 23            inc ix              ; get to next missile
169+  CF9D C1               pop bc
170+  CF9E 10 8B            djnz missiles_fall0
171+  CFA0 C9               ret
172+  CFA1              missiles_fall2:
173+  CFA1 DD 36 02 00      ld (ix+2),0
174+  CFA5 C3 8E CF         jp missiles_fall1   ; rejoin the loop
175+  CFA8              missiles_fall4:
176+  CFA8 3D               dec a               ; decrease the countdown
177+  CFA9 DD 77 02         ld (ix+2),a         ; store back
178+  CFAC C3 8E CF         jp missiles_fall1   ; do next missile
179+  CFAF
180+  CFAF              ;
181+  CFAF              ; Adds the missile to the structure that tracks falling missile
182+  CFAF              ; Inputs:
183+  CFAF              ; bc - coords of missile, c vert
184+  CFAF              missiles_addmissiletofalling:
185+  CFAF C5               push bc             ; store the coords
186+  CFB0 11 68 CE         ld de,missiles_falling
187+  CFB3 06 04            ld b,4              ; number of possible falling missiles
188+  CFB5              missiles_addmissiletofalling0:
189+  CFB5 13               inc de
190+  CFB6 13               inc de              ; move three along to get the state
191+  CFB7 1A               ld a,(de)           ; load the state
192+  CFB8 FE 00            cp 0                ; check if this is not falling
193+  CFBA C2 CB CF         jp nz,missiles_addmissiletofalling1 ; continue the loop if not 0
194+  CFBD 3E 19            ld a,25
195+  CFBF 12               ld (de),a           ; set the state to pre-falling
196+  CFC0 1B               dec de              ; move back coords
197+  CFC1 C1               pop bc              ; get back coords
198+  CFC2 78               ld a,b
199+  CFC3 12               ld (de),a           ; store the vertical
200+  CFC4 1B               dec de
201+  CFC5 79               ld a,c
202+  CFC6 12               ld (de),a           ; store the horizontal
203+  CFC7 C5               push bc
204+  CFC8 C3 CE CF         jp missiles_addmissiletofalling2 ; done
205+  CFCB              missiles_addmissiletofalling1:
206+  CFCB 13               inc de              ; move memory along to next rock
207+  CFCC 10 E7            djnz missiles_addmissiletofalling0 ; try the next missile
208+  CFCE              missiles_addmissiletofalling2: ; done, return
209+  CFCE C1               pop bc              ; to tidy up
210+  CFCF C9               ret
211+  CFD0
212+  CFD0              ;
213+  CFD0              ; Checks to see if the missile is hitting a player
214+  CFD0              ; Inputs:
215+  CFD0              ; bc - coords of missile we're checking
216+  CFD0              missiles_checkforplayer:
217+  CFD0 ED 5B F7 C4      ld de,(player)       ; get the player coords
218+  CFD4 7B               ld a,e               ; get the vert coord first
219+  CFD5 91               sub c                ; subtract the missile vertical coord from players
220+  CFD6 FE 08            cp 8                 ; the missile will only hit a player if the player is directly underneath, so this must be 8
221+  CFD8 C0               ret nz               ; if not, hasn't hit
222+  CFD9 7A               ld a,d               ; get the player horiz coord
223+  CFDA 90               sub b                ; subtract missile coord
224+  CFDB C6 07            add 7                ; add max distance
225+  CFDD FE 0D            cp 13                ; compare to 13? if carry flag set, they've hit
226+  CFDF DA E3 CF         jp c,missiles_checkforplayer0
227+  CFE2 C9               ret
228+  CFE3              missiles_checkforplayer0:
229+  CFE3 ED 43 74 CE      ld (missiles_killermissile),bc; store the coords of the killer missile
230+  CFE7 CD 26 C6         call player_zonkplayer ; if so, jump out
231+  CFEA C9               ret
232+  CFEB
233+  CFEB              ;
234+  CFEB              ; Player has been hit, so draw text over them and mark as dead
235+  CFEB              ;
236+  CFEB              missiles_zonkplayer:
237+  CFEB CD 14 C6         call player_killplayer      ; mark as dead
238+  CFEE ED 4B F7 C4      ld bc,(player)              ; get player coords
239+  CFF2 CD 3A AA         call screen_getcharcoordsfromscreencoords
240+  CFF5 0D               dec c
241+  CFF6 0D               dec c
242+  CFF7 04               inc b
243+  CFF8 C5               push bc
244+  CFF9 3E 42            ld a,66
245+  CFFB CD 92 AA         call screen_setattr
246+  CFFE 0C               inc c
247+  CFFF CD 92 AA         call screen_setattr
248+  D002 0C               inc c
249+  D003 CD 92 AA         call screen_setattr
250+  D006 0C               inc c
251+  D007 CD 92 AA         call screen_setattr
252+  D00A 0C               inc c
253+  D00B CD 92 AA         call screen_setattr
254+  D00E 0C               inc c
255+  D00F CD 92 AA         call screen_setattr
256+  D012 C1               pop bc
257+  D013 ED 5B DA A8      ld de,(screen_offset)
258+  D017 78               ld a,b
259+  D018 93               sub e
260+  D019 47               ld b,a                      ; subtract the offset
261+  D01A 04               inc b
262+  D01B 04               inc b                       ; add two for the score rows
263+  D01C ED 43 A0 85      ld (string_zonk),bc         ; set coords of string
264+  D020 21 A0 85         ld hl,string_zonk
265+  D023 CD 28 86         call string_print
266+  D026 06 14            ld b,20
267+  D028 CD 61 81         call utilities_pauseforframes ; pause
268+  D02B C9               ret
269+  D02C
# file closed: game/missiles.asm
163   D02C                  include "game\thepit.asm"
# file opened: game/thepit.asm
  1+  D02C              ;
  2+  D02C              ; Timer for deciding how fast the trap withdraws
  3+  D02C              ;
  4+  D02C              thepit_timer:
  5+  D02C 00               defb 0
  6+  D02D
  7+  D02D              ;
  8+  D02D              ; Ticks for the trap state. Will count to 3 then reset
  9+  D02D              ;
 10+  D02D              thepit_trapcount:
 11+  D02D 00               defb 0
 12+  D02E
 13+  D02E              ;
 14+  D02E              ; The horizontal coordinate of the current pit trap
 15+  D02E              ;
 16+  D02E              thepit_trapcoord:
 17+  D02E 08               defb 8
 18+  D02F
 19+  D02F              ;
 20+  D02F              ; Initialises the pit
 21+  D02F              ;
 22+  D02F              thepit_init:
 23+  D02F 21 2E D0         ld hl,thepit_trapcoord
 24+  D032 36 08            ld (hl),8
 25+  D034 21 2D D0         ld hl,thepit_trapcount
 26+  D037 36 00            ld (hl),0
 27+  D039 C9               ret
 28+  D03A              ;
 29+  D03A              ; The speed the pit will withdraw
 30+  D03A              ;
 31+  D03A              thepit_speed:
 32+  D03A 00               defb 0
 33+  D03B
 34+  D03B              ;
 35+  D03B              ; Performs per frame processing on the pit room
 36+  D03B              ;
 37+  D03B              thepit_process:
 38+  D03B 3A 06 C5         ld a,(player_location)
 39+  D03E FE 02            cp 2                            ; if two, the player is in the pit, so process the trap
 40+  D040 C2 AA D0         jp nz,thepit_process0
 41+  D043 ED 4B F7 C4      ld bc,(player)                  ; get the player's coords to check if about to fall
 42+  D047 3E 08            ld a,8
 43+  D049 81               add a,c
 44+  D04A 4F               ld c,a                          ; look at the square underneath
 45+  D04B CD 3A AA         call screen_getcharcoordsfromscreencoords ; get the cell coords
 46+  D04E CD C8 AA         call screen_ischarempty
 47+  D051 FE 01            cp 1                            ; check if this is 1=empty
 48+  D053 CA AB D0         jp z,thepit_process2
 49+  D056 3A 2C D0         ld a,(thepit_timer)             ; get the timer
 50+  D059 3C               inc a
 51+  D05A 32 2C D0         ld (thepit_timer),a             ; store
 52+  D05D ED 5B 3A D0      ld de,(thepit_speed)            ; get the speed
 53+  D061 BB               cp e                           ; have we reached the trigger?
 54+  D062 C2 AA D0         jp nz, thepit_process0          ; no need to do anything
 55+  D065 3E 00            ld a,0
 56+  D067 32 2C D0         ld (thepit_timer),a             ; zero the timer and process
 57+  D06A 3A 2D D0         ld a,(thepit_trapcount)         ; get the current count
 58+  D06D 3C               inc a
 59+  D06E 32 2D D0         ld (thepit_trapcount),a         ; reset the trap count
 60+  D071 FE 04            cp 4                            ; do we need to begin another character?
 61+  D073 C2 92 D0         jp nz,thepit_process1           ; if not, draw as normal
 62+  D076 3E 00            ld a,0
 63+  D078 32 2D D0         ld (thepit_trapcount),a         ; reset the trap count
 64+  D07B 3A 2E D0         ld a,(thepit_trapcoord)         ; get the trap horiz coord
 65+  D07E FE 02            cp 2
 66+  D080 CA AA D0         jp z,thepit_process0
 67+  D083 4F               ld c,a
 68+  D084 06 0A            ld b,10
 69+  D086 3E 46            ld a,70
 70+  D088 CD 92 AA         call screen_setattr             ; set the attr of the empty square to yellow on black
 71+  D08B 3A 2E D0         ld a,(thepit_trapcoord)         ; get the trap horiz coord
 72+  D08E 3D               dec a
 73+  D08F 32 2E D0         ld (thepit_trapcoord),a         ; store the reduced coord
 74+  D092
 75+  D092              thepit_process1:                    ; draw the trapdoor in current position
 76+  D092 3A 2E D0         ld a,(thepit_trapcoord)
 77+  D095 FE 02            cp 2
 78+  D097 CA AA D0         jp z, thepit_process0           ; don't process outside of the pit
 79+  D09A 4F               ld c,a
 80+  D09B 06 0A            ld b,10                         ; vertical coord will always be the same
 81+  D09D 3A 2D D0         ld a,(thepit_trapcount)         ; get the trap count
 82+  D0A0 5F               ld e,a                          ; store in e
 83+  D0A1 3E 16            ld a,22                         ; 21 is full trapdoor
 84+  D0A3 83               add a,e
 85+  D0A4 CD 87 AA         call screen_getblock
 86+  D0A7 CD 64 AA         call screen_showchar            ; show the char
 87+  D0AA
 88+  D0AA              thepit_process0:
 89+  D0AA C9               ret
 90+  D0AB              thepit_process2:
 91+  D0AB CD 2C C6         call player_pitkillplayer
 92+  D0AE C9               ret
 93+  D0AF
# file closed: game/thepit.asm
164   D0AF                  include "game\monster.asm"
# file opened: game/monster.asm
  1+  D0AF
  2+  D0AF              ;
  3+  D0AF              ; Where the monster currently is
  4+  D0AF              ;
  5+  D0AF              monster_currentcoords:
  6+  D0AF 00 00            defb 0,0
  7+  D0B1
  8+  D0B1              ;
  9+  D0B1              ; The start coords of the monster
 10+  D0B1              ;
 11+  D0B1              monster_initcoords:
 12+  D0B1 70 1B            defb 112,27
 13+  D0B3
 14+  D0B3              ;
 15+  D0B3              ; Store the memory location of the current jump position
 16+  D0B3              ;
 17+  D0B3              monster_jumppos:
 18+  D0B3 00 00            defb 0,0
 19+  D0B5
 20+  D0B5              ;
 21+  D0B5              ; The jump table for the monster.
 22+  D0B5              ;
 23+  D0B5              monster_jumptable:
 24+  D0B5 FF 03 02 02      defb 255,3,2,2,2,2,2,2,2,2,1,1,1,1,1,1,255
 24+  D0B9 02 02 02 02
 24+  D0BD 02 02 01 01
 24+  D0C1 01 01 01 01
 24+  D0C5 FF
 25+  D0C6
 26+  D0C6              ;
 27+  D0C6              ; The vertical direction: 0 up, 1 down
 28+  D0C6              ;
 29+  D0C6              monster_jumpdirectionvert:
 30+  D0C6 00               defb 0
 31+  D0C7
 32+  D0C7              ;
 33+  D0C7              ; The horiz direction: 0 right, 1 left
 34+  D0C7              ;
 35+  D0C7              monster_jumpdirectionhoriz:
 36+  D0C7 00               defb 0
 37+  D0C8
 38+  D0C8              ;
 39+  D0C8              ; Frame offset, 0 or 32
 40+  D0C8              ;
 41+  D0C8              monster_frameoffset:
 42+  D0C8 00               defb 0
 43+  D0C9
 44+  D0C9              ;
 45+  D0C9              ; Monster tick
 46+  D0C9              ;
 47+  D0C9              monster_tick:
 48+  D0C9 00               defb 0
 49+  D0CA
 50+  D0CA              ;
 51+  D0CA              ; The colour of the monster
 52+  D0CA              ;
 53+  D0CA              monster_colour:
 54+  D0CA 06               defb 6
 55+  D0CB
 56+  D0CB              ;
 57+  D0CB              ; Initialises the pit monster
 58+  D0CB              ;
 59+  D0CB              monster_init:
 60+  D0CB ED 4B B1 D0      ld bc,(monster_initcoords)              ; load the initial coords
 61+  D0CF ED 43 AF D0      ld (monster_currentcoords),bc           ; save in current coords
 62+  D0D3 21 B6 D0         ld hl,monster_jumptable+1
 63+  D0D6 22 B3 D0         ld (monster_jumppos),hl                 ; store the initial position in the jump table
 64+  D0D9 3E 00            ld a,0
 65+  D0DB 32 C6 D0         ld (monster_jumpdirectionvert),a        ; going up
 66+  D0DE 32 C8 D0         ld (monster_frameoffset),a
 67+  D0E1 32 C9 D0         ld (monster_tick),a
 68+  D0E4 CD 6E D1         call monster_draw                       ; the monster
 69+  D0E7 C9               ret
 70+  D0E8
 71+  D0E8              ;
 72+  D0E8              ; Animate the monster
 73+  D0E8              ;
 74+  D0E8              monster_process:
 75+  D0E8 3A C9 D0         ld a,(monster_tick)                     ; check if we should draw this frame
 76+  D0EB FE 01            cp 1
 77+  D0ED CA F5 D0         jp z,monster_process6
 78+  D0F0 3C               inc a
 79+  D0F1 32 C9 D0         ld (monster_tick),a                     ; increase the tick and continue
 80+  D0F4 C9               ret
 81+  D0F5              monster_process6:
 82+  D0F5 3E 00            ld a,0
 83+  D0F7 32 C9 D0         ld (monster_tick),a                     ; zero the tick
 84+  D0FA CD 6E D1         call monster_draw                       ; overwrite the old sprite
 85+  D0FD 3A C8 D0         ld a,(monster_frameoffset)              ; get the anim frame offset
 86+  D100 EE 20            xor 32                                  ; flip between 0 and 32
 87+  D102 32 C8 D0         ld (monster_frameoffset),a              ; store
 88+  D105 ED 4B AF D0      ld bc,(monster_currentcoords)           ; get the current coords
 89+  D109 2A B3 D0         ld hl,(monster_jumppos)                 ; get the position in the jump table
 90+  D10C 56               ld d,(hl)                               ; get the jump modifier
 91+  D10D 3A C6 D0         ld a,(monster_jumpdirectionvert)        ; get the vertical direction
 92+  D110 FE 00            cp 0                                    ; if 0, going up, so dec vert
 93+  D112 C2 1B D1         jp nz,monster_process0
 94+  D115 79               ld a,c
 95+  D116 92               sub d
 96+  D117 23               inc hl                                  ; move forward a jump pos
 97+  D118 C3 1E D1         jp monster_process1
 98+  D11B              monster_process0:
 99+  D11B 79               ld a,c                                   ; going down so inc c
100+  D11C 82               add a,d
101+  D11D 2B               dec hl                                  ; move back a jump pos
102+  D11E              monster_process1:
103+  D11E 4F               ld c,a                                  ; get the vertical coord back
104+  D11F 7E               ld a,(hl)                               ; check the next jump pos
105+  D120 FE FF            cp 255                                  ; if 255 reverse
106+  D122 CA 2B D1         jp z,monster_process3
107+  D125 22 B3 D0         ld (monster_jumppos),hl                 ; store the new pos
108+  D128 C3 3D D1         jp monster_process2                     ; keep going
109+  D12B              monster_process3:
110+  D12B 3A C6 D0         ld a,(monster_jumpdirectionvert)        ; get the direction
111+  D12E EE 01            xor 1                                   ; flip it
112+  D130 32 C6 D0         ld (monster_jumpdirectionvert),a        ; store it
113+  D133 FE 01            cp 1
114+  D135 CA 3D D1         jp z,monster_process2
115+  D138 D9               exx
116+  D139 CD 81 D1         call monster_colourchange
117+  D13C D9               exx
118+  D13D              monster_process2:
119+  D13D 3A C7 D0         ld a,(monster_jumpdirectionhoriz)       ; get the horiz direction
120+  D140 FE 00            cp 0                                    ; is it right?
121+  D142 C2 57 D1         jp nz,monster_process4
122+  D145 04               inc b                                   ; 1 pixel right
123+  D146 78               ld a,b
124+  D147 FE 38            cp 56                                   ; reached the edge of the pit?
125+  D149 C2 66 D1         jp nz,monster_process5
126+  D14C 3A C7 D0         ld a,(monster_jumpdirectionhoriz)
127+  D14F EE 01            xor 1
128+  D151 32 C7 D0         ld (monster_jumpdirectionhoriz),a       ; flip direction
129+  D154 C3 66 D1         jp monster_process5
130+  D157              monster_process4:
131+  D157 05               dec b                                   ; 1 pixel left
132+  D158 78               ld a,b
133+  D159 FE 18            cp 24                                   ; reached the edge of the pit?
134+  D15B C2 66 D1         jp nz,monster_process5
135+  D15E 3A C7 D0         ld a,(monster_jumpdirectionhoriz)
136+  D161 EE 01            xor 1
137+  D163 32 C7 D0         ld (monster_jumpdirectionhoriz),a       ; flip direction
138+  D166              monster_process5:
139+  D166 ED 43 AF D0      ld (monster_currentcoords),bc           ; store the new vertical coords
140+  D16A CD 6E D1         call monster_draw                       ; finally, draw the monster
141+  D16D C9               ret
142+  D16E
143+  D16E              ;
144+  D16E              ; Draw the monster at the current location
145+  D16E              ;
146+  D16E              monster_draw:
147+  D16E ED 4B AF D0      ld bc,(monster_currentcoords)
148+  D172 3A C8 D0         ld a,(monster_frameoffset)
149+  D175 11 00 00         ld de,0
150+  D178 5F               ld e,a
151+  D179 21 6D BE         ld hl,monster_sprite                    ; load the first frame
152+  D17C 19               add hl,de
153+  D17D CD 6A AB         call sprites_draw2by2sprite
154+  D180 C9               ret
155+  D181
156+  D181              ;
157+  D181              ; Changes the monster colour whenever it reaches the bottom of its jump
158+  D181              ;
159+  D181              monster_colourchange:
160+  D181 3A CA D0         ld a,(monster_colour)
161+  D184 3C               inc a
162+  D185 FE 07            cp 7
163+  D187 C2 8C D1         jp nz, monster_colourchange0
164+  D18A 3E 01            ld a,1
165+  D18C              monster_colourchange0:
166+  D18C 32 CA D0         ld (monster_colour),a                   ; save the monster colour
167+  D18F 3A DA A8         ld a,(screen_offset)
168+  D192 FE 00            cp 0
169+  D194 CA C1 D1         jp z,monster_colourchange1
170+  D197 3A CA D0         ld a,(monster_colour)                   ; get the monster colour
171+  D19A 06 06            ld b,6
172+  D19C 0E 40            ld c,64
173+  D19E 81               add c                                   ; want this with black background, so add 64
174+  D19F 11 A3 58         ld de,22528+163                         ; attrs here
175+  D1A2 CD 9D A9         call screen_setcolours
176+  D1A5 3A CA D0         ld a,(monster_colour)                   ; get the monster colour
177+  D1A8 06 06            ld b,6
178+  D1AA 0E 40            ld c,64
179+  D1AC 81               add c                                   ; want this with black background, so add 64
180+  D1AD 11 C3 58         ld de,22528+195                         ; attrs here
181+  D1B0 CD 9D A9         call screen_setcolours
182+  D1B3 3A CA D0         ld a,(monster_colour)                   ; get the monster colour
183+  D1B6 F6 60            or 96
184+  D1B8 06 06            ld b,6
185+  D1BA 11 E3 58         ld de,22528+227                         ; attrs here
186+  D1BD CD 9D A9         call screen_setcolours
187+  D1C0 C9               ret
188+  D1C1              monster_colourchange1:
189+  D1C1 3A CA D0         ld a,(monster_colour)                   ; get the monster colour
190+  D1C4 06 06            ld b,6
191+  D1C6 0E 40            ld c,64
192+  D1C8 81               add c                                   ; want this with black background, so add 64
193+  D1C9 11 A3 59         ld de,22528+419                         ; attrs here
194+  D1CC CD 9D A9         call screen_setcolours
195+  D1CF 3A CA D0         ld a,(monster_colour)                   ; get the monster colour
196+  D1D2 06 06            ld b,6
197+  D1D4 0E 40            ld c,64
198+  D1D6 81               add c                                   ; want this with black background, so add 64
199+  D1D7 11 C3 59         ld de,22528+451                         ; attrs here
200+  D1DA CD 9D A9         call screen_setcolours
201+  D1DD 3A CA D0         ld a,(monster_colour)                   ; get the monster colour
202+  D1E0 F6 60            or 96
203+  D1E2 06 06            ld b,6
204+  D1E4 11 E3 59         ld de,22528+483                         ; attrs here
205+  D1E7 CD 9D A9         call screen_setcolours
206+  D1EA C9               ret
# file closed: game/monster.asm
165   D1EB                  include "game\robots.asm"
# file opened: game/robots.asm
  1+  D1EB
  2+  D1EB              ;
  3+  D1EB              ; Array of robot states
  4+  D1EB              ; x,y,state (0 inactive, 1 active), direction (0 left, 1 right), anim offset, automove frames remaining, move direction (0 left, 1 right, 3 up, 4 down)
  5+  D1EB              robots_robots:
  6+  D1EB 00 00 00 00      defb 0,0,0,0,0,0,0
  6+  D1EF 00 00 00
  7+  D1F2 00 00 00 00      defb 0,0,0,0,0,0,0
  7+  D1F6 00 00 00
  8+  D1F9 00 00 00 00      defb 0,0,0,0,0,0,0
  8+  D1FD 00 00 00
  9+  D200 00 00 00 00      defb 0,0,0,0,0,0,0
  9+  D204 00 00 00
 10+  D207 00 00 00 00      defb 0,0,0,0,0,0,0
 10+  D20B 00 00 00
 11+  D20E
 12+  D20E              robots_initcoords:
 13+  D20E 18 E8            defb 24,232
 14+  D210
 15+  D210              ;
 16+  D210              ; When this reaches zero, spawn a new robot
 17+  D210              ;
 18+  D210              robots_spawntimer:
 19+  D210 FA               defb 250
 20+  D211
 21+  D211              ;
 22+  D211              ; When this reaches max, change the anim frame
 23+  D211              ;
 24+  D211              robots_animtimer:
 25+  D211 00               defb 0
 26+  D212
 27+  D212              ;
 28+  D212              ; When this reaches max, change move the robot
 29+  D212              ;
 30+  D212              robots_movetimer:
 31+  D212 00               defb 0
 32+  D213
 33+  D213
 34+  D213              ;
 35+  D213              ; The number of robots active
 36+  D213              ;
 37+  D213              robots_numberactive:
 38+  D213 00               defb 0
 39+  D214
 40+  D214              ;
 41+  D214              ; Tracks which directions a robot can move
 42+  D214              ; up,down,left,right
 43+  D214              robots_canmovedirections:
 44+  D214 00 00 00 00      defb 0,0,0,0
 45+  D218
 46+  D218              ;
 47+  D218              ; The current robot speed
 48+  D218              ;
 49+  D218              robots_robotspeed:
 50+  D218 02               defb 2
 51+  D219
 52+  D219              ;
 53+  D219              ; The current max robots
 54+  D219              ;
 55+  D219              robots_robotsmax:
 56+  D219 03               defb 3
 57+  D21A
 58+  D21A              ;
 59+  D21A              ; Initialises the robots
 60+  D21A              ;
 61+  D21A              robots_init:
 62+  D21A 06 23            ld b,35
 63+  D21C DD 21 EB D1      ld ix,robots_robots
 64+  D220              robots_init0:
 65+  D220 DD 36 00 00      ld (ix),0                       ; reset robot states back to zero
 66+  D224 DD 23            inc ix
 67+  D226 10 F8            djnz robots_init0
 68+  D228 3E 00            ld a,0
 69+  D22A 32 13 D2         ld (robots_numberactive),a
 70+  D22D 3E FA            ld a,250
 71+  D22F 32 10 D2         ld (robots_spawntimer),a
 72+  D232                  ; Self writing code
 73+  D232                  ; Robot speed
 74+  D232 3A 18 D2         ld a,(robots_robotspeed)
 75+  D235 32 CF D2         ld (robots_process7+1),a
 76+  D238 3C               inc a
 77+  D239 32 FF D2         ld (robots_process6+1),a
 78+  D23C                  ; Robots max
 79+  D23C 3A 19 D2         ld a,(robots_robotsmax)
 80+  D23F 32 4A D2         ld (robots_spawn+1),a
 81+  D242 32 A1 D2         ld (robots_process8+1),a
 82+  D245 32 BD D2         ld (robots_process0+1),a
 83+  D248 C9               ret
 84+  D249
 85+  D249              ;
 86+  D249              ; Spawns a new robot
 87+  D249              ; Inputs:
 88+  D249              ; ix - pointer to start of robot array entry
 89+  D249              ;
 90+  D249              robots_spawn:
 91+  D249 06 03            ld b,3                      ;(SELF WRITING CODE)
 92+  D24B DD 21 EB D1      ld ix,robots_robots
 93+  D24F              robots_spawn0:
 94+  D24F DD 7E 02         ld a,(ix+2)                 ; get the state
 95+  D252 FE 00            cp 0
 96+  D254 C2 80 D2         jp nz,robots_spawn1         ; if already active, move on
 97+  D257 ED 4B 0E D2      ld bc,(robots_initcoords)
 98+  D25B DD 71 00 DD      ld (ix),bc
 98+  D25F 70 01
 99+  D261 DD 36 02 01      ld (ix+2),1
100+  D265 DD 36 03 00      ld (ix+3),0
101+  D269 DD 36 04 00      ld (ix+4),0
102+  D26D DD 36 05 00      ld (ix+5),0
103+  D271 DD 36 06 00      ld (ix+6),0
104+  D275 3A 13 D2         ld a,(robots_numberactive)
105+  D278 3C               inc a
106+  D279 32 13 D2         ld (robots_numberactive),a  ; increase the number active
107+  D27C CD 37 D5         call robots_draw            ; draw initial frame
108+  D27F C9               ret
109+  D280              robots_spawn1:
110+  D280 11 07 00         ld de,7
111+  D283 DD 19            add ix,de
112+  D285 10 C8            djnz robots_spawn0
113+  D287 C9               ret
114+  D288              ;
115+  D288              ; Kills robot
116+  D288              ; Inputs:
117+  D288              ; ix - pointer to start of robot array entry
118+  D288              ;
119+  D288              robots_kill:
120+  D288 3A 13 D2         ld a,(robots_numberactive)
121+  D28B 3D               dec a
122+  D28C 32 13 D2         ld (robots_numberactive),a
123+  D28F DD 36 02 00      ld (ix+2),0                     ; set to inactive
124+  D293 C5               push bc
125+  D294 E5               push hl
126+  D295 06 01            ld b,1
127+  D297 CD 1F CC         call scores_addhundreds
128+  D29A E1               pop hl
129+  D29B C1               pop bc
130+  D29C C9               ret
131+  D29D
132+  D29D              ;
133+  D29D              ; Processes the robots
134+  D29D              ;
135+  D29D              robots_process:
136+  D29D 3A 13 D2         ld a,(robots_numberactive)              ; first, check if we need to spawn a new robot
137+  D2A0              robots_process8:
138+  D2A0 FE 03            cp 3                                    ; 3 is the maximum
139+  D2A2 CA BC D2         jp z,robots_process0                    ; if already three, nothing to do
140+  D2A5 3A 10 D2         ld a,(robots_spawntimer)                ; now check the spawn timer
141+  D2A8 FE 00            cp 0
142+  D2AA C2 B8 D2         jp nz,robots_process1                   ; if it hasn't reached zero yet, just decrease
143+  D2AD 3E FA            ld a,250
144+  D2AF 32 10 D2         ld (robots_spawntimer),a                ; reset the spawn timer
145+  D2B2 CD 49 D2         call robots_spawn                       ; spawn a robot
146+  D2B5 C3 BC D2         jp robots_process0                      ; carry on
147+  D2B8              robots_process1:
148+  D2B8 3D               dec a
149+  D2B9 32 10 D2         ld (robots_spawntimer),a                ; decrease the spawn timer and store
150+  D2BC              robots_process0:
151+  D2BC 06 03            ld b,3                                  ; max number of robots (SELF WRITING CODE)
152+  D2BE DD 21 EB D1      ld ix, robots_robots                    ; point ix at the robot array
153+  D2C2              robots_process2:
154+  D2C2 C5               push bc
155+  D2C3 DD 7E 02         ld a,(ix+2)                             ; check the state
156+  D2C6 FE 00            cp 0
157+  D2C8 CA E4 D2         jp z,robots_process3                    ; if not active, move on
158+  D2CB 3A 12 D2         ld a,(robots_movetimer)
159+  D2CE              robots_process7:                            ; self writing code - the number in the comparison will be ovewritten
160+  D2CE FE 04            cp 4
161+  D2D0 C2 E4 D2         jp nz,robots_process3                   ; can we move this frame
162+  D2D3 CD 37 D5         call robots_draw                        ; draw over existing
163+  D2D6 CD 09 D3         call robots_move                        ; move the
164+  D2D9 DD 7E 02         ld a,(ix+2)                             ; get the state again
165+  D2DC FE 00            cp 0
166+  D2DE CA E4 D2         jp z,robots_process3                    ; move to next if this robot has become inactive
167+  D2E1 CD 37 D5         call robots_draw                        ; draw the new robot
168+  D2E4              robots_process3:
169+  D2E4 C1               pop bc
170+  D2E5 11 07 00         ld de,7
171+  D2E8 DD 19            add ix,de
172+  D2EA 10 D6            djnz robots_process2
173+  D2EC 3A 11 D2         ld a,(robots_animtimer)
174+  D2EF 3C               inc a
175+  D2F0 FE 08            cp 8
176+  D2F2 C2 F7 D2         jp nz,robots_process4
177+  D2F5 3E 00            ld a,0                                  ; reset if we reached max
178+  D2F7              robots_process4:
179+  D2F7 32 11 D2         ld (robots_animtimer),a
180+  D2FA 3A 12 D2         ld a,(robots_movetimer)                 ; increment the robot move timer
181+  D2FD 3C               inc a
182+  D2FE              robots_process6:                            ; self writing code - the number in the comparison will be ovewritten
183+  D2FE FE 05            cp 5                                    ; there is another reference to this number above
184+  D300 C2 05 D3         jp nz,robots_process5
185+  D303 3E 00            ld a,0
186+  D305              robots_process5:
187+  D305 32 12 D2         ld (robots_movetimer),a
188+  D308
189+  D308 C9               ret
190+  D309
191+  D309
192+  D309              ;
193+  D309              ; Moves a robot
194+  D309              ; Inputs:
195+  D309              ; ix - points to first byte of robot in array
196+  D309              robots_move:
197+  D309 DD 7E 02         ld a,(ix+2)                             ; get the state
198+  D30C FE 02            cp 2
199+  D30E CA 3F D3         jp z,robots_move4                       ; don't move if shot, just change the anim
200+  D311 3A 11 D2         ld a,(robots_animtimer)                 ; get the anim timer
201+  D314 FE 07            cp 7                                    ; compare with 8
202+  D316 C2 29 D3         jp nz,robots_move1                       ; if even, don't increment frame
203+  D319 DD 7E 04         ld a,(ix+4)                             ; get the anim frame
204+  D31C 06 08            ld b,8
205+  D31E 80               add a,b                                 ; add to anim frame
206+  D31F FE 20            cp 32
207+  D321 C2 26 D3         jp nz,robots_move0                      ; if not 32, then just store
208+  D324 3E 00            ld a,0                                  ; otherwise, reset
209+  D326              robots_move0:
210+  D326 DD 77 04         ld (ix+4),a                             ; store
211+  D329              robots_move1:
212+  D329 DD 7E 05         ld a,(ix+5)
213+  D32C FE 00            cp 0                                    ; are we automoving
214+  D32E CA 37 D3         jp z,robots_move2                       ; if not, keep directions
215+  D331 CD 53 D3         call robots_automove
216+  D334 C3 3B D3         jp robots_move3
217+  D337              robots_move2:
218+  D337 CD 88 D3         call robots_checkdirectionsandmove
219+  D33A C9               ret
220+  D33B              robots_move3:
221+  D33B CD 80 D5         call robots_checkforplayer              ; check to see if we collided with a player
222+  D33E C9               ret
223+  D33F              robots_move4:
224+  D33F DD 7E 04         ld a,(ix+4)
225+  D342 FE 48            cp 72
226+  D344 C2 4D D3         jp nz,robots_move5
227+  D347 3E 40            ld a,64
228+  D349 DD 77 04         ld (ix+4),a
229+  D34C C9               ret
230+  D34D              robots_move5:
231+  D34D 3E 48            ld a,72
232+  D34F DD 77 04         ld (ix+4),a
233+  D352 C9               ret
234+  D353
235+  D353
236+  D353              ;
237+  D353              ; Processes automove
238+  D353              ; Inputs:
239+  D353              ; ix - points to the current robot
240+  D353              ; a - number of frames left to move
241+  D353              robots_automove:
242+  D353 3D               dec a
243+  D354 DD 77 05         ld (ix+5),a                         ; store the decreased frames
244+  D357 DD 4E 00 DD      ld bc,(ix)                          ; get coords
244+  D35B 46 01
245+  D35D DD 7E 06         ld a,(ix+6)                         ; get the direction
246+  D360 FE 00            cp 0                                ; left
247+  D362 CA 73 D3         jp z,robots_automove1
248+  D365 FE 02            cp 2                                ; up
249+  D367 CA 77 D3         jp z,robots_automove3
250+  D36A FE 03            cp 3                                ; down
251+  D36C CA 7C D3         jp z,robots_automove4
252+  D36F 04               inc b                               ; right
253+  D370 C3 81 D3         jp robots_automove2
254+  D373              robots_automove1:
255+  D373 05               dec b
256+  D374 C3 81 D3         jp robots_automove2
257+  D377              robots_automove3:
258+  D377 0D               dec c
259+  D378 0D               dec c
260+  D379 C3 81 D3         jp robots_automove2
261+  D37C              robots_automove4:
262+  D37C 0C               inc c
263+  D37D 0C               inc c
264+  D37E C3 81 D3         jp robots_automove2
265+  D381              robots_automove2:
266+  D381 DD 71 00 DD      ld (ix),bc
266+  D385 70 01
267+  D387 C9               ret
268+  D388
269+  D388              ;
270+  D388              ; Checks if a robot can move in all directions, then picks one and moves there.
271+  D388              ; This looks complicated, but really what it does is:
272+  D388              ; 1) Look at the current direction
273+  D388              ; 2) Randomly determine which orthoganal direction check first
274+  D388              ; 3) If orthogonal can't be moved, keep going in direction we're going
275+  D388              ; 4) Otherwise, back the way we came
276+  D388              ; Inputs:
277+  D388              ; ix - points to the current robot
278+  D388              ;
279+  D388              robots_checkdirectionsandmove:
280+  D388 DD 7E 06         ld a,(ix+6)                 ; get the direction
281+  D38B FE 00            cp 0                        ; left
282+  D38D C2 B4 D3         jp nz,robots_checkdirectionsandmove0
283+  D390                  ; random check
284+  D390 CD A1 C4         call game_getcurrentframe
285+  D393 E6 01            and 1                       ; odd or even
286+  D395 CA A1 D3         jp z,robots_checkdirectionsandmove3
287+  D398 CD 3A D4         call robots_checkupthendown ; prefer up over down
288+  D39B FE 01            cp 1
289+  D39D C8               ret z
290+  D39E C3 A7 D3         jp robots_checkdirectionsandmove4
291+  D3A1              robots_checkdirectionsandmove3:
292+  D3A1 CD 30 D4         call robots_checkdownthenup ; prefer down over up
293+  D3A4 FE 01            cp 1
294+  D3A6 C8               ret z
295+  D3A7              robots_checkdirectionsandmove4:
296+  D3A7                  ; check left
297+  D3A7 CD C0 D4         call robots_checkleftandmove
298+  D3AA FE 01            cp 1
299+  D3AC C8               ret z                       ; if we moved, don't check again
300+  D3AD                  ; check right
301+  D3AD CD F9 D4         call robots_checkrightandmove
302+  D3B0 FE 01            cp 1
303+  D3B2 C8               ret z                       ; if we moved, don't check again
304+  D3B3                  ; if we're here and haven't moved...
305+  D3B3 C9               ret
306+  D3B4              robots_checkdirectionsandmove0
307+  D3B4 FE 01            cp 1                        ; right
308+  D3B6 C2 DD D3         jp nz,robots_checkdirectionsandmove1
309+  D3B9                  ; ALREADY MOVING RIGHT
310+  D3B9                  ; random check
311+  D3B9 CD A1 C4         call game_getcurrentframe
312+  D3BC E6 01            and 1                       ; odd or even
313+  D3BE CA CA D3         jp z,robots_checkdirectionsandmove5
314+  D3C1 CD 30 D4         call robots_checkdownthenup ; prefer down over up
315+  D3C4 FE 01            cp 1
316+  D3C6 C8               ret z
317+  D3C7 C3 D0 D3         jp robots_checkdirectionsandmove6
318+  D3CA              robots_checkdirectionsandmove5:
319+  D3CA CD 3A D4         call robots_checkupthendown ; prefer down over up
320+  D3CD FE 01            cp 1
321+  D3CF C8               ret z
322+  D3D0              robots_checkdirectionsandmove6:
323+  D3D0                  ; check right
324+  D3D0 CD F9 D4         call robots_checkrightandmove
325+  D3D3 FE 01            cp 1
326+  D3D5 C8               ret z                       ; if we moved, don't check again
327+  D3D6                  ; check left
328+  D3D6 CD C0 D4         call robots_checkleftandmove
329+  D3D9 FE 01            cp 1
330+  D3DB C8               ret z                       ; if we moved, don't check again
331+  D3DC                  ; if we're here and haven't moved...
332+  D3DC C9               ret
333+  D3DD              robots_checkdirectionsandmove1
334+  D3DD FE 02            cp 2                        ; up
335+  D3DF C2 06 D4         jp nz,robots_checkdirectionsandmove2
336+  D3E2                  ; ALREADY MOVING UP
337+  D3E2                  ; random check
338+  D3E2 CD A1 C4         call game_getcurrentframe
339+  D3E5 E6 01            and 1                       ; odd or even
340+  D3E7 CA F3 D3         jp z,robots_checkdirectionsandmove7
341+  D3EA CD 50 D4         call robots_checkleftthenright ; prefer left over right
342+  D3ED FE 01            cp 1
343+  D3EF C8               ret z
344+  D3F0 C3 F9 D3         jp robots_checkdirectionsandmove8
345+  D3F3              robots_checkdirectionsandmove7:
346+  D3F3 CD 46 D4         call robots_checkrightthenleft ; prefer right over left
347+  D3F6 FE 01            cp 1
348+  D3F8 C8               ret z
349+  D3F9              robots_checkdirectionsandmove8:
350+  D3F9                  ; check up
351+  D3F9 CD 5C D4         call robots_checkupandmove
352+  D3FC FE 01            cp 1
353+  D3FE C8               ret z                       ; if we moved, don't check again
354+  D3FF                  ; check down
355+  D3FF CD 92 D4         call robots_checkdownandmove
356+  D402 FE 01            cp 1
357+  D404 C8               ret z                       ; if we moved, don't check again
358+  D405                  ; if we're here and haven't moved...
359+  D405 C9               ret
360+  D406              robots_checkdirectionsandmove2
361+  D406                  ; ALREADY MOVING DOWN
362+  D406                  ; random check
363+  D406 CD A1 C4         call game_getcurrentframe
364+  D409 E6 01            and 1                       ; odd or even
365+  D40B CA 17 D4         jp z,robots_checkdirectionsandmove9
366+  D40E CD 46 D4         call robots_checkrightthenleft ; prefer right over left
367+  D411 FE 01            cp 1
368+  D413 C8               ret z
369+  D414 C3 1D D4         jp robots_checkdirectionsandmove10
370+  D417              robots_checkdirectionsandmove9:
371+  D417 CD 50 D4         call robots_checkleftthenright ; prefer left over right
372+  D41A FE 01            cp 1
373+  D41C C8               ret z
374+  D41D              robots_checkdirectionsandmove10:
375+  D41D                  ; check down
376+  D41D CD 92 D4         call robots_checkdownandmove
377+  D420 FE 01            cp 1
378+  D422 C8               ret z                       ; if we moved, don't check again
379+  D423                  ; check right first
380+  D423 CD F9 D4         call robots_checkrightandmove
381+  D426 FE 01            cp 1
382+  D428 C8               ret z                       ; if we moved, don't check again
383+  D429                  ; check up
384+  D429 CD 5C D4         call robots_checkupandmove
385+  D42C FE 01            cp 1
386+  D42E C8               ret z                       ; if we moved, don't check again
387+  D42F                  ; if we're here and haven't moved...
388+  D42F C9               ret
389+  D430
390+  D430              ;
391+  D430              ; Different orders of checking directions, for pseudo random motion
392+  D430              ;
393+  D430              robots_checkdownthenup:
394+  D430                  ; check down
395+  D430 CD 92 D4         call robots_checkdownandmove
396+  D433 FE 01            cp 1
397+  D435 C8               ret z                       ; if we moved, don't check again
398+  D436                  ; check up
399+  D436 CD 5C D4         call robots_checkupandmove
400+  D439 C9               ret
401+  D43A
402+  D43A              robots_checkupthendown:
403+  D43A                  ; check up
404+  D43A CD 5C D4         call robots_checkupandmove
405+  D43D FE 01            cp 1
406+  D43F C8               ret z
407+  D440                  ; check down
408+  D440 CD 92 D4         call robots_checkdownandmove
409+  D443 FE 01            cp 1
410+  D445 C9               ret
411+  D446              robots_checkrightthenleft:
412+  D446                  ; check right
413+  D446 CD F9 D4         call robots_checkrightandmove
414+  D449 FE 01            cp 1
415+  D44B C8               ret z                       ; if we moved, don't check again
416+  D44C                  ; check left
417+  D44C CD C0 D4         call robots_checkleftandmove
418+  D44F C9               ret
419+  D450
420+  D450              robots_checkleftthenright:
421+  D450                  ; check left
422+  D450 CD C0 D4         call robots_checkleftandmove
423+  D453 FE 01            cp 1
424+  D455 C8               ret z
425+  D456                  ; check right
426+  D456 CD F9 D4         call robots_checkrightandmove
427+  D459 FE 01            cp 1
428+  D45B C9               ret
429+  D45C
430+  D45C              ;
431+  D45C              ; Checks up for movement
432+  D45C              ; Outputs:
433+  D45C              ; a - 1 if have moved
434+  D45C              robots_checkupandmove:
435+  D45C                  ; check above
436+  D45C DD 4E 00 DD      ld bc,(ix)                  ; load current coords into bc
436+  D460 46 01
437+  D462 79               ld a,c
438+  D463 FE 28            cp 40
439+  D465 D8               ret c
440+  D466 CD 01 AC         call sprites_scadd              ; get the memory location of cell into de
441+  D469 62 6B            ld hl,de                        ; look at cell directly above (subtract 32)
442+  D46B 11 20 00         ld de,32
443+  D46E ED 52            sbc hl,de                       ; memory location of line above now in hl
444+  D470 7E               ld a,(hl)                       ; get the contents of the line
445+  D471 FE 00            cp 0
446+  D473 C2 8F D4         jp nz,robots_checkupandmove0    ; can't move here so return
447+  D476 DD 4E 00 DD      ld bc,(ix)                  ; load current coords into bc
447+  D47A 46 01
448+  D47C 0D               dec c                       ; move up
449+  D47D 0D               dec c
450+  D47E DD 71 00 DD      ld (ix),bc
450+  D482 70 01
451+  D484 DD 36 06 02      ld (ix+6),2
452+  D488 DD 36 05 03      ld (ix+5),3                 ; set the auto move frames
453+  D48C 3E 01            ld a,1
454+  D48E C9               ret
455+  D48F              robots_checkupandmove0:
456+  D48F 3E 00            ld a,0
457+  D491 C9               ret
458+  D492
459+  D492              ;
460+  D492              ; Checks down for movement
461+  D492              ; Outputs:
462+  D492              ; a - 1 if have moved
463+  D492              robots_checkdownandmove:
464+  D492                  ; check below
465+  D492 DD 4E 00 DD      ld bc,(ix)                  ; load current coords into bc
465+  D496 46 01
466+  D498 CD 01 AC         call sprites_scadd              ; get the memory location of cell into de
467+  D49B 62 6B            ld hl,de                        ; look at cell directly underneath (add 256)
468+  D49D 24               inc h                       ; memory location of cell beneath now in hl
469+  D49E 7E               ld a,(hl)                       ; get the contents of the line
470+  D49F FE 00            cp 0
471+  D4A1 C2 BD D4         jp nz,robots_checkdownandmove0    ; can't move here so return
472+  D4A4 DD 4E 00 DD      ld bc,(ix)                  ; load current coords into bc
472+  D4A8 46 01
473+  D4AA 0C               inc c                       ; move up
474+  D4AB 0C               inc c
475+  D4AC DD 71 00 DD      ld (ix),bc
475+  D4B0 70 01
476+  D4B2 DD 36 06 03      ld (ix+6),3
477+  D4B6 DD 36 05 03      ld (ix+5),3                 ; set the auto move frames
478+  D4BA 3E 01            ld a,1
479+  D4BC C9               ret
480+  D4BD              robots_checkdownandmove0:
481+  D4BD 3E 00            ld a,0
482+  D4BF C9               ret
483+  D4C0
484+  D4C0              ;
485+  D4C0              ; Checks left for movement
486+  D4C0              ; Outputs:
487+  D4C0              ; a - 1 if have moved
488+  D4C0              robots_checkleftandmove:
489+  D4C0                  ; check below
490+  D4C0 DD 4E 00 DD      ld bc,(ix)                  ; load current coords into bc
490+  D4C4 46 01
491+  D4C6 CD 01 AC         call sprites_scadd              ; get the memory location of cell into de
492+  D4C9 62 6B            ld hl,de                        ; look at cell directly to the right (add 1)
493+  D4CB 78               ld a,b
494+  D4CC 06 08            ld b,8
495+  D4CE 90               sub b                           ; move one cell left
496+  D4CF 47               ld b,a
497+  D4D0 2B               dec hl                          ; memory location of cell to the right now in hl
498+  D4D1 CD DE C1         call movement_spaceisempty       ; check space is empty
499+  D4D4 7B               ld a,e                          ; check space empty flag
500+  D4D5 FE 00            cp 0
501+  D4D7 CA F6 D4         jp z,robots_checkleftandmove0    ; if zero can't move
502+  D4DA DD 4E 00 DD      ld bc,(ix)                  ; load current coords into bc
502+  D4DE 46 01
503+  D4E0 05               dec b
504+  D4E1 DD 71 00 DD      ld (ix),bc
504+  D4E5 70 01
505+  D4E7 DD 36 06 00      ld (ix+6),0
506+  D4EB DD 36 05 07      ld (ix+5),7                 ; set the auto move frames
507+  D4EF DD 36 03 00      ld (ix+3),0                 ; set to right
508+  D4F3 3E 01            ld a,1
509+  D4F5 C9               ret
510+  D4F6              robots_checkleftandmove0:
511+  D4F6 3E 00            ld a,0
512+  D4F8 C9               ret
513+  D4F9
514+  D4F9              ;
515+  D4F9              ; Checks right for movement
516+  D4F9              ; Outputs:
517+  D4F9              ; a - 1 if have moved
518+  D4F9              robots_checkrightandmove:
519+  D4F9                  ; check below
520+  D4F9 DD 4E 00 DD      ld bc,(ix)                  ; load current coords into bc
520+  D4FD 46 01
521+  D4FF 78               ld a,b
522+  D500 FE E8            cp 232
523+  D502 CA 34 D5         jp z,robots_checkrightandmove0  ; can't move if at edge
524+  D505 CD 01 AC         call sprites_scadd              ; get the memory location of cell into de
525+  D508 62 6B            ld hl,de                        ; look at cell directly to the right (add 1)
526+  D50A 3E 08            ld a,8
527+  D50C 80               add b                           ; move one cell right
528+  D50D 47               ld b,a
529+  D50E 23               inc hl                          ; memory location of cell to the right now in hl
530+  D50F CD DE C1         call movement_spaceisempty       ; check space is empty
531+  D512 7B               ld a,e                          ; check space empty flag
532+  D513 FE 00            cp 0
533+  D515 CA 34 D5         jp z,robots_checkrightandmove0    ; if zero can't move
534+  D518 DD 4E 00 DD      ld bc,(ix)                  ; load current coords into bc
534+  D51C 46 01
535+  D51E 04               inc b
536+  D51F DD 71 00 DD      ld (ix),bc
536+  D523 70 01
537+  D525 DD 36 06 01      ld (ix+6),1
538+  D529 DD 36 05 07      ld (ix+5),7                 ; set the auto move frames
539+  D52D DD 36 03 01      ld (ix+3),1                 ; set to right
540+  D531 3E 01            ld a,1
541+  D533 C9               ret
542+  D534              robots_checkrightandmove0:
543+  D534 3E 00            ld a,0
544+  D536 C9               ret
545+  D537
546+  D537              ;
547+  D537              ; Draws a robot
548+  D537              ; Inputs:
549+  D537              ; ix - points to first byte of robot in array
550+  D537              robots_draw:
551+  D537 DD 4E 00 DD      ld bc,(ix)
551+  D53B 46 01
552+  D53D 21 AD BE         ld hl,robot_sprite                      ; set to the robot sprite
553+  D540 DD 7E 02         ld a,(ix+2)                             ; get the state
554+  D543 FE 02            cp 2                                    ; is this dying
555+  D545 CA 60 D5         jp z,robots_draw1
556+  D548              robots_draw3:
557+  D548 DD 7E 03         ld a,(ix+3)                             ; get the direction
558+  D54B FE 00            cp 0
559+  D54D CA 54 D5         jp z,robots_draw0                       ; if left, nothing to do
560+  D550 11 20 00         ld de,32
561+  D553 19               add hl,de                               ; add four frames to sprite
562+  D554              robots_draw0:
563+  D554 DD 7E 04         ld a,(ix+4)                             ; get the anim frame
564+  D557 11 00 00         ld de,0
565+  D55A 5F               ld e,a
566+  D55B 19               add hl,de                               ; add to base
567+  D55C CD 0C AB         call sprites_drawsprite
568+  D55F C9               ret
569+  D560              ;
570+  D560              ; Dying
571+  D560              ;
572+  D560              robots_draw1:
573+  D560 DD 7E 05         ld a,(ix+5)                             ; get anim frames
574+  D563 FE 00            cp 0                                    ; if zero this is the first time around
575+  D565 C2 70 D5         jp nz,robots_draw2
576+  D568 3E 18            ld a,24
577+  D56A DD 77 05         ld (ix+5),a                             ; load up the anim frames
578+  D56D C3 48 D5         jp robots_draw3                         ; return to main loop to draw as normal
579+  D570              robots_draw2:
580+  D570 3D               dec a
581+  D571 DD 77 05         ld (ix+5),a
582+  D574 FE 00            cp 0                                    ; have we reached the end yet
583+  D576 C2 7C D5         jp nz, robots_draw4
584+  D579 CD 88 D2         call robots_kill
585+  D57C              robots_draw4:
586+  D57C C3 54 D5         jp robots_draw0
587+  D57F C9               ret
588+  D580
589+  D580              ;
590+  D580              ; Checks to see if the robot is hitting a player
591+  D580              ; Inputs:
592+  D580              ; ix - memory location of robot we're checking
593+  D580              robots_checkforplayer:
594+  D580 3A 02 C5         ld a,(player+11)     ; get player state
595+  D583 FE 00            cp 0
596+  D585 C0               ret nz               ; if already dying, don't kill again
597+  D586 DD 4E 00 DD      ld bc,(ix)           ; get coords
597+  D58A 46 01
598+  D58C ED 5B F7 C4      ld de,(player)       ; get the player coords
599+  D590 7B               ld a,e               ; get the vert coord first
600+  D591 91               sub c                ; subtract the diamond vertical coord from players
601+  D592 C6 08            add 8                ; add the max distance
602+  D594 FE 11            cp 17                ; compare to max*2+1? if carry flag set, they've hit
603+  D596 D0               ret nc               ; if not, hasn't hit
604+  D597 7A               ld a,d               ; get the player horiz coord
605+  D598 90               sub b                ; subtract rock coord
606+  D599 C6 08            add 8                ; add max distance
607+  D59B FE 11            cp 17                ; compare to max*2+1? if carry flag set, they've hit
608+  D59D D0               ret nc
609+  D59E DD 36 02 00      ld (ix+2),0          ; mark as inactive
610+  D5A2 CD 32 C6         call player_robotkillplayer ; mark the player as killed
611+  D5A5 C9               ret
# file closed: game/robots.asm
166   D5A6                  include "game\bullet.asm"
# file opened: game/bullet.asm
  1+  D5A6              ;
  2+  D5A6              ; Current state: x & y coords (screen), direction (0 left, 1 right), state
  3+  D5A6              ;
  4+  D5A6              bullet_state:
  5+  D5A6 00 00 00 00      defb 0,0,0,0
  6+  D5AA
  7+  D5AA              ;
  8+  D5AA              ; Initialise a the bullet
  9+  D5AA              ;
 10+  D5AA              bullet_init:
 11+  D5AA DD 21 A6 D5      ld ix,bullet_state
 12+  D5AE DD 36 00 00      ld (ix),0
 13+  D5B2 DD 36 01 00      ld (ix+1),0
 14+  D5B6 DD 36 02 00      ld (ix+2),0
 15+  D5BA DD 36 03 00      ld (ix+3),0
 16+  D5BE C9               ret
 17+  D5BF
 18+  D5BF              ;
 19+  D5BF              ; Shoots the bullet
 20+  D5BF              ;
 21+  D5BF              bullet_shoot:
 22+  D5BF DD 21 A6 D5      ld ix,bullet_state
 23+  D5C3 ED 4B F7 C4      ld bc,(player)              ; get the player coords
 24+  D5C7 3A F9 C4         ld a,(player+2)             ; get the player direction
 25+  D5CA FE 01            cp 1                        ; going left?
 26+  D5CC CA DA D5         jp z,bullet_shoot0
 27+  D5CF 3E 08            ld a,8
 28+  D5D1 80               add a,b                     ; going right so add eight to start coords
 29+  D5D2 47               ld b,a
 30+  D5D3 DD 36 02 01      ld (ix+2),1                 ; set right
 31+  D5D7 C3 E3 D5         jp bullet_shoot1
 32+  D5DA              bullet_shoot0:
 33+  D5DA 78               ld a,b
 34+  D5DB 06 08            ld b,8
 35+  D5DD 90               sub b
 36+  D5DE 47               ld b,a                      ; going left so subtract eight to start coords
 37+  D5DF DD 36 02 00      ld (ix+2),0                 ; set right
 38+  D5E3              bullet_shoot1:
 39+  D5E3 DD 71 00 DD      ld (ix),bc        ; store coords
 39+  D5E7 70 01
 40+  D5E9 DD 36 03 01      ld (ix+3),1       ; set state to 1
 41+  D5ED CD 43 D6         call bullet_draw ; draw the initial frame
 42+  D5F0 C9               ret
 43+  D5F1
 44+  D5F1              ;
 45+  D5F1              ; Performs bullet processing
 46+  D5F1              ;
 47+  D5F1              bullet_process:
 48+  D5F1 3A A9 D5         ld a,(bullet_state+3)       ; get the state
 49+  D5F4 FE 00            cp 0
 50+  D5F6 C8               ret z                       ; don't draw if this has become inactive
 51+  D5F7 CD 43 D6         call bullet_draw            ; delete current frame
 52+  D5FA CD 07 D6         call bullet_move            ; move the bullet
 53+  D5FD 3A A9 D5         ld a,(bullet_state+3)       ; get the state
 54+  D600 FE 00            cp 0
 55+  D602 C8               ret z                       ; don't draw if this has become inactive
 56+  D603 CD 43 D6         call bullet_draw            ; draw new frame
 57+  D606 C9               ret
 58+  D607
 59+  D607              ;
 60+  D607              ; Moves the bullet, checking for collisions
 61+  D607              ;
 62+  D607              bullet_move:
 63+  D607 DD 21 A6 D5      ld ix,bullet_state
 64+  D60B DD 4E 00 DD      ld bc,(ix)
 64+  D60F 46 01
 65+  D611 DD 7E 02         ld a,(ix+2)                 ; get the direction
 66+  D614 FE 00            cp 0                        ; going left?
 67+  D616 CA 20 D6         jp z,bullet_move0
 68+  D619 3E 08            ld a,8
 69+  D61B 80               add b
 70+  D61C 47               ld b,a                      ; add 8 since going right
 71+  D61D C3 25 D6         jp bullet_move1
 72+  D620              bullet_move0:
 73+  D620 78               ld a,b
 74+  D621 06 08            ld b,8
 75+  D623 90               sub b
 76+  D624 47               ld b,a                      ; subtract 8 since going left
 77+  D625              bullet_move1:
 78+  D625 DD 71 00 DD      ld (ix),bc                  ; store new coords
 78+  D629 70 01
 79+  D62B C5               push bc
 80+  D62C CD 50 D6         call bullets_checkforrobot
 81+  D62F C1               pop bc
 82+  D630 FE 01            cp 1                        ; if we hit a robot, keep moving
 83+  D632 C8               ret z
 84+  D633 CD 01 AC         call sprites_scadd          ; get memory loc of this block into de
 85+  D636 21 60 00         ld hl,96
 86+  D639 19               add hl,de
 87+  D63A 7E               ld a,(hl)                   ; get the content
 88+  D63B FE 00            cp 0
 89+  D63D C8               ret z                       ; if empty, continue
 90+  D63E DD 36 03 00      ld (ix+3),0                 ; otherwise, mark bullet as inactive
 91+  D642 C9               ret
 92+  D643
 93+  D643              ;
 94+  D643              ; Draw the bullet
 95+  D643              ;
 96+  D643              bullet_draw:
 97+  D643 ED 4B A6 D5      ld bc,(bullet_state)        ; get coords
 98+  D647 3E 1B            ld a,27
 99+  D649 CD 87 AA         call screen_getblock        ; get the block address
100+  D64C CD 0C AB         call sprites_drawsprite     ; draw the sprite
101+  D64F C9               ret
102+  D650
103+  D650              ;
104+  D650              ; Checks to see if the robot is hitting a bullet
105+  D650              ; Outputs:
106+  D650              ; a = 0 if not robot hit
107+  D650              ; a = 1 if robot not hit
108+  D650              bullets_checkforrobot:
109+  D650 3E 00            ld a,0
110+  D652 32 A6 D6         ld (bullets_tmp),a
111+  D655 3A 19 D2         ld a,(robots_robotsmax) ; robots to check
112+  D658 47               ld b,a
113+  D659 FD 21 EB D1      ld iy,robots_robots   ; start of robot array
114+  D65D              bullets_checkforrobot0:
115+  D65D C5               push bc
116+  D65E FD 7E 02         ld a,(iy+2)             ; get the state
117+  D661 FE 01            cp 1
118+  D663 C2 9A D6         jp nz,bullets_checkforrobot1 ; if not active, don't check
119+  D666 FD 5E 00 FD      ld de,(iy)              ; get robot coords
119+  D66A 56 01
120+  D66C 7A               ld a,d
121+  D66D E6 F8            and 248                 ; get nearest multiple of 8
122+  D66F 57               ld d,a
123+  D670 ED 4B A6 D5      ld bc,(bullet_state)    ; get bullet coords
124+  D674 7A               ld a,d               ; get the player horiz coord
125+  D675 90               sub b                ; subtract robot coord
126+  D676 FE 00            cp 0                ; should be the same
127+  D678 C2 84 D6         jp nz,bullets_checkforrobot2 ; if not, might have hit, so check the next char along... if matched, check vert
128+  D67B 3E 08            ld a,8
129+  D67D 82               add a,d
130+  D67E 90               sub b                ; check again for the next char along
131+  D67F FE 00            cp 0
132+  D681 C2 9A D6         jp nz,bullets_checkforrobot1 ; if not, haven't hit
133+  D684              bullets_checkforrobot2:
134+  D684 7B               ld a,e               ; get the vert coord
135+  D685 91               sub c                ; subtract the bullet vertical coord from robots
136+  D686 C6 04            add 4                ; add the max distance
137+  D688 FE 09            cp 9                ; compare to max*2+1? if carry flag set, they've hit
138+  D68A D2 9A D6         jp nc,bullets_checkforrobot1   ; if not, hasn't hit
139+  D68D FD 36 02 02      ld (iy+2),2             ; mark the robot as killed
140+  D691 FD 36 05 00      ld (iy+5),0             ; mark the anim frames as zero
141+  D695 3E 01            ld a,1
142+  D697 32 A6 D6         ld (bullets_tmp),a      ; hit the flag to say we killed a robot
143+  D69A              bullets_checkforrobot1:
144+  D69A 11 07 00         ld de,7
145+  D69D FD 19            add iy,de              ; move to next robot
146+  D69F C1               pop bc
147+  D6A0 10 BB            djnz bullets_checkforrobot0
148+  D6A2 3A A6 D6         ld a,(bullets_tmp)
149+  D6A5 C9               ret
150+  D6A6
151+  D6A6              bullets_tmp:
152+  D6A6 00               defb 0
153+  D6A7
# file closed: game/bullet.asm
167   D6A7
168   D6A7              ;===========================================================================
169   D6A7              ; Stack.
170   D6A7              ;===========================================================================
171   D6A7
172   D6A7              ; Stack: this area is reserved for the stack
173   D6A7              STACK_SIZE: equ 100    ; in words
174   D6A7
175   D6A7              ; Reserve stack space
176   D6A7 00 00            defw 0  ; WPMEM, 2
177   D6A9              stack_bottom:
178   D6A9 00 00 00...      defs    STACK_SIZE*2, 0
179   D771              stack_top:
180   D771 00 00            defw 0  ; WPMEM, 2
181   D773
182   D773                     SAVESNA "./dist/ThePit.sna", main
183   D773                     ;SAVETAP "./dist/ThePit.tap", main
# file closed: main.asm
