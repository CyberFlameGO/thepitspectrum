# file opened: main.asm
  1   0000                  DEVICE ZXSPECTRUM48
  2   0000
  3   0000                  ORG $8000
  4   8000
  5   8000              ;===========================================================================
  6   8000              ; Persistent watchpoint.
  7   8000              ; Change WPMEMx (remove the 'x' from WPMEMx) below to activate.
  8   8000              ; If you do so the program will hit a breakpoint when it tries to
  9   8000              ; write to the first byte of the 3rd line.
 10   8000              ; When program breaks in the fill_memory sub routine please hover over hl
 11   8000              ; to see that it contains 0x5804 or COLOR_SCREEN+64.
 12   8000              ;===========================================================================
 13   8000
 14   8000              ; WPMEMx 0x5840, 1, w
 15   8000
 16   8000
 17   8000              ;===========================================================================
 18   8000              ; Include modules
 19   8000              ;===========================================================================
 20   8000                  include "init.asm"
# file opened: init.asm
  1+  8000              ;
  2+  8000              ; Set up at start up
  3+  8000              ;
  4+  8000              init_start:
  5+  8000              ; We want a black screen.
  6+  8000
  7+  8000 3E 47            ld a,71             ; white ink (7) on black paper (0),
  8+  8002                                      ; bright (64).
  9+  8002 CD 67 80         call utilities_clearscreen
 10+  8005 32 8D 5C         ld (23693),a        ; set our screen colours.
 11+  8008 AF               xor a               ; quick way to load accumulator with zero.
 12+  8009 CD 9B 22         call 8859           ; set permanent border colours.
 13+  800C
 14+  800C 21 76 A7         ld hl,screen_offset ; reset some temp variables
 15+  800F 36 00            ld (hl),0
 16+  8011 21 77 A7         ld hl,screen_tmp
 17+  8014 36 00            ld (hl),0
 18+  8016 21 AC A5         ld hl,buffer_tmp
 19+  8019 36 00            ld (hl),0
 20+  801B 23               inc hl
 21+  801C 36 00            ld (hl),0
 22+  801E
 23+  801E CD 07 BB         call game_resetcurrentframe ; reset current frame
 24+  8021
 25+  8021 C9               ret
 26+  8022
 27+  8022              ;
 28+  8022              ;   Start coord
 29+  8022              ;   vert c, horiz b
 30+  8022              init_coord:
 31+  8022 18 30            defb 24,48
 32+  8024
 33+  8024              ;
 34+  8024              ; Number of lives to start
 35+  8024              ;
 36+  8024              init_lives:
 37+  8024 03               defb 3
 38+  8025
 39+  8025              ;
 40+  8025              ; Score to start
 41+  8025              ;
 42+  8025              init_score:
 43+  8025 30 30 30 30      defb '000000'
 43+  8029 30 30
# file closed: init.asm
 21   802B                  include "utilities.asm"
# file opened: utilities.asm
  1+  802B              ; ##########################################################################
  2+  802B              ; Print a character
  3+  802B              ; Inputs:
  4+  802B              ; b - x coord
  5+  802B              ; c - y coord
  6+  802B              ; d - character
  7+  802B              ; e - colour
  8+  802B              ; ##########################################################################
  9+  802B              utilities_print_char:
 10+  802B 7B               ld a,e
 11+  802C 32 8F 5C         ld (23695),a        ; set our temporary screen colours.
 12+  802F 3E 16            ld a,22
 13+  8031 D7               rst 16              ; Calls the Sinclair PRINT AT routine
 14+  8032 78               ld a,b              ; Gets the X co-ordinate
 15+  8033 3D               dec a
 16+  8034 D7               rst 16
 17+  8035 79               ld a,c              ; and the Y co-ordinate
 18+  8036 D7               rst 16              ; So, essentially PRINT AT X,Y; like in BASIC
 19+  8037 7A               ld a,d              ; ASCII code for udg.
 20+  8038 D7               rst 16              ; draw block.
 21+  8039 C9               ret
 22+  803A
 23+  803A
 24+  803A              ;Inputs:
 25+  803A              ;     DE and A are factors
 26+  803A              ;Outputs:
 27+  803A              ;     A is not changed
 28+  803A              ;     B is 0
 29+  803A              ;     C is not changed
 30+  803A              ;     DE is not changed
 31+  803A              ;     HL is the product
 32+  803A              ;Time:
 33+  803A              ;     342+6x
 34+  803A              ;
 35+  803A              utilities_multiply:
 36+  803A 06 08            ld b,8          ;7           7
 37+  803C 21 00 00         ld hl,0         ;10         10
 38+  803F 29               add hl,hl     ;11*8       88
 39+  8040 07               rlca          ;4*8        32
 40+  8041 30 01            jr nc,$+3     ;(12|18)*8  96+6x
 41+  8043 19                   add hl,de   ;--         --
 42+  8044 10 F9            djnz $-5      ;13*7+8     99
 43+  8046 C9               ret             ;10         10
 44+  8047
 45+  8047              utilities_waitforkey:
 46+  8047 21 08 5C         ld hl,23560         ; LAST K system variable.
 47+  804A 36 00            ld (hl),0           ; put null value there.
 48+  804C              utilities_waitforkey0:
 49+  804C 7E               ld a,(hl)           ; new value of LAST K.
 50+  804D FE 00            cp 0                ; is it still zero?
 51+  804F 28 FB            jr z,utilities_waitforkey0           ; yes, so no key pressed.
 52+  8051 C9               ret                 ; key was pressed.
 53+  8052
 54+  8052              ;
 55+  8052              ; Waits number of frames for keypress. If got, returns 1, if not 0
 56+  8052              ; Inputs:
 57+  8052              ; a - number of frames to waits
 58+  8052              ; Ouputs:
 59+  8052              ; e - 0 not pressed, 1 pressed
 60+  8052              utilities_waitforkey_forframes:
 61+  8052 21 08 5C         ld hl,23560         ; LAST K system variable.
 62+  8055 36 00            ld (hl),0           ; put null value there.
 63+  8057 47               ld b,a              ; number of frames to wait
 64+  8058              utilities_waitforkey_forframes0:
 65+  8058 7E               ld a,(hl)           ; new value of LAST K.
 66+  8059 FE 00            cp 0                ; is it still zero?
 67+  805B 28 03            jr z,utilities_waitforkey_forframes1           ; yes, so no key pressed.
 68+  805D 1E 01            ld e,1              ; set the pressed flag
 69+  805F C9               ret                 ; key was pressed.
 70+  8060              utilities_waitforkey_forframes1:
 71+  8060 76               halt                ; wait for frame
 72+  8061 76               halt                ; wait for frame
 73+  8062 10 F4            djnz utilities_waitforkey_forframes0 ; loop again
 74+  8064 1E 00            ld e,0              ; nothing pressed in time
 75+  8066 C9               ret
 76+  8067
 77+  8067              ;
 78+  8067              ; Clears the screen
 79+  8067              ; Inputs:
 80+  8067              ; a - attribute colour
 81+  8067              utilities_clearscreen:
 82+  8067 76               halt
 83+  8068 21 00 58         ld hl,22528         ; attr
 84+  806B 11 01 58         ld de,22529         ; attr+1
 85+  806E 01 FF 02         ld bc,767
 86+  8071 77               ld (hl),a
 87+  8072 ED B0            ldir
 88+  8074
 89+  8074 21 00 40         ld hl, 16384        ;pixels
 90+  8077 11 01 40         ld de, 16385        ;pixels + 1
 91+  807A 01 FF 17         ld bc, 6143         ;pixels area length - 1
 92+  807D 36 00            ld (hl), 0          ;set first byte to '0'
 93+  807F ED B0            ldir                ;copy bytes
 94+  8081
 95+  8081 C9               ret
 96+  8082
 97+  8082              ;
 98+  8082              ; Wait for a number of frames
 99+  8082              ; Inputs:
100+  8082              ; b - number of frames
101+  8082              utilities_pauseforframes:
102+  8082 76               halt
103+  8083 10 FD            djnz utilities_pauseforframes
104+  8085 C9               ret
105+  8086
106+  8086              utilities_readkey:
107+  8086 21 A6 80         LD HL,utilties_keymap              ; Point HL at the keyboard list
108+  8089 16 08            LD D,8                                  ; This is the number of ports (rows) to check
109+  808B 0E FE            LD C,$FE                            ; C is always FEh for reading keyboard ports
110+  808D              utilities_readkey_0:
111+  808D 46               LD B,(HL)                               ; Get the keyboard port address from table
112+  808E 23               INC HL                                  ; Increment to list of keys
113+  808F ED 78            IN A,(C)                                ; Read the row of keys in
114+  8091 E6 1F            AND $1F                                     ; We are only interested in the first five bits
115+  8093 1E 05            LD E,5                                  ; This is the number of keys in the row
116+  8095              utilities_readkey_1:
117+  8095 CB 3F            SRL A                                   ; Shift A right; bit 0 sets carry bit
118+  8097 30 0B            JR NC,utilities_readkey_2   ; If the bit is 0, we've found our key
119+  8099 23               INC HL                                  ; Go to next table address
120+  809A 1D               DEC E                                   ; Decrement key loop counter
121+  809B 20 F8            JR NZ,utilities_readkey_1   ; Loop around until this row finished
122+  809D 15               DEC D                                   ; Decrement row loop counter
123+  809E 20 ED            JR NZ,utilities_readkey_0   ; Loop around until we are done
124+  80A0 A7               AND A                                   ; Clear A (no key found)
125+  80A1 C3 86 80         jp utilities_readkey
126+  80A4              utilities_readkey_2:
127+  80A4 7E               LD A,(HL)                               ; We've found a key at this point; fetch the character code!
128+  80A5 C9               RET
129+  80A6
130+  80A6              utilties_keymap:
131+  80A6 FE 23 5A 58      defb $FE,"#","Z","X","C","V"
131+  80AA 43 56
132+  80AC FD 41 53 44      defb $FD,"A","S","D","F","G"
132+  80B0 46 47
133+  80B2 FB 51 57 45      defb $FB,"Q","W","E","R","T"
133+  80B6 52 54
134+  80B8 F7 31 32 33      defb $F7,"1","2","3","4","5"
134+  80BC 34 35
135+  80BE EF 30 39 38      defb $EF,"0","9","8","7","6"
135+  80C2 37 36
136+  80C4 DF 50 4F 49      defb $DF,"P","O","I","U","Y"
136+  80C8 55 59
137+  80CA BF 23 4C 4B      defb $BF,"#","L","K","J","H"
137+  80CE 4A 48
138+  80D0 7F 20 23 4D      defb $7F," ","#","M","N","B"
138+  80D4 4E 42
139+  80D6
140+  80D6
141+  80D6              ;
142+  80D6              ; Generates a randomish number in the range 0 to e
143+  80D6              ; Inputs:
144+  80D6              ; e - upper value
145+  80D6              ; Outputs:
146+  80D6              ; a - random number
147+  80D6              utilities_randomupper
148+  80D6 3A DD BA         ld a,(game_framenumber)
149+  80D9 6F               ld l,a
150+  80DA 26 00            ld h,0
151+  80DC 16 00            ld d,0
152+  80DE 42 4B            ld bc,de
153+  80E0              utilities_randomupper0:
154+  80E0 B7               or a
155+  80E1 ED 42            sbc hl,bc
156+  80E3 F2 E0 80         jp p,utilities_randomupper0
157+  80E6 09               add hl,bc
158+  80E7 01 00 00         ld bc,0
159+  80EA 09               add hl,bc
160+  80EB 7D               ld a,l
161+  80EC C9               ret
# file closed: utilities.asm
 22   80ED                  include "strings.asm"
# file opened: strings.asm
  1+  80ED              string_score1:
  2+  80ED 04 00 53 43      defb 4,0,'SCORE1',255
  2+  80F1 4F 52 45 31
  2+  80F5 FF
  3+  80F6              string_scorenumbers1:
  4+  80F6 04 01 30 30      defb 4,1,'000000',255
  4+  80FA 30 30 30 30
  4+  80FE FF
  5+  80FF              string_company:
  6+  80FF 0C 00 43 45      defb 12,0,'CENTURI',255
  6+  8103 4E 54 55 52
  6+  8107 49 FF
  7+  8109              string_credits:
  8+  8109 0C 01 50 4C      defb 12,1,'PLAYER 1',255
  8+  810D 41 59 45 52
  8+  8111 20 31 FF
  9+  8114              string_score2:
 10+  8114 16 00 53 43      defb 22,0,'SCORE2',255
 10+  8118 4F 52 45 32
 10+  811C FF
 11+  811D              string_scorenumbers2:
 12+  811D 16 01 30 30      defb 22,1,'000000',255
 12+  8121 30 30 30 30
 12+  8125 FF
 13+  8126              string_titlescreen_copyright:
 14+  8126 06 15 7F 31      defb 6,21, 127,'1982  CENTURI INC',255
 14+  812A 39 38 32 20
 14+  812E 20 43 45 4E
 14+  8132 54 55 52 49
 14+  8136 20 49 4E 43
 14+  813A FF
 15+  813B
 16+  813B
 17+  813B              string_alttitlescreen_1:
 18+  813B 0C 00 43 52      defb 12,0,'CREDITS 1',255
 18+  813F 45 44 49 54
 18+  8143 53 20 31 FF
 19+  8147              string_alttitlescreen_2:
 20+  8147 00 02 20 20      defb 0,2,'           THE OBJECT',254
 20+  814B 20 20 20 20
 20+  814F 20 20 20 20
 20+  8153 20 54 48 45
 20+  8157 20 4F 42 4A
 20+  815B 45 43 54 FE
 21+  815F 00 03 20 20      defb 0,3,'          OF THIS GAME',254
 21+  8163 20 20 20 20
 21+  8167 20 20 20 20
 21+  816B 4F 46 20 54
 21+  816F 48 49 53 20
 21+  8173 47 41 4D 45
 21+  8177 FE
 22+  8178 00 04 20 20      defb 0,4,'         IS TO DIG DOWN',254
 22+  817C 20 20 20 20
 22+  8180 20 20 20 49
 22+  8184 53 20 54 4F
 22+  8188 20 44 49 47
 22+  818C 20 44 4F 57
 22+  8190 4E FE
 23+  8192 00 05 20 20      defb 0,5,'        TO THE BOTTOM PIT',254
 23+  8196 20 20 20 20
 23+  819A 20 20 54 4F
 23+  819E 20 54 48 45
 23+  81A2 20 42 4F 54
 23+  81A6 54 4F 4D 20
 23+  81AA 50 49 54 FE
 24+  81AE 00 06 20 20      defb 0,6,'               AND',254
 24+  81B2 20 20 20 20
 24+  81B6 20 20 20 20
 24+  81BA 20 20 20 20
 24+  81BE 20 41 4E 44
 24+  81C2 FE
 25+  81C3 00 07 20 20      defb 0,7,'        COLLECT AT LEAST',254
 25+  81C7 20 20 20 20
 25+  81CB 20 20 43 4F
 25+  81CF 4C 4C 45 43
 25+  81D3 54 20 41 54
 25+  81D7 20 4C 45 41
 25+  81DB 53 54 FE
 26+  81DE 00 08 20 20      defb 0,8,'         ONE LARGE JEWEL',254
 26+  81E2 20 20 20 20
 26+  81E6 20 20 20 4F
 26+  81EA 4E 45 20 4C
 26+  81EE 41 52 47 45
 26+  81F2 20 4A 45 57
 26+  81F6 45 4C FE
 27+  81F9 00 09 20 20      defb 0,9,'              THEN',254
 27+  81FD 20 20 20 20
 27+  8201 20 20 20 20
 27+  8205 20 20 20 20
 27+  8209 54 48 45 4E
 27+  820D FE
 28+  820E 00 0A 20 20      defb 0,10,'         RETURN TO SHIP',254
 28+  8212 20 20 20 20
 28+  8216 20 20 20 52
 28+  821A 45 54 55 52
 28+  821E 4E 20 54 4F
 28+  8222 20 53 48 49
 28+  8226 50 FE
 29+  8228 00 0B 20 20      defb 0,11,'         THRU UPPER PIT',255
 29+  822C 20 20 20 20
 29+  8230 20 20 20 54
 29+  8234 48 52 55 20
 29+  8238 55 50 50 45
 29+  823C 52 20 50 49
 29+  8240 54 FF
 30+  8242              string_alttitlescreen_3:
 31+  8242 00 0D 20 20      defb 0,13,'    SINGLE BONUS  5000 POINTS',254
 31+  8246 20 20 53 49
 31+  824A 4E 47 4C 45
 31+  824E 20 42 4F 4E
 31+  8252 55 53 20 20
 31+  8256 35 30 30 30
 31+  825A 20 50 4F 49
 31+  825E 4E 54 53 FE
 32+  8262 00 0E 20 20      defb 0,14,'      COLLECT 1 LARGE JEWEL',254
 32+  8266 20 20 20 20
 32+  826A 43 4F 4C 4C
 32+  826E 45 43 54 20
 32+  8272 31 20 4C 41
 32+  8276 52 47 45 20
 32+  827A 4A 45 57 45
 32+  827E 4C FE
 33+  8280 00 0F 20 20      defb 0,15,'       AND RETURN TO SHIP',254
 33+  8284 20 20 20 20
 33+  8288 20 41 4E 44
 33+  828C 20 52 45 54
 33+  8290 55 52 4E 20
 33+  8294 54 4F 20 53
 33+  8298 48 49 50 FE
 34+  829C 00 11 20 20      defb 0,17,'    DOUBLE BONUS  10000 POINTS',254
 34+  82A0 20 20 44 4F
 34+  82A4 55 42 4C 45
 34+  82A8 20 42 4F 4E
 34+  82AC 55 53 20 20
 34+  82B0 31 30 30 30
 34+  82B4 30 20 50 4F
 34+  82B8 49 4E 54 53
 34+  82BC FE
 35+  82BD 00 12 20 20      defb 0,18,'    COLLECT ALL 3 LARGE JEWELS',254
 35+  82C1 20 20 43 4F
 35+  82C5 4C 4C 45 43
 35+  82C9 54 20 41 4C
 35+  82CD 4C 20 33 20
 35+  82D1 4C 41 52 47
 35+  82D5 45 20 4A 45
 35+  82D9 57 45 4C 53
 35+  82DD FE
 36+  82DE 00 13 20 20      defb 0,19,'       OR   ALL 4 SMALL JEWELS',254
 36+  82E2 20 20 20 20
 36+  82E6 20 4F 52 20
 36+  82EA 20 20 41 4C
 36+  82EE 4C 20 34 20
 36+  82F2 53 4D 41 4C
 36+  82F6 4C 20 4A 45
 36+  82FA 57 45 4C 53
 36+  82FE FE
 37+  82FF 00 15 20 20      defb 0,21,'    TRIPLE BONUS  15000 POINTS',254
 37+  8303 20 20 54 52
 37+  8307 49 50 4C 45
 37+  830B 20 42 4F 4E
 37+  830F 55 53 20 20
 37+  8313 31 35 30 30
 37+  8317 30 20 50 4F
 37+  831B 49 4E 54 53
 37+  831F FE
 38+  8320 00 16 20 20      defb 0,22,'       COLLECT ALL 7 JEWELS',255
 38+  8324 20 20 20 20
 38+  8328 20 43 4F 4C
 38+  832C 4C 45 43 54
 38+  8330 20 41 4C 4C
 38+  8334 20 37 20 4A
 38+  8338 45 57 45 4C
 38+  833C 53 FF
 39+  833E
 40+  833E              string_lifescreen_player:
 41+  833E 0B 00 20 50      defb 11,0,' PLAYER 1 ',255
 41+  8342 4C 41 59 45
 41+  8346 52 20 31 20
 41+  834A FF
 42+  834B              string_lifescreen_lives:
 43+  834B 0B 03 30 20      defb 11,3,48,' MEN LEFT',255
 43+  834F 4D 45 4E 20
 43+  8353 4C 45 46 54
 43+  8357 FF
 44+  8358              string_lifescreen_lastman:
 45+  8358 0C 03 4C 41      defb 12,3,'LAST MAN',255
 45+  835C 53 54 20 4D
 45+  8360 41 4E FF
 46+  8363
 47+  8363              string_gameoverscreen_gameover:
 48+  8363 0C 06 47 41      defb 12,6,'GAME OVER',255
 48+  8367 4D 45 20 4F
 48+  836B 56 45 52 FF
 49+  836F              string_gameoverscreen_copyright:
 50+  836F 05 12 7F 20      defb 5,18,127,' 1982 AW ZILEC ELC LTD',255
 50+  8373 31 39 38 32
 50+  8377 20 41 57 20
 50+  837B 5A 49 4C 45
 50+  837F 43 20 45 4C
 50+  8383 43 20 4C 54
 50+  8387 44 FF
 51+  8389              string_gameoverscreen_bestscores:
 52+  8389 07 16 42 45      defb 7,22,'BEST SCORES TODAY',255
 52+  838D 53 54 20 53
 52+  8391 43 4F 52 45
 52+  8395 53 20 54 4F
 52+  8399 44 41 59 FF
 53+  839D              string_gameover_credits:
 54+  839D 0C 01 43 52      defb 12,1,'CREDITS 0',255
 54+  83A1 45 44 49 54
 54+  83A5 53 20 30 FF
 55+  83A9
 56+  83A9              string_highscore_congratulations:
 57+  83A9 08 05 43 4F      defb 8,5,'CONGRATULATIONS',255
 57+  83AD 4E 47 52 41
 57+  83B1 54 55 4C 41
 57+  83B5 54 49 4F 4E
 57+  83B9 53 FF
 58+  83BB              string_highscore_player1:
 59+  83BB 0C 07 50 4C      defb 12,7,'PLAYER 1',255
 59+  83BF 41 59 45 52
 59+  83C3 20 31 FF
 60+  83C6              string_highscore_player2:
 61+  83C6 0C 07 50 4C      defb 12,7,'PLAYER 2',255
 61+  83CA 41 59 45 52
 61+  83CE 20 32 FF
 62+  83D1              string_highscore_youhaveearned:
 63+  83D1 08 0A 59 4F      defb 8,10,'YOU HAVE EARNED',255
 63+  83D5 55 20 48 41
 63+  83D9 56 45 20 45
 63+  83DD 41 52 4E 45
 63+  83E1 44 FF
 64+  83E3              string_highscore_place1:
 65+  83E3 06 0C 54 48      defb 6,12,'THE GREATEST SCORE',255
 65+  83E7 45 20 47 52
 65+  83EB 45 41 54 45
 65+  83EF 53 54 20 53
 65+  83F3 43 4F 52 45
 65+  83F7 FF
 66+  83F8              string_highscore_place2:
 67+  83F8 06 0C 54 48      defb 6,12,'THE 2ND BEST SCORE',255
 67+  83FC 45 20 32 4E
 67+  8400 44 20 42 45
 67+  8404 53 54 20 53
 67+  8408 43 4F 52 45
 67+  840C FF
 68+  840D              string_highscore_place3:
 69+  840D 06 0C 54 48      defb 6,12,'THE 3RD BEST SCORE',255
 69+  8411 45 20 33 52
 69+  8415 44 20 42 45
 69+  8419 53 54 20 53
 69+  841D 43 4F 52 45
 69+  8421 FF
 70+  8422              string_highscore_pleaseenter
 71+  8422 03 0F 52 45      defb 3,15,'RECORD YOUR INITIALS BELOW',255
 71+  8426 43 4F 52 44
 71+  842A 20 59 4F 55
 71+  842E 52 20 49 4E
 71+  8432 49 54 49 41
 71+  8436 4C 53 20 42
 71+  843A 45 4C 4F 57
 71+  843E FF
 72+  843F
 73+  843F              string_endlevel_youhaveearned:
 74+  843F 08 0B 59 4F      defb 8,11,'YOU HAVE EARNED',255
 74+  8443 55 20 48 41
 74+  8447 56 45 20 45
 74+  844B 41 52 4E 45
 74+  844F 44 FF
 75+  8451              string_endlevel_bonus1:
 76+  8451 09 0D 53 49      defb 9,13,'SINGLE BONUS',255
 76+  8455 4E 47 4C 45
 76+  8459 20 42 4F 4E
 76+  845D 55 53 FF
 77+  8460              string_endlevel_bonus2:
 78+  8460 09 0D 44 4F      defb 9,13,'DOUBLE BONUS',255
 78+  8464 55 42 4C 45
 78+  8468 20 42 4F 4E
 78+  846C 55 53 FF
 79+  846F              string_endlevel_bonus3:
 80+  846F 09 0D 54 52      defb 9,13,'TRIPLE BONUS',255
 80+  8473 49 50 4C 45
 80+  8477 20 42 4F 4E
 80+  847B 55 53 FF
 81+  847E              string_endlevel_points1:
 82+  847E 0A 0F 35 30      defb 10,15,'5000 POINTS',255
 82+  8482 30 30 20 50
 82+  8486 4F 49 4E 54
 82+  848A 53 FF
 83+  848C              string_endlevel_points2:
 84+  848C 09 0F 31 30      defb 9,15,'10000 POINTS',255
 84+  8490 30 30 30 20
 84+  8494 50 4F 49 4E
 84+  8498 54 53 FF
 85+  849B              string_endlevel_points3:
 86+  849B 09 0F 31 35      defb 9,15,'15000 POINTS',255
 86+  849F 30 30 30 20
 86+  84A3 50 4F 49 4E
 86+  84A7 54 53 FF
 87+  84AA              string_endlevel_anothergo:
 88+  84AA 08 12 48 41      defb 8,18,'HAVE ANOTHER GO',255
 88+  84AE 56 45 20 41
 88+  84B2 4E 4F 54 48
 88+  84B6 45 52 20 47
 88+  84BA 4F FF
 89+  84BC
 90+  84BC              string_zonk:
 91+  84BC 00 00 5A 4F      defb 0,0,'ZONK!',255
 91+  84C0 4E 4B 21 FF
 92+  84C4              ;
 93+  84C4              ; Prints specified string
 94+  84C4              ; Inputs:
 95+  84C4              ; de: pointer to string
 96+  84C4              ; bc: length of string
 97+  84C4              ;
 98+  84C4              ; Print String Data
 99+  84C4              ; First two bytes of string contain X and Y char position, then the string
100+  84C4              ; Individual strings are terminated with 0xFE
101+  84C4              ; End of data is terminated with 0xFF
102+  84C4              ; HL: Address of string
103+  84C4              ;
104+  84C4 5E           string_print:           LD E,(HL)                       ; Fetch the X coordinate
105+  84C5 23                                   INC HL                          ; Increase HL to the next memory location
106+  84C6 56                                   LD D,(HL)                       ; Fetch the Y coordinate
107+  84C7 23                                   INC HL                          ; Increase HL to the next memory location
108+  84C8 CD DB 84                             CALL string_getcharaddress           ; Calculate the screen address (in DE)
109+  84CB 7E           string_print_0:         LD A,(HL)                       ; Fetch the character to print
110+  84CC 23                                   INC HL                          ; Increase HL to the next character
111+  84CD FE FE                                CP 0xFE                         ; Compare with 0xFE
112+  84CF 28 F3                                JR Z,string_print               ; If it is equal to 0xFE then loop back to print next string
113+  84D1 D0                                   RET NC                          ; If it is greater or equal to (carry bit set) then
114+  84D2 E5                                   PUSH HL                         ; Push HL on stack (Print_Char will not preserve HL)
115+  84D3 CD EB 84                             CALL Print_Char                 ; Print the character
116+  84D6 E1                                   POP HL                          ; Retrieve HL back off the stack
117+  84D7 1C                                   INC E                           ; Go to the next screen address
118+  84D8 18 F1                                JR string_print_0               ; Loop back to print next character
119+  84DA C9                                   RET
120+  84DB
121+  84DB              ; Get screen address
122+  84DB              ; D = Y character position
123+  84DB              ; E = X character position
124+  84DB              ; Returns address in DE
125+  84DB              ;
126+  84DB 7A           string_getcharaddress:       LD A,D
127+  84DC E6 07                                AND %00000111
128+  84DE 1F                                   RRA
129+  84DF 1F                                   RRA
130+  84E0 1F                                   RRA
131+  84E1 1F                                   RRA
132+  84E2 B3                                   OR E
133+  84E3 5F                                   LD E,A
134+  84E4 7A                                   LD A,D
135+  84E5 E6 18                                AND %00011000
136+  84E7 F6 40                                OR %01000000
137+  84E9 57                                   LD D,A
138+  84EA C9                                   RET                             ; Returns screen address in DE
139+  84EB
140+  84EB              ; Print a single character out
141+  84EB              ; A:  Character to print
142+  84EB              ; DE: Screen address to print character at
143+  84EB              ;
144+  84EB 21 00 3C     Print_Char:             LD HL,0x3C00                    ; Address of character set table in ROM
145+  84EE 06 00                                LD B,0                          ; Set BC to A
146+  84F0 4F                                   LD C,A
147+  84F1 E6 FF                                AND 0xFF                        ; Clear the carry bit
148+  84F3 CB 11                                RL C                            ; Multiply BC by 8 (shift left 3 times)
149+  84F5 CB 10                                RL B
150+  84F7 CB 11                                RL C
151+  84F9 CB 10                                RL B
152+  84FB CB 11                                RL C
153+  84FD CB 10                                RL B
154+  84FF 09                                   ADD HL,BC                       ; Get the character address in HL
155+  8500 0E 08                                LD C,8                          ; Loop counter
156+  8502 D5                                   PUSH DE
157+  8503 7E           Print_Char_1:           LD A,(HL)                       ; Get the byte from the ROM into A
158+  8504 12                                   LD (DE),A                       ; Stick A onto the screen
159+  8505 14                                   INC D                           ; Goto next line on screen
160+  8506 2C                                   INC L                           ; Goto next byte of character
161+  8507 0D                                   DEC C                           ; Decrease the loop counter
162+  8508 20 F9                                JR NZ,Print_Char_1              ; Loop around whilst it is Not Zero (NZ)
163+  850A D1                                   POP DE
164+  850B C9                                   RET                             ; Return from the subroutine
# file closed: strings.asm
 23   850C                  include "screen\buffer.asm"
# file opened: screen/buffer.asm
  1+  850C              buffer_buffer:
  2+  850C 00 00 00...      defs 7424                   ; area reserved for screen
  3+  A20C
  4+  A20C              buffer_attr_buffer:
  5+  A20C 00 00 00...      defs 928                    ; attrs buffer area
  6+  A5AC
  7+  A5AC              buffer_tmp:
  8+  A5AC 00 00            defb 0,0                    ; temp area
  9+  A5AE
 10+  A5AE              ;
 11+  A5AE              ; This list stores lines to be updated by the buffer.
 12+  A5AE              ; This is done by half line. Lines are encded with.
 13+  A5AE              ; 00hlllll
 14+  A5AE              ; Where h is the half of the screen (0 or 1), lllll is the line number
 15+  A5AE              buffer_updatedlines:
 16+  A5AE FF FF FF...      defs 21,255
 17+  A5C3
 18+  A5C3              buffer_updateall:
 19+  A5C3 00               defb 0
 20+  A5C4
 21+  A5C4              ;
 22+  A5C4              ; Stores a line number in the update list
 23+  A5C4              ; Inputs:
 24+  A5C4              ; a - row number
 25+  A5C4              buffer_marklineforupdate:
 26+  A5C4 FE 15            cp 21
 27+  A5C6 D0               ret nc                          ; dont store lines that we shouldn't draw
 28+  A5C7 5F               ld e,a                          ; store in e
 29+  A5C8 ED 4B B1 AA      ld bc,(origcoords)              ; this should hold the coords of what was drawn
 30+  A5CC 79               ld a,c                          ; get the horiz coord
 31+  A5CD FE 0F            cp 15
 32+  A5CF CA E6 A5         jp z,buffer_marklineforupdate3  ; if 15 or 16, store both halves
 33+  A5D2 FE 10            cp 16                           ; if this is 15 or less, the first half of screen
 34+  A5D4 CA E6 A5         jp z,buffer_marklineforupdate3  ; if 15 or 16, store both halves
 35+  A5D7 DA E2 A5         jp c,buffer_marklineforupdate4  ; if first half, nothing to do
 36+  A5DA 78               ld a,b                          ; get the vertical
 37+  A5DB 3E 20            ld a,32                         ; set the 6th bit by adding 32
 38+  A5DD 83               add a,e
 39+  A5DE 5F               ld e,a                          ; store this value
 40+  A5DF C3 ED A5         jp buffer_marklineforupdate2
 41+  A5E2              buffer_marklineforupdate4:
 42+  A5E2 78               ld a,b
 43+  A5E3 C3 ED A5         jp buffer_marklineforupdate2    ; just get the vertical
 44+  A5E6              buffer_marklineforupdate3:          ; special case for 15,16 - need to render both halves, since might be between
 45+  A5E6 CD F1 A5         call buffer_storelineforupdate  ; call store update for e
 46+  A5E9 3E 20            ld a,32
 47+  A5EB 83               add a,e
 48+  A5EC 5F               ld e,a
 49+  A5ED              buffer_marklineforupdate2:
 50+  A5ED CD F1 A5         call buffer_storelineforupdate  ; call store update for e
 51+  A5F0 C9               ret
 52+  A5F1
 53+  A5F1
 54+  A5F1              ;
 55+  A5F1              ; Stores the calculated line and half if needed
 56+  A5F1              ; Inputs:
 57+  A5F1              ; e - half/row
 58+  A5F1              ;
 59+  A5F1              buffer_storelineforupdate:
 60+  A5F1 06 15            ld b,21
 61+  A5F3 21 AE A5         ld hl,buffer_updatedlines
 62+  A5F6              buffer_storelineforupdate0:
 63+  A5F6 7E               ld a,(hl)                       ; get the line stored in updated lines
 64+  A5F7 BB               cp e                            ; is this the same as the row number passed in?
 65+  A5F8 C8               ret z                           ; if so, don't need to do anything
 66+  A5F9 FE FF            cp 255                          ; is this 255, ie the end of the buffer
 67+  A5FB C2 00 A6         jp nz,buffer_storelineforupdate1 ; if not, move to next
 68+  A5FE 73               ld (hl),e
 69+  A5FF C9               ret
 70+  A600              buffer_storelineforupdate1:
 71+  A600 23               inc hl
 72+  A601 10 F3            djnz buffer_storelineforupdate0
 73+  A603 C9               ret
 74+  A604
 75+  A604              ;
 76+  A604              ; Zeroes the updated lines list
 77+  A604              ;
 78+  A604              buffer_clearlist:
 79+  A604 06 15            ld b,21
 80+  A606 21 AE A5         ld hl,buffer_updatedlines
 81+  A609              buffer_clearlist0:
 82+  A609 36 FF            ld (hl),255
 83+  A60B 23               inc hl
 84+  A60C 10 FB            djnz buffer_clearlist0
 85+  A60E C9               ret
 86+  A60F
 87+  A60F              ;
 88+  A60F              ; Which half are we displaying? 0 left 1 right
 89+  A60F              ;
 90+  A60F              buffer_bufferhalf:
 91+  A60F 00               defb 0
 92+  A610
 93+  A610              ;
 94+  A610              ; Copies the buffer to the screen. Use stack.
 95+  A610              ; Inputs:
 96+  A610              ; hl - half/line number to display - 0 is first half, 0 is first line
 97+  A610              ;
 98+  A610              buffer_bufferlinetoscreen:
 99+  A610 7C               ld a,h
100+  A611 32 0F A6         ld (buffer_bufferhalf),a        ; store the half
101+  A614 7D               ld a,l
102+  A615 4F               ld c,a                          ; store a
103+  A616 ED 5B 76 A7      ld de,(screen_offset)          ; load the screen offset, this is in rows, want it *256
104+  A61A 83               add a,e                       ; add the row number
105+  A61B 11 00 01         ld de,256
106+  A61E CD 3A 80         call utilities_multiply
107+  A621 54 5D            ld de,hl
108+  A623 21 0C 85         ld hl,buffer_buffer
109+  A626 19               add hl,de                   ; add the offset
110+  A627 79               ld a,c                      ; get original row back
111+  A628 ED 73 9B A6      ld (buffer_bufferlinetoscreen3+1),sp ; this is some self-modifying code; stores the stack pointer in an ld sp,nn instruction at the end
112+  A62C D9               exx
113+  A62D 0E 00            ld c,0                      ; zero horizontal
114+  A62F 47               ld b,a                      ; load the row number into vertical coord
115+  A630 04               inc b
116+  A631 04               inc b                       ; move forward 2 to allow for scores
117+  A632 CD 60 A8         call screen_getcelladdress  ; get the memory into de
118+  A635 21 10 00         ld hl,16                    ; offset by 16 chars to get to the centre, since populating stack from right
119+  A638 19               add hl,de
120+  A639 3A 0F A6         ld a,(buffer_bufferhalf)    ; get the half
121+  A63C FE 01            cp 1
122+  A63E CA 6B A6         jp z,buffer_bufferlinetoscreen4
123+  A641              buffer_bufferlinetoscreen0:     ; PROCESS THE LEFT HALF
124+  A641 D9               exx                         ; hl is now buffer
125+  A642 23               inc hl
126+  A643 23               inc hl                      ; move hl forward 2 to skip first two blocks
127+  A644 F9               ld sp,hl                    ; do first fourteen for left hand side, sp pointing at buffer
128+  A645 F1               pop af
129+  A646 C1               pop bc
130+  A647 D1               pop de
131+  A648 DD E1            pop ix
132+  A64A D9               exx                         ; hl is now screen
133+  A64B 08               ex af,af'
134+  A64C F1               pop af
135+  A64D C1               pop bc
136+  A64E D1               pop de
137+  A64F F9               ld sp,hl                    ; sp pointing at screen
138+  A650 D5               push de
139+  A651 C5               push bc
140+  A652 F5               push af
141+  A653 08               ex af,af'
142+  A654 D9               exx                         ; hl is now buffer
143+  A655 DD E5            push ix
144+  A657 D5               push de
145+  A658 C5               push bc
146+  A659 F5               push af
147+  A65A 11 1E 00         ld de,30                    ; add thirty to get to next line
148+  A65D 19               add hl,de
149+  A65E F9               ld sp,hl                    ; sp pointing at buffer
150+  A65F D9               exx                         ; hl is now screen
151+  A660 08               ex af,af'
152+  A661 24               inc h
153+  A662 7C               ld a,h
154+  A663 E6 07            and 0x07                    ; check if this is multiple of 8, if so, end of cell line
155+  A665 C2 41 A6         jp nz,buffer_bufferlinetoscreen0 ; next line in cell
156+  A668              buffer_bufferlinetoscreen1:
157+  A668 C3 9A A6         jp buffer_bufferlinetoscreen3
158+  A66B              buffer_bufferlinetoscreen4:     ; PROCESS THE RIGHT HALF
159+  A66B D9               exx                         ; hl is buffer
160+  A66C 11 10 00         ld de,16
161+  A66F 19               add hl,de                   ; move halfway across
162+  A670 D9               exx                         ; hl is screen
163+  A671 11 0E 00         ld de,14
164+  A674 19               add hl,de
165+  A675              buffer_bufferlinetoscreen2:
166+  A675 D9               exx                         ; hl is now buffer
167+  A676 F9               ld sp,hl                    ; do first fourteen for right hand side, sp pointing at buffer
168+  A677 F1               pop af
169+  A678 C1               pop bc
170+  A679 D1               pop de
171+  A67A DD E1            pop ix
172+  A67C D9               exx                         ; hl is now screen
173+  A67D 08               ex af,af'
174+  A67E F1               pop af
175+  A67F C1               pop bc
176+  A680 D1               pop de
177+  A681 F9               ld sp,hl                    ; sp pointing at screen
178+  A682 D5               push de
179+  A683 C5               push bc
180+  A684 F5               push af
181+  A685 08               ex af,af'
182+  A686 D9               exx                         ; hl is now buffer
183+  A687 DD E5            push ix
184+  A689 D5               push de
185+  A68A C5               push bc
186+  A68B F5               push af
187+  A68C 11 20 00         ld de,32                    ; add thirty two to get to next line
188+  A68F 19               add hl,de
189+  A690 F9               ld sp,hl                    ; sp pointing at buffer
190+  A691 D9               exx                         ; hl is now screen
191+  A692 08               ex af,af'
192+  A693 24               inc h
193+  A694 7C               ld a,h
194+  A695 E6 07            and 0x07                    ; check if this is multiple of 8, if so, end of cell line
195+  A697 C2 75 A6         jp nz,buffer_bufferlinetoscreen2 ; next line in cell
196+  A69A              buffer_bufferlinetoscreen3:
197+  A69A 31 00 00         ld sp,0
198+  A69D D9               exx
199+  A69E C9               ret
200+  A69F
201+  A69F              ;
202+  A69F              ; Copies the buffer to the screen for updated lines. Use stack.
203+  A69F              ; Inputs: none
204+  A69F              ;
205+  A69F              buffer_buffertoscreen:
206+  A69F 3A C3 A5         ld a,(buffer_updateall)      ; get the all update flag
207+  A6A2 FE 00            cp 0
208+  A6A4 CA B0 A6         jp z,buffer_buffertoscreen2  ; if not set, draw only updated
209+  A6A7 CD E0 A6         call buffer_allbuffertoscreen ; otherwise, draw whole screen
210+  A6AA 21 C3 A5         ld hl,buffer_updateall
211+  A6AD 36 00            ld (hl),0                    ; reset flag
212+  A6AF C9               ret
213+  A6B0              buffer_buffertoscreen2:
214+  A6B0 06 15            ld b,21
215+  A6B2 FD 21 AE A5      ld iy,buffer_updatedlines    ; the location of the updated lines
216+  A6B6              buffer_buffertoscreen0:
217+  A6B6 FD 7E 00         ld a,(iy)
218+  A6B9 FE FF            cp 255
219+  A6BB CA DF A6         jp z,buffer_buffertoscreen1                       ; if this is 255, then we're at the end of the updated list
220+  A6BE 6F               ld l,a
221+  A6BF 26 00            ld h,0
222+  A6C1 E6 20            and 32                      ; and with 32 to see if 6th bit is set
223+  A6C3 FE 20            cp 32                       ; if so, second half of screen
224+  A6C5 C2 D0 A6         jp nz,buffer_buffertoscreen3
225+  A6C8 26 01            ld h,1                      ; store half in h
226+  A6CA FD 7E 00         ld a,(iy)
227+  A6CD D6 20            sub 32                      ; remove 32
228+  A6CF 6F               ld l,a                      ; stor in line number
229+  A6D0              buffer_buffertoscreen3:
230+  A6D0 C5               push bc
231+  A6D1 FD E5            push iy
232+  A6D3 F3               di
233+  A6D4 CD 10 A6         call buffer_bufferlinetoscreen      ; hl has h=half (0 or 1), l=line
234+  A6D7 FB               ei
235+  A6D8 FD E1            pop iy
236+  A6DA C1               pop bc
237+  A6DB FD 23            inc iy
238+  A6DD 10 D7            djnz buffer_buffertoscreen0
239+  A6DF              buffer_buffertoscreen1:
240+  A6DF                  ;call buffer_buffertoattrsfast
241+  A6DF C9               ret
242+  A6E0
243+  A6E0              ;
244+  A6E0              ; Copies the buffer to the screen. Use stack.
245+  A6E0              ; Inputs: none
246+  A6E0              ;
247+  A6E0              buffer_allbuffertoscreen:
248+  A6E0 06 15            ld b,21
249+  A6E2 3E 00            ld a,0
250+  A6E4              buffer_allbuffertoscreen0:
251+  A6E4 C5               push bc
252+  A6E5 F5               push af
253+  A6E6 F3               di
254+  A6E7 26 00            ld h,0
255+  A6E9 6F               ld l,a
256+  A6EA CD 10 A6         call buffer_bufferlinetoscreen
257+  A6ED FB               ei
258+  A6EE F1               pop af
259+  A6EF F5               push af
260+  A6F0 F3               di
261+  A6F1 26 01            ld h,1
262+  A6F3 6F               ld l,a
263+  A6F4 CD 10 A6         call buffer_bufferlinetoscreen
264+  A6F7 FB               ei
265+  A6F8 F1               pop af
266+  A6F9 C1               pop bc
267+  A6FA 3C               inc a
268+  A6FB 10 E7            djnz buffer_allbuffertoscreen0
269+  A6FD F3               di
270+  A6FE CD 03 A7         call buffer_buffertoattrsfast
271+  A701 FB               ei
272+  A702 C9               ret
273+  A703
274+  A703              ;
275+  A703              ; Copies the attrs buffer to screen with the stack
276+  A703              ;
277+  A703              buffer_buffertoattrsfast:
278+  A703 ED 73 72 A7      ld (buffer_buffertoattrsfast1+1),sp ; this is some self-modifying code; stores the stack pointer in an ld sp,nn instruction at the end
279+  A707 3A 76 A7         ld a,(screen_offset)            ; get the screen offset in rows, so want *32
280+  A70A 11 20 00         ld de,32
281+  A70D CD 3A 80         call utilities_multiply
282+  A710 54 5D            ld de,hl
283+  A712 21 0C A2         ld hl,buffer_attr_buffer
284+  A715 19               add hl,de                       ; add the offset, start of attr buffer now in hl
285+  A716 D9               exx
286+  A717 21 50 58         ld hl,22528+80                  ; start of attr memory + 2 lines for score + 16 to start at right side
287+  A71A FD 21 AC A5      ld iy,buffer_tmp
288+  A71E FD 36 00 15      ld (iy),21              ; number of times to loop
289+  A722              buffer_buffertoattrsfast0:
290+  A722 D9               exx                         ; hl is now buffer
291+  A723 23               inc hl
292+  A724 23               inc hl                      ; move hl forward 2 to skip first two blocks
293+  A725 F9               ld sp,hl                    ; do first fourteen for left hand side, sp pointing at buffer
294+  A726 F1               pop af
295+  A727 C1               pop bc
296+  A728 D1               pop de
297+  A729 DD E1            pop ix
298+  A72B D9               exx                         ; hl is now screen
299+  A72C 08               ex af,af'
300+  A72D F1               pop af
301+  A72E C1               pop bc
302+  A72F D1               pop de
303+  A730 F9               ld sp,hl                    ; sp pointing at screen
304+  A731 D5               push de
305+  A732 C5               push bc
306+  A733 F5               push af
307+  A734 08               ex af,af'
308+  A735 D9               exx                         ; hl is now buffer
309+  A736 DD E5            push ix
310+  A738 D5               push de
311+  A739 C5               push bc
312+  A73A F5               push af
313+  A73B 1E 0E            ld e,14                    ; do another fourteen for right hand side
314+  A73D 16 00            ld d,0
315+  A73F 19               add hl,de
316+  A740 F9               ld sp,hl                    ; sp pointing at buffer
317+  A741 F1               pop af
318+  A742 C1               pop bc
319+  A743 D1               pop de
320+  A744 DD E1            pop ix
321+  A746 D9               exx                         ; hl is now screen
322+  A747 08               ex af,af'
323+  A748 1E 0E            ld e,14
324+  A74A 16 00            ld d,0
325+  A74C 19               add hl,de
326+  A74D F1               pop af
327+  A74E C1               pop bc
328+  A74F D1               pop de
329+  A750 F9               ld sp,hl                    ; sp pointing at screen
330+  A751 D5               push de
331+  A752 C5               push bc
332+  A753 F5               push af
333+  A754 08               ex af,af'
334+  A755 D9               exx                         ; hl is now buffer
335+  A756 DD E5            push ix
336+  A758 D5               push de
337+  A759 C5               push bc
338+  A75A F5               push af
339+  A75B 1E 10            ld e,16
340+  A75D 16 00            ld d,0
341+  A75F 19               add hl,de
342+  A760 D9               exx                         ; hl is now screen
343+  A761 11 12 00         ld de,18
344+  A764 19               add hl,de
345+  A765 FD 7E 00         ld a,(iy)
346+  A768 3D               dec a
347+  A769 FE 00            cp 0
348+  A76B FD 77 00         ld (iy),a
349+  A76E C2 22 A7         jp nz,buffer_buffertoattrsfast0 ; do another row
350+  A771              buffer_buffertoattrsfast1:
351+  A771 31 00 00         ld sp,0
352+  A774 D9               exx
353+  A775 C9               ret
# file closed: screen/buffer.asm
 24   A776                  include "screen\screen.asm"
# file opened: screen/screen.asm
  1+  A776              screen_offset:
  2+  A776 00               defb 0                      ; offset from top of screen in lines
  3+  A777
  4+  A777              screen_tmp:
  5+  A777 00 00            defb 0,0                      ; temporary memory
  6+  A779
  7+  A779              screen_setscorecolours:
  8+  A779 21 EF B3         ld hl,score_colours
  9+  A77C 11 00 58         ld de,22528                     ; attrs here
 10+  A77F 01 40 00         ld bc,64
 11+  A782 ED B0            ldir
 12+  A784 C9               ret
 13+  A785
 14+  A785              screen_sethighscorecolours:
 15+  A785 21 2F B4         ld hl,high_score_colours
 16+  A788 11 E0 5A         ld de,22528+736                 ; attrs here
 17+  A78B 01 20 00         ld bc,32
 18+  A78E ED B0            ldir
 19+  A790 C9               ret
 20+  A791
 21+  A791              ; Draw the screen
 22+  A791              ; Inputs:
 23+  A791              ; none
 24+  A791              ; Notes:
 25+  A791              ; The value held at screen_offset tells the screen how many rows to scroll down. Set to five to bottom out.
 26+  A791              screen_draw:
 27+  A791                  ;call clear_screen
 28+  A791 0E 00            ld c,0                      ; horiz
 29+  A793 06 00            ld b,0                      ; vert, 0 at top
 30+  A795 DD 21 B1 AE      ld ix,level01               ; point ix at level data
 31+  A799 FD 21 0C A2      ld iy,buffer_attr_buffer    ; point iy at attr data
 32+  A79D              screen_draw0:
 33+  A79D DD 7E 00         ld a,(ix)                   ; load the block number
 34+  A7A0 C5               push bc                     ; store bc, contains loop count
 35+  A7A1 CD 4E A9         call screen_getattr         ; get the memory location for this cell's attr into hl
 36+  A7A4 7E               ld a,(hl)                   ; get the attr value at the address
 37+  A7A5 FD 77 00         ld (iy),a                   ; load the attr into memory
 38+  A7A8 DD 7E 00         ld a,(ix)                   ; load the block number
 39+  A7AB CD 15 A9         call screen_getblock        ; get the block data into hl
 40+  A7AE CD F2 A8         call screen_showchar        ; show this character here
 41+  A7B1 C1               pop bc                      ; get the loop counter back
 42+  A7B2 DD 23            inc ix                      ; increment level location
 43+  A7B4 FD 23            inc iy                      ; increment attr location
 44+  A7B6 0C               inc c                       ; increment horiz
 45+  A7B7 79               ld a,c
 46+  A7B8 FE 20            cp 32                       ; check if horiz has reach edge of screen
 47+  A7BA C2 9D A7         jp nz,screen_draw0          ; if not, loop
 48+  A7BD 0E 00            ld c,0                      ; if so, reset horiz
 49+  A7BF 04               inc b                       ; increment vertical
 50+  A7C0 78               ld a,b
 51+  A7C1 FE 1D            cp 29                       ; check if at bottom
 52+  A7C3 C2 9D A7         jp nz,screen_draw0          ; if not, loop
 53+  A7C6 21 77 A7         ld hl, screen_tmp
 54+  A7C9 36 09            ld (hl),9                   ; load the block number into memory
 55+  A7CB DD 21 51 B2      ld ix,level01rocks          ; rock memory
 56+  A7CF CD 30 A8         call screen_initobjects     ; draw rocks
 57+  A7D2 21 77 A7         ld hl, screen_tmp
 58+  A7D5 36 0C            ld (hl),12                  ; load the block number into memory
 59+  A7D7 DD 21 51 B3      ld ix,level01missiles       ; missile memory
 60+  A7DB CD 30 A8         call screen_initobjects     ; draw missiles
 61+  A7DE 21 77 A7         ld hl, screen_tmp
 62+  A7E1 36 08            ld (hl),08                  ; load the block number into memory
 63+  A7E3 DD 21 CA B3      ld ix,level01diamonds       ; diamond memory
 64+  A7E7 CD 30 A8         call screen_initobjects     ; draw diamonds
 65+  A7EA 21 77 A7         ld hl, screen_tmp
 66+  A7ED 36 0E            ld (hl),14                  ; load the block number into memory
 67+  A7EF DD 21 DA B3      ld ix,level01gems           ; gems memory
 68+  A7F3 CD 30 A8         call screen_initobjects     ; draw gems
 69+  A7F6 CD FD A7         call screen_setuptext       ; draws text on the screen
 70+  A7F9 CD A5 C1         call scores_printscores     ; print the current scores
 71+  A7FC C9               ret
 72+  A7FD
 73+  A7FD              ;
 74+  A7FD              ; Sets up text on the screen
 75+  A7FD              ;
 76+  A7FD              screen_setuptext:
 77+  A7FD CD C7 C1         call scores_showtable
 78+  A800 CD 85 A7         call screen_sethighscorecolours
 79+  A803 21 ED 80         ld hl, string_score1
 80+  A806 CD C4 84         call string_print
 81+  A809 21 F6 80         ld hl, string_scorenumbers1
 82+  A80C CD C4 84         call string_print
 83+  A80F 21 FF 80         ld hl, string_company
 84+  A812 CD C4 84         call string_print
 85+  A815 21 14 81         ld hl, string_score2
 86+  A818 CD C4 84         call string_print
 87+  A81B 21 1D 81         ld hl, string_scorenumbers2
 88+  A81E CD C4 84         call string_print
 89+  A821 21 09 81         ld hl, string_credits
 90+  A824 CD C4 84         call string_print
 91+  A827 CD 79 A7         call screen_setscorecolours
 92+  A82A C9               ret
 93+  A82B
 94+  A82B              ;
 95+  A82B              ; Sets a line of colours
 96+  A82B              ; Inputs:
 97+  A82B              ; a - colour to set
 98+  A82B              ; b - number to set
 99+  A82B              ; de - start memory location
100+  A82B              ;
101+  A82B              screen_setcolours:
102+  A82B 12               ld (de),a
103+  A82C 13               inc de
104+  A82D 10 FC            djnz screen_setcolours
105+  A82F C9               ret
106+  A830
107+  A830              ;
108+  A830              ; Draw initial object positions
109+  A830              ; Inputs:
110+  A830              ; ix - memory location of objects
111+  A830              ; a - graphic
112+  A830              screen_initobjects:
113+  A830 DD 4E 00         ld c,(ix)                   ; get the horiz coord
114+  A833 79               ld a,c
115+  A834 FE FF            cp 255
116+  A836 CA 5F A8         jp z,screen_initobjects2
117+  A839 DD 23            inc ix                      ; move to next
118+  A83B DD 46 00         ld b,(ix)                   ; get the vert coord
119+  A83E DD 23            inc ix
120+  A840 CD 71 A8         call screen_getcellattradress ; get the memory address of b,c attr into de
121+  A843 D5               push de
122+  A844 3A 77 A7         ld a,(screen_tmp)                  ; get the block number back
123+  A847 CD 4E A9         call screen_getattr         ; get the memory location for this cell's attr into hl
124+  A84A D1               pop de
125+  A84B 7E               ld a,(hl)                   ; get the attr value at the address
126+  A84C 12               ld (de),a                   ; load the attr into memory
127+  A84D 3A 77 A7         ld a,(screen_tmp)                  ; get the block number back
128+  A850 CD 15 A9         call screen_getblock        ; get the block data into hl
129+  A853 CD F2 A8         call screen_showchar        ; show this character here
130+  A856
131+  A856              screen_initobjects1:
132+  A856 DD 23            inc ix                      ; move past state
133+  A858 DD 23            inc ix
134+  A85A DD 23            inc ix                      ; move past mem
135+  A85C C3 30 A8         jp screen_initobjects
136+  A85F              screen_initobjects2:
137+  A85F C9               ret
138+  A860
139+  A860
140+  A860              ;
141+  A860              ; Return character cell address offset of block at (b, c) ready for addition to screen  memory.
142+  A860              ; Inputs:
143+  A860              ; bc: coords
144+  A860              ; Outputs:
145+  A860              ; de: memory location
146+  A860              ;
147+  A860              screen_getcelladdress:
148+  A860 78               ld a,b      ; vertical position.
149+  A861 E6 18            and 24      ; which segment, 0, 1 or 2?
150+  A863 C6 40            add a,64    ; 64*256 = 16384, Spectrum's screen memory.
151+  A865 57               ld d,a      ; this is our high byte.
152+  A866 78               ld a,b      ; what was that vertical position again?
153+  A867 E6 07            and 7       ; which row within segment?
154+  A869 0F               rrca        ; multiply row by 32.
155+  A86A 0F               rrca
156+  A86B 0F               rrca
157+  A86C 5F               ld e,a      ; low byte.
158+  A86D 79               ld a,c      ; add on y coordinate.
159+  A86E 83               add a,e     ; mix with low byte.
160+  A86F 5F               ld e,a      ; address of screen position in de.
161+  A870 C9               ret
162+  A871
163+  A871              ;
164+  A871              ; Calculate buffer address of attribute for character at (b, c).
165+  A871              ; Inputs:
166+  A871              ; bc: coords
167+  A871              ; Outputs:
168+  A871              ; de: memory location
169+  A871              ;
170+  A871              screen_getcellattradress:
171+  A871 11 0C A2         ld de,buffer_attr_buffer ; memory is at base + horiz (c) + vert*32 (b)
172+  A874 69               ld l,c      ; x position.
173+  A875 26 00            ld h,0      ; 0 h
174+  A877 19               add hl,de
175+  A878 54 5D            ld de,hl    ; horiz done
176+  A87A 78               ld a,b      ; do vert
177+  A87B D5               push de
178+  A87C C5               push bc
179+  A87D 11 20 00         ld de,32
180+  A880 CD 3A 80         call utilities_multiply
181+  A883 C1               pop bc
182+  A884 D1               pop de
183+  A885 19               add hl,de
184+  A886 54 5D            ld de,hl    ; vert done
185+  A888 C9               ret
186+  A889
187+  A889              ;
188+  A889              ; Calculate buffer address offset of attribute for character at (b, c).
189+  A889              ; Inputs:
190+  A889              ; bc: coords
191+  A889              ; Outputs:
192+  A889              ; de: memory location
193+  A889              ;
194+  A889              screen_getcellattroffset:
195+  A889 69               ld l,c      ; x position.
196+  A88A 26 00            ld h,0      ; 0 h
197+  A88C 54 5D            ld de,hl    ; horiz done
198+  A88E 78               ld a,b      ; do vert
199+  A88F D5               push de
200+  A890 C5               push bc
201+  A891 11 20 00         ld de,32
202+  A894 CD 3A 80         call utilities_multiply
203+  A897 C1               pop bc
204+  A898 D1               pop de
205+  A899 19               add hl,de
206+  A89A 54 5D            ld de,hl    ; vert done
207+  A89C C9               ret
208+  A89D
209+  A89D              ;
210+  A89D              ; Calculate buffer address of attribute for character at (b, c).
211+  A89D              ; Inputs:
212+  A89D              ; bc: coords
213+  A89D              ; Outputs:
214+  A89D              ; de: memory location
215+  A89D              ;
216+  A89D              screen_getscreenattradress:
217+  A89D 11 00 58         ld de,22528 ; memory is at base + horiz (c) + vert*32 (b)
218+  A8A0 69               ld l,c      ; x position.
219+  A8A1 26 00            ld h,0      ; 0 h
220+  A8A3 19               add hl,de
221+  A8A4 54 5D            ld de,hl    ; horiz done
222+  A8A6 78               ld a,b      ; do vert
223+  A8A7 D5               push de
224+  A8A8 C5               push bc
225+  A8A9 11 20 00         ld de,32
226+  A8AC CD 3A 80         call utilities_multiply
227+  A8AF C1               pop bc
228+  A8B0 D1               pop de
229+  A8B1 19               add hl,de
230+  A8B2 54 5D            ld de,hl    ; vert done
231+  A8B4 C9               ret
232+  A8B5
233+  A8B5              ;
234+  A8B5              ; Gets the attr memory location for a screen coord
235+  A8B5              ; Will overwrite bc
236+  A8B5              ; Inputs:
237+  A8B5              ; bc - screen coords
238+  A8B5              ; Outputs:
239+  A8B5              ; de - memory location
240+  A8B5              ; bc - character coords
241+  A8B5              ;
242+  A8B5              screen_getattraddressfromscreencoords:
243+  A8B5 78               ld a,b                          ; get the player block coords of current block
244+  A8B6 E6 F8            and 248                         ; find closest multiple of eight
245+  A8B8 0F               rrca
246+  A8B9 0F               rrca
247+  A8BA 0F               rrca                ; divide by 8
248+  A8BB 47               ld b,a
249+  A8BC 79               ld a,c
250+  A8BD 48               ld c,b                         ; swap b and c
251+  A8BE E6 F8            and 248
252+  A8C0 0F               rrca
253+  A8C1 0F               rrca
254+  A8C2 0F               rrca                ; divide by 8
255+  A8C3 47               ld b,a
256+  A8C4 CD 71 A8         call screen_getcellattradress   ; work out memory location of current block attributes, memory in de
257+  A8C7 C9               ret
258+  A8C8
259+  A8C8
260+  A8C8              ; Gets the nearest cell coords for a screen coord
261+  A8C8              ; Will overwrite bc
262+  A8C8              ; Inputs:
263+  A8C8              ; bc - screen coords
264+  A8C8              ; Outputs:
265+  A8C8              ; bc - character coords
266+  A8C8              ;
267+  A8C8              screen_getcharcoordsfromscreencoords:
268+  A8C8 78               ld a,b                          ; get the player block coords of current block
269+  A8C9 E6 F8            and 248                         ; find closest multiple of eight
270+  A8CB 0F               rrca
271+  A8CC 0F               rrca
272+  A8CD 0F               rrca                ; divide by 8
273+  A8CE 47               ld b,a
274+  A8CF 79               ld a,c
275+  A8D0 48               ld c,b                         ; swap b and c
276+  A8D1 E6 F8            and 248
277+  A8D3 0F               rrca
278+  A8D4 0F               rrca
279+  A8D5 0F               rrca                ; divide by 8
280+  A8D6 47               ld b,a
281+  A8D7 C9               ret
282+  A8D8
283+  A8D8              ; Gets the screen coords for a cell coord
284+  A8D8              ; Will overwrite bc
285+  A8D8              ; Inputs:
286+  A8D8              ; bc - char coords
287+  A8D8              ; Outputs:
288+  A8D8              ; bc - screen coords
289+  A8D8              ;
290+  A8D8              screen_getscreencoordsfromcharcoords:
291+  A8D8 78               ld a,b                          ; get the player block coords of current block
292+  A8D9 07               rlca
293+  A8DA 07               rlca
294+  A8DB 07               rlca                ; multiply by 8
295+  A8DC 47               ld b,a
296+  A8DD 79               ld a,c
297+  A8DE 48               ld c,b                         ; swap b and c
298+  A8DF 07               rlca
299+  A8E0 07               rlca
300+  A8E1 07               rlca                ; divide by 8
301+  A8E2 47               ld b,a
302+  A8E3 C9               ret
303+  A8E4
304+  A8E4              ;
305+  A8E4              ; Get buffer address for a character at b,c - b vert
306+  A8E4              ; Buffer memory is stored as sequential block
307+  A8E4              ; Char at 0,0 is stored 0,32,64...; 0,1 is stored at 1,33,65
308+  A8E4              ; Inputs:
309+  A8E4              ; bc - coords
310+  A8E4              ; Outputs:
311+  A8E4              ; de - memory location of first byte
312+  A8E4              screen_getbufferaddress:
313+  A8E4 21 0C 85         ld hl, buffer_buffer    ; first get screen buffer start
314+  A8E7 50               ld d,b                  ; then work out vertical offset
315+  A8E8 1E 00            ld e,0                  ; mult by 256, low byte becomes high byte, de now holds result
316+  A8EA 19               add hl,de               ; add to base
317+  A8EB 59               ld e,c                  ; then add horizontal offset (c)
318+  A8EC 16 00            ld d,0
319+  A8EE 19               add hl,de               ; add to base
320+  A8EF 54 5D            ld de,hl
321+  A8F1 C9               ret
322+  A8F2
323+  A8F2              ;
324+  A8F2              ; Display character hl at (b, c) to buffer.
325+  A8F2              ; Stored sequentially
326+  A8F2              ; Inputs:
327+  A8F2              ; hl: block address
328+  A8F2              ; bc: coords
329+  A8F2              ;
330+  A8F2              screen_showchar:
331+  A8F2 ED 43 B1 AA      ld (origcoords),bc   ; store char coords
332+  A8F6 3E 00            ld a,0
333+  A8F8 E5               push hl
334+  A8F9 CD E4 A8         call screen_getbufferaddress ; get the current screen buffer pointer
335+  A8FC E1               pop hl
336+  A8FD 06 08            ld b,8              ; number of pixels high.
337+  A8FF              screen_showchar0:
338+  A8FF 7E               ld a,(hl)           ; source graphic.
339+  A900 12               ld (de),a           ; transfer to screen.
340+  A901 23               inc hl              ; next piece of data.
341+  A902 E5               push hl             ; store hl
342+  A903 62 6B            ld hl,de            ; put de in hl
343+  A905 1E 20            ld e,32            ; inc memory by 32, so load 32 into de
344+  A907 16 00            ld d,0
345+  A909 19               add hl,de              ; add de to hl
346+  A90A 54 5D            ld de,hl            ; load back to de
347+  A90C E1               pop hl              ; restore hl
348+  A90D
349+  A90D 10 F0            djnz screen_showchar0 ; repeat
350+  A90F 2E 01            ld l,1
351+  A911 CD 62 AA         call sprites_marklinesforupdatechar
352+  A914
353+  A914 C9               ret
354+  A915
355+  A915
356+  A915              ;
357+  A915              ; Get cell graphic.
358+  A915              ; Inputs:
359+  A915              ; a: block
360+  A915              ; Outputs:
361+  A915              ; hl: memory
362+  A915              ;
363+  A915              screen_getblock:
364+  A915 07               rlca                        ; multiply block number by eight.
365+  A916 07               rlca
366+  A917 07               rlca
367+  A918 5F               ld e,a                      ; displacement to graphic address.
368+  A919 16 00            ld d,0                      ; no high byte.
369+  A91B 21 4F B4         ld hl,sprites               ; address of character blocks.
370+  A91E 19               add hl,de                   ; point to block.
371+  A91F C9               ret
372+  A920
373+  A920              ;
374+  A920              ; Set a the attr of a coord
375+  A920              ; Inputs:
376+  A920              ; bc - char coords
377+  A920              ; a - attr
378+  A920              ;
379+  A920              screen_setattr:
380+  A920 DD E5            push ix
381+  A922 C5               push bc
382+  A923 08               ex af, af'
383+  A924 CD 89 A8         call screen_getcellattroffset   ; get offset into de
384+  A927 21 0C A2         ld hl,buffer_attr_buffer
385+  A92A 19               add hl,de                       ; get the memory location
386+  A92B 08               ex af, af'                      ; get attr back
387+  A92C 77               ld (hl),a                         ; set the attr
388+  A92D 08               ex af, af'                      ; get attr back
389+  A92E ED 5B 76 A7      ld de,(screen_offset)           ; get the offset
390+  A932 78               ld a,b                          ; get the vertical
391+  A933 93               sub e                           ; subtract the offset
392+  A934 DA 4A A9         jp c,screen_setattr0            ; if less than zero, don't update the attr on screen
393+  A937 FE 15            cp 21
394+  A939 D2 4A A9         jp nc,screen_setattr0           ; if more than 21, don't update the attr on screen
395+  A93C 47               ld b,a                          ; put the coord back in b
396+  A93D CD 9D A8         call screen_getscreenattradress ; screen attr address in de
397+  A940 21 40 00         ld hl,64                        ; attr memory + two rows for scores
398+  A943 19               add hl,de
399+  A944 08               ex af, af'                      ; get attr back
400+  A945 77               ld (hl),a
401+  A946 C1               pop bc
402+  A947 DD E1            pop ix
403+  A949 C9               ret
404+  A94A              screen_setattr0:
405+  A94A C1               pop bc
406+  A94B DD E1            pop ix
407+  A94D C9               ret
408+  A94E
409+  A94E              ;
410+  A94E              ; Get cell attribute.
411+  A94E              ; Inputs:
412+  A94E              ; a: block
413+  A94E              ; Outputs:
414+  A94E              ; hl: memory
415+  A94E              ;
416+  A94E              screen_getattr:
417+  A94E 5F               ld e,a                      ; displacement to attribute address.
418+  A94F 16 00            ld d,0                      ; no high byte.
419+  A951 21 27 B5         ld hl,sprite_attrs          ; address of block attributes.
420+  A954 19               add hl,de                   ; point to attribute.
421+  A955 C9               ret
422+  A956
423+  A956              ;
424+  A956              ; Checks whether a character block has anything in it
425+  A956              ; Inputs:
426+  A956              ; bc - char coords
427+  A956              ; Outputs:
428+  A956              ; a - 1, empty
429+  A956              screen_ischarempty:
430+  A956 CD E4 A8         call screen_getbufferaddress ; get the current screen buffer pointer
431+  A959 06 08            ld b,8                      ; check 8 rows
432+  A95B              screen_ischarempty2:
433+  A95B 1A               ld a,(de)                   ; check line
434+  A95C FE 00            cp 0
435+  A95E C2 6C A9         jp nz,screen_ischarempty1   ; if not zero, jump out with false
436+  A961 21 20 00         ld hl,32
437+  A964 19               add hl,de
438+  A965 54 5D            ld de,hl                    ; move to next row
439+  A967 10 F2            djnz screen_ischarempty2
440+  A969              screen_ischarempty0:
441+  A969 3E 01            ld a,1
442+  A96B C9               ret
443+  A96C              screen_ischarempty1:
444+  A96C 3E 00            ld a,0
445+  A96E C9               ret
446+  A96F
447+  A96F              ;
448+  A96F              ; Copies a block from one place to another directly underneath, leaves the original empty
449+  A96F              ; Inputs:
450+  A96F              ; bc - coords of block to copy from
451+  A96F              screen_copyblockdown
452+  A96F CD E4 A8         call screen_getbufferaddress ; get the current screen buffer pointer for source
453+  A972 06 08            ld b,8                      ; copy 8 rows
454+  A974              screen_copyblock0:
455+  A974 1A               ld a,(de)                    ; get what we're copying
456+  A975 08               ex af,af'
457+  A976 3E 00            ld a,0
458+  A978 12               ld (de),a                    ; replace with empty
459+  A979 08               ex af,af'
460+  A97A 14               inc d                        ; add 256 to get to the next row
461+  A97B 12               ld (de),a                    ; copy to the next row
462+  A97C 15               dec d
463+  A97D 21 20 00         ld hl,32
464+  A980 19               add hl,de                       ; return back to source, next row down
465+  A981 54 5D            ld de,hl
466+  A983 10 EF            djnz screen_copyblock0
467+  A985 C9               ret
468+  A986
469+  A986              ;
470+  A986              ; Returns the first byte of a character. Useful for figuring out what's there
471+  A986              ; Inputs:
472+  A986              ; bc - coords
473+  A986              ; Outputs:
474+  A986              ; a - first byte
475+  A986              ;
476+  A986              screen_getcharfirstbyte:
477+  A986 CD E4 A8         call screen_getbufferaddress ; get the current screen buffer pointer for source
478+  A989 1A               ld a,(de)
479+  A98A C9               ret
480+  A98B
# file closed: screen/screen.asm
 25   A98B                  include "screen\sprites.asm"
# file opened: screen/sprites.asm
  1+  A98B              ;
  2+  A98B              ; This is the sprite routine and expects coordinates in (c ,b) form,
  3+  A98B              ; where c is the vertical coord from the top of the screen (0-176), and
  4+  A98B              ; b is the horizontal coord from the left of the screen (0 to 240).
  5+  A98B              ; Sprite data is stored as you'd expect in its unshifted form as this
  6+  A98B              ; routine takes care of all the shifting itself. This means that sprite
  7+  A98B              ; handling isn't particularly fast but the graphics only take 1/8th of the
  8+  A98B              ; space they would require in pre-shifted form.
  9+  A98B              ; Inputs:
 10+  A98B              ; hl - sprite data
 11+  A98B              ; bc - screen coords
 12+  A98B              ;
 13+  A98B              sprites_drawsprite7:
 14+  A98B EE 07            xor 7               ; complement last 3 bits.
 15+  A98D 3C               inc a               ; add one for luck!
 16+  A98E              sprites_drawsprite3:
 17+  A98E CB 11            rl c                ; ...into middle byte...
 18+  A990 CB 12            rl d                ; ...and finally into left character cell.
 19+  A992 3D               dec a               ; count shifts we've done.
 20+  A993 20 F9            jr nz,sprites_drawsprite3 ; return until all shifts complete.
 21+  A995                                      ; Line of sprite image is now in e + c + d, we need it in form c + d + e.
 22+  A995 79               ld a,c              ; left edge of image is currently in e.
 23+  A996 4A               ld c,d              ; put right edge there instead.
 24+  A997 57               ld d,a              ; and the left edge back into c.
 25+  A998 18 29            jr sprites_drawsprite0   ; we've done the switch so transfer to screen.
 26+  A99A              sprites_drawsprite:
 27+  A99A ED 43 B1 AA      ld (origcoords),bc  ; store coords
 28+  A99E ED 43 B3 AA      ld (dispx),bc       ; store coords in dispx for now.
 29+  A9A2 E5               push hl
 30+  A9A3 CD 8F AA         call sprites_scadd  ; calculate screen address.
 31+  A9A6 E1               pop hl
 32+  A9A7 3E 08            ld a,8              ; height of sprite in pixels.
 33+  A9A9              sprites_drawsprite1:
 34+  A9A9 08               ex af,af'           ; store loop counter.
 35+  A9AA D5               push de             ; store screen address.
 36+  A9AB 4E               ld c,(hl)           ; first sprite graphic.
 37+  A9AC 23               inc hl              ; increment poiinter to sprite data.
 38+  A9AD 22 B5 AA         ld (sprtmp),hl      ; store it for later.
 39+  A9B0 16 00            ld d,0              ; blank right byte for now.
 40+  A9B2 78               ld a,b              ; b holds y position.
 41+  A9B3 E6 07            and 7               ; how are we straddling character cells?
 42+  A9B5 28 0C            jr z,sprites_drawsprite0 ; we're not straddling them, don't bother shifting.
 43+  A9B7 FE 05            cp 5                ; 5 or more right shifts needed?
 44+  A9B9 30 D0            jr nc,sprites_drawsprite7 ; yes, shift from left as it's quicker.
 45+  A9BB A7               and a               ; oops, carry flag is set so clear it.
 46+  A9BC              sprites_drawsprite2:
 47+  A9BC CB 19            rr c                ; rotate left byte right...
 48+  A9BE CB 1A            rr d                ; ...into right byte.
 49+  A9C0 3D               dec a               ; one less shift to do.
 50+  A9C1 20 F9            jr nz,sprites_drawsprite2 ; return until all shifts complete.
 51+  A9C3              sprites_drawsprite0:
 52+  A9C3 E1               pop hl              ; pop screen address from stack.
 53+  A9C4 7E               ld a,(hl)           ; what's there already.
 54+  A9C5 A9               xor c               ; merge in image data.
 55+  A9C6 77               ld (hl),a           ; place onto screen.
 56+  A9C7 23               inc hl
 57+  A9C8 7E               ld a,(hl)           ; what's already there.
 58+  A9C9 AA               xor d               ; right edge of sprite image data.
 59+  A9CA 77               ld (hl),a           ; plonk it on screen.
 60+  A9CB 3A B3 AA         ld a,(dispx)        ; vertical coordinate.
 61+  A9CE 3C               inc a               ; next line down.
 62+  A9CF 32 B3 AA         ld (dispx),a        ; store new position.
 63+  A9D2 2B               dec hl
 64+  A9D3 11 20 00         ld de,32            ; add 32 to get to the next row
 65+  A9D6 19               add hl,de           ; add 32
 66+  A9D7              sprites_drawsprite6:
 67+  A9D7 EB               ex de,hl            ; screen address in de.
 68+  A9D8 2A B5 AA         ld hl,(sprtmp)      ; restore graphic address.
 69+  A9DB 08               ex af,af'           ; restore loop counter.
 70+  A9DC 3D               dec a               ; decrement it.
 71+  A9DD C2 A9 A9         jp nz,sprites_drawsprite1 ; not reached bottom of sprite yet to repeat.
 72+  A9E0 2E 02            ld l,2
 73+  A9E2 CD 51 AA         call sprites_marklinesforupdatescreen
 74+  A9E5 C9               ret                 ; job done.
 75+  A9E6
 76+  A9E6              ; Inputs:
 77+  A9E6              ; hl - sprite data
 78+  A9E6              ; bc - screen coords
 79+  A9E6              ;
 80+  A9E6              sprites_draw2by2sprite7
 81+  A9E6 EE 07            xor 7               ; complement last 3 bits.
 82+  A9E8 3C               inc a               ; add one for luck!
 83+  A9E9              sprites_draw2by2sprite3
 84+  A9E9 CB 12            rl d                ; rotate left...
 85+  A9EB CB 11            rl c                ; ...into middle byte...
 86+  A9ED CB 13            rl e                ; ...and finally into left character cell.
 87+  A9EF 3D               dec a               ; count shifts we've done.
 88+  A9F0 20 F7            jr nz,sprites_draw2by2sprite3 ; return until all shifts complete.
 89+  A9F2                                      ; Line of sprite image is now in e + c + d, we need it in form c + d + e.
 90+  A9F2 7B               ld a,e              ; left edge of image is currently in e.
 91+  A9F3 5A               ld e,d              ; put right edge there instead.
 92+  A9F4 51               ld d,c              ; middle bit goes in d.
 93+  A9F5 4F               ld c,a              ; and the left edge back into c.
 94+  A9F6 18 31            jr sprites_draw2by2sprite0 ; we've done the switch so transfer to screen.
 95+  A9F8              sprites_draw2by2sprite
 96+  A9F8 ED 43 B1 AA      ld (origcoords),bc  ; store coords
 97+  A9FC ED 43 B3 AA      ld (dispx),bc       ; store coords in dispx for now.
 98+  AA00 79               ld a,c
 99+  AA01 32 B7 AA         ld (sprtmp0),a         ; store vertical.
100+  AA04 E5               push hl
101+  AA05 CD 8F AA         call sprites_scadd          ; calculate screen address.
102+  AA08 E1               pop hl
103+  AA09 3E 10            ld a,16             ; height of sprite in pixels.
104+  AA0B              sprites_draw2by2sprite1
105+  AA0B 08               ex af,af'           ; store loop counter.
106+  AA0C D5               push de             ; store screen address.
107+  AA0D 4E               ld c,(hl)           ; first sprite graphic.
108+  AA0E 23               inc hl              ; increment poiinter to sprite data.
109+  AA0F 56               ld d,(hl)           ; next bit of sprite image.
110+  AA10 23               inc hl              ; point to next row of sprite data.
111+  AA11 22 B5 AA         ld (sprtmp),hl        ; store in tmp0 for later.
112+  AA14 1E 00            ld e,0              ; blank right byte for now.
113+  AA16 78               ld a,b              ; b holds y position.
114+  AA17 E6 07            and 7               ; how are we straddling character cells?
115+  AA19 28 0E            jr z,sprites_draw2by2sprite0 ; we're not straddling them, don't bother shifting.
116+  AA1B FE 05            cp 5                ; 5 or more right shifts needed?
117+  AA1D 30 C7            jr nc,sprites_draw2by2sprite7 ; yes, shift from left as it's quicker.
118+  AA1F A7               and a               ; oops, carry flag is set so clear it.
119+  AA20              sprites_draw2by2sprite2
120+  AA20 CB 19            rr c                ; rotate left byte right...
121+  AA22 CB 1A            rr d                ; ...through middle byte...
122+  AA24 CB 1B            rr e                ; ...into right byte.
123+  AA26 3D               dec a               ; one less shift to do.
124+  AA27 20 F7            jr nz,sprites_draw2by2sprite2 ; return until all shifts complete.
125+  AA29              sprites_draw2by2sprite0
126+  AA29 E1               pop hl              ; pop screen address from stack.
127+  AA2A 7E               ld a,(hl)           ; what's there already.
128+  AA2B A9               xor c               ; merge in image data.
129+  AA2C 77               ld (hl),a           ; place onto screen.
130+  AA2D 23               inc hl               ; next character cell to right please.
131+  AA2E 7E               ld a,(hl)           ; what's there already.
132+  AA2F AA               xor d               ; merge with middle bit of image.
133+  AA30 77               ld (hl),a           ; put back onto screen.
134+  AA31 23               inc hl              ; next bit of screen area.
135+  AA32 7E               ld a,(hl)           ; what's already there.
136+  AA33 AB               xor e               ; right edge of sprite image data.
137+  AA34 77               ld (hl),a           ; plonk it on screen.
138+  AA35 3A B7 AA         ld a,(sprtmp0)         ; temporary vertical coordinate.
139+  AA38 3C               inc a               ; next line down.
140+  AA39 32 B7 AA         ld (sprtmp0),a         ; store new position.
141+  AA3C 2B               dec hl
142+  AA3D 2B               dec hl
143+  AA3E 11 20 00         ld de,32            ; add 32 to get to the next row
144+  AA41 19               add hl,de           ; add 32
145+  AA42              sprites_draw2by2sprite6
146+  AA42 EB               ex de,hl            ; screen address in de.
147+  AA43 2A B5 AA         ld hl,(sprtmp)        ; restore graphic address.
148+  AA46 08               ex af,af'           ; restore loop counter.
149+  AA47 3D               dec a               ; decrement it.
150+  AA48 C2 0B AA         jp nz,sprites_draw2by2sprite1 ; not reached bottom of sprite yet to repeat.
151+  AA4B 2E 03            ld l,3
152+  AA4D CD 51 AA         call sprites_marklinesforupdatescreen
153+  AA50 C9               ret                 ; job done.
154+  AA51
155+  AA51              ;
156+  AA51              ; Marks lines for update with screen coords
157+  AA51              ; Inputs:
158+  AA51              ; l - number to update
159+  AA51              ;
160+  AA51              sprites_marklinesforupdatescreen:
161+  AA51 F5               push af
162+  AA52 ED 4B B1 AA      ld bc,(origcoords)
163+  AA56 CD C8 A8         call screen_getcharcoordsfromscreencoords
164+  AA59 ED 43 B1 AA      ld (origcoords),bc
165+  AA5D CD 6C AA         call sprites_marklinesforupdate
166+  AA60 F1               pop af
167+  AA61 C9               ret
168+  AA62
169+  AA62              ;
170+  AA62              ; Marks lines for update with char coords
171+  AA62              ; Inputs:
172+  AA62              ; l - number to update
173+  AA62              ;
174+  AA62              sprites_marklinesforupdatechar:
175+  AA62 F5               push af
176+  AA63 ED 43 B1 AA      ld (origcoords),bc
177+  AA67 CD 6C AA         call sprites_marklinesforupdate
178+  AA6A F1               pop af
179+  AA6B C9               ret
180+  AA6C
181+  AA6C              ;
182+  AA6C              ; Marks lines for update
183+  AA6C              ; Inputs:
184+  AA6C              ; l - number to update
185+  AA6C              ;
186+  AA6C              sprites_marklinesforupdate:
187+  AA6C ED 4B B1 AA      ld bc,(origcoords)
188+  AA70 ED 5B 76 A7      ld de,(screen_offset)          ; load the screen offset, this is in rows
189+  AA74 78               ld a,b
190+  AA75 93               sub e
191+  AA76 47               ld b,a
192+  AA77 7D               ld a,l                          ; get loop counter
193+  AA78              sprites_marklinesforupdate0:
194+  AA78 C5               push bc
195+  AA79 08               ex af,af'                     ; store loop counter
196+  AA7A 78               ld a,b
197+  AA7B CD C4 A5         call buffer_marklineforupdate ; mark this line for update
198+  AA7E ED 4B B1 AA      ld bc,(origcoords)            ; move the coords for the next line
199+  AA82 04               inc b
200+  AA83 ED 43 B1 AA      ld (origcoords),bc
201+  AA87 C1               pop bc
202+  AA88 04               inc b
203+  AA89 08               ex af,af'                     ; restore loop counter
204+  AA8A 3D               dec a
205+  AA8B C2 78 AA         jp nz,sprites_marklinesforupdate0
206+  AA8E C9               ret
207+  AA8F
208+  AA8F              ;
209+  AA8F              ; This routine returns a buffer address for (c, b) in de (c vert).
210+  AA8F              ; For example: 0,0 will be at memory offset 0
211+  AA8F              ; 1,0 (1 down) will be at memory offset 1
212+  AA8F              ; 0,7 will be at memory offset 0
213+  AA8F              ; 9,1 will be at memory offset 8+1
214+  AA8F              ; 8,0 will be at memory offset 256
215+  AA8F              ; 9,0 will be at memory offset 257
216+  AA8F              ; Outputs:
217+  AA8F              ; de - coords
218+  AA8F              ;
219+  AA8F              sprites_scadd:
220+  AA8F 79               ld a,c               ; calculate vertical offset
221+  AA90 E6 F8            and 248             ;  to get nearest multiple of 8
222+  AA92 0F               rrca
223+  AA93 0F               rrca
224+  AA94 0F               rrca                ; divide by 8
225+  AA95 67               ld h,a
226+  AA96 78               ld a,b               ; calculate horizontal offset
227+  AA97 E6 F8            and 248             ;  to get nearest multiple of 8
228+  AA99 0F               rrca
229+  AA9A 0F               rrca
230+  AA9B 0F               rrca                ; divide by 8
231+  AA9C 6F               ld l,a
232+  AA9D C5               push bc             ; store the screen coords
233+  AA9E 44 4D            ld bc,hl            ; load bc with the character coords
234+  AAA0 CD E4 A8         call screen_getbufferaddress
235+  AAA3 C1               pop bc              ; get back screen coords, de is now memory of character
236+  AAA4 79               ld a,c              ; now add the vertical within the cell
237+  AAA5 E6 07            and 7
238+  AAA7 0F               rrca                ; multiply by 32.
239+  AAA8 0F               rrca
240+  AAA9 0F               rrca
241+  AAAA 6F               ld l,a
242+  AAAB 26 00            ld h,0
243+  AAAD 19               add hl,de
244+  AAAE 54 5D            ld de,hl
245+  AAB0 C9               ret
246+  AAB1
247+  AAB1 00 00        origcoords   defb 0,0           ; general-use coordinates.
248+  AAB3
249+  AAB3 00           dispx   defb 0           ; general-use coordinates.
250+  AAB4 00           dispy   defb 0
251+  AAB5 00 00        sprtmp  defb 0,0           ; sprite temporary address.
252+  AAB7 00 00        sprtmp0  defb 0,0           ; sprite temporary address.
253+  AAB9
# file closed: screen/sprites.asm
 26   AAB9                  include "screen\titlescreen.asm"
# file opened: screen/titlescreen.asm
  1+  AAB9              ;
  2+  AAB9              ; Draws the title screen
  3+  AAB9              ;
  4+  AAB9              titlescreen_show:
  5+  AAB9 CD 31 AB         call titlescreen_init
  6+  AABC CD DA AA         call titlescreen_drawtitle
  7+  AABF 3E FA            ld a,250                              ; wait for 200 frames
  8+  AAC1 CD 52 80         call utilities_waitforkey_forframes   ; wait for keypress
  9+  AAC4 7B               ld a,e
 10+  AAC5 FE 01            cp 1                                  ; was anything pressed?
 11+  AAC7 C8               ret z                                 ; end titlescreen if so
 12+  AAC8
 13+  AAC8 CD 44 AB         call titlescreen_alt_init             ; otherwise, draw alt screen
 14+  AACB CD F6 AA         call titlescreen_alt_drawtitle
 15+  AACE 3E FA            ld a,250                              ; wait for 200 frames
 16+  AAD0 CD 52 80         call utilities_waitforkey_forframes   ; wait for keypress
 17+  AAD3 7B               ld a,e
 18+  AAD4 FE 01            cp 1                                  ; was anything pressed?
 19+  AAD6 C2 B9 AA         jp nz,titlescreen_show                ; start again if not
 20+  AAD9 C9               ret
 21+  AADA
 22+  AADA              ;
 23+  AADA              ; Draws the iconic logo
 24+  AADA              ;
 25+  AADA              titlescreen_drawtitle:
 26+  AADA 06 67            ld b,103              ; number of points
 27+  AADC DD 21 51 AB      ld ix,titlescreen_logo_data
 28+  AAE0              titlescreen_drawtitle0:
 29+  AAE0 C5               push bc
 30+  AAE1 DD 4E 00         ld c,(ix)                   ; got horiz
 31+  AAE4 DD 23            inc ix
 32+  AAE6 DD 46 00         ld b,(ix)                   ; got vert
 33+  AAE9 DD 23            inc ix
 34+  AAEB CD 9D A8         call screen_getscreenattradress ; memory in de
 35+  AAEE 13               inc de                      ; slide one to the right, since I'm too lazy to change the data
 36+  AAEF 3E 13            ld a,19
 37+  AAF1 12               ld (de),a
 38+  AAF2 C1               pop bc
 39+  AAF3 10 EB            djnz titlescreen_drawtitle0 ; loop if we're not at the end
 40+  AAF5 C9               ret
 41+  AAF6
 42+  AAF6              ;
 43+  AAF6              ; Draws the alternate title screen
 44+  AAF6              ;
 45+  AAF6              titlescreen_alt_drawtitle:
 46+  AAF6 21 3B 81         ld hl,string_alttitlescreen_1
 47+  AAF9 CD C4 84         call string_print
 48+  AAFC 21 47 81         ld hl,string_alttitlescreen_2
 49+  AAFF CD C4 84         call string_print
 50+  AB02 21 42 82         ld hl,string_alttitlescreen_3
 51+  AB05 CD C4 84         call string_print
 52+  AB08 06 20            ld b,32
 53+  AB0A 3E 43            ld a,67
 54+  AB0C 11 00 58         ld de,22528                         ; top row attrs here
 55+  AB0F CD 2B A8         call screen_setcolours
 56+  AB12 06 20            ld b,32
 57+  AB14 3E 46            ld a,70
 58+  AB16 11 A0 59         ld de,22528+416                     ; 13th row attrs here
 59+  AB19 CD 2B A8         call screen_setcolours
 60+  AB1C 06 20            ld b,32
 61+  AB1E 3E 43            ld a,67
 62+  AB20 11 20 5A         ld de,22528+544                         ; 17th row attrs here
 63+  AB23 CD 2B A8         call screen_setcolours
 64+  AB26 06 20            ld b,32
 65+  AB28 3E 42            ld a,66
 66+  AB2A 11 A0 5A         ld de,22528+672                         ; 21st row attrs here
 67+  AB2D CD 2B A8         call screen_setcolours
 68+  AB30 C9               ret
 69+  AB31
 70+  AB31              ;
 71+  AB31              ; Initialises the screen
 72+  AB31              ;
 73+  AB31              titlescreen_init:
 74+  AB31              ; We want a black screen.
 75+  AB31 3E 0B            ld a,11             ; magenta ink (7) on blue paper (0),
 76+  AB33                                      ; bright (64).
 77+  AB33 CD 67 80         call utilities_clearscreen
 78+  AB36 32 8D 5C         ld (23693),a        ; set our screen colours.
 79+  AB39 3E 01            ld a,1              ; 2 is the code for red.
 80+  AB3B D3 FE            out (254),a         ; write to port 254.
 81+  AB3D
 82+  AB3D 21 26 81         ld hl,string_titlescreen_copyright
 83+  AB40 CD C4 84         call string_print
 84+  AB43
 85+  AB43 C9               ret
 86+  AB44
 87+  AB44              ;
 88+  AB44              ; Initialises the screen
 89+  AB44              ;
 90+  AB44              titlescreen_alt_init:
 91+  AB44              ; We want a black screen.
 92+  AB44 3E 47            ld a,71             ; white ink (7) on black paper (0),
 93+  AB46                                      ; bright (64).
 94+  AB46 CD 67 80         call utilities_clearscreen
 95+  AB49 32 8D 5C         ld (23693),a        ; set our screen colours.
 96+  AB4C 3E 00            ld a,0              ; 2 is the code for red.
 97+  AB4E D3 FE            out (254),a         ; write to port 254.
 98+  AB50
 99+  AB50 C9               ret
100+  AB51
101+  AB51              ;
102+  AB51              ; Horiz, vert
103+  AB51              ;
104+  AB51              titlescreen_logo_data:
105+  AB51 08 00 09 00      defb 8,0,9,0,10,0,12,0,15,0,17,0,18,0,19,0
105+  AB55 0A 00 0C 00
105+  AB59 0F 00 11 00
105+  AB5D 12 00 13 00
106+  AB61 09 01 0C 01      defb 9,1,12,1,15,1,17,1
106+  AB65 0F 01 11 01
107+  AB69 09 02 0C 02      defb 9,2,12,2,13,2,14,2,15,2,17,2,18,2,19,2
107+  AB6D 0D 02 0E 02
107+  AB71 0F 02 11 02
107+  AB75 12 02 13 02
108+  AB79 09 03 0C 03      defb 9,3,12,3,15,3,17,3
108+  AB7D 0F 03 11 03
109+  AB81 09 04 0C 04      defb 9,4,12,4,15,4,17,4,18,4,19,4
109+  AB85 0F 04 11 04
109+  AB89 12 04 13 04
110+  AB8D 00 06 01 06      defb 0,6,1,6,2,6,3,6,4,6,5,6,6,6,7,6,8,6,9,6,10,6,11,6
110+  AB91 02 06 03 06
110+  AB95 04 06 05 06
110+  AB99 06 06 07 06
110+  AB9D 08 06 09 06
110+  ABA1 0A 06 0B 06
111+  ABA5 10 06 11 06      defb 16,6,17,6,18,6,19,6,20,6,21,6,22,6,23,6,24,6,25,6,26,6,27,6
111+  ABA9 12 06 13 06
111+  ABAD 14 06 15 06
111+  ABB1 16 06 17 06
111+  ABB5 18 06 19 06
111+  ABB9 1A 06 1B 06
112+  ABBD 02 07 02 08      defb 2,7,2,8,2,9,2,10,2,11,2,12,2,13,2,14,2,15,2,16,2,17,2,18,2,19,2,20,2,21
112+  ABC1 02 09 02 0A
112+  ABC5 02 0B 02 0C
112+  ABC9 02 0D 02 0E
112+  ABCD 02 0F 02 10
112+  ABD1 02 11 02 12
112+  ABD5 02 13 02 14
112+  ABD9 02 15
113+  ABDB 19 07 19 08      defb 25,7,25,8,25,9,25,10,25,11,25,12,25,13,25,14,25,15,25,16,25,17,25,18,25,19,25,20,25,21
113+  ABDF 19 09 19 0A
113+  ABE3 19 0B 19 0C
113+  ABE7 19 0D 19 0E
113+  ABEB 19 0F 19 10
113+  ABEF 19 11 19 12
113+  ABF3 19 13 19 14
113+  ABF7 19 15
114+  ABF9 03 0B 04 0B      defb 3,11,4,11,5,11,6,11,7,11,8,11,9,11,10,11,11,11
114+  ABFD 05 0B 06 0B
114+  AC01 07 0B 08 0B
114+  AC05 09 0B 0A 0B
114+  AC09 0B 0B
115+  AC0B 0B 07 0B 08      defb 11,7,11,8,11,9,11,10
115+  AC0F 0B 09 0B 0A
116+  AC13 10 0D 10 0F      defb 16,13,16,15,16,16,16,17,16,18,16,19
116+  AC17 10 10 10 11
116+  AC1B 10 12 10 13
117+  AC1F
# file closed: screen/titlescreen.asm
 27   AC1F                  include "screen\lifescreen.asm"
# file opened: screen/lifescreen.asm
  1+  AC1F              ;
  2+  AC1F              ; Draws the life remaining screen
  3+  AC1F              ;
  4+  AC1F              lifescreen_draw:
  5+  AC1F CD 65 AC         call lifescreen_init
  6+  AC22
  7+  AC22 3A DF BA         ld a,(game_currentplayer)             ; get the current player
  8+  AC25 C6 30            add 48                                ; add 48 to get char
  9+  AC27 21 48 83         ld hl,string_lifescreen_player+10
 10+  AC2A 77               ld (hl),a                             ; load this to the string we're about to show
 11+  AC2B
 12+  AC2B 21 3E 83         ld hl,string_lifescreen_player
 13+  AC2E CD C4 84         call string_print
 14+  AC31
 15+  AC31 3A 16 BB         ld a,(player+9)                       ; get the current player lives
 16+  AC34 C6 30            add 48                                ; add 48 to get the character
 17+  AC36 FE 31            cp 49
 18+  AC38 C2 4B AC         jp nz,lifescreen_draw0
 19+  AC3B 21 58 83         ld hl,string_lifescreen_lastman
 20+  AC3E
 21+  AC3E 06 08            ld b,8
 22+  AC40 3E 0A            ld a,10                                ; set red
 23+  AC42 11 6C 58         ld de,22528+108                        ; attrs here
 24+  AC45 CD 2B A8         call screen_setcolours
 25+  AC48
 26+  AC48 C3 52 AC         jp lifescreen_draw1
 27+  AC4B              lifescreen_draw0:
 28+  AC4B 21 4D 83         ld hl,string_lifescreen_lives+2       ; not last man, so use the normal view
 29+  AC4E 77               ld (hl),a                             ; load this to the string we're about to show
 30+  AC4F 21 4B 83         ld hl,string_lifescreen_lives
 31+  AC52              lifescreen_draw1:
 32+  AC52 CD C4 84         call string_print
 33+  AC55
 34+  AC55 3E 86            ld a,134
 35+  AC57 11 0B 58         ld de, 22528+11     ; get the colour for the top text
 36+  AC5A 06 0A            ld b,10
 37+  AC5C CD 2B A8         call screen_setcolours
 38+  AC5F
 39+  AC5F 3E 64            ld a,100                              ; wait for 200 frames
 40+  AC61 CD 52 80         call utilities_waitforkey_forframes   ; wait for keypress
 41+  AC64
 42+  AC64 C9               ret
 43+  AC65
 44+  AC65              ;
 45+  AC65              ; Initialises the screen
 46+  AC65              ;
 47+  AC65              lifescreen_init:
 48+  AC65              ; We want a blue screen.
 49+  AC65                  ;call $0D6B
 50+  AC65 3E 0E            ld a,14             ; yellow ink (6) on blue paper (1),
 51+  AC67                                      ; bright (64).
 52+  AC67 CD 67 80         call utilities_clearscreen
 53+  AC6A 32 8D 5C         ld (23693),a        ; set our screen colours.
 54+  AC6D 3E 01            ld a,1              ; 1 is the code for blue.
 55+  AC6F D3 FE            out (254),a         ; write to port 254.
 56+  AC71                  ;call 3503           ; ROM routine - clears screen, opens chan 2.
 57+  AC71
 58+  AC71 C9               ret
# file closed: screen/lifescreen.asm
 28   AC72                  include "screen\gameover.asm"
# file opened: screen/gameover.asm
  1+  AC72              ;
  2+  AC72              ; Draws the game over screen
  3+  AC72              ;
  4+  AC72              gameover_draw:
  5+  AC72 CD DB C1         call scores_processhighscores
  6+  AC75
  7+  AC75              gameover_draw0:
  8+  AC75 CD B5 AC         call gameover_enterhighscores
  9+  AC78
 10+  AC78 CD 53 AD         call gameover_init
 11+  AC7B
 12+  AC7B 21 63 83         ld hl,string_gameoverscreen_gameover
 13+  AC7E CD C4 84         call string_print
 14+  AC81
 15+  AC81 21 6F 83         ld hl,string_gameoverscreen_copyright
 16+  AC84 CD C4 84         call string_print
 17+  AC87
 18+  AC87 CD 98 AC         call gameover_commontext
 19+  AC8A
 20+  AC8A 06 0B            ld b,11
 21+  AC8C 3E 42            ld a,66
 22+  AC8E 11 2B 58         ld de,22528+43                         ; attrs here
 23+  AC91 CD 2B A8         call screen_setcolours
 24+  AC94 CD 47 80         call utilities_waitforkey   ; wait for keypress
 25+  AC97
 26+  AC97 C9               ret
 27+  AC98
 28+  AC98              ;
 29+  AC98              ; Draws text shared by the game over and high score screens
 30+  AC98              ;
 31+  AC98              gameover_commontext:
 32+  AC98 CD FD A7         call screen_setuptext       ; show scores
 33+  AC9B CD A5 C1         call scores_printscores     ; print the current scores
 34+  AC9E
 35+  AC9E 21 9D 83         ld hl,string_gameover_credits
 36+  ACA1 CD C4 84         call string_print
 37+  ACA4
 38+  ACA4 21 89 83         ld hl,string_gameoverscreen_bestscores
 39+  ACA7 CD C4 84         call string_print
 40+  ACAA
 41+  ACAA 06 20            ld b,32
 42+  ACAC 3E 45            ld a,69
 43+  ACAE 11 C0 5A         ld de,22528+704                         ; attrs here
 44+  ACB1 CD 2B A8         call screen_setcolours
 45+  ACB4
 46+  ACB4 C9               ret
 47+  ACB5
 48+  ACB5              ;
 49+  ACB5              ; If required, enter highscore
 50+  ACB5              ;
 51+  ACB5              gameover_enterhighscores:
 52+  ACB5                  ; check if we need to enter initial
 53+  ACB5 3A DA C1         ld a,(scores_highscoretmp)
 54+  ACB8 FE 00            cp 0
 55+  ACBA C8               ret z
 56+  ACBB CD E9 AC         call gameover_enterhighscores_init
 57+  ACBE 3A DA C1         ld a,(scores_highscoretmp)
 58+  ACC1 3D               dec a
 59+  ACC2 3D               dec a
 60+  ACC3 3D               dec a                                   ; get high score location back to position of name
 61+  ACC4 16 00            ld d,0
 62+  ACC6 5F               ld e,a
 63+  ACC7 21 61 C1         ld hl,scores_table
 64+  ACCA 19               add hl,de                               ; load memory into hl
 65+  ACCB 08               ex af,af'
 66+  ACCC 06 0F            ld b,15
 67+  ACCE CD 82 80         call utilities_pauseforframes           ; pause for a little bit
 68+  ACD1 06 03            ld b,3                                  ; collect three chars
 69+  ACD3              gameover_draw2:
 70+  ACD3 C5               push bc
 71+  ACD4 E5               push hl
 72+  ACD5 CD 86 80         call utilities_readkey               ; get key into a
 73+  ACD8 E1               pop hl
 74+  ACD9 77               ld (hl),a
 75+  ACDA 23               inc hl
 76+  ACDB E5               push hl
 77+  ACDC CD C7 C1         call scores_showtable
 78+  ACDF E1               pop hl
 79+  ACE0 06 0F            ld b,15
 80+  ACE2 CD 82 80         call utilities_pauseforframes
 81+  ACE5 C1               pop bc
 82+  ACE6 10 EB            djnz gameover_draw2
 83+  ACE8 C9               ret
 84+  ACE9
 85+  ACE9              ;
 86+  ACE9              ; Displays the screen text for high score entry
 87+  ACE9              ;
 88+  ACE9              gameover_enterhighscores_init:
 89+  ACE9
 90+  ACE9 CD 53 AD         call gameover_init
 91+  ACEC CD 98 AC         call gameover_commontext
 92+  ACEF
 93+  ACEF 21 A9 83         ld hl,string_highscore_congratulations
 94+  ACF2 CD C4 84         call string_print
 95+  ACF5
 96+  ACF5 3A DF BA         ld a,(game_currentplayer)
 97+  ACF8 FE 01            cp 1
 98+  ACFA 21 BB 83         ld hl,string_highscore_player1
 99+  ACFD C3 03 AD         jp gameover_enterhighscores_init1
100+  AD00              gameover_enterhighscores_init0:
101+  AD00 21 C6 83         ld hl,string_highscore_player2
102+  AD03              gameover_enterhighscores_init1:
103+  AD03 CD C4 84         call string_print
104+  AD06 06 60            ld b,96
105+  AD08 3E 43            ld a,67
106+  AD0A 11 A0 58         ld de,22528+160                         ; attrs here
107+  AD0D CD 2B A8         call screen_setcolours
108+  AD10
109+  AD10 21 D1 83         ld hl,string_highscore_youhaveearned
110+  AD13 CD C4 84         call string_print
111+  AD16
112+  AD16 3A DA C1         ld a,(scores_highscoretmp)
113+  AD19 FE 05            cp 5
114+  AD1B CA 29 AD         jp z, gameover_enterhighscores_init2    ; first place
115+  AD1E FE 11            cp 17
116+  AD20 CA 2F AD         jp z, gameover_enterhighscores_init3    ; 2nd place
117+  AD23 21 0D 84         ld hl,string_highscore_place3           ; 3rd place
118+  AD26 C3 35 AD         jp gameover_enterhighscores_init4
119+  AD29              gameover_enterhighscores_init2
120+  AD29 21 E3 83         ld hl,string_highscore_place1
121+  AD2C C3 35 AD         jp gameover_enterhighscores_init4
122+  AD2F              gameover_enterhighscores_init3
123+  AD2F 21 F8 83         ld hl,string_highscore_place2
124+  AD32 C3 35 AD         jp gameover_enterhighscores_init4
125+  AD35              gameover_enterhighscores_init4
126+  AD35 CD C4 84         call string_print
127+  AD38
128+  AD38 06 60            ld b,96
129+  AD3A 3E 42            ld a,66
130+  AD3C 11 40 59         ld de,22528+320                         ; attrs here
131+  AD3F CD 2B A8         call screen_setcolours
132+  AD42
133+  AD42 21 22 84         ld hl,string_highscore_pleaseenter
134+  AD45 CD C4 84         call string_print
135+  AD48
136+  AD48 06 60            ld b,96
137+  AD4A 3E 46            ld a,70
138+  AD4C 11 E0 59         ld de,22528+480                         ; attrs here
139+  AD4F CD 2B A8         call screen_setcolours
140+  AD52 C9               ret
141+  AD53
142+  AD53              ;
143+  AD53              ; Initialises the screen
144+  AD53              ;
145+  AD53              gameover_init:
146+  AD53              ; We want a black screen.
147+  AD53 3E 47            ld a,71             ; white ink (7) on black paper (0),
148+  AD55                                      ; bright (64).
149+  AD55 CD 67 80         call utilities_clearscreen
150+  AD58 32 8D 5C         ld (23693),a        ; set our screen colours.
151+  AD5B 3E 00            ld a,0              ; 2 is the code for red.
152+  AD5D D3 FE            out (254),a         ; write to port 254.
153+  AD5F C9               ret
# file closed: screen/gameover.asm
 29   AD60                  include "screen\endlevel.asm"
# file opened: screen/endlevel.asm
  1+  AD60              ;
  2+  AD60              ; Draws the level transition screen
  3+  AD60              ;
  4+  AD60              endlevel_draw:
  5+  AD60 CD 56 AE         call endlevel_init
  6+  AD63 CD 3F AE         call endlevel_commontext
  7+  AD66
  8+  AD66 21 A9 83         ld hl,string_highscore_congratulations
  9+  AD69 CD C4 84         call string_print
 10+  AD6C
 11+  AD6C 3A DF BA         ld a,(game_currentplayer)
 12+  AD6F FE 01            cp 1
 13+  AD71 21 BB 83         ld hl,string_highscore_player1
 14+  AD74 C3 7A AD         jp endlevel_init1
 15+  AD77              endlevel_init0:
 16+  AD77 21 C6 83         ld hl,string_highscore_player2
 17+  AD7A              endlevel_init1:
 18+  AD7A CD C4 84         call string_print
 19+  AD7D
 20+  AD7D 21 3F 84         ld hl,string_endlevel_youhaveearned
 21+  AD80 CD C4 84         call string_print
 22+  AD83
 23+  AD83 CD DE AD         call endlevel_workoutbonus
 24+  AD86 D5               push de
 25+  AD87 08               ex af,af'                               ; store the a value for later
 26+  AD88 CD C4 84         call string_print
 27+  AD8B D1               pop de
 28+  AD8C 62 6B            ld hl,de                                ; get the points text into de
 29+  AD8E CD C4 84         call string_print
 30+  AD91
 31+  AD91 21 AA 84         ld hl, string_endlevel_anothergo
 32+  AD94 CD C4 84         call string_print
 33+  AD97
 34+  AD97 06 20            ld b,32
 35+  AD99 3E 63            ld a,99
 36+  AD9B 11 60 59         ld de,22528+352                         ; attrs here
 37+  AD9E CD 2B A8         call screen_setcolours
 38+  ADA1
 39+  ADA1 06 20            ld b,32
 40+  ADA3 3E 65            ld a,101
 41+  ADA5 11 A0 59         ld de,22528+416                         ; attrs here
 42+  ADA8 CD 2B A8         call screen_setcolours
 43+  ADAB
 44+  ADAB 06 20            ld b,32
 45+  ADAD 3E 63            ld a,99
 46+  ADAF 11 E0 59         ld de,22528+480                         ; attrs here
 47+  ADB2 CD 2B A8         call screen_setcolours
 48+  ADB5
 49+  ADB5 06 20            ld b,32
 50+  ADB7 3E 62            ld a,98
 51+  ADB9 11 40 5A         ld de,22528+576                         ; attrs here
 52+  ADBC CD 2B A8         call screen_setcolours
 53+  ADBF
 54+  ADBF 08               ex af,af'                               ; get back a value with bonus type
 55+  ADC0 06 14            ld b,20
 56+  ADC2 CD 82 80         call utilities_pauseforframes
 57+  ADC5
 58+  ADC5 47               ld b,a                      ; put the bonus count in b
 59+  ADC6              endlevel_init2:
 60+  ADC6 C5               push bc
 61+  ADC7 06 01            ld b,1
 62+  ADC9 CD 85 C1         call scores_addthousands
 63+  ADCC CD BD BB         call player_recordcurrentscore
 64+  ADCF CD A5 C1         call scores_printscores     ; print the current scores
 65+  ADD2 06 0A            ld b,10
 66+  ADD4 CD 82 80         call utilities_pauseforframes
 67+  ADD7 C1               pop bc
 68+  ADD8 10 EC            djnz endlevel_init2
 69+  ADDA
 70+  ADDA CD 47 80         call utilities_waitforkey   ; wait for keypress
 71+  ADDD
 72+  ADDD C9               ret
 73+  ADDE
 74+  ADDE              ;
 75+  ADDE              ; Works out the bonus
 76+  ADDE              ; Outputs:
 77+  ADDE              ; a = 15 (all seven)
 78+  ADDE              ; a = 10 (3 large or 4 small)
 79+  ADDE              ; a = 5 (1 large diamond)
 80+  ADDE              ; hl - pointer to bonus text
 81+  ADDE              ; de - pointer to points text
 82+  ADDE              ;
 83+  ADDE              endlevel_workoutbonus:
 84+  ADDE 21 CC B3         ld hl,level01diamonds+2     ; location of state of first diamond
 85+  ADE1 06 03            ld b,3                      ; number to check
 86+  ADE3 16 00            ld d,0                      ; zero diamond count
 87+  ADE5              endlevel_workoutbonus0:
 88+  ADE5 7E               ld a,(hl)                   ; get state
 89+  ADE6 FE 01            cp 1
 90+  ADE8 C2 EC AD         jp nz,endlevel_workoutbonus1 ; if not, move on
 91+  ADEB 14               inc d                       ; increment diamond count
 92+  ADEC              endlevel_workoutbonus1:
 93+  ADEC 23               inc hl
 94+  ADED 23               inc hl
 95+  ADEE 23               inc hl
 96+  ADEF 23               inc hl
 97+  ADF0 23               inc hl                      ; get to next state
 98+  ADF1 10 F2            djnz endlevel_workoutbonus0
 99+  ADF3
100+  ADF3 21 DC B3         ld hl,level01gems+2     ; location of state of first gem
101+  ADF6 06 04            ld b,4                      ; number to check
102+  ADF8 1E 00            ld e,0                      ; zero gem count
103+  ADFA              endlevel_workoutbonus2:
104+  ADFA 7E               ld a,(hl)                   ; get state
105+  ADFB FE 01            cp 1
106+  ADFD C2 01 AE         jp nz,endlevel_workoutbonus3 ; if not, move on
107+  AE00 1C               inc e                       ; increment diamond count
108+  AE01              endlevel_workoutbonus3:
109+  AE01 23               inc hl
110+  AE02 23               inc hl
111+  AE03 23               inc hl
112+  AE04 23               inc hl
113+  AE05 23               inc hl                     ; get to next state
114+  AE06 10 F2            djnz endlevel_workoutbonus2
115+  AE08
116+  AE08 7A               ld a,d
117+  AE09 83               add e
118+  AE0A FE 07            cp 7                        ; check for max bonus
119+  AE0C C2 18 AE         jp nz,endlevel_workoutbonus4 ;
120+  AE0F 3E 0F            ld a,15
121+  AE11 21 6F 84         ld hl, string_endlevel_bonus3
122+  AE14 11 9B 84         ld de, string_endlevel_points3
123+  AE17 C9               ret                         ; return with bonus of 15
124+  AE18              endlevel_workoutbonus4:
125+  AE18 7A               ld a,d                      ; check for for diamonds
126+  AE19 FE 03            cp 3
127+  AE1B C2 27 AE         jp nz,endlevel_workoutbonus5
128+  AE1E 3E 0A            ld a,10
129+  AE20 21 60 84         ld hl, string_endlevel_bonus2
130+  AE23 11 8C 84         ld de, string_endlevel_points2
131+  AE26 C9               ret                         ; return with bonus of ten
132+  AE27              endlevel_workoutbonus5:
133+  AE27 7B               ld a,e                      ; check for four gems
134+  AE28 FE 04            cp 4
135+  AE2A C2 36 AE         jp nz,endlevel_workoutbonus6
136+  AE2D 3E 0A            ld a,10
137+  AE2F 21 60 84         ld hl, string_endlevel_bonus2
138+  AE32 11 8C 84         ld de, string_endlevel_points2
139+  AE35 C9               ret                         ; return with bonus of 10
140+  AE36              endlevel_workoutbonus6:
141+  AE36 3E 05            ld a,5                      ; otherwise, bonus is 5
142+  AE38 21 51 84         ld hl, string_endlevel_bonus1
143+  AE3B 11 7E 84         ld de, string_endlevel_points1
144+  AE3E C9               ret
145+  AE3F
146+  AE3F              ;
147+  AE3F              ; Draws text shared by the game over and high score screens
148+  AE3F              ;
149+  AE3F              endlevel_commontext:
150+  AE3F CD FD A7         call screen_setuptext       ; show scores
151+  AE42 CD A5 C1         call scores_printscores     ; print the current scores
152+  AE45
153+  AE45 21 89 83         ld hl,string_gameoverscreen_bestscores
154+  AE48 CD C4 84         call string_print
155+  AE4B
156+  AE4B 06 20            ld b,32
157+  AE4D 3E 45            ld a,69
158+  AE4F 11 C0 5A         ld de,22528+704                         ; attrs here
159+  AE52 CD 2B A8         call screen_setcolours
160+  AE55
161+  AE55 C9               ret
162+  AE56
163+  AE56              ;
164+  AE56              ; Initialises the screen
165+  AE56              ;
166+  AE56              endlevel_init:
167+  AE56              ; We want a green screen.
168+  AE56 3E 61            ld a,97             ; white ink (7) on black paper (0),
169+  AE58                                      ; bright (64).
170+  AE58 CD 67 80         call utilities_clearscreen
171+  AE5B 32 8D 5C         ld (23693),a        ; set our screen colours.
172+  AE5E 3E 00            ld a,0              ; 2 is the code for red.
173+  AE60 D3 FE            out (254),a         ; write to port 254.
174+  AE62 C9               ret
# file closed: screen/endlevel.asm
 30   AE63
 31   AE63                  include "sound\sound.asm"
# file opened: sound/sound.asm
  1+  AE63              sound_gemcollected:
  2+  AE63 21 C8 00         ld hl,200 ; pitch.
  3+  AE66 11 3E 00         ld de,62 ; duration.
  4+  AE69 CD B5 03         call 949 ; ROM beeper routine.
  5+  AE6C C9               ret
  6+  AE6D
  7+  AE6D              sound_pitchbend:
  8+  AE6D 21 F4 01         ld hl,500 ; starting pitch.
  9+  AE70 06 FA            ld b,250 ; length of pitch bend.
 10+  AE72              sound_pitchbend0:
 11+  AE72 C5                push bc
 12+  AE73 E5               push hl ; store pitch.
 13+  AE74 11 01 00         ld de,1 ; very short duration.
 14+  AE77 CD B5 03         call 949 ; ROM beeper routine.
 15+  AE7A E1               pop hl ; restore pitch.
 16+  AE7B 23               inc hl ; pitch going up.
 17+  AE7C C1               pop bc
 18+  AE7D 10 F3            djnz sound_pitchbend0 ; repeat.
 19+  AE7F C9               ret
 20+  AE80
 21+  AE80              sound_rockfell:
 22+  AE80 08               ex af,af'
 23+  AE81 1E 32            ld e,50 ; repeat 250 times.
 24+  AE83 21 00 00         ld hl,0 ; start pointer in ROM.
 25+  AE86 D5           sound_rockfell2 push de
 26+  AE87 06 20            ld b,32 ; length of step.
 27+  AE89 C5           sound_rockfell0 push bc
 28+  AE8A 7E               ld a,(hl) ; next "random" number.
 29+  AE8B 23               inc hl ; pointer.
 30+  AE8C E6 F8            and 248 ; we want a black border.
 31+  AE8E D3 FE            out (254),a ; write to speaker.
 32+  AE90 7B               ld a,e ; as e gets smaller...
 33+  AE91 2F               cpl ; ...we increase the delay.
 34+  AE92 3D           sound_rockfell1 dec a ; decrement loop counter.
 35+  AE93 20 FD            jr nz,sound_rockfell1 ; delay loop.
 36+  AE95 C1               pop bc
 37+  AE96 10 F1            djnz sound_rockfell0 ; next step.
 38+  AE98 D1               pop de
 39+  AE99 7B               ld a,e
 40+  AE9A D6 18            sub 24 ; size of step.
 41+  AE9C FE 1E            cp 30 ; end of range.
 42+  AE9E CA AF AE         jp z,sound_rockfell5
 43+  AEA1 DA AF AE         jp c, sound_rockfell5
 44+  AEA4 5F               ld e,a
 45+  AEA5 2F               cpl
 46+  AEA6 06 28        sound_rockfell3 ld b,40 ; silent period.
 47+  AEA8 10 FE        sound_rockfell4 djnz sound_rockfell4
 48+  AEAA 3D               dec a
 49+  AEAB 20 F9            jr nz,sound_rockfell3
 50+  AEAD 18 D7            jr sound_rockfell2
 51+  AEAF              sound_rockfell5
 52+  AEAF 08               ex af,af'
 53+  AEB0 C9               ret
 54+  AEB1
# file closed: sound/sound.asm
 32   AEB1
 33   AEB1                  include "leveldata\level01.asm"
# file opened: leveldata/level01.asm
  1+  AEB1              ; ###############################################################
  2+  AEB1              ; Data for level 1
  3+  AEB1              ; ###############################################################
  4+  AEB1              level01:
  5+  AEB1
  6+  AEB1                  ;defb 09,04,04,04,04,04,04,04,04,04,04,04,04,04,04,09,09,04,04,04,04,04,04,04,04,04,04,04,04,04,04,09
  7+  AEB1
  8+  AEB1 00 00 05 05      defb 00,00,05,05,05,05,05,05,05,05,05,05,05,05,02,01,01,01,03,05,05,05,05,05,05,05,05,05,05,05,00,00
  8+  AEB5 05 05 05 05
  8+  AEB9 05 05 05 05
  8+  AEBD 05 05 02 01
  8+  AEC1 01 01 03 05
  8+  AEC5 05 05 05 05
  8+  AEC9 05 05 05 05
  8+  AECD 05 05 00 00
  9+  AED1 00 00 05 05      defb 00,00,05,05,05,05,05,05,05,05,05,05,02,01,01,01,01,01,01,01,03,05,05,05,05,05,05,05,05,05,00,00
  9+  AED5 05 05 05 05
  9+  AED9 05 05 05 05
  9+  AEDD 02 01 01 01
  9+  AEE1 01 01 01 01
  9+  AEE5 03 05 05 05
  9+  AEE9 05 05 05 05
  9+  AEED 05 05 00 00
 10+  AEF1 00 00 05 05      defb 00,00,05,05,05,05,05,05,05,05,02,01,01,01,01,01,01,01,01,01,01,01,03,05,13,13,13,13,13,13,00,00
 10+  AEF5 05 05 05 05
 10+  AEF9 05 05 02 01
 10+  AEFD 01 01 01 01
 10+  AF01 01 01 01 01
 10+  AF05 01 01 03 05
 10+  AF09 0D 0D 0D 0D
 10+  AF0D 0D 0D 00 00
 11+  AF11 00 00 01 01      defb 00,00,01,01,01,01,00,01,01,01,01,01,01,01,01,01,01,01,01,01,01,01,01,03,05,05,05,05,05,05,00,00
 11+  AF15 01 01 00 01
 11+  AF19 01 01 01 01
 11+  AF1D 01 01 01 01
 11+  AF21 01 01 01 01
 11+  AF25 01 01 01 03
 11+  AF29 05 05 05 05
 11+  AF2D 05 05 00 00
 12+  AF31 00 00 01 01      defb 00,00,01,01,04,04,04,04,04,04,01,01,01,01,01,01,01,01,01,01,01,01,01,01,01,01,01,01,00,01,00,00
 12+  AF35 04 04 04 04
 12+  AF39 04 04 01 01
 12+  AF3D 01 01 01 01
 12+  AF41 01 01 01 01
 12+  AF45 01 01 01 01
 12+  AF49 01 01 01 01
 12+  AF4D 00 01 00 00
 13+  AF51 00 00 01 04      defb 00,00,01,04,04,04,04,04,04,04,04,04,01,01,01,01,01,01,01,01,01,01,01,01,00,00,00,00,00,01,00,00
 13+  AF55 04 04 04 04
 13+  AF59 04 04 04 04
 13+  AF5D 01 01 01 01
 13+  AF61 01 01 01 01
 13+  AF65 01 01 01 01
 13+  AF69 00 00 00 00
 13+  AF6D 00 01 00 00
 14+  AF71 00 00 01 04      defb 00,00,01,04,04,01,01,01,01,01,04,04,04,04,01,01,01,01,01,01,01,00,00,00,00,01,01,01,01,01,00,00
 14+  AF75 04 01 01 01
 14+  AF79 01 01 04 04
 14+  AF7D 04 04 01 01
 14+  AF81 01 01 01 01
 14+  AF85 01 00 00 00
 14+  AF89 00 01 01 01
 14+  AF8D 01 01 00 00
 15+  AF91 00 00 01 04      defb 00,00,01,04,04,04,04,04,04,01,04,04,04,04,04,04,04,04,00,00,00,00,04,04,04,04,04,04,04,01,00,00
 15+  AF95 04 04 04 04
 15+  AF99 04 01 04 04
 15+  AF9D 04 04 04 04
 15+  AFA1 04 04 00 00
 15+  AFA5 00 00 04 04
 15+  AFA9 04 04 04 04
 15+  AFAD 04 01 00 00
 16+  AFB1 00 00 01 01      defb 00,00,01,01,01,04,01,01,01,01,04,04,04,04,04,04,04,04,00,04,04,04,04,04,04,04,04,04,04,01,00,00
 16+  AFB5 01 04 01 01
 16+  AFB9 01 01 04 04
 16+  AFBD 04 04 04 04
 16+  AFC1 04 04 00 04
 16+  AFC5 04 04 04 04
 16+  AFC9 04 04 04 04
 16+  AFCD 04 01 00 00
 17+  AFD1 00 00 01 00      defb 00,00,01,00,00,00,00,00,00,04,04,04,04,04,04,04,04,04,00,04,04,04,04,04,04,04,04,04,04,01,00,00
 17+  AFD5 00 00 00 00
 17+  AFD9 00 04 04 04
 17+  AFDD 04 04 04 04
 17+  AFE1 04 04 00 04
 17+  AFE5 04 04 04 04
 17+  AFE9 04 04 04 04
 17+  AFED 04 01 00 00
 18+  AFF1 00 00 01 15      defb 00,00,01,21,21,21,21,21,21,01,04,04,04,04,04,04,04,04,00,04,04,04,04,04,04,04,04,04,04,01,00,00
 18+  AFF5 15 15 15 15
 18+  AFF9 15 01 04 04
 18+  AFFD 04 04 04 04
 18+  B001 04 04 00 04
 18+  B005 04 04 04 04
 18+  B009 04 04 04 04
 18+  B00D 04 01 00 00
 19+  B011 00 00 01 00      defb 00,00,01,00,00,00,00,00,00,01,04,04,04,04,04,04,04,04,00,04,04,04,04,04,04,00,00,00,00,01,00,00
 19+  B015 00 00 00 00
 19+  B019 00 01 04 04
 19+  B01D 04 04 04 04
 19+  B021 04 04 00 04
 19+  B025 04 04 04 04
 19+  B029 04 00 00 00
 19+  B02D 00 01 00 00
 20+  B031 00 00 01 00      defb 00,00,01,00,00,00,00,00,00,01,04,04,04,04,04,04,04,04,00,04,04,04,04,04,04,00,04,04,00,01,00,00
 20+  B035 00 00 00 00
 20+  B039 00 01 04 04
 20+  B03D 04 04 04 04
 20+  B041 04 04 00 04
 20+  B045 04 04 04 04
 20+  B049 04 00 04 04
 20+  B04D 00 01 00 00
 21+  B051 00 00 01 06      defb 00,00,01,06,06,06,06,06,06,01,04,04,04,04,04,04,04,04,00,04,04,04,04,04,04,00,04,04,00,01,00,00
 21+  B055 06 06 06 06
 21+  B059 06 01 04 04
 21+  B05D 04 04 04 04
 21+  B061 04 04 00 04
 21+  B065 04 04 04 04
 21+  B069 04 00 04 04
 21+  B06D 00 01 00 00
 22+  B071 00 00 01 1A      defb 00,00,01,26,26,26,26,26,26,01,04,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,04,04,00,01,00,00
 22+  B075 1A 1A 1A 1A
 22+  B079 1A 01 04 00
 22+  B07D 00 00 00 00
 22+  B081 00 00 00 00
 22+  B085 00 00 00 00
 22+  B089 00 00 04 04
 22+  B08D 00 01 00 00
 23+  B091 00 00 01 1A      defb 00,00,01,26,26,26,26,26,26,01,04,00,04,04,04,04,04,04,00,04,04,04,00,04,04,04,04,04,00,01,00,00
 23+  B095 1A 1A 1A 1A
 23+  B099 1A 01 04 00
 23+  B09D 04 04 04 04
 23+  B0A1 04 04 00 04
 23+  B0A5 04 04 00 04
 23+  B0A9 04 04 04 04
 23+  B0AD 00 01 00 00
 24+  B0B1 00 00 01 1A      defb 00,00,01,26,26,26,26,26,26,01,04,00,04,04,04,04,04,04,00,04,04,04,00,04,04,04,04,04,00,01,00,00
 24+  B0B5 1A 1A 1A 1A
 24+  B0B9 1A 01 04 00
 24+  B0BD 04 04 04 04
 24+  B0C1 04 04 00 04
 24+  B0C5 04 04 00 04
 24+  B0C9 04 04 04 04
 24+  B0CD 00 01 00 00
 25+  B0D1 00 00 01 01      defb 00,00,01,01,01,01,01,01,01,01,04,00,04,04,04,04,04,04,00,04,04,04,00,04,04,04,04,04,00,01,00,00
 25+  B0D5 01 01 01 01
 25+  B0D9 01 01 04 00
 25+  B0DD 04 04 04 04
 25+  B0E1 04 04 00 04
 25+  B0E5 04 04 00 04
 25+  B0E9 04 04 04 04
 25+  B0ED 00 01 00 00
 26+  B0F1 00 00 01 04      defb 00,00,01,04,04,04,04,04,04,04,04,00,04,04,04,04,04,04,00,04,04,04,00,00,00,00,04,04,04,01,00,00
 26+  B0F5 04 04 04 04
 26+  B0F9 04 04 04 00
 26+  B0FD 04 04 04 04
 26+  B101 04 04 00 04
 26+  B105 04 04 00 00
 26+  B109 00 00 04 04
 26+  B10D 04 01 00 00
 27+  B111 00 00 01 04      defb 00,00,01,04,04,04,00,00,00,00,00,00,04,04,04,04,04,04,00,04,04,04,04,04,04,00,04,04,04,01,00,00
 27+  B115 04 04 00 00
 27+  B119 00 00 00 00
 27+  B11D 04 04 04 04
 27+  B121 04 04 00 04
 27+  B125 04 04 04 04
 27+  B129 04 00 04 04
 27+  B12D 04 01 00 00
 28+  B131 00 00 01 04      defb 00,00,01,04,04,04,00,04,04,04,04,04,04,04,04,04,04,04,00,04,04,04,04,04,04,00,04,04,04,01,00,00
 28+  B135 04 04 00 04
 28+  B139 04 04 04 04
 28+  B13D 04 04 04 04
 28+  B141 04 04 00 04
 28+  B145 04 04 04 04
 28+  B149 04 00 04 04
 28+  B14D 04 01 00 00
 29+  B151 00 00 01 04      defb 00,00,01,04,04,04,00,04,04,04,01,01,01,01,01,01,01,01,01,01,01,01,01,01,04,00,04,04,04,01,00,00
 29+  B155 04 04 00 04
 29+  B159 04 04 01 01
 29+  B15D 01 01 01 01
 29+  B161 01 01 01 01
 29+  B165 01 01 01 01
 29+  B169 04 00 04 04
 29+  B16D 04 01 00 00
 30+  B171 00 00 01 04      defb 00,00,01,04,04,04,00,04,04,04,01,00,00,00,00,00,00,00,00,00,00,00,00,01,04,00,04,04,04,01,00,00
 30+  B175 04 04 00 04
 30+  B179 04 04 01 00
 30+  B17D 00 00 00 00
 30+  B181 00 00 00 00
 30+  B185 00 00 00 01
 30+  B189 04 00 04 04
 30+  B18D 04 01 00 00
 31+  B191 00 00 01 04      defb 00,00,01,04,04,04,00,04,04,04,01,00,00,00,00,00,00,00,00,00,00,00,00,01,04,00,04,04,04,01,00,00
 31+  B195 04 04 00 04
 31+  B199 04 04 01 00
 31+  B19D 00 00 00 00
 31+  B1A1 00 00 00 00
 31+  B1A5 00 00 00 01
 31+  B1A9 04 00 04 04
 31+  B1AD 04 01 00 00
 32+  B1B1 00 00 01 04      defb 00,00,01,04,04,04,00,04,04,04,01,00,00,00,00,00,00,00,00,00,00,00,00,01,04,00,04,04,04,01,00,00
 32+  B1B5 04 04 00 04
 32+  B1B9 04 04 01 00
 32+  B1BD 00 00 00 00
 32+  B1C1 00 00 00 00
 32+  B1C5 00 00 00 01
 32+  B1C9 04 00 04 04
 32+  B1CD 04 01 00 00
 33+  B1D1 00 00 01 04      defb 00,00,01,04,04,04,00,04,04,04,04,00,00,00,00,00,00,00,00,00,00,00,00,04,04,04,04,04,04,01,00,00
 33+  B1D5 04 04 00 04
 33+  B1D9 04 04 04 00
 33+  B1DD 00 00 00 00
 33+  B1E1 00 00 00 00
 33+  B1E5 00 00 00 04
 33+  B1E9 04 04 04 04
 33+  B1ED 04 01 00 00
 34+  B1F1 00 00 01 04      defb 00,00,01,04,04,04,04,04,04,04,01,00,00,00,00,00,00,00,00,00,00,00,00,01,04,04,04,04,04,01,00,00
 34+  B1F5 04 04 04 04
 34+  B1F9 04 04 01 00
 34+  B1FD 00 00 00 00
 34+  B201 00 00 00 00
 34+  B205 00 00 00 01
 34+  B209 04 04 04 04
 34+  B20D 04 01 00 00
 35+  B211 00 00 01 04      defb 00,00,01,04,04,04,04,04,04,04,01,00,00,00,01,00,00,00,00,01,00,00,00,01,04,04,04,04,04,01,00,00
 35+  B215 04 04 04 04
 35+  B219 04 04 01 00
 35+  B21D 00 00 01 00
 35+  B221 00 00 00 01
 35+  B225 00 00 00 01
 35+  B229 04 04 04 04
 35+  B22D 04 01 00 00
 36+  B231 00 00 01 01      defb 00,00,01,01,01,01,01,01,01,01,01,01,01,01,01,01,01,01,01,01,01,01,01,01,01,01,01,01,01,01,00,00
 36+  B235 01 01 01 01
 36+  B239 01 01 01 01
 36+  B23D 01 01 01 01
 36+  B241 01 01 01 01
 36+  B245 01 01 01 01
 36+  B249 01 01 01 01
 36+  B24D 01 01 00 00
 37+  B251
 38+  B251              ; ###############################################################
 39+  B251              ; Object data: horiz, vert, state, memh, meml
 40+  B251              ; ###############################################################
 41+  B251              level01rocks:
 42+  B251 09 04 00 00      defb 9,4,0,0,0
 42+  B255 00
 43+  B256 0C 07 00 00      defb 12,7,0,0,0
 43+  B25A 00
 44+  B25B 10 07 00 00      defb 16,7,0,0,0
 44+  B25F 00
 45+  B260 0B 08 00 00      defb 11,8,0,0,0
 45+  B264 00
 46+  B265 0A 0A 00 00      defb 10,10,0,0,0
 46+  B269 00
 47+  B26A 0C 0A 00 00      defb 12,10,0,0,0
 47+  B26E 00
 48+  B26F 0D 09 00 00      defb 13,9,0,0,0
 48+  B273 00
 49+  B274 0E 08 00 00      defb 14,8,0,0,0
 49+  B278 00
 50+  B279 0F 0B 00 00      defb 15,11,0,0,0
 50+  B27D 00
 51+  B27E 0B 0C 00 00      defb 11,12,0,0,0
 51+  B282 00
 52+  B283 11 0C 00 00      defb 17,12,0,0,0
 52+  B287 00
 53+  B288 13 08 00 00      defb 19,8,0,0,0
 53+  B28C 00
 54+  B28D 16 09 00 00      defb 22,9,0,0,0
 54+  B291 00
 55+  B292 13 0A 00 00      defb 19,10,0,0,0
 55+  B296 00
 56+  B297 15 0A 00 00      defb 21,10,0,0,0
 56+  B29B 00
 57+  B29C 15 0C 00 00      defb 21,12,0,0,0
 57+  B2A0 00
 58+  B2A1 16 0C 00 00      defb 22,12,0,0,0
 58+  B2A5 00
 59+  B2A6 18 0A 00 00      defb 24,10,0,0,0
 59+  B2AA 00
 60+  B2AB 19 09 00 00      defb 25,9,0,0,0
 60+  B2AF 00
 61+  B2B0 1C 09 00 00      defb 28,9,0,0,0
 61+  B2B4 00
 62+  B2B5 1B 0C 00 00      defb 27,12,0,0,0
 62+  B2B9 00
 63+  B2BA 1A 0D 00 00      defb 26,13,0,0,0
 63+  B2BE 00
 64+  B2BF 19 0E 00 00      defb 25,14,0,0,0
 64+  B2C3 00
 65+  B2C4 19 10 00 00      defb 25,16,0,0,0
 65+  B2C8 00
 66+  B2C9 1A 11 00 00      defb 26,17,0,0,0
 66+  B2CD 00
 67+  B2CE 1B 11 00 00      defb 27,17,0,0,0
 67+  B2D2 00
 68+  B2D3 1C 12 00 00      defb 28,18,0,0,0
 68+  B2D7 00
 69+  B2D8 1A 13 00 00      defb 26,19,0,0,0
 69+  B2DC 00
 70+  B2DD 1B 15 00 00      defb 27,21,0,0,0
 70+  B2E1 00
 71+  B2E2 1A 17 00 00      defb 26,23,0,0,0
 71+  B2E6 00
 72+  B2E7 1B 18 00 00      defb 27,24,0,0,0
 72+  B2EB 00
 73+  B2EC 19 18 00 00      defb 25,24,0,0,0
 73+  B2F0 00
 74+  B2F1 18 17 00 00      defb 24,23,0,0,0
 74+  B2F5 00
 75+  B2F6 13 14 00 00      defb 19,20,0,0,0
 75+  B2FA 00
 76+  B2FB 14 12 00 00      defb 20,18,0,0,0
 76+  B2FF 00
 77+  B300 14 10 00 00      defb 20,16,0,0,0
 77+  B304 00
 78+  B305 15 10 00 00      defb 21,16,0,0,0
 78+  B309 00
 79+  B30A 16 12 00 00      defb 22,18,0,0,0
 79+  B30E 00
 80+  B30F 11 14 00 00      defb 17,20,0,0,0
 80+  B313 00
 81+  B314 0D 11 00 00      defb 13,17,0,0,0
 81+  B318 00
 82+  B319 0C 13 00 00      defb 12,19,0,0,0
 82+  B31D 00
 83+  B31E 0B 13 00 00      defb 11,19,0,0,0
 83+  B322 00
 84+  B323 0A 11 00 00      defb 10,17,0,0,0
 84+  B327 00
 85+  B328 05 12 00 00      defb 5,18,0,0,0
 85+  B32C 00
 86+  B32D 07 16 00 00      defb 7,22,0,0,0
 86+  B331 00
 87+  B332 09 17 00 00      defb 9,23,0,0,0
 87+  B336 00
 88+  B337 07 18 00 00      defb 7,24,0,0,0
 88+  B33B 00
 89+  B33C 05 18 00 00      defb 5,24,0,0,0
 89+  B340 00
 90+  B341 06 19 00 00      defb 6,25,0,0,0
 90+  B345 00
 91+  B346 08 19 00 00      defb 8,25,0,0,0
 91+  B34A 00
 92+  B34B 04 17 00 00      defb 4,23,0,0,0
 92+  B34F 00
 93+  B350 FF               defb 255
 94+  B351
 95+  B351              level01missiles:
 96+  B351 0B 17 00 00      defb 11,23,0,0,0
 96+  B355 00
 97+  B356 0B 16 00 00      defb 11,22,0,0,0
 97+  B35A 00
 98+  B35B 0C 17 00 00      defb 12,23,0,0,0
 98+  B35F 00
 99+  B360 0C 16 00 00      defb 12,22,0,0,0
 99+  B364 00
100+  B365 0D 17 00 00      defb 13,23,0,0,0
100+  B369 00
101+  B36A 0D 16 00 00      defb 13,22,0,0,0
101+  B36E 00
102+  B36F 0E 17 00 00      defb 14,23,0,0,0
102+  B373 00
103+  B374 0E 16 00 00      defb 14,22,0,0,0
103+  B378 00
104+  B379 0F 17 00 00      defb 15,23,0,0,0
104+  B37D 00
105+  B37E 0F 16 00 00      defb 15,22,0,0,0
105+  B382 00
106+  B383 10 17 00 00      defb 16,23,0,0,0
106+  B387 00
107+  B388 10 16 00 00      defb 16,22,0,0,0
107+  B38C 00
108+  B38D 11 17 00 00      defb 17,23,0,0,0
108+  B391 00
109+  B392 11 16 00 00      defb 17,22,0,0,0
109+  B396 00
110+  B397 12 17 00 00      defb 18,23,0,0,0
110+  B39B 00
111+  B39C 12 16 00 00      defb 18,22,0,0,0
111+  B3A0 00
112+  B3A1 13 17 00 00      defb 19,23,0,0,0
112+  B3A5 00
113+  B3A6 13 16 00 00      defb 19,22,0,0,0
113+  B3AA 00
114+  B3AB 14 17 00 00      defb 20,23,0,0,0
114+  B3AF 00
115+  B3B0 14 16 00 00      defb 20,22,0,0,0
115+  B3B4 00
116+  B3B5 15 17 00 00      defb 21,23,0,0,0
116+  B3B9 00
117+  B3BA 15 16 00 00      defb 21,22,0,0,0
117+  B3BE 00
118+  B3BF 16 17 00 00      defb 22,23,0,0,0
118+  B3C3 00
119+  B3C4 16 16 00 00      defb 22,22,0,0,0
119+  B3C8 00
120+  B3C9 FF               defb 255
121+  B3CA
122+  B3CA              ;
123+  B3CA              ; Diamonds: x,y,state,mem1+mem2
124+  B3CA              ;
125+  B3CA              level01diamonds:
126+  B3CA 0C 1B 00 00      defb 12,27,0,0,0
126+  B3CE 00
127+  B3CF 10 1B 00 00      defb 16,27,0,0,0
127+  B3D3 00
128+  B3D4 15 1B 00 00      defb 21,27,0,0,0
128+  B3D8 00
129+  B3D9 FF               defb 255
130+  B3DA
131+  B3DA              level01gems:
132+  B3DA 12 14 00 00      defb 18,20,0,0,0
132+  B3DE 00
133+  B3DF 06 18 00 00      defb 6,24,0,0,0
133+  B3E3 00
134+  B3E4 19 17 00 00      defb 25,23,0,0,0
134+  B3E8 00
135+  B3E9 1C 11 00 00      defb 28,17,0,0,0
135+  B3ED 00
136+  B3EE FF               defb 255
137+  B3EF              ;
138+  B3EF              ; Score area colours
139+  B3EF              ;
140+  B3EF              score_colours:
141+  B3EF 47 47 47 47      defb 71,71,71,71,71,71,71,71,71,71,71,66,67,67,67,67,67,67,67,67,66,71,71,71,71,71,71,71,71,71,71,71
141+  B3F3 47 47 47 47
141+  B3F7 47 47 47 42
141+  B3FB 43 43 43 43
141+  B3FF 43 43 43 43
141+  B403 42 47 47 47
141+  B407 47 47 47 47
141+  B40B 47 47 47 47
142+  B40F 47 47 47 47      defb 71,71,71,71,71,71,71,71,71,71,71,70,70,70,70,70,70,70,70,70,70,71,71,71,71,71,71,71,71,71,71,71
142+  B413 47 47 47 47
142+  B417 47 47 47 46
142+  B41B 46 46 46 46
142+  B41F 46 46 46 46
142+  B423 46 47 47 47
142+  B427 47 47 47 47
142+  B42B 47 47 47 47
143+  B42F
144+  B42F              high_score_colours:
145+  B42F 00 00 00 42      defb  0, 0, 0,66,66,66,71,71,71,71,71,71,67,67,67,71,71,71,71,71,71,70,70,70,71,71,71,71,71,71,0,0
145+  B433 42 42 47 47
145+  B437 47 47 47 47
145+  B43B 43 43 43 47
145+  B43F 47 47 47 47
145+  B443 47 46 46 46
145+  B447 47 47 47 47
145+  B44B 47 47 00 00
# file closed: leveldata/level01.asm
 34   B44F                  include "graphics\graphics.asm"
# file opened: graphics/graphics.asm
  1+  B44F              ; Tiles graphics.
  2+  B44F              sprites:
  3+  B44F 00 00 00 00      defb    0  ,  0,  0,  0,  0,  0,  0,  0   ; 0, space
  3+  B453 00 00 00 00
  4+  B457 FF FF FF FF      defb    255,255,255,255,255,255,255,255   ; 1, cyan block
  4+  B45B FF FF FF FF
  5+  B45F 01 03 07 0F      defb	  1,  3,  7, 15, 31, 63,127,255   ; 2, slope left
  5+  B463 1F 3F 7F FF
  6+  B467 80 C0 E0 F0      defb    128,192,224,240,248,252,254,255   ; 3, slope right
  6+  B46B F8 FC FE FF
  7+  B46F 55 AA 55 AA      defb    85,170, 85,170, 85,170, 85,170    ; 4, dirt
  7+  B473 55 AA 55 AA
  8+  B477 00 00 00 00      defb    0  ,  0,  0,  0,  0,  0,  0,  0   ; 5, sky block
  8+  B47B 00 00 00 00
  9+  B47F FF FF FF FF      defb    255,255,255,255,255,255,255,255   ; 6, slime block
  9+  B483 FF FF FF FF
 10+  B487 00 00 00 00      defb    0  ,0  ,  0,  0,  0,  0,  0,  0   ; 7, for reuse
 10+  B48B 00 00 00 00
 11+  B48F 18 2C 4E 8F      defb    24, 44, 78,143,241,114, 52,  24    ; 8, diamond
 11+  B493 F1 72 34 18
 12+  B497 3C 7E FF 7F      defb    60,126,255,127,254,254,255,126    ; 9, rock
 12+  B49B FE FE FF 7E
 13+  B49F 7E FF 7F 7F  	defb	126,255,127,127,254,255,126, 60    ; 10, rock 2
 13+  B4A3 FE FF 7E 3C
 14+  B4A7 00 00 00 00      defb    0  ,  0,  0,  0,  0,  0,255,255   ; 11, sky block, pixel trapdoor
 14+  B4AB 00 00 FF FF
 15+  B4AF 99 DB 7E 24  	defb    153,219,126, 36,255, 66, 36, 24   ; 12, missile
 15+  B4B3 FF 42 24 18
 16+  B4B7 00 00 00 00      defb    0  ,  0,  0,  0,  0,  0,  0,  0   ; 13, sky block, tank background
 16+  B4BB 00 00 00 00
 17+  B4BF 00 00 00 00  	defb    0,  0,  0,  0,  0, 60, 90, 52     ; 14, gem
 17+  B4C3 00 3C 5A 34
 18+  B4C7 FD FE FD FE  	defb	253,254,253,254,253,254,253,254   ; 15, damaged mountain
 18+  B4CB FD FE FD FE
 19+  B4CF F4 F8 F4 F8  	defb	244,248,244,248,244,248,244,248   ; 16, damaged mountain 2
 19+  B4D3 F4 F8 F4 F8
 20+  B4D7 D0 E0 D0 E0  	defb	208,224,208,224,208,224,208,224   ; 17, damaged mountain 3
 20+  B4DB D0 E0 D0 E0
 21+  B4DF 40 80 40 80  	defb	 64,128, 64,128, 64,128, 64,128   ; 18, damaged mountain 4
 21+  B4E3 40 80 40 80
 22+  B4E7 00 00 00 ED  	defb	0,  0,  0,237,237,  0,  0,  0	  ; 19, tank missile
 22+  B4EB ED 00 00 00
 23+  B4EF 99 DB 7E 24  	defb    153,219,126, 36,255,126, 60, 24   ; 20, missile active
 23+  B4F3 FF 7E 3C 18
 24+  B4F7 FF FF 00 00      defb	255,255,  0,  0,  0,  0,  0,  0	  ; 21, the pit 1
 24+  B4FB 00 00 00 00
 25+  B4FF FC FC 00 00  	defb	252,252,  0,  0,  0,  0,  0,  0	  ; 22, the pit 2
 25+  B503 00 00 00 00
 26+  B507 F0 F0 00 00  	defb	240,240,  0,  0,  0,  0,  0,  0	  ; 23, the pit 3
 26+  B50B 00 00 00 00
 27+  B50F C0 C0 00 00  	defb	192,192,  0,  0,  0,  0,  0,  0	  ; 24, the pit 4
 27+  B513 00 00 00 00
 28+  B517 00 00 00 00  	defb	0,0,  0,  0,  0,  0,  0,  0	  	  ; 25, the pit 5
 28+  B51B 00 00 00 00
 29+  B51F FF FF FF FF      defb    255,255,255,255,255,255,255,255   ; 26, slime block, green on green
 29+  B523 FF FF FF FF
 30+  B527
 31+  B527
 32+  B527              sprite_attrs:
 33+  B527 46               defb    070 ; 0, space
 34+  B528 4D               defb    077 ; 1, cyan block
 35+  B529 4D               defb    077 ; 2, slope left
 36+  B52A 4D               defb    077 ; 3, slope right
 37+  B52B 46               defb    070 ; 4, dirt
 38+  B52C 4E               defb    078 ; 5, sky
 39+  B52D 4C               defb    076 ; 6, slime
 40+  B52E 42               defb    066 ; 7, trapdoor
 41+  B52F 46               defb    070 ; 8, diamond
 42+  B530 42               defb    066 ; 9, rock
 43+  B531 42               defb    066 ; 10, rock 2
 44+  B532 49           	defb    073 ; 11, sky, trapdoor
 45+  B533 43           	defb    067 ; 12, missile
 46+  B534 4A               defb    074 ; 13, sky, red ink (tank)
 47+  B535 46               defb    070 ; 14, gem
 48+  B536 4D               defb    077 ; 15, damaged mountain
 49+  B537 4D               defb    077 ; 16, damaged mountain 2
 50+  B538 4D               defb    077 ; 17, damaged mountain 3
 51+  B539 4D               defb    077 ; 18, damaged mountain 4
 52+  B53A 00           	defb 	000 ; 19, tank missile (not used
 53+  B53B 43           	defb    067 ; 20, missile active
 54+  B53C 42           	defb	066	; 21, the pit 1
 55+  B53D 42           	defb	066	; 22, the pit 2
 56+  B53E 42           	defb	066	; 23, the pit 3
 57+  B53F 42           	defb	066	; 24, the pit 4
 58+  B540 42           	defb	066	; 25, the pit 5
 59+  B541 64           	defb    100 ; 26, slime, green on green
 60+  B542
 61+  B542
 62+  B542              player_sprite:
 63+  B542 10 39 92 FC  	defb	 16, 57,146,252, 56, 61,195,128 ; 0 up/down 1
 63+  B546 38 3D C3 80
 64+  B54A 08 1C 08 FC  	defb	  8, 28,  8,252, 60, 28, 22, 50 ; 1 left 1
 64+  B54E 3C 1C 16 32
 65+  B552 10 38 10 3F      defb   	 16, 56, 16, 63, 60, 56,104, 76 ; 2 right 1
 65+  B556 3C 38 68 4C
 66+  B55A 08 9C 49 3F  	defb	  8,156, 73, 63, 28,188,195,  1 ; 3 up/down 2
 66+  B55E 1C BC C3 01
 67+  B562 08 1C 08 FC  	defb	  8, 28,  8,252, 60, 60,100, 12; 4 left 2
 67+  B566 3C 3C 64 0C
 68+  B56A 10 38 10 3F  	defb	 16, 56, 16, 63, 60, 60, 38, 48 ; 5 right 2
 68+  B56E 3C 3C 26 30
 69+  B572 54 28 10 12  	defb	 84, 40, 16, 18, 30, 92,253, 95 ; 6 shoot up
 69+  B576 1E 5C FD 5F
 70+  B57A 02 87 42 BF  	defb	 2,135, 66,191, 79,143, 25,  3  ; 7 shoot left
 70+  B57E 4F 8F 19 03
 71+  B582 40 E1 42 FD  	defb	 64,225, 66,253,242,241,152,192 ; 8 shoot right
 71+  B586 F2 F1 98 C0
 72+  B58A FA BF 3A 78  	defb	 250,191, 58,120, 72,  8, 20, 42 ; 9 shoot down
 72+  B58E 48 08 14 2A
 73+  B592 92 BA 94 78  	defb 	 146,186,148,120, 56,120, 68,195 ; 10 crushed 1
 73+  B596 38 78 44 C3
 74+  B59A 49 5D 29 1E  	defb	  73, 93, 41, 30, 28, 30, 34,195 ; 11 crushed 2
 74+  B59E 1C 1E 22 C3
 75+  B5A2
 76+  B5A2              ;
 77+  B5A2              ; First 4 top half, next 4 bottom 1, next 4 bottom 2
 78+  B5A2              ;
 79+  B5A2              ship_sprite:
 80+  B5A2 00 00 00 01  	defb	  0,  0,  0,  1,  3, 31,127,255
 80+  B5A6 03 1F 7F FF
 81+  B5AA 1F 01 7F FF  	defb	 31,  1,127,255,255,255,255,255
 81+  B5AE FF FF FF FF
 82+  B5B2 F8 80 FE FF  	defb	248,128,254,255,255,255,255,255
 82+  B5B6 FF FF FF FF
 83+  B5BA 00 00 00 80  	defb	  0,  0,  0,128,192,248,254,255
 83+  B5BE C0 F8 FE FF
 84+  B5C2 B3 B3 7F 1F  	defb	179,179,127, 31,  3,  3,  2,  7
 84+  B5C6 03 03 02 07
 85+  B5CA 8F 8F FF FF  	defb	143,143,255,255,255, 15,  7,131
 85+  B5CE FF 0F 07 83
 86+  B5D2 0F 0F FF FF  	defb	 15, 15,255,255,255, 16, 32,193
 86+  B5D6 FF 10 20 C1
 87+  B5DA 19 19 FE F8  	defb	 25, 25,254,248,192,192, 64,224
 87+  B5DE C0 C0 40 E0
 88+  B5E2 98 98 7F 1F  	defb	152,152,127, 31,  3,  3,  2,  7
 88+  B5E6 03 03 02 07
 89+  B5EA F0 F0 FF FF  	defb	240,240,255,255,255,  8,  4,131
 89+  B5EE FF 08 04 83
 90+  B5F2 F1 F1 FF FF  	defb	241,241,255,255,255,240,224,193
 90+  B5F6 FF F0 E0 C1
 91+  B5FA CD CD FE F8  	defb	205,205,254,248,192,192, 64,224
 91+  B5FE C0 C0 40 E0
 92+  B602
 93+  B602              ;
 94+  B602              ;  First 8 frames are tank, last frame is the gun barrel
 95+  B602              ;
 96+  B602              tank_sprite:
 97+  B602 00 00 00 7F  	defb	  0,  0,  0,127,127,  0,  0,  0
 97+  B606 7F 00 00 00
 98+  B60A 01 03 FE FC  	defb	  1,  3,254,252,254,255,127, 64
 98+  B60E FE FF 7F 40
 99+  B612 FF FF 03 F9  	defb	255,255,  3,249,  3,255,255,  1
 99+  B616 03 FF FF 01
100+  B61A 00 00 C0 E0  	defb	  0,  0,192,224,224,192,  0,  0
100+  B61E E0 C0 00 00
101+  B622 3F 7F E1 FB  	defb	 63,127,225,251,247,225,127, 63
101+  B626 F7 E1 7F 3F
102+  B62A FF FF 16 52  	defb	255,255, 22, 82, 84, 22,255,255
102+  B62E 54 16 FF FF
103+  B632 FF FF A8 A9  	defb	255,255,168,169,155,168,255,255
103+  B636 9B A8 FF FF
104+  B63A FC FE 8F AF  	defb	252,254,143,175,159,175,254,252
104+  B63E 9F AF FE FC
105+  B642 00 00 00 1F  	defb	  0,  0,  0, 31, 31,  0,  0,  0 ; +64
105+  B646 1F 00 00 00
106+  B64A
107+  B64A              monster_sprite:
108+  B64A 02 40 06 60  	defb	  2, 64,  6, 96, 11,208, 22,104
108+  B64E 0B D0 16 68
109+  B652 19 98 17 E8  	defb	 25,152, 23,232, 53,172,127,254
109+  B656 35 AC 7F FE
110+  B65A FE 7F EC 37  	defb	254,127,236, 55,143,241,143,241
110+  B65E 8F F1 8F F1
111+  B662 08 10 08 10  	defb	  8, 16,  8, 16, 24, 24,  0,  0		; frame 1
111+  B666 18 18 00 00
112+  B66A 02 40 06 60  	defb	  2, 64,  6, 96, 11,208, 22,104
112+  B66E 0B D0 16 68
113+  B672 19 98 17 E8  	defb	 25,152, 23,232,245,175,255,255
113+  B676 F5 AF FF FF
114+  B67A BC 3D 0E 70  	defb	188, 61, 14,112, 15,240, 15,240
114+  B67E 0F F0 0F F0
115+  B682 10 08 30 0C  	defb	 16,  8, 48, 12,  0,  0,  0,  0		; frame 2
115+  B686 00 00 00 00
# file closed: graphics/graphics.asm
 35   B68A
 36   B68A                  include "game\control.asm"
# file opened: game/control.asm
  1+  B68A              ;
  2+  B68A              ; Check the keyboard then move
  3+  B68A              ;
  4+  B68A              control_keyboard:
  5+  B68A 3A 18 BB         ld a,(player+11)    ; first, check if player is dying
  6+  B68D FE 00            cp 0
  7+  B68F C0               ret nz               ; if so, can't move
  8+  B690 3A 12 BB         ld a,(player+5)      ; next, check if the player has pixels left to move
  9+  B693 FE 00            cp 0
 10+  B695 CA 9C B6         jp z, control_keyboard5
 11+  B698 CD A1 B7         call control_automove
 12+  B69B C9               ret
 13+  B69C              control_keyboard5:
 14+  B69C 3A 13 BB         ld a,(player+6)      ; next, check if the player is digging
 15+  B69F FE 00            cp 0
 16+  B6A1 CA A8 B6         jp z, control_keyboard0
 17+  B6A4 CD DF B6         call control_dig
 18+  B6A7 C9               ret
 19+  B6A8              control_keyboard0:
 20+  B6A8 01 FE FB         ld bc,64510         ; port for keyboard row q-t.
 21+  B6AB ED 78            in a,(c)            ; read keyboard.
 22+  B6AD 47               ld b,a              ; store result in b register.
 23+  B6AE CB 18            rr b                ; check outermost key (q).
 24+  B6B0 D2 CF B6         jp nc,control_keyboard1
 25+  B6B3 01 FE FD         ld bc,65022         ; port for keyboard row a-f.
 26+  B6B6 ED 78            in a,(c)            ; read keyboard.
 27+  B6B8 47               ld b,a              ; store result in b register.
 28+  B6B9 CB 18            rr b                ; check outermost key (a).
 29+  B6BB D2 D3 B6         jp nc,control_keyboard2
 30+  B6BE 01 FE DF         ld bc,57342         ; port for keyboard row y-p.
 31+  B6C1 ED 78            in a,(c)            ; read keyboard.
 32+  B6C3 47               ld b,a              ; store result in b register.
 33+  B6C4 CB 18            rr b                ; check outermost key (p).
 34+  B6C6 D2 D7 B6         jp nc,control_keyboard3
 35+  B6C9 CB 18            rr b                ; check next key.
 36+  B6CB D2 DB B6         jp nc,control_keyboard4
 37+  B6CE C9               ret
 38+  B6CF              control_keyboard1:
 39+  B6CF CD EA B7         call control_pl_moveup         ; player up.
 40+  B6D2 C9               ret
 41+  B6D3              control_keyboard2:
 42+  B6D3 CD 19 B8         call control_pl_movedown       ; player down.
 43+  B6D6 C9               ret
 44+  B6D7              control_keyboard3:
 45+  B6D7 CD 76 B8         call control_pl_moveright       ; player left.
 46+  B6DA C9               ret
 47+  B6DB              control_keyboard4:
 48+  B6DB CD 46 B8         call control_pl_moveleft       ; player right.
 49+  B6DE C9               ret
 50+  B6DF
 51+  B6DF              ;
 52+  B6DF              ; Performs a dig if the counter has reset, otherwise, messes with the graphics
 53+  B6DF              ;
 54+  B6DF              control_dig:
 55+  B6DF ED 4B 0D BB      ld bc,(player)      ; load the current coords into bc
 56+  B6E3 C5               push bc
 57+  B6E4 3A 0F BB         ld a,(player+2)     ; get the direction
 58+  B6E7 FE 01            cp 1                ; left
 59+  B6E9 CA 01 B7         jp z,control_dig0
 60+  B6EC FE 02            cp 2                ; right
 61+  B6EE CA 16 B7         jp z,control_dig1
 62+  B6F1 FE 03            cp 3                ; down
 63+  B6F3 CA 3A B7         jp z,control_dig5
 64+  B6F6 FE 00            cp 0                ; up
 65+  B6F8 CA 2A B7         jp z,control_dig4
 66+  B6FB 21 13 BB         ld hl,player+6
 67+  B6FE 36 00            ld (hl),0           ; turn off digging
 68+  B700 C9               ret                 ; return
 69+  B701              control_dig0:           ; going left
 70+  B701 CD 8F AA         call sprites_scadd  ; get the current coord
 71+  B704 62 6B            ld hl,de
 72+  B706 2B               dec hl              ; move one left
 73+  B707 C1               pop bc              ; get the coords back, subtract 8 from horiz, 8 from vert, store (will be coords of space above dug dirt)
 74+  B708 78               ld a,b
 75+  B709 06 08            ld b,8
 76+  B70B 90               sub b
 77+  B70C 47               ld b,a
 78+  B70D 79               ld a,c
 79+  B70E 0E 08            ld c,8
 80+  B710 91               sub c
 81+  B711 4F               ld c,a
 82+  B712 C5               push bc
 83+  B713 C3 43 B7         jp control_dig2
 84+  B716              control_dig1:
 85+  B716 CD 8F AA         call sprites_scadd  ; get the current coord
 86+  B719 62 6B            ld hl,de
 87+  B71B 23               inc hl              ; move one right
 88+  B71C C1               pop bc              ; get the coords back, add 8 to horiz, subtract 8 from vert store (will be coords of space above dug dirt)
 89+  B71D 3E 08            ld a,8
 90+  B71F 80               add a,b
 91+  B720 47               ld b,a
 92+  B721 79               ld a,c
 93+  B722 0E 08            ld c,8
 94+  B724 91               sub c
 95+  B725 4F               ld c,a
 96+  B726 C5               push bc
 97+  B727 C3 43 B7         jp control_dig2
 98+  B72A              control_dig4:
 99+  B72A CD 8F AA         call sprites_scadd  ; get the current coord
100+  B72D 62 6B            ld hl,de
101+  B72F 11 20 00         ld de,32
102+  B732 ED 52            sbc hl,de             ; move one up
103+  B734 C1               pop bc              ; get the coords back, 1 from vert, store, then we'll sub 1 from c for each row later
104+  B735 0D               dec c
105+  B736 C5               push bc
106+  B737 C3 5B B7         jp control_dig6
107+  B73A              control_dig5:
108+  B73A CD 8F AA         call sprites_scadd  ; get the current coord
109+  B73D 62 6B            ld hl,de
110+  B73F 24               inc h              ; move one down
111+  B740                                     ; not bothered about working out bc here, since rock will never fall if digging down
112+  B740 C3 43 B7         jp control_dig2
113+  B743              ; Normal (not up) digging
114+  B743              control_dig2:
115+  B743 3A 15 BB         ld a,(player+8)     ; get the number of rows we need to overwrite
116+  B746 47               ld b,a              ; rows to copy over
117+  B747 E5               push hl             ; store the memory location of the first row for later
118+  B748              control_dig3:
119+  B748 CD 8A B7         call control_getpixelrow
120+  B74B 77               ld (hl),a           ; load contents into row
121+  B74C 11 20 00         ld de,32
122+  B74F 19               add hl,de           ; move to next row
123+  B750 10 F6            djnz control_dig3
124+  B752 E1               pop hl              ; get the original memory location back
125+  B753 11 20 00         ld de,32
126+  B756 ED 52            sbc hl,de           ; move to above row, ready for checking for rock
127+  B758 C3 71 B7         jp control_dig10
128+  B75B              ; Special case for going up
129+  B75B              control_dig6:
130+  B75B 3A 15 BB         ld a,(player+8)     ; get the number of rows we need to overwrite
131+  B75E 47               ld b,a              ; rows to copy over
132+  B75F              control_dig7:
133+  B75F CD 8A B7         call control_getpixelrow
134+  B762              control_dig12:
135+  B762 77               ld (hl),a           ; load empty into row
136+  B763 11 20 00         ld de,32
137+  B766 ED 52            sbc hl,de           ; move up to next row
138+  B768 0D               dec c               ; decrease c to track rows
139+  B769 10 F4            djnz control_dig7
140+  B76B 79               ld a,c
141+  B76C D6 07            sub 7
142+  B76E C1               pop bc
143+  B76F 4F               ld c,a
144+  B770 C5               push bc             ; store the decreased c coord
145+  B771              control_dig10:
146+  B771 DD 21 14 BB      ld ix,player+7
147+  B775 DD 7E 00         ld a,(ix)     ; get the dig frame number
148+  B778 3D               dec a
149+  B779 DD 77 00         ld (ix),a
150+  B77C                  ; call the check for rocks above the removed dirt
151+  B77C DD 21 13 BB      ld ix,player+6
152+  B780 DD 7E 00         ld a,(ix)     ; get the dig state
153+  B783 FE 00            cp 0
154+  B785 C1               pop bc
155+  B786 CC F8 BF         call z, rocks_checkforfalling ; make the check if we're no longer digging
156+  B789 C9               ret
157+  B78A
158+  B78A              ;
159+  B78A              ; Gets a modified pixel row to overwrite dirt - if this is the last dig, overwrite with nothing, otherwise xor to flip the dirt
160+  B78A              ; Inputs:
161+  B78A              ; hl - memory of pixel row
162+  B78A              ; Outputs:
163+  B78A              ; a - modified row to write
164+  B78A              ;
165+  B78A              control_getpixelrow:
166+  B78A 3A 14 BB         ld a,(player+7)     ; get the dig frame number
167+  B78D FE 00            cp 0                ; is this the last dig
168+  B78F CA 96 B7         jp z,control_getpixelrow1
169+  B792 7E               ld a,(hl)           ; if not, xor with 255 to flip it
170+  B793 EE FF            xor 255
171+  B795 C9               ret
172+  B796              control_getpixelrow1:
173+  B796 DD 21 13 BB      ld ix,player+6
174+  B79A DD 36 00 00      ld (ix),0           ; turn off digging
175+  B79E 3E 00            ld a,0              ; if it is, load with empty
176+  B7A0 C9               ret
177+  B7A1
178+  B7A1              ;
179+  B7A1              ; Auto move the player until pixels is zero
180+  B7A1              ;
181+  B7A1              control_automove:
182+  B7A1 5F               ld e,a              ; store the number of pixels left to move in e
183+  B7A2 ED 4B 0D BB      ld bc,(player)      ; load the current coords into bc
184+  B7A6 21 0F BB         ld hl,player+2      ; get the direction
185+  B7A9 7E               ld a,(hl)
186+  B7AA FE 03            cp 3                ; down
187+  B7AC CA C0 B7         jp z,control_automove3  ; don't need to do anything
188+  B7AF FE 00            cp 0                ; going up
189+  B7B1 CA CC B7         jp z,control_automove2
190+  B7B4 FE 01            cp 1                ; going left?
191+  B7B6 CA D8 B7         jp z,control_automove0
192+  B7B9 78               ld a,b
193+  B7BA 3C               inc a               ; if we're going right, increment a twice for two pixels
194+  B7BB 3C               inc a
195+  B7BC 47               ld b,a
196+  B7BD C3 DC B7         jp control_automove1
197+  B7C0              control_automove3:
198+  B7C0 79               ld a,c
199+  B7C1 3C               inc a
200+  B7C2 3C               inc a               ; if we're going down, increment twice
201+  B7C3 4F               ld c,a
202+  B7C4 FE 90            cp 144
203+  B7C6 CC A4 B8         call z, control_scroll_down
204+  B7C9 C3 DC B7         jp control_automove1
205+  B7CC              control_automove2:
206+  B7CC 79               ld a,c
207+  B7CD 3D               dec a
208+  B7CE 3D               dec a               ; if we're going up, decrement twice
209+  B7CF 4F               ld c,a
210+  B7D0 FE 60            cp 96
211+  B7D2 CC B1 B8         call z, control_scroll_up
212+  B7D5 C3 DC B7         jp control_automove1
213+  B7D8              control_automove0:
214+  B7D8 78               ld a,b
215+  B7D9 3D               dec a               ; if we're going left, decrement a twice
216+  B7DA 3D               dec a
217+  B7DB 47               ld b,a
218+  B7DC              control_automove1:
219+  B7DC ED 43 0D BB      ld (player),bc      ; and back to player
220+  B7E0 7B               ld a,e              ; now get the pixel count back
221+  B7E1 3D               dec a               ; decrease by one
222+  B7E2 21 12 BB         ld hl,player+5
223+  B7E5 77               ld (hl),a           ; copy back
224+  B7E6 CD 95 BC         call player_justmoved
225+  B7E9 C9               ret
226+  B7EA
227+  B7EA              ;
228+  B7EA              ; Moves the player up
229+  B7EA              ;
230+  B7EA              control_pl_moveup:
231+  B7EA C5               push bc
232+  B7EB ED 4B 0D BB      ld bc,(player)          ; get the current coords, b horiz, c vert
233+  B7EF 79               ld a,c                  ; load c into the acc
234+  B7F0 FE 18            cp 24
235+  B7F2 CA 12 B8         jp z,control_pl_moveup0 ; are we at the edge of the screen
236+  B7F5 FE 60            cp 96
237+  B7F7 CC B1 B8         call z, control_scroll_up
238+  B7FA CD 51 BA         call movement_checkcanmove_up ; check we can move up, e will be 1 if we can
239+  B7FD F5               push af
240+  B7FE 7B               ld a,e                  ; put e in a
241+  B7FF FE 00            cp 0
242+  B801 CA 11 B8         jp z,control_pl_moveup1 ; don't move if we can't
243+  B804 F1               pop af
244+  B805 D6 01            sub 1                   ; subtract 1
245+  B807 D6 01            sub 1                   ; subtract 1
246+  B809 4F               ld c,a                  ; load back to c
247+  B80A ED 43 0D BB      ld (player),bc          ; load back to player
248+  B80E C3 12 B8         jp control_pl_moveup0
249+  B811              control_pl_moveup1:
250+  B811 F1               pop af                  ; restore af if needed
251+  B812              control_pl_moveup0:
252+  B812 3E 00            ld a,0
253+  B814 32 0F BB         ld (player+2),a        ; set direction to up
254+  B817 C1               pop bc
255+  B818 C9               ret
256+  B819              ;
257+  B819              ; Moves the player down
258+  B819              ;
259+  B819              control_pl_movedown:
260+  B819 C5               push bc
261+  B81A ED 4B 0D BB      ld bc,(player)          ; get the current coords, b horiz, c vert
262+  B81E 79               ld a,c                  ; load c into the acc
263+  B81F FE E0            cp 224
264+  B821 CA 3F B8         jp z,control_pl_movedown0 ; are we at the edge of the screen
265+  B824 FE 80            cp 128
266+  B826 CC A4 B8         call z, control_scroll_down
267+  B829 CD 25 BA         call movement_checkcanmove_down ; check we can move down, e will be 1 if we can
268+  B82C F5               push af
269+  B82D 7B               ld a,e                  ; put e in a
270+  B82E FE 00            cp 0
271+  B830 CA 3E B8         jp z,control_pl_movedown1 ; don't move if we can't
272+  B833 F1               pop af
273+  B834 3C               inc a                   ; add 1
274+  B835 3C               inc a                   ; add 1
275+  B836 4F               ld c,a                  ; load back to c
276+  B837 ED 43 0D BB      ld (player),bc          ; load back to player
277+  B83B C3 3F B8         jp control_pl_movedown0
278+  B83E              control_pl_movedown1:
279+  B83E F1               pop af                  ; restore af if needed
280+  B83F              control_pl_movedown0:
281+  B83F 3E 03            ld a,3
282+  B841 32 0F BB         ld (player+2),a        ; set direction to down
283+  B844 C1               pop bc
284+  B845 C9               ret
285+  B846              ;
286+  B846              ; Moves the player left
287+  B846              ;
288+  B846              control_pl_moveleft:
289+  B846 C5               push bc
290+  B847 ED 4B 0D BB      ld bc,(player)          ; get the current coords, b horiz, c vert
291+  B84B 78               ld a,b                  ; load b into the acc
292+  B84C FE 10            cp 16
293+  B84E CA 6F B8         jp z,control_pl_moveleft0 ; are we at the edge of the screen
294+  B851 CD B0 BA         call movement_checkcanmove_left ; check we can move down, e will be 1 if we can
295+  B854 F5               push af
296+  B855 7B               ld a,e                  ; put e in a
297+  B856 FE 00            cp 0
298+  B858 CA 6E B8         jp z,control_pl_moveleft1 ; don't move if we can't
299+  B85B 21 12 BB         ld hl,player+5          ; need to store the amount of pixels still left to move in the player status
300+  B85E 3E 03            ld a,3
301+  B860 77               ld (hl),a
302+  B861 F1               pop af
303+  B862 D6 01            sub 1                    ; subtract 2
304+  B864 D6 01            sub 1
305+  B866 47               ld b,a                  ; load back to c
306+  B867 ED 43 0D BB      ld (player),bc          ; load back to player
307+  B86B C3 6F B8         jp control_pl_moveleft0
308+  B86E              control_pl_moveleft1:
309+  B86E F1               pop af
310+  B86F              control_pl_moveleft0:
311+  B86F 3E 01            ld a,1
312+  B871 32 0F BB         ld (player+2),a        ; set direction to left
313+  B874 C1               pop bc
314+  B875 C9               ret
315+  B876              ;
316+  B876              ; Moves the player right
317+  B876              ;
318+  B876              control_pl_moveright:
319+  B876 C5               push bc
320+  B877 ED 4B 0D BB      ld bc,(player)          ; get the current coords, b horiz, c vert
321+  B87B 78               ld a,b                  ; load b into the acc
322+  B87C FE F0            cp 240
323+  B87E CA 9D B8         jp z,control_pl_moveright0 ; are we at the edge of the screen
324+  B881 CD 84 BA         call movement_checkcanmove_right ; check we can move down, e will be 1 if we can
325+  B884 F5               push af
326+  B885 7B               ld a,e                  ; put e in a
327+  B886 FE 00            cp 0
328+  B888 CA 9C B8         jp z,control_pl_moveright1 ; don't move if we can't
329+  B88B 21 12 BB         ld hl,player+5          ; need to store the amount of pixels still left to move in the player status
330+  B88E 3E 03            ld a,3
331+  B890 77               ld (hl),a
332+  B891 F1               pop af
333+  B892 3C               inc a                   ; add 2
334+  B893 3C               inc a
335+  B894 47               ld b,a                  ; load back to b
336+  B895 ED 43 0D BB      ld (player),bc          ; load back to player
337+  B899 C3 9D B8         jp control_pl_moveright0
338+  B89C              control_pl_moveright1:
339+  B89C F1               pop af                  ; restore af if needed
340+  B89D              control_pl_moveright0:
341+  B89D 3E 02            ld a,2
342+  B89F 32 0F BB         ld (player+2),a        ; set direction to right
343+  B8A2 C1               pop bc
344+  B8A3 C9               ret
345+  B8A4
346+  B8A4              ;
347+  B8A4              ; Scrolls the screen down
348+  B8A4              ;
349+  B8A4              control_scroll_down:
350+  B8A4 F5               push af
351+  B8A5 3E 08            ld a,8
352+  B8A7 32 76 A7         ld (screen_offset),a
353+  B8AA F1               pop af
354+  B8AB 21 C3 A5         ld hl,buffer_updateall
355+  B8AE 36 01            ld (hl),1         ; flag as screen needing update
356+  B8B0 C9               ret
357+  B8B1
358+  B8B1              ;
359+  B8B1              ; Scrolls the screen up
360+  B8B1              ;
361+  B8B1              control_scroll_up:
362+  B8B1 F5               push af
363+  B8B2 3E 00            ld a,0
364+  B8B4 32 76 A7         ld (screen_offset),a
365+  B8B7 F1               pop af
366+  B8B8 21 C3 A5         ld hl,buffer_updateall
367+  B8BB 36 01            ld (hl),1         ; flag as screen needing update
368+  B8BD C9               ret
369+  B8BE
370+  B8BE
371+  B8BE
372+  B8BE
# file closed: game/control.asm
 37   B8BE                  include "game\movement.asm"
# file opened: game/movement.asm
  1+  B8BE              ;
  2+  B8BE              ; Checks the contents of a cell are empty - ie, all pixel rows are zero
  3+  B8BE              ; Inputs:
  4+  B8BE              ; hl - memory location of top pixel row
  5+  B8BE              ; bc - screen coords, b horiz, c vert
  6+  B8BE              ; Outputs:
  7+  B8BE              ; e - 0 if not empty, 1 if empty
  8+  B8BE              ;
  9+  B8BE              movement_spaceisempty:
 10+  B8BE C5               push bc
 11+  B8BF E5               push hl
 12+  B8C0 CD E8 B8         call movement_spaceisgem        ; check if space is a gem
 13+  B8C3 E1               pop hl
 14+  B8C4 C1               pop bc
 15+  B8C5 7B               ld a,e
 16+  B8C6 FE 01            cp 1
 17+  B8C8 C8               ret z                           ; if e is 1, space is a gem so can move here, return
 18+  B8C9 3E 08            ld a,8                          ; 8 rows to check
 19+  B8CB              movement_spaceisempty0:
 20+  B8CB 08               ex af,af'                       ; store the loop counter
 21+  B8CC 7E               ld a,(hl)                       ; get current pixel row
 22+  B8CD FE 00            cp 0
 23+  B8CF C2 E3 B8         jp nz, movement_spaceisempty1    ; row is not empty, can't move here
 24+  B8D2 79               ld a,c                          ; load the vertical coord
 25+  B8D3 3C               inc a                           ; next row down
 26+  B8D4 11 20 00         ld de,32
 27+  B8D7 19               add hl,de                       ; otherwise, just go one down for hl, which means add 32, because of course
 28+  B8D8 4F               ld c,a                          ; copy vert coord back to c
 29+  B8D9 08               ex af,af'                       ; get loop counter back
 30+  B8DA 3D               dec a                           ; decrease loop counter
 31+  B8DB C2 CB B8         jp nz, movement_spaceisempty0
 32+  B8DE 16 00            ld d,0
 33+  B8E0 1E 01            ld e,1                          ; got to end, so space is empty
 34+  B8E2 C9               ret
 35+  B8E3              movement_spaceisempty1:
 36+  B8E3 16 00            ld d,0
 37+  B8E5 1E 00            ld e,0                          ; returning false, ie space not empty
 38+  B8E7 C9               ret
 39+  B8E8
 40+  B8E8              ;
 41+  B8E8              ; Check if a space contains a gem
 42+  B8E8              ; Inputs:
 43+  B8E8              ; bc - screen coords
 44+  B8E8              ; Outputs:
 45+  B8E8              ; e = 1 if gem
 46+  B8E8              movement_spaceisgem:
 47+  B8E8 CD C8 A8         call screen_getcharcoordsfromscreencoords   ; get the char coords we're checking into bc
 48+  B8EB 21 CA B3         ld hl,level01diamonds           ; check diamonds first
 49+  B8EE              movement_spaceisgem0:
 50+  B8EE 5E 23 56 2B      ld de,(hl)                      ; get gem coords into de
 51+  B8F2 7B               ld a,e                          ; check for end of data
 52+  B8F3 FE FF            cp 255
 53+  B8F5 CA 10 B9         jp z,movement_spaceisgem1       ; if yes, done with diamonds
 54+  B8F8 23               inc hl
 55+  B8F9 23               inc hl                          ; move to state
 56+  B8FA 7E               ld a,(hl)
 57+  B8FB 23               inc hl
 58+  B8FC 23               inc hl
 59+  B8FD 23               inc hl                          ; get to next
 60+  B8FE FE 01            cp 1                            ; check if collected
 61+  B900 CA EE B8         jp z,movement_spaceisgem0       ; if yes, move to next diamond
 62+  B903 7B               ld a,e                          ; load e again
 63+  B904 B9               cp c                            ; otherwise, compare c with e
 64+  B905 C2 EE B8         jp nz,movement_spaceisgem0      ; if different, move to next diamond
 65+  B908 7A               ld a,d                          ; get d coord
 66+  B909 B8               cp b                            ; compare b with d
 67+  B90A C2 EE B8         jp nz,movement_spaceisgem0      ; if different, move to next diamond
 68+  B90D 1E 01            ld e,1                          ; otherwise, exit with e = 1
 69+  B90F C9               ret
 70+  B910              movement_spaceisgem1:
 71+  B910 21 DA B3         ld hl,level01gems              ; check gems
 72+  B913              movement_spaceisgem2:
 73+  B913 5E 23 56 2B      ld de,(hl)                      ; get gem coords into de
 74+  B917 7B               ld a,e                          ; check for end of data
 75+  B918 FE FF            cp 255
 76+  B91A CA 35 B9         jp z,movement_spaceisgem3       ; if yes, done with gems
 77+  B91D 23               inc hl
 78+  B91E 23               inc hl                          ; move to state
 79+  B91F 7E               ld a,(hl)
 80+  B920 23               inc hl
 81+  B921 23               inc hl
 82+  B922 23               inc hl                          ; get to next
 83+  B923 FE 01            cp 1                            ; check if collected
 84+  B925 CA 13 B9         jp z,movement_spaceisgem2       ; if yes, move to next diamond
 85+  B928 7B               ld a,e                          ; load e again
 86+  B929 B9               cp c                            ; otherwise, compare c with e
 87+  B92A C2 13 B9         jp nz,movement_spaceisgem2      ; if different, move to next gem
 88+  B92D 7A               ld a,d                          ; get d coord
 89+  B92E B8               cp b                            ; compare b with d
 90+  B92F C2 13 B9         jp nz,movement_spaceisgem2      ; if different, move to next gem
 91+  B932 1E 01            ld e,1                          ; otherwise, exit with e = 1
 92+  B934 C9               ret
 93+  B935              movement_spaceisgem3:
 94+  B935 1E 00            ld e,0                          ; nothing found, return e = 0
 95+  B937 C9               ret
 96+  B938
 97+  B938              ;
 98+  B938              ; Checks the line of a cell below is empty - ie, first pixel rows is zero
 99+  B938              ; Inputs:
100+  B938              ; hl - memory location of top pixel row
101+  B938              ; bc - screen coords, b horiz, c vert
102+  B938              ; Outputs:
103+  B938              ; e - 0 if not empty, 1 if empty
104+  B938              ;
105+  B938              movement_linebelowisempty:
106+  B938 C5               push bc
107+  B939 E5               push hl
108+  B93A CD E8 B8         call movement_spaceisgem        ; check if space is a gem
109+  B93D E1               pop hl
110+  B93E C1               pop bc
111+  B93F 7B               ld a,e
112+  B940 FE 01            cp 1
113+  B942 C8               ret z                           ; if e is 1, space is a gem so can move here, return
114+  B943 7E               ld a,(hl)                       ; get current pixel row
115+  B944 FE 00            cp 0
116+  B946 C2 4E B9         jp nz, movement_linebelowisempty1    ; row is not empty, can't move here
117+  B949 16 00            ld d,0
118+  B94B 1E 01            ld e,1                          ; got to end, so space is empty
119+  B94D C9               ret
120+  B94E              movement_linebelowisempty1:
121+  B94E 16 00            ld d,0
122+  B950 1E 00            ld e,0                          ; returning false, ie space not empty
123+  B952 C9               ret
124+  B953
125+  B953              ;
126+  B953              ; Checks the line of a cell above is empty - ie, last pixel rows are zero
127+  B953              ; Inputs:
128+  B953              ; hl - memory location of top pixel row
129+  B953              ; bc - screen coords, b horiz, c vert
130+  B953              ; Outputs:
131+  B953              ; e - 0 if not empty, 1 if empty
132+  B953              ;
133+  B953              movement_lineaboveisempty:
134+  B953 C5               push bc
135+  B954 E5               push hl
136+  B955 CD E8 B8         call movement_spaceisgem        ; check if space is a gem
137+  B958 E1               pop hl
138+  B959 C1               pop bc
139+  B95A 7B               ld a,e
140+  B95B FE 01            cp 1
141+  B95D C8               ret z
142+  B95E 7E               ld a,(hl)                       ; get current pixel row
143+  B95F FE 00            cp 0
144+  B961 C2 69 B9         jp nz, movement_lineaboveisempty1    ; row is not empty, can't move here
145+  B964 16 00            ld d,0
146+  B966 1E 01            ld e,1                          ; got to end, so space is empty
147+  B968 C9               ret
148+  B969              movement_lineaboveisempty1:
149+  B969 16 00            ld d,0
150+  B96B 1E 00            ld e,0                          ; returning false, ie space not empty
151+  B96D C9               ret
152+  B96E
153+  B96E              ;
154+  B96E              ; Checks the contents of a cell are diggable - ie, all pixel rows are dirt or empty
155+  B96E              ; Inputs:
156+  B96E              ; hl - memory location of top pixel row
157+  B96E              ; bc - screen coords, b horiz, c vert
158+  B96E              ; Outputs:
159+  B96E              ; none - puts player into digging mode
160+  B96E              ;
161+  B96E              movement_spaceisdiggable:
162+  B96E 3E 08            ld a,8                          ; 8 rows to check
163+  B970              movement_spaceisdiggable0:
164+  B970 08               ex af,af'                       ; store the loop counter
165+  B971 7E               ld a,(hl)                       ; get current pixel row
166+  B972 FE 00            cp 0
167+  B974 CA 84 B9         jp z, movement_spaceisdiggable2  ; row is empty, can dig here
168+  B977 FE 55            cp 85
169+  B979 CA 84 B9         jp z, movement_spaceisdiggable2  ; row is dirt, can dig here
170+  B97C FE AA            cp 170
171+  B97E CA 84 B9         jp z, movement_spaceisdiggable2  ; row is dirt, can dig here
172+  B981 C3 9C B9         jp movement_spaceisdiggable1     ; otherwise, stop checking
173+  B984              movement_spaceisdiggable2:
174+  B984 79               ld a,c                          ; load the vertical coord
175+  B985 3C               inc a                           ; next row down
176+  B986 11 20 00         ld de,32
177+  B989 19               add hl,de                       ; otherwise, just go one down for hl, which means add 32, because of course
178+  B98A 4F               ld c,a                          ; copy vert coord back to c
179+  B98B 08               ex af,af'                       ; get loop counter back
180+  B98C 3D               dec a                           ; decrease loop counter
181+  B98D C2 70 B9         jp nz, movement_spaceisdiggable0
182+  B990 21 13 BB         ld hl,player+6
183+  B993 36 01            ld (hl),1                       ; set the player into digging mode
184+  B995 23               inc hl
185+  B996 36 05            ld (hl),5                      ; set the number of frame to dig for
186+  B998 23               inc hl
187+  B999 36 08            ld (hl),8                       ; set the number of pixels to dig
188+  B99B C9               ret
189+  B99C              movement_spaceisdiggable1:
190+  B99C 21 13 BB         ld hl,player+6
191+  B99F 36 00            ld (hl),0                       ; set the player out of digging mode
192+  B9A1 C9               ret
193+  B9A2
194+  B9A2              ;
195+  B9A2              ; Checks the contents of a cell below are diggable - ie, at least one pixel row has dirt. If the first one isn't dirt, stop
196+  B9A2              ; Inputs:
197+  B9A2              ; hl - memory location of top pixel row
198+  B9A2              ; bc - screen coords, b horiz, c vert
199+  B9A2              ; Outputs:
200+  B9A2              ; none - puts player into digging mode
201+  B9A2              ;
202+  B9A2              movement_spacebelowisdiggable:
203+  B9A2 7E               ld a,(hl)                       ; get first pixel row
204+  B9A3 FE 55            cp 85
205+  B9A5 CA B0 B9         jp z, movement_spacebelowisdiggable3  ; row is dirt, can dig here
206+  B9A8 FE AA            cp 170
207+  B9AA CA B0 B9         jp z, movement_spacebelowisdiggable3  ; row is dirt, can dig here
208+  B9AD C3 9C B9         jp movement_spaceisdiggable1    ; the first row is not dirt, so don't bother checking the rest, can't dig
209+  B9B0              movement_spacebelowisdiggable3:
210+  B9B0 3E 08            ld a,8                          ; rows to check
211+  B9B2 1E 00            ld e,0                          ; count of rows to dig
212+  B9B4              movement_spacebelowisdiggable0:
213+  B9B4 08               ex af,af'                       ; store the loop counter
214+  B9B5 7E               ld a,(hl)                       ; get current pixel row
215+  B9B6 FE 55            cp 85
216+  B9B8 CA C3 B9         jp z, movement_spacebelowisdiggable4  ; row is dirt, can dig here
217+  B9BB FE AA            cp 170
218+  B9BD CA C3 B9         jp z, movement_spacebelowisdiggable4  ; row is dirt, can dig here
219+  B9C0 C3 D2 B9         jp movement_spacebelowisdiggable5     ; don't count this row and stop counting
220+  B9C3              movement_spacebelowisdiggable4:
221+  B9C3 1C               inc e                           ; inc count of rows to dig
222+  B9C4              movement_spacebelowisdiggable2:
223+  B9C4 79               ld a,c                          ; load the vertical coord
224+  B9C5 3C               inc a                           ; next row down
225+  B9C6 D5               push de                         ; need e for later
226+  B9C7 11 20 00         ld de,32
227+  B9CA 19               add hl,de                       ; otherwise, just go one down for hl, which means add 32, because of course
228+  B9CB 4F               ld c,a                          ; copy vert coord back to c
229+  B9CC D1               pop de                          ; get e back
230+  B9CD 08               ex af,af'                       ; get loop counter back
231+  B9CE 3D               dec a                           ; incease loop counter
232+  B9CF C2 B4 B9         jp nz, movement_spacebelowisdiggable0
233+  B9D2              movement_spacebelowisdiggable5:
234+  B9D2 21 13 BB         ld hl,player+6
235+  B9D5 36 01            ld (hl),1                       ; set the player into digging mode
236+  B9D7 23               inc hl
237+  B9D8 36 03            ld (hl),3                      ; set the number of frame to dig for
238+  B9DA 23               inc hl
239+  B9DB 73               ld (hl),e                       ; set the number of pixels to dig
240+  B9DC C9               ret
241+  B9DD              movement_spacebelowisdiggable1:
242+  B9DD 21 13 BB         ld hl,player+6
243+  B9E0 36 00            ld (hl),0                       ; set the player out of digging mode
244+  B9E2 C9               ret
245+  B9E3
246+  B9E3              ;
247+  B9E3              ; Checks the contents of a cell above are diggable - ie, at least one pixel row has dirt. If the first one isn't dirt, stop
248+  B9E3              ; Inputs:
249+  B9E3              ; hl - memory location of top pixel row
250+  B9E3              ; bc - screen coords, b horiz, c vert
251+  B9E3              ; Outputs:
252+  B9E3              ; none - puts player into digging mode
253+  B9E3              ;
254+  B9E3              movement_spaceaboveisdiggable:
255+  B9E3 7E               ld a,(hl)                       ; get first pixel row
256+  B9E4 FE 55            cp 85
257+  B9E6 CA F1 B9         jp z, movement_spaceaboveisdiggable3  ; row is dirt, can dig here
258+  B9E9 FE AA            cp 170
259+  B9EB CA F1 B9         jp z, movement_spaceaboveisdiggable3  ; row is dirt, can dig here
260+  B9EE C3 9C B9         jp movement_spaceisdiggable1    ; the first row is not dirt, so don't bother checking the rest, can't dig
261+  B9F1              movement_spaceaboveisdiggable3:
262+  B9F1 3E 08            ld a,8                          ; rows to check
263+  B9F3 1E 00            ld e,0                          ; count of rows to dig
264+  B9F5              movement_spaceaboveisdiggable0:
265+  B9F5 08               ex af,af'                       ; store the loop counter
266+  B9F6 7E               ld a,(hl)                       ; get current pixel row
267+  B9F7 FE 55            cp 85
268+  B9F9 CA 04 BA         jp z, movement_spaceaboveisdiggable4  ; row is dirt, can dig here
269+  B9FC FE AA            cp 170
270+  B9FE CA 04 BA         jp z, movement_spaceaboveisdiggable4  ; row is dirt, can dig here
271+  BA01 C3 14 BA         jp movement_spaceaboveisdiggable5     ; don't count this row and stop counting
272+  BA04              movement_spaceaboveisdiggable4:
273+  BA04 1C               inc e                           ; inc count of rows to dig
274+  BA05              movement_spaceaboveisdiggable2:
275+  BA05 79               ld a,c                          ; load the vertical coord
276+  BA06 3D               dec a                           ; next row up
277+  BA07 D5               push de                         ; need e for later
278+  BA08 11 20 00         ld de,32
279+  BA0B ED 52            sbc hl,de                       ; otherwise, just go one up for hl, which means sub 32, because of course
280+  BA0D 4F               ld c,a                          ; copy vert coord back to c
281+  BA0E D1               pop de                          ; get e back
282+  BA0F 08               ex af,af'                       ; get loop counter back
283+  BA10 3D               dec a                           ; incease loop counter
284+  BA11 C2 F5 B9         jp nz, movement_spaceaboveisdiggable0
285+  BA14              movement_spaceaboveisdiggable5:
286+  BA14 21 13 BB         ld hl,player+6
287+  BA17 36 01            ld (hl),1                       ; set the player into digging mode
288+  BA19 23               inc hl
289+  BA1A 36 05            ld (hl),5                       ; set the number of frame to dig for
290+  BA1C 23               inc hl
291+  BA1D 73               ld (hl),e                       ; set the number of pixels to dig
292+  BA1E C9               ret
293+  BA1F              movement_spaceaboveisdiggable1:
294+  BA1F 21 13 BB         ld hl,player+6
295+  BA22 36 00            ld (hl),0                       ; set the player out of digging mode
296+  BA24 C9               ret
297+  BA25
298+  BA25              ;
299+  BA25              ; Checks if the player can move down
300+  BA25              ; Inputs:
301+  BA25              ; bc - player coords, b horiz, c vert
302+  BA25              ; Outputs:
303+  BA25              ; de - 1 can move
304+  BA25              movement_checkcanmove_down:
305+  BA25 F5               push af
306+  BA26 C5               push bc
307+  BA27 CD 8F AA         call sprites_scadd              ; get the memory location of cell into de
308+  BA2A 62 6B            ld hl,de                        ; look at cell directly underneath (add 256)
309+  BA2C 24               inc h                       ; memory location of cell beneath now in hl
310+  BA2D 3E 08            ld a,8                       ; look below
311+  BA2F 81               add c
312+  BA30 4F               ld c,a
313+  BA31 CD 38 B9         call movement_linebelowisempty       ; check space is empty
314+  BA34 7B               ld a,e                          ; check space empty flag
315+  BA35 FE 00            cp 0
316+  BA37 CA 40 BA         jp z, movement_checkcanmove_down1 ; can't move
317+  BA3A CD 95 BC         call player_justmoved
318+  BA3D C1               pop bc
319+  BA3E F1               pop af
320+  BA3F C9               ret
321+  BA40              movement_checkcanmove_down1:
322+  BA40 C1               pop bc
323+  BA41 CD 8F AA         call sprites_scadd              ; get the memory location of cell into de
324+  BA44 62 6B            ld hl,de                        ; look at cell directly underneath (add 256)
325+  BA46 24               inc h
326+  BA47 C5               push bc
327+  BA48 CD A2 B9         call movement_spacebelowisdiggable    ; can't move here, but can we dig
328+  BA4B 11 00 00         ld de,0
329+  BA4E C1               pop bc
330+  BA4F F1               pop af
331+  BA50 C9               ret
332+  BA51
333+  BA51              ;
334+  BA51              ; Checks if the player can move up
335+  BA51              ; Inputs:
336+  BA51              ; bc - player coords, b horiz, c vert
337+  BA51              ; Outputs:
338+  BA51              ; de - 1 can move
339+  BA51              movement_checkcanmove_up:
340+  BA51 F5               push af
341+  BA52 C5               push bc
342+  BA53 CD 8F AA         call sprites_scadd              ; get the memory location of cell into de
343+  BA56 62 6B            ld hl,de                        ; look at cell directly above (subtract 32)
344+  BA58 11 20 00         ld de,32
345+  BA5B ED 52            sbc hl,de                       ; memory location of line above now in hl
346+  BA5D 0D               dec c                           ; look above
347+  BA5E CD 53 B9         call movement_lineaboveisempty       ; check space is empty
348+  BA61 7B               ld a,e                          ; check space empty flag
349+  BA62 FE 00            cp 0
350+  BA64 CA 6F BA         jp z, movement_checkcanmove_up1 ; can't move
351+  BA67 1E 01            ld e,1
352+  BA69 CD 95 BC         call player_justmoved
353+  BA6C C1               pop bc
354+  BA6D F1               pop af
355+  BA6E C9               ret
356+  BA6F              movement_checkcanmove_up1:
357+  BA6F C1               pop bc
358+  BA70 CD 8F AA         call sprites_scadd              ; get the memory location of cell into de
359+  BA73 62 6B            ld hl,de                        ; look at cell directly above (subtract 32)
360+  BA75 11 20 00         ld de,32
361+  BA78 ED 52            sbc hl,de                       ; memory location of line above now in hl
362+  BA7A C5               push bc
363+  BA7B CD E3 B9         call movement_spaceaboveisdiggable    ; can't move here, but can we dig
364+  BA7E 11 00 00         ld de,0
365+  BA81 C1               pop bc
366+  BA82 F1               pop af
367+  BA83 C9               ret
368+  BA84
369+  BA84              ;
370+  BA84              ; Checks if the player can move right
371+  BA84              ; Inputs:
372+  BA84              ; bc - player coords, b horiz, c vert
373+  BA84              ; Outputs:
374+  BA84              ; de - 1 can move
375+  BA84              movement_checkcanmove_right:
376+  BA84 F5               push af
377+  BA85 C5               push bc
378+  BA86 CD 8F AA         call sprites_scadd              ; get the memory location of cell into de
379+  BA89 62 6B            ld hl,de                        ; look at cell directly to the right (add 1)
380+  BA8B 3E 08            ld a,8
381+  BA8D 80               add b                           ; move one cell right
382+  BA8E 47               ld b,a
383+  BA8F 23               inc hl                          ; memory location of cell to the right now in hl
384+  BA90 CD BE B8         call movement_spaceisempty       ; check space is empty
385+  BA93 7B               ld a,e                          ; check space empty flag
386+  BA94 FE 00            cp 0
387+  BA96 CA 9F BA         jp z, movement_checkcanmove_right1 ; can't move
388+  BA99 CD 95 BC         call player_justmoved
389+  BA9C C1               pop bc
390+  BA9D F1               pop af
391+  BA9E C9               ret
392+  BA9F              movement_checkcanmove_right1:
393+  BA9F C1               pop bc
394+  BAA0 CD 8F AA         call sprites_scadd              ; get the memory location of cell into de
395+  BAA3 62 6B            ld hl,de
396+  BAA5 23               inc hl                          ; memory location of cell to the right now in hl
397+  BAA6 C5               push bc
398+  BAA7 CD 6E B9         call movement_spaceisdiggable    ; can't move here, but can we dig
399+  BAAA 11 00 00         ld de,0
400+  BAAD C1               pop bc
401+  BAAE F1               pop af
402+  BAAF C9               ret
403+  BAB0
404+  BAB0              ;
405+  BAB0              ; Checks if the player can move left
406+  BAB0              ; Inputs:
407+  BAB0              ; bc - player coords, b horiz, c vert
408+  BAB0              ; Outputs:
409+  BAB0              ; de - 1 can move
410+  BAB0              movement_checkcanmove_left:
411+  BAB0 F5               push af
412+  BAB1 C5               push bc
413+  BAB2 CD 8F AA         call sprites_scadd              ; get the memory location of cell into de
414+  BAB5 62 6B            ld hl,de                        ; look at cell directly to the right (add 1)
415+  BAB7 78               ld a,b
416+  BAB8 06 08            ld b,8
417+  BABA 90               sub b                           ; move one cell left
418+  BABB 47               ld b,a
419+  BABC 2B               dec hl                          ; memory location of cell to the right now in hl
420+  BABD CD BE B8         call movement_spaceisempty       ; check space is empty
421+  BAC0 7B               ld a,e                          ; check space empty flag
422+  BAC1 FE 00            cp 0
423+  BAC3 CA CC BA         jp z, movement_checkcanmove_left1 ; can't move
424+  BAC6 CD 95 BC         call player_justmoved
425+  BAC9 C1               pop bc
426+  BACA F1               pop af
427+  BACB C9               ret
428+  BACC              movement_checkcanmove_left1:
429+  BACC C1               pop bc
430+  BACD CD 8F AA         call sprites_scadd              ; get the memory location of cell into de
431+  BAD0 62 6B            ld hl,de
432+  BAD2 2B               dec hl                          ; memory location of cell to the right now in hl
433+  BAD3 C5               push bc
434+  BAD4 CD 6E B9         call movement_spaceisdiggable    ; can't move here, but can we dig
435+  BAD7 11 00 00         ld de,0
436+  BADA C1               pop bc
437+  BADB F1               pop af
438+  BADC C9               ret
# file closed: game/movement.asm
 38   BADD                  include "game\game.asm"
# file opened: game/game.asm
  1+  BADD              ;
  2+  BADD              ; The current frame count, incremented each frame
  3+  BADD              ;
  4+  BADD              game_framenumber:
  5+  BADD 00               defb    0
  6+  BADE
  7+  BADE              ;
  8+  BADE              ; The number of players
  9+  BADE              ;
 10+  BADE              game_numberplayers:
 11+  BADE 01               defb 1
 12+  BADF
 13+  BADF              ;
 14+  BADF              ; The current player
 15+  BADF              ;
 16+  BADF              game_currentplayer:
 17+  BADF 01               defb 1
 18+  BAE0
 19+  BAE0              ;
 20+  BAE0              ; The default number of lives
 21+  BAE0              ;
 22+  BAE0              game_numberlives:
 23+  BAE0 04               defb 4
 24+  BAE1
 25+  BAE1              ;
 26+  BAE1              ; Moves to the next player
 27+  BAE1              ;
 28+  BAE1              game_changeplayer:
 29+  BAE1 3A DF BA         ld a,(game_currentplayer)
 30+  BAE4 FE 01            cp 1
 31+  BAE6 C8               ret z                       ; if just one player, no need to change
 32+  BAE7 3D               dec a                       ; otherwise decrease by one
 33+  BAE8 EE 01            xor 1                       ; xor with one to flip
 34+  BAEA 3C               inc a                       ; increment
 35+  BAEB 21 DF BA         ld hl,game_currentplayer
 36+  BAEE 77               ld (hl),a                   ; store
 37+  BAEF C9               ret
 38+  BAF0
 39+  BAF0              ;
 40+  BAF0              ; Sets the number of players at the start of the game
 41+  BAF0              ; Inputs:
 42+  BAF0              ; a - number of players
 43+  BAF0              game_setnumberofplayers:
 44+  BAF0 21 DE BA         ld hl,game_numberplayers
 45+  BAF3 77               ld (hl),a
 46+  BAF4
 47+  BAF4              ;
 48+  BAF4              ; Increment frame number by 1
 49+  BAF4              ;
 50+  BAF4              game_incrementframe:
 51+  BAF4 3A DD BA         ld a,(game_framenumber)
 52+  BAF7 FE FF            cp 255
 53+  BAF9 C2 FE BA         jp nz,game_incrementframe0
 54+  BAFC 3E 00            ld a,0
 55+  BAFE              game_incrementframe0:
 56+  BAFE 3C               inc a
 57+  BAFF 32 DD BA         ld (game_framenumber),a
 58+  BB02 C9               ret
 59+  BB03
 60+  BB03              ;
 61+  BB03              ; Returns current frame
 62+  BB03              ; Outputs:
 63+  BB03              ; a - current frame
 64+  BB03              ;
 65+  BB03              game_getcurrentframe:
 66+  BB03 3A DD BA         ld a,(game_framenumber)
 67+  BB06 C9               ret
 68+  BB07
 69+  BB07              ;
 70+  BB07              ; Resets current frame
 71+  BB07              ;
 72+  BB07              game_resetcurrentframe:
 73+  BB07 21 DD BA         ld hl,game_framenumber
 74+  BB0A 36 00            ld (hl),0
 75+  BB0C C9               ret
# file closed: game/game.asm
 39   BB0D                  include "game\player.asm"
# file opened: game/player.asm
  1+  BB0D              ;
  2+  BB0D              ;   Data for current player
  3+  BB0D              ;
  4+  BB0D              player:
  5+  BB0D 00 00            defb    0,0                 ; horiz,vert (+0,+1)
  6+  BB0F 02 00 01         defb    2,0,1               ; dir (0 up, 1 left, 2 right, 3 down), frame, frame transition count (+2,+3,+4)
  7+  BB12 00               defb    0                   ; auto move remaining (+5)
  8+  BB13 00 00 00         defb    0,0,0               ; is digging (0 no), digging count, pixels to di (+6,+7,+8)
  9+  BB16 00               defb    0                   ; lives remaining (+9)
 10+  BB17 00               defb    0                   ; died this life (+10)
 11+  BB18 00 00            defb    0,0                 ; crushed (+11), frames (+12)
 12+  BB1A 00               defb    0                   ; can finish level, whether can finish level or not (+13)
 13+  BB1B
 14+  BB1B              player_location:
 15+  BB1B 00               defb 0                      ; 0 normal, 1 diamond cavern, 2 the pit
 16+  BB1C
 17+  BB1C              ;
 18+  BB1C              ; Works out which part of the screen the player is in
 19+  BB1C              ; Pit is between 3,9 and 8,9
 20+  BB1C              ; Diamond cavern is between 11,22 and 22,28
 21+  BB1C              ;
 22+  BB1C              player_getlocation:
 23+  BB1C ED 4B 0D BB      ld bc,(player)              ; get screen coords
 24+  BB20 CD C8 A8         call screen_getcharcoordsfromscreencoords ; get char coords, c horiz
 25+  BB23 78               ld a,b                      ; check for pit first
 26+  BB24 FE 09            cp 9                        ; if not on this row, not in the pit
 27+  BB26 C2 35 BB         jp nz,player_getlocation0
 28+  BB29 79               ld a,c                      ; check horizontal
 29+  BB2A FE 08            cp 8
 30+  BB2C D2 35 BB         jp nc, player_getlocation0  ; if more than 8, not in the pit
 31+  BB2F 21 1B BB         ld hl,player_location
 32+  BB32 36 02            ld (hl),2                   ; load location with 2, the pit
 33+  BB34 C9               ret                         ; done
 34+  BB35              player_getlocation0:            ; check for diamond cavern
 35+  BB35 78               ld a,b                      ; first check vertical
 36+  BB36 FE 16            cp 22                       ; if above row 22, then not in cavern
 37+  BB38 DA 4C BB         jp c,player_getlocation1
 38+  BB3B 79               ld a,c                      ; get the horizontal next
 39+  BB3C FE 0B            cp 11
 40+  BB3E DA 4C BB         jp c,player_getlocation1    ; if less than 11 not in diamond cave
 41+  BB41 FE 16            cp 22
 42+  BB43 D2 4C BB         jp nc,player_getlocation1    ; if less than 11 not in diamond cave
 43+  BB46 21 1B BB         ld hl,player_location
 44+  BB49 36 01            ld (hl),1                   ; load location with 1, the cavern
 45+  BB4B C9               ret
 46+  BB4C              player_getlocation1:
 47+  BB4C 21 1B BB         ld hl,player_location
 48+  BB4F 36 00            ld (hl),0                   ; load location with 2, the pit
 49+  BB51 C9               ret                         ; done
 50+  BB52
 51+  BB52
 52+  BB52              ;
 53+  BB52              ; Initializes a player at start of game
 54+  BB52              ; Copy initial coords, copy lives, copy score
 55+  BB52              ;
 56+  BB52              player_init_gamestart:
 57+  BB52 3A E0 BA         ld a,(game_numberlives)
 58+  BB55 32 E1 BB         ld (player1_lives),a
 59+  BB58 32 E2 BB         ld (player2_lives),a                        ; set the initial number of lives at game start
 60+  BB5B
 61+  BB5B 21 E5 BB         ld hl,player1_score+2
 62+  BB5E 06 06            ld b,6
 63+  BB60              player_init_gamestart0:
 64+  BB60 36 30            ld (hl),48
 65+  BB62 23               inc hl
 66+  BB63 10 FB            djnz player_init_gamestart0                 ; zero out player 1 score
 67+  BB65 21 EE BB         ld hl,player2_score+2
 68+  BB68 06 06            ld b,6
 69+  BB6A              player_init_gamestart1:
 70+  BB6A 36 30            ld (hl),48
 71+  BB6C 23               inc hl
 72+  BB6D 10 FB            djnz player_init_gamestart1                 ; zero out player 2 score
 73+  BB6F C9               ret
 74+  BB70
 75+  BB70              ;
 76+  BB70              ; Initializes a player at start of a life
 77+  BB70              ; Copy initial coords, copy lives, copy score
 78+  BB70              ;
 79+  BB70              player_init_lifestart:
 80+  BB70 21 12 BB         ld hl,player+5
 81+  BB73 06 09            ld b,9                      ; initialise 9 properties
 82+  BB75              player_init_lifestart2:
 83+  BB75 36 00            ld (hl),0
 84+  BB77 23               inc hl
 85+  BB78 10 FB            djnz player_init_lifestart2
 86+  BB7A
 87+  BB7A 21 0F BB         ld hl,player+2              ; initialise some properties
 88+  BB7D 36 02            ld (hl),2
 89+  BB7F 23               inc hl
 90+  BB80 36 00            ld (hl),0
 91+  BB82 23               inc hl
 92+  BB83 36 01            ld (hl),1
 93+  BB85
 94+  BB85 ED 4B 22 80      ld bc,(init_coord)
 95+  BB89 ED 43 0D BB      ld (player),bc
 96+  BB8D 01 16 BB         ld bc,player+9
 97+  BB90 3A E1 BB         ld a,(player1_lives)
 98+  BB93 02               ld (bc),a
 99+  BB94
100+  BB94 CD 23 C3         call diamonds_init      ; initialise gems
101+  BB97
102+  BB97 01 06 00         ld bc,6
103+  BB9A 11 57 C1         ld de,scores_current+2
104+  BB9D 3A DF BA         ld a,(game_currentplayer)
105+  BBA0 FE 01            cp 1
106+  BBA2 C2 AB BB         jp nz,player_init_lifestart0
107+  BBA5 21 E5 BB         ld hl,player1_score+2
108+  BBA8 C3 AE BB         jp player_init_lifestart1
109+  BBAB              player_init_lifestart0:
110+  BBAB 21 EE BB         ld hl,player2_score+2
111+  BBAE              player_init_lifestart1:
112+  BBAE ED B0            ldir
113+  BBB0 C9               ret
114+  BBB1
115+  BBB1              ;
116+  BBB1              ; Finalises a player at end of a life
117+  BBB1              ; Copy lives, copy score
118+  BBB1              ;
119+  BBB1              player_lifeend:
120+  BBB1 01 16 BB         ld bc,player+9
121+  BBB4 0A               ld a,(bc)
122+  BBB5 01 E1 BB         ld bc,player1_lives
123+  BBB8 02               ld (bc),a
124+  BBB9 CD BD BB         call player_recordcurrentscore
125+  BBBC C9               ret
126+  BBBD
127+  BBBD              ;
128+  BBBD              ; Copies the current score in the current
129+  BBBD              ;
130+  BBBD              player_recordcurrentscore:
131+  BBBD 01 06 00         ld bc,6                  ; copy current score back to correct player
132+  BBC0 21 57 C1         ld hl,scores_current+2
133+  BBC3 3A DF BA         ld a,(game_currentplayer)
134+  BBC6 FE 01            cp 1
135+  BBC8 C2 D1 BB         jp nz,player_lifeend0
136+  BBCB 11 E5 BB         ld de,player1_score+2
137+  BBCE C3 D4 BB         jp player_lifeend1
138+  BBD1              player_lifeend0:
139+  BBD1 11 EE BB         ld de,player2_score+2
140+  BBD4              player_lifeend1:
141+  BBD4 ED B0            ldir
142+  BBD6 C9               ret
143+  BBD7
144+  BBD7              ;
145+  BBD7              ; Player just died, subtract a life
146+  BBD7              ;
147+  BBD7              player_died:
148+  BBD7 01 16 BB         ld bc,player+9
149+  BBDA 0A               ld a,(bc)
150+  BBDB 3D               dec a
151+  BBDC 02               ld (bc),a
152+  BBDD CD B1 BB         call player_lifeend
153+  BBE0 C9               ret
154+  BBE1
155+  BBE1              ;
156+  BBE1              ; Player lives
157+  BBE1              ;
158+  BBE1              player1_lives:
159+  BBE1 03               defb 3
160+  BBE2              player2_lives:
161+  BBE2 03               defb 3
162+  BBE3
163+  BBE3              ;
164+  BBE3              ; Player scores
165+  BBE3              ;
166+  BBE3              player1_score:
167+  BBE3 04 01 30 30      defb 4,1,'000000',255
167+  BBE7 30 30 30 30
167+  BBEB FF
168+  BBEC              player2_score:
169+  BBEC 16 01 30 30      defb 22,1,'000000',255
169+  BBF0 30 30 30 30
169+  BBF4 FF
170+  BBF5
171+  BBF5              ;
172+  BBF5              ; Kills a player this life
173+  BBF5              ;
174+  BBF5              player_killplayer:
175+  BBF5 21 17 BB         ld hl,player+10
176+  BBF8 36 01            ld (hl),1
177+  BBFA C9               ret
178+  BBFB
179+  BBFB              ;
180+  BBFB              ; Crush a player this life
181+  BBFB              ;
182+  BBFB              player_crushplayer:
183+  BBFB 21 18 BB         ld hl,player+11             ; mark as crushed
184+  BBFE 36 01            ld (hl),1
185+  BC00 C9               ret
186+  BC01
187+  BC01              player_tankkillplayer
188+  BC01 21 18 BB         ld hl,player+11             ; mark as tanked
189+  BC04 36 02            ld (hl),2
190+  BC06 C9               ret
191+  BC07
192+  BC07              player_zonkplayer
193+  BC07 21 18 BB         ld hl,player+11             ; mark as zonked (missile)
194+  BC0A 36 03            ld (hl),3
195+  BC0C C9               ret
196+  BC0D
197+  BC0D              ;
198+  BC0D              ; Draws the player at the current position or deletes them
199+  BC0D              ;
200+  BC0D              player_drawplayer:
201+  BC0D 3A 0F BB         ld a,(player+2)             ; get the current direction
202+  BC10 FE 03            cp 3
203+  BC12 C2 17 BC         jp nz,player_drawplayer0
204+  BC15 3E 00            ld a,0                      ; if 3, then down, so set the direction to 0 since the sprite is the same as up
205+  BC17              player_drawplayer0:
206+  BC17 5F               ld e,a                      ; store in e
207+  BC18 3A 18 BB         ld a,(player+11)             ; get the dying flag
208+  BC1B FE 01            cp 1
209+  BC1D CA 2F BC         jp z,player_drawplayer3     ; if it's one, we're being crushed
210+  BC20              player_drawplayer4:
211+  BC20 3A 13 BB         ld a,(player+6)             ; get the dig flag
212+  BC23 FE 01            cp 1
213+  BC25 CA 7E BC         jp z,player_drawplayer1    ; get dig frame
214+  BC28 3A 10 BB         ld a,(player+3)             ; this is normal movement so get the current frame
215+  BC2B 83               add a,e
216+  BC2C C3 83 BC         jp player_drawplayer2
217+  BC2F              player_drawplayer3:
218+  BC2F 21 19 BB         ld hl,player+12
219+  BC32 7E               ld a,(hl)                  ; crushing, so get the current anim flag
220+  BC33 FE 00            cp 0
221+  BC35 C2 3E BC         jp nz,player_drawplayer5    ; if this isn't zero, then this isn't the first time round, so do the crush anim
222+  BC38 3E 64            ld a,100
223+  BC3A 77               ld (hl),a                   ; otherwise, load up the anim frames
224+  BC3B C3 20 BC         jp player_drawplayer4       ; and return to the main loop to remove the current frame
225+  BC3E              player_drawplayer5:
226+  BC3E 3D               dec a
227+  BC3F 77               ld (hl),a
228+  BC40 FE 00            cp 0
229+  BC42 CC F5 BB         call z,player_killplayer     ; final animation, so kill the player
230+  BC45 FE 0A            cp 10                         ; play the sound
231+  BC47 CC 80 AE         call z, sound_rockfell
232+  BC4A FE 14            cp 20                        ; check if we should move the rock
233+  BC4C C2 60 BC         jp nz,player_drawplayer8
234+  BC4F D9               exx
235+  BC50 F5               push af
236+  BC51 ED 4B F6 BF      ld bc,(rocks_killerrock)    ; get the coords of the rock that killed us
237+  BC55 21 97 B4         ld hl,sprites+72
238+  BC58 CD 9A A9         call sprites_drawsprite     ; draw a rock over current
239+  BC5B F1               pop af
240+  BC5C D9               exx
241+  BC5D C3 77 BC         jp player_drawplayer6       ; continue drawing player
242+  BC60              player_drawplayer8:
243+  BC60 FE 14            cp 20
244+  BC62 D2 77 BC         jp nc,player_drawplayer6    ; if not in last 10 frames, draw as normal
245+  BC65 ED 4B 0D BB      ld bc,(player)
246+  BC69 CD C8 A8         call screen_getcharcoordsfromscreencoords ; get the char coords into bc
247+  BC6C 3E 42            ld a,66             ; load red
248+  BC6E CD 20 A9         call screen_setattr
249+  BC71 21 97 B4         ld hl,sprites+72            ; otherwise, player is rock
250+  BC74 C3 8D BC         jp player_drawplayer7
251+  BC77              player_drawplayer6:
252+  BC77 E6 01            and 1                       ; check for odd
253+  BC79 C6 0A            add 10                      ; add 10, to get either 10 or 11
254+  BC7B C3 83 BC         jp player_drawplayer2
255+  BC7E              player_drawplayer1:
256+  BC7E 3A 0F BB         ld a,(player+2)             ; digging, get the current direction again, because want all four
257+  BC81 C6 06            add a,6                     ; add direction to 6 to get frame
258+  BC83              player_drawplayer2:
259+  BC83 07               rlca
260+  BC84 07               rlca
261+  BC85 07               rlca                        ; multiply by eight
262+  BC86 6F               ld l,a
263+  BC87 26 00            ld h,0
264+  BC89 11 42 B5         ld de,player_sprite
265+  BC8C 19               add hl,de                   ; load hl with the location of the player sprite data
266+  BC8D              player_drawplayer7:
267+  BC8D ED 4B 0D BB      ld bc,(player)              ; load bc with the start coords
268+  BC91 CD 9A A9         call sprites_drawsprite     ; call the routine to draw the sprite
269+  BC94                  ;call player_storeupdatedlines ; log updated rows
270+  BC94 C9               ret
271+  BC95
272+  BC95
273+  BC95              ;
274+  BC95              ; Runs after the player just moved. Changes animation frame if required
275+  BC95              ;
276+  BC95              player_justmoved:
277+  BC95 D9               exx
278+  BC96 3A 11 BB         ld a,(player+4)             ; get the transition count
279+  BC99 FE 00            cp 0
280+  BC9B CA A1 BC         jp z, player_justmoved2     ; if zero reset and change the frame
281+  BC9E C3 BB BC         jp player_justmoved1       ; otherwise decrease and continue
282+  BCA1              player_justmoved2:
283+  BCA1                  ; reset and change frame in here
284+  BCA1 3E 01            ld a,1
285+  BCA3 32 11 BB         ld (player+4),a            ; reset back to whatever
286+  BCA6 3A 10 BB         ld a,(player+3)             ; load the frame
287+  BCA9 FE 03            cp 3                       ; flip between 3 and 0
288+  BCAB C2 B3 BC         jp nz, player_justmoved4
289+  BCAE 3E 00            ld a,0
290+  BCB0 C3 B5 BC         jp player_justmoved5
291+  BCB3              player_justmoved4:
292+  BCB3 3E 03            ld a,3
293+  BCB5              player_justmoved5:
294+  BCB5 32 10 BB         ld (player+3),a           ; save back
295+  BCB8 C3 BF BC         jp player_justmoved3
296+  BCBB              player_justmoved1:
297+  BCBB                  ; decrease count
298+  BCBB 3D               dec a
299+  BCBC 32 11 BB         ld (player+4),a
300+  BCBF              player_justmoved3:
301+  BCBF D9               exx;
302+  BCC0 C9               ret
303+  BCC1
304+  BCC1              ;
305+  BCC1              ; Called if the player has collected a diamond. Checks the current coord. If it is the start coord, then return complete
306+  BCC1              ; Outputs:
307+  BCC1              ; a - 1 for completed level
308+  BCC1              player_checkforexit:
309+  BCC1 ED 4B 0D BB      ld bc,(player)                 ; get player coords
310+  BCC5 ED 5B 22 80      ld de,(init_coord)             ; get start coords
311+  BCC9 78               ld a,b
312+  BCCA BA               cp d                         ; compare horiz
313+  BCCB C2 D6 BC         jp nz,player_checkforexit1
314+  BCCE 79               ld a,c
315+  BCCF BB               cp e                        ; compare vert
316+  BCD0 C2 D6 BC         jp nz,player_checkforexit1
317+  BCD3              player_checkforexit0:
318+  BCD3 3E 01            ld a,1                       ; hasn't completed
319+  BCD5 C9               ret
320+  BCD6              player_checkforexit1:
321+  BCD6 3E 00            ld a,0                       ; has completed
322+  BCD8 C9               ret
# file closed: game/player.asm
 40   BCD9                  include "game\ship.asm"
# file opened: game/ship.asm
  1+  BCD9              ;
  2+  BCD9              ; Ship initial position: vert,horiz
  3+  BCD9              ;
  4+  BCD9              ship_initpos:
  5+  BCD9 00 24            defb 0,36
  6+  BCDB              ship_initpos2:
  7+  BCDB 00 00            defb 0,0
  8+  BCDD              ship_frame:
  9+  BCDD 00               defb 0
 10+  BCDE              ;
 11+  BCDE              ; The current memory location
 12+  BCDE              ;
 13+  BCDE              ship_current_sprite:
 14+  BCDE 00 00            defb 0,0
 15+  BCE0
 16+  BCE0              ship_current_coords:
 17+  BCE0 00 00            defb 0,0
 18+  BCE2
 19+  BCE2              ship_process:
 20+  BCE2 3A 18 BB         ld a,(player+11)
 21+  BCE5 FE 02            cp 2                        ; has the player been killed by tank?
 22+  BCE7 C0               ret nz                      ; do nothing if not
 23+  BCE8 CD B1 B8         call control_scroll_up           ; make sure the screen is on the top screen
 24+  BCEB CD 5A BD         call ship_takeoff           ; bye bye
 25+  BCEE CD F5 BB         call player_killplayer      ; killed
 26+  BCF1 06 32            ld b,50
 27+  BCF3 CD 82 80         call utilities_pauseforframes
 28+  BCF6 C9               ret
 29+  BCF7
 30+  BCF7              ;
 31+  BCF7              ;   Draw and land the ship - first move the ship down, then across, drawing the player in the middle
 32+  BCF7              ;
 33+  BCF7              ship_land:
 34+  BCF7 ED 4B D9 BC      ld bc,(ship_initpos)
 35+  BCFB ED 43 DB BC      ld (ship_initpos2),bc        ; save the initial position for later use
 36+  BCFF 1E 00            ld e,0                      ; store a flag to track first time round
 37+  BD01 06 09            ld b,9                      ; move down 8 pixels
 38+  BD03              ship_land0:
 39+  BD03 C5               push bc
 40+  BD04 7B               ld a,e
 41+  BD05 D5               push de                     ; store de for next time round
 42+  BD06 FE 01            cp 1                        ; check first time flag
 43+  BD08 C2 1D BD         jp nz,ship_land1             ; don't draw over previous one if first time
 44+  BD0B CD A2 BD         call ship_draw_full         ; delete old one
 45+  BD0E CD 86 BD         call ship_change_frame      ; increment the frame
 46+  BD11 ED 4B DB BC      ld bc,(ship_initpos2)       ; get the current coords
 47+  BD15 81 C6 01         add c,1                     ; move down one pixels
 48+  BD18 4F               ld c,a
 49+  BD19 ED 43 DB BC      ld (ship_initpos2),bc
 50+  BD1D              ship_land1:
 51+  BD1D CD A2 BD         call ship_draw_full         ; draw the ship
 52+  BD20 CD 9B BD         call ship_draw_screen
 53+  BD23 D1               pop de
 54+  BD24 1E 01            ld e,1
 55+  BD26 C1               pop bc
 56+  BD27 10 DA            djnz ship_land0             ; repeat for downward movement
 57+  BD29                  ; done moving down
 58+  BD29                  ; now move across
 59+  BD29 CD 0D BC         call player_drawplayer      ; draw player
 60+  BD2C CD A2 BD         call ship_draw_full         ; delete old one
 61+  BD2F 1E 00            ld e,0                      ; store a flag to track first time round
 62+  BD31 06 14            ld b,20                      ; move back 20 pixels pixels
 63+  BD33              ship_land3:
 64+  BD33 C5               push bc
 65+  BD34 7B               ld a,e
 66+  BD35 D5               push de                     ; store de for next time round
 67+  BD36 FE 01            cp 1                        ; check first time flag
 68+  BD38 C2 4D BD         jp nz,ship_land2             ; don't draw over previous one if first time
 69+  BD3B CD A2 BD         call ship_draw_full         ; delete old one
 70+  BD3E CD 86 BD         call ship_change_frame      ; increment the frame
 71+  BD41 ED 4B DB BC      ld bc,(ship_initpos2)       ; get the current coords
 72+  BD45 78               ld a,b
 73+  BD46 D6 01            sub 1                       ; move back one pixels
 74+  BD48 47               ld b,a
 75+  BD49 ED 43 DB BC      ld (ship_initpos2),bc
 76+  BD4D              ship_land2:
 77+  BD4D CD A2 BD         call ship_draw_full         ; draw the ship
 78+  BD50 CD 9B BD         call ship_draw_screen       ; draw the frame to screen by clearing the buffer
 79+  BD53 D1               pop de
 80+  BD54 1E 01            ld e,1                      ; set e to 1 to indicate >1 time
 81+  BD56 C1               pop bc
 82+  BD57 10 DA            djnz ship_land3             ; repeat for vertical movement
 83+  BD59 C9               ret
 84+  BD5A
 85+  BD5A              ;
 86+  BD5A              ;   Take off the ship
 87+  BD5A              ;
 88+  BD5A              ship_takeoff:
 89+  BD5A 1E 01            ld e,1                      ; store a flag to track first time round
 90+  BD5C 06 08            ld b,8                      ; move up 8 pixels
 91+  BD5E              ship_takeoff0:
 92+  BD5E C5               push bc
 93+  BD5F 7B               ld a,e
 94+  BD60 D5               push de                     ; store de for next time round
 95+  BD61 FE 01            cp 1                        ; check first time flag
 96+  BD63 C2 79 BD         jp nz,ship_takeoff1             ; don't draw over previous one if first time
 97+  BD66 ED 4B DB BC      ld bc,(ship_initpos2)       ; get the current coords
 98+  BD6A CD A2 BD         call ship_draw_full         ; delete old one
 99+  BD6D CD 86 BD         call ship_change_frame      ; increment the frame
100+  BD70 ED 4B DB BC      ld bc,(ship_initpos2)       ; get the current coords
101+  BD74 0D               dec c                       ; move up one pixels
102+  BD75 ED 43 DB BC      ld (ship_initpos2),bc
103+  BD79              ship_takeoff1:
104+  BD79 CD A2 BD         call ship_draw_full         ; draw the ship
105+  BD7C CD 9B BD         call ship_draw_screen
106+  BD7F D1               pop de
107+  BD80 1E 01            ld e,1
108+  BD82 C1               pop bc
109+  BD83 10 D9            djnz ship_takeoff0             ; repeat for upward movement
110+  BD85                  ; done moving up
111+  BD85 C9               ret
112+  BD86
113+  BD86              ;
114+  BD86              ; Swap the animation frame between 0 and 32. This will be added to the memory location later
115+  BD86              ;
116+  BD86              ship_change_frame:
117+  BD86 F5               push af
118+  BD87 3A DD BC         ld a,(ship_frame)
119+  BD8A FE 00            cp 0
120+  BD8C CA 94 BD         jp z,ship_change_frame0
121+  BD8F 3E 00            ld a,0                      ; flip to 0
122+  BD91 C3 96 BD         jp ship_change_frame1
123+  BD94              ship_change_frame0:
124+  BD94 3E 20            ld a,32                      ; flip to 32
125+  BD96              ship_change_frame1:
126+  BD96 32 DD BC         ld (ship_frame),a            ; save the frame
127+  BD99 F1               pop af
128+  BD9A C9               ret
129+  BD9B
130+  BD9B              ship_draw_screen:
131+  BD9B 76               halt
132+  BD9C F3               di
133+  BD9D CD 9F A6         call buffer_buffertoscreen  ; copy buffer to screen
134+  BDA0 FB               ei                          ; enable interupts
135+  BDA1 C9               ret
136+  BDA2
137+  BDA2              ship_draw_full:
138+  BDA2 21 A2 B5         ld hl,ship_sprite
139+  BDA5 ED 4B DB BC      ld bc,(ship_initpos2)         ; load bc with the start coords
140+  BDA9 22 DE BC         ld (ship_current_sprite),hl  ; put into memory
141+  BDAC ED 43 E0 BC      ld (ship_current_coords),bc  ; put into memory
142+  BDB0 CD CF BD         call ship_draw
143+  BDB3 08               ex af,af'
144+  BDB4 3A DD BC         ld a,(ship_frame)            ; get the animation frame
145+  BDB7 16 00            ld d,0
146+  BDB9 5F               ld e,a
147+  BDBA 19               add hl,de
148+  BDBB 22 DE BC         ld (ship_current_sprite),hl  ; put into memory
149+  BDBE 08               ex af,af'
150+  BDBF ED 4B DB BC      ld bc,(ship_initpos2)         ; load bc with the start coords
151+  BDC3 81 C6 08         add c,8                      ; move one line down
152+  BDC6 4F               ld c,a
153+  BDC7 ED 43 E0 BC      ld (ship_current_coords),bc  ; put into memory
154+  BDCB CD CF BD         call ship_draw
155+  BDCE C9               ret
156+  BDCF
157+  BDCF              ;
158+  BDCF              ; Draw the ship
159+  BDCF              ; Inputs:
160+  BDCF              ; None, all in memory
161+  BDCF              ;
162+  BDCF              ship_draw:
163+  BDCF 3E 04            ld a,4                              ; 4 pieces per half
164+  BDD1              ship_draw0:
165+  BDD1 F5               push af
166+  BDD2 2A DE BC         ld hl,(ship_current_sprite)
167+  BDD5 ED 4B E0 BC      ld bc,(ship_current_coords)         ; load bc with the start coords
168+  BDD9 CD 9A A9         call sprites_drawsprite
169+  BDDC 2A DE BC         ld hl,(ship_current_sprite)
170+  BDDF ED 4B E0 BC      ld bc,(ship_current_coords)         ; load bc with the start coords
171+  BDE3 11 08 00         ld de,8
172+  BDE6 19               add hl,de
173+  BDE7 80 C6 08         add b,8
174+  BDEA 47               ld b,a
175+  BDEB 22 DE BC         ld (ship_current_sprite),hl         ; put into memory
176+  BDEE ED 43 E0 BC      ld (ship_current_coords),bc         ; put into memory
177+  BDF2 F1               pop af
178+  BDF3 3D               dec a
179+  BDF4 FE 00            cp 0
180+  BDF6 C2 D1 BD         jp nz,ship_draw0
181+  BDF9
182+  BDF9 C9               ret
183+  BDFA
# file closed: game/ship.asm
 41   BDFA                  include "game\tank.asm"
# file opened: game/tank.asm
  1+  BDFA              ;
  2+  BDFA              ; tank initial position: vert,horiz
  3+  BDFA              ;
  4+  BDFA              tank_initpos:
  5+  BDFA 10 D0            defb 16,208
  6+  BDFC              tank_initpos2:
  7+  BDFC 00 00            defb 0,0
  8+  BDFE              tank_frame:
  9+  BDFE 00               defb 0
 10+  BDFF              tank_anim:
 11+  BDFF 11               defb 17
 12+  BE00
 13+  BE00              ;
 14+  BE00              ; The damage countdown
 15+  BE00              ;
 16+  BE00              tank_currentdamage:
 17+  BE00 F0               defb 240
 18+  BE01
 19+  BE01              ;
 20+  BE01              ; The damage coordinate
 21+  BE01              ;
 22+  BE01              tank_currentdamagecoord:
 23+  BE01 16 02            defb 22,2
 24+  BE03
 25+  BE03              ;
 26+  BE03              ; Controls when the tank shoots
 27+  BE03              ;
 28+  BE03              tank_count:
 29+  BE03 00               defb 0
 30+  BE04
 31+  BE04              ;
 32+  BE04              ; Holds the block number of the current damage sprite
 33+  BE04              ;
 34+  BE04              tank_damageframe:
 35+  BE04 00               defb 0
 36+  BE05
 37+  BE05              ;
 38+  BE05              ; The current memory location
 39+  BE05              ;
 40+  BE05              tank_current_sprite:
 41+  BE05 00 00            defb 0,0
 42+  BE07
 43+  BE07              tank_current_coords:
 44+  BE07 00 00            defb 0,0
 45+  BE09
 46+  BE09              ;
 47+  BE09              ; Is the missile displayed - will be 19 if so, 0 if not
 48+  BE09              ;
 49+  BE09              tank_missile_displayed:
 50+  BE09 00               defb 0
 51+  BE0A
 52+  BE0A              ;
 53+  BE0A              ; Initialise the tank
 54+  BE0A              ;
 55+  BE0A              tank_init:
 56+  BE0A ED 4B FA BD      ld bc,(tank_initpos)
 57+  BE0E ED 43 FC BD      ld (tank_initpos2),bc       ; save the initial position for later use
 58+  BE12 21 FE BD         ld hl,tank_frame
 59+  BE15 36 00            ld (hl),0
 60+  BE17 21 FF BD         ld hl,tank_anim
 61+  BE1A 36 11            ld (hl),17
 62+  BE1C 21 04 BE         ld hl,tank_damageframe              ; reset tank
 63+  BE1F 36 00            ld (hl),0
 64+  BE21 21 03 BE         ld hl,tank_count
 65+  BE24 36 00            ld (hl),0
 66+  BE26 21 00 BE         ld hl,tank_currentdamage
 67+  BE29 36 F0            ld (hl),240
 68+  BE2B 21 01 BE         ld hl,tank_currentdamagecoord
 69+  BE2E 36 16            ld (hl),22
 70+  BE30 23               inc hl
 71+  BE31 36 02            ld (hl),2
 72+  BE33 21 09 BE         ld hl,tank_missile_displayed
 73+  BE36 36 00            ld (hl),0
 74+  BE38
 75+  BE38 C9               ret
 76+  BE39
 77+  BE39              ;
 78+  BE39              ;   Draw and move the tank
 79+  BE39              ;   Start processing at frame 200
 80+  BE39              ;   Don't move if anim is zero
 81+  BE39              ;   Decrement frame if moved
 82+  BE39              ;
 83+  BE39              tank_process:
 84+  BE39 3A FF BD         ld a,(tank_anim)
 85+  BE3C FE 00            cp 0
 86+  BE3E C2 45 BE         jp nz,tank_process0         ; fire the tank if we've already moved, or jump to movement
 87+  BE41 CD 56 BE         call tank_fire
 88+  BE44 C9               ret
 89+  BE45              tank_process0:
 90+  BE45 CD 03 BB         call game_getcurrentframe   ; get the current frame number into a
 91+  BE48 FE 4B            cp 75
 92+  BE4A D8               ret c                       ; return if the frame number is below 100
 93+  BE4B CD 6A BF         call tank_move              ; move tank if not
 94+  BE4E 3A FF BD         ld a,(tank_anim)
 95+  BE51 3D               dec a
 96+  BE52 32 FF BD         ld (tank_anim),a            ; decrease the anim count
 97+  BE55 C9               ret
 98+  BE56
 99+  BE56              ;
100+  BE56              ; Fires the tank
101+  BE56              ;
102+  BE56              tank_fire:
103+  BE56 3A 03 BE         ld a,(tank_count)            ; if not, don't do anything
104+  BE59 3C               inc a                        ; increment
105+  BE5A FE 19            cp 25                        ; have we reached fifty
106+  BE5C C2 61 BE         jp nz,tank_fire0
107+  BE5F 3E 00            ld a,0                       ; reset if reached fifty
108+  BE61              tank_fire0:                      ; DEALING WITH A NEW BLOCK
109+  BE61 32 03 BE         ld (tank_count),a            ; store tank count
110+  BE64 FE 00            cp 0
111+  BE66 CA 7D BE         jp z,tank_fire7              ; If this is zero, fire
112+  BE69 3A 09 BE         ld a,(tank_missile_displayed) ; is the missile displaying?
113+  BE6C FE 00            cp 0
114+  BE6E C8               ret z                       ; don't do anything if not
115+  BE6F CD 24 BF         call tank_missilegraphic     ; if not, overwrite the previous tank missile
116+  BE72 3E 00            ld a,0                       ; reset the flag
117+  BE74 32 09 BE         ld (tank_missile_displayed),a
118+  BE77 3E 02            ld a,2
119+  BE79 CD C4 A5         call buffer_marklineforupdate
120+  BE7C C9               ret                        ; only shoot if we're on 0
121+  BE7D              tank_fire7:
122+  BE7D 3A 00 BE         ld a,(tank_currentdamage)    ; get the damage countdown
123+  BE80 E6 07            and 7                       ; check if multiple of 8 - house keeping when moving onto a new block
124+  BE82 C2 B8 BE         jp nz,tank_fire1            ; not, so just do a normal frame
125+  BE85 ED 4B 01 BE      ld bc,(tank_currentdamagecoord) ; get the current damage coord into bc
126+  BE89 79               ld a,c
127+  BE8A FE 0A            cp 10
128+  BE8C C2 93 BE         jp nz, tank_fire6
129+  BE8F CD 5C BF         call tank_killedbytank      ; we're through, so the player has died. Kill them.
130+  BE92 C9               ret                         ; return if we're through the mountain
131+  BE93              tank_fire6:
132+  BE93 3E 0F            ld a,15
133+  BE95 32 04 BE         ld (tank_damageframe),a     ; reset the damage frame
134+  BE98 21 4F B4         ld hl,sprites               ; location of the empty block
135+  BE9B CD F2 A8         call screen_showchar        ; show this character here
136+  BE9E ED 4B 01 BE      ld bc,(tank_currentdamagecoord) ; get the current damage coord into bc
137+  BEA2 05               dec b                       ; look one above
138+  BEA3 CD 56 A9         call screen_ischarempty     ; check if it is empty
139+  BEA6 ED 4B 01 BE      ld bc,(tank_currentdamagecoord) ; get the current damage coord into bc again
140+  BEAA FE 01            cp 1
141+  BEAC C2 EF BE         jp nz,tank_fire2             ; block above isn't empty, so can't move on, copy down above blocks
142+  BEAF ED 4B 01 BE      ld bc,(tank_currentdamagecoord) ; get the current damage coord into bc
143+  BEB3 0D               dec c
144+  BEB4 ED 43 01 BE      ld (tank_currentdamagecoord),bc ; store the coord
145+  BEB8              tank_fire1:                         ; DEALING WITH NORMAL DAMAGE
146+  BEB8 ED 4B 01 BE      ld bc,(tank_currentdamagecoord) ; get the current damage coord into bc
147+  BEBC 3A 00 BE         ld a,(tank_currentdamage)    ; get the damage countdown
148+  BEBF E6 07            and 7                       ; is it a multiple of 8? only want to do the first line check then
149+  BEC1 C2 CC BE         jp nz, tank_fire5
150+  BEC4 CD 86 A9         call screen_getcharfirstbyte    ; get the first byte to check if this is a slope
151+  BEC7 FE FF            cp 255                      ; if it's a full line, it will be 255 and not a slope
152+  BEC9 C2 0D BF         jp nz,tank_fire3            ; if it's a slope, handle this differently
153+  BECC              tank_fire5:
154+  BECC 3A 04 BE         ld a,(tank_damageframe)
155+  BECF CD 15 A9         call screen_getblock        ; get the block data into hl
156+  BED2 CD F2 A8         call screen_showchar        ; show this character here
157+  BED5 3A 04 BE         ld a,(tank_damageframe)
158+  BED8 3C               inc a
159+  BED9 32 04 BE         ld (tank_damageframe),a     ; increment the damage block and store
160+  BEDC 3A 00 BE         ld a,(tank_currentdamage)    ; get the damage countdown
161+  BEDF 3D               dec a
162+  BEE0 3D               dec a
163+  BEE1 32 00 BE         ld (tank_currentdamage),a     ; decrease current damage by 2 and store
164+  BEE4 3A 09 BE         ld a,(tank_missile_displayed) ; is the missile displaying?
165+  BEE7 FE 00            cp 0
166+  BEE9 CC 24 BF         call z, tank_missilegraphic
167+  BEEC C3 16 BF         jp tank_fire4
168+  BEEF              tank_fire2:                     ; DEALING WITH COPYING BLOCKS FROM ABOVE
169+  BEEF 05               dec b
170+  BEF0 C5               push bc
171+  BEF1 CD 6F A9         call screen_copyblockdown       ; copy the block down
172+  BEF4 ED 4B 01 BE      ld bc,(tank_currentdamagecoord) ; get the current damage coord into bc
173+  BEF8 C1               pop bc                      ; get the coord we just checked back
174+  BEF9 78               ld a,b
175+  BEFA FE 00            cp 0
176+  BEFC CA B8 BE         jp z,tank_fire1             ; if we're at the top of the screen, don't check any more
177+  BEFF C5               push bc
178+  BF00 05               dec b
179+  BF01 CD 56 A9         call screen_ischarempty     ; check if it is empty
180+  BF04 C1               pop bc
181+  BF05 FE 01            cp 1                        ; if empty
182+  BF07 C2 EF BE         jp nz, tank_fire2            ; copy another one down
183+  BF0A C3 B8 BE         jp tank_fire1               ; otherwise, return to main thread
184+  BF0D              tank_fire3:                      ; dealing with slopes
185+  BF0D 3A 00 BE         ld a,(tank_currentdamage)    ; get the damage countdown
186+  BF10 06 08            ld b,8
187+  BF12 90               sub b                        ; special case for slopes
188+  BF13 32 00 BE         ld (tank_currentdamage),a    ; decrease the damage countdown by 8, so that next time, we get rid of this block without eroding it
189+  BF16              tank_fire4:                     ; TIDY UP
190+  BF16 CD C4 A5         call buffer_marklineforupdate
191+  BF19 3E 01            ld a,1
192+  BF1B CD C4 A5         call buffer_marklineforupdate
193+  BF1E 3E 02            ld a,2
194+  BF20 CD C4 A5         call buffer_marklineforupdate
195+  BF23 C9               ret
196+  BF24
197+  BF24              ;
198+  BF24              ; Displays or hides the missile graphic, and changes the gun
199+  BF24              ;
200+  BF24              tank_missilegraphic:
201+  BF24 3A 09 BE         ld a,(tank_missile_displayed)
202+  BF27 FE 00            cp 0
203+  BF29 C2 31 BF         jp nz,tank_missilegraphic0
204+  BF2C 3E 13            ld a,19
205+  BF2E C3 33 BF         jp tank_missilegraphic1
206+  BF31              tank_missilegraphic0:
207+  BF31 3E 00            ld a,0
208+  BF33              tank_missilegraphic1:
209+  BF33 32 09 BE         ld (tank_missile_displayed),a ; store the flipped graphic
210+  BF36 ED 4B 01 BE      ld bc,(tank_currentdamagecoord)
211+  BF3A 0C               inc c
212+  BF3B 0C               inc c                   ; print the graphic 2 spaces right
213+  BF3C CD 15 A9         call screen_getblock        ; get the block data into hl
214+  BF3F CD F2 A8         call screen_showchar        ; show this character here
215+  BF42 06 02            ld b,2
216+  BF44 0E 18            ld c,24                     ; set gunbarrel coords
217+  BF46 11 00 00         ld de,0
218+  BF49 21 02 B6         ld hl,tank_sprite           ; set hl to gunbarrel gfx, shooting is +64
219+  BF4C 3A 09 BE         ld a,(tank_missile_displayed)
220+  BF4F FE 00            cp 0
221+  BF51 CA 57 BF         jp z,tank_missilegraphic2
222+  BF54 11 40 00         ld de,64
223+  BF57              tank_missilegraphic2:
224+  BF57 19               add hl,de                   ; work out missile graphic
225+  BF58 CD F2 A8         call screen_showchar        ; show this character here
226+  BF5B C9               ret
227+  BF5C
228+  BF5C              ;
229+  BF5C              ; Deal with the player being killed by the tank
230+  BF5C              ;
231+  BF5C              tank_killedbytank:
232+  BF5C ED 4B 01 BE      ld bc,(tank_currentdamagecoord) ; get the current damage coord into bc
233+  BF60 21 4F B4         ld hl,sprites                   ; empty sprite
234+  BF63 CD F2 A8         call screen_showchar            ; hide the last piece of dirt
235+  BF66 CD 01 BC         call player_tankkillplayer
236+  BF69 C9               ret
237+  BF6A
238+  BF6A              tank_move:
239+  BF6A ED 4B FC BD      ld bc,(tank_initpos2)
240+  BF6E C5               push bc
241+  BF6F 3A FF BD         ld a,(tank_anim)
242+  BF72 FE 11            cp 17                       ; check first time flag
243+  BF74 CA 86 BF         jp z,tank_move1             ; don't draw over previous one if first time
244+  BF77 CD 8B BF         call tank_draw_full         ; delete old one
245+  BF7A ED 4B FC BD      ld bc,(tank_initpos2)       ; get the current coords
246+  BF7E 78               ld a,b
247+  BF7F D6 01            sub 1                       ; move back one pixels
248+  BF81 47               ld b,a
249+  BF82 ED 43 FC BD      ld (tank_initpos2),bc
250+  BF86              tank_move1:
251+  BF86 CD 8B BF         call tank_draw_full         ; draw the tank
252+  BF89 C1               pop bc
253+  BF8A C9               ret
254+  BF8B
255+  BF8B              tank_draw_full:
256+  BF8B 21 02 B6         ld hl,tank_sprite
257+  BF8E ED 4B FC BD      ld bc,(tank_initpos2)         ; load bc with the start coords
258+  BF92 22 05 BE         ld (tank_current_sprite),hl  ; put into memory
259+  BF95 ED 43 07 BE      ld (tank_current_coords),bc  ; put into memory
260+  BF99 CD B8 BF         call tank_draw
261+  BF9C 08               ex af,af'
262+  BF9D 3A FE BD         ld a,(tank_frame)            ; get the animation frame
263+  BFA0 16 00            ld d,0
264+  BFA2 5F               ld e,a
265+  BFA3 19               add hl,de
266+  BFA4 22 05 BE         ld (tank_current_sprite),hl  ; put into memory
267+  BFA7 08               ex af,af'
268+  BFA8 ED 4B FC BD      ld bc,(tank_initpos2)         ; load bc with the start coords
269+  BFAC 81 C6 08         add c,8                      ; move one line down
270+  BFAF 4F               ld c,a
271+  BFB0 ED 43 07 BE      ld (tank_current_coords),bc  ; put into memory
272+  BFB4 CD B8 BF         call tank_draw
273+  BFB7 C9               ret
274+  BFB8
275+  BFB8              ;
276+  BFB8              ; Draw the tank
277+  BFB8              ; Inputs:
278+  BFB8              ; None, all in memory
279+  BFB8              ;
280+  BFB8              tank_draw:
281+  BFB8 3E 04            ld a,4                              ; 4 pieces per half
282+  BFBA              tank_draw0:
283+  BFBA F5               push af
284+  BFBB 2A 05 BE         ld hl,(tank_current_sprite)
285+  BFBE ED 4B 07 BE      ld bc,(tank_current_coords)         ; load bc with the start coords
286+  BFC2 CD 9A A9         call sprites_drawsprite
287+  BFC5 2A 05 BE         ld hl,(tank_current_sprite)
288+  BFC8 ED 4B 07 BE      ld bc,(tank_current_coords)         ; load bc with the start coords
289+  BFCC 11 08 00         ld de,8
290+  BFCF 19               add hl,de
291+  BFD0 80 C6 08         add b,8
292+  BFD3 47               ld b,a
293+  BFD4 22 05 BE         ld (tank_current_sprite),hl         ; put into memory
294+  BFD7 ED 43 07 BE      ld (tank_current_coords),bc         ; put into memory
295+  BFDB F1               pop af
296+  BFDC 3D               dec a
297+  BFDD FE 00            cp 0
298+  BFDF C2 BA BF         jp nz,tank_draw0
299+  BFE2
300+  BFE2 C9               ret
301+  BFE3
# file closed: game/tank.asm
 42   BFE3                  include "game\rocks.asm"
# file opened: game/rocks.asm
  1+  BFE3              ;
  2+  BFE3              ; A structure of falling rocks
  3+  BFE3              ; Assume we'll never have more than 4 falling at any one time
  4+  BFE3              ; (1,2 - 16 bit memory location for rock graphic),state (0 fell, 1 falling, 2 wobbling), countdown
  5+  BFE3              ;
  6+  BFE3              rocks_falling:
  7+  BFE3 00 00 00 00      defb 0,0,0,0
  8+  BFE7 00 00 00 00      defb 0,0,0,0
  9+  BFEB 00 00 00 00      defb 0,0,0,0
 10+  BFEF 00 00 00 00      defb 0,0,0,0
 11+  BFF3
 12+  BFF3              rocks_tmp:
 13+  BFF3 00               defb 0
 14+  BFF4
 15+  BFF4              rocks_tmp2:
 16+  BFF4 00 00            defb 0,0
 17+  BFF6
 18+  BFF6              ;
 19+  BFF6              ; Coords of the rock that killed us
 20+  BFF6              ;
 21+  BFF6              rocks_killerrock:
 22+  BFF6 00 00            defb 0,0
 23+  BFF8
 24+  BFF8              ;
 25+  BFF8              ; Checks for a rock that needs to start falling. Takes a memory location of the first line at the bottom of the space.
 26+  BFF8              ; Checks to see if the pixel row in that location is a rock bottom. If it is, mark this rock as ready to fall.
 27+  BFF8              ; If the pixel row is not the rock bottom, stop checking.
 28+  BFF8              ; Inputs:
 29+  BFF8              ; hl- memory location
 30+  BFF8              ;
 31+  BFF8              rocks_checkforfalling:
 32+  BFF8 7E               ld a,(hl)           ; get the pixel row in this memory location
 33+  BFF9 FE 7E            cp 126              ; check against the bottom pixel row of the rock graphic
 34+  BFFB C2 01 C0         jp nz,rocks_checkforfalling2 ; not a rock, stop
 35+  BFFE CD 02 C0         call rocks_addrocktofalling ; mark the rock as falling
 36+  C001              rocks_checkforfalling2:
 37+  C001 C9               ret
 38+  C002
 39+  C002              ;
 40+  C002              ; Adds the rock to the structure that tracks falling rocks
 41+  C002              ; Inputs:
 42+  C002              ; hl - memory location of falling rock graphic
 43+  C002              ; bc - coords of rock, c vert
 44+  C002              rocks_addrocktofalling:
 45+  C002 C5               push bc             ; store the coords
 46+  C003 11 E3 BF         ld de,rocks_falling
 47+  C006 06 04            ld b,4              ; number of possible falling rocks
 48+  C008              rocks_addrocktofalling0:
 49+  C008 13               inc de
 50+  C009                  ;inc de
 51+  C009 13               inc de              ; move three along to get the state
 52+  C00A 1A               ld a,(de)           ; load the state
 53+  C00B FE 00            cp 0                ; check if this is not falling
 54+  C00D C2 23 C0         jp nz,rocks_addrocktofalling1 ; continue the loop if not 0
 55+  C010 13               inc de              ; move to frame
 56+  C011 3E 10            ld a,16             ; load the number of frames to wobble
 57+  C013 12               ld (de),a
 58+  C014 1B               dec de              ; move de back to state
 59+  C015 3E 02            ld a,2
 60+  C017 12               ld (de),a           ; set the state to wobbling
 61+  C018 1B               dec de              ; move back coords
 62+  C019 C1               pop bc              ; get back coords
 63+  C01A 78               ld a,b
 64+  C01B 12               ld (de),a           ; store the vertical
 65+  C01C 1B               dec de
 66+  C01D 79               ld a,c
 67+  C01E 12               ld (de),a           ; store the horizontal
 68+  C01F C5               push bc
 69+  C020 C3 27 C0         jp rocks_addrocktofalling2 ; done
 70+  C023              rocks_addrocktofalling1:
 71+  C023 13               inc de
 72+  C024 13               inc de              ; move memory along to next rock
 73+  C025 10 E1            djnz rocks_addrocktofalling0 ; try the next rock
 74+  C027              rocks_addrocktofalling2: ; done, return
 75+  C027 C1               pop bc              ; to tidy up
 76+  C028 C9               ret
 77+  C029
 78+  C029              ;
 79+  C029              ; Processes any falling rocks
 80+  C029              ;
 81+  C029              rocks_processrocks:
 82+  C029 DD 21 E3 BF      ld ix,rocks_falling
 83+  C02D 06 04            ld b,4              ; the number of rocks to check
 84+  C02F              rocks_processrocks0:
 85+  C02F C5               push bc             ; store loop count
 86+  C030 DD 4E 00 DD      ld bc,(ix)          ; load the coords for this rock into bc
 86+  C034 46 01
 87+  C036 DD 23            inc ix
 88+  C038 DD 23            inc ix              ; move to the state
 89+  C03A DD 7E 00         ld a,(ix)           ; load the state into a
 90+  C03D FE 00            cp 0
 91+  C03F CA 60 C0         jp z,rocks_processrocks3 ; if not falling, check next
 92+  C042 FE 02            cp 2
 93+  C044 C2 54 C0         jp nz, rocks_processrocks2
 94+  C047                  ; we're wobbling
 95+  C047 DD 23            inc ix              ; get frame number for wobble
 96+  C049 DD 7E 00         ld a,(ix)           ; get wobble frame into a
 97+  C04C CD 23 C1         call rocks_wobble
 98+  C04F DD 23            inc ix              ; increment for next
 99+  C051 C3 64 C0         jp rocks_processrocks1  ; do next rock
100+  C054              rocks_processrocks2:
101+  C054                  ; we're falling
102+  C054 C5               push bc
103+  C055 CD 68 C0         call rocks_fall
104+  C058 C1               pop bc
105+  C059 DD 23            inc ix
106+  C05B DD 23            inc ix              ; inc ix to get to next
107+  C05D C3 64 C0         jp rocks_processrocks1
108+  C060              rocks_processrocks3:
109+  C060 DD 23            inc ix
110+  C062 DD 23            inc ix
111+  C064              rocks_processrocks1:
112+  C064 C1               pop bc              ; get loop count back
113+  C065 10 C8            djnz rocks_processrocks0
114+  C067 C9               ret
115+  C068
116+  C068              ;
117+  C068              ; Falls a rock one pixel, checks the next square down to see if it is empty, if not, stop falling
118+  C068              ; bc - coord of current rock graphic on screen
119+  C068              ; ix - memory location of current rock in rock list, currently at the 3rd position (rock state)
120+  C068              ;
121+  C068              rocks_fall:
122+  C068 DD 2B            dec ix
123+  C06A DD 2B            dec ix              ; decrease ix back to coords
124+  C06C ED 43 F4 BF      ld (rocks_tmp2),bc  ; store original coords
125+  C070 3E 03            ld a,3              ; move this number of pixels
126+  C072              rocks_fall1:
127+  C072 32 F3 BF         ld (rocks_tmp),a    ; store loop counter
128+  C075 DD 4E 00 DD      ld bc,(ix)          ; get current coords
128+  C079 46 01
129+  C07B CD 8F AA         call sprites_scadd  ; get the memory of the coords into de
130+  C07E 14               inc d               ; add 256 to get next row
131+  C07F 1A               ld a,(de)           ; get the contents of the next row
132+  C080 FE 00            cp 0
133+  C082 C2 E2 C0         jp nz,rocks_fall3    ; move the rock if the row is empty
134+  C085 0C               inc c               ; increment the vertical
135+  C086 DD 71 00 DD      ld (ix),bc          ; store the new coords
135+  C08A 70 01
136+  C08C 79               ld a,c              ; get the vertical coord into a
137+  C08D E6 07            and 7               ; divisible by 8?
138+  C08F FE 00            cp 0
139+  C091 C2 AE C0         jp nz,rocks_fall4   ; if not, carry on
140+  C094 CD C8 A8         call screen_getcharcoordsfromscreencoords ; get the char coords into bc
141+  C097 3E 42            ld a,66             ; load red
142+  C099 CD 20 A9         call screen_setattr
143+  C09C DD 4E 00 DD      ld bc,(ix)
143+  C0A0 46 01
144+  C0A2 79               ld a,c              ; get vertical
145+  C0A3 D6 08            sub 8               ; look up one square
146+  C0A5 4F               ld c,a              ; put a back in c
147+  C0A6 CD C8 A8         call screen_getcharcoordsfromscreencoords ; get the char coords into bc
148+  C0A9 3E 46            ld a,70             ; load yellow
149+  C0AB CD 20 A9         call screen_setattr
150+  C0AE              rocks_fall4:
151+  C0AE 3A F3 BF         ld a,(rocks_tmp)    ; get the loop counter
152+  C0B1 3D               dec a
153+  C0B2 FE 00            cp 0
154+  C0B4 C2 72 C0         jp nz,rocks_fall1   ; do another pixel if needed
155+  C0B7              rocks_fall2:
156+  C0B7 3E 09            ld a,9              ; rock graphic
157+  C0B9 ED 4B F4 BF      ld bc,(rocks_tmp2)  ; get the original coords
158+  C0BD CD 15 A9         call screen_getblock     ; get the memory into hl
159+  C0C0 CD 9A A9         call sprites_drawsprite  ; draw the sprite - over the top of the current one
160+  C0C3 3E 09            ld a,9
161+  C0C5 DD 4E 00 DD      ld bc,(ix)          ; get the new coords
161+  C0C9 46 01
162+  C0CB CD 15 A9         call screen_getblock     ; get the memory into hl
163+  C0CE CD 9A A9         call sprites_drawsprite  ; draw the sprite - over the top of the current one
164+  C0D1 DD 4E 00 DD      ld bc,(ix)          ; get the coords again
164+  C0D5 46 01
165+  C0D7 CD 08 C1         call rocks_checkforplayer ; check to see if we hit a player
166+  C0DA DD 23            inc ix
167+  C0DC DD 23            inc ix                  ; get ix back to state
168+  C0DE CD F8 C0         call rocks_makesound
169+  C0E1 C9               ret
170+  C0E2              rocks_fall3:
171+  C0E2 3E 00            ld a,0              ; set the state to fell
172+  C0E4 DD 77 02         ld (ix+2),a           ; store the falling state
173+  C0E7 DD 4E 00 DD      ld bc,(ix)          ; get the coords
173+  C0EB 46 01
174+  C0ED CD C8 A8         call screen_getcharcoordsfromscreencoords ; get the char coords into bc
175+  C0F0 3E 42            ld a,66             ; load magenta
176+  C0F2 CD 20 A9         call screen_setattr
177+  C0F5 C3 B7 C0         jp rocks_fall2      ; rejoin main loop
178+  C0F8
179+  C0F8              ;
180+  C0F8              ; Makes the rock sound if we're no longer falling, and if we didn't hit a player
181+  C0F8              ;
182+  C0F8              rocks_makesound:
183+  C0F8 DD 7E 00         ld a,(ix)           ; get the state
184+  C0FB FE 00            cp 0
185+  C0FD C0               ret nz              ; if we haven't fallen, don't do anything
186+  C0FE 21 18 BB         ld hl,player+11
187+  C101 7E               ld a,(hl)
188+  C102 FE 01            cp 1
189+  C104 C4 80 AE         call nz, sound_rockfell ; only make sound if didn't kill player
190+  C107 C9               ret
191+  C108
192+  C108              ;
193+  C108              ; Checks to see if the rock is hitting a player
194+  C108              ; Inputs:
195+  C108              ; bc - coords of rock we're checking
196+  C108              rocks_checkforplayer:
197+  C108 ED 5B 0D BB      ld de,(player)       ; get the player coords
198+  C10C 7B               ld a,e               ; get the vert coord first
199+  C10D 91               sub c                ; subtract the rock vertical coord from players
200+  C10E FE 08            cp 8                 ; the rock will only hit a player if the player is directly underneath, so this must be 8
201+  C110 C0               ret nz               ; if not, hasn't hit
202+  C111 7A               ld a,d               ; get the player horiz coord
203+  C112 90               sub b                ; subtract rock coord
204+  C113 C6 07            add 7                ; add max distance
205+  C115 FE 0D            cp 13                ; compare to 13? if carry flag set, they've hit
206+  C117 DA 1B C1         jp c,rocks_checkforplayer0
207+  C11A C9               ret
208+  C11B              rocks_checkforplayer0:
209+  C11B ED 43 F6 BF      ld (rocks_killerrock),bc; store the coords of the killer rock
210+  C11F CD FB BB         call player_crushplayer ; if so, jump out
211+  C122 C9               ret
212+  C123
213+  C123              ;
214+  C123              ; Wobbles a rocks
215+  C123              ; Inputs:
216+  C123              ; bc - coord of current rock graphic on screen
217+  C123              ; ix - memory location of current rock in rock list, currently at the 4th position (wobble count)
218+  C123              ; a - wobble frame
219+  C123              rocks_wobble:
220+  C123 DD 7E 00         ld a,(ix)           ; get the wobble count, which we'll use as frame toggle
221+  C126 E6 01            and 1               ; is it odd or even, gets 1 or 0
222+  C128 1E 09            ld e,9              ; this is the rock frame
223+  C12A 83               add a,e             ; add the frame toggle
224+  C12B C5               push bc
225+  C12C CD 15 A9         call screen_getblock     ; get the memory into hl
226+  C12F CD 9A A9         call sprites_drawsprite  ; draw the sprite - over the top of the current one
227+  C132
228+  C132 DD 7E 00         ld a,(ix)           ; get the frame toggle again
229+  C135 3D               dec a               ; decrease
230+  C136 DD 77 00         ld (ix),a           ; store
231+  C139
232+  C139 E6 01            and 1
233+  C13B 1E 09            ld e,9              ; this is the rock frame
234+  C13D 83               add a,e             ; add the frame toggle
235+  C13E CD 15 A9         call screen_getblock     ; get the memory into hl
236+  C141
237+  C141 C1               pop bc
238+  C142 CD 9A A9         call sprites_drawsprite  ; draw the sprite again with the new frame - next time it will do the opposite
239+  C145
240+  C145 DD 7E 00         ld a,(ix)           ; get the wobble count back
241+  C148 FE 00            cp 0
242+  C14A C0               ret nz              ; if we're not at zero, return
243+  C14B DD 2B            dec ix              ; otherwise look to state location
244+  C14D 3E 01            ld a,1              ; set the state to falling
245+  C14F DD 77 00         ld (ix),a           ; store the falling state
246+  C152 DD 23            inc ix              ; set ix back to location of wobble count, and we're done
247+  C154 C9               ret
248+  C155
# file closed: game/rocks.asm
 43   C155                  include "game\scores.asm"
# file opened: game/scores.asm
  1+  C155              ;
  2+  C155              ; The score of the current player
  3+  C155              ;
  4+  C155              scores_current:
  5+  C155 04 01 30 30      defb 4,1,'000000',255       ;+2
  5+  C159 30 30 30 30
  5+  C15D FF
  6+  C15E
  7+  C15E              scores_defaultname:
  8+  C15E 2D 2D 2D         defb '---'
  9+  C161
 10+  C161              ;
 11+  C161              ; The current high score table
 12+  C161              ;
 13+  C161              scores_table:
 14+  C161 03 17 47 41      defb 03,23,'GAM000000',255         ;+0, +2, +5
 14+  C165 4D 30 30 30
 14+  C169 30 30 30 FF
 15+  C16D 0C 17 47 41      defb 12,23,'GAM000000',255        ;+12, +14, +17
 15+  C171 4D 30 30 30
 15+  C175 30 30 30 FF
 16+  C179 15 17 47 41      defb 21,23,'GAM000000',255        ;+24, +26, +29
 16+  C17D 4D 30 30 30
 16+  C181 30 30 30 FF
 17+  C185
 18+  C185              ;
 19+  C185              ; Add thousands to the score
 20+  C185              ; Inputs:
 21+  C185              ; b - number to add
 22+  C185              ;
 23+  C185              scores_addthousands:
 24+  C185 21 59 C1         ld hl,scores_current+4
 25+  C188 CD B2 C1         call scores_update
 26+  C18B C9               ret
 27+  C18C
 28+  C18C              ;
 29+  C18C              ; Prints the score to screen
 30+  C18C              ;
 31+  C18C              scores_printscore:
 32+  C18C 3A DF BA         ld a,(game_currentplayer)   ; get current player
 33+  C18F 21 55 C1         ld hl,scores_current
 34+  C192 FE 01            cp 1
 35+  C194 C2 9C C1         jp nz, score_printscore0    ; if not player 1
 36+  C197 36 04            ld (hl),4       ; set position for player 1
 37+  C199 C3 9E C1         jp score_printscore1
 38+  C19C              score_printscore0:
 39+  C19C 36 16            ld (hl),22       ; set position for player 2
 40+  C19E              score_printscore1:
 41+  C19E 21 55 C1         ld hl,scores_current
 42+  C1A1 CD C4 84         call string_print
 43+  C1A4 C9               ret
 44+  C1A5
 45+  C1A5              ;
 46+  C1A5              ; Prints both scores to screen
 47+  C1A5              ;
 48+  C1A5              scores_printscores:
 49+  C1A5 21 E3 BB         ld hl,player1_score
 50+  C1A8 CD C4 84         call string_print
 51+  C1AB 21 EC BB         ld hl,player2_score
 52+  C1AE CD C4 84         call string_print
 53+  C1B1 C9               ret
 54+  C1B2
 55+  C1B2              ;
 56+  C1B2              ; Updates the current score.
 57+  C1B2              ; Inputs:
 58+  C1B2              ; hl - memory location of the score column
 59+  C1B2              ; b - number to add
 60+  C1B2              ;
 61+  C1B2              scores_update:
 62+  C1B2 7E               ld a,(hl)           ; current value of digit.
 63+  C1B3 80               add a,b             ; add points to this digit.
 64+  C1B4 77               ld (hl),a           ; place new digit back in string.
 65+  C1B5 FE 3A            cp 58               ; more than ASCII value '9'?
 66+  C1B7 D8               ret c               ; no - relax.
 67+  C1B8 D6 0A            sub 10              ; subtract 10.
 68+  C1BA 77               ld (hl),a           ; put new character back in string.
 69+  C1BB              scores_update0:
 70+  C1BB 2B               dec hl              ; previous character in string.
 71+  C1BC 34               inc (hl)            ; up this by one.
 72+  C1BD 7E               ld a,(hl)           ; what's the new value?
 73+  C1BE FE 3A            cp 58               ; gone past ASCII nine?
 74+  C1C0 D8               ret c               ; no, scoring done.
 75+  C1C1 D6 0A            sub 10              ; down by ten.
 76+  C1C3 77               ld (hl),a           ; put it back
 77+  C1C4 C3 BB C1         jp scores_update0   ; go round again.
 78+  C1C7
 79+  C1C7
 80+  C1C7              ;
 81+  C1C7              ; Displays the high score table at the bottom of the screen
 82+  C1C7              ;
 83+  C1C7              scores_showtable:
 84+  C1C7 21 61 C1         ld hl, scores_table
 85+  C1CA CD C4 84         call string_print
 86+  C1CD 21 6D C1         ld hl, scores_table+12
 87+  C1D0 CD C4 84         call string_print
 88+  C1D3 21 79 C1         ld hl, scores_table+24
 89+  C1D6 CD C4 84         call string_print
 90+  C1D9 C9               ret
 91+  C1DA
 92+  C1DA              ;
 93+  C1DA              ; Place to store the current position we're checking
 94+  C1DA              ;
 95+  C1DA              scores_highscoretmp:
 96+  C1DA 00               defb 0
 97+  C1DB
 98+  C1DB              ;
 99+  C1DB              ; Updates the highscore table. Start at bottom score. Work way from left. Compare each digit. If current is higher than one we're checking,
100+  C1DB              ; copy checking one down (or erase) then copy current over that one. Then move up one and do the same
101+  C1DB              ;
102+  C1DB              scores_processhighscores:
103+  C1DB 21 DA C1         ld hl,scores_highscoretmp
104+  C1DE 36 00            ld (hl),0  ; load up the tracking byte with 0 (ie, not on the table)
105+  C1E0 3E 1D            ld a,29
106+  C1E2              scores_processhighscores3:
107+  C1E2 21 61 C1         ld hl,scores_table          ; position of first score column
108+  C1E5 5F               ld e,a
109+  C1E6 16 00            ld d,0
110+  C1E8 19               add hl,de
111+  C1E9 08               ex af,af'                   ; store a for later
112+  C1EA 11 57 C1         ld de,scores_current+2      ; position of current score column
113+  C1ED 06 06            ld b,6                      ; times to loop
114+  C1EF              scores_processhighscores0:
115+  C1EF 7E               ld a,(hl)
116+  C1F0 4F               ld c,a                      ; get first score column
117+  C1F1 1A               ld a,(de)                   ; get first current column
118+  C1F2 B9               cp c                        ; compare current with first
119+  C1F3 DA 04 C2         jp c,scores_processhighscores4  ; if c is bigger, then this is not a higher score, so end
120+  C1F6 23               inc hl
121+  C1F7 13               inc de                      ; move to next column
122+  C1F8 10 F5            djnz scores_processhighscores0 ; loop
123+  C1FA 08               ex af,af'                     ; still here, so must be bigger
124+  C1FB 32 DA C1         ld (scores_highscoretmp),a  ; store the position indicator in the tracking byte
125+  C1FE 0E 0C            ld c,12
126+  C200 91               sub c
127+  C201 D2 E2 C1         jp nc,scores_processhighscores3 ; if the place we're looking is less than zero, we've gone to far, so continue, otherwise go again
128+  C204              scores_processhighscores4
129+  C204 CD 08 C2         call scores_updatehighscores
130+  C207 C9               ret
131+  C208
132+  C208              ;
133+  C208              ; Update score table
134+  C208              ;
135+  C208              scores_updatehighscores:
136+  C208 3A DA C1         ld a,(scores_highscoretmp)  ; get the place we want to overwrite
137+  C20B FE 00            cp 0
138+  C20D C8               ret z                       ; if this is 0, didn't get a high score
139+  C20E FE 1D            cp 29                       ; check against 29... if it's equal, we don't want to copy the current score down one
140+  C210 CA 43 C2         jp z, scores_updatehighscores3
141+  C213                                              ; copy old score over one below, if not first
142+  C213 21 61 C1         ld hl,scores_table
143+  C216 11 11 00         ld de,17                    ; start at second score, because this is the first one we'd ever need to copy...
144+  C219 19               add hl,de                   ; position of first column
145+  C21A 2B               dec hl
146+  C21B 2B               dec hl
147+  C21C 2B               dec hl
148+  C21D E5               push hl
149+  C21E 11 0C 00         ld de,12
150+  C221 19               add hl,de                   ; get position of next score
151+  C222 54 5D            ld de,hl
152+  C224 E1               pop hl                      ; get hl back
153+  C225 01 09 00         ld bc,9
154+  C228 ED B0            ldir
155+  C22A FE 11            cp 17                       ; see if we're copying into the second place slot (17 memory offset). If so, stop copying back the scores
156+  C22C CA 43 C2         jp z,scores_updatehighscores3
157+  C22F 21 61 C1         ld hl,scores_table
158+  C232 11 02 00         ld de,2                    ; ... otherwise, copy back the first score
159+  C235 19               add hl,de                   ; position of first column
160+  C236 E5               push hl
161+  C237 11 0C 00         ld de,12
162+  C23A 19               add hl,de                   ; get position of next score
163+  C23B 54 5D            ld de,hl
164+  C23D E1               pop hl                      ; get hl back
165+  C23E 01 09 00         ld bc,9
166+  C241 ED B0            ldir
167+  C243              scores_updatehighscores3:
168+  C243 06 06            ld b,6                      ; now overwrite
169+  C245 21 61 C1         ld hl,scores_table
170+  C248 16 00            ld d,0
171+  C24A 5F               ld e,a
172+  C24B 19               add hl,de                   ; position of first column
173+  C24C 08               ex af,af'
174+  C24D 11 57 C1         ld de,scores_current+2      ; position of current score column
175+  C250              scores_updatehighscores2:
176+  C250 1A               ld a,(de)
177+  C251 77               ld (hl),a
178+  C252 23               inc hl
179+  C253 13               inc de
180+  C254 10 FA            djnz scores_updatehighscores2
181+  C256 11 09 00         ld de,9
182+  C259 ED 52            sbc hl,de
183+  C25B 54 5D            ld de,hl                    ; get back to start of entry
184+  C25D 21 5E C1         ld hl,scores_defaultname    ; still need to overwrite the name
185+  C260 01 03 00         ld bc,3                      ; 3 chars to copy
186+  C263 ED B0            ldir
187+  C265 C9               ret
# file closed: game/scores.asm
 44   C266                  include "game\diamonds.asm"
# file opened: game/diamonds.asm
  1+  C266              diamonds_tmp:
  2+  C266 00               defb 0
  3+  C267
  4+  C267              diamonds_tmp2:
  5+  C267 00               defb 0
  6+  C268
  7+  C268              ;
  8+  C268              ; Holds the number of thousands for the current gem type
  9+  C268              ;
 10+  C268              diamonds_score:
 11+  C268 00               defb 0
 12+  C269
 13+  C269              ;
 14+  C269              ; Changes the attribute of gem and diamond cells based on the frame count
 15+  C269              ; Inputs:
 16+  C269              ; hl - memory location of gem type
 17+  C269              diamonds_twinkle_type:
 18+  C269 CD 03 BB         call game_getcurrentframe       ; get current frame number
 19+  C26C E6 07            and 7                           ; want a number from 0-7
 20+  C26E C6 40            add 64                          ; add to 60 to get attr colour
 21+  C270 32 67 C2         ld (diamonds_tmp2),a             ; store the colour
 22+  C273              diamonds_twinkle_type0:
 23+  C273 4E 23 46 2B      ld bc,(hl)                      ; get coords into bc
 24+  C277 79               ld a,c                          ; load c into a
 25+  C278 FE FF            cp 255                          ; is this the end?
 26+  C27A CA A2 C2         jp z,diamonds_twinkle_type1           ; step out if so
 27+  C27D 23               inc hl
 28+  C27E 23               inc hl
 29+  C27F 7E               ld a,(hl)                       ; check the state, don't process if collected
 30+  C280 FE 01            cp 1
 31+  C282 CA A3 C2         jp z,diamonds_twinkle_type2           ; step out if so
 32+  C285 CD E3 C2         call diamonds_checkforplayer    ; check to see if we've collided with player
 33+  C288 DC AA C2         call c,diamonds_collect     ; we collided
 34+  C28B 23               inc hl
 35+  C28C E5               push hl
 36+  C28D E5 DD E1         ld ix,hl
 37+  C290 DD 4E FD DD      ld bc,(ix-3)                    ; get coords again
 37+  C294 46 FE
 38+  C296 3A 67 C2         ld a,(diamonds_tmp2)
 39+  C299 CD 20 A9         call screen_setattr
 40+  C29C E1               pop hl
 41+  C29D 23               inc hl
 42+  C29E 23               inc hl                          ; move to next diamond
 43+  C29F C3 73 C2         jp diamonds_twinkle_type0
 44+  C2A2              diamonds_twinkle_type1:
 45+  C2A2 C9               ret
 46+  C2A3              diamonds_twinkle_type2:
 47+  C2A3 23               inc hl                          ; do stuff the we would have done anyway to get to next gem
 48+  C2A4 23               inc hl
 49+  C2A5 23               inc hl
 50+  C2A6 08               ex af,af'
 51+  C2A7 C3 73 C2         jp diamonds_twinkle_type0       ; rejoin main loop
 52+  C2AA
 53+  C2AA              ;
 54+  C2AA              ; Collect the diamond we collided with
 55+  C2AA              ; Inputs:
 56+  C2AA              ; hl - memory location of current diamond, currently on state
 57+  C2AA              ; Output:
 58+  C2AA              ; a - 70 - for yellow on black
 59+  C2AA              diamonds_collect:
 60+  C2AA 36 01            ld (hl),1                       ; collected
 61+  C2AC E5               push hl
 62+  C2AD 2B               dec hl
 63+  C2AE 2B               dec hl
 64+  C2AF 4E 23 46 2B      ld bc,(hl)                      ; get the coords
 65+  C2B3 CD D8 A8         call screen_getscreencoordsfromcharcoords ; get the screen coords into bc
 66+  C2B6 ED 5B 66 C2      ld de,(diamonds_tmp)            ; tmp stores the offset for this type of gem
 67+  C2BA 16 00            ld d,0
 68+  C2BC 21 4F B4         ld hl,sprites
 69+  C2BF 19               add hl,de
 70+  C2C0 CD 9A A9         call sprites_drawsprite     ; call the routine to draw the sprite
 71+  C2C3 E1               pop hl
 72+  C2C4 3E 46            ld a,70                     ; pass this back to overwrite the attr
 73+  C2C6 32 67 C2         ld (diamonds_tmp2),a
 74+  C2C9 D9               exx
 75+  C2CA 3A 68 C2         ld a,(diamonds_score)
 76+  C2CD 47               ld b,a
 77+  C2CE CD 85 C1         call scores_addthousands
 78+  C2D1 3A 66 C2         ld a,(diamonds_tmp)
 79+  C2D4 FE 40            cp 64                       ; check the gem type offset, if its 64 this is a diamond, so mark the level as completable
 80+  C2D6 C2 DE C2         jp nz,diamonds_collect0
 81+  C2D9 21 1A BB         ld hl,player+13
 82+  C2DC 36 01            ld (hl),1                   ; mark the player as able to complete the level
 83+  C2DE              diamonds_collect0:
 84+  C2DE CD 63 AE         call sound_gemcollected
 85+  C2E1 D9               exx
 86+  C2E2 C9               ret
 87+  C2E3
 88+  C2E3              ;
 89+  C2E3              ; Checks to see if the gem is hitting a player
 90+  C2E3              ; Inputs:
 91+  C2E3              ; bc - coords of diamond we're checking
 92+  C2E3              diamonds_checkforplayer:
 93+  C2E3 78               ld a,b               ; multiply b by 8
 94+  C2E4 07               rlca
 95+  C2E5 07               rlca
 96+  C2E6 07               rlca
 97+  C2E7 47               ld b,a
 98+  C2E8 ED 5B 0D BB      ld de,(player)       ; get the player coords
 99+  C2EC 7B               ld a,e               ; get the vert coord first
100+  C2ED 90               sub b                ; subtract the diamond vertical coord from players
101+  C2EE C6 04            add 4                ; add the max distance
102+  C2F0 FE 09            cp 9                ; compare to max*2+1? if carry flag set, they've hit
103+  C2F2 D0               ret nc               ; if not, hasn't hit
104+  C2F3 79               ld a,c               ; multiply c by 8
105+  C2F4 07               rlca
106+  C2F5 07               rlca
107+  C2F6 07               rlca
108+  C2F7 4F               ld c,a
109+  C2F8 7A               ld a,d               ; get the player horiz coord
110+  C2F9 91               sub c                ; subtract rock coord
111+  C2FA C6 04            add 4                ; add max distance
112+  C2FC FE 09            cp 9                ; compare to max*2+1? if carry flag set, they've hit
113+  C2FE D0               ret nc
114+  C2FF 3E 00            ld a,0
115+  C301 C9               ret
116+  C302
117+  C302
118+  C302              ;
119+  C302              ; Initialise diamonds and gems
120+  C302              ;
121+  C302              diamonds_twinkle
122+  C302 21 68 C2         ld hl,diamonds_score
123+  C305 36 02            ld (hl),2         ; store the score we'll add
124+  C307 21 66 C2         ld hl,diamonds_tmp
125+  C30A 36 40            ld (hl),64         ; store the location the diamond sprite
126+  C30C 21 CA B3         ld hl, level01diamonds
127+  C30F CD 69 C2         call diamonds_twinkle_type
128+  C312 21 68 C2         ld hl,diamonds_score
129+  C315 36 01            ld (hl),1         ; store the score we'll add
130+  C317 21 66 C2         ld hl,diamonds_tmp
131+  C31A 36 70            ld (hl),112         ; store the location the gem sprite
132+  C31C 21 DA B3         ld hl, level01gems
133+  C31F CD 69 C2         call diamonds_twinkle_type
134+  C322 C9               ret
135+  C323
136+  C323              ;
137+  C323              ; Initialise diamonds and gems
138+  C323              ;
139+  C323              diamonds_init:
140+  C323 21 CA B3         ld hl, level01diamonds
141+  C326 CD 30 C3         call diamonds_init_type
142+  C329 21 DA B3         ld hl, level01gems
143+  C32C CD 30 C3         call diamonds_init_type
144+  C32F C9               ret
145+  C330
146+  C330              ;
147+  C330              ; Initialise diamonds or gems, get memory addresses
148+  C330              ; Inputs:
149+  C330              ; hl - memory location
150+  C330              diamonds_init_type:
151+  C330 4E               ld c,(hl)                      ; get coords into c
152+  C331 79               ld a,c                          ; load c into add
153+  C332 FE FF            cp 255                          ; is this the end?
154+  C334 CA 4B C3         jp z,diamonds_init_type1             ; step out if so
155+  C337 23               inc hl
156+  C338 46               ld b,(hl)                       ; get coords into b
157+  C339 E5               push hl
158+  C33A CD 89 A8         call screen_getcellattroffset ; get memory of attr for this diamond into de
159+  C33D E1               pop hl
160+  C33E 23               inc hl                          ; move to state
161+  C33F 36 00            ld (hl),0
162+  C341 23               inc hl                          ; move to memory
163+  C342 73 23 72 2B      ld (hl),de                      ; store the memory location
164+  C346 23               inc hl                          ; move to next diamond
165+  C347 23               inc hl
166+  C348 C3 30 C3         jp diamonds_init_type
167+  C34B              diamonds_init_type1:
168+  C34B C9               ret
# file closed: game/diamonds.asm
 45   C34C                  include "game\missiles.asm"
# file opened: game/missiles.asm
  1+  C34C              ;
  2+  C34C              ; Controls when missiles fall
  3+  C34C              ;
  4+  C34C              missiles_count:
  5+  C34C 00               defb 0
  6+  C34D
  7+  C34D              ;
  8+  C34D              ; A structure of falling missiles
  9+  C34D              ; Assume we'll never have more than 4 falling at any one time
 10+  C34D              ; (1,2 - 16 bit memory location for missile graphic),state (0 fell, 1 falling)
 11+  C34D              ;
 12+  C34D              missiles_falling:
 13+  C34D 00 00 00         defb 0,0,0
 14+  C350 00 00 00         defb 0,0,0
 15+  C353 00 00 00         defb 0,0,0
 16+  C356 00 00 00         defb 0,0,0
 17+  C359
 18+  C359              ;
 19+  C359              ; The coords of the missile that killed us
 20+  C359              ;
 21+  C359              missiles_killermissile:
 22+  C359 00 00            defb 0,0
 23+  C35B
 24+  C35B              ;
 25+  C35B              ; Zeroes the state of each missile
 26+  C35B              ;
 27+  C35B              missiles_init:
 28+  C35B 06 0C            ld b,12
 29+  C35D DD 21 51 B3      ld ix,level01missiles
 30+  C361              missiles_init0:
 31+  C361 DD 36 02 00      ld (ix+2),0               ; set the state to zero
 32+  C365 11 05 00         ld de,5
 33+  C368 DD 19            add ix,de
 34+  C36A DD 36 02 00      ld (ix+2),0
 35+  C36E DD 19            add ix,de
 36+  C370 10 EF            djnz missiles_init0
 37+  C372 06 04            ld b,4                  ; reset four falling missiles
 38+  C374 21 4D C3         ld hl,missiles_falling
 39+  C377              missiles_init1:
 40+  C377 36 00            ld (hl),0
 41+  C379 23               inc hl
 42+  C37A 36 00            ld (hl),0
 43+  C37C 23               inc hl
 44+  C37D 36 00            ld (hl),0
 45+  C37F 23               inc hl
 46+  C380 10 F5            djnz missiles_init1
 47+  C382 C9               ret
 48+  C383
 49+  C383              ;
 50+  C383              ; Runs each frame and checks if a missile can fall, then selects one at random and adds to the falling missiles
 51+  C383              ; Processes any already falling missiles
 52+  C383              ;
 53+  C383              missiles_process:
 54+  C383 3A 18 BB         ld a,(player+11)                        ; check if the player was hit by a missile previously
 55+  C386 FE 03            cp 3
 56+  C388 C2 8F C3         jp nz,missiles_process3                 ; if not, continue
 57+  C38B CD CE C4         call missiles_zonkplayer
 58+  C38E C9               ret
 59+  C38F              missiles_process3:
 60+  C38F 3A 1B BB         ld a,(player_location)
 61+  C392 FE 01            cp 1
 62+  C394 C2 02 C4         jp nz, missiles_process0                ; if not 1 we're not in the cavern so no need to make any more fall
 63+  C397 21 1A BB         ld hl,player+13
 64+  C39A 7E               ld a,(hl)                               ; check if player has collected a diamond
 65+  C39B FE 01            cp 1
 66+  C39D C2 02 C4         jp nz, missiles_process0                ; don't activate if not
 67+  C3A0 21 4C C3         ld hl,missiles_count
 68+  C3A3 7E               ld a,(hl)                   ; get the missiles count
 69+  C3A4 3C               inc a
 70+  C3A5 FE 32            cp 50                                   ; have we reached the count yet
 71+  C3A7 CA AE C3         jp z,missiles_process2                 ; if not, don't activate a new one
 72+  C3AA 77               ld (hl),a                               ; store the updated count, and continue without activating
 73+  C3AB C3 02 C4         jp missiles_process0
 74+  C3AE              missiles_process2:
 75+  C3AE 36 00            ld (hl),0                               ; zero the counter
 76+  C3B0 1E 0C            ld e,12
 77+  C3B2 CD D6 80         call utilities_randomupper              ; get random number from 0 to 11
 78+  C3B5 11 0A 00         ld de,10
 79+  C3B8 CD 3A 80         call utilities_multiply                 ; multiple random number by 10
 80+  C3BB 54 5D            ld de,hl                                ; this is the offset for the random missile
 81+  C3BD DD 21 51 B3      ld ix,level01missiles                   ; load the location of the missile definitions
 82+  C3C1 DD 19            add ix,de                               ; get to location of missile
 83+  C3C3 DD 7E 02         ld a,(ix+2)
 84+  C3C6 FE 00            cp 0
 85+  C3C8 CA D8 C3         jp z,missiles_process1                  ; if this missile isn't active, activate it
 86+  C3CB 11 05 00         ld de,5                                 ; otherwise, check the missile above
 87+  C3CE DD 19            add ix,de
 88+  C3D0 DD 7E 02         ld a,(ix+2)
 89+  C3D3 FE 00            cp 0
 90+  C3D5 C2 02 C4         jp nz,missiles_process0                 ; if this is active as well, the player got lucky
 91+  C3D8              missiles_process1:                          ; activate a missile
 92+  C3D8 DD 36 02 01      ld (ix+2),1                               ; mark this missile as active
 93+  C3DC DD 4E 00 DD      ld bc,(ix)                              ; get char coords from the missile
 93+  C3E0 46 01
 94+  C3E2 78               ld a,b
 95+  C3E3 ED 5B 76 A7      ld de,(screen_offset)          ; load the screen offset, this is in rows
 96+  C3E7 93               sub e
 97+  C3E8 CD D8 A8         call screen_getscreencoordsfromcharcoords ; get screen coords into bc
 98+  C3EB C5               push bc
 99+  C3EC 3E 0C            ld a,12                                 ; inactive missile sprite
100+  C3EE CD 15 A9         call screen_getblock
101+  C3F1 CD 9A A9         call sprites_drawsprite                 ; draw the sprite over the old one
102+  C3F4 C1               pop bc
103+  C3F5 C5               push bc
104+  C3F6 3E 14            ld a,20                                 ; active missile sprite
105+  C3F8 CD 15 A9         call screen_getblock
106+  C3FB CD 9A A9         call sprites_drawsprite                 ; draw the sprite over the old one
107+  C3FE C1               pop bc
108+  C3FF CD 92 C4         call missiles_addmissiletofalling
109+  C402              missiles_process0:
110+  C402 CD 06 C4         call missiles_fall
111+  C405 C9               ret
112+  C406
113+  C406              ;
114+  C406              ; Processes falling missiles
115+  C406              ;
116+  C406              missiles_fall:
117+  C406 06 04            ld b,4              ; number of possible falling missiles
118+  C408 DD 21 4D C3      ld ix,missiles_falling
119+  C40C              missiles_fall0:
120+  C40C C5               push bc
121+  C40D DD 7E 02         ld a,(ix+2)
122+  C410 FE 00            cp 0
123+  C412 CA 71 C4         jp z,missiles_fall1 ; not falling move to next
124+  C415 FE 01            cp 1                ; is this ready to fall
125+  C417 CA 1D C4         jp z, missiles_fall3
126+  C41A C3 8B C4         jp missiles_fall4   ; if not, decrease the countdown
127+  C41D              missiles_fall3:
128+  C41D DD 4E 00 DD      ld bc,(ix)          ; load coords into bc
128+  C421 46 01
129+  C423 CD 8F AA         call sprites_scadd  ; get the memory of the coords into de
130+  C426 14               inc d               ; add 256 to get next row
131+  C427 1A               ld a,(de)           ; get the contents of the next row
132+  C428 FE 00            cp 0
133+  C42A C2 84 C4         jp nz,missiles_fall2 ; if this is not empty, stop this missile falling
134+  C42D 3E 14            ld a,20                                 ; active missile sprite
135+  C42F CD 15 A9         call screen_getblock
136+  C432 CD 9A A9         call sprites_drawsprite                 ; draw the sprite over the old one
137+  C435 DD 4E 00 DD      ld bc,(ix)          ; load coords into bc
137+  C439 46 01
138+  C43B 0C               inc c               ; move down one pixel
139+  C43C DD 71 00 DD      ld (ix),bc          ; store the new coords
139+  C440 70 01
140+  C442 3E 14            ld a,20                                 ; active missile sprite
141+  C444 CD 15 A9         call screen_getblock
142+  C447 CD 9A A9         call sprites_drawsprite                 ; draw the sprite
143+  C44A DD 4E 00 DD      ld bc,(ix)          ; load coords into bc
143+  C44E 46 01
144+  C450 79               ld a,c              ; get the vertical coord into a
145+  C451 E6 07            and 7               ; divisible by 8?
146+  C453 FE 00            cp 0
147+  C455 C2 71 C4         jp nz,missiles_fall1   ; if not, carry on
148+  C458 CD C8 A8         call screen_getcharcoordsfromscreencoords ; get the char coords into bc
149+  C45B 3E 43            ld a,67             ; load magenta
150+  C45D CD 20 A9         call screen_setattr
151+  C460 DD 4E 00 DD      ld bc,(ix)
151+  C464 46 01
152+  C466 79               ld a,c              ; get vertical
153+  C467 D6 08            sub 8               ; look up one square
154+  C469 4F               ld c,a              ; put a back in c
155+  C46A CD B5 A8         call screen_getattraddressfromscreencoords ; get the attr address into de
156+  C46D 62 6B            ld hl,de
157+  C46F 36 46            ld (hl),70          ; load this square with the yellow colour
158+  C471              missiles_fall1:         ; hl at state
159+  C471 DD 4E 00 DD      ld bc,(ix)          ; get coords back
159+  C475 46 01
160+  C477 CD B3 C4         call missiles_checkforplayer ; check for player
161+  C47A DD 23            inc ix
162+  C47C DD 23            inc ix
163+  C47E DD 23            inc ix              ; get to next missile
164+  C480 C1               pop bc
165+  C481 10 89            djnz missiles_fall0
166+  C483 C9               ret
167+  C484              missiles_fall2:
168+  C484 DD 36 02 00      ld (ix+2),0
169+  C488 C3 71 C4         jp missiles_fall1   ; rejoin the loop
170+  C48B              missiles_fall4:
171+  C48B 3D               dec a               ; decrease the countdown
172+  C48C DD 77 02         ld (ix+2),a         ; store back
173+  C48F C3 71 C4         jp missiles_fall1   ; do next missile
174+  C492
175+  C492              ;
176+  C492              ; Adds the missile to the structure that tracks falling missile
177+  C492              ; Inputs:
178+  C492              ; bc - coords of missile, c vert
179+  C492              missiles_addmissiletofalling:
180+  C492 C5               push bc             ; store the coords
181+  C493 11 4D C3         ld de,missiles_falling
182+  C496 06 04            ld b,4              ; number of possible falling missiles
183+  C498              missiles_addmissiletofalling0:
184+  C498 13               inc de
185+  C499 13               inc de              ; move three along to get the state
186+  C49A 1A               ld a,(de)           ; load the state
187+  C49B FE 00            cp 0                ; check if this is not falling
188+  C49D C2 AE C4         jp nz,missiles_addmissiletofalling1 ; continue the loop if not 0
189+  C4A0 3E 19            ld a,25
190+  C4A2 12               ld (de),a           ; set the state to pre-falling
191+  C4A3 1B               dec de              ; move back coords
192+  C4A4 C1               pop bc              ; get back coords
193+  C4A5 78               ld a,b
194+  C4A6 12               ld (de),a           ; store the vertical
195+  C4A7 1B               dec de
196+  C4A8 79               ld a,c
197+  C4A9 12               ld (de),a           ; store the horizontal
198+  C4AA C5               push bc
199+  C4AB C3 B1 C4         jp missiles_addmissiletofalling2 ; done
200+  C4AE              missiles_addmissiletofalling1:
201+  C4AE 13               inc de              ; move memory along to next rock
202+  C4AF 10 E7            djnz missiles_addmissiletofalling0 ; try the next missile
203+  C4B1              missiles_addmissiletofalling2: ; done, return
204+  C4B1 C1               pop bc              ; to tidy up
205+  C4B2 C9               ret
206+  C4B3
207+  C4B3              ;
208+  C4B3              ; Checks to see if the missile is hitting a player
209+  C4B3              ; Inputs:
210+  C4B3              ; bc - coords of missile we're checking
211+  C4B3              missiles_checkforplayer:
212+  C4B3 ED 5B 0D BB      ld de,(player)       ; get the player coords
213+  C4B7 7B               ld a,e               ; get the vert coord first
214+  C4B8 91               sub c                ; subtract the missile vertical coord from players
215+  C4B9 FE 08            cp 8                 ; the missile will only hit a player if the player is directly underneath, so this must be 8
216+  C4BB C0               ret nz               ; if not, hasn't hit
217+  C4BC 7A               ld a,d               ; get the player horiz coord
218+  C4BD 90               sub b                ; subtract missile coord
219+  C4BE C6 07            add 7                ; add max distance
220+  C4C0 FE 0D            cp 13                ; compare to 13? if carry flag set, they've hit
221+  C4C2 DA C6 C4         jp c,missiles_checkforplayer0
222+  C4C5 C9               ret
223+  C4C6              missiles_checkforplayer0:
224+  C4C6 ED 43 59 C3      ld (missiles_killermissile),bc; store the coords of the killer missile
225+  C4CA CD 07 BC         call player_zonkplayer ; if so, jump out
226+  C4CD C9               ret
227+  C4CE
228+  C4CE              ;
229+  C4CE              ; Player has been hit, so draw text over them and mark as dead
230+  C4CE              ;
231+  C4CE              missiles_zonkplayer:
232+  C4CE CD F5 BB         call player_killplayer      ; mark as dead
233+  C4D1 ED 4B 0D BB      ld bc,(player)              ; get player coords
234+  C4D5 CD C8 A8         call screen_getcharcoordsfromscreencoords ; get char coords
235+  C4D8 0D               dec c
236+  C4D9 0D               dec c
237+  C4DA C5               push bc
238+  C4DB CD 71 A8         call screen_getcellattradress ; attrs here
239+  C4DE 06 05            ld b,5
240+  C4E0 3E 42            ld a,66
241+  C4E2 CD 2B A8         call screen_setcolours
242+  C4E5 CD 9F A6         call buffer_buffertoscreen  ; copy buffer to screen
243+  C4E8 C1               pop bc
244+  C4E9 ED 5B 76 A7      ld de,(screen_offset)
245+  C4ED 78               ld a,b
246+  C4EE 93               sub e
247+  C4EF 47               ld b,a                      ; subtract the offset
248+  C4F0 04               inc b
249+  C4F1 04               inc b                       ; add two for the score rows
250+  C4F2 ED 43 BC 84      ld (string_zonk),bc         ; set coords of string
251+  C4F6 21 BC 84         ld hl,string_zonk
252+  C4F9 CD C4 84         call string_print
253+  C4FC 06 14            ld b,20
254+  C4FE CD 82 80         call utilities_pauseforframes ; pause
255+  C501 C9               ret
256+  C502
# file closed: game/missiles.asm
 46   C502                  include "game\thepit.asm"
# file opened: game/thepit.asm
  1+  C502              ;
  2+  C502              ; Timer for deciding how fast the trap withdraws
  3+  C502              ;
  4+  C502              thepit_timer:
  5+  C502 00               defb 0
  6+  C503
  7+  C503              ;
  8+  C503              ; Ticks for the trap state. Will count to 3 then reset
  9+  C503              ;
 10+  C503              thepit_trapcount:
 11+  C503 00               defb 0
 12+  C504
 13+  C504              ;
 14+  C504              ; The horizontal coordinate of the current pit trap
 15+  C504              ;
 16+  C504              thepit_trapcoord:
 17+  C504 08               defb 8
 18+  C505
 19+  C505              ;
 20+  C505              ; Initialises the pit
 21+  C505              ;
 22+  C505              thepit_init:
 23+  C505 21 04 C5         ld hl,thepit_trapcoord
 24+  C508 36 08            ld (hl),8
 25+  C50A 21 03 C5         ld hl,thepit_trapcount
 26+  C50D 36 00            ld (hl),0
 27+  C50F C9               ret
 28+  C510
 29+  C510              ;
 30+  C510              ; Performs per frame processing on the pit room
 31+  C510              ;
 32+  C510              thepit_process:
 33+  C510 3A 1B BB         ld a,(player_location)
 34+  C513 FE 02            cp 2                            ; if two, the player is in the pit, so process the trap
 35+  C515 C2 59 C5         jp nz,thepit_process0
 36+  C518 3A 02 C5         ld a,(thepit_timer)             ; get the timer
 37+  C51B 3C               inc a
 38+  C51C 32 02 C5         ld (thepit_timer),a             ; store
 39+  C51F FE 02            cp 2                           ; have we reached the trigger?
 40+  C521 C2 59 C5         jp nz, thepit_process0          ; no need to do anything
 41+  C524 3E 00            ld a,0
 42+  C526 32 02 C5         ld (thepit_timer),a             ; zero the timer and process
 43+  C529 3A 03 C5         ld a,(thepit_trapcount)         ; get the current count
 44+  C52C 3C               inc a
 45+  C52D 32 03 C5         ld (thepit_trapcount),a         ; reset the trap count
 46+  C530 FE 04            cp 4                            ; do we need to begin another character?
 47+  C532 C2 41 C5         jp nz,thepit_process1           ; if not, draw as normal
 48+  C535 3E 00            ld a,0
 49+  C537 32 03 C5         ld (thepit_trapcount),a         ; reset the trap count
 50+  C53A 3A 04 C5         ld a,(thepit_trapcoord)         ; get the trap horiz coord
 51+  C53D 3D               dec a
 52+  C53E 32 04 C5         ld (thepit_trapcoord),a         ; store the reduced coord
 53+  C541
 54+  C541              thepit_process1:                    ; draw the trapdoor in current position
 55+  C541 3A 04 C5         ld a,(thepit_trapcoord)
 56+  C544 FE 02            cp 2
 57+  C546 CA 59 C5         jp z, thepit_process0           ; don't process outside of the pit
 58+  C549 4F               ld c,a
 59+  C54A 06 0A            ld b,10                         ; vertical coord will always be the same
 60+  C54C 3A 03 C5         ld a,(thepit_trapcount)         ; get the trap count
 61+  C54F 5F               ld e,a                          ; store in e
 62+  C550 3E 16            ld a,22                         ; 21 is full trapdoor
 63+  C552 83               add a,e
 64+  C553 CD 15 A9         call screen_getblock
 65+  C556 CD F2 A8         call screen_showchar            ; show the char
 66+  C559
 67+  C559              thepit_process0:
 68+  C559 C9               ret
 69+  C55A
# file closed: game/thepit.asm
 47   C55A                  include "game\monster.asm"
# file opened: game/monster.asm
  1+  C55A
  2+  C55A              ;
  3+  C55A              ; Where the monster currently is
  4+  C55A              ;
  5+  C55A              monster_currentcoords:
  6+  C55A 00 00            defb 0,0
  7+  C55C
  8+  C55C              ;
  9+  C55C              ; The start coords of the monster
 10+  C55C              ;
 11+  C55C              monster_initcoords:
 12+  C55C 70 20            defb 112,32
 13+  C55E
 14+  C55E              ;
 15+  C55E              ; Store the memory location of the current jump position
 16+  C55E              ;
 17+  C55E              monster_jumppos:
 18+  C55E 00 00            defb 0,0
 19+  C560
 20+  C560              ;
 21+  C560              ; The jump table for the monster.
 22+  C560              ;
 23+  C560              monster_jumptable:
 24+  C560 FF 03 02 02      defb 255,3,2,2,2,2,2,2,2,2,1,1,1,1,1,1,255
 24+  C564 02 02 02 02
 24+  C568 02 02 01 01
 24+  C56C 01 01 01 01
 24+  C570 FF
 25+  C571
 26+  C571              ;
 27+  C571              ; The vertical direction: 0 up, 1 down
 28+  C571              ;
 29+  C571              monster_jumpdirectionvert:
 30+  C571 00               defb 0
 31+  C572
 32+  C572
 33+  C572              ;
 34+  C572              ; Initialises the pit monster
 35+  C572              ;
 36+  C572              monster_init:
 37+  C572 ED 4B 5C C5      ld bc,(monster_initcoords)              ; load the initial coords
 38+  C576 ED 43 5A C5      ld (monster_currentcoords),bc           ; save in current coords
 39+  C57A 21 61 C5         ld hl,monster_jumptable+1
 40+  C57D 22 5E C5         ld (monster_jumppos),hl                 ; store the initial position in the jump table
 41+  C580 3E 00            ld a,0
 42+  C582 32 71 C5         ld (monster_jumpdirectionvert),a        ; going up
 43+  C585 CD C2 C5         call monster_draw                       ; the monster
 44+  C588 C9               ret
 45+  C589
 46+  C589              ;
 47+  C589              ; Animate the monster
 48+  C589              ;
 49+  C589              monster_process:
 50+  C589 CD C2 C5         call monster_draw                       ; overwrite the old sprite
 51+  C58C ED 4B 5A C5      ld bc,(monster_currentcoords)           ; get the current coords
 52+  C590 2A 5E C5         ld hl,(monster_jumppos)                 ; get the position in the jump table
 53+  C593 56               ld d,(hl)                               ; get the jump modifier
 54+  C594 3A 71 C5         ld a,(monster_jumpdirectionvert)        ; get the vertical direction
 55+  C597 FE 00            cp 0                                    ; if 0, going up, so dec vert
 56+  C599 C2 A2 C5         jp nz,monster_process0
 57+  C59C 79               ld a,c
 58+  C59D 92               sub d
 59+  C59E 23               inc hl                                  ; move forward a jump pos
 60+  C59F C3 A5 C5         jp monster_process1
 61+  C5A2              monster_process0:
 62+  C5A2 79               ld a,c                                   ; going down so inc c
 63+  C5A3 82               add a,d
 64+  C5A4 2B               dec hl                                  ; move back a jump pos
 65+  C5A5              monster_process1:
 66+  C5A5 4F               ld c,a                                  ; get the vertical coord back
 67+  C5A6 ED 43 5A C5      ld (monster_currentcoords),bc           ; store the new vertical coords
 68+  C5AA 7E               ld a,(hl)                               ; check the next jump pos
 69+  C5AB FE FF            cp 255                                  ; if 255 reverse
 70+  C5AD CA B6 C5         jp z,monster_process3
 71+  C5B0 22 5E C5         ld (monster_jumppos),hl                 ; store the new pos
 72+  C5B3 C3 BE C5         jp monster_process2                     ; keep going
 73+  C5B6              monster_process3:
 74+  C5B6 3A 71 C5         ld a,(monster_jumpdirectionvert)        ; get the direction
 75+  C5B9 EE 01            xor 1                                   ; flip it
 76+  C5BB 32 71 C5         ld (monster_jumpdirectionvert),a        ; store it
 77+  C5BE              monster_process2:
 78+  C5BE CD C2 C5         call monster_draw                       ; finally, draw the monster
 79+  C5C1 C9               ret
 80+  C5C2
 81+  C5C2              ;
 82+  C5C2              ; Draw the monster at the current location
 83+  C5C2              ;
 84+  C5C2              monster_draw:
 85+  C5C2 ED 4B 5A C5      ld bc,(monster_currentcoords)
 86+  C5C6 21 4A B6         ld hl,monster_sprite                    ; load the first frame
 87+  C5C9 CD F8 A9         call sprites_draw2by2sprite
 88+  C5CC C9               ret
# file closed: game/monster.asm
 48   C5CD
 49   C5CD              ;===========================================================================
 50   C5CD              ; main routine - the code execution starts here.
 51   C5CD              ; Sets up the new interrupt routine, the memory
 52   C5CD              ; banks and jumps to the start loop.
 53   C5CD              ;===========================================================================
 54   C5CD              main:
 55   C5CD
 56   C5CD                  ; Draw the title screen
 57   C5CD              main_titlescreen:
 58   C5CD CD B9 AA         call titlescreen_show
 59   C5D0 CD 52 BB         call player_init_gamestart
 60   C5D3
 61   C5D3              main_lifestart:
 62   C5D3
 63   C5D3 CD 70 BB         call player_init_lifestart
 64   C5D6
 65   C5D6 CD 1F AC         call lifescreen_draw        ; show the lives remaining screen
 66   C5D9
 67   C5D9 CD 00 80         call init_start
 68   C5DC CD 91 A7         call screen_draw
 69   C5DF CD E0 A6         call buffer_allbuffertoscreen
 70   C5E2
 71   C5E2 CD 5B C3         call missiles_init
 72   C5E5 CD F7 BC         call ship_land              ; land the ship
 73   C5E8 CD 0A BE         call tank_init
 74   C5EB CD 23 C3         call diamonds_init
 75   C5EE CD 05 C5         call thepit_init
 76   C5F1 CD 72 C5         call monster_init
 77   C5F4
 78   C5F4              mloop:
 79   C5F4 76               halt
 80   C5F5 CD 29 C6         call main_loop_processing
 81   C5F8
 82   C5F8                  ;
 83   C5F8                  ; Check if the player died
 84   C5F8                  ;
 85   C5F8 21 17 BB         ld hl,player+10
 86   C5FB 7E               ld a,(hl)                   ; check if the player died this frame
 87   C5FC FE 01            cp 1
 88   C5FE C2 15 C6         jp nz,mloop0
 89   C601 CD D7 BB         call player_died        ; do end of life housekeeping
 90   C604 06 28            ld b,40
 91   C606 CD 82 80         call utilities_pauseforframes
 92   C609 21 16 BB         ld hl,player+9        ; check lives remaining
 93   C60C 7E               ld a,(hl)
 94   C60D FE 00            cp 0
 95   C60F CA 57 C6         jp z,main_gameover   ; leave the loop if we're done
 96   C612 C3 D3 C5         jp main_lifestart    ; otherwise, start a new life
 97   C615              mloop0:
 98   C615                  ;
 99   C615                  ; Check if the player completed the level
100   C615                  ;
101   C615 21 1A BB         ld hl,player+13
102   C618 7E               ld a,(hl)
103   C619 FE 01            cp 1
104   C61B C2 F4 C5         jp nz,mloop
105   C61E CD C1 BC         call player_checkforexit
106   C621 FE 01            cp 1                        ; look at return, if 1, level has been completed
107   C623 CA 5D C6         jp z,main_endlevel          ; jump to level transition screen
108   C626 C3 F4 C5         jp mloop                ; start the loop again
109   C629
110   C629
111   C629              main_loop_processing:
112   C629
113   C629 CD 9F A6         call buffer_buffertoscreen  ; copy buffer to screen
114   C62C CD 04 A6         call buffer_clearlist       ; zero the updated lines list
115   C62F CD 1C BB         call player_getlocation     ; figure out where the player is
116   C632 CD 0D BC         call player_drawplayer      ; delete player
117   C635 CD 8A B6         call control_keyboard       ; check keyboard
118   C638 CD 0D BC         call player_drawplayer      ; draw player
119   C63B CD 39 BE         call tank_process           ; prcoess the tank
120   C63E CD E2 BC         call ship_process           ; proces the ship
121   C641 CD 29 C0         call rocks_processrocks     ; process falling rocks
122   C644 CD 10 C5         call thepit_process         ; process the pit trap
123   C647 CD 83 C3         call missiles_process       ; process missiles
124   C64A CD 89 C5         call monster_process        ; process monster
125   C64D CD 02 C3         call diamonds_twinkle       ; make the diamonds twinkle
126   C650 CD 8C C1         call scores_printscore      ; update the score on screen
127   C653 CD F4 BA         call game_incrementframe    ; increment the game frame
128   C656
129   C656 C9               ret
130   C657
131   C657              main_gameover:
132   C657 CD 72 AC         call gameover_draw          ; show the game over screen
133   C65A C3 CD C5         jp main_titlescreen         ; go back to title
134   C65D
135   C65D              main_endlevel:
136   C65D CD BD BB         call player_recordcurrentscore
137   C660 CD 60 AD         call endlevel_draw          ; show the end level screen
138   C663 C3 D3 C5         jp main_lifestart           ; start a new life
139   C666
140   C666              ;===========================================================================
141   C666              ; Stack.
142   C666              ;===========================================================================
143   C666
144   C666              ; Stack: this area is reserved for the stack
145   C666              STACK_SIZE: equ 100    ; in words
146   C666
147   C666              ; Reserve stack space
148   C666 00 00            defw 0  ; WPMEM, 2
149   C668              stack_bottom:
150   C668 00 00 00...      defs    STACK_SIZE*2, 0
151   C730              stack_top:
152   C730 00 00            defw 0  ; WPMEM, 2
153   C732
154   C732                     SAVESNA "ThePit.sna", main
# file closed: main.asm
