# file opened: main.asm
  1   0000                  DEVICE ZXSPECTRUM48
  2   0000
  3   0000                  ORG $8000
  4   8000
  5   8000              ;===========================================================================
  6   8000              ; Persistent watchpoint.
  7   8000              ; Change WPMEMx (remove the 'x' from WPMEMx) below to activate.
  8   8000              ; If you do so the program will hit a breakpoint when it tries to
  9   8000              ; write to the first byte of the 3rd line.
 10   8000              ; When program breaks in the fill_memory sub routine please hover over hl
 11   8000              ; to see that it contains 0x5804 or COLOR_SCREEN+64.
 12   8000              ;===========================================================================
 13   8000
 14   8000              ; WPMEMx 0x5840, 1, w
 15   8000
 16   8000
 17   8000              ;===========================================================================
 18   8000              ; Include modules
 19   8000              ;===========================================================================
 20   8000                  include "init.asm"
# file opened: init.asm
  1+  8000              ;
  2+  8000              ; Set up at start up
  3+  8000              ;
  4+  8000              init_start:
  5+  8000              ; We want a black screen.
  6+  8000
  7+  8000 3E 47            ld a,71             ; white ink (7) on black paper (0),
  8+  8002                                      ; bright (64).
  9+  8002 CD 67 80         call utilities_clearscreen
 10+  8005 32 8D 5C         ld (23693),a        ; set our screen colours.
 11+  8008 AF               xor a               ; quick way to load accumulator with zero.
 12+  8009 CD 9B 22         call 8859           ; set permanent border colours.
 13+  800C
 14+  800C 21 15 A7         ld hl,screen_offset ; reset some temp variables
 15+  800F 36 00            ld (hl),0
 16+  8011 21 16 A7         ld hl,screen_tmp
 17+  8014 36 00            ld (hl),0
 18+  8016 21 AD A5         ld hl,buffer_tmp
 19+  8019 36 00            ld (hl),0
 20+  801B 23               inc hl
 21+  801C 36 00            ld (hl),0
 22+  801E
 23+  801E CD 2D B9         call game_resetcurrentframe ; reset current frame
 24+  8021
 25+  8021 C9               ret
 26+  8022
 27+  8022              ;
 28+  8022              ;   Start coord
 29+  8022              ;   vert c, horiz b
 30+  8022              init_coord:
 31+  8022 18 30            defb 24,48
 32+  8024
 33+  8024              ;
 34+  8024              ; Number of lives to start
 35+  8024              ;
 36+  8024              init_lives:
 37+  8024 03               defb 3
 38+  8025
 39+  8025              ;
 40+  8025              ; Score to start
 41+  8025              ;
 42+  8025              init_score:
 43+  8025 30 30 30 30      defb '000000'
 43+  8029 30 30
# file closed: init.asm
 21   802B                  include "utilities.asm"
# file opened: utilities.asm
  1+  802B              ; ##########################################################################
  2+  802B              ; Print a character
  3+  802B              ; Inputs:
  4+  802B              ; b - x coord
  5+  802B              ; c - y coord
  6+  802B              ; d - character
  7+  802B              ; e - colour
  8+  802B              ; ##########################################################################
  9+  802B              utilities_print_char:
 10+  802B 7B               ld a,e
 11+  802C 32 8F 5C         ld (23695),a        ; set our temporary screen colours.
 12+  802F 3E 16            ld a,22
 13+  8031 D7               rst 16              ; Calls the Sinclair PRINT AT routine
 14+  8032 78               ld a,b              ; Gets the X co-ordinate
 15+  8033 3D               dec a
 16+  8034 D7               rst 16
 17+  8035 79               ld a,c              ; and the Y co-ordinate
 18+  8036 D7               rst 16              ; So, essentially PRINT AT X,Y; like in BASIC
 19+  8037 7A               ld a,d              ; ASCII code for udg.
 20+  8038 D7               rst 16              ; draw block.
 21+  8039 C9               ret
 22+  803A
 23+  803A
 24+  803A              ;Inputs:
 25+  803A              ;     DE and A are factors
 26+  803A              ;Outputs:
 27+  803A              ;     A is not changed
 28+  803A              ;     B is 0
 29+  803A              ;     C is not changed
 30+  803A              ;     DE is not changed
 31+  803A              ;     HL is the product
 32+  803A              ;Time:
 33+  803A              ;     342+6x
 34+  803A              ;
 35+  803A              utilities_multiply:
 36+  803A 06 08            ld b,8          ;7           7
 37+  803C 21 00 00         ld hl,0         ;10         10
 38+  803F 29               add hl,hl     ;11*8       88
 39+  8040 07               rlca          ;4*8        32
 40+  8041 30 01            jr nc,$+3     ;(12|18)*8  96+6x
 41+  8043 19                   add hl,de   ;--         --
 42+  8044 10 F9            djnz $-5      ;13*7+8     99
 43+  8046 C9               ret             ;10         10
 44+  8047
 45+  8047              utilities_waitforkey:
 46+  8047 21 08 5C         ld hl,23560         ; LAST K system variable.
 47+  804A 36 00            ld (hl),0           ; put null value there.
 48+  804C              utilities_waitforkey0:
 49+  804C 7E               ld a,(hl)           ; new value of LAST K.
 50+  804D FE 00            cp 0                ; is it still zero?
 51+  804F 28 FB            jr z,utilities_waitforkey0           ; yes, so no key pressed.
 52+  8051 C9               ret                 ; key was pressed.
 53+  8052
 54+  8052              ;
 55+  8052              ; Waits number of frames for keypress. If got, returns 1, if not 0
 56+  8052              ; Inputs:
 57+  8052              ; a - number of frames to waits
 58+  8052              ; Ouputs:
 59+  8052              ; e - 0 not pressed, 1 pressed
 60+  8052              utilities_waitforkey_forframes:
 61+  8052 21 08 5C         ld hl,23560         ; LAST K system variable.
 62+  8055 36 00            ld (hl),0           ; put null value there.
 63+  8057 47               ld b,a              ; number of frames to wait
 64+  8058              utilities_waitforkey_forframes0:
 65+  8058 7E               ld a,(hl)           ; new value of LAST K.
 66+  8059 FE 00            cp 0                ; is it still zero?
 67+  805B 28 03            jr z,utilities_waitforkey_forframes1           ; yes, so no key pressed.
 68+  805D 1E 01            ld e,1              ; set the pressed flag
 69+  805F C9               ret                 ; key was pressed.
 70+  8060              utilities_waitforkey_forframes1:
 71+  8060 76               halt                ; wait for frame
 72+  8061 76               halt                ; wait for frame
 73+  8062 10 F4            djnz utilities_waitforkey_forframes0 ; loop again
 74+  8064 1E 00            ld e,0              ; nothing pressed in time
 75+  8066 C9               ret
 76+  8067
 77+  8067              ;
 78+  8067              ; Clears the screen
 79+  8067              ; Inputs:
 80+  8067              ; a - attribute colour
 81+  8067              utilities_clearscreen:
 82+  8067 76               halt
 83+  8068 21 00 58         ld hl,22528         ; attr
 84+  806B 11 01 58         ld de,22529         ; attr+1
 85+  806E 01 FF 02         ld bc,767
 86+  8071 77               ld (hl),a
 87+  8072 ED B0            ldir
 88+  8074
 89+  8074 21 00 40         ld hl, 16384        ;pixels
 90+  8077 11 01 40         ld de, 16385        ;pixels + 1
 91+  807A 01 FF 17         ld bc, 6143         ;pixels area length - 1
 92+  807D 36 00            ld (hl), 0          ;set first byte to '0'
 93+  807F ED B0            ldir                ;copy bytes
 94+  8081
 95+  8081 C9               ret
 96+  8082
 97+  8082              ;
 98+  8082              ; Wait for a number of frames
 99+  8082              ; Inputs:
100+  8082              ; b - number of frames
101+  8082              utilities_pauseforframes:
102+  8082 76               halt
103+  8083 10 FD            djnz utilities_pauseforframes
104+  8085 C9               ret
105+  8086
106+  8086              utilities_readkey:
107+  8086 21 A6 80         LD HL,utilties_keymap              ; Point HL at the keyboard list
108+  8089 16 08            LD D,8                                  ; This is the number of ports (rows) to check
109+  808B 0E FE            LD C,$FE                            ; C is always FEh for reading keyboard ports
110+  808D              utilities_readkey_0:
111+  808D 46               LD B,(HL)                               ; Get the keyboard port address from table
112+  808E 23               INC HL                                  ; Increment to list of keys
113+  808F ED 78            IN A,(C)                                ; Read the row of keys in
114+  8091 E6 1F            AND $1F                                     ; We are only interested in the first five bits
115+  8093 1E 05            LD E,5                                  ; This is the number of keys in the row
116+  8095              utilities_readkey_1:
117+  8095 CB 3F            SRL A                                   ; Shift A right; bit 0 sets carry bit
118+  8097 30 0B            JR NC,utilities_readkey_2   ; If the bit is 0, we've found our key
119+  8099 23               INC HL                                  ; Go to next table address
120+  809A 1D               DEC E                                   ; Decrement key loop counter
121+  809B 20 F8            JR NZ,utilities_readkey_1   ; Loop around until this row finished
122+  809D 15               DEC D                                   ; Decrement row loop counter
123+  809E 20 ED            JR NZ,utilities_readkey_0   ; Loop around until we are done
124+  80A0 A7               AND A                                   ; Clear A (no key found)
125+  80A1 C3 86 80         jp utilities_readkey
126+  80A4              utilities_readkey_2:
127+  80A4 7E               LD A,(HL)                               ; We've found a key at this point; fetch the character code!
128+  80A5 C9               RET
129+  80A6
130+  80A6              utilties_keymap:
131+  80A6 FE 23 5A 58      defb $FE,"#","Z","X","C","V"
131+  80AA 43 56
132+  80AC FD 41 53 44      defb $FD,"A","S","D","F","G"
132+  80B0 46 47
133+  80B2 FB 51 57 45      defb $FB,"Q","W","E","R","T"
133+  80B6 52 54
134+  80B8 F7 31 32 33      defb $F7,"1","2","3","4","5"
134+  80BC 34 35
135+  80BE EF 30 39 38      defb $EF,"0","9","8","7","6"
135+  80C2 37 36
136+  80C4 DF 50 4F 49      defb $DF,"P","O","I","U","Y"
136+  80C8 55 59
137+  80CA BF 23 4C 4B      defb $BF,"#","L","K","J","H"
137+  80CE 4A 48
138+  80D0 7F 20 23 4D      defb $7F," ","#","M","N","B"
138+  80D4 4E 42
139+  80D6
140+  80D6
141+  80D6              ;
142+  80D6              ; Generates a randomish number in the range 0 to e
143+  80D6              ; Inputs:
144+  80D6              ; e - upper value
145+  80D6              ; Outputs:
146+  80D6              ; a - random number
147+  80D6              utilities_randomupper
148+  80D6 3A 03 B9         ld a,(game_framenumber)
149+  80D9 6F               ld l,a
150+  80DA 26 00            ld h,0
151+  80DC 16 00            ld d,0
152+  80DE 42 4B            ld bc,de
153+  80E0              utilities_randomupper0:
154+  80E0 B7               or a
155+  80E1 ED 42            sbc hl,bc
156+  80E3 F2 E0 80         jp p,utilities_randomupper0
157+  80E6 09               add hl,bc
158+  80E7 01 00 00         ld bc,0
159+  80EA 09               add hl,bc
160+  80EB 7D               ld a,l
161+  80EC C9               ret
# file closed: utilities.asm
 22   80ED                  include "strings.asm"
# file opened: strings.asm
  1+  80ED              string_score1:
  2+  80ED 04 00 53 43      defb 4,0,'SCORE1',255
  2+  80F1 4F 52 45 31
  2+  80F5 FF
  3+  80F6              string_scorenumbers1:
  4+  80F6 04 01 30 30      defb 4,1,'000000',255
  4+  80FA 30 30 30 30
  4+  80FE FF
  5+  80FF              string_company:
  6+  80FF 0E 00 45 4E      defb 14,0,'ENV',255
  6+  8103 56 FF
  7+  8105              string_credits:
  8+  8105 0C 01 50 4C      defb 12,1,'PLAYER 1',255
  8+  8109 41 59 45 52
  8+  810D 20 31 FF
  9+  8110              string_score2:
 10+  8110 16 00 53 43      defb 22,0,'SCORE2',255
 10+  8114 4F 52 45 32
 10+  8118 FF
 11+  8119              string_scorenumbers2:
 12+  8119 16 01 30 30      defb 22,1,'000000',255
 12+  811D 30 30 30 30
 12+  8121 FF
 13+  8122              string_titlescreen_copyright:
 14+  8122 04 16 7F 20      defb 4,22, 127,' 1982 AW ZILEC ELC LTD',255
 14+  8126 31 39 38 32
 14+  812A 20 41 57 20
 14+  812E 5A 49 4C 45
 14+  8132 43 20 45 4C
 14+  8136 43 20 4C 54
 14+  813A 44 FF
 15+  813C
 16+  813C
 17+  813C              string_alttitlescreen_1:
 18+  813C 0C 00 43 52      defb 12,0,'CREDITS 1',255
 18+  8140 45 44 49 54
 18+  8144 53 20 31 FF
 19+  8148              string_alttitlescreen_2:
 20+  8148 00 02 20 20      defb 0,2,'           THE OBJECT',254
 20+  814C 20 20 20 20
 20+  8150 20 20 20 20
 20+  8154 20 54 48 45
 20+  8158 20 4F 42 4A
 20+  815C 45 43 54 FE
 21+  8160 00 03 20 20      defb 0,3,'          OF THIS GAME',254
 21+  8164 20 20 20 20
 21+  8168 20 20 20 20
 21+  816C 4F 46 20 54
 21+  8170 48 49 53 20
 21+  8174 47 41 4D 45
 21+  8178 FE
 22+  8179 00 04 20 20      defb 0,4,'         IS TO DIG DOWN',254
 22+  817D 20 20 20 20
 22+  8181 20 20 20 49
 22+  8185 53 20 54 4F
 22+  8189 20 44 49 47
 22+  818D 20 44 4F 57
 22+  8191 4E FE
 23+  8193 00 05 20 20      defb 0,5,'        TO THE BOTTOM PIT',254
 23+  8197 20 20 20 20
 23+  819B 20 20 54 4F
 23+  819F 20 54 48 45
 23+  81A3 20 42 4F 54
 23+  81A7 54 4F 4D 20
 23+  81AB 50 49 54 FE
 24+  81AF 00 06 20 20      defb 0,6,'               AND',254
 24+  81B3 20 20 20 20
 24+  81B7 20 20 20 20
 24+  81BB 20 20 20 20
 24+  81BF 20 41 4E 44
 24+  81C3 FE
 25+  81C4 00 07 20 20      defb 0,7,'        COLLECT AT LEAST',254
 25+  81C8 20 20 20 20
 25+  81CC 20 20 43 4F
 25+  81D0 4C 4C 45 43
 25+  81D4 54 20 41 54
 25+  81D8 20 4C 45 41
 25+  81DC 53 54 FE
 26+  81DF 00 08 20 20      defb 0,8,'         ONE LARGE JEWEL',254
 26+  81E3 20 20 20 20
 26+  81E7 20 20 20 4F
 26+  81EB 4E 45 20 4C
 26+  81EF 41 52 47 45
 26+  81F3 20 4A 45 57
 26+  81F7 45 4C FE
 27+  81FA 00 09 20 20      defb 0,9,'              THEN',254
 27+  81FE 20 20 20 20
 27+  8202 20 20 20 20
 27+  8206 20 20 20 20
 27+  820A 54 48 45 4E
 27+  820E FE
 28+  820F 00 0A 20 20      defb 0,10,'         RETURN TO SHIP',254
 28+  8213 20 20 20 20
 28+  8217 20 20 20 52
 28+  821B 45 54 55 52
 28+  821F 4E 20 54 4F
 28+  8223 20 53 48 49
 28+  8227 50 FE
 29+  8229 00 0B 20 20      defb 0,11,'         THRU UPPER PIT',255
 29+  822D 20 20 20 20
 29+  8231 20 20 20 54
 29+  8235 48 52 55 20
 29+  8239 55 50 50 45
 29+  823D 52 20 50 49
 29+  8241 54 FF
 30+  8243              string_alttitlescreen_3:
 31+  8243 00 0D 20 20      defb 0,13,'    SINGLE BONUS  5000 POINTS',254
 31+  8247 20 20 53 49
 31+  824B 4E 47 4C 45
 31+  824F 20 42 4F 4E
 31+  8253 55 53 20 20
 31+  8257 35 30 30 30
 31+  825B 20 50 4F 49
 31+  825F 4E 54 53 FE
 32+  8263 00 0E 20 20      defb 0,14,'      COLLECT 1 LARGE JEWEL',254
 32+  8267 20 20 20 20
 32+  826B 43 4F 4C 4C
 32+  826F 45 43 54 20
 32+  8273 31 20 4C 41
 32+  8277 52 47 45 20
 32+  827B 4A 45 57 45
 32+  827F 4C FE
 33+  8281 00 0F 20 20      defb 0,15,'       AND RETURN TO SHIP',254
 33+  8285 20 20 20 20
 33+  8289 20 41 4E 44
 33+  828D 20 52 45 54
 33+  8291 55 52 4E 20
 33+  8295 54 4F 20 53
 33+  8299 48 49 50 FE
 34+  829D 00 11 20 20      defb 0,17,'    DOUBLE BONUS  10000 POINTS',254
 34+  82A1 20 20 44 4F
 34+  82A5 55 42 4C 45
 34+  82A9 20 42 4F 4E
 34+  82AD 55 53 20 20
 34+  82B1 31 30 30 30
 34+  82B5 30 20 50 4F
 34+  82B9 49 4E 54 53
 34+  82BD FE
 35+  82BE 00 12 20 20      defb 0,18,'    COLLECT ALL 3 LARGE JEWELS',254
 35+  82C2 20 20 43 4F
 35+  82C6 4C 4C 45 43
 35+  82CA 54 20 41 4C
 35+  82CE 4C 20 33 20
 35+  82D2 4C 41 52 47
 35+  82D6 45 20 4A 45
 35+  82DA 57 45 4C 53
 35+  82DE FE
 36+  82DF 00 13 20 20      defb 0,19,'       OR   ALL 4 SMALL JEWELS',254
 36+  82E3 20 20 20 20
 36+  82E7 20 4F 52 20
 36+  82EB 20 20 41 4C
 36+  82EF 4C 20 34 20
 36+  82F3 53 4D 41 4C
 36+  82F7 4C 20 4A 45
 36+  82FB 57 45 4C 53
 36+  82FF FE
 37+  8300 00 15 20 20      defb 0,21,'    TRIPLE BONUS  15000 POINTS',254
 37+  8304 20 20 54 52
 37+  8308 49 50 4C 45
 37+  830C 20 42 4F 4E
 37+  8310 55 53 20 20
 37+  8314 31 35 30 30
 37+  8318 30 20 50 4F
 37+  831C 49 4E 54 53
 37+  8320 FE
 38+  8321 00 16 20 20      defb 0,22,'       COLLECT ALL 7 JEWELS',255
 38+  8325 20 20 20 20
 38+  8329 20 43 4F 4C
 38+  832D 4C 45 43 54
 38+  8331 20 41 4C 4C
 38+  8335 20 37 20 4A
 38+  8339 45 57 45 4C
 38+  833D 53 FF
 39+  833F
 40+  833F              string_lifescreen_player:
 41+  833F 0B 00 20 50      defb 11,0,' PLAYER 1 ',255
 41+  8343 4C 41 59 45
 41+  8347 52 20 31 20
 41+  834B FF
 42+  834C              string_lifescreen_lives:
 43+  834C 0B 03 30 20      defb 11,3,48,' MEN LEFT',255
 43+  8350 4D 45 4E 20
 43+  8354 4C 45 46 54
 43+  8358 FF
 44+  8359              string_lifescreen_lastman:
 45+  8359 0C 03 4C 41      defb 12,3,'LAST MAN',255
 45+  835D 53 54 20 4D
 45+  8361 41 4E FF
 46+  8364
 47+  8364              string_gameoverscreen_gameover:
 48+  8364 0C 06 47 41      defb 12,6,'GAME OVER',255
 48+  8368 4D 45 20 4F
 48+  836C 56 45 52 FF
 49+  8370              string_gameoverscreen_copyright:
 50+  8370 05 12 7F 20      defb 5,18,127,' 1982 AW ZILEC ELC LTD',255
 50+  8374 31 39 38 32
 50+  8378 20 41 57 20
 50+  837C 5A 49 4C 45
 50+  8380 43 20 45 4C
 50+  8384 43 20 4C 54
 50+  8388 44 FF
 51+  838A              string_gameoverscreen_bestscores:
 52+  838A 07 16 42 45      defb 7,22,'BEST SCORES TODAY',255
 52+  838E 53 54 20 53
 52+  8392 43 4F 52 45
 52+  8396 53 20 54 4F
 52+  839A 44 41 59 FF
 53+  839E              string_gameover_credits:
 54+  839E 0C 01 43 52      defb 12,1,'CREDITS 0',255
 54+  83A2 45 44 49 54
 54+  83A6 53 20 30 FF
 55+  83AA
 56+  83AA              string_highscore_congratulations:
 57+  83AA 08 05 43 4F      defb 8,5,'CONGRATULATIONS',255
 57+  83AE 4E 47 52 41
 57+  83B2 54 55 4C 41
 57+  83B6 54 49 4F 4E
 57+  83BA 53 FF
 58+  83BC              string_highscore_player1:
 59+  83BC 0C 07 50 4C      defb 12,7,'PLAYER 1',255
 59+  83C0 41 59 45 52
 59+  83C4 20 31 FF
 60+  83C7              string_highscore_player2:
 61+  83C7 0C 07 50 4C      defb 12,7,'PLAYER 2',255
 61+  83CB 41 59 45 52
 61+  83CF 20 32 FF
 62+  83D2              string_highscore_youhaveearned:
 63+  83D2 08 0A 59 4F      defb 8,10,'YOU HAVE EARNED',255
 63+  83D6 55 20 48 41
 63+  83DA 56 45 20 45
 63+  83DE 41 52 4E 45
 63+  83E2 44 FF
 64+  83E4              string_highscore_place1:
 65+  83E4 06 0C 54 48      defb 6,12,'THE GREATEST SCORE',255
 65+  83E8 45 20 47 52
 65+  83EC 45 41 54 45
 65+  83F0 53 54 20 53
 65+  83F4 43 4F 52 45
 65+  83F8 FF
 66+  83F9              string_highscore_place2:
 67+  83F9 06 0C 54 48      defb 6,12,'THE 2ND BEST SCORE',255
 67+  83FD 45 20 32 4E
 67+  8401 44 20 42 45
 67+  8405 53 54 20 53
 67+  8409 43 4F 52 45
 67+  840D FF
 68+  840E              string_highscore_place3:
 69+  840E 06 0C 54 48      defb 6,12,'THE 3RD BEST SCORE',255
 69+  8412 45 20 33 52
 69+  8416 44 20 42 45
 69+  841A 53 54 20 53
 69+  841E 43 4F 52 45
 69+  8422 FF
 70+  8423              string_highscore_pleaseenter
 71+  8423 03 0F 52 45      defb 3,15,'RECORD YOUR INITIALS BELOW',255
 71+  8427 43 4F 52 44
 71+  842B 20 59 4F 55
 71+  842F 52 20 49 4E
 71+  8433 49 54 49 41
 71+  8437 4C 53 20 42
 71+  843B 45 4C 4F 57
 71+  843F FF
 72+  8440
 73+  8440              string_endlevel_youhaveearned:
 74+  8440 08 0B 59 4F      defb 8,11,'YOU HAVE EARNED',255
 74+  8444 55 20 48 41
 74+  8448 56 45 20 45
 74+  844C 41 52 4E 45
 74+  8450 44 FF
 75+  8452              string_endlevel_bonus1:
 76+  8452 09 0D 53 49      defb 9,13,'SINGLE BONUS',255
 76+  8456 4E 47 4C 45
 76+  845A 20 42 4F 4E
 76+  845E 55 53 FF
 77+  8461              string_endlevel_bonus2:
 78+  8461 09 0D 44 4F      defb 9,13,'DOUBLE BONUS',255
 78+  8465 55 42 4C 45
 78+  8469 20 42 4F 4E
 78+  846D 55 53 FF
 79+  8470              string_endlevel_bonus3:
 80+  8470 09 0D 54 52      defb 9,13,'TRIPLE BONUS',255
 80+  8474 49 50 4C 45
 80+  8478 20 42 4F 4E
 80+  847C 55 53 FF
 81+  847F              string_endlevel_points1:
 82+  847F 0A 0F 35 30      defb 10,15,'5000 POINTS',255
 82+  8483 30 30 20 50
 82+  8487 4F 49 4E 54
 82+  848B 53 FF
 83+  848D              string_endlevel_points2:
 84+  848D 09 0F 31 30      defb 9,15,'10000 POINTS',255
 84+  8491 30 30 30 20
 84+  8495 50 4F 49 4E
 84+  8499 54 53 FF
 85+  849C              string_endlevel_points3:
 86+  849C 09 0F 31 35      defb 9,15,'15000 POINTS',255
 86+  84A0 30 30 30 20
 86+  84A4 50 4F 49 4E
 86+  84A8 54 53 FF
 87+  84AB              string_endlevel_anothergo:
 88+  84AB 08 12 48 41      defb 8,18,'HAVE ANOTHER GO',255
 88+  84AF 56 45 20 41
 88+  84B3 4E 4F 54 48
 88+  84B7 45 52 20 47
 88+  84BB 4F FF
 89+  84BD
 90+  84BD              string_zonk:
 91+  84BD 00 00 5A 4F      defb 0,0,'ZONK!',255
 91+  84C1 4E 4B 21 FF
 92+  84C5              ;
 93+  84C5              ; Prints specified string
 94+  84C5              ; Inputs:
 95+  84C5              ; de: pointer to string
 96+  84C5              ; bc: length of string
 97+  84C5              ;
 98+  84C5              ; Print String Data
 99+  84C5              ; First two bytes of string contain X and Y char position, then the string
100+  84C5              ; Individual strings are terminated with 0xFE
101+  84C5              ; End of data is terminated with 0xFF
102+  84C5              ; HL: Address of string
103+  84C5              ;
104+  84C5 5E           string_print:           LD E,(HL)                       ; Fetch the X coordinate
105+  84C6 23                                   INC HL                          ; Increase HL to the next memory location
106+  84C7 56                                   LD D,(HL)                       ; Fetch the Y coordinate
107+  84C8 23                                   INC HL                          ; Increase HL to the next memory location
108+  84C9 CD DC 84                             CALL string_getcharaddress           ; Calculate the screen address (in DE)
109+  84CC 7E           string_print_0:         LD A,(HL)                       ; Fetch the character to print
110+  84CD 23                                   INC HL                          ; Increase HL to the next character
111+  84CE FE FE                                CP 0xFE                         ; Compare with 0xFE
112+  84D0 28 F3                                JR Z,string_print               ; If it is equal to 0xFE then loop back to print next string
113+  84D2 D0                                   RET NC                          ; If it is greater or equal to (carry bit set) then
114+  84D3 E5                                   PUSH HL                         ; Push HL on stack (Print_Char will not preserve HL)
115+  84D4 CD EC 84                             CALL Print_Char                 ; Print the character
116+  84D7 E1                                   POP HL                          ; Retrieve HL back off the stack
117+  84D8 1C                                   INC E                           ; Go to the next screen address
118+  84D9 18 F1                                JR string_print_0               ; Loop back to print next character
119+  84DB C9                                   RET
120+  84DC
121+  84DC              ; Get screen address
122+  84DC              ; D = Y character position
123+  84DC              ; E = X character position
124+  84DC              ; Returns address in DE
125+  84DC              ;
126+  84DC 7A           string_getcharaddress:       LD A,D
127+  84DD E6 07                                AND %00000111
128+  84DF 1F                                   RRA
129+  84E0 1F                                   RRA
130+  84E1 1F                                   RRA
131+  84E2 1F                                   RRA
132+  84E3 B3                                   OR E
133+  84E4 5F                                   LD E,A
134+  84E5 7A                                   LD A,D
135+  84E6 E6 18                                AND %00011000
136+  84E8 F6 40                                OR %01000000
137+  84EA 57                                   LD D,A
138+  84EB C9                                   RET                             ; Returns screen address in DE
139+  84EC
140+  84EC              ; Print a single character out
141+  84EC              ; A:  Character to print
142+  84EC              ; DE: Screen address to print character at
143+  84EC              ;
144+  84EC 21 00 3C     Print_Char:             LD HL,0x3C00                    ; Address of character set table in ROM
145+  84EF 06 00                                LD B,0                          ; Set BC to A
146+  84F1 4F                                   LD C,A
147+  84F2 E6 FF                                AND 0xFF                        ; Clear the carry bit
148+  84F4 CB 11                                RL C                            ; Multiply BC by 8 (shift left 3 times)
149+  84F6 CB 10                                RL B
150+  84F8 CB 11                                RL C
151+  84FA CB 10                                RL B
152+  84FC CB 11                                RL C
153+  84FE CB 10                                RL B
154+  8500 09                                   ADD HL,BC                       ; Get the character address in HL
155+  8501 0E 08                                LD C,8                          ; Loop counter
156+  8503 D5                                   PUSH DE
157+  8504 7E           Print_Char_1:           LD A,(HL)                       ; Get the byte from the ROM into A
158+  8505 12                                   LD (DE),A                       ; Stick A onto the screen
159+  8506 14                                   INC D                           ; Goto next line on screen
160+  8507 2C                                   INC L                           ; Goto next byte of character
161+  8508 0D                                   DEC C                           ; Decrease the loop counter
162+  8509 20 F9                                JR NZ,Print_Char_1              ; Loop around whilst it is Not Zero (NZ)
163+  850B D1                                   POP DE
164+  850C C9                                   RET                             ; Return from the subroutine
# file closed: strings.asm
 23   850D                  include "screen\buffer.asm"
# file opened: screen/buffer.asm
  1+  850D              buffer_buffer:
  2+  850D 00 00 00...      defs 7424                   ; area reserved for screen
  3+  A20D
  4+  A20D              buffer_attr_buffer:
  5+  A20D 00 00 00...      defs 928                    ; attrs buffer area
  6+  A5AD
  7+  A5AD              buffer_tmp:
  8+  A5AD 00 00            defb 0,0                    ; temp area
  9+  A5AF
 10+  A5AF              buffer_updatedlines:
 11+  A5AF FF FF FF...      defs 21,255
 12+  A5C4
 13+  A5C4              buffer_updateall:
 14+  A5C4 00               defb 0
 15+  A5C5
 16+  A5C5              ;
 17+  A5C5              ; Stores a line number in the update list
 18+  A5C5              ; Inputs:
 19+  A5C5              ; a - row number
 20+  A5C5              buffer_marklineforupdate:
 21+  A5C5 FE 15            cp 21
 22+  A5C7 D0               ret nc                          ; dont store lines that we shouldn't draw
 23+  A5C8 5F               ld e,a                          ; store in e
 24+  A5C9 06 15            ld b,21
 25+  A5CB 21 AF A5         ld hl,buffer_updatedlines
 26+  A5CE              buffer_marklineforupdate0:
 27+  A5CE 7E               ld a,(hl)                       ; get the line stored in updated lines
 28+  A5CF BB               cp e                            ; is this the same as the row number passed in?
 29+  A5D0 C8               ret z                           ; if so, don't need to do anything
 30+  A5D1 FE FF            cp 255                          ; is this 255, ie the end of the buffer
 31+  A5D3 C2 D8 A5         jp nz,buffer_marklineforupdate1 ; if not, move to next
 32+  A5D6 73               ld (hl),e                       ; if it is, this spot is empty, so store the row number
 33+  A5D7 C9               ret                             ; and finish
 34+  A5D8              buffer_marklineforupdate1:
 35+  A5D8 23               inc hl
 36+  A5D9 10 F3            djnz buffer_marklineforupdate0
 37+  A5DB C9               ret
 38+  A5DC
 39+  A5DC              ;
 40+  A5DC              ; Zeroes the updated lines list
 41+  A5DC              ;
 42+  A5DC              buffer_clearlist:
 43+  A5DC 06 15            ld b,21
 44+  A5DE 21 AF A5         ld hl,buffer_updatedlines
 45+  A5E1              buffer_clearlist0:
 46+  A5E1 36 FF            ld (hl),255
 47+  A5E3 23               inc hl
 48+  A5E4 10 FB            djnz buffer_clearlist0
 49+  A5E6 C9               ret
 50+  A5E7
 51+  A5E7              ;
 52+  A5E7              ; Copies the buffer to the screen. Use stack.
 53+  A5E7              ; Inputs:
 54+  A5E7              ; a - row number to display - 0 is first line
 55+  A5E7              ;
 56+  A5E7              buffer_bufferlinetoscreen:
 57+  A5E7 4F               ld c,a                          ; store a
 58+  A5E8 ED 5B 15 A7      ld de,(screen_offset)          ; load the screen offset, this is in rows, want it *256
 59+  A5EC 83               add a,e                       ; add the row number
 60+  A5ED 11 00 01         ld de,256
 61+  A5F0 CD 3A 80         call utilities_multiply
 62+  A5F3 54 5D            ld de,hl
 63+  A5F5 21 0D 85         ld hl,buffer_buffer
 64+  A5F8 19               add hl,de                   ; add the offset
 65+  A5F9 79               ld a,c                      ; get original row back
 66+  A5FA ED 73 58 A6      ld (buffer_bufferlinetoscreen1+1),sp ; this is some self-modifying code; stores the stack pointer in an ld sp,nn instruction at the end
 67+  A5FE D9               exx
 68+  A5FF 0E 00            ld c,0                      ; zero horizontal
 69+  A601 47               ld b,a                      ; load the row number into vertical coord
 70+  A602 04               inc b
 71+  A603 04               inc b                       ; move forward 2 to allow for scores
 72+  A604 CD FF A7         call screen_getcelladdress  ; get the memory into de
 73+  A607 21 10 00         ld hl,16                    ; offset by 16 chars to get to the centre, since populating stack from right
 74+  A60A 19               add hl,de
 75+  A60B              buffer_bufferlinetoscreen0:
 76+  A60B D9               exx                         ; hl is now buffer
 77+  A60C 23               inc hl
 78+  A60D 23               inc hl                      ; move hl forward 2 to skip first two blocks
 79+  A60E F9               ld sp,hl                    ; do first fourteen for left hand side, sp pointing at buffer
 80+  A60F F1               pop af
 81+  A610 C1               pop bc
 82+  A611 D1               pop de
 83+  A612 DD E1            pop ix
 84+  A614 D9               exx                         ; hl is now screen
 85+  A615 08               ex af,af'
 86+  A616 F1               pop af
 87+  A617 C1               pop bc
 88+  A618 D1               pop de
 89+  A619 F9               ld sp,hl                    ; sp pointing at screen
 90+  A61A D5               push de
 91+  A61B C5               push bc
 92+  A61C F5               push af
 93+  A61D 08               ex af,af'
 94+  A61E D9               exx                         ; hl is now buffer
 95+  A61F DD E5            push ix
 96+  A621 D5               push de
 97+  A622 C5               push bc
 98+  A623 F5               push af
 99+  A624 1E 0E            ld e,14                    ; do another fourteen for right hand side
100+  A626 16 00            ld d,0
101+  A628 19               add hl,de
102+  A629 F9               ld sp,hl                    ; sp pointing at buffer
103+  A62A F1               pop af
104+  A62B C1               pop bc
105+  A62C D1               pop de
106+  A62D DD E1            pop ix
107+  A62F                  ;pop ix
108+  A62F D9               exx                         ; hl is now screen
109+  A630 08               ex af,af'
110+  A631 1E 0E            ld e,14
111+  A633 16 00            ld d,0
112+  A635 19               add hl,de
113+  A636 F1               pop af
114+  A637 C1               pop bc
115+  A638 D1               pop de
116+  A639                  ;pop iy
117+  A639 F9               ld sp,hl                    ; sp pointing at screen
118+  A63A                  ;push iy
119+  A63A D5               push de
120+  A63B C5               push bc
121+  A63C F5               push af
122+  A63D 08               ex af,af'
123+  A63E D9               exx                         ; hl is now buffer
124+  A63F DD E5            push ix
125+  A641 D5               push de
126+  A642 C5               push bc
127+  A643 F5               push af
128+  A644 1E 10            ld e,16
129+  A646 16 00            ld d,0
130+  A648 19               add hl,de
131+  A649 D9               exx                         ; hl is now screen
132+  A64A 1E 0E            ld e,14
133+  A64C 16 00            ld d,0
134+  A64E ED 52            sbc hl,de
135+  A650 24               inc h
136+  A651 7C               ld a,h
137+  A652 E6 07            and 0x07                    ; check if this is multiple of 8, if so, end of cell line
138+  A654 C2 0B A6         jp nz,buffer_bufferlinetoscreen0 ; next line in cell
139+  A657              buffer_bufferlinetoscreen1:
140+  A657 31 00 00         ld sp,0
141+  A65A D9               exx
142+  A65B C9               ret
143+  A65C
144+  A65C              ;
145+  A65C              ; Copies the buffer to the screen for updated lines. Use stack.
146+  A65C              ; Inputs: none
147+  A65C              ;
148+  A65C              buffer_buffertoscreen:
149+  A65C 3A C4 A5         ld a,(buffer_updateall)      ; get the all update flag
150+  A65F FE 00            cp 0
151+  A661 CA 6D A6         jp z,buffer_buffertoscreen2  ; if not set, draw only updated
152+  A664 CD 8E A6         call buffer_allbuffertoscreen ; otherwise, draw whole screen
153+  A667 21 C4 A5         ld hl,buffer_updateall
154+  A66A 36 00            ld (hl),0                    ; reset flag
155+  A66C C9               ret
156+  A66D              buffer_buffertoscreen2:
157+  A66D 06 15            ld b,21
158+  A66F FD 21 AF A5      ld iy,buffer_updatedlines    ; the location of the updated lines
159+  A673              buffer_buffertoscreen0:
160+  A673 FD 7E 00         ld a,(iy)
161+  A676 FE FF            cp 255
162+  A678 CA 8A A6         jp z,buffer_buffertoscreen1                       ; if this is 255, then we're at the end of the updated list
163+  A67B C5               push bc
164+  A67C FD E5            push iy
165+  A67E F3               di
166+  A67F CD E7 A5         call buffer_bufferlinetoscreen
167+  A682 FB               ei
168+  A683 FD E1            pop iy
169+  A685 C1               pop bc
170+  A686 FD 23            inc iy
171+  A688 10 E9            djnz buffer_buffertoscreen0
172+  A68A              buffer_buffertoscreen1:
173+  A68A CD A2 A6         call buffer_buffertoattrsfast
174+  A68D C9               ret
175+  A68E
176+  A68E              ;
177+  A68E              ; Copies the buffer to the screen. Use stack.
178+  A68E              ; Inputs: none
179+  A68E              ;
180+  A68E              buffer_allbuffertoscreen:
181+  A68E 06 15            ld b,21
182+  A690 3E 00            ld a,0
183+  A692              buffer_allbuffertoscreen0:
184+  A692 C5               push bc
185+  A693 F5               push af
186+  A694 F3               di
187+  A695 CD E7 A5         call buffer_bufferlinetoscreen
188+  A698 FB               ei
189+  A699 F1               pop af
190+  A69A C1               pop bc
191+  A69B 3C               inc a
192+  A69C 10 F4            djnz buffer_allbuffertoscreen0
193+  A69E
194+  A69E CD A2 A6         call buffer_buffertoattrsfast
195+  A6A1 C9               ret
196+  A6A2
197+  A6A2              ;
198+  A6A2              ; Copies the attrs buffer to screen with the stack
199+  A6A2              ;
200+  A6A2              buffer_buffertoattrsfast:
201+  A6A2 ED 73 11 A7      ld (buffer_buffertoattrsfast1+1),sp ; this is some self-modifying code; stores the stack pointer in an ld sp,nn instruction at the end
202+  A6A6 3A 15 A7         ld a,(screen_offset)            ; get the screen offset in rows, so want *32
203+  A6A9 11 20 00         ld de,32
204+  A6AC CD 3A 80         call utilities_multiply
205+  A6AF 54 5D            ld de,hl
206+  A6B1 21 0D A2         ld hl,buffer_attr_buffer
207+  A6B4 19               add hl,de                       ; add the offset, start of attr buffer now in hl
208+  A6B5 D9               exx
209+  A6B6 21 50 58         ld hl,22528+80                  ; start of attr memory + 2 lines for score + 16 to start at right side
210+  A6B9 FD 21 AD A5      ld iy,buffer_tmp
211+  A6BD FD 36 00 15      ld (iy),21              ; number of times to loop
212+  A6C1              buffer_buffertoattrsfast0:
213+  A6C1 D9               exx                         ; hl is now buffer
214+  A6C2 23               inc hl
215+  A6C3 23               inc hl                      ; move hl forward 2 to skip first two blocks
216+  A6C4 F9               ld sp,hl                    ; do first fourteen for left hand side, sp pointing at buffer
217+  A6C5 F1               pop af
218+  A6C6 C1               pop bc
219+  A6C7 D1               pop de
220+  A6C8 DD E1            pop ix
221+  A6CA D9               exx                         ; hl is now screen
222+  A6CB 08               ex af,af'
223+  A6CC F1               pop af
224+  A6CD C1               pop bc
225+  A6CE D1               pop de
226+  A6CF F9               ld sp,hl                    ; sp pointing at screen
227+  A6D0 D5               push de
228+  A6D1 C5               push bc
229+  A6D2 F5               push af
230+  A6D3 08               ex af,af'
231+  A6D4 D9               exx                         ; hl is now buffer
232+  A6D5 DD E5            push ix
233+  A6D7 D5               push de
234+  A6D8 C5               push bc
235+  A6D9 F5               push af
236+  A6DA 1E 0E            ld e,14                    ; do another fourteen for right hand side
237+  A6DC 16 00            ld d,0
238+  A6DE 19               add hl,de
239+  A6DF F9               ld sp,hl                    ; sp pointing at buffer
240+  A6E0 F1               pop af
241+  A6E1 C1               pop bc
242+  A6E2 D1               pop de
243+  A6E3 DD E1            pop ix
244+  A6E5 D9               exx                         ; hl is now screen
245+  A6E6 08               ex af,af'
246+  A6E7 1E 0E            ld e,14
247+  A6E9 16 00            ld d,0
248+  A6EB 19               add hl,de
249+  A6EC F1               pop af
250+  A6ED C1               pop bc
251+  A6EE D1               pop de
252+  A6EF F9               ld sp,hl                    ; sp pointing at screen
253+  A6F0 D5               push de
254+  A6F1 C5               push bc
255+  A6F2 F5               push af
256+  A6F3 08               ex af,af'
257+  A6F4 D9               exx                         ; hl is now buffer
258+  A6F5 DD E5            push ix
259+  A6F7 D5               push de
260+  A6F8 C5               push bc
261+  A6F9 F5               push af
262+  A6FA 1E 10            ld e,16
263+  A6FC 16 00            ld d,0
264+  A6FE 19               add hl,de
265+  A6FF D9               exx                         ; hl is now screen
266+  A700 11 12 00         ld de,18
267+  A703 19               add hl,de
268+  A704 FD 7E 00         ld a,(iy)
269+  A707 3D               dec a
270+  A708 FE 00            cp 0
271+  A70A FD 77 00         ld (iy),a
272+  A70D C2 C1 A6         jp nz,buffer_buffertoattrsfast0 ; do another row
273+  A710              buffer_buffertoattrsfast1:
274+  A710 31 00 00         ld sp,0
275+  A713 D9               exx
276+  A714 C9               ret
# file closed: screen/buffer.asm
 24   A715                  include "screen\screen.asm"
# file opened: screen/screen.asm
  1+  A715              screen_offset:
  2+  A715 00               defb 0                      ; offset from top of screen in lines
  3+  A716
  4+  A716              screen_tmp:
  5+  A716 00 00            defb 0,0                      ; temporary memory
  6+  A718
  7+  A718              screen_setscorecolours:
  8+  A718 21 8B B2         ld hl,score_colours
  9+  A71B 11 00 58         ld de,22528                     ; attrs here
 10+  A71E 01 40 00         ld bc,64
 11+  A721 ED B0            ldir
 12+  A723 C9               ret
 13+  A724
 14+  A724              screen_sethighscorecolours:
 15+  A724 21 CB B2         ld hl,high_score_colours
 16+  A727 11 E0 5A         ld de,22528+736                 ; attrs here
 17+  A72A 01 20 00         ld bc,32
 18+  A72D ED B0            ldir
 19+  A72F C9               ret
 20+  A730
 21+  A730              ; Draw the screen
 22+  A730              ; Inputs:
 23+  A730              ; none
 24+  A730              ; Notes:
 25+  A730              ; The value held at screen_offset tells the screen how many rows to scroll down. Set to five to bottom out.
 26+  A730              screen_draw:
 27+  A730                  ;call clear_screen
 28+  A730 0E 00            ld c,0                      ; horiz
 29+  A732 06 00            ld b,0                      ; vert, 0 at top
 30+  A734 DD 21 4D AD      ld ix,level01               ; point ix at level data
 31+  A738 FD 21 0D A2      ld iy,buffer_attr_buffer    ; point iy at attr data
 32+  A73C              screen_draw0:
 33+  A73C DD 7E 00         ld a,(ix)                   ; load the block number
 34+  A73F C5               push bc                     ; store bc, contains loop count
 35+  A740 CD A2 A8         call screen_getattr         ; get the memory location for this cell's attr into hl
 36+  A743 7E               ld a,(hl)                   ; get the attr value at the address
 37+  A744 FD 77 00         ld (iy),a                   ; load the attr into memory
 38+  A747 DD 7E 00         ld a,(ix)                   ; load the block number
 39+  A74A CD 97 A8         call screen_getblock        ; get the block data into hl
 40+  A74D CD 7D A8         call screen_showchar        ; show this character here
 41+  A750 C1               pop bc                      ; get the loop counter back
 42+  A751 DD 23            inc ix                      ; increment level location
 43+  A753 FD 23            inc iy                      ; increment attr location
 44+  A755 0C               inc c                       ; increment horiz
 45+  A756 79               ld a,c
 46+  A757 FE 20            cp 32                       ; check if horiz has reach edge of screen
 47+  A759 C2 3C A7         jp nz,screen_draw0          ; if not, loop
 48+  A75C 0E 00            ld c,0                      ; if so, reset horiz
 49+  A75E 04               inc b                       ; increment vertical
 50+  A75F 78               ld a,b
 51+  A760 FE 1D            cp 29                       ; check if at bottom
 52+  A762 C2 3C A7         jp nz,screen_draw0          ; if not, loop
 53+  A765 21 16 A7         ld hl, screen_tmp
 54+  A768 36 09            ld (hl),9                   ; load the block number into memory
 55+  A76A DD 21 ED B0      ld ix,level01rocks          ; rock memory
 56+  A76E CD CF A7         call screen_initobjects     ; draw rocks
 57+  A771 21 16 A7         ld hl, screen_tmp
 58+  A774 36 0C            ld (hl),12                  ; load the block number into memory
 59+  A776 DD 21 ED B1      ld ix,level01missiles       ; missile memory
 60+  A77A CD CF A7         call screen_initobjects     ; draw missiles
 61+  A77D 21 16 A7         ld hl, screen_tmp
 62+  A780 36 08            ld (hl),08                  ; load the block number into memory
 63+  A782 DD 21 66 B2      ld ix,level01diamonds       ; diamond memory
 64+  A786 CD CF A7         call screen_initobjects     ; draw diamonds
 65+  A789 21 16 A7         ld hl, screen_tmp
 66+  A78C 36 0E            ld (hl),14                  ; load the block number into memory
 67+  A78E DD 21 76 B2      ld ix,level01gems           ; gems memory
 68+  A792 CD CF A7         call screen_initobjects     ; draw gems
 69+  A795 CD 9C A7         call screen_setuptext       ; draws text on the screen
 70+  A798 CD 17 C0         call scores_printscores     ; print the current scores
 71+  A79B C9               ret
 72+  A79C
 73+  A79C              ;
 74+  A79C              ; Sets up text on the screen
 75+  A79C              ;
 76+  A79C              screen_setuptext:
 77+  A79C CD 39 C0         call scores_showtable
 78+  A79F CD 24 A7         call screen_sethighscorecolours
 79+  A7A2 21 ED 80         ld hl, string_score1
 80+  A7A5 CD C5 84         call string_print
 81+  A7A8 21 F6 80         ld hl, string_scorenumbers1
 82+  A7AB CD C5 84         call string_print
 83+  A7AE 21 FF 80         ld hl, string_company
 84+  A7B1 CD C5 84         call string_print
 85+  A7B4 21 10 81         ld hl, string_score2
 86+  A7B7 CD C5 84         call string_print
 87+  A7BA 21 19 81         ld hl, string_scorenumbers2
 88+  A7BD CD C5 84         call string_print
 89+  A7C0 21 05 81         ld hl, string_credits
 90+  A7C3 CD C5 84         call string_print
 91+  A7C6 CD 18 A7         call screen_setscorecolours
 92+  A7C9 C9               ret
 93+  A7CA
 94+  A7CA              ;
 95+  A7CA              ; Sets a line of colours
 96+  A7CA              ; Inputs:
 97+  A7CA              ; a - colour to set
 98+  A7CA              ; b - number to set
 99+  A7CA              ; de - start memory location
100+  A7CA              ;
101+  A7CA              screen_setcolours:
102+  A7CA 12               ld (de),a
103+  A7CB 13               inc de
104+  A7CC 10 FC            djnz screen_setcolours
105+  A7CE C9               ret
106+  A7CF
107+  A7CF              ;
108+  A7CF              ; Draw initial object positions
109+  A7CF              ; Inputs:
110+  A7CF              ; ix - memory location of objects
111+  A7CF              ; a - graphic
112+  A7CF              screen_initobjects:
113+  A7CF DD 4E 00         ld c,(ix)                   ; get the horiz coord
114+  A7D2 79               ld a,c
115+  A7D3 FE FF            cp 255
116+  A7D5 CA FE A7         jp z,screen_initobjects2
117+  A7D8 DD 23            inc ix                      ; move to next
118+  A7DA DD 46 00         ld b,(ix)                   ; get the vert coord
119+  A7DD DD 23            inc ix
120+  A7DF CD 10 A8         call screen_getcellattradress ; get the memory address of b,c attr into de
121+  A7E2 D5               push de
122+  A7E3 3A 16 A7         ld a,(screen_tmp)                  ; get the block number back
123+  A7E6 CD A2 A8         call screen_getattr         ; get the memory location for this cell's attr into hl
124+  A7E9 D1               pop de
125+  A7EA 7E               ld a,(hl)                   ; get the attr value at the address
126+  A7EB 12               ld (de),a                   ; load the attr into memory
127+  A7EC 3A 16 A7         ld a,(screen_tmp)                  ; get the block number back
128+  A7EF CD 97 A8         call screen_getblock        ; get the block data into hl
129+  A7F2 CD 7D A8         call screen_showchar        ; show this character here
130+  A7F5
131+  A7F5              screen_initobjects1:
132+  A7F5 DD 23            inc ix                      ; move past state
133+  A7F7 DD 23            inc ix
134+  A7F9 DD 23            inc ix                      ; move past mem
135+  A7FB C3 CF A7         jp screen_initobjects
136+  A7FE              screen_initobjects2:
137+  A7FE C9               ret
138+  A7FF
139+  A7FF
140+  A7FF              ;
141+  A7FF              ; Return character cell address offset of block at (b, c) ready for addition to screen  memory.
142+  A7FF              ; Inputs:
143+  A7FF              ; bc: coords
144+  A7FF              ; Outputs:
145+  A7FF              ; de: memory location
146+  A7FF              ;
147+  A7FF              screen_getcelladdress:
148+  A7FF 78               ld a,b      ; vertical position.
149+  A800 E6 18            and 24      ; which segment, 0, 1 or 2?
150+  A802 C6 40            add a,64    ; 64*256 = 16384, Spectrum's screen memory.
151+  A804 57               ld d,a      ; this is our high byte.
152+  A805 78               ld a,b      ; what was that vertical position again?
153+  A806 E6 07            and 7       ; which row within segment?
154+  A808 0F               rrca        ; multiply row by 32.
155+  A809 0F               rrca
156+  A80A 0F               rrca
157+  A80B 5F               ld e,a      ; low byte.
158+  A80C 79               ld a,c      ; add on y coordinate.
159+  A80D 83               add a,e     ; mix with low byte.
160+  A80E 5F               ld e,a      ; address of screen position in de.
161+  A80F C9               ret
162+  A810
163+  A810              ;
164+  A810              ; Calculate buffer address of attribute for character at (b, c).
165+  A810              ; Inputs:
166+  A810              ; bc: coords
167+  A810              ; Outputs:
168+  A810              ; de: memory location
169+  A810              ;
170+  A810              screen_getcellattradress:
171+  A810 11 0D A2         ld de,buffer_attr_buffer ; memory is at base + horiz (c) + vert*32 (b)
172+  A813 69               ld l,c      ; x position.
173+  A814 26 00            ld h,0      ; 0 h
174+  A816 19               add hl,de
175+  A817 54 5D            ld de,hl    ; horiz done
176+  A819 78               ld a,b      ; do vert
177+  A81A D5               push de
178+  A81B C5               push bc
179+  A81C 11 20 00         ld de,32
180+  A81F CD 3A 80         call utilities_multiply
181+  A822 C1               pop bc
182+  A823 D1               pop de
183+  A824 19               add hl,de
184+  A825 54 5D            ld de,hl    ; vert done
185+  A827 C9               ret
186+  A828
187+  A828              ;
188+  A828              ; Calculate buffer address of attribute for character at (b, c).
189+  A828              ; Inputs:
190+  A828              ; bc: coords
191+  A828              ; Outputs:
192+  A828              ; de: memory location
193+  A828              ;
194+  A828              screen_getscreenattradress:
195+  A828 11 00 58         ld de,22528 ; memory is at base + horiz (c) + vert*32 (b)
196+  A82B 69               ld l,c      ; x position.
197+  A82C 26 00            ld h,0      ; 0 h
198+  A82E 19               add hl,de
199+  A82F 54 5D            ld de,hl    ; horiz done
200+  A831 78               ld a,b      ; do vert
201+  A832 D5               push de
202+  A833 C5               push bc
203+  A834 11 20 00         ld de,32
204+  A837 CD 3A 80         call utilities_multiply
205+  A83A C1               pop bc
206+  A83B D1               pop de
207+  A83C 19               add hl,de
208+  A83D 54 5D            ld de,hl    ; vert done
209+  A83F C9               ret
210+  A840
211+  A840              ;
212+  A840              ; Gets the attr memory location for a screen coord
213+  A840              ; Will overwrite bc
214+  A840              ; Inputs:
215+  A840              ; bc - screen coords
216+  A840              ; Outputs:
217+  A840              ; de - memory location
218+  A840              ; bc - character coords
219+  A840              ;
220+  A840              screen_getattraddressfromscreencoords:
221+  A840 78               ld a,b                          ; get the player block coords of current block
222+  A841 E6 F8            and 248                         ; find closest multiple of eight
223+  A843 0F               rrca
224+  A844 0F               rrca
225+  A845 0F               rrca                ; divide by 8
226+  A846 47               ld b,a
227+  A847 79               ld a,c
228+  A848 48               ld c,b                         ; swap b and c
229+  A849 E6 F8            and 248
230+  A84B 0F               rrca
231+  A84C 0F               rrca
232+  A84D 0F               rrca                ; divide by 8
233+  A84E 47               ld b,a
234+  A84F CD 10 A8         call screen_getcellattradress   ; work out memory location of current block attributes, memory in de
235+  A852 C9               ret
236+  A853
237+  A853
238+  A853              ; Gets the nearest cell coords for a screen coord
239+  A853              ; Will overwrite bc
240+  A853              ; Inputs:
241+  A853              ; bc - screen coords
242+  A853              ; Outputs:
243+  A853              ; bc - character coords
244+  A853              ;
245+  A853              screen_getcharcoordsfromscreencoords:
246+  A853 78               ld a,b                          ; get the player block coords of current block
247+  A854 E6 F8            and 248                         ; find closest multiple of eight
248+  A856 0F               rrca
249+  A857 0F               rrca
250+  A858 0F               rrca                ; divide by 8
251+  A859 47               ld b,a
252+  A85A 79               ld a,c
253+  A85B 48               ld c,b                         ; swap b and c
254+  A85C E6 F8            and 248
255+  A85E 0F               rrca
256+  A85F 0F               rrca
257+  A860 0F               rrca                ; divide by 8
258+  A861 47               ld b,a
259+  A862 C9               ret
260+  A863
261+  A863              ; Gets the screen coords for a cell coord
262+  A863              ; Will overwrite bc
263+  A863              ; Inputs:
264+  A863              ; bc - char coords
265+  A863              ; Outputs:
266+  A863              ; bc - screen coords
267+  A863              ;
268+  A863              screen_getscreencoordsfromcharcoords:
269+  A863 78               ld a,b                          ; get the player block coords of current block
270+  A864 07               rlca
271+  A865 07               rlca
272+  A866 07               rlca                ; multiply by 8
273+  A867 47               ld b,a
274+  A868 79               ld a,c
275+  A869 48               ld c,b                         ; swap b and c
276+  A86A 07               rlca
277+  A86B 07               rlca
278+  A86C 07               rlca                ; divide by 8
279+  A86D 47               ld b,a
280+  A86E C9               ret
281+  A86F
282+  A86F              ;
283+  A86F              ; Get buffer address for a character at b,c - b vert
284+  A86F              ; Buffer memory is stored as sequential block
285+  A86F              ; Char at 0,0 is stored 0,32,64...; 0,1 is stored at 1,33,65
286+  A86F              ; Inputs:
287+  A86F              ; bc - coords
288+  A86F              ; Outputs:
289+  A86F              ; de - memory location of first byte
290+  A86F              screen_getbufferaddress:
291+  A86F 21 0D 85         ld hl, buffer_buffer    ; first get screen buffer start
292+  A872 50               ld d,b                  ; then work out vertical offset
293+  A873 1E 00            ld e,0                  ; mult by 256, low byte becomes high byte, de now holds result
294+  A875 19               add hl,de               ; add to base
295+  A876 59               ld e,c                  ; then add horizontal offset (c)
296+  A877 16 00            ld d,0
297+  A879 19               add hl,de               ; add to base
298+  A87A 54 5D            ld de,hl
299+  A87C C9               ret
300+  A87D
301+  A87D              ;
302+  A87D              ; Display character hl at (b, c) to buffer.
303+  A87D              ; Stored sequentially
304+  A87D              ; Inputs:
305+  A87D              ; hl: block address
306+  A87D              ; bc: coords
307+  A87D              ;
308+  A87D              screen_showchar:
309+  A87D 3E 00            ld a,0
310+  A87F E5               push hl
311+  A880 CD 6F A8         call screen_getbufferaddress ; get the current screen buffer pointer
312+  A883 E1               pop hl
313+  A884 06 08            ld b,8              ; number of pixels high.
314+  A886              screen_showchar0:
315+  A886 7E               ld a,(hl)           ; source graphic.
316+  A887 12               ld (de),a           ; transfer to screen.
317+  A888 23               inc hl              ; next piece of data.
318+  A889 E5               push hl             ; store hl
319+  A88A 62 6B            ld hl,de            ; put de in hl
320+  A88C 1E 20            ld e,32            ; inc memory by 32, so load 32 into de
321+  A88E 16 00            ld d,0
322+  A890 19               add hl,de              ; add de to hl
323+  A891 54 5D            ld de,hl            ; load back to de
324+  A893 E1               pop hl              ; restore hl
325+  A894
326+  A894 10 F0            djnz screen_showchar0 ; repeat
327+  A896 C9               ret
328+  A897
329+  A897
330+  A897              ;
331+  A897              ; Get cell graphic.
332+  A897              ; Inputs:
333+  A897              ; a: block
334+  A897              ; Outputs:
335+  A897              ; hl: memory
336+  A897              ;
337+  A897              screen_getblock:
338+  A897 07               rlca                        ; multiply block number by eight.
339+  A898 07               rlca
340+  A899 07               rlca
341+  A89A 5F               ld e,a                      ; displacement to graphic address.
342+  A89B 16 00            ld d,0                      ; no high byte.
343+  A89D 21 EB B2         ld hl,sprites               ; address of character blocks.
344+  A8A0 19               add hl,de                   ; point to block.
345+  A8A1 C9               ret
346+  A8A2
347+  A8A2              ;
348+  A8A2              ; Get cell attribute.
349+  A8A2              ; Inputs:
350+  A8A2              ; a: block
351+  A8A2              ; Outputs:
352+  A8A2              ; hl: memory
353+  A8A2              ;
354+  A8A2              screen_getattr:
355+  A8A2 5F               ld e,a                      ; displacement to attribute address.
356+  A8A3 16 00            ld d,0                      ; no high byte.
357+  A8A5 21 93 B3         ld hl,sprite_attrs          ; address of block attributes.
358+  A8A8 19               add hl,de                   ; point to attribute.
359+  A8A9 C9               ret
360+  A8AA
361+  A8AA              ;
362+  A8AA              ; Checks whether a character block has anything in it
363+  A8AA              ; Inputs:
364+  A8AA              ; bc - char coords
365+  A8AA              ; Outputs:
366+  A8AA              ; a - 1, empty
367+  A8AA              screen_ischarempty:
368+  A8AA CD 6F A8         call screen_getbufferaddress ; get the current screen buffer pointer
369+  A8AD 06 08            ld b,8                      ; check 8 rows
370+  A8AF              screen_ischarempty2:
371+  A8AF 1A               ld a,(de)                   ; check line
372+  A8B0 FE 00            cp 0
373+  A8B2 C2 C0 A8         jp nz,screen_ischarempty1   ; if not zero, jump out with false
374+  A8B5 21 20 00         ld hl,32
375+  A8B8 19               add hl,de
376+  A8B9 54 5D            ld de,hl                    ; move to next row
377+  A8BB 10 F2            djnz screen_ischarempty2
378+  A8BD              screen_ischarempty0:
379+  A8BD 3E 01            ld a,1
380+  A8BF C9               ret
381+  A8C0              screen_ischarempty1:
382+  A8C0 3E 00            ld a,0
383+  A8C2 C9               ret
384+  A8C3
385+  A8C3              ;
386+  A8C3              ; Copies a block from one place to another directly underneath, leaves the original empty
387+  A8C3              ; Inputs:
388+  A8C3              ; bc - coords of block to copy from
389+  A8C3              screen_copyblockdown
390+  A8C3 CD 6F A8         call screen_getbufferaddress ; get the current screen buffer pointer for source
391+  A8C6 06 08            ld b,8                      ; copy 8 rows
392+  A8C8              screen_copyblock0:
393+  A8C8 1A               ld a,(de)                    ; get what we're copying
394+  A8C9 08               ex af,af'
395+  A8CA 3E 00            ld a,0
396+  A8CC 12               ld (de),a                    ; replace with empty
397+  A8CD 08               ex af,af'
398+  A8CE 14               inc d                        ; add 256 to get to the next row
399+  A8CF 12               ld (de),a                    ; copy to the next row
400+  A8D0 15               dec d
401+  A8D1 21 20 00         ld hl,32
402+  A8D4 19               add hl,de                       ; return back to source, next row down
403+  A8D5 54 5D            ld de,hl
404+  A8D7 10 EF            djnz screen_copyblock0
405+  A8D9 C9               ret
406+  A8DA
407+  A8DA              ;
408+  A8DA              ; Returns the first byte of a character. Useful for figuring out what's there
409+  A8DA              ; Inputs:
410+  A8DA              ; bc - coords
411+  A8DA              ; Outputs:
412+  A8DA              ; a - first byte
413+  A8DA              ;
414+  A8DA              screen_getcharfirstbyte:
415+  A8DA CD 6F A8         call screen_getbufferaddress ; get the current screen buffer pointer for source
416+  A8DD 1A               ld a,(de)
417+  A8DE C9               ret
418+  A8DF
# file closed: screen/screen.asm
 25   A8DF                  include "screen\sprites.asm"
# file opened: screen/sprites.asm
  1+  A8DF              ;
  2+  A8DF              ; This is the sprite routine and expects coordinates in (c ,b) form,
  3+  A8DF              ; where c is the vertical coord from the top of the screen (0-176), and
  4+  A8DF              ; b is the horizontal coord from the left of the screen (0 to 240).
  5+  A8DF              ; Sprite data is stored as you'd expect in its unshifted form as this
  6+  A8DF              ; routine takes care of all the shifting itself. This means that sprite
  7+  A8DF              ; handling isn't particularly fast but the graphics only take 1/8th of the
  8+  A8DF              ; space they would require in pre-shifted form.
  9+  A8DF              ; Inputs:
 10+  A8DF              ; hl - sprite data
 11+  A8DF              ; bc - screen coords
 12+  A8DF              ;
 13+  A8DF              sprites_drawsprite7:
 14+  A8DF EE 07            xor 7               ; complement last 3 bits.
 15+  A8E1 3C               inc a               ; add one for luck!
 16+  A8E2              sprites_drawsprite3:
 17+  A8E2 CB 11            rl c                ; ...into middle byte...
 18+  A8E4 CB 12            rl d                ; ...and finally into left character cell.
 19+  A8E6 3D               dec a               ; count shifts we've done.
 20+  A8E7 20 F9            jr nz,sprites_drawsprite3 ; return until all shifts complete.
 21+  A8E9                                      ; Line of sprite image is now in e + c + d, we need it in form c + d + e.
 22+  A8E9 79               ld a,c              ; left edge of image is currently in e.
 23+  A8EA 4A               ld c,d              ; put right edge there instead.
 24+  A8EB 57               ld d,a              ; and the left edge back into c.
 25+  A8EC 18 25            jr sprites_drawsprite0   ; we've done the switch so transfer to screen.
 26+  A8EE              sprites_drawsprite:
 27+  A8EE ED 43 53 A9      ld (dispx),bc       ; store coords in dispx for now.
 28+  A8F2 E5               push hl
 29+  A8F3 CD 31 A9         call sprites_scadd  ; calculate screen address.
 30+  A8F6 E1               pop hl
 31+  A8F7 3E 08            ld a,8              ; height of sprite in pixels.
 32+  A8F9              sprites_drawsprite1:
 33+  A8F9 08               ex af,af'           ; store loop counter.
 34+  A8FA D5               push de             ; store screen address.
 35+  A8FB 4E               ld c,(hl)           ; first sprite graphic.
 36+  A8FC 23               inc hl              ; increment poiinter to sprite data.
 37+  A8FD 22 55 A9         ld (sprtmp),hl      ; store it for later.
 38+  A900 16 00            ld d,0              ; blank right byte for now.
 39+  A902 78               ld a,b              ; b holds y position.
 40+  A903 E6 07            and 7               ; how are we straddling character cells?
 41+  A905 28 0C            jr z,sprites_drawsprite0 ; we're not straddling them, don't bother shifting.
 42+  A907 FE 05            cp 5                ; 5 or more right shifts needed?
 43+  A909 30 D4            jr nc,sprites_drawsprite7 ; yes, shift from left as it's quicker.
 44+  A90B A7               and a               ; oops, carry flag is set so clear it.
 45+  A90C              sprites_drawsprite2:
 46+  A90C CB 19            rr c                ; rotate left byte right...
 47+  A90E CB 1A            rr d                ; ...into right byte.
 48+  A910 3D               dec a               ; one less shift to do.
 49+  A911 20 F9            jr nz,sprites_drawsprite2 ; return until all shifts complete.
 50+  A913              sprites_drawsprite0:
 51+  A913 E1               pop hl              ; pop screen address from stack.
 52+  A914 7E               ld a,(hl)           ; what's there already.
 53+  A915 A9               xor c               ; merge in image data.
 54+  A916 77               ld (hl),a           ; place onto screen.
 55+  A917 23               inc hl
 56+  A918 7E               ld a,(hl)           ; what's already there.
 57+  A919 AA               xor d               ; right edge of sprite image data.
 58+  A91A 77               ld (hl),a           ; plonk it on screen.
 59+  A91B 3A 53 A9         ld a,(dispx)        ; vertical coordinate.
 60+  A91E 3C               inc a               ; next line down.
 61+  A91F 32 53 A9         ld (dispx),a        ; store new position.
 62+  A922 2B               dec hl
 63+  A923 11 20 00         ld de,32            ; add 32 to get to the next row
 64+  A926 19               add hl,de           ; add 32
 65+  A927              sprites_drawsprite6:
 66+  A927 EB               ex de,hl            ; screen address in de.
 67+  A928 2A 55 A9         ld hl,(sprtmp)      ; restore graphic address.
 68+  A92B 08               ex af,af'           ; restore loop counter.
 69+  A92C 3D               dec a               ; decrement it.
 70+  A92D C2 F9 A8         jp nz,sprites_drawsprite1 ; not reached bottom of sprite yet to repeat.
 71+  A930 C9               ret                 ; job done.
 72+  A931
 73+  A931              ;
 74+  A931              ; This routine returns a buffer address for (c, b) in de (c vert).
 75+  A931              ; For example: 0,0 will be at memory offset 0
 76+  A931              ; 1,0 (1 down) will be at memory offset 1
 77+  A931              ; 0,7 will be at memory offset 0
 78+  A931              ; 9,1 will be at memory offset 8+1
 79+  A931              ; 8,0 will be at memory offset 256
 80+  A931              ; 9,0 will be at memory offset 257
 81+  A931              ; Outputs:
 82+  A931              ; de - coords
 83+  A931              ;
 84+  A931              sprites_scadd:
 85+  A931 79               ld a,c               ; calculate vertical offset
 86+  A932 E6 F8            and 248             ;  to get nearest multiple of 8
 87+  A934 0F               rrca
 88+  A935 0F               rrca
 89+  A936 0F               rrca                ; divide by 8
 90+  A937 67               ld h,a
 91+  A938 78               ld a,b               ; calculate horizontal offset
 92+  A939 E6 F8            and 248             ;  to get nearest multiple of 8
 93+  A93B 0F               rrca
 94+  A93C 0F               rrca
 95+  A93D 0F               rrca                ; divide by 8
 96+  A93E 6F               ld l,a
 97+  A93F C5               push bc             ; store the screen coords
 98+  A940 44 4D            ld bc,hl            ; load bc with the character coords
 99+  A942 CD 6F A8         call screen_getbufferaddress
100+  A945 C1               pop bc              ; get back screen coords, de is now memory of character
101+  A946 79               ld a,c              ; now add the vertical within the cell
102+  A947 E6 07            and 7
103+  A949 0F               rrca                ; multiply by 32.
104+  A94A 0F               rrca
105+  A94B 0F               rrca
106+  A94C 6F               ld l,a
107+  A94D 26 00            ld h,0
108+  A94F 19               add hl,de
109+  A950 54 5D            ld de,hl
110+  A952 C9               ret
111+  A953
112+  A953 00           dispx   defb 0           ; general-use coordinates.
113+  A954 00           dispy   defb 0
114+  A955 00 00        sprtmp  defb 0,0           ; sprite temporary address.
115+  A957
# file closed: screen/sprites.asm
 26   A957                  include "screen\titlescreen.asm"
# file opened: screen/titlescreen.asm
  1+  A957              ;
  2+  A957              ; Draws the title screen
  3+  A957              ;
  4+  A957              titlescreen_show:
  5+  A957 CD CF A9         call titlescreen_init
  6+  A95A CD 78 A9         call titlescreen_drawtitle
  7+  A95D 3E FA            ld a,250                              ; wait for 200 frames
  8+  A95F CD 52 80         call utilities_waitforkey_forframes   ; wait for keypress
  9+  A962 7B               ld a,e
 10+  A963 FE 01            cp 1                                  ; was anything pressed?
 11+  A965 C8               ret z                                 ; end titlescreen if so
 12+  A966
 13+  A966 CD E2 A9         call titlescreen_alt_init             ; otherwise, draw alt screen
 14+  A969 CD 94 A9         call titlescreen_alt_drawtitle
 15+  A96C 3E FA            ld a,250                              ; wait for 200 frames
 16+  A96E CD 52 80         call utilities_waitforkey_forframes   ; wait for keypress
 17+  A971 7B               ld a,e
 18+  A972 FE 01            cp 1                                  ; was anything pressed?
 19+  A974 C2 57 A9         jp nz,titlescreen_show                ; start again if not
 20+  A977 C9               ret
 21+  A978
 22+  A978              ;
 23+  A978              ; Draws the iconic logo
 24+  A978              ;
 25+  A978              titlescreen_drawtitle:
 26+  A978 06 66            ld b,102              ; number of points
 27+  A97A DD 21 EF A9      ld ix,titlescreen_logo_data
 28+  A97E              titlescreen_drawtitle0:
 29+  A97E C5               push bc
 30+  A97F DD 4E 00         ld c,(ix)                   ; got horiz
 31+  A982 DD 23            inc ix
 32+  A984 DD 46 00         ld b,(ix)                   ; got vert
 33+  A987 DD 23            inc ix
 34+  A989 CD 28 A8         call screen_getscreenattradress ; memory in de
 35+  A98C 13               inc de                      ; slide one to the right, since I'm too lazy to change the data
 36+  A98D 3E 13            ld a,19
 37+  A98F 12               ld (de),a
 38+  A990 C1               pop bc
 39+  A991 10 EB            djnz titlescreen_drawtitle0 ; loop if we're not at the end
 40+  A993 C9               ret
 41+  A994
 42+  A994              ;
 43+  A994              ; Draws the alternate title screen
 44+  A994              ;
 45+  A994              titlescreen_alt_drawtitle:
 46+  A994 21 3C 81         ld hl,string_alttitlescreen_1
 47+  A997 CD C5 84         call string_print
 48+  A99A 21 48 81         ld hl,string_alttitlescreen_2
 49+  A99D CD C5 84         call string_print
 50+  A9A0 21 43 82         ld hl,string_alttitlescreen_3
 51+  A9A3 CD C5 84         call string_print
 52+  A9A6 06 20            ld b,32
 53+  A9A8 3E 43            ld a,67
 54+  A9AA 11 00 58         ld de,22528                         ; top row attrs here
 55+  A9AD CD CA A7         call screen_setcolours
 56+  A9B0 06 20            ld b,32
 57+  A9B2 3E 46            ld a,70
 58+  A9B4 11 A0 59         ld de,22528+416                     ; 13th row attrs here
 59+  A9B7 CD CA A7         call screen_setcolours
 60+  A9BA 06 20            ld b,32
 61+  A9BC 3E 43            ld a,67
 62+  A9BE 11 20 5A         ld de,22528+544                         ; 17th row attrs here
 63+  A9C1 CD CA A7         call screen_setcolours
 64+  A9C4 06 20            ld b,32
 65+  A9C6 3E 42            ld a,66
 66+  A9C8 11 A0 5A         ld de,22528+672                         ; 21st row attrs here
 67+  A9CB CD CA A7         call screen_setcolours
 68+  A9CE C9               ret
 69+  A9CF
 70+  A9CF              ;
 71+  A9CF              ; Initialises the screen
 72+  A9CF              ;
 73+  A9CF              titlescreen_init:
 74+  A9CF              ; We want a black screen.
 75+  A9CF 3E 0B            ld a,11             ; magenta ink (7) on blue paper (0),
 76+  A9D1                                      ; bright (64).
 77+  A9D1 CD 67 80         call utilities_clearscreen
 78+  A9D4 32 8D 5C         ld (23693),a        ; set our screen colours.
 79+  A9D7 3E 01            ld a,1              ; 2 is the code for red.
 80+  A9D9 D3 FE            out (254),a         ; write to port 254.
 81+  A9DB
 82+  A9DB 21 22 81         ld hl,string_titlescreen_copyright
 83+  A9DE CD C5 84         call string_print
 84+  A9E1
 85+  A9E1 C9               ret
 86+  A9E2
 87+  A9E2              ;
 88+  A9E2              ; Initialises the screen
 89+  A9E2              ;
 90+  A9E2              titlescreen_alt_init:
 91+  A9E2              ; We want a black screen.
 92+  A9E2 3E 47            ld a,71             ; white ink (7) on black paper (0),
 93+  A9E4                                      ; bright (64).
 94+  A9E4 CD 67 80         call utilities_clearscreen
 95+  A9E7 32 8D 5C         ld (23693),a        ; set our screen colours.
 96+  A9EA 3E 00            ld a,0              ; 2 is the code for red.
 97+  A9EC D3 FE            out (254),a         ; write to port 254.
 98+  A9EE
 99+  A9EE C9               ret
100+  A9EF
101+  A9EF              ;
102+  A9EF              ; Horiz, vert
103+  A9EF              ;
104+  A9EF              titlescreen_logo_data:
105+  A9EF 08 00 09 00      defb 8,0,9,0,10,0,12,0,15,0,17,0,18,0,19,0
105+  A9F3 0A 00 0C 00
105+  A9F7 0F 00 11 00
105+  A9FB 12 00 13 00
106+  A9FF 09 01 0C 01      defb 9,1,12,1,15,1,17,1
106+  AA03 0F 01 11 01
107+  AA07 09 02 0C 02      defb 9,2,12,2,13,2,14,2,15,2,17,2,18,2,19,2
107+  AA0B 0D 02 0E 02
107+  AA0F 0F 02 11 02
107+  AA13 12 02 13 02
108+  AA17 09 03 0C 03      defb 9,3,12,3,15,3,17,3
108+  AA1B 0F 03 11 03
109+  AA1F 09 04 0C 04      defb 9,4,12,4,15,4,17,4,18,4,19,4
109+  AA23 0F 04 11 04
109+  AA27 12 04 13 04
110+  AA2B 00 06 01 06      defb 0,6,1,6,2,6,3,6,4,6,5,6,6,6,7,6,8,6,9,6,10,6,11,6
110+  AA2F 02 06 03 06
110+  AA33 04 06 05 06
110+  AA37 06 06 07 06
110+  AA3B 08 06 09 06
110+  AA3F 0A 06 0B 06
111+  AA43 10 06 11 06      defb 16,6,17,6,18,6,19,6,20,6,21,6,22,6,23,6,24,6,25,6,26,6,27,6
111+  AA47 12 06 13 06
111+  AA4B 14 06 15 06
111+  AA4F 16 06 17 06
111+  AA53 18 06 19 06
111+  AA57 1A 06 1B 06
112+  AA5B 02 07 02 08      defb 2,7,2,8,2,9,2,10,2,11,2,12,2,13,2,14,2,15,2,16,2,17,2,18,2,19,2,20
112+  AA5F 02 09 02 0A
112+  AA63 02 0B 02 0C
112+  AA67 02 0D 02 0E
112+  AA6B 02 0F 02 10
112+  AA6F 02 11 02 12
112+  AA73 02 13 02 14
113+  AA77 19 07 19 08      defb 25,7,25,8,25,9,25,10,25,11,25,12,25,13,25,14,25,15,25,16,25,17,25,18,25,19,25,20
113+  AA7B 19 09 19 0A
113+  AA7F 19 0B 19 0C
113+  AA83 19 0D 19 0E
113+  AA87 19 0F 19 10
113+  AA8B 19 11 19 12
113+  AA8F 19 13 19 14
114+  AA93 03 0B 04 0B      defb 3,11,4,11,5,11,6,11,7,11,8,11,9,11,10,11,11,11
114+  AA97 05 0B 06 0B
114+  AA9B 07 0B 08 0B
114+  AA9F 09 0B 0A 0B
114+  AAA3 0B 0B
115+  AAA5 0B 07 0B 08      defb 11,7,11,8,11,9,11,10
115+  AAA9 0B 09 0B 0A
116+  AAAD 10 0D 10 0F      defb 16,13,16,15,16,16,16,17,16,18,16,19,16,20
116+  AAB1 10 10 10 11
116+  AAB5 10 12 10 13
116+  AAB9 10 14
117+  AABB
# file closed: screen/titlescreen.asm
 27   AABB                  include "screen\lifescreen.asm"
# file opened: screen/lifescreen.asm
  1+  AABB              ;
  2+  AABB              ; Draws the life remaining screen
  3+  AABB              ;
  4+  AABB              lifescreen_draw:
  5+  AABB CD 01 AB         call lifescreen_init
  6+  AABE
  7+  AABE 3A 05 B9         ld a,(game_currentplayer)             ; get the current player
  8+  AAC1 C6 30            add 48                                ; add 48 to get char
  9+  AAC3 21 49 83         ld hl,string_lifescreen_player+10
 10+  AAC6 77               ld (hl),a                             ; load this to the string we're about to show
 11+  AAC7
 12+  AAC7 21 3F 83         ld hl,string_lifescreen_player
 13+  AACA CD C5 84         call string_print
 14+  AACD
 15+  AACD 3A 3C B9         ld a,(player+9)                       ; get the current player lives
 16+  AAD0 C6 30            add 48                                ; add 48 to get the character
 17+  AAD2 FE 31            cp 49
 18+  AAD4 C2 E7 AA         jp nz,lifescreen_draw0
 19+  AAD7 21 59 83         ld hl,string_lifescreen_lastman
 20+  AADA
 21+  AADA 06 08            ld b,8
 22+  AADC 3E 0A            ld a,10                                ; set red
 23+  AADE 11 6C 58         ld de,22528+108                        ; attrs here
 24+  AAE1 CD CA A7         call screen_setcolours
 25+  AAE4
 26+  AAE4 C3 EE AA         jp lifescreen_draw1
 27+  AAE7              lifescreen_draw0:
 28+  AAE7 21 4E 83         ld hl,string_lifescreen_lives+2       ; not last man, so use the normal view
 29+  AAEA 77               ld (hl),a                             ; load this to the string we're about to show
 30+  AAEB 21 4C 83         ld hl,string_lifescreen_lives
 31+  AAEE              lifescreen_draw1:
 32+  AAEE CD C5 84         call string_print
 33+  AAF1
 34+  AAF1 3E 86            ld a,134
 35+  AAF3 11 0B 58         ld de, 22528+11     ; get the colour for the top text
 36+  AAF6 06 0A            ld b,10
 37+  AAF8 CD CA A7         call screen_setcolours
 38+  AAFB
 39+  AAFB 3E 64            ld a,100                              ; wait for 200 frames
 40+  AAFD CD 52 80         call utilities_waitforkey_forframes   ; wait for keypress
 41+  AB00
 42+  AB00 C9               ret
 43+  AB01
 44+  AB01              ;
 45+  AB01              ; Initialises the screen
 46+  AB01              ;
 47+  AB01              lifescreen_init:
 48+  AB01              ; We want a blue screen.
 49+  AB01                  ;call $0D6B
 50+  AB01 3E 0E            ld a,14             ; yellow ink (6) on blue paper (1),
 51+  AB03                                      ; bright (64).
 52+  AB03 CD 67 80         call utilities_clearscreen
 53+  AB06 32 8D 5C         ld (23693),a        ; set our screen colours.
 54+  AB09 3E 01            ld a,1              ; 1 is the code for blue.
 55+  AB0B D3 FE            out (254),a         ; write to port 254.
 56+  AB0D                  ;call 3503           ; ROM routine - clears screen, opens chan 2.
 57+  AB0D
 58+  AB0D C9               ret
# file closed: screen/lifescreen.asm
 28   AB0E                  include "screen\gameover.asm"
# file opened: screen/gameover.asm
  1+  AB0E              ;
  2+  AB0E              ; Draws the game over screen
  3+  AB0E              ;
  4+  AB0E              gameover_draw:
  5+  AB0E CD 4D C0         call scores_processhighscores
  6+  AB11
  7+  AB11              gameover_draw0:
  8+  AB11 CD 51 AB         call gameover_enterhighscores
  9+  AB14
 10+  AB14 CD EF AB         call gameover_init
 11+  AB17
 12+  AB17 21 64 83         ld hl,string_gameoverscreen_gameover
 13+  AB1A CD C5 84         call string_print
 14+  AB1D
 15+  AB1D 21 70 83         ld hl,string_gameoverscreen_copyright
 16+  AB20 CD C5 84         call string_print
 17+  AB23
 18+  AB23 CD 34 AB         call gameover_commontext
 19+  AB26
 20+  AB26 06 0B            ld b,11
 21+  AB28 3E 42            ld a,66
 22+  AB2A 11 2B 58         ld de,22528+43                         ; attrs here
 23+  AB2D CD CA A7         call screen_setcolours
 24+  AB30 CD 47 80         call utilities_waitforkey   ; wait for keypress
 25+  AB33
 26+  AB33 C9               ret
 27+  AB34
 28+  AB34              ;
 29+  AB34              ; Draws text shared by the game over and high score screens
 30+  AB34              ;
 31+  AB34              gameover_commontext:
 32+  AB34 CD 9C A7         call screen_setuptext       ; show scores
 33+  AB37 CD 17 C0         call scores_printscores     ; print the current scores
 34+  AB3A
 35+  AB3A 21 9E 83         ld hl,string_gameover_credits
 36+  AB3D CD C5 84         call string_print
 37+  AB40
 38+  AB40 21 8A 83         ld hl,string_gameoverscreen_bestscores
 39+  AB43 CD C5 84         call string_print
 40+  AB46
 41+  AB46 06 20            ld b,32
 42+  AB48 3E 45            ld a,69
 43+  AB4A 11 C0 5A         ld de,22528+704                         ; attrs here
 44+  AB4D CD CA A7         call screen_setcolours
 45+  AB50
 46+  AB50 C9               ret
 47+  AB51
 48+  AB51              ;
 49+  AB51              ; If required, enter highscore
 50+  AB51              ;
 51+  AB51              gameover_enterhighscores:
 52+  AB51                  ; check if we need to enter initial
 53+  AB51 3A 4C C0         ld a,(scores_highscoretmp)
 54+  AB54 FE 00            cp 0
 55+  AB56 C8               ret z
 56+  AB57 CD 85 AB         call gameover_enterhighscores_init
 57+  AB5A 3A 4C C0         ld a,(scores_highscoretmp)
 58+  AB5D 3D               dec a
 59+  AB5E 3D               dec a
 60+  AB5F 3D               dec a                                   ; get high score location back to position of name
 61+  AB60 16 00            ld d,0
 62+  AB62 5F               ld e,a
 63+  AB63 21 D3 BF         ld hl,scores_table
 64+  AB66 19               add hl,de                               ; load memory into hl
 65+  AB67 08               ex af,af'
 66+  AB68 06 0F            ld b,15
 67+  AB6A CD 82 80         call utilities_pauseforframes           ; pause for a little bit
 68+  AB6D 06 03            ld b,3                                  ; collect three chars
 69+  AB6F              gameover_draw2:
 70+  AB6F C5               push bc
 71+  AB70 E5               push hl
 72+  AB71 CD 86 80         call utilities_readkey               ; get key into a
 73+  AB74 E1               pop hl
 74+  AB75 77               ld (hl),a
 75+  AB76 23               inc hl
 76+  AB77 E5               push hl
 77+  AB78 CD 39 C0         call scores_showtable
 78+  AB7B E1               pop hl
 79+  AB7C 06 0F            ld b,15
 80+  AB7E CD 82 80         call utilities_pauseforframes
 81+  AB81 C1               pop bc
 82+  AB82 10 EB            djnz gameover_draw2
 83+  AB84 C9               ret
 84+  AB85
 85+  AB85              ;
 86+  AB85              ; Displays the screen text for high score entry
 87+  AB85              ;
 88+  AB85              gameover_enterhighscores_init:
 89+  AB85
 90+  AB85 CD EF AB         call gameover_init
 91+  AB88 CD 34 AB         call gameover_commontext
 92+  AB8B
 93+  AB8B 21 AA 83         ld hl,string_highscore_congratulations
 94+  AB8E CD C5 84         call string_print
 95+  AB91
 96+  AB91 3A 05 B9         ld a,(game_currentplayer)
 97+  AB94 FE 01            cp 1
 98+  AB96 21 BC 83         ld hl,string_highscore_player1
 99+  AB99 C3 9F AB         jp gameover_enterhighscores_init1
100+  AB9C              gameover_enterhighscores_init0:
101+  AB9C 21 C7 83         ld hl,string_highscore_player2
102+  AB9F              gameover_enterhighscores_init1:
103+  AB9F CD C5 84         call string_print
104+  ABA2 06 60            ld b,96
105+  ABA4 3E 43            ld a,67
106+  ABA6 11 A0 58         ld de,22528+160                         ; attrs here
107+  ABA9 CD CA A7         call screen_setcolours
108+  ABAC
109+  ABAC 21 D2 83         ld hl,string_highscore_youhaveearned
110+  ABAF CD C5 84         call string_print
111+  ABB2
112+  ABB2 3A 4C C0         ld a,(scores_highscoretmp)
113+  ABB5 FE 05            cp 5
114+  ABB7 CA C5 AB         jp z, gameover_enterhighscores_init2    ; first place
115+  ABBA FE 11            cp 17
116+  ABBC CA CB AB         jp z, gameover_enterhighscores_init3    ; 2nd place
117+  ABBF 21 0E 84         ld hl,string_highscore_place3           ; 3rd place
118+  ABC2 C3 D1 AB         jp gameover_enterhighscores_init4
119+  ABC5              gameover_enterhighscores_init2
120+  ABC5 21 E4 83         ld hl,string_highscore_place1
121+  ABC8 C3 D1 AB         jp gameover_enterhighscores_init4
122+  ABCB              gameover_enterhighscores_init3
123+  ABCB 21 F9 83         ld hl,string_highscore_place2
124+  ABCE C3 D1 AB         jp gameover_enterhighscores_init4
125+  ABD1              gameover_enterhighscores_init4
126+  ABD1 CD C5 84         call string_print
127+  ABD4
128+  ABD4 06 60            ld b,96
129+  ABD6 3E 42            ld a,66
130+  ABD8 11 40 59         ld de,22528+320                         ; attrs here
131+  ABDB CD CA A7         call screen_setcolours
132+  ABDE
133+  ABDE 21 23 84         ld hl,string_highscore_pleaseenter
134+  ABE1 CD C5 84         call string_print
135+  ABE4
136+  ABE4 06 60            ld b,96
137+  ABE6 3E 46            ld a,70
138+  ABE8 11 E0 59         ld de,22528+480                         ; attrs here
139+  ABEB CD CA A7         call screen_setcolours
140+  ABEE C9               ret
141+  ABEF
142+  ABEF              ;
143+  ABEF              ; Initialises the screen
144+  ABEF              ;
145+  ABEF              gameover_init:
146+  ABEF              ; We want a black screen.
147+  ABEF 3E 47            ld a,71             ; white ink (7) on black paper (0),
148+  ABF1                                      ; bright (64).
149+  ABF1 CD 67 80         call utilities_clearscreen
150+  ABF4 32 8D 5C         ld (23693),a        ; set our screen colours.
151+  ABF7 3E 00            ld a,0              ; 2 is the code for red.
152+  ABF9 D3 FE            out (254),a         ; write to port 254.
153+  ABFB C9               ret
# file closed: screen/gameover.asm
 29   ABFC                  include "screen\endlevel.asm"
# file opened: screen/endlevel.asm
  1+  ABFC              ;
  2+  ABFC              ; Draws the level transition screen
  3+  ABFC              ;
  4+  ABFC              endlevel_draw:
  5+  ABFC CD F2 AC         call endlevel_init
  6+  ABFF CD DB AC         call endlevel_commontext
  7+  AC02
  8+  AC02 21 AA 83         ld hl,string_highscore_congratulations
  9+  AC05 CD C5 84         call string_print
 10+  AC08
 11+  AC08 3A 05 B9         ld a,(game_currentplayer)
 12+  AC0B FE 01            cp 1
 13+  AC0D 21 BC 83         ld hl,string_highscore_player1
 14+  AC10 C3 16 AC         jp endlevel_init1
 15+  AC13              endlevel_init0:
 16+  AC13 21 C7 83         ld hl,string_highscore_player2
 17+  AC16              endlevel_init1:
 18+  AC16 CD C5 84         call string_print
 19+  AC19
 20+  AC19 21 40 84         ld hl,string_endlevel_youhaveearned
 21+  AC1C CD C5 84         call string_print
 22+  AC1F
 23+  AC1F CD 7A AC         call endlevel_workoutbonus
 24+  AC22 D5               push de
 25+  AC23 08               ex af,af'                               ; store the a value for later
 26+  AC24 CD C5 84         call string_print
 27+  AC27 D1               pop de
 28+  AC28 62 6B            ld hl,de                                ; get the points text into de
 29+  AC2A CD C5 84         call string_print
 30+  AC2D
 31+  AC2D 21 AB 84         ld hl, string_endlevel_anothergo
 32+  AC30 CD C5 84         call string_print
 33+  AC33
 34+  AC33 06 20            ld b,32
 35+  AC35 3E 63            ld a,99
 36+  AC37 11 60 59         ld de,22528+352                         ; attrs here
 37+  AC3A CD CA A7         call screen_setcolours
 38+  AC3D
 39+  AC3D 06 20            ld b,32
 40+  AC3F 3E 65            ld a,101
 41+  AC41 11 A0 59         ld de,22528+416                         ; attrs here
 42+  AC44 CD CA A7         call screen_setcolours
 43+  AC47
 44+  AC47 06 20            ld b,32
 45+  AC49 3E 63            ld a,99
 46+  AC4B 11 E0 59         ld de,22528+480                         ; attrs here
 47+  AC4E CD CA A7         call screen_setcolours
 48+  AC51
 49+  AC51 06 20            ld b,32
 50+  AC53 3E 62            ld a,98
 51+  AC55 11 40 5A         ld de,22528+576                         ; attrs here
 52+  AC58 CD CA A7         call screen_setcolours
 53+  AC5B
 54+  AC5B 08               ex af,af'                               ; get back a value with bonus type
 55+  AC5C 06 14            ld b,20
 56+  AC5E CD 82 80         call utilities_pauseforframes
 57+  AC61
 58+  AC61 47               ld b,a                      ; put the bonus count in b
 59+  AC62              endlevel_init2:
 60+  AC62 C5               push bc
 61+  AC63 06 01            ld b,1
 62+  AC65 CD F7 BF         call scores_addthousands
 63+  AC68 CD E3 B9         call player_recordcurrentscore
 64+  AC6B CD 17 C0         call scores_printscores     ; print the current scores
 65+  AC6E 06 0A            ld b,10
 66+  AC70 CD 82 80         call utilities_pauseforframes
 67+  AC73 C1               pop bc
 68+  AC74 10 EC            djnz endlevel_init2
 69+  AC76
 70+  AC76 CD 47 80         call utilities_waitforkey   ; wait for keypress
 71+  AC79
 72+  AC79 C9               ret
 73+  AC7A
 74+  AC7A              ;
 75+  AC7A              ; Works out the bonus
 76+  AC7A              ; Outputs:
 77+  AC7A              ; a = 15 (all seven)
 78+  AC7A              ; a = 10 (3 large or 4 small)
 79+  AC7A              ; a = 5 (1 large diamond)
 80+  AC7A              ; hl - pointer to bonus text
 81+  AC7A              ; de - pointer to points text
 82+  AC7A              ;
 83+  AC7A              endlevel_workoutbonus:
 84+  AC7A 21 68 B2         ld hl,level01diamonds+2     ; location of state of first diamond
 85+  AC7D 06 03            ld b,3                      ; number to check
 86+  AC7F 16 00            ld d,0                      ; zero diamond count
 87+  AC81              endlevel_workoutbonus0:
 88+  AC81 7E               ld a,(hl)                   ; get state
 89+  AC82 FE 01            cp 1
 90+  AC84 C2 88 AC         jp nz,endlevel_workoutbonus1 ; if not, move on
 91+  AC87 14               inc d                       ; increment diamond count
 92+  AC88              endlevel_workoutbonus1:
 93+  AC88 23               inc hl
 94+  AC89 23               inc hl
 95+  AC8A 23               inc hl
 96+  AC8B 23               inc hl
 97+  AC8C 23               inc hl                      ; get to next state
 98+  AC8D 10 F2            djnz endlevel_workoutbonus0
 99+  AC8F
100+  AC8F 21 78 B2         ld hl,level01gems+2     ; location of state of first gem
101+  AC92 06 04            ld b,4                      ; number to check
102+  AC94 1E 00            ld e,0                      ; zero gem count
103+  AC96              endlevel_workoutbonus2:
104+  AC96 7E               ld a,(hl)                   ; get state
105+  AC97 FE 01            cp 1
106+  AC99 C2 9D AC         jp nz,endlevel_workoutbonus3 ; if not, move on
107+  AC9C 1C               inc e                       ; increment diamond count
108+  AC9D              endlevel_workoutbonus3:
109+  AC9D 23               inc hl
110+  AC9E 23               inc hl
111+  AC9F 23               inc hl
112+  ACA0 23               inc hl
113+  ACA1 23               inc hl                     ; get to next state
114+  ACA2 10 F2            djnz endlevel_workoutbonus2
115+  ACA4
116+  ACA4 7A               ld a,d
117+  ACA5 83               add e
118+  ACA6 FE 07            cp 7                        ; check for max bonus
119+  ACA8 C2 B4 AC         jp nz,endlevel_workoutbonus4 ;
120+  ACAB 3E 0F            ld a,15
121+  ACAD 21 70 84         ld hl, string_endlevel_bonus3
122+  ACB0 11 9C 84         ld de, string_endlevel_points3
123+  ACB3 C9               ret                         ; return with bonus of 15
124+  ACB4              endlevel_workoutbonus4:
125+  ACB4 7A               ld a,d                      ; check for for diamonds
126+  ACB5 FE 03            cp 3
127+  ACB7 C2 C3 AC         jp nz,endlevel_workoutbonus5
128+  ACBA 3E 0A            ld a,10
129+  ACBC 21 61 84         ld hl, string_endlevel_bonus2
130+  ACBF 11 8D 84         ld de, string_endlevel_points2
131+  ACC2 C9               ret                         ; return with bonus of ten
132+  ACC3              endlevel_workoutbonus5:
133+  ACC3 7B               ld a,e                      ; check for four gems
134+  ACC4 FE 04            cp 4
135+  ACC6 C2 D2 AC         jp nz,endlevel_workoutbonus6
136+  ACC9 3E 0A            ld a,10
137+  ACCB 21 61 84         ld hl, string_endlevel_bonus2
138+  ACCE 11 8D 84         ld de, string_endlevel_points2
139+  ACD1 C9               ret                         ; return with bonus of 10
140+  ACD2              endlevel_workoutbonus6:
141+  ACD2 3E 05            ld a,5                      ; otherwise, bonus is 5
142+  ACD4 21 52 84         ld hl, string_endlevel_bonus1
143+  ACD7 11 7F 84         ld de, string_endlevel_points1
144+  ACDA C9               ret
145+  ACDB
146+  ACDB              ;
147+  ACDB              ; Draws text shared by the game over and high score screens
148+  ACDB              ;
149+  ACDB              endlevel_commontext:
150+  ACDB CD 9C A7         call screen_setuptext       ; show scores
151+  ACDE CD 17 C0         call scores_printscores     ; print the current scores
152+  ACE1
153+  ACE1 21 8A 83         ld hl,string_gameoverscreen_bestscores
154+  ACE4 CD C5 84         call string_print
155+  ACE7
156+  ACE7 06 20            ld b,32
157+  ACE9 3E 45            ld a,69
158+  ACEB 11 C0 5A         ld de,22528+704                         ; attrs here
159+  ACEE CD CA A7         call screen_setcolours
160+  ACF1
161+  ACF1 C9               ret
162+  ACF2
163+  ACF2              ;
164+  ACF2              ; Initialises the screen
165+  ACF2              ;
166+  ACF2              endlevel_init:
167+  ACF2              ; We want a green screen.
168+  ACF2 3E 61            ld a,97             ; white ink (7) on black paper (0),
169+  ACF4                                      ; bright (64).
170+  ACF4 CD 67 80         call utilities_clearscreen
171+  ACF7 32 8D 5C         ld (23693),a        ; set our screen colours.
172+  ACFA 3E 00            ld a,0              ; 2 is the code for red.
173+  ACFC D3 FE            out (254),a         ; write to port 254.
174+  ACFE C9               ret
# file closed: screen/endlevel.asm
 30   ACFF
 31   ACFF                  include "sound\sound.asm"
# file opened: sound/sound.asm
  1+  ACFF              sound_gemcollected:
  2+  ACFF 21 C8 00         ld hl,200 ; pitch.
  3+  AD02 11 3E 00         ld de,62 ; duration.
  4+  AD05 CD B5 03         call 949 ; ROM beeper routine.
  5+  AD08 C9               ret
  6+  AD09
  7+  AD09              sound_pitchbend:
  8+  AD09 21 F4 01         ld hl,500 ; starting pitch.
  9+  AD0C 06 FA            ld b,250 ; length of pitch bend.
 10+  AD0E              sound_pitchbend0:
 11+  AD0E C5                push bc
 12+  AD0F E5               push hl ; store pitch.
 13+  AD10 11 01 00         ld de,1 ; very short duration.
 14+  AD13 CD B5 03         call 949 ; ROM beeper routine.
 15+  AD16 E1               pop hl ; restore pitch.
 16+  AD17 23               inc hl ; pitch going up.
 17+  AD18 C1               pop bc
 18+  AD19 10 F3            djnz sound_pitchbend0 ; repeat.
 19+  AD1B C9               ret
 20+  AD1C
 21+  AD1C              sound_rockfell:
 22+  AD1C 08               ex af,af'
 23+  AD1D 1E 32            ld e,50 ; repeat 250 times.
 24+  AD1F 21 00 00         ld hl,0 ; start pointer in ROM.
 25+  AD22 D5           sound_rockfell2 push de
 26+  AD23 06 20            ld b,32 ; length of step.
 27+  AD25 C5           sound_rockfell0 push bc
 28+  AD26 7E               ld a,(hl) ; next "random" number.
 29+  AD27 23               inc hl ; pointer.
 30+  AD28 E6 F8            and 248 ; we want a black border.
 31+  AD2A D3 FE            out (254),a ; write to speaker.
 32+  AD2C 7B               ld a,e ; as e gets smaller...
 33+  AD2D 2F               cpl ; ...we increase the delay.
 34+  AD2E 3D           sound_rockfell1 dec a ; decrement loop counter.
 35+  AD2F 20 FD            jr nz,sound_rockfell1 ; delay loop.
 36+  AD31 C1               pop bc
 37+  AD32 10 F1            djnz sound_rockfell0 ; next step.
 38+  AD34 D1               pop de
 39+  AD35 7B               ld a,e
 40+  AD36 D6 18            sub 24 ; size of step.
 41+  AD38 FE 1E            cp 30 ; end of range.
 42+  AD3A CA 4B AD         jp z,sound_rockfell5
 43+  AD3D DA 4B AD         jp c, sound_rockfell5
 44+  AD40 5F               ld e,a
 45+  AD41 2F               cpl
 46+  AD42 06 28        sound_rockfell3 ld b,40 ; silent period.
 47+  AD44 10 FE        sound_rockfell4 djnz sound_rockfell4
 48+  AD46 3D               dec a
 49+  AD47 20 F9            jr nz,sound_rockfell3
 50+  AD49 18 D7            jr sound_rockfell2
 51+  AD4B              sound_rockfell5
 52+  AD4B 08               ex af,af'
 53+  AD4C C9               ret
 54+  AD4D
# file closed: sound/sound.asm
 32   AD4D
 33   AD4D                  include "leveldata\level01.asm"
# file opened: leveldata/level01.asm
  1+  AD4D              ; ###############################################################
  2+  AD4D              ; Data for level 1
  3+  AD4D              ; ###############################################################
  4+  AD4D              level01:
  5+  AD4D
  6+  AD4D                  ;defb 09,04,04,04,04,04,04,04,04,04,04,04,04,04,04,09,09,04,04,04,04,04,04,04,04,04,04,04,04,04,04,09
  7+  AD4D
  8+  AD4D 00 00 05 05      defb 00,00,05,05,05,05,05,05,05,05,05,05,05,05,02,01,01,01,03,05,05,05,05,05,05,05,05,05,05,05,00,00
  8+  AD51 05 05 05 05
  8+  AD55 05 05 05 05
  8+  AD59 05 05 02 01
  8+  AD5D 01 01 03 05
  8+  AD61 05 05 05 05
  8+  AD65 05 05 05 05
  8+  AD69 05 05 00 00
  9+  AD6D 00 00 05 05      defb 00,00,05,05,05,05,05,05,05,05,05,05,02,01,01,01,01,01,01,01,03,05,05,05,05,05,05,05,05,05,00,00
  9+  AD71 05 05 05 05
  9+  AD75 05 05 05 05
  9+  AD79 02 01 01 01
  9+  AD7D 01 01 01 01
  9+  AD81 03 05 05 05
  9+  AD85 05 05 05 05
  9+  AD89 05 05 00 00
 10+  AD8D 00 00 05 05      defb 00,00,05,05,05,05,05,05,05,05,02,01,01,01,01,01,01,01,01,01,01,01,03,05,13,13,13,13,13,13,00,00
 10+  AD91 05 05 05 05
 10+  AD95 05 05 02 01
 10+  AD99 01 01 01 01
 10+  AD9D 01 01 01 01
 10+  ADA1 01 01 03 05
 10+  ADA5 0D 0D 0D 0D
 10+  ADA9 0D 0D 00 00
 11+  ADAD 00 00 01 01      defb 00,00,01,01,01,01,00,01,01,01,01,01,01,01,01,01,01,01,01,01,01,01,01,03,05,05,05,05,05,05,00,00
 11+  ADB1 01 01 00 01
 11+  ADB5 01 01 01 01
 11+  ADB9 01 01 01 01
 11+  ADBD 01 01 01 01
 11+  ADC1 01 01 01 03
 11+  ADC5 05 05 05 05
 11+  ADC9 05 05 00 00
 12+  ADCD 00 00 01 01      defb 00,00,01,01,04,04,04,04,04,04,01,01,01,01,01,01,01,01,01,01,01,01,01,01,01,01,01,01,00,01,00,00
 12+  ADD1 04 04 04 04
 12+  ADD5 04 04 01 01
 12+  ADD9 01 01 01 01
 12+  ADDD 01 01 01 01
 12+  ADE1 01 01 01 01
 12+  ADE5 01 01 01 01
 12+  ADE9 00 01 00 00
 13+  ADED 00 00 01 04      defb 00,00,01,04,04,04,04,04,04,04,04,04,01,01,01,01,01,01,01,01,01,01,01,01,00,00,00,00,00,01,00,00
 13+  ADF1 04 04 04 04
 13+  ADF5 04 04 04 04
 13+  ADF9 01 01 01 01
 13+  ADFD 01 01 01 01
 13+  AE01 01 01 01 01
 13+  AE05 00 00 00 00
 13+  AE09 00 01 00 00
 14+  AE0D 00 00 01 04      defb 00,00,01,04,04,01,01,01,01,01,04,04,04,04,01,01,01,01,01,01,01,00,00,00,00,01,01,01,01,01,00,00
 14+  AE11 04 01 01 01
 14+  AE15 01 01 04 04
 14+  AE19 04 04 01 01
 14+  AE1D 01 01 01 01
 14+  AE21 01 00 00 00
 14+  AE25 00 01 01 01
 14+  AE29 01 01 00 00
 15+  AE2D 00 00 01 04      defb 00,00,01,04,04,04,04,04,04,01,04,04,04,04,04,04,04,04,00,00,00,00,04,04,04,04,04,04,04,01,00,00
 15+  AE31 04 04 04 04
 15+  AE35 04 01 04 04
 15+  AE39 04 04 04 04
 15+  AE3D 04 04 00 00
 15+  AE41 00 00 04 04
 15+  AE45 04 04 04 04
 15+  AE49 04 01 00 00
 16+  AE4D 00 00 01 01      defb 00,00,01,01,01,04,01,01,01,01,04,04,04,04,04,04,04,04,00,04,04,04,04,04,04,04,04,04,04,01,00,00
 16+  AE51 01 04 01 01
 16+  AE55 01 01 04 04
 16+  AE59 04 04 04 04
 16+  AE5D 04 04 00 04
 16+  AE61 04 04 04 04
 16+  AE65 04 04 04 04
 16+  AE69 04 01 00 00
 17+  AE6D 00 00 01 00      defb 00,00,01,00,00,00,00,00,00,04,04,04,04,04,04,04,04,04,00,04,04,04,04,04,04,04,04,04,04,01,00,00
 17+  AE71 00 00 00 00
 17+  AE75 00 04 04 04
 17+  AE79 04 04 04 04
 17+  AE7D 04 04 00 04
 17+  AE81 04 04 04 04
 17+  AE85 04 04 04 04
 17+  AE89 04 01 00 00
 18+  AE8D 00 00 01 07      defb 00,00,01,07,07,07,07,07,07,01,04,04,04,04,04,04,04,04,00,04,04,04,04,04,04,04,04,04,04,01,00,00
 18+  AE91 07 07 07 07
 18+  AE95 07 01 04 04
 18+  AE99 04 04 04 04
 18+  AE9D 04 04 00 04
 18+  AEA1 04 04 04 04
 18+  AEA5 04 04 04 04
 18+  AEA9 04 01 00 00
 19+  AEAD 00 00 01 00      defb 00,00,01,00,00,00,00,00,00,01,04,04,04,04,04,04,04,04,00,04,04,04,04,04,04,00,00,00,00,01,00,00
 19+  AEB1 00 00 00 00
 19+  AEB5 00 01 04 04
 19+  AEB9 04 04 04 04
 19+  AEBD 04 04 00 04
 19+  AEC1 04 04 04 04
 19+  AEC5 04 00 00 00
 19+  AEC9 00 01 00 00
 20+  AECD 00 00 01 00      defb 00,00,01,00,00,00,00,00,00,01,04,04,04,04,04,04,04,04,00,04,04,04,04,04,04,00,04,04,00,01,00,00
 20+  AED1 00 00 00 00
 20+  AED5 00 01 04 04
 20+  AED9 04 04 04 04
 20+  AEDD 04 04 00 04
 20+  AEE1 04 04 04 04
 20+  AEE5 04 00 04 04
 20+  AEE9 00 01 00 00
 21+  AEED 00 00 01 06      defb 00,00,01,06,06,06,06,06,06,01,04,04,04,04,04,04,04,04,00,04,04,04,04,04,04,00,04,04,00,01,00,00
 21+  AEF1 06 06 06 06
 21+  AEF5 06 01 04 04
 21+  AEF9 04 04 04 04
 21+  AEFD 04 04 00 04
 21+  AF01 04 04 04 04
 21+  AF05 04 00 04 04
 21+  AF09 00 01 00 00
 22+  AF0D 00 00 01 06      defb 00,00,01,06,06,06,06,06,06,01,04,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,04,04,00,01,00,00
 22+  AF11 06 06 06 06
 22+  AF15 06 01 04 00
 22+  AF19 00 00 00 00
 22+  AF1D 00 00 00 00
 22+  AF21 00 00 00 00
 22+  AF25 00 00 04 04
 22+  AF29 00 01 00 00
 23+  AF2D 00 00 01 06      defb 00,00,01,06,06,06,06,06,06,01,04,00,04,04,04,04,04,04,00,04,04,04,00,04,04,04,04,04,00,01,00,00
 23+  AF31 06 06 06 06
 23+  AF35 06 01 04 00
 23+  AF39 04 04 04 04
 23+  AF3D 04 04 00 04
 23+  AF41 04 04 00 04
 23+  AF45 04 04 04 04
 23+  AF49 00 01 00 00
 24+  AF4D 00 00 01 06      defb 00,00,01,06,06,06,06,06,06,01,04,00,04,04,04,04,04,04,00,04,04,04,00,04,04,04,04,04,00,01,00,00
 24+  AF51 06 06 06 06
 24+  AF55 06 01 04 00
 24+  AF59 04 04 04 04
 24+  AF5D 04 04 00 04
 24+  AF61 04 04 00 04
 24+  AF65 04 04 04 04
 24+  AF69 00 01 00 00
 25+  AF6D 00 00 01 01      defb 00,00,01,01,01,01,01,01,01,01,04,00,04,04,04,04,04,04,00,04,04,04,00,04,04,04,04,04,00,01,00,00
 25+  AF71 01 01 01 01
 25+  AF75 01 01 04 00
 25+  AF79 04 04 04 04
 25+  AF7D 04 04 00 04
 25+  AF81 04 04 00 04
 25+  AF85 04 04 04 04
 25+  AF89 00 01 00 00
 26+  AF8D 00 00 01 04      defb 00,00,01,04,04,04,04,04,04,04,04,00,04,04,04,04,04,04,00,04,04,04,00,00,00,00,04,04,04,01,00,00
 26+  AF91 04 04 04 04
 26+  AF95 04 04 04 00
 26+  AF99 04 04 04 04
 26+  AF9D 04 04 00 04
 26+  AFA1 04 04 00 00
 26+  AFA5 00 00 04 04
 26+  AFA9 04 01 00 00
 27+  AFAD 00 00 01 04      defb 00,00,01,04,04,04,00,00,00,00,00,00,04,04,04,04,04,04,00,04,04,04,04,04,04,00,04,04,04,01,00,00
 27+  AFB1 04 04 00 00
 27+  AFB5 00 00 00 00
 27+  AFB9 04 04 04 04
 27+  AFBD 04 04 00 04
 27+  AFC1 04 04 04 04
 27+  AFC5 04 00 04 04
 27+  AFC9 04 01 00 00
 28+  AFCD 00 00 01 04      defb 00,00,01,04,04,04,00,04,04,04,04,04,04,04,04,04,04,04,00,04,04,04,04,04,04,00,04,04,04,01,00,00
 28+  AFD1 04 04 00 04
 28+  AFD5 04 04 04 04
 28+  AFD9 04 04 04 04
 28+  AFDD 04 04 00 04
 28+  AFE1 04 04 04 04
 28+  AFE5 04 00 04 04
 28+  AFE9 04 01 00 00
 29+  AFED 00 00 01 04      defb 00,00,01,04,04,04,00,04,04,04,01,01,01,01,01,01,01,01,01,01,01,01,01,01,04,00,04,04,04,01,00,00
 29+  AFF1 04 04 00 04
 29+  AFF5 04 04 01 01
 29+  AFF9 01 01 01 01
 29+  AFFD 01 01 01 01
 29+  B001 01 01 01 01
 29+  B005 04 00 04 04
 29+  B009 04 01 00 00
 30+  B00D 00 00 01 04      defb 00,00,01,04,04,04,00,04,04,04,01,00,00,00,00,00,00,00,00,00,00,00,00,01,04,00,04,04,04,01,00,00
 30+  B011 04 04 00 04
 30+  B015 04 04 01 00
 30+  B019 00 00 00 00
 30+  B01D 00 00 00 00
 30+  B021 00 00 00 01
 30+  B025 04 00 04 04
 30+  B029 04 01 00 00
 31+  B02D 00 00 01 04      defb 00,00,01,04,04,04,00,04,04,04,01,00,00,00,00,00,00,00,00,00,00,00,00,01,04,00,04,04,04,01,00,00
 31+  B031 04 04 00 04
 31+  B035 04 04 01 00
 31+  B039 00 00 00 00
 31+  B03D 00 00 00 00
 31+  B041 00 00 00 01
 31+  B045 04 00 04 04
 31+  B049 04 01 00 00
 32+  B04D 00 00 01 04      defb 00,00,01,04,04,04,00,04,04,04,01,00,00,00,00,00,00,00,00,00,00,00,00,01,04,00,04,04,04,01,00,00
 32+  B051 04 04 00 04
 32+  B055 04 04 01 00
 32+  B059 00 00 00 00
 32+  B05D 00 00 00 00
 32+  B061 00 00 00 01
 32+  B065 04 00 04 04
 32+  B069 04 01 00 00
 33+  B06D 00 00 01 04      defb 00,00,01,04,04,04,00,04,04,04,04,00,00,00,00,00,00,00,00,00,00,00,00,04,04,04,04,04,04,01,00,00
 33+  B071 04 04 00 04
 33+  B075 04 04 04 00
 33+  B079 00 00 00 00
 33+  B07D 00 00 00 00
 33+  B081 00 00 00 04
 33+  B085 04 04 04 04
 33+  B089 04 01 00 00
 34+  B08D 00 00 01 04      defb 00,00,01,04,04,04,04,04,04,04,01,00,00,00,00,00,00,00,00,00,00,00,00,01,04,04,04,04,04,01,00,00
 34+  B091 04 04 04 04
 34+  B095 04 04 01 00
 34+  B099 00 00 00 00
 34+  B09D 00 00 00 00
 34+  B0A1 00 00 00 01
 34+  B0A5 04 04 04 04
 34+  B0A9 04 01 00 00
 35+  B0AD 00 00 01 04      defb 00,00,01,04,04,04,04,04,04,04,01,00,00,00,01,00,00,00,00,01,00,00,00,01,04,04,04,04,04,01,00,00
 35+  B0B1 04 04 04 04
 35+  B0B5 04 04 01 00
 35+  B0B9 00 00 01 00
 35+  B0BD 00 00 00 01
 35+  B0C1 00 00 00 01
 35+  B0C5 04 04 04 04
 35+  B0C9 04 01 00 00
 36+  B0CD 00 00 01 01      defb 00,00,01,01,01,01,01,01,01,01,01,01,01,01,01,01,01,01,01,01,01,01,01,01,01,01,01,01,01,01,00,00
 36+  B0D1 01 01 01 01
 36+  B0D5 01 01 01 01
 36+  B0D9 01 01 01 01
 36+  B0DD 01 01 01 01
 36+  B0E1 01 01 01 01
 36+  B0E5 01 01 01 01
 36+  B0E9 01 01 00 00
 37+  B0ED
 38+  B0ED              ; ###############################################################
 39+  B0ED              ; Object data: horiz, vert, state, memh, meml
 40+  B0ED              ; ###############################################################
 41+  B0ED              level01rocks:
 42+  B0ED 09 04 00 00      defb 9,4,0,0,0
 42+  B0F1 00
 43+  B0F2 0C 07 00 00      defb 12,7,0,0,0
 43+  B0F6 00
 44+  B0F7 10 07 00 00      defb 16,7,0,0,0
 44+  B0FB 00
 45+  B0FC 0B 08 00 00      defb 11,8,0,0,0
 45+  B100 00
 46+  B101 0A 0A 00 00      defb 10,10,0,0,0
 46+  B105 00
 47+  B106 0C 0A 00 00      defb 12,10,0,0,0
 47+  B10A 00
 48+  B10B 0D 09 00 00      defb 13,9,0,0,0
 48+  B10F 00
 49+  B110 0E 08 00 00      defb 14,8,0,0,0
 49+  B114 00
 50+  B115 0F 0B 00 00      defb 15,11,0,0,0
 50+  B119 00
 51+  B11A 0B 0C 00 00      defb 11,12,0,0,0
 51+  B11E 00
 52+  B11F 11 0C 00 00      defb 17,12,0,0,0
 52+  B123 00
 53+  B124 13 08 00 00      defb 19,8,0,0,0
 53+  B128 00
 54+  B129 16 09 00 00      defb 22,9,0,0,0
 54+  B12D 00
 55+  B12E 13 0A 00 00      defb 19,10,0,0,0
 55+  B132 00
 56+  B133 15 0A 00 00      defb 21,10,0,0,0
 56+  B137 00
 57+  B138 15 0C 00 00      defb 21,12,0,0,0
 57+  B13C 00
 58+  B13D 16 0C 00 00      defb 22,12,0,0,0
 58+  B141 00
 59+  B142 18 0A 00 00      defb 24,10,0,0,0
 59+  B146 00
 60+  B147 19 09 00 00      defb 25,9,0,0,0
 60+  B14B 00
 61+  B14C 1C 09 00 00      defb 28,9,0,0,0
 61+  B150 00
 62+  B151 1B 0C 00 00      defb 27,12,0,0,0
 62+  B155 00
 63+  B156 1A 0D 00 00      defb 26,13,0,0,0
 63+  B15A 00
 64+  B15B 19 0E 00 00      defb 25,14,0,0,0
 64+  B15F 00
 65+  B160 19 10 00 00      defb 25,16,0,0,0
 65+  B164 00
 66+  B165 1A 11 00 00      defb 26,17,0,0,0
 66+  B169 00
 67+  B16A 1B 11 00 00      defb 27,17,0,0,0
 67+  B16E 00
 68+  B16F 1C 12 00 00      defb 28,18,0,0,0
 68+  B173 00
 69+  B174 1A 13 00 00      defb 26,19,0,0,0
 69+  B178 00
 70+  B179 1B 15 00 00      defb 27,21,0,0,0
 70+  B17D 00
 71+  B17E 1A 17 00 00      defb 26,23,0,0,0
 71+  B182 00
 72+  B183 1B 18 00 00      defb 27,24,0,0,0
 72+  B187 00
 73+  B188 19 18 00 00      defb 25,24,0,0,0
 73+  B18C 00
 74+  B18D 18 17 00 00      defb 24,23,0,0,0
 74+  B191 00
 75+  B192 13 14 00 00      defb 19,20,0,0,0
 75+  B196 00
 76+  B197 14 12 00 00      defb 20,18,0,0,0
 76+  B19B 00
 77+  B19C 14 10 00 00      defb 20,16,0,0,0
 77+  B1A0 00
 78+  B1A1 15 10 00 00      defb 21,16,0,0,0
 78+  B1A5 00
 79+  B1A6 16 12 00 00      defb 22,18,0,0,0
 79+  B1AA 00
 80+  B1AB 11 14 00 00      defb 17,20,0,0,0
 80+  B1AF 00
 81+  B1B0 0D 11 00 00      defb 13,17,0,0,0
 81+  B1B4 00
 82+  B1B5 0C 13 00 00      defb 12,19,0,0,0
 82+  B1B9 00
 83+  B1BA 0B 13 00 00      defb 11,19,0,0,0
 83+  B1BE 00
 84+  B1BF 0A 11 00 00      defb 10,17,0,0,0
 84+  B1C3 00
 85+  B1C4 05 12 00 00      defb 5,18,0,0,0
 85+  B1C8 00
 86+  B1C9 07 16 00 00      defb 7,22,0,0,0
 86+  B1CD 00
 87+  B1CE 09 17 00 00      defb 9,23,0,0,0
 87+  B1D2 00
 88+  B1D3 07 18 00 00      defb 7,24,0,0,0
 88+  B1D7 00
 89+  B1D8 05 18 00 00      defb 5,24,0,0,0
 89+  B1DC 00
 90+  B1DD 06 19 00 00      defb 6,25,0,0,0
 90+  B1E1 00
 91+  B1E2 08 19 00 00      defb 8,25,0,0,0
 91+  B1E6 00
 92+  B1E7 04 17 00 00      defb 4,23,0,0,0
 92+  B1EB 00
 93+  B1EC FF               defb 255
 94+  B1ED
 95+  B1ED              level01missiles:
 96+  B1ED 0B 17 00 00      defb 11,23,0,0,0
 96+  B1F1 00
 97+  B1F2 0B 16 00 00      defb 11,22,0,0,0
 97+  B1F6 00
 98+  B1F7 0C 17 00 00      defb 12,23,0,0,0
 98+  B1FB 00
 99+  B1FC 0C 16 00 00      defb 12,22,0,0,0
 99+  B200 00
100+  B201 0D 17 00 00      defb 13,23,0,0,0
100+  B205 00
101+  B206 0D 16 00 00      defb 13,22,0,0,0
101+  B20A 00
102+  B20B 0E 17 00 00      defb 14,23,0,0,0
102+  B20F 00
103+  B210 0E 16 00 00      defb 14,22,0,0,0
103+  B214 00
104+  B215 0F 17 00 00      defb 15,23,0,0,0
104+  B219 00
105+  B21A 0F 16 00 00      defb 15,22,0,0,0
105+  B21E 00
106+  B21F 10 17 00 00      defb 16,23,0,0,0
106+  B223 00
107+  B224 10 16 00 00      defb 16,22,0,0,0
107+  B228 00
108+  B229 11 17 00 00      defb 17,23,0,0,0
108+  B22D 00
109+  B22E 11 16 00 00      defb 17,22,0,0,0
109+  B232 00
110+  B233 12 17 00 00      defb 18,23,0,0,0
110+  B237 00
111+  B238 12 16 00 00      defb 18,22,0,0,0
111+  B23C 00
112+  B23D 13 17 00 00      defb 19,23,0,0,0
112+  B241 00
113+  B242 13 16 00 00      defb 19,22,0,0,0
113+  B246 00
114+  B247 14 17 00 00      defb 20,23,0,0,0
114+  B24B 00
115+  B24C 14 16 00 00      defb 20,22,0,0,0
115+  B250 00
116+  B251 15 17 00 00      defb 21,23,0,0,0
116+  B255 00
117+  B256 15 16 00 00      defb 21,22,0,0,0
117+  B25A 00
118+  B25B 16 17 00 00      defb 22,23,0,0,0
118+  B25F 00
119+  B260 16 16 00 00      defb 22,22,0,0,0
119+  B264 00
120+  B265 FF               defb 255
121+  B266
122+  B266              ;
123+  B266              ; Diamonds: x,y,state,mem1+mem2
124+  B266              ;
125+  B266              level01diamonds:
126+  B266 0C 1B 00 00      defb 12,27,0,0,0
126+  B26A 00
127+  B26B 10 1B 00 00      defb 16,27,0,0,0
127+  B26F 00
128+  B270 15 1B 00 00      defb 21,27,0,0,0
128+  B274 00
129+  B275 FF               defb 255
130+  B276
131+  B276              level01gems:
132+  B276 12 14 00 00      defb 18,20,0,0,0
132+  B27A 00
133+  B27B 06 18 00 00      defb 6,24,0,0,0
133+  B27F 00
134+  B280 19 17 00 00      defb 25,23,0,0,0
134+  B284 00
135+  B285 1C 11 00 00      defb 28,17,0,0,0
135+  B289 00
136+  B28A FF               defb 255
137+  B28B              ;
138+  B28B              ; Score area colours
139+  B28B              ;
140+  B28B              score_colours:
141+  B28B 47 47 47 47      defb 71,71,71,71,71,71,71,71,71,71,71,66,67,67,67,67,67,67,67,67,66,71,71,71,71,71,71,71,71,71,71,71
141+  B28F 47 47 47 47
141+  B293 47 47 47 42
141+  B297 43 43 43 43
141+  B29B 43 43 43 43
141+  B29F 42 47 47 47
141+  B2A3 47 47 47 47
141+  B2A7 47 47 47 47
142+  B2AB 47 47 47 47      defb 71,71,71,71,71,71,71,71,71,71,71,70,70,70,70,70,70,70,70,70,70,71,71,71,71,71,71,71,71,71,71,71
142+  B2AF 47 47 47 47
142+  B2B3 47 47 47 46
142+  B2B7 46 46 46 46
142+  B2BB 46 46 46 46
142+  B2BF 46 47 47 47
142+  B2C3 47 47 47 47
142+  B2C7 47 47 47 47
143+  B2CB
144+  B2CB              high_score_colours:
145+  B2CB 00 00 00 42      defb  0, 0, 0,66,66,66,71,71,71,71,71,71,67,67,67,71,71,71,71,71,71,70,70,70,71,71,71,71,71,71,0,0
145+  B2CF 42 42 47 47
145+  B2D3 47 47 47 47
145+  B2D7 43 43 43 47
145+  B2DB 47 47 47 47
145+  B2DF 47 46 46 46
145+  B2E3 47 47 47 47
145+  B2E7 47 47 00 00
# file closed: leveldata/level01.asm
 34   B2EB                  include "graphics\graphics.asm"
# file opened: graphics/graphics.asm
  1+  B2EB              ; Tiles graphics.
  2+  B2EB              sprites:
  3+  B2EB 00 00 00 00      defb    0  ,  0,  0,  0,  0,  0,  0,  0   ; 0, space
  3+  B2EF 00 00 00 00
  4+  B2F3 FF FF FF FF      defb    255,255,255,255,255,255,255,255   ; 1, cyan block
  4+  B2F7 FF FF FF FF
  5+  B2FB 01 03 07 0F      defb	  1,  3,  7, 15, 31, 63,127,255   ; 2, slope left
  5+  B2FF 1F 3F 7F FF
  6+  B303 80 C0 E0 F0      defb    128,192,224,240,248,252,254,255   ; 3, slope right
  6+  B307 F8 FC FE FF
  7+  B30B 55 AA 55 AA      defb    85,170, 85,170, 85,170, 85,170    ; 4, dirt
  7+  B30F 55 AA 55 AA
  8+  B313 00 00 00 00      defb    0  ,  0,  0,  0,  0,  0,  0,  0   ; 5, sky block
  8+  B317 00 00 00 00
  9+  B31B FF FF FF FF      defb    255,255,255,255,255,255,255,255   ; 6, slime block
  9+  B31F FF FF FF FF
 10+  B323 FF FF 00 00      defb    255,255,  0,  0,  0,  0,  0,  0   ; 7, trapdoor
 10+  B327 00 00 00 00
 11+  B32B 18 2C 4E 8F      defb    24, 44, 78,143,241,114, 52,  24    ; 8, diamond
 11+  B32F F1 72 34 18
 12+  B333 3C 7E FF 7F      defb    60,126,255,127,254,254,255,126    ; 9, rock
 12+  B337 FE FE FF 7E
 13+  B33B 7E FF 7F 7F  	defb	126,255,127,127,254,255,126, 60    ; 10, rock 2
 13+  B33F FE FF 7E 3C
 14+  B343 00 00 00 00      defb    0  ,  0,  0,  0,  0,  0,255,255   ; 11, sky block, pixel trapdoor
 14+  B347 00 00 FF FF
 15+  B34B 99 DB 7E 24  	defb    153,219,126, 36,255, 66, 36, 24   ; 12, missile
 15+  B34F FF 42 24 18
 16+  B353 00 00 00 00      defb    0  ,  0,  0,  0,  0,  0,  0,  0   ; 13, sky block, tank background
 16+  B357 00 00 00 00
 17+  B35B 00 00 00 00  	defb    0,  0,  0,  0,  0, 60, 90, 52     ; 14, gem
 17+  B35F 00 3C 5A 34
 18+  B363 FD FE FD FE  	defb	253,254,253,254,253,254,253,254   ; 15, damaged mountain
 18+  B367 FD FE FD FE
 19+  B36B F4 F8 F4 F8  	defb	244,248,244,248,244,248,244,248   ; 16, damaged mountain 2
 19+  B36F F4 F8 F4 F8
 20+  B373 D0 E0 D0 E0  	defb	208,224,208,224,208,224,208,224   ; 17, damaged mountain 3
 20+  B377 D0 E0 D0 E0
 21+  B37B 40 80 40 80  	defb	 64,128, 64,128, 64,128, 64,128   ; 18, damaged mountain 4
 21+  B37F 40 80 40 80
 22+  B383 00 00 00 ED  	defb	0,  0,  0,237,237,  0,  0,  0	  ; 19, tank missile
 22+  B387 ED 00 00 00
 23+  B38B 99 DB 7E 24  	defb    153,219,126, 36,255,126, 60, 24   ; 20, missile active
 23+  B38F FF 7E 3C 18
 24+  B393
 25+  B393
 26+  B393              sprite_attrs:
 27+  B393 46               defb    070 ; 0, space
 28+  B394 4D               defb    077 ; 1, cyan block
 29+  B395 4D               defb    077 ; 2, slope left
 30+  B396 4D               defb    077 ; 3, slope right
 31+  B397 46               defb    070 ; 4, dirt
 32+  B398 4E               defb    078 ; 5, sky
 33+  B399 4C               defb    076 ; 6, slime
 34+  B39A 42               defb    066 ; 7, trapdoor
 35+  B39B 46               defb    070 ; 8, diamond
 36+  B39C 42               defb    066 ; 9, rock
 37+  B39D 42               defb    066 ; 10, rock 2
 38+  B39E 49           	defb    073 ; 11, sky, trapdoor
 39+  B39F 43           	defb    067 ; 12, missile
 40+  B3A0 4A               defb    074 ; 13, sky, red ink (tank)
 41+  B3A1 46               defb    070 ; 14, gem
 42+  B3A2 4D               defb    077 ; 15, damaged mountain
 43+  B3A3 4D               defb    077 ; 16, damaged mountain 2
 44+  B3A4 4D               defb    077 ; 17, damaged mountain 3
 45+  B3A5 4D               defb    077 ; 18, damaged mountain 4
 46+  B3A6 00           	defb 	000 ; 19, tank missile (not used
 47+  B3A7 43           	defb    067 ; 20, missile active
 48+  B3A8
 49+  B3A8
 50+  B3A8              player_sprite:
 51+  B3A8 10 39 92 FC  	defb	 16, 57,146,252, 56, 61,195,128 ; 0 up/down 1
 51+  B3AC 38 3D C3 80
 52+  B3B0 08 1C 08 FC  	defb	  8, 28,  8,252, 60, 28, 22, 50 ; 1 left 1
 52+  B3B4 3C 1C 16 32
 53+  B3B8 10 38 10 3F      defb   	 16, 56, 16, 63, 60, 56,104, 76 ; 2 right 1
 53+  B3BC 3C 38 68 4C
 54+  B3C0 08 9C 49 3F  	defb	  8,156, 73, 63, 28,188,195,  1 ; 3 up/down 2
 54+  B3C4 1C BC C3 01
 55+  B3C8 08 1C 08 FC  	defb	  8, 28,  8,252, 60, 60,100, 12; 4 left 2
 55+  B3CC 3C 3C 64 0C
 56+  B3D0 10 38 10 3F  	defb	 16, 56, 16, 63, 60, 60, 38, 48 ; 5 right 2
 56+  B3D4 3C 3C 26 30
 57+  B3D8 54 28 10 12  	defb	 84, 40, 16, 18, 30, 92,253, 95 ; 6 shoot up
 57+  B3DC 1E 5C FD 5F
 58+  B3E0 02 87 42 BF  	defb	 2,135, 66,191, 79,143, 25,  3  ; 7 shoot left
 58+  B3E4 4F 8F 19 03
 59+  B3E8 40 E1 42 FD  	defb	 64,225, 66,253,242,241,152,192 ; 8 shoot right
 59+  B3EC F2 F1 98 C0
 60+  B3F0 FA BF 3A 78  	defb	 250,191, 58,120, 72,  8, 20, 42 ; 9 shoot down
 60+  B3F4 48 08 14 2A
 61+  B3F8 92 BA 94 78  	defb 	 146,186,148,120, 56,120, 68,195 ; 10 crushed 1
 61+  B3FC 38 78 44 C3
 62+  B400 49 5D 29 1E  	defb	  73, 93, 41, 30, 28, 30, 34,195 ; 11 crushed 2
 62+  B404 1C 1E 22 C3
 63+  B408
 64+  B408              ;
 65+  B408              ; First 4 top half, next 4 bottom 1, next 4 bottom 2
 66+  B408              ;
 67+  B408              ship_sprite:
 68+  B408 00 00 00 01  	defb	  0,  0,  0,  1,  3, 31,127,255
 68+  B40C 03 1F 7F FF
 69+  B410 1F 01 7F FF  	defb	 31,  1,127,255,255,255,255,255
 69+  B414 FF FF FF FF
 70+  B418 F8 80 FE FF  	defb	248,128,254,255,255,255,255,255
 70+  B41C FF FF FF FF
 71+  B420 00 00 00 80  	defb	  0,  0,  0,128,192,248,254,255
 71+  B424 C0 F8 FE FF
 72+  B428 B3 B3 7F 1F  	defb	179,179,127, 31,  3,  3,  2,  7
 72+  B42C 03 03 02 07
 73+  B430 8F 8F FF FF  	defb	143,143,255,255,255, 15,  7,131
 73+  B434 FF 0F 07 83
 74+  B438 0F 0F FF FF  	defb	 15, 15,255,255,255, 16, 32,193
 74+  B43C FF 10 20 C1
 75+  B440 19 19 FE F8  	defb	 25, 25,254,248,192,192, 64,224
 75+  B444 C0 C0 40 E0
 76+  B448 98 98 7F 1F  	defb	152,152,127, 31,  3,  3,  2,  7
 76+  B44C 03 03 02 07
 77+  B450 F0 F0 FF FF  	defb	240,240,255,255,255,  8,  4,131
 77+  B454 FF 08 04 83
 78+  B458 F1 F1 FF FF  	defb	241,241,255,255,255,240,224,193
 78+  B45C FF F0 E0 C1
 79+  B460 CD CD FE F8  	defb	205,205,254,248,192,192, 64,224
 79+  B464 C0 C0 40 E0
 80+  B468
 81+  B468              ;
 82+  B468              ;  First 8 frames are tank, last frame is the gun barrel
 83+  B468              ;
 84+  B468              tank_sprite:
 85+  B468 00 00 00 7F  	defb	  0,  0,  0,127,127,  0,  0,  0
 85+  B46C 7F 00 00 00
 86+  B470 01 03 FE FC  	defb	  1,  3,254,252,254,255,127, 64
 86+  B474 FE FF 7F 40
 87+  B478 FF FF 03 F9  	defb	255,255,  3,249,  3,255,255,  1
 87+  B47C 03 FF FF 01
 88+  B480 00 00 C0 E0  	defb	  0,  0,192,224,224,192,  0,  0
 88+  B484 E0 C0 00 00
 89+  B488 3F 7F E1 FB  	defb	 63,127,225,251,247,225,127, 63
 89+  B48C F7 E1 7F 3F
 90+  B490 FF FF 16 52  	defb	255,255, 22, 82, 84, 22,255,255
 90+  B494 54 16 FF FF
 91+  B498 FF FF A8 A9  	defb	255,255,168,169,155,168,255,255
 91+  B49C 9B A8 FF FF
 92+  B4A0 FC FE 8F AF  	defb	252,254,143,175,159,175,254,252
 92+  B4A4 9F AF FE FC
 93+  B4A8 00 00 00 1F  	defb	  0,  0,  0, 31, 31,  0,  0,  0 ; +64
 93+  B4AC 1F 00 00 00
# file closed: graphics/graphics.asm
 35   B4B0
 36   B4B0                  include "game\control.asm"
# file opened: game/control.asm
  1+  B4B0              ;
  2+  B4B0              ; Check the keyboard then move
  3+  B4B0              ;
  4+  B4B0              control_keyboard:
  5+  B4B0 3A 3E B9         ld a,(player+11)    ; first, check if player is dying
  6+  B4B3 FE 00            cp 0
  7+  B4B5 C0               ret nz               ; if so, can't move
  8+  B4B6 3A 38 B9         ld a,(player+5)      ; next, check if the player has pixels left to move
  9+  B4B9 FE 00            cp 0
 10+  B4BB CA C2 B4         jp z, control_keyboard5
 11+  B4BE CD C7 B5         call control_automove
 12+  B4C1 C9               ret
 13+  B4C2              control_keyboard5:
 14+  B4C2 3A 39 B9         ld a,(player+6)      ; next, check if the player is digging
 15+  B4C5 FE 00            cp 0
 16+  B4C7 CA CE B4         jp z, control_keyboard0
 17+  B4CA CD 05 B5         call control_dig
 18+  B4CD C9               ret
 19+  B4CE              control_keyboard0:
 20+  B4CE 01 FE FB         ld bc,64510         ; port for keyboard row q-t.
 21+  B4D1 ED 78            in a,(c)            ; read keyboard.
 22+  B4D3 47               ld b,a              ; store result in b register.
 23+  B4D4 CB 18            rr b                ; check outermost key (q).
 24+  B4D6 D2 F5 B4         jp nc,control_keyboard1
 25+  B4D9 01 FE FD         ld bc,65022         ; port for keyboard row a-f.
 26+  B4DC ED 78            in a,(c)            ; read keyboard.
 27+  B4DE 47               ld b,a              ; store result in b register.
 28+  B4DF CB 18            rr b                ; check outermost key (a).
 29+  B4E1 D2 F9 B4         jp nc,control_keyboard2
 30+  B4E4 01 FE DF         ld bc,57342         ; port for keyboard row y-p.
 31+  B4E7 ED 78            in a,(c)            ; read keyboard.
 32+  B4E9 47               ld b,a              ; store result in b register.
 33+  B4EA CB 18            rr b                ; check outermost key (p).
 34+  B4EC D2 FD B4         jp nc,control_keyboard3
 35+  B4EF CB 18            rr b                ; check next key.
 36+  B4F1 D2 01 B5         jp nc,control_keyboard4
 37+  B4F4 C9               ret
 38+  B4F5              control_keyboard1:
 39+  B4F5 CD 10 B6         call control_pl_moveup         ; player up.
 40+  B4F8 C9               ret
 41+  B4F9              control_keyboard2:
 42+  B4F9 CD 3F B6         call control_pl_movedown       ; player down.
 43+  B4FC C9               ret
 44+  B4FD              control_keyboard3:
 45+  B4FD CD 9C B6         call control_pl_moveright       ; player left.
 46+  B500 C9               ret
 47+  B501              control_keyboard4:
 48+  B501 CD 6C B6         call control_pl_moveleft       ; player right.
 49+  B504 C9               ret
 50+  B505
 51+  B505              ;
 52+  B505              ; Performs a dig if the counter has reset, otherwise, messes with the graphics
 53+  B505              ;
 54+  B505              control_dig:
 55+  B505 ED 4B 33 B9      ld bc,(player)      ; load the current coords into bc
 56+  B509 C5               push bc
 57+  B50A 3A 35 B9         ld a,(player+2)     ; get the direction
 58+  B50D FE 01            cp 1                ; left
 59+  B50F CA 27 B5         jp z,control_dig0
 60+  B512 FE 02            cp 2                ; right
 61+  B514 CA 3C B5         jp z,control_dig1
 62+  B517 FE 03            cp 3                ; down
 63+  B519 CA 60 B5         jp z,control_dig5
 64+  B51C FE 00            cp 0                ; up
 65+  B51E CA 50 B5         jp z,control_dig4
 66+  B521 21 39 B9         ld hl,player+6
 67+  B524 36 00            ld (hl),0           ; turn off digging
 68+  B526 C9               ret                 ; return
 69+  B527              control_dig0:           ; going left
 70+  B527 CD 31 A9         call sprites_scadd  ; get the current coord
 71+  B52A 62 6B            ld hl,de
 72+  B52C 2B               dec hl              ; move one left
 73+  B52D C1               pop bc              ; get the coords back, subtract 8 from horiz, 8 from vert, store (will be coords of space above dug dirt)
 74+  B52E 78               ld a,b
 75+  B52F 06 08            ld b,8
 76+  B531 90               sub b
 77+  B532 47               ld b,a
 78+  B533 79               ld a,c
 79+  B534 0E 08            ld c,8
 80+  B536 91               sub c
 81+  B537 4F               ld c,a
 82+  B538 C5               push bc
 83+  B539 C3 69 B5         jp control_dig2
 84+  B53C              control_dig1:
 85+  B53C CD 31 A9         call sprites_scadd  ; get the current coord
 86+  B53F 62 6B            ld hl,de
 87+  B541 23               inc hl              ; move one right
 88+  B542 C1               pop bc              ; get the coords back, add 8 to horiz, subtract 8 from vert store (will be coords of space above dug dirt)
 89+  B543 3E 08            ld a,8
 90+  B545 80               add a,b
 91+  B546 47               ld b,a
 92+  B547 79               ld a,c
 93+  B548 0E 08            ld c,8
 94+  B54A 91               sub c
 95+  B54B 4F               ld c,a
 96+  B54C C5               push bc
 97+  B54D C3 69 B5         jp control_dig2
 98+  B550              control_dig4:
 99+  B550 CD 31 A9         call sprites_scadd  ; get the current coord
100+  B553 62 6B            ld hl,de
101+  B555 11 20 00         ld de,32
102+  B558 ED 52            sbc hl,de             ; move one up
103+  B55A C1               pop bc              ; get the coords back, 1 from vert, store, then we'll sub 1 from c for each row later
104+  B55B 0D               dec c
105+  B55C C5               push bc
106+  B55D C3 81 B5         jp control_dig6
107+  B560              control_dig5:
108+  B560 CD 31 A9         call sprites_scadd  ; get the current coord
109+  B563 62 6B            ld hl,de
110+  B565 24               inc h              ; move one down
111+  B566                                     ; not bothered about working out bc here, since rock will never fall if digging down
112+  B566 C3 69 B5         jp control_dig2
113+  B569              ; Normal (not up) digging
114+  B569              control_dig2:
115+  B569 3A 3B B9         ld a,(player+8)     ; get the number of rows we need to overwrite
116+  B56C 47               ld b,a              ; rows to copy over
117+  B56D E5               push hl             ; store the memory location of the first row for later
118+  B56E              control_dig3:
119+  B56E CD B0 B5         call control_getpixelrow
120+  B571 77               ld (hl),a           ; load contents into row
121+  B572 11 20 00         ld de,32
122+  B575 19               add hl,de           ; move to next row
123+  B576 10 F6            djnz control_dig3
124+  B578 E1               pop hl              ; get the original memory location back
125+  B579 11 20 00         ld de,32
126+  B57C ED 52            sbc hl,de           ; move to above row, ready for checking for rock
127+  B57E C3 97 B5         jp control_dig10
128+  B581              ; Special case for going up
129+  B581              control_dig6:
130+  B581 3A 3B B9         ld a,(player+8)     ; get the number of rows we need to overwrite
131+  B584 47               ld b,a              ; rows to copy over
132+  B585              control_dig7:
133+  B585 CD B0 B5         call control_getpixelrow
134+  B588              control_dig12:
135+  B588 77               ld (hl),a           ; load empty into row
136+  B589 11 20 00         ld de,32
137+  B58C ED 52            sbc hl,de           ; move up to next row
138+  B58E 0D               dec c               ; decrease c to track rows
139+  B58F 10 F4            djnz control_dig7
140+  B591 79               ld a,c
141+  B592 D6 07            sub 7
142+  B594 C1               pop bc
143+  B595 4F               ld c,a
144+  B596 C5               push bc             ; store the decreased c coord
145+  B597              control_dig10:
146+  B597 DD 21 3A B9      ld ix,player+7
147+  B59B DD 7E 00         ld a,(ix)     ; get the dig frame number
148+  B59E 3D               dec a
149+  B59F DD 77 00         ld (ix),a
150+  B5A2                  ; call the check for rocks above the removed dirt
151+  B5A2 DD 21 39 B9      ld ix,player+6
152+  B5A6 DD 7E 00         ld a,(ix)     ; get the dig state
153+  B5A9 FE 00            cp 0
154+  B5AB C1               pop bc
155+  B5AC CC 59 BE         call z, rocks_checkforfalling ; make the check if we're no longer digging
156+  B5AF C9               ret
157+  B5B0
158+  B5B0              ;
159+  B5B0              ; Gets a modified pixel row to overwrite dirt - if this is the last dig, overwrite with nothing, otherwise xor to flip the dirt
160+  B5B0              ; Inputs:
161+  B5B0              ; hl - memory of pixel row
162+  B5B0              ; Outputs:
163+  B5B0              ; a - modified row to write
164+  B5B0              ;
165+  B5B0              control_getpixelrow:
166+  B5B0 3A 3A B9         ld a,(player+7)     ; get the dig frame number
167+  B5B3 FE 00            cp 0                ; is this the last dig
168+  B5B5 CA BC B5         jp z,control_getpixelrow1
169+  B5B8 7E               ld a,(hl)           ; if not, xor with 255 to flip it
170+  B5B9 EE FF            xor 255
171+  B5BB C9               ret
172+  B5BC              control_getpixelrow1:
173+  B5BC DD 21 39 B9      ld ix,player+6
174+  B5C0 DD 36 00 00      ld (ix),0           ; turn off digging
175+  B5C4 3E 00            ld a,0              ; if it is, load with empty
176+  B5C6 C9               ret
177+  B5C7
178+  B5C7              ;
179+  B5C7              ; Auto move the player until pixels is zero
180+  B5C7              ;
181+  B5C7              control_automove:
182+  B5C7 5F               ld e,a              ; store the number of pixels left to move in e
183+  B5C8 ED 4B 33 B9      ld bc,(player)      ; load the current coords into bc
184+  B5CC 21 35 B9         ld hl,player+2      ; get the direction
185+  B5CF 7E               ld a,(hl)
186+  B5D0 FE 03            cp 3                ; down
187+  B5D2 CA E6 B5         jp z,control_automove3  ; don't need to do anything
188+  B5D5 FE 00            cp 0                ; going up
189+  B5D7 CA F2 B5         jp z,control_automove2
190+  B5DA FE 01            cp 1                ; going left?
191+  B5DC CA FE B5         jp z,control_automove0
192+  B5DF 78               ld a,b
193+  B5E0 3C               inc a               ; if we're going right, increment a twice for two pixels
194+  B5E1 3C               inc a
195+  B5E2 47               ld b,a
196+  B5E3 C3 02 B6         jp control_automove1
197+  B5E6              control_automove3:
198+  B5E6 79               ld a,c
199+  B5E7 3C               inc a
200+  B5E8 3C               inc a               ; if we're going down, increment twice
201+  B5E9 4F               ld c,a
202+  B5EA FE 90            cp 144
203+  B5EC CC CA B6         call z, control_scroll_down
204+  B5EF C3 02 B6         jp control_automove1
205+  B5F2              control_automove2:
206+  B5F2 79               ld a,c
207+  B5F3 3D               dec a
208+  B5F4 3D               dec a               ; if we're going up, decrement twice
209+  B5F5 4F               ld c,a
210+  B5F6 FE 60            cp 96
211+  B5F8 CC D7 B6         call z, control_scroll_up
212+  B5FB C3 02 B6         jp control_automove1
213+  B5FE              control_automove0:
214+  B5FE 78               ld a,b
215+  B5FF 3D               dec a               ; if we're going left, decrement a twice
216+  B600 3D               dec a
217+  B601 47               ld b,a
218+  B602              control_automove1:
219+  B602 ED 43 33 B9      ld (player),bc      ; and back to player
220+  B606 7B               ld a,e              ; now get the pixel count back
221+  B607 3D               dec a               ; decrease by one
222+  B608 21 38 B9         ld hl,player+5
223+  B60B 77               ld (hl),a           ; copy back
224+  B60C CD BD BA         call player_justmoved
225+  B60F C9               ret
226+  B610
227+  B610              ;
228+  B610              ; Moves the player up
229+  B610              ;
230+  B610              control_pl_moveup:
231+  B610 C5               push bc
232+  B611 ED 4B 33 B9      ld bc,(player)          ; get the current coords, b horiz, c vert
233+  B615 79               ld a,c                  ; load c into the acc
234+  B616 FE 18            cp 24
235+  B618 CA 38 B6         jp z,control_pl_moveup0 ; are we at the edge of the screen
236+  B61B FE 60            cp 96
237+  B61D CC D7 B6         call z, control_scroll_up
238+  B620 CD 77 B8         call movement_checkcanmove_up ; check we can move up, e will be 1 if we can
239+  B623 F5               push af
240+  B624 7B               ld a,e                  ; put e in a
241+  B625 FE 00            cp 0
242+  B627 CA 37 B6         jp z,control_pl_moveup1 ; don't move if we can't
243+  B62A F1               pop af
244+  B62B D6 01            sub 1                   ; subtract 1
245+  B62D D6 01            sub 1                   ; subtract 1
246+  B62F 4F               ld c,a                  ; load back to c
247+  B630 ED 43 33 B9      ld (player),bc          ; load back to player
248+  B634 C3 38 B6         jp control_pl_moveup0
249+  B637              control_pl_moveup1:
250+  B637 F1               pop af                  ; restore af if needed
251+  B638              control_pl_moveup0:
252+  B638 3E 00            ld a,0
253+  B63A 32 35 B9         ld (player+2),a        ; set direction to up
254+  B63D C1               pop bc
255+  B63E C9               ret
256+  B63F              ;
257+  B63F              ; Moves the player down
258+  B63F              ;
259+  B63F              control_pl_movedown:
260+  B63F C5               push bc
261+  B640 ED 4B 33 B9      ld bc,(player)          ; get the current coords, b horiz, c vert
262+  B644 79               ld a,c                  ; load c into the acc
263+  B645 FE E0            cp 224
264+  B647 CA 65 B6         jp z,control_pl_movedown0 ; are we at the edge of the screen
265+  B64A FE 80            cp 128
266+  B64C CC CA B6         call z, control_scroll_down
267+  B64F CD 4B B8         call movement_checkcanmove_down ; check we can move down, e will be 1 if we can
268+  B652 F5               push af
269+  B653 7B               ld a,e                  ; put e in a
270+  B654 FE 00            cp 0
271+  B656 CA 64 B6         jp z,control_pl_movedown1 ; don't move if we can't
272+  B659 F1               pop af
273+  B65A 3C               inc a                   ; add 1
274+  B65B 3C               inc a                   ; add 1
275+  B65C 4F               ld c,a                  ; load back to c
276+  B65D ED 43 33 B9      ld (player),bc          ; load back to player
277+  B661 C3 65 B6         jp control_pl_movedown0
278+  B664              control_pl_movedown1:
279+  B664 F1               pop af                  ; restore af if needed
280+  B665              control_pl_movedown0:
281+  B665 3E 03            ld a,3
282+  B667 32 35 B9         ld (player+2),a        ; set direction to down
283+  B66A C1               pop bc
284+  B66B C9               ret
285+  B66C              ;
286+  B66C              ; Moves the player left
287+  B66C              ;
288+  B66C              control_pl_moveleft:
289+  B66C C5               push bc
290+  B66D ED 4B 33 B9      ld bc,(player)          ; get the current coords, b horiz, c vert
291+  B671 78               ld a,b                  ; load b into the acc
292+  B672 FE 10            cp 16
293+  B674 CA 95 B6         jp z,control_pl_moveleft0 ; are we at the edge of the screen
294+  B677 CD D6 B8         call movement_checkcanmove_left ; check we can move down, e will be 1 if we can
295+  B67A F5               push af
296+  B67B 7B               ld a,e                  ; put e in a
297+  B67C FE 00            cp 0
298+  B67E CA 94 B6         jp z,control_pl_moveleft1 ; don't move if we can't
299+  B681 21 38 B9         ld hl,player+5          ; need to store the amount of pixels still left to move in the player status
300+  B684 3E 03            ld a,3
301+  B686 77               ld (hl),a
302+  B687 F1               pop af
303+  B688 D6 01            sub 1                    ; subtract 2
304+  B68A D6 01            sub 1
305+  B68C 47               ld b,a                  ; load back to c
306+  B68D ED 43 33 B9      ld (player),bc          ; load back to player
307+  B691 C3 95 B6         jp control_pl_moveleft0
308+  B694              control_pl_moveleft1:
309+  B694 F1               pop af
310+  B695              control_pl_moveleft0:
311+  B695 3E 01            ld a,1
312+  B697 32 35 B9         ld (player+2),a        ; set direction to left
313+  B69A C1               pop bc
314+  B69B C9               ret
315+  B69C              ;
316+  B69C              ; Moves the player right
317+  B69C              ;
318+  B69C              control_pl_moveright:
319+  B69C C5               push bc
320+  B69D ED 4B 33 B9      ld bc,(player)          ; get the current coords, b horiz, c vert
321+  B6A1 78               ld a,b                  ; load b into the acc
322+  B6A2 FE F0            cp 240
323+  B6A4 CA C3 B6         jp z,control_pl_moveright0 ; are we at the edge of the screen
324+  B6A7 CD AA B8         call movement_checkcanmove_right ; check we can move down, e will be 1 if we can
325+  B6AA F5               push af
326+  B6AB 7B               ld a,e                  ; put e in a
327+  B6AC FE 00            cp 0
328+  B6AE CA C2 B6         jp z,control_pl_moveright1 ; don't move if we can't
329+  B6B1 21 38 B9         ld hl,player+5          ; need to store the amount of pixels still left to move in the player status
330+  B6B4 3E 03            ld a,3
331+  B6B6 77               ld (hl),a
332+  B6B7 F1               pop af
333+  B6B8 3C               inc a                   ; add 2
334+  B6B9 3C               inc a
335+  B6BA 47               ld b,a                  ; load back to b
336+  B6BB ED 43 33 B9      ld (player),bc          ; load back to player
337+  B6BF C3 C3 B6         jp control_pl_moveright0
338+  B6C2              control_pl_moveright1:
339+  B6C2 F1               pop af                  ; restore af if needed
340+  B6C3              control_pl_moveright0:
341+  B6C3 3E 02            ld a,2
342+  B6C5 32 35 B9         ld (player+2),a        ; set direction to right
343+  B6C8 C1               pop bc
344+  B6C9 C9               ret
345+  B6CA
346+  B6CA              ;
347+  B6CA              ; Scrolls the screen down
348+  B6CA              ;
349+  B6CA              control_scroll_down:
350+  B6CA F5               push af
351+  B6CB 3E 08            ld a,8
352+  B6CD 32 15 A7         ld (screen_offset),a
353+  B6D0 F1               pop af
354+  B6D1 21 C4 A5         ld hl,buffer_updateall
355+  B6D4 36 01            ld (hl),1         ; flag as screen needing update
356+  B6D6 C9               ret
357+  B6D7
358+  B6D7              ;
359+  B6D7              ; Scrolls the screen up
360+  B6D7              ;
361+  B6D7              control_scroll_up:
362+  B6D7 F5               push af
363+  B6D8 3E 00            ld a,0
364+  B6DA 32 15 A7         ld (screen_offset),a
365+  B6DD F1               pop af
366+  B6DE 21 C4 A5         ld hl,buffer_updateall
367+  B6E1 36 01            ld (hl),1         ; flag as screen needing update
368+  B6E3 C9               ret
369+  B6E4
370+  B6E4
371+  B6E4
372+  B6E4
# file closed: game/control.asm
 37   B6E4                  include "game\movement.asm"
# file opened: game/movement.asm
  1+  B6E4              ;
  2+  B6E4              ; Checks the contents of a cell are empty - ie, all pixel rows are zero
  3+  B6E4              ; Inputs:
  4+  B6E4              ; hl - memory location of top pixel row
  5+  B6E4              ; bc - screen coords, b horiz, c vert
  6+  B6E4              ; Outputs:
  7+  B6E4              ; e - 0 if not empty, 1 if empty
  8+  B6E4              ;
  9+  B6E4              movement_spaceisempty:
 10+  B6E4 C5               push bc
 11+  B6E5 E5               push hl
 12+  B6E6 CD 0E B7         call movement_spaceisgem        ; check if space is a gem
 13+  B6E9 E1               pop hl
 14+  B6EA C1               pop bc
 15+  B6EB 7B               ld a,e
 16+  B6EC FE 01            cp 1
 17+  B6EE C8               ret z                           ; if e is 1, space is a gem so can move here, return
 18+  B6EF 3E 08            ld a,8                          ; 8 rows to check
 19+  B6F1              movement_spaceisempty0:
 20+  B6F1 08               ex af,af'                       ; store the loop counter
 21+  B6F2 7E               ld a,(hl)                       ; get current pixel row
 22+  B6F3 FE 00            cp 0
 23+  B6F5 C2 09 B7         jp nz, movement_spaceisempty1    ; row is not empty, can't move here
 24+  B6F8 79               ld a,c                          ; load the vertical coord
 25+  B6F9 3C               inc a                           ; next row down
 26+  B6FA 11 20 00         ld de,32
 27+  B6FD 19               add hl,de                       ; otherwise, just go one down for hl, which means add 32, because of course
 28+  B6FE 4F               ld c,a                          ; copy vert coord back to c
 29+  B6FF 08               ex af,af'                       ; get loop counter back
 30+  B700 3D               dec a                           ; decrease loop counter
 31+  B701 C2 F1 B6         jp nz, movement_spaceisempty0
 32+  B704 16 00            ld d,0
 33+  B706 1E 01            ld e,1                          ; got to end, so space is empty
 34+  B708 C9               ret
 35+  B709              movement_spaceisempty1:
 36+  B709 16 00            ld d,0
 37+  B70B 1E 00            ld e,0                          ; returning false, ie space not empty
 38+  B70D C9               ret
 39+  B70E
 40+  B70E              ;
 41+  B70E              ; Check if a space contains a gem
 42+  B70E              ; Inputs:
 43+  B70E              ; bc - screen coords
 44+  B70E              ; Outputs:
 45+  B70E              ; e = 1 if gem
 46+  B70E              movement_spaceisgem:
 47+  B70E CD 53 A8         call screen_getcharcoordsfromscreencoords   ; get the char coords we're checking into bc
 48+  B711 21 66 B2         ld hl,level01diamonds           ; check diamonds first
 49+  B714              movement_spaceisgem0:
 50+  B714 5E 23 56 2B      ld de,(hl)                      ; get gem coords into de
 51+  B718 7B               ld a,e                          ; check for end of data
 52+  B719 FE FF            cp 255
 53+  B71B CA 36 B7         jp z,movement_spaceisgem1       ; if yes, done with diamonds
 54+  B71E 23               inc hl
 55+  B71F 23               inc hl                          ; move to state
 56+  B720 7E               ld a,(hl)
 57+  B721 23               inc hl
 58+  B722 23               inc hl
 59+  B723 23               inc hl                          ; get to next
 60+  B724 FE 01            cp 1                            ; check if collected
 61+  B726 CA 14 B7         jp z,movement_spaceisgem0       ; if yes, move to next diamond
 62+  B729 7B               ld a,e                          ; load e again
 63+  B72A B9               cp c                            ; otherwise, compare c with e
 64+  B72B C2 14 B7         jp nz,movement_spaceisgem0      ; if different, move to next diamond
 65+  B72E 7A               ld a,d                          ; get d coord
 66+  B72F B8               cp b                            ; compare b with d
 67+  B730 C2 14 B7         jp nz,movement_spaceisgem0      ; if different, move to next diamond
 68+  B733 1E 01            ld e,1                          ; otherwise, exit with e = 1
 69+  B735 C9               ret
 70+  B736              movement_spaceisgem1:
 71+  B736 21 76 B2         ld hl,level01gems              ; check gems
 72+  B739              movement_spaceisgem2:
 73+  B739 5E 23 56 2B      ld de,(hl)                      ; get gem coords into de
 74+  B73D 7B               ld a,e                          ; check for end of data
 75+  B73E FE FF            cp 255
 76+  B740 CA 5B B7         jp z,movement_spaceisgem3       ; if yes, done with gems
 77+  B743 23               inc hl
 78+  B744 23               inc hl                          ; move to state
 79+  B745 7E               ld a,(hl)
 80+  B746 23               inc hl
 81+  B747 23               inc hl
 82+  B748 23               inc hl                          ; get to next
 83+  B749 FE 01            cp 1                            ; check if collected
 84+  B74B CA 39 B7         jp z,movement_spaceisgem2       ; if yes, move to next diamond
 85+  B74E 7B               ld a,e                          ; load e again
 86+  B74F B9               cp c                            ; otherwise, compare c with e
 87+  B750 C2 39 B7         jp nz,movement_spaceisgem2      ; if different, move to next gem
 88+  B753 7A               ld a,d                          ; get d coord
 89+  B754 B8               cp b                            ; compare b with d
 90+  B755 C2 39 B7         jp nz,movement_spaceisgem2      ; if different, move to next gem
 91+  B758 1E 01            ld e,1                          ; otherwise, exit with e = 1
 92+  B75A C9               ret
 93+  B75B              movement_spaceisgem3:
 94+  B75B 1E 00            ld e,0                          ; nothing found, return e = 0
 95+  B75D C9               ret
 96+  B75E
 97+  B75E              ;
 98+  B75E              ; Checks the line of a cell below is empty - ie, first pixel rows is zero
 99+  B75E              ; Inputs:
100+  B75E              ; hl - memory location of top pixel row
101+  B75E              ; bc - screen coords, b horiz, c vert
102+  B75E              ; Outputs:
103+  B75E              ; e - 0 if not empty, 1 if empty
104+  B75E              ;
105+  B75E              movement_linebelowisempty:
106+  B75E C5               push bc
107+  B75F E5               push hl
108+  B760 CD 0E B7         call movement_spaceisgem        ; check if space is a gem
109+  B763 E1               pop hl
110+  B764 C1               pop bc
111+  B765 7B               ld a,e
112+  B766 FE 01            cp 1
113+  B768 C8               ret z                           ; if e is 1, space is a gem so can move here, return
114+  B769 7E               ld a,(hl)                       ; get current pixel row
115+  B76A FE 00            cp 0
116+  B76C C2 74 B7         jp nz, movement_linebelowisempty1    ; row is not empty, can't move here
117+  B76F 16 00            ld d,0
118+  B771 1E 01            ld e,1                          ; got to end, so space is empty
119+  B773 C9               ret
120+  B774              movement_linebelowisempty1:
121+  B774 16 00            ld d,0
122+  B776 1E 00            ld e,0                          ; returning false, ie space not empty
123+  B778 C9               ret
124+  B779
125+  B779              ;
126+  B779              ; Checks the line of a cell above is empty - ie, last pixel rows are zero
127+  B779              ; Inputs:
128+  B779              ; hl - memory location of top pixel row
129+  B779              ; bc - screen coords, b horiz, c vert
130+  B779              ; Outputs:
131+  B779              ; e - 0 if not empty, 1 if empty
132+  B779              ;
133+  B779              movement_lineaboveisempty:
134+  B779 C5               push bc
135+  B77A E5               push hl
136+  B77B CD 0E B7         call movement_spaceisgem        ; check if space is a gem
137+  B77E E1               pop hl
138+  B77F C1               pop bc
139+  B780 7B               ld a,e
140+  B781 FE 01            cp 1
141+  B783 C8               ret z
142+  B784 7E               ld a,(hl)                       ; get current pixel row
143+  B785 FE 00            cp 0
144+  B787 C2 8F B7         jp nz, movement_lineaboveisempty1    ; row is not empty, can't move here
145+  B78A 16 00            ld d,0
146+  B78C 1E 01            ld e,1                          ; got to end, so space is empty
147+  B78E C9               ret
148+  B78F              movement_lineaboveisempty1:
149+  B78F 16 00            ld d,0
150+  B791 1E 00            ld e,0                          ; returning false, ie space not empty
151+  B793 C9               ret
152+  B794
153+  B794              ;
154+  B794              ; Checks the contents of a cell are diggable - ie, all pixel rows are dirt or empty
155+  B794              ; Inputs:
156+  B794              ; hl - memory location of top pixel row
157+  B794              ; bc - screen coords, b horiz, c vert
158+  B794              ; Outputs:
159+  B794              ; none - puts player into digging mode
160+  B794              ;
161+  B794              movement_spaceisdiggable:
162+  B794 3E 08            ld a,8                          ; 8 rows to check
163+  B796              movement_spaceisdiggable0:
164+  B796 08               ex af,af'                       ; store the loop counter
165+  B797 7E               ld a,(hl)                       ; get current pixel row
166+  B798 FE 00            cp 0
167+  B79A CA AA B7         jp z, movement_spaceisdiggable2  ; row is empty, can dig here
168+  B79D FE 55            cp 85
169+  B79F CA AA B7         jp z, movement_spaceisdiggable2  ; row is dirt, can dig here
170+  B7A2 FE AA            cp 170
171+  B7A4 CA AA B7         jp z, movement_spaceisdiggable2  ; row is dirt, can dig here
172+  B7A7 C3 C2 B7         jp movement_spaceisdiggable1     ; otherwise, stop checking
173+  B7AA              movement_spaceisdiggable2:
174+  B7AA 79               ld a,c                          ; load the vertical coord
175+  B7AB 3C               inc a                           ; next row down
176+  B7AC 11 20 00         ld de,32
177+  B7AF 19               add hl,de                       ; otherwise, just go one down for hl, which means add 32, because of course
178+  B7B0 4F               ld c,a                          ; copy vert coord back to c
179+  B7B1 08               ex af,af'                       ; get loop counter back
180+  B7B2 3D               dec a                           ; decrease loop counter
181+  B7B3 C2 96 B7         jp nz, movement_spaceisdiggable0
182+  B7B6 21 39 B9         ld hl,player+6
183+  B7B9 36 01            ld (hl),1                       ; set the player into digging mode
184+  B7BB 23               inc hl
185+  B7BC 36 05            ld (hl),5                      ; set the number of frame to dig for
186+  B7BE 23               inc hl
187+  B7BF 36 08            ld (hl),8                       ; set the number of pixels to dig
188+  B7C1 C9               ret
189+  B7C2              movement_spaceisdiggable1:
190+  B7C2 21 39 B9         ld hl,player+6
191+  B7C5 36 00            ld (hl),0                       ; set the player out of digging mode
192+  B7C7 C9               ret
193+  B7C8
194+  B7C8              ;
195+  B7C8              ; Checks the contents of a cell below are diggable - ie, at least one pixel row has dirt. If the first one isn't dirt, stop
196+  B7C8              ; Inputs:
197+  B7C8              ; hl - memory location of top pixel row
198+  B7C8              ; bc - screen coords, b horiz, c vert
199+  B7C8              ; Outputs:
200+  B7C8              ; none - puts player into digging mode
201+  B7C8              ;
202+  B7C8              movement_spacebelowisdiggable:
203+  B7C8 7E               ld a,(hl)                       ; get first pixel row
204+  B7C9 FE 55            cp 85
205+  B7CB CA D6 B7         jp z, movement_spacebelowisdiggable3  ; row is dirt, can dig here
206+  B7CE FE AA            cp 170
207+  B7D0 CA D6 B7         jp z, movement_spacebelowisdiggable3  ; row is dirt, can dig here
208+  B7D3 C3 C2 B7         jp movement_spaceisdiggable1    ; the first row is not dirt, so don't bother checking the rest, can't dig
209+  B7D6              movement_spacebelowisdiggable3:
210+  B7D6 3E 08            ld a,8                          ; rows to check
211+  B7D8 1E 00            ld e,0                          ; count of rows to dig
212+  B7DA              movement_spacebelowisdiggable0:
213+  B7DA 08               ex af,af'                       ; store the loop counter
214+  B7DB 7E               ld a,(hl)                       ; get current pixel row
215+  B7DC FE 55            cp 85
216+  B7DE CA E9 B7         jp z, movement_spacebelowisdiggable4  ; row is dirt, can dig here
217+  B7E1 FE AA            cp 170
218+  B7E3 CA E9 B7         jp z, movement_spacebelowisdiggable4  ; row is dirt, can dig here
219+  B7E6 C3 F8 B7         jp movement_spacebelowisdiggable5     ; don't count this row and stop counting
220+  B7E9              movement_spacebelowisdiggable4:
221+  B7E9 1C               inc e                           ; inc count of rows to dig
222+  B7EA              movement_spacebelowisdiggable2:
223+  B7EA 79               ld a,c                          ; load the vertical coord
224+  B7EB 3C               inc a                           ; next row down
225+  B7EC D5               push de                         ; need e for later
226+  B7ED 11 20 00         ld de,32
227+  B7F0 19               add hl,de                       ; otherwise, just go one down for hl, which means add 32, because of course
228+  B7F1 4F               ld c,a                          ; copy vert coord back to c
229+  B7F2 D1               pop de                          ; get e back
230+  B7F3 08               ex af,af'                       ; get loop counter back
231+  B7F4 3D               dec a                           ; incease loop counter
232+  B7F5 C2 DA B7         jp nz, movement_spacebelowisdiggable0
233+  B7F8              movement_spacebelowisdiggable5:
234+  B7F8 21 39 B9         ld hl,player+6
235+  B7FB 36 01            ld (hl),1                       ; set the player into digging mode
236+  B7FD 23               inc hl
237+  B7FE 36 03            ld (hl),3                      ; set the number of frame to dig for
238+  B800 23               inc hl
239+  B801 73               ld (hl),e                       ; set the number of pixels to dig
240+  B802 C9               ret
241+  B803              movement_spacebelowisdiggable1:
242+  B803 21 39 B9         ld hl,player+6
243+  B806 36 00            ld (hl),0                       ; set the player out of digging mode
244+  B808 C9               ret
245+  B809
246+  B809              ;
247+  B809              ; Checks the contents of a cell above are diggable - ie, at least one pixel row has dirt. If the first one isn't dirt, stop
248+  B809              ; Inputs:
249+  B809              ; hl - memory location of top pixel row
250+  B809              ; bc - screen coords, b horiz, c vert
251+  B809              ; Outputs:
252+  B809              ; none - puts player into digging mode
253+  B809              ;
254+  B809              movement_spaceaboveisdiggable:
255+  B809 7E               ld a,(hl)                       ; get first pixel row
256+  B80A FE 55            cp 85
257+  B80C CA 17 B8         jp z, movement_spaceaboveisdiggable3  ; row is dirt, can dig here
258+  B80F FE AA            cp 170
259+  B811 CA 17 B8         jp z, movement_spaceaboveisdiggable3  ; row is dirt, can dig here
260+  B814 C3 C2 B7         jp movement_spaceisdiggable1    ; the first row is not dirt, so don't bother checking the rest, can't dig
261+  B817              movement_spaceaboveisdiggable3:
262+  B817 3E 08            ld a,8                          ; rows to check
263+  B819 1E 00            ld e,0                          ; count of rows to dig
264+  B81B              movement_spaceaboveisdiggable0:
265+  B81B 08               ex af,af'                       ; store the loop counter
266+  B81C 7E               ld a,(hl)                       ; get current pixel row
267+  B81D FE 55            cp 85
268+  B81F CA 2A B8         jp z, movement_spaceaboveisdiggable4  ; row is dirt, can dig here
269+  B822 FE AA            cp 170
270+  B824 CA 2A B8         jp z, movement_spaceaboveisdiggable4  ; row is dirt, can dig here
271+  B827 C3 3A B8         jp movement_spaceaboveisdiggable5     ; don't count this row and stop counting
272+  B82A              movement_spaceaboveisdiggable4:
273+  B82A 1C               inc e                           ; inc count of rows to dig
274+  B82B              movement_spaceaboveisdiggable2:
275+  B82B 79               ld a,c                          ; load the vertical coord
276+  B82C 3D               dec a                           ; next row up
277+  B82D D5               push de                         ; need e for later
278+  B82E 11 20 00         ld de,32
279+  B831 ED 52            sbc hl,de                       ; otherwise, just go one up for hl, which means sub 32, because of course
280+  B833 4F               ld c,a                          ; copy vert coord back to c
281+  B834 D1               pop de                          ; get e back
282+  B835 08               ex af,af'                       ; get loop counter back
283+  B836 3D               dec a                           ; incease loop counter
284+  B837 C2 1B B8         jp nz, movement_spaceaboveisdiggable0
285+  B83A              movement_spaceaboveisdiggable5:
286+  B83A 21 39 B9         ld hl,player+6
287+  B83D 36 01            ld (hl),1                       ; set the player into digging mode
288+  B83F 23               inc hl
289+  B840 36 05            ld (hl),5                       ; set the number of frame to dig for
290+  B842 23               inc hl
291+  B843 73               ld (hl),e                       ; set the number of pixels to dig
292+  B844 C9               ret
293+  B845              movement_spaceaboveisdiggable1:
294+  B845 21 39 B9         ld hl,player+6
295+  B848 36 00            ld (hl),0                       ; set the player out of digging mode
296+  B84A C9               ret
297+  B84B
298+  B84B              ;
299+  B84B              ; Checks if the player can move down
300+  B84B              ; Inputs:
301+  B84B              ; bc - player coords, b horiz, c vert
302+  B84B              ; Outputs:
303+  B84B              ; de - 1 can move
304+  B84B              movement_checkcanmove_down:
305+  B84B F5               push af
306+  B84C C5               push bc
307+  B84D CD 31 A9         call sprites_scadd              ; get the memory location of cell into de
308+  B850 62 6B            ld hl,de                        ; look at cell directly underneath (add 256)
309+  B852 24               inc h                       ; memory location of cell beneath now in hl
310+  B853 3E 08            ld a,8                       ; look below
311+  B855 81               add c
312+  B856 4F               ld c,a
313+  B857 CD 5E B7         call movement_linebelowisempty       ; check space is empty
314+  B85A 7B               ld a,e                          ; check space empty flag
315+  B85B FE 00            cp 0
316+  B85D CA 66 B8         jp z, movement_checkcanmove_down1 ; can't move
317+  B860 CD BD BA         call player_justmoved
318+  B863 C1               pop bc
319+  B864 F1               pop af
320+  B865 C9               ret
321+  B866              movement_checkcanmove_down1:
322+  B866 C1               pop bc
323+  B867 CD 31 A9         call sprites_scadd              ; get the memory location of cell into de
324+  B86A 62 6B            ld hl,de                        ; look at cell directly underneath (add 256)
325+  B86C 24               inc h
326+  B86D C5               push bc
327+  B86E CD C8 B7         call movement_spacebelowisdiggable    ; can't move here, but can we dig
328+  B871 11 00 00         ld de,0
329+  B874 C1               pop bc
330+  B875 F1               pop af
331+  B876 C9               ret
332+  B877
333+  B877              ;
334+  B877              ; Checks if the player can move up
335+  B877              ; Inputs:
336+  B877              ; bc - player coords, b horiz, c vert
337+  B877              ; Outputs:
338+  B877              ; de - 1 can move
339+  B877              movement_checkcanmove_up:
340+  B877 F5               push af
341+  B878 C5               push bc
342+  B879 CD 31 A9         call sprites_scadd              ; get the memory location of cell into de
343+  B87C 62 6B            ld hl,de                        ; look at cell directly above (subtract 32)
344+  B87E 11 20 00         ld de,32
345+  B881 ED 52            sbc hl,de                       ; memory location of line above now in hl
346+  B883 0D               dec c                           ; look above
347+  B884 CD 79 B7         call movement_lineaboveisempty       ; check space is empty
348+  B887 7B               ld a,e                          ; check space empty flag
349+  B888 FE 00            cp 0
350+  B88A CA 95 B8         jp z, movement_checkcanmove_up1 ; can't move
351+  B88D 1E 01            ld e,1
352+  B88F CD BD BA         call player_justmoved
353+  B892 C1               pop bc
354+  B893 F1               pop af
355+  B894 C9               ret
356+  B895              movement_checkcanmove_up1:
357+  B895 C1               pop bc
358+  B896 CD 31 A9         call sprites_scadd              ; get the memory location of cell into de
359+  B899 62 6B            ld hl,de                        ; look at cell directly above (subtract 32)
360+  B89B 11 20 00         ld de,32
361+  B89E ED 52            sbc hl,de                       ; memory location of line above now in hl
362+  B8A0 C5               push bc
363+  B8A1 CD 09 B8         call movement_spaceaboveisdiggable    ; can't move here, but can we dig
364+  B8A4 11 00 00         ld de,0
365+  B8A7 C1               pop bc
366+  B8A8 F1               pop af
367+  B8A9 C9               ret
368+  B8AA
369+  B8AA              ;
370+  B8AA              ; Checks if the player can move right
371+  B8AA              ; Inputs:
372+  B8AA              ; bc - player coords, b horiz, c vert
373+  B8AA              ; Outputs:
374+  B8AA              ; de - 1 can move
375+  B8AA              movement_checkcanmove_right:
376+  B8AA F5               push af
377+  B8AB C5               push bc
378+  B8AC CD 31 A9         call sprites_scadd              ; get the memory location of cell into de
379+  B8AF 62 6B            ld hl,de                        ; look at cell directly to the right (add 1)
380+  B8B1 3E 08            ld a,8
381+  B8B3 80               add b                           ; move one cell right
382+  B8B4 47               ld b,a
383+  B8B5 23               inc hl                          ; memory location of cell to the right now in hl
384+  B8B6 CD E4 B6         call movement_spaceisempty       ; check space is empty
385+  B8B9 7B               ld a,e                          ; check space empty flag
386+  B8BA FE 00            cp 0
387+  B8BC CA C5 B8         jp z, movement_checkcanmove_right1 ; can't move
388+  B8BF CD BD BA         call player_justmoved
389+  B8C2 C1               pop bc
390+  B8C3 F1               pop af
391+  B8C4 C9               ret
392+  B8C5              movement_checkcanmove_right1:
393+  B8C5 C1               pop bc
394+  B8C6 CD 31 A9         call sprites_scadd              ; get the memory location of cell into de
395+  B8C9 62 6B            ld hl,de
396+  B8CB 23               inc hl                          ; memory location of cell to the right now in hl
397+  B8CC C5               push bc
398+  B8CD CD 94 B7         call movement_spaceisdiggable    ; can't move here, but can we dig
399+  B8D0 11 00 00         ld de,0
400+  B8D3 C1               pop bc
401+  B8D4 F1               pop af
402+  B8D5 C9               ret
403+  B8D6
404+  B8D6              ;
405+  B8D6              ; Checks if the player can move left
406+  B8D6              ; Inputs:
407+  B8D6              ; bc - player coords, b horiz, c vert
408+  B8D6              ; Outputs:
409+  B8D6              ; de - 1 can move
410+  B8D6              movement_checkcanmove_left:
411+  B8D6 F5               push af
412+  B8D7 C5               push bc
413+  B8D8 CD 31 A9         call sprites_scadd              ; get the memory location of cell into de
414+  B8DB 62 6B            ld hl,de                        ; look at cell directly to the right (add 1)
415+  B8DD 78               ld a,b
416+  B8DE 06 08            ld b,8
417+  B8E0 90               sub b                           ; move one cell left
418+  B8E1 47               ld b,a
419+  B8E2 2B               dec hl                          ; memory location of cell to the right now in hl
420+  B8E3 CD E4 B6         call movement_spaceisempty       ; check space is empty
421+  B8E6 7B               ld a,e                          ; check space empty flag
422+  B8E7 FE 00            cp 0
423+  B8E9 CA F2 B8         jp z, movement_checkcanmove_left1 ; can't move
424+  B8EC CD BD BA         call player_justmoved
425+  B8EF C1               pop bc
426+  B8F0 F1               pop af
427+  B8F1 C9               ret
428+  B8F2              movement_checkcanmove_left1:
429+  B8F2 C1               pop bc
430+  B8F3 CD 31 A9         call sprites_scadd              ; get the memory location of cell into de
431+  B8F6 62 6B            ld hl,de
432+  B8F8 2B               dec hl                          ; memory location of cell to the right now in hl
433+  B8F9 C5               push bc
434+  B8FA CD 94 B7         call movement_spaceisdiggable    ; can't move here, but can we dig
435+  B8FD 11 00 00         ld de,0
436+  B900 C1               pop bc
437+  B901 F1               pop af
438+  B902 C9               ret
# file closed: game/movement.asm
 38   B903                  include "game\game.asm"
# file opened: game/game.asm
  1+  B903              ;
  2+  B903              ; The current frame count, incremented each frame
  3+  B903              ;
  4+  B903              game_framenumber:
  5+  B903 00               defb    0
  6+  B904
  7+  B904              ;
  8+  B904              ; The number of players
  9+  B904              ;
 10+  B904              game_numberplayers:
 11+  B904 01               defb 1
 12+  B905
 13+  B905              ;
 14+  B905              ; The current player
 15+  B905              ;
 16+  B905              game_currentplayer:
 17+  B905 01               defb 1
 18+  B906
 19+  B906              ;
 20+  B906              ; The default number of lives
 21+  B906              ;
 22+  B906              game_numberlives:
 23+  B906 04               defb 4
 24+  B907
 25+  B907              ;
 26+  B907              ; Moves to the next player
 27+  B907              ;
 28+  B907              game_changeplayer:
 29+  B907 3A 05 B9         ld a,(game_currentplayer)
 30+  B90A FE 01            cp 1
 31+  B90C C8               ret z                       ; if just one player, no need to change
 32+  B90D 3D               dec a                       ; otherwise decrease by one
 33+  B90E EE 01            xor 1                       ; xor with one to flip
 34+  B910 3C               inc a                       ; increment
 35+  B911 21 05 B9         ld hl,game_currentplayer
 36+  B914 77               ld (hl),a                   ; store
 37+  B915 C9               ret
 38+  B916
 39+  B916              ;
 40+  B916              ; Sets the number of players at the start of the game
 41+  B916              ; Inputs:
 42+  B916              ; a - number of players
 43+  B916              game_setnumberofplayers:
 44+  B916 21 04 B9         ld hl,game_numberplayers
 45+  B919 77               ld (hl),a
 46+  B91A
 47+  B91A              ;
 48+  B91A              ; Increment frame number by 1
 49+  B91A              ;
 50+  B91A              game_incrementframe:
 51+  B91A 3A 03 B9         ld a,(game_framenumber)
 52+  B91D FE FF            cp 255
 53+  B91F C2 24 B9         jp nz,game_incrementframe0
 54+  B922 3E 00            ld a,0
 55+  B924              game_incrementframe0:
 56+  B924 3C               inc a
 57+  B925 32 03 B9         ld (game_framenumber),a
 58+  B928 C9               ret
 59+  B929
 60+  B929              ;
 61+  B929              ; Returns current frame
 62+  B929              ; Outputs:
 63+  B929              ; a - current frame
 64+  B929              ;
 65+  B929              game_getcurrentframe:
 66+  B929 3A 03 B9         ld a,(game_framenumber)
 67+  B92C C9               ret
 68+  B92D
 69+  B92D              ;
 70+  B92D              ; Resets current frame
 71+  B92D              ;
 72+  B92D              game_resetcurrentframe:
 73+  B92D 21 03 B9         ld hl,game_framenumber
 74+  B930 36 00            ld (hl),0
 75+  B932 C9               ret
# file closed: game/game.asm
 39   B933                  include "game\player.asm"
# file opened: game/player.asm
  1+  B933              ;
  2+  B933              ;   Data for current player
  3+  B933              ;
  4+  B933              player:
  5+  B933 00 00            defb    0,0                 ; horiz,vert (+0,+1)
  6+  B935 02 00 01         defb    2,0,1               ; dir (0 up, 1 left, 2 right, 3 down), frame, frame transition count (+2,+3,+4)
  7+  B938 00               defb    0                   ; auto move remaining (+5)
  8+  B939 00 00 00         defb    0,0,0               ; is digging (0 no), digging count, pixels to di (+6,+7,+8)
  9+  B93C 00               defb    0                   ; lives remaining (+9)
 10+  B93D 00               defb    0                   ; died this life (+10)
 11+  B93E 00 00            defb    0,0                 ; crushed (+11), frames (+12)
 12+  B940 00               defb    0                   ; can finish level, whether can finish level or not (+13)
 13+  B941
 14+  B941              player_location:
 15+  B941 00               defb 0                      ; 0 normal, 1 diamond cavern, 2 the pit
 16+  B942
 17+  B942              ;
 18+  B942              ; Works out which part of the screen the player is in
 19+  B942              ; Pit is between 3,9 and 8,9
 20+  B942              ; Diamond cavern is between 11,22 and 22,28
 21+  B942              ;
 22+  B942              player_getlocation:
 23+  B942 ED 4B 33 B9      ld bc,(player)              ; get screen coords
 24+  B946 CD 53 A8         call screen_getcharcoordsfromscreencoords ; get char coords, c horiz
 25+  B949 78               ld a,b                      ; check for pit first
 26+  B94A FE 09            cp 9                        ; if not on this row, not in the pit
 27+  B94C C2 5B B9         jp nz,player_getlocation0
 28+  B94F 79               ld a,c                      ; check horizontal
 29+  B950 FE 08            cp 8
 30+  B952 D2 5B B9         jp nc, player_getlocation0  ; if more than 8, not in the pit
 31+  B955 21 41 B9         ld hl,player_location
 32+  B958 36 02            ld (hl),2                   ; load location with 2, the pit
 33+  B95A C9               ret                         ; done
 34+  B95B              player_getlocation0:            ; check for diamond cavern
 35+  B95B 78               ld a,b                      ; first check vertical
 36+  B95C FE 16            cp 22                       ; if above row 22, then not in cavern
 37+  B95E DA 72 B9         jp c,player_getlocation1
 38+  B961 79               ld a,c                      ; get the horizontal next
 39+  B962 FE 0B            cp 11
 40+  B964 DA 72 B9         jp c,player_getlocation1    ; if less than 11 not in diamond cave
 41+  B967 FE 16            cp 22
 42+  B969 D2 72 B9         jp nc,player_getlocation1    ; if less than 11 not in diamond cave
 43+  B96C 21 41 B9         ld hl,player_location
 44+  B96F 36 01            ld (hl),1                   ; load location with 1, the cavern
 45+  B971 C9               ret
 46+  B972              player_getlocation1:
 47+  B972 21 41 B9         ld hl,player_location
 48+  B975 36 00            ld (hl),0                   ; load location with 2, the pit
 49+  B977 C9               ret                         ; done
 50+  B978
 51+  B978
 52+  B978              ;
 53+  B978              ; Initializes a player at start of game
 54+  B978              ; Copy initial coords, copy lives, copy score
 55+  B978              ;
 56+  B978              player_init_gamestart:
 57+  B978 3A 06 B9         ld a,(game_numberlives)
 58+  B97B 32 07 BA         ld (player1_lives),a
 59+  B97E 32 08 BA         ld (player2_lives),a                        ; set the initial number of lives at game start
 60+  B981
 61+  B981 21 0B BA         ld hl,player1_score+2
 62+  B984 06 06            ld b,6
 63+  B986              player_init_gamestart0:
 64+  B986 36 30            ld (hl),48
 65+  B988 23               inc hl
 66+  B989 10 FB            djnz player_init_gamestart0                 ; zero out player 1 score
 67+  B98B 21 14 BA         ld hl,player2_score+2
 68+  B98E 06 06            ld b,6
 69+  B990              player_init_gamestart1:
 70+  B990 36 30            ld (hl),48
 71+  B992 23               inc hl
 72+  B993 10 FB            djnz player_init_gamestart1                 ; zero out player 2 score
 73+  B995 C9               ret
 74+  B996
 75+  B996              ;
 76+  B996              ; Initializes a player at start of a life
 77+  B996              ; Copy initial coords, copy lives, copy score
 78+  B996              ;
 79+  B996              player_init_lifestart:
 80+  B996 21 38 B9         ld hl,player+5
 81+  B999 06 09            ld b,9                      ; initialise 9 properties
 82+  B99B              player_init_lifestart2:
 83+  B99B 36 00            ld (hl),0
 84+  B99D 23               inc hl
 85+  B99E 10 FB            djnz player_init_lifestart2
 86+  B9A0
 87+  B9A0 21 35 B9         ld hl,player+2              ; initialise some properties
 88+  B9A3 36 02            ld (hl),2
 89+  B9A5 23               inc hl
 90+  B9A6 36 00            ld (hl),0
 91+  B9A8 23               inc hl
 92+  B9A9 36 01            ld (hl),1
 93+  B9AB
 94+  B9AB ED 4B 22 80      ld bc,(init_coord)
 95+  B9AF ED 43 33 B9      ld (player),bc
 96+  B9B3 01 3C B9         ld bc,player+9
 97+  B9B6 3A 07 BA         ld a,(player1_lives)
 98+  B9B9 02               ld (bc),a
 99+  B9BA
100+  B9BA CD 86 C1         call diamonds_init      ; initialise gems
101+  B9BD
102+  B9BD 01 06 00         ld bc,6
103+  B9C0 11 C9 BF         ld de,scores_current+2
104+  B9C3 3A 05 B9         ld a,(game_currentplayer)
105+  B9C6 FE 01            cp 1
106+  B9C8 C2 D1 B9         jp nz,player_init_lifestart0
107+  B9CB 21 0B BA         ld hl,player1_score+2
108+  B9CE C3 D4 B9         jp player_init_lifestart1
109+  B9D1              player_init_lifestart0:
110+  B9D1 21 14 BA         ld hl,player2_score+2
111+  B9D4              player_init_lifestart1:
112+  B9D4 ED B0            ldir
113+  B9D6 C9               ret
114+  B9D7
115+  B9D7              ;
116+  B9D7              ; Finalises a player at end of a life
117+  B9D7              ; Copy lives, copy score
118+  B9D7              ;
119+  B9D7              player_lifeend:
120+  B9D7 01 3C B9         ld bc,player+9
121+  B9DA 0A               ld a,(bc)
122+  B9DB 01 07 BA         ld bc,player1_lives
123+  B9DE 02               ld (bc),a
124+  B9DF CD E3 B9         call player_recordcurrentscore
125+  B9E2 C9               ret
126+  B9E3
127+  B9E3              ;
128+  B9E3              ; Copies the current score in the current
129+  B9E3              ;
130+  B9E3              player_recordcurrentscore:
131+  B9E3 01 06 00         ld bc,6                  ; copy current score back to correct player
132+  B9E6 21 C9 BF         ld hl,scores_current+2
133+  B9E9 3A 05 B9         ld a,(game_currentplayer)
134+  B9EC FE 01            cp 1
135+  B9EE C2 F7 B9         jp nz,player_lifeend0
136+  B9F1 11 0B BA         ld de,player1_score+2
137+  B9F4 C3 FA B9         jp player_lifeend1
138+  B9F7              player_lifeend0:
139+  B9F7 11 14 BA         ld de,player2_score+2
140+  B9FA              player_lifeend1:
141+  B9FA ED B0            ldir
142+  B9FC C9               ret
143+  B9FD
144+  B9FD              ;
145+  B9FD              ; Player just died, subtract a life
146+  B9FD              ;
147+  B9FD              player_died:
148+  B9FD 01 3C B9         ld bc,player+9
149+  BA00 0A               ld a,(bc)
150+  BA01 3D               dec a
151+  BA02 02               ld (bc),a
152+  BA03 CD D7 B9         call player_lifeend
153+  BA06 C9               ret
154+  BA07
155+  BA07              ;
156+  BA07              ; Player lives
157+  BA07              ;
158+  BA07              player1_lives:
159+  BA07 03               defb 3
160+  BA08              player2_lives:
161+  BA08 03               defb 3
162+  BA09
163+  BA09              ;
164+  BA09              ; Player scores
165+  BA09              ;
166+  BA09              player1_score:
167+  BA09 04 01 30 30      defb 4,1,'000000',255
167+  BA0D 30 30 30 30
167+  BA11 FF
168+  BA12              player2_score:
169+  BA12 16 01 30 30      defb 22,1,'000000',255
169+  BA16 30 30 30 30
169+  BA1A FF
170+  BA1B
171+  BA1B              ;
172+  BA1B              ; Kills a player this life
173+  BA1B              ;
174+  BA1B              player_killplayer:
175+  BA1B 21 3D B9         ld hl,player+10
176+  BA1E 36 01            ld (hl),1
177+  BA20 C9               ret
178+  BA21
179+  BA21              ;
180+  BA21              ; Crush a player this life
181+  BA21              ;
182+  BA21              player_crushplayer:
183+  BA21 21 3E B9         ld hl,player+11             ; mark as crushed
184+  BA24 36 01            ld (hl),1
185+  BA26 C9               ret
186+  BA27
187+  BA27              player_tankkillplayer
188+  BA27 21 3E B9         ld hl,player+11             ; mark as tanked
189+  BA2A 36 02            ld (hl),2
190+  BA2C C9               ret
191+  BA2D
192+  BA2D              player_zonkplayer
193+  BA2D 21 3E B9         ld hl,player+11             ; mark as zonked (missile)
194+  BA30 36 03            ld (hl),3
195+  BA32 C9               ret
196+  BA33
197+  BA33              ;
198+  BA33              ; Draws the player at the current position or deletes them
199+  BA33              ;
200+  BA33              player_drawplayer:
201+  BA33 3A 35 B9         ld a,(player+2)             ; get the current direction
202+  BA36 FE 03            cp 3
203+  BA38 C2 3D BA         jp nz,player_drawplayer0
204+  BA3B 3E 00            ld a,0                      ; if 3, then down, so set the direction to 0 since the sprite is the same as up
205+  BA3D              player_drawplayer0:
206+  BA3D 5F               ld e,a                      ; store in e
207+  BA3E 3A 3E B9         ld a,(player+11)             ; get the dying flag
208+  BA41 FE 01            cp 1
209+  BA43 CA 55 BA         jp z,player_drawplayer3     ; if it's one, we're being crushed
210+  BA46              player_drawplayer4:
211+  BA46 3A 39 B9         ld a,(player+6)             ; get the dig flag
212+  BA49 FE 01            cp 1
213+  BA4B CA A3 BA         jp z,player_drawplayer1    ; get dig frame
214+  BA4E 3A 36 B9         ld a,(player+3)             ; this is normal movement so get the current frame
215+  BA51 83               add a,e
216+  BA52 C3 A8 BA         jp player_drawplayer2
217+  BA55              player_drawplayer3:
218+  BA55 21 3F B9         ld hl,player+12
219+  BA58 7E               ld a,(hl)                  ; crushing, so get the current anim flag
220+  BA59 FE 00            cp 0
221+  BA5B C2 64 BA         jp nz,player_drawplayer5    ; if this isn't zero, then this isn't the first time round, so do the crush anim
222+  BA5E 3E 64            ld a,100
223+  BA60 77               ld (hl),a                   ; otherwise, load up the anim frames
224+  BA61 C3 46 BA         jp player_drawplayer4       ; and return to the main loop to remove the current frame
225+  BA64              player_drawplayer5:
226+  BA64 3D               dec a
227+  BA65 77               ld (hl),a
228+  BA66 FE 00            cp 0
229+  BA68 CC 1B BA         call z,player_killplayer     ; final animation, so kill the player
230+  BA6B FE 0A            cp 10                         ; play the sound
231+  BA6D CC 1C AD         call z, sound_rockfell
232+  BA70 FE 14            cp 20                        ; check if we should move the rock
233+  BA72 C2 86 BA         jp nz,player_drawplayer8
234+  BA75 D9               exx
235+  BA76 08               ex af,af'
236+  BA77 ED 4B 57 BE      ld bc,(rocks_killerrock)    ; get the coords of the rock that killed us
237+  BA7B 21 33 B3         ld hl,sprites+72
238+  BA7E CD EE A8         call sprites_drawsprite     ; draw a rock over current
239+  BA81 08               ex af,af'
240+  BA82 D9               exx
241+  BA83 C3 9C BA         jp player_drawplayer6       ; continue drawing player
242+  BA86              player_drawplayer8:
243+  BA86 FE 14            cp 20
244+  BA88 D2 9C BA         jp nc,player_drawplayer6    ; if not in last 10 frames, draw as normal
245+  BA8B ED 4B 33 B9      ld bc,(player)
246+  BA8F CD 40 A8         call screen_getattraddressfromscreencoords ; get the attr address into de
247+  BA92 62 6B            ld hl,de
248+  BA94 36 42            ld (hl),66
249+  BA96 21 33 B3         ld hl,sprites+72            ; otherwise, player is rock
250+  BA99 C3 B2 BA         jp player_drawplayer7
251+  BA9C              player_drawplayer6:
252+  BA9C E6 01            and 1                       ; check for odd
253+  BA9E C6 0A            add 10                      ; add 10, to get either 10 or 11
254+  BAA0 C3 A8 BA         jp player_drawplayer2
255+  BAA3              player_drawplayer1:
256+  BAA3 3A 35 B9         ld a,(player+2)             ; digging, get the current direction again, because want all four
257+  BAA6 C6 06            add a,6                     ; add direction to 6 to get frame
258+  BAA8              player_drawplayer2:
259+  BAA8 07               rlca
260+  BAA9 07               rlca
261+  BAAA 07               rlca                        ; multiply by eight
262+  BAAB 6F               ld l,a
263+  BAAC 26 00            ld h,0
264+  BAAE 11 A8 B3         ld de,player_sprite
265+  BAB1 19               add hl,de                   ; load hl with the location of the player sprite data
266+  BAB2              player_drawplayer7:
267+  BAB2 ED 4B 33 B9      ld bc,(player)              ; load bc with the start coords
268+  BAB6 CD EE A8         call sprites_drawsprite     ; call the routine to draw the sprite
269+  BAB9 CD E9 BA         call player_storeupdatedlines ; log updated rows
270+  BABC C9               ret
271+  BABD
272+  BABD
273+  BABD              ;
274+  BABD              ; Runs after the player just moved. Changes animation frame if required
275+  BABD              ;
276+  BABD              player_justmoved:
277+  BABD D9               exx
278+  BABE 3A 37 B9         ld a,(player+4)             ; get the transition count
279+  BAC1 FE 00            cp 0
280+  BAC3 CA C9 BA         jp z, player_justmoved2     ; if zero reset and change the frame
281+  BAC6 C3 E3 BA         jp player_justmoved1       ; otherwise decrease and continue
282+  BAC9              player_justmoved2:
283+  BAC9                  ; reset and change frame in here
284+  BAC9 3E 01            ld a,1
285+  BACB 32 37 B9         ld (player+4),a            ; reset back to whatever
286+  BACE 3A 36 B9         ld a,(player+3)             ; load the frame
287+  BAD1 FE 03            cp 3                       ; flip between 3 and 0
288+  BAD3 C2 DB BA         jp nz, player_justmoved4
289+  BAD6 3E 00            ld a,0
290+  BAD8 C3 DD BA         jp player_justmoved5
291+  BADB              player_justmoved4:
292+  BADB 3E 03            ld a,3
293+  BADD              player_justmoved5:
294+  BADD 32 36 B9         ld (player+3),a           ; save back
295+  BAE0 C3 E7 BA         jp player_justmoved3
296+  BAE3              player_justmoved1:
297+  BAE3                  ; decrease count
298+  BAE3 3D               dec a
299+  BAE4 32 37 B9         ld (player+4),a
300+  BAE7              player_justmoved3:
301+  BAE7 D9               exx;
302+  BAE8 C9               ret
303+  BAE9
304+  BAE9              ;
305+  BAE9              ; Stores the updated rows associated with the player
306+  BAE9              ;
307+  BAE9              player_storeupdatedlines:
308+  BAE9 ED 4B 33 B9      ld bc,(player)          ; get the screen coords into bc
309+  BAED 79               ld a,c                  ; get the player block coords of current block
310+  BAEE E6 F8            and 248                 ; find closest multiple of eight
311+  BAF0 0F               rrca
312+  BAF1 0F               rrca
313+  BAF2 0F               rrca                    ; divide by 8
314+  BAF3 ED 5B 15 A7      ld de,(screen_offset)          ; load the screen offset, this is in rows
315+  BAF7 93               sub e
316+  BAF8 F5               push af
317+  BAF9 CD C5 A5         call buffer_marklineforupdate  ; store current row in updated lines
318+  BAFC F1               pop af
319+  BAFD 3D               dec a
320+  BAFE F5               push af
321+  BAFF CD C5 A5         call buffer_marklineforupdate  ; store line above
322+  BB02 F1               pop af
323+  BB03 3C               inc a
324+  BB04 3C               inc a
325+  BB05 CD C5 A5         call buffer_marklineforupdate  ; store line beneath
326+  BB08 C9               ret
327+  BB09
328+  BB09              ;
329+  BB09              ; Called if the player has collected a diamond. Checks the current coord. If it is the start coord, then return complete
330+  BB09              ; Outputs:
331+  BB09              ; a - 1 for completed level
332+  BB09              player_checkforexit:
333+  BB09 ED 4B 33 B9      ld bc,(player)                 ; get player coords
334+  BB0D ED 5B 22 80      ld de,(init_coord)             ; get start coords
335+  BB11 78               ld a,b
336+  BB12 BA               cp d                         ; compare horiz
337+  BB13 C2 1E BB         jp nz,player_checkforexit1
338+  BB16 79               ld a,c
339+  BB17 BB               cp e                        ; compare vert
340+  BB18 C2 1E BB         jp nz,player_checkforexit1
341+  BB1B              player_checkforexit0:
342+  BB1B 3E 01            ld a,1                       ; hasn't completed
343+  BB1D C9               ret
344+  BB1E              player_checkforexit1:
345+  BB1E 3E 00            ld a,0                       ; has completed
346+  BB20 C9               ret
# file closed: game/player.asm
 40   BB21                  include "game\ship.asm"
# file opened: game/ship.asm
  1+  BB21              ;
  2+  BB21              ; Ship initial position: vert,horiz
  3+  BB21              ;
  4+  BB21              ship_initpos:
  5+  BB21 00 24            defb 0,36
  6+  BB23              ship_initpos2:
  7+  BB23 00 00            defb 0,0
  8+  BB25              ship_frame:
  9+  BB25 00               defb 0
 10+  BB26              ;
 11+  BB26              ; The current memory location
 12+  BB26              ;
 13+  BB26              ship_current_sprite:
 14+  BB26 00 00            defb 0,0
 15+  BB28
 16+  BB28              ship_current_coords:
 17+  BB28 00 00            defb 0,0
 18+  BB2A
 19+  BB2A              ship_process:
 20+  BB2A 3A 3E B9         ld a,(player+11)
 21+  BB2D FE 02            cp 2                        ; has the player been killed by tank?
 22+  BB2F C0               ret nz                      ; do nothing if not
 23+  BB30 CD D7 B6         call control_scroll_up           ; make sure the screen is on the top screen
 24+  BB33 CD A2 BB         call ship_takeoff           ; bye bye
 25+  BB36 CD 1B BA         call player_killplayer      ; killed
 26+  BB39 06 32            ld b,50
 27+  BB3B CD 82 80         call utilities_pauseforframes
 28+  BB3E C9               ret
 29+  BB3F
 30+  BB3F              ;
 31+  BB3F              ;   Draw and land the ship - first move the ship down, then across, drawing the player in the middle
 32+  BB3F              ;
 33+  BB3F              ship_land:
 34+  BB3F ED 4B 21 BB      ld bc,(ship_initpos)
 35+  BB43 ED 43 23 BB      ld (ship_initpos2),bc        ; save the initial position for later use
 36+  BB47 1E 00            ld e,0                      ; store a flag to track first time round
 37+  BB49 06 09            ld b,9                      ; move down 8 pixels
 38+  BB4B              ship_land0:
 39+  BB4B C5               push bc
 40+  BB4C 7B               ld a,e
 41+  BB4D D5               push de                     ; store de for next time round
 42+  BB4E FE 01            cp 1                        ; check first time flag
 43+  BB50 C2 65 BB         jp nz,ship_land1             ; don't draw over previous one if first time
 44+  BB53 CD F9 BB         call ship_draw_full         ; delete old one
 45+  BB56 CD CE BB         call ship_change_frame      ; increment the frame
 46+  BB59 ED 4B 23 BB      ld bc,(ship_initpos2)       ; get the current coords
 47+  BB5D 81 C6 01         add c,1                     ; move down one pixels
 48+  BB60 4F               ld c,a
 49+  BB61 ED 43 23 BB      ld (ship_initpos2),bc
 50+  BB65              ship_land1:
 51+  BB65 CD F9 BB         call ship_draw_full         ; draw the ship
 52+  BB68 CD E3 BB         call ship_draw_screen
 53+  BB6B D1               pop de
 54+  BB6C 1E 01            ld e,1
 55+  BB6E C1               pop bc
 56+  BB6F 10 DA            djnz ship_land0             ; repeat for downward movement
 57+  BB71                  ; done moving down
 58+  BB71                  ; now move across
 59+  BB71 CD 33 BA         call player_drawplayer      ; draw player
 60+  BB74 CD F9 BB         call ship_draw_full         ; delete old one
 61+  BB77 1E 00            ld e,0                      ; store a flag to track first time round
 62+  BB79 06 14            ld b,20                      ; move back 20 pixels pixels
 63+  BB7B              ship_land3:
 64+  BB7B C5               push bc
 65+  BB7C 7B               ld a,e
 66+  BB7D D5               push de                     ; store de for next time round
 67+  BB7E FE 01            cp 1                        ; check first time flag
 68+  BB80 C2 95 BB         jp nz,ship_land2             ; don't draw over previous one if first time
 69+  BB83 CD F9 BB         call ship_draw_full         ; delete old one
 70+  BB86 CD CE BB         call ship_change_frame      ; increment the frame
 71+  BB89 ED 4B 23 BB      ld bc,(ship_initpos2)       ; get the current coords
 72+  BB8D 78               ld a,b
 73+  BB8E D6 01            sub 1                       ; move back one pixels
 74+  BB90 47               ld b,a
 75+  BB91 ED 43 23 BB      ld (ship_initpos2),bc
 76+  BB95              ship_land2:
 77+  BB95 CD F9 BB         call ship_draw_full         ; draw the ship
 78+  BB98 CD E3 BB         call ship_draw_screen       ; draw the frame to screen by clearing the buffer
 79+  BB9B D1               pop de
 80+  BB9C 1E 01            ld e,1                      ; set e to 1 to indicate >1 time
 81+  BB9E C1               pop bc
 82+  BB9F 10 DA            djnz ship_land3             ; repeat for vertical movement
 83+  BBA1 C9               ret
 84+  BBA2
 85+  BBA2              ;
 86+  BBA2              ;   Take off the ship
 87+  BBA2              ;
 88+  BBA2              ship_takeoff:
 89+  BBA2 1E 01            ld e,1                      ; store a flag to track first time round
 90+  BBA4 06 08            ld b,8                      ; move up 8 pixels
 91+  BBA6              ship_takeoff0:
 92+  BBA6 C5               push bc
 93+  BBA7 7B               ld a,e
 94+  BBA8 D5               push de                     ; store de for next time round
 95+  BBA9 FE 01            cp 1                        ; check first time flag
 96+  BBAB C2 C1 BB         jp nz,ship_takeoff1             ; don't draw over previous one if first time
 97+  BBAE ED 4B 23 BB      ld bc,(ship_initpos2)       ; get the current coords
 98+  BBB2 CD F9 BB         call ship_draw_full         ; delete old one
 99+  BBB5 CD CE BB         call ship_change_frame      ; increment the frame
100+  BBB8 ED 4B 23 BB      ld bc,(ship_initpos2)       ; get the current coords
101+  BBBC 0D               dec c                       ; move up one pixels
102+  BBBD ED 43 23 BB      ld (ship_initpos2),bc
103+  BBC1              ship_takeoff1:
104+  BBC1 CD F9 BB         call ship_draw_full         ; draw the ship
105+  BBC4 CD E3 BB         call ship_draw_screen
106+  BBC7 D1               pop de
107+  BBC8 1E 01            ld e,1
108+  BBCA C1               pop bc
109+  BBCB 10 D9            djnz ship_takeoff0             ; repeat for upward movement
110+  BBCD                  ; done moving up
111+  BBCD C9               ret
112+  BBCE
113+  BBCE              ;
114+  BBCE              ; Swap the animation frame between 0 and 32. This will be added to the memory location later
115+  BBCE              ;
116+  BBCE              ship_change_frame:
117+  BBCE F5               push af
118+  BBCF 3A 25 BB         ld a,(ship_frame)
119+  BBD2 FE 00            cp 0
120+  BBD4 CA DC BB         jp z,ship_change_frame0
121+  BBD7 3E 00            ld a,0                      ; flip to 0
122+  BBD9 C3 DE BB         jp ship_change_frame1
123+  BBDC              ship_change_frame0:
124+  BBDC 3E 20            ld a,32                      ; flip to 32
125+  BBDE              ship_change_frame1:
126+  BBDE 32 25 BB         ld (ship_frame),a            ; save the frame
127+  BBE1 F1               pop af
128+  BBE2 C9               ret
129+  BBE3
130+  BBE3              ship_draw_screen:
131+  BBE3 3E 00            ld a,0
132+  BBE5 CD C5 A5         call buffer_marklineforupdate
133+  BBE8 3E 01            ld a,1
134+  BBEA CD C5 A5         call buffer_marklineforupdate
135+  BBED 3E 02            ld a,2
136+  BBEF CD C5 A5         call buffer_marklineforupdate   ; mark the first three rows for update
137+  BBF2 76               halt
138+  BBF3 F3               di
139+  BBF4 CD 5C A6         call buffer_buffertoscreen  ; copy buffer to screen
140+  BBF7 FB               ei                          ; enable interupts
141+  BBF8 C9               ret
142+  BBF9
143+  BBF9              ship_draw_full:
144+  BBF9 21 08 B4         ld hl,ship_sprite
145+  BBFC ED 4B 23 BB      ld bc,(ship_initpos2)         ; load bc with the start coords
146+  BC00 22 26 BB         ld (ship_current_sprite),hl  ; put into memory
147+  BC03 ED 43 28 BB      ld (ship_current_coords),bc  ; put into memory
148+  BC07 CD 26 BC         call ship_draw
149+  BC0A 08               ex af,af'
150+  BC0B 3A 25 BB         ld a,(ship_frame)            ; get the animation frame
151+  BC0E 16 00            ld d,0
152+  BC10 5F               ld e,a
153+  BC11 19               add hl,de
154+  BC12 22 26 BB         ld (ship_current_sprite),hl  ; put into memory
155+  BC15 08               ex af,af'
156+  BC16 ED 4B 23 BB      ld bc,(ship_initpos2)         ; load bc with the start coords
157+  BC1A 81 C6 08         add c,8                      ; move one line down
158+  BC1D 4F               ld c,a
159+  BC1E ED 43 28 BB      ld (ship_current_coords),bc  ; put into memory
160+  BC22 CD 26 BC         call ship_draw
161+  BC25 C9               ret
162+  BC26
163+  BC26              ;
164+  BC26              ; Draw the ship
165+  BC26              ; Inputs:
166+  BC26              ; None, all in memory
167+  BC26              ;
168+  BC26              ship_draw:
169+  BC26 3E 04            ld a,4                              ; 4 pieces per half
170+  BC28              ship_draw0:
171+  BC28 F5               push af
172+  BC29 2A 26 BB         ld hl,(ship_current_sprite)
173+  BC2C ED 4B 28 BB      ld bc,(ship_current_coords)         ; load bc with the start coords
174+  BC30 CD EE A8         call sprites_drawsprite
175+  BC33 2A 26 BB         ld hl,(ship_current_sprite)
176+  BC36 ED 4B 28 BB      ld bc,(ship_current_coords)         ; load bc with the start coords
177+  BC3A 11 08 00         ld de,8
178+  BC3D 19               add hl,de
179+  BC3E 80 C6 08         add b,8
180+  BC41 47               ld b,a
181+  BC42 22 26 BB         ld (ship_current_sprite),hl         ; put into memory
182+  BC45 ED 43 28 BB      ld (ship_current_coords),bc         ; put into memory
183+  BC49 F1               pop af
184+  BC4A 3D               dec a
185+  BC4B FE 00            cp 0
186+  BC4D C2 28 BC         jp nz,ship_draw0
187+  BC50
188+  BC50 C9               ret
189+  BC51
# file closed: game/ship.asm
 41   BC51                  include "game\tank.asm"
# file opened: game/tank.asm
  1+  BC51              ;
  2+  BC51              ; tank initial position: vert,horiz
  3+  BC51              ;
  4+  BC51              tank_initpos:
  5+  BC51 10 D0            defb 16,208
  6+  BC53              tank_initpos2:
  7+  BC53 00 00            defb 0,0
  8+  BC55              tank_frame:
  9+  BC55 00               defb 0
 10+  BC56              tank_anim:
 11+  BC56 11               defb 17
 12+  BC57
 13+  BC57              ;
 14+  BC57              ; The damage countdown
 15+  BC57              ;
 16+  BC57              tank_currentdamage:
 17+  BC57 F0               defb 240
 18+  BC58
 19+  BC58              ;
 20+  BC58              ; The damage coordinate
 21+  BC58              ;
 22+  BC58              tank_currentdamagecoord:
 23+  BC58 16 02            defb 22,2
 24+  BC5A
 25+  BC5A              ;
 26+  BC5A              ; Controls when the tank shoots
 27+  BC5A              ;
 28+  BC5A              tank_count:
 29+  BC5A 00               defb 0
 30+  BC5B
 31+  BC5B              ;
 32+  BC5B              ; Holds the block number of the current damage sprite
 33+  BC5B              ;
 34+  BC5B              tank_damageframe:
 35+  BC5B 00               defb 0
 36+  BC5C
 37+  BC5C              ;
 38+  BC5C              ; The current memory location
 39+  BC5C              ;
 40+  BC5C              tank_current_sprite:
 41+  BC5C 00 00            defb 0,0
 42+  BC5E
 43+  BC5E              tank_current_coords:
 44+  BC5E 00 00            defb 0,0
 45+  BC60
 46+  BC60              ;
 47+  BC60              ; Is the missile displayed - will be 19 if so, 0 if not
 48+  BC60              ;
 49+  BC60              tank_missile_displayed:
 50+  BC60 00               defb 0
 51+  BC61
 52+  BC61              ;
 53+  BC61              ; Initialise the tank
 54+  BC61              ;
 55+  BC61              tank_init:
 56+  BC61 ED 4B 51 BC      ld bc,(tank_initpos)
 57+  BC65 ED 43 53 BC      ld (tank_initpos2),bc       ; save the initial position for later use
 58+  BC69 21 55 BC         ld hl,tank_frame
 59+  BC6C 36 00            ld (hl),0
 60+  BC6E 21 56 BC         ld hl,tank_anim
 61+  BC71 36 11            ld (hl),17
 62+  BC73 21 5B BC         ld hl,tank_damageframe              ; reset tank
 63+  BC76 36 00            ld (hl),0
 64+  BC78 21 5A BC         ld hl,tank_count
 65+  BC7B 36 00            ld (hl),0
 66+  BC7D 21 57 BC         ld hl,tank_currentdamage
 67+  BC80 36 F0            ld (hl),240
 68+  BC82 21 58 BC         ld hl,tank_currentdamagecoord
 69+  BC85 36 16            ld (hl),22
 70+  BC87 23               inc hl
 71+  BC88 36 02            ld (hl),2
 72+  BC8A 21 60 BC         ld hl,tank_missile_displayed
 73+  BC8D 36 00            ld (hl),0
 74+  BC8F
 75+  BC8F C9               ret
 76+  BC90
 77+  BC90              ;
 78+  BC90              ;   Draw and move the tank
 79+  BC90              ;   Start processing at frame 200
 80+  BC90              ;   Don't move if anim is zero
 81+  BC90              ;   Decrement frame if moved
 82+  BC90              ;
 83+  BC90              tank_process:
 84+  BC90 3A 56 BC         ld a,(tank_anim)
 85+  BC93 FE 00            cp 0
 86+  BC95 C2 9C BC         jp nz,tank_process0         ; fire the tank if we've already moved, or jump to movement
 87+  BC98 CD AD BC         call tank_fire
 88+  BC9B C9               ret
 89+  BC9C              tank_process0:
 90+  BC9C CD 29 B9         call game_getcurrentframe   ; get the current frame number into a
 91+  BC9F FE 4B            cp 75
 92+  BCA1 D8               ret c                       ; return if the frame number is below 100
 93+  BCA2 CD C1 BD         call tank_move              ; move tank if not
 94+  BCA5 3A 56 BC         ld a,(tank_anim)
 95+  BCA8 3D               dec a
 96+  BCA9 32 56 BC         ld (tank_anim),a            ; decrease the anim count
 97+  BCAC C9               ret
 98+  BCAD
 99+  BCAD              ;
100+  BCAD              ; Fires the tank
101+  BCAD              ;
102+  BCAD              tank_fire:
103+  BCAD 3A 5A BC         ld a,(tank_count)            ; if not, don't do anything
104+  BCB0 3C               inc a                        ; increment
105+  BCB1 FE 19            cp 25                        ; have we reached fifty
106+  BCB3 C2 B8 BC         jp nz,tank_fire0
107+  BCB6 3E 00            ld a,0                       ; reset if reached fifty
108+  BCB8              tank_fire0:                      ; DEALING WITH A NEW BLOCK
109+  BCB8 32 5A BC         ld (tank_count),a            ; store tank count
110+  BCBB FE 00            cp 0
111+  BCBD CA D4 BC         jp z,tank_fire7              ; If this is zero, fire
112+  BCC0 3A 60 BC         ld a,(tank_missile_displayed) ; is the missile displaying?
113+  BCC3 FE 00            cp 0
114+  BCC5 C8               ret z                       ; don't do anything if not
115+  BCC6 CD 7B BD         call tank_missilegraphic     ; if not, overwrite the previous tank missile
116+  BCC9 3E 00            ld a,0                       ; reset the flag
117+  BCCB 32 60 BC         ld (tank_missile_displayed),a
118+  BCCE 3E 02            ld a,2
119+  BCD0 CD C5 A5         call buffer_marklineforupdate
120+  BCD3 C9               ret                        ; only shoot if we're on 0
121+  BCD4              tank_fire7:
122+  BCD4 3A 57 BC         ld a,(tank_currentdamage)    ; get the damage countdown
123+  BCD7 E6 07            and 7                       ; check if multiple of 8 - house keeping when moving onto a new block
124+  BCD9 C2 0F BD         jp nz,tank_fire1            ; not, so just do a normal frame
125+  BCDC ED 4B 58 BC      ld bc,(tank_currentdamagecoord) ; get the current damage coord into bc
126+  BCE0 79               ld a,c
127+  BCE1 FE 0A            cp 10
128+  BCE3 C2 EA BC         jp nz, tank_fire6
129+  BCE6 CD B3 BD         call tank_killedbytank      ; we're through, so the player has died. Kill them.
130+  BCE9 C9               ret                         ; return if we're through the mountain
131+  BCEA              tank_fire6:
132+  BCEA 3E 0F            ld a,15
133+  BCEC 32 5B BC         ld (tank_damageframe),a     ; reset the damage frame
134+  BCEF 21 EB B2         ld hl,sprites               ; location of the empty block
135+  BCF2 CD 7D A8         call screen_showchar        ; show this character here
136+  BCF5 ED 4B 58 BC      ld bc,(tank_currentdamagecoord) ; get the current damage coord into bc
137+  BCF9 05               dec b                       ; look one above
138+  BCFA CD AA A8         call screen_ischarempty     ; check if it is empty
139+  BCFD ED 4B 58 BC      ld bc,(tank_currentdamagecoord) ; get the current damage coord into bc again
140+  BD01 FE 01            cp 1
141+  BD03 C2 46 BD         jp nz,tank_fire2             ; block above isn't empty, so can't move on, copy down above blocks
142+  BD06 ED 4B 58 BC      ld bc,(tank_currentdamagecoord) ; get the current damage coord into bc
143+  BD0A 0D               dec c
144+  BD0B ED 43 58 BC      ld (tank_currentdamagecoord),bc ; store the coord
145+  BD0F              tank_fire1:                         ; DEALING WITH NORMAL DAMAGE
146+  BD0F ED 4B 58 BC      ld bc,(tank_currentdamagecoord) ; get the current damage coord into bc
147+  BD13 3A 57 BC         ld a,(tank_currentdamage)    ; get the damage countdown
148+  BD16 E6 07            and 7                       ; is it a multiple of 8? only want to do the first line check then
149+  BD18 C2 23 BD         jp nz, tank_fire5
150+  BD1B CD DA A8         call screen_getcharfirstbyte    ; get the first byte to check if this is a slope
151+  BD1E FE FF            cp 255                      ; if it's a full line, it will be 255 and not a slope
152+  BD20 C2 64 BD         jp nz,tank_fire3            ; if it's a slope, handle this differently
153+  BD23              tank_fire5:
154+  BD23 3A 5B BC         ld a,(tank_damageframe)
155+  BD26 CD 97 A8         call screen_getblock        ; get the block data into hl
156+  BD29 CD 7D A8         call screen_showchar        ; show this character here
157+  BD2C 3A 5B BC         ld a,(tank_damageframe)
158+  BD2F 3C               inc a
159+  BD30 32 5B BC         ld (tank_damageframe),a     ; increment the damage block and store
160+  BD33 3A 57 BC         ld a,(tank_currentdamage)    ; get the damage countdown
161+  BD36 3D               dec a
162+  BD37 3D               dec a
163+  BD38 32 57 BC         ld (tank_currentdamage),a     ; decrease current damage by 2 and store
164+  BD3B 3A 60 BC         ld a,(tank_missile_displayed) ; is the missile displaying?
165+  BD3E FE 00            cp 0
166+  BD40 CC 7B BD         call z, tank_missilegraphic
167+  BD43 C3 6D BD         jp tank_fire4
168+  BD46              tank_fire2:                     ; DEALING WITH COPYING BLOCKS FROM ABOVE
169+  BD46 05               dec b
170+  BD47 C5               push bc
171+  BD48 CD C3 A8         call screen_copyblockdown       ; copy the block down
172+  BD4B ED 4B 58 BC      ld bc,(tank_currentdamagecoord) ; get the current damage coord into bc
173+  BD4F C1               pop bc                      ; get the coord we just checked back
174+  BD50 78               ld a,b
175+  BD51 FE 00            cp 0
176+  BD53 CA 0F BD         jp z,tank_fire1             ; if we're at the top of the screen, don't check any more
177+  BD56 C5               push bc
178+  BD57 05               dec b
179+  BD58 CD AA A8         call screen_ischarempty     ; check if it is empty
180+  BD5B C1               pop bc
181+  BD5C FE 01            cp 1                        ; if empty
182+  BD5E C2 46 BD         jp nz, tank_fire2            ; copy another one down
183+  BD61 C3 0F BD         jp tank_fire1               ; otherwise, return to main thread
184+  BD64              tank_fire3:                      ; dealing with slopes
185+  BD64 3A 57 BC         ld a,(tank_currentdamage)    ; get the damage countdown
186+  BD67 06 08            ld b,8
187+  BD69 90               sub b                        ; special case for slopes
188+  BD6A 32 57 BC         ld (tank_currentdamage),a    ; decrease the damage countdown by 8, so that next time, we get rid of this block without eroding it
189+  BD6D              tank_fire4:                     ; TIDY UP
190+  BD6D CD C5 A5         call buffer_marklineforupdate
191+  BD70 3E 01            ld a,1
192+  BD72 CD C5 A5         call buffer_marklineforupdate
193+  BD75 3E 02            ld a,2
194+  BD77 CD C5 A5         call buffer_marklineforupdate
195+  BD7A C9               ret
196+  BD7B
197+  BD7B              ;
198+  BD7B              ; Displays or hides the missile graphic, and changes the gun
199+  BD7B              ;
200+  BD7B              tank_missilegraphic:
201+  BD7B 3A 60 BC         ld a,(tank_missile_displayed)
202+  BD7E FE 00            cp 0
203+  BD80 C2 88 BD         jp nz,tank_missilegraphic0
204+  BD83 3E 13            ld a,19
205+  BD85 C3 8A BD         jp tank_missilegraphic1
206+  BD88              tank_missilegraphic0:
207+  BD88 3E 00            ld a,0
208+  BD8A              tank_missilegraphic1:
209+  BD8A 32 60 BC         ld (tank_missile_displayed),a ; store the flipped graphic
210+  BD8D ED 4B 58 BC      ld bc,(tank_currentdamagecoord)
211+  BD91 0C               inc c
212+  BD92 0C               inc c                   ; print the graphic 2 spaces right
213+  BD93 CD 97 A8         call screen_getblock        ; get the block data into hl
214+  BD96 CD 7D A8         call screen_showchar        ; show this character here
215+  BD99 06 02            ld b,2
216+  BD9B 0E 18            ld c,24                     ; set gunbarrel coords
217+  BD9D 11 00 00         ld de,0
218+  BDA0 21 68 B4         ld hl,tank_sprite           ; set hl to gunbarrel gfx, shooting is +64
219+  BDA3 3A 60 BC         ld a,(tank_missile_displayed)
220+  BDA6 FE 00            cp 0
221+  BDA8 CA AE BD         jp z,tank_missilegraphic2
222+  BDAB 11 40 00         ld de,64
223+  BDAE              tank_missilegraphic2:
224+  BDAE 19               add hl,de                   ; work out missile graphic
225+  BDAF CD 7D A8         call screen_showchar        ; show this character here
226+  BDB2 C9               ret
227+  BDB3
228+  BDB3              ;
229+  BDB3              ; Deal with the player being killed by the tank
230+  BDB3              ;
231+  BDB3              tank_killedbytank:
232+  BDB3 ED 4B 58 BC      ld bc,(tank_currentdamagecoord) ; get the current damage coord into bc
233+  BDB7 21 EB B2         ld hl,sprites                   ; empty sprite
234+  BDBA CD 7D A8         call screen_showchar            ; hide the last piece of dirt
235+  BDBD CD 27 BA         call player_tankkillplayer
236+  BDC0 C9               ret
237+  BDC1
238+  BDC1              tank_move:
239+  BDC1 ED 4B 53 BC      ld bc,(tank_initpos2)
240+  BDC5 C5               push bc
241+  BDC6 3A 56 BC         ld a,(tank_anim)
242+  BDC9 FE 11            cp 17                       ; check first time flag
243+  BDCB CA DD BD         jp z,tank_move1             ; don't draw over previous one if first time
244+  BDCE CD E2 BD         call tank_draw_full         ; delete old one
245+  BDD1 ED 4B 53 BC      ld bc,(tank_initpos2)       ; get the current coords
246+  BDD5 78               ld a,b
247+  BDD6 D6 01            sub 1                       ; move back one pixels
248+  BDD8 47               ld b,a
249+  BDD9 ED 43 53 BC      ld (tank_initpos2),bc
250+  BDDD              tank_move1:
251+  BDDD CD E2 BD         call tank_draw_full         ; draw the tank
252+  BDE0 C1               pop bc
253+  BDE1 C9               ret
254+  BDE2
255+  BDE2              tank_draw_full:
256+  BDE2 21 68 B4         ld hl,tank_sprite
257+  BDE5 ED 4B 53 BC      ld bc,(tank_initpos2)         ; load bc with the start coords
258+  BDE9 22 5C BC         ld (tank_current_sprite),hl  ; put into memory
259+  BDEC ED 43 5E BC      ld (tank_current_coords),bc  ; put into memory
260+  BDF0 CD 19 BE         call tank_draw
261+  BDF3 08               ex af,af'
262+  BDF4 3A 55 BC         ld a,(tank_frame)            ; get the animation frame
263+  BDF7 16 00            ld d,0
264+  BDF9 5F               ld e,a
265+  BDFA 19               add hl,de
266+  BDFB 22 5C BC         ld (tank_current_sprite),hl  ; put into memory
267+  BDFE 08               ex af,af'
268+  BDFF ED 4B 53 BC      ld bc,(tank_initpos2)         ; load bc with the start coords
269+  BE03 81 C6 08         add c,8                      ; move one line down
270+  BE06 4F               ld c,a
271+  BE07 ED 43 5E BC      ld (tank_current_coords),bc  ; put into memory
272+  BE0B CD 19 BE         call tank_draw
273+  BE0E 3E 02            ld a,2
274+  BE10 CD C5 A5         call buffer_marklineforupdate
275+  BE13 3E 03            ld a,3
276+  BE15 CD C5 A5         call buffer_marklineforupdate   ; mark the first two rows for update
277+  BE18 C9               ret
278+  BE19
279+  BE19              ;
280+  BE19              ; Draw the tank
281+  BE19              ; Inputs:
282+  BE19              ; None, all in memory
283+  BE19              ;
284+  BE19              tank_draw:
285+  BE19 3E 04            ld a,4                              ; 4 pieces per half
286+  BE1B              tank_draw0:
287+  BE1B F5               push af
288+  BE1C 2A 5C BC         ld hl,(tank_current_sprite)
289+  BE1F ED 4B 5E BC      ld bc,(tank_current_coords)         ; load bc with the start coords
290+  BE23 CD EE A8         call sprites_drawsprite
291+  BE26 2A 5C BC         ld hl,(tank_current_sprite)
292+  BE29 ED 4B 5E BC      ld bc,(tank_current_coords)         ; load bc with the start coords
293+  BE2D 11 08 00         ld de,8
294+  BE30 19               add hl,de
295+  BE31 80 C6 08         add b,8
296+  BE34 47               ld b,a
297+  BE35 22 5C BC         ld (tank_current_sprite),hl         ; put into memory
298+  BE38 ED 43 5E BC      ld (tank_current_coords),bc         ; put into memory
299+  BE3C F1               pop af
300+  BE3D 3D               dec a
301+  BE3E FE 00            cp 0
302+  BE40 C2 1B BE         jp nz,tank_draw0
303+  BE43
304+  BE43 C9               ret
305+  BE44
# file closed: game/tank.asm
 42   BE44                  include "game\rocks.asm"
# file opened: game/rocks.asm
  1+  BE44              ;
  2+  BE44              ; A structure of falling rocks
  3+  BE44              ; Assume we'll never have more than 4 falling at any one time
  4+  BE44              ; (1,2 - 16 bit memory location for rock graphic),state (0 fell, 1 falling, 2 wobbling), countdown
  5+  BE44              ;
  6+  BE44              rocks_falling:
  7+  BE44 00 00 00 00      defb 0,0,0,0
  8+  BE48 00 00 00 00      defb 0,0,0,0
  9+  BE4C 00 00 00 00      defb 0,0,0,0
 10+  BE50 00 00 00 00      defb 0,0,0,0
 11+  BE54
 12+  BE54              rocks_tmp:
 13+  BE54 00               defb 0
 14+  BE55
 15+  BE55              rocks_tmp2:
 16+  BE55 00 00            defb 0,0
 17+  BE57
 18+  BE57              ;
 19+  BE57              ; Coords of the rock that killed us
 20+  BE57              ;
 21+  BE57              rocks_killerrock:
 22+  BE57 00 00            defb 0,0
 23+  BE59
 24+  BE59              ;
 25+  BE59              ; Checks for a rock that needs to start falling. Takes a memory location of the first line at the bottom of the space.
 26+  BE59              ; Checks to see if the pixel row in that location is a rock bottom. If it is, mark this rock as ready to fall.
 27+  BE59              ; If the pixel row is not the rock bottom, stop checking.
 28+  BE59              ; Inputs:
 29+  BE59              ; hl- memory location
 30+  BE59              ;
 31+  BE59              rocks_checkforfalling:
 32+  BE59 7E               ld a,(hl)           ; get the pixel row in this memory location
 33+  BE5A FE 7E            cp 126              ; check against the bottom pixel row of the rock graphic
 34+  BE5C C2 62 BE         jp nz,rocks_checkforfalling2 ; not a rock, stop
 35+  BE5F CD 63 BE         call rocks_addrocktofalling ; mark the rock as falling
 36+  BE62              rocks_checkforfalling2:
 37+  BE62 C9               ret
 38+  BE63
 39+  BE63              ;
 40+  BE63              ; Adds the rock to the structure that tracks falling rocks
 41+  BE63              ; Inputs:
 42+  BE63              ; hl - memory location of falling rock graphic
 43+  BE63              ; bc - coords of rock, c vert
 44+  BE63              rocks_addrocktofalling:
 45+  BE63 C5               push bc             ; store the coords
 46+  BE64 11 44 BE         ld de,rocks_falling
 47+  BE67 06 04            ld b,4              ; number of possible falling rocks
 48+  BE69              rocks_addrocktofalling0:
 49+  BE69 13               inc de
 50+  BE6A                  ;inc de
 51+  BE6A 13               inc de              ; move three along to get the state
 52+  BE6B 1A               ld a,(de)           ; load the state
 53+  BE6C FE 00            cp 0                ; check if this is not falling
 54+  BE6E C2 84 BE         jp nz,rocks_addrocktofalling1 ; continue the loop if not 0
 55+  BE71 13               inc de              ; move to frame
 56+  BE72 3E 10            ld a,16             ; load the number of frames to wobble
 57+  BE74 12               ld (de),a
 58+  BE75 1B               dec de              ; move de back to state
 59+  BE76 3E 02            ld a,2
 60+  BE78 12               ld (de),a           ; set the state to wobbling
 61+  BE79 1B               dec de              ; move back coords
 62+  BE7A C1               pop bc              ; get back coords
 63+  BE7B 78               ld a,b
 64+  BE7C 12               ld (de),a           ; store the vertical
 65+  BE7D 1B               dec de
 66+  BE7E 79               ld a,c
 67+  BE7F 12               ld (de),a           ; store the horizontal
 68+  BE80 C5               push bc
 69+  BE81 C3 88 BE         jp rocks_addrocktofalling2 ; done
 70+  BE84              rocks_addrocktofalling1:
 71+  BE84 13               inc de
 72+  BE85 13               inc de              ; move memory along to next rock
 73+  BE86 10 E1            djnz rocks_addrocktofalling0 ; try the next rock
 74+  BE88              rocks_addrocktofalling2: ; done, return
 75+  BE88 C1               pop bc              ; to tidy up
 76+  BE89 C9               ret
 77+  BE8A
 78+  BE8A              ;
 79+  BE8A              ; Processes any falling rocks
 80+  BE8A              ;
 81+  BE8A              rocks_processrocks:
 82+  BE8A DD 21 44 BE      ld ix,rocks_falling
 83+  BE8E 06 04            ld b,4              ; the number of rocks to check
 84+  BE90              rocks_processrocks0:
 85+  BE90 C5               push bc             ; store loop count
 86+  BE91 DD 4E 00 DD      ld bc,(ix)          ; load the coords for this rock into bc
 86+  BE95 46 01
 87+  BE97 DD 23            inc ix
 88+  BE99 DD 23            inc ix              ; move to the state
 89+  BE9B DD 7E 00         ld a,(ix)           ; load the state into a
 90+  BE9E FE 00            cp 0
 91+  BEA0 CA C4 BE         jp z,rocks_processrocks3 ; if not falling, check next
 92+  BEA3 FE 02            cp 2
 93+  BEA5 C2 B5 BE         jp nz, rocks_processrocks2
 94+  BEA8                  ; we're wobbling
 95+  BEA8 DD 23            inc ix              ; get frame number for wobble
 96+  BEAA DD 7E 00         ld a,(ix)           ; get wobble frame into a
 97+  BEAD CD 95 BF         call rocks_wobble
 98+  BEB0 DD 23            inc ix              ; increment for next
 99+  BEB2 C3 C8 BE         jp rocks_processrocks1  ; do next rock
100+  BEB5              rocks_processrocks2:
101+  BEB5                  ; we're falling
102+  BEB5 C5               push bc
103+  BEB6 CD E1 BE         call rocks_fall
104+  BEB9 C1               pop bc
105+  BEBA CD CC BE         call rocks_storeupdatedlines
106+  BEBD DD 23            inc ix
107+  BEBF DD 23            inc ix              ; inc ix to get to next
108+  BEC1 C3 C8 BE         jp rocks_processrocks1
109+  BEC4              rocks_processrocks3:
110+  BEC4 DD 23            inc ix
111+  BEC6 DD 23            inc ix
112+  BEC8              rocks_processrocks1:
113+  BEC8 C1               pop bc              ; get loop count back
114+  BEC9 10 C5            djnz rocks_processrocks0
115+  BECB C9               ret
116+  BECC
117+  BECC              ;
118+  BECC              ; Stores the updated rows associated with the rock
119+  BECC              ; Inputs:
120+  BECC              ; bc - coords
121+  BECC              ;
122+  BECC              rocks_storeupdatedlines:
123+  BECC 79               ld a,c                  ; get the rock block coords of current block
124+  BECD E6 F8            and 248                 ; find closest multiple of eight
125+  BECF 0F               rrca
126+  BED0 0F               rrca
127+  BED1 0F               rrca                    ; divide by 8
128+  BED2 ED 5B 15 A7      ld de,(screen_offset)          ; load the screen offset, this is in rows
129+  BED6 93               sub e
130+  BED7 F5               push af
131+  BED8 CD C5 A5         call buffer_marklineforupdate  ; store current row in updated lines
132+  BEDB F1               pop af
133+  BEDC 3C               inc a
134+  BEDD CD C5 A5         call buffer_marklineforupdate  ; store line beneath
135+  BEE0 C9               ret
136+  BEE1
137+  BEE1              ;
138+  BEE1              ; Falls a rock one pixel, checks the next square down to see if it is empty, if not, stop falling
139+  BEE1              ; bc - coord of current rock graphic on screen
140+  BEE1              ; ix - memory location of current rock in rock list, currently at the 3rd position (rock state)
141+  BEE1              ;
142+  BEE1              rocks_fall:
143+  BEE1 DD 2B            dec ix
144+  BEE3 DD 2B            dec ix              ; decrease ix back to coords
145+  BEE5 ED 43 55 BE      ld (rocks_tmp2),bc  ; store original coords
146+  BEE9 3E 03            ld a,3              ; move this number of pixels
147+  BEEB              rocks_fall1:
148+  BEEB 08               ex af,af'
149+  BEEC DD 4E 00 DD      ld bc,(ix)          ; get current coords
149+  BEF0 46 01
150+  BEF2 CD 31 A9         call sprites_scadd  ; get the memory of the coords into de
151+  BEF5 14               inc d               ; add 256 to get next row
152+  BEF6 1A               ld a,(de)           ; get the contents of the next row
153+  BEF7 FE 00            cp 0
154+  BEF9 C2 55 BF         jp nz,rocks_fall3    ; move the rock if the row is empty
155+  BEFC 0C               inc c               ; increment the vertical
156+  BEFD DD 71 00 DD      ld (ix),bc          ; store the new coords
156+  BF01 70 01
157+  BF03 79               ld a,c              ; get the vertical coord into a
158+  BF04 E6 07            and 7               ; divisible by 8?
159+  BF06 FE 00            cp 0
160+  BF08 C2 23 BF         jp nz,rocks_fall4   ; if not, carry on
161+  BF0B CD 40 A8         call screen_getattraddressfromscreencoords ; get the attr address into de
162+  BF0E 62 6B            ld hl,de
163+  BF10 36 42            ld (hl),66          ; load this square with the yellow colour
164+  BF12 DD 4E 00 DD      ld bc,(ix)
164+  BF16 46 01
165+  BF18 79               ld a,c              ; get vertical
166+  BF19 D6 08            sub 8               ; look up one square
167+  BF1B 4F               ld c,a              ; put a back in c
168+  BF1C CD 40 A8         call screen_getattraddressfromscreencoords ; get the attr address into de
169+  BF1F 62 6B            ld hl,de
170+  BF21 36 46            ld (hl),70          ; load this square with the yellow colour
171+  BF23              rocks_fall4:
172+  BF23 08               ex af,af'
173+  BF24 3D               dec a
174+  BF25 FE 00            cp 0
175+  BF27 C2 EB BE         jp nz,rocks_fall1   ; do another pixel if needed
176+  BF2A              rocks_fall2:
177+  BF2A 3E 09            ld a,9              ; rock graphic
178+  BF2C ED 4B 55 BE      ld bc,(rocks_tmp2)  ; get the original coords
179+  BF30 CD 97 A8         call screen_getblock     ; get the memory into hl
180+  BF33 CD EE A8         call sprites_drawsprite  ; draw the sprite - over the top of the current one
181+  BF36 3E 09            ld a,9
182+  BF38 DD 4E 00 DD      ld bc,(ix)          ; get the new coords
182+  BF3C 46 01
183+  BF3E CD 97 A8         call screen_getblock     ; get the memory into hl
184+  BF41 CD EE A8         call sprites_drawsprite  ; draw the sprite - over the top of the current one
185+  BF44 DD 4E 00 DD      ld bc,(ix)          ; get the coords again
185+  BF48 46 01
186+  BF4A CD 7A BF         call rocks_checkforplayer ; check to see if we hit a player
187+  BF4D DD 23            inc ix
188+  BF4F DD 23            inc ix                  ; get ix back to state
189+  BF51 CD 6A BF         call rocks_makesound
190+  BF54 C9               ret
191+  BF55              rocks_fall3:
192+  BF55 3E 00            ld a,0              ; set the state to fell
193+  BF57 DD 77 02         ld (ix+2),a           ; store the falling state
194+  BF5A DD 4E 00 DD      ld bc,(ix)          ; get the coords
194+  BF5E 46 01
195+  BF60 CD 40 A8         call screen_getattraddressfromscreencoords ; get the attr address into de
196+  BF63 62 6B            ld hl,de
197+  BF65 36 42            ld (hl),66
198+  BF67 C3 2A BF         jp rocks_fall2      ; rejoin main loop
199+  BF6A
200+  BF6A              ;
201+  BF6A              ; Makes the rock sound if we're no longer falling, and if we didn't hit a player
202+  BF6A              ;
203+  BF6A              rocks_makesound:
204+  BF6A DD 7E 00         ld a,(ix)           ; get the state
205+  BF6D FE 00            cp 0
206+  BF6F C0               ret nz              ; if we haven't fallen, don't do anything
207+  BF70 21 3E B9         ld hl,player+11
208+  BF73 7E               ld a,(hl)
209+  BF74 FE 01            cp 1
210+  BF76 C4 1C AD         call nz, sound_rockfell ; only make sound if didn't kill player
211+  BF79 C9               ret
212+  BF7A
213+  BF7A              ;
214+  BF7A              ; Checks to see if the rock is hitting a player
215+  BF7A              ; Inputs:
216+  BF7A              ; bc - coords of rock we're checking
217+  BF7A              rocks_checkforplayer:
218+  BF7A ED 5B 33 B9      ld de,(player)       ; get the player coords
219+  BF7E 7B               ld a,e               ; get the vert coord first
220+  BF7F 91               sub c                ; subtract the rock vertical coord from players
221+  BF80 FE 08            cp 8                 ; the rock will only hit a player if the player is directly underneath, so this must be 8
222+  BF82 C0               ret nz               ; if not, hasn't hit
223+  BF83 7A               ld a,d               ; get the player horiz coord
224+  BF84 90               sub b                ; subtract rock coord
225+  BF85 C6 07            add 7                ; add max distance
226+  BF87 FE 0D            cp 13                ; compare to 13? if carry flag set, they've hit
227+  BF89 DA 8D BF         jp c,rocks_checkforplayer0
228+  BF8C C9               ret
229+  BF8D              rocks_checkforplayer0:
230+  BF8D ED 43 57 BE      ld (rocks_killerrock),bc; store the coords of the killer rock
231+  BF91 CD 21 BA         call player_crushplayer ; if so, jump out
232+  BF94 C9               ret
233+  BF95
234+  BF95              ;
235+  BF95              ; Wobbles a rocks
236+  BF95              ; Inputs:
237+  BF95              ; bc - coord of current rock graphic on screen
238+  BF95              ; ix - memory location of current rock in rock list, currently at the 4th position (wobble count)
239+  BF95              ; a - wobble frame
240+  BF95              rocks_wobble:
241+  BF95 DD 7E 00         ld a,(ix)           ; get the wobble count, which we'll use as frame toggle
242+  BF98 E6 01            and 1               ; is it odd or even, gets 1 or 0
243+  BF9A 1E 09            ld e,9              ; this is the rock frame
244+  BF9C 83               add a,e             ; add the frame toggle
245+  BF9D C5               push bc
246+  BF9E CD 97 A8         call screen_getblock     ; get the memory into hl
247+  BFA1 CD EE A8         call sprites_drawsprite  ; draw the sprite - over the top of the current one
248+  BFA4
249+  BFA4 DD 7E 00         ld a,(ix)           ; get the frame toggle again
250+  BFA7 3D               dec a               ; decrease
251+  BFA8 DD 77 00         ld (ix),a           ; store
252+  BFAB
253+  BFAB E6 01            and 1
254+  BFAD 1E 09            ld e,9              ; this is the rock frame
255+  BFAF 83               add a,e             ; add the frame toggle
256+  BFB0 CD 97 A8         call screen_getblock     ; get the memory into hl
257+  BFB3
258+  BFB3 C1               pop bc
259+  BFB4 CD EE A8         call sprites_drawsprite  ; draw the sprite again with the new frame - next time it will do the opposite
260+  BFB7
261+  BFB7 DD 7E 00         ld a,(ix)           ; get the wobble count back
262+  BFBA FE 00            cp 0
263+  BFBC C0               ret nz              ; if we're not at zero, return
264+  BFBD DD 2B            dec ix              ; otherwise look to state location
265+  BFBF 3E 01            ld a,1              ; set the state to falling
266+  BFC1 DD 77 00         ld (ix),a           ; store the falling state
267+  BFC4 DD 23            inc ix              ; set ix back to location of wobble count, and we're done
268+  BFC6 C9               ret
269+  BFC7
# file closed: game/rocks.asm
 43   BFC7                  include "game\scores.asm"
# file opened: game/scores.asm
  1+  BFC7              ;
  2+  BFC7              ; The score of the current player
  3+  BFC7              ;
  4+  BFC7              scores_current:
  5+  BFC7 04 01 30 30      defb 4,1,'000000',255       ;+2
  5+  BFCB 30 30 30 30
  5+  BFCF FF
  6+  BFD0
  7+  BFD0              scores_defaultname:
  8+  BFD0 2D 2D 2D         defb '---'
  9+  BFD3
 10+  BFD3              ;
 11+  BFD3              ; The current high score table
 12+  BFD3              ;
 13+  BFD3              scores_table:
 14+  BFD3 03 17 47 41      defb 03,23,'GAM000000',255         ;+0, +2, +5
 14+  BFD7 4D 30 30 30
 14+  BFDB 30 30 30 FF
 15+  BFDF 0C 17 47 41      defb 12,23,'GAM000000',255        ;+12, +14, +17
 15+  BFE3 4D 30 30 30
 15+  BFE7 30 30 30 FF
 16+  BFEB 15 17 47 41      defb 21,23,'GAM000000',255        ;+24, +26, +29
 16+  BFEF 4D 30 30 30
 16+  BFF3 30 30 30 FF
 17+  BFF7
 18+  BFF7              ;
 19+  BFF7              ; Add thousands to the score
 20+  BFF7              ; Inputs:
 21+  BFF7              ; b - number to add
 22+  BFF7              ;
 23+  BFF7              scores_addthousands:
 24+  BFF7 21 CB BF         ld hl,scores_current+4
 25+  BFFA CD 24 C0         call scores_update
 26+  BFFD C9               ret
 27+  BFFE
 28+  BFFE              ;
 29+  BFFE              ; Prints the score to screen
 30+  BFFE              ;
 31+  BFFE              scores_printscore:
 32+  BFFE 3A 05 B9         ld a,(game_currentplayer)   ; get current player
 33+  C001 21 C7 BF         ld hl,scores_current
 34+  C004 FE 01            cp 1
 35+  C006 C2 0E C0         jp nz, score_printscore0    ; if not player 1
 36+  C009 36 04            ld (hl),4       ; set position for player 1
 37+  C00B C3 10 C0         jp score_printscore1
 38+  C00E              score_printscore0:
 39+  C00E 36 16            ld (hl),22       ; set position for player 2
 40+  C010              score_printscore1:
 41+  C010 21 C7 BF         ld hl,scores_current
 42+  C013 CD C5 84         call string_print
 43+  C016 C9               ret
 44+  C017
 45+  C017              ;
 46+  C017              ; Prints both scores to screen
 47+  C017              ;
 48+  C017              scores_printscores:
 49+  C017 21 09 BA         ld hl,player1_score
 50+  C01A CD C5 84         call string_print
 51+  C01D 21 12 BA         ld hl,player2_score
 52+  C020 CD C5 84         call string_print
 53+  C023 C9               ret
 54+  C024
 55+  C024              ;
 56+  C024              ; Updates the current score.
 57+  C024              ; Inputs:
 58+  C024              ; hl - memory location of the score column
 59+  C024              ; b - number to add
 60+  C024              ;
 61+  C024              scores_update:
 62+  C024 7E               ld a,(hl)           ; current value of digit.
 63+  C025 80               add a,b             ; add points to this digit.
 64+  C026 77               ld (hl),a           ; place new digit back in string.
 65+  C027 FE 3A            cp 58               ; more than ASCII value '9'?
 66+  C029 D8               ret c               ; no - relax.
 67+  C02A D6 0A            sub 10              ; subtract 10.
 68+  C02C 77               ld (hl),a           ; put new character back in string.
 69+  C02D              scores_update0:
 70+  C02D 2B               dec hl              ; previous character in string.
 71+  C02E 34               inc (hl)            ; up this by one.
 72+  C02F 7E               ld a,(hl)           ; what's the new value?
 73+  C030 FE 3A            cp 58               ; gone past ASCII nine?
 74+  C032 D8               ret c               ; no, scoring done.
 75+  C033 D6 0A            sub 10              ; down by ten.
 76+  C035 77               ld (hl),a           ; put it back
 77+  C036 C3 2D C0         jp scores_update0   ; go round again.
 78+  C039
 79+  C039
 80+  C039              ;
 81+  C039              ; Displays the high score table at the bottom of the screen
 82+  C039              ;
 83+  C039              scores_showtable:
 84+  C039 21 D3 BF         ld hl, scores_table
 85+  C03C CD C5 84         call string_print
 86+  C03F 21 DF BF         ld hl, scores_table+12
 87+  C042 CD C5 84         call string_print
 88+  C045 21 EB BF         ld hl, scores_table+24
 89+  C048 CD C5 84         call string_print
 90+  C04B C9               ret
 91+  C04C
 92+  C04C              ;
 93+  C04C              ; Place to store the current position we're checking
 94+  C04C              ;
 95+  C04C              scores_highscoretmp:
 96+  C04C 00               defb 0
 97+  C04D
 98+  C04D              ;
 99+  C04D              ; Updates the highscore table. Start at bottom score. Work way from left. Compare each digit. If current is higher than one we're checking,
100+  C04D              ; copy checking one down (or erase) then copy current over that one. Then move up one and do the same
101+  C04D              ;
102+  C04D              scores_processhighscores:
103+  C04D 21 4C C0         ld hl,scores_highscoretmp
104+  C050 36 00            ld (hl),0  ; load up the tracking byte with 0 (ie, not on the table)
105+  C052 3E 1D            ld a,29
106+  C054              scores_processhighscores3:
107+  C054 21 D3 BF         ld hl,scores_table          ; position of first score column
108+  C057 5F               ld e,a
109+  C058 16 00            ld d,0
110+  C05A 19               add hl,de
111+  C05B 08               ex af,af'                   ; store a for later
112+  C05C 11 C9 BF         ld de,scores_current+2      ; position of current score column
113+  C05F 06 06            ld b,6                      ; times to loop
114+  C061              scores_processhighscores0:
115+  C061 7E               ld a,(hl)
116+  C062 4F               ld c,a                      ; get first score column
117+  C063 1A               ld a,(de)                   ; get first current column
118+  C064 B9               cp c                        ; compare current with first
119+  C065 DA 76 C0         jp c,scores_processhighscores4  ; if c is bigger, then this is not a higher score, so end
120+  C068 23               inc hl
121+  C069 13               inc de                      ; move to next column
122+  C06A 10 F5            djnz scores_processhighscores0 ; loop
123+  C06C 08               ex af,af'                     ; still here, so must be bigger
124+  C06D 32 4C C0         ld (scores_highscoretmp),a  ; store the position indicator in the tracking byte
125+  C070 0E 0C            ld c,12
126+  C072 91               sub c
127+  C073 D2 54 C0         jp nc,scores_processhighscores3 ; if the place we're looking is less than zero, we've gone to far, so continue, otherwise go again
128+  C076              scores_processhighscores4
129+  C076 CD 7A C0         call scores_updatehighscores
130+  C079 C9               ret
131+  C07A
132+  C07A              ;
133+  C07A              ; Update score table
134+  C07A              ;
135+  C07A              scores_updatehighscores:
136+  C07A 3A 4C C0         ld a,(scores_highscoretmp)  ; get the place we want to overwrite
137+  C07D FE 00            cp 0
138+  C07F C8               ret z                       ; if this is 0, didn't get a high score
139+  C080 FE 1D            cp 29                       ; check against 29... if it's equal, we don't want to copy the current score down one
140+  C082 CA B5 C0         jp z, scores_updatehighscores3
141+  C085                                              ; copy old score over one below, if not first
142+  C085 21 D3 BF         ld hl,scores_table
143+  C088 11 11 00         ld de,17                    ; start at second score, because this is the first one we'd ever need to copy...
144+  C08B 19               add hl,de                   ; position of first column
145+  C08C 2B               dec hl
146+  C08D 2B               dec hl
147+  C08E 2B               dec hl
148+  C08F E5               push hl
149+  C090 11 0C 00         ld de,12
150+  C093 19               add hl,de                   ; get position of next score
151+  C094 54 5D            ld de,hl
152+  C096 E1               pop hl                      ; get hl back
153+  C097 01 09 00         ld bc,9
154+  C09A ED B0            ldir
155+  C09C FE 11            cp 17                       ; see if we're copying into the second place slot (17 memory offset). If so, stop copying back the scores
156+  C09E CA B5 C0         jp z,scores_updatehighscores3
157+  C0A1 21 D3 BF         ld hl,scores_table
158+  C0A4 11 02 00         ld de,2                    ; ... otherwise, copy back the first score
159+  C0A7 19               add hl,de                   ; position of first column
160+  C0A8 E5               push hl
161+  C0A9 11 0C 00         ld de,12
162+  C0AC 19               add hl,de                   ; get position of next score
163+  C0AD 54 5D            ld de,hl
164+  C0AF E1               pop hl                      ; get hl back
165+  C0B0 01 09 00         ld bc,9
166+  C0B3 ED B0            ldir
167+  C0B5              scores_updatehighscores3:
168+  C0B5 06 06            ld b,6                      ; now overwrite
169+  C0B7 21 D3 BF         ld hl,scores_table
170+  C0BA 16 00            ld d,0
171+  C0BC 5F               ld e,a
172+  C0BD 19               add hl,de                   ; position of first column
173+  C0BE 08               ex af,af'
174+  C0BF 11 C9 BF         ld de,scores_current+2      ; position of current score column
175+  C0C2              scores_updatehighscores2:
176+  C0C2 1A               ld a,(de)
177+  C0C3 77               ld (hl),a
178+  C0C4 23               inc hl
179+  C0C5 13               inc de
180+  C0C6 10 FA            djnz scores_updatehighscores2
181+  C0C8 11 09 00         ld de,9
182+  C0CB ED 52            sbc hl,de
183+  C0CD 54 5D            ld de,hl                    ; get back to start of entry
184+  C0CF 21 D0 BF         ld hl,scores_defaultname    ; still need to overwrite the name
185+  C0D2 01 03 00         ld bc,3                      ; 3 chars to copy
186+  C0D5 ED B0            ldir
187+  C0D7 C9               ret
# file closed: game/scores.asm
 44   C0D8                  include "game\diamonds.asm"
# file opened: game/diamonds.asm
  1+  C0D8              diamonds_tmp:
  2+  C0D8 00               defb 0
  3+  C0D9
  4+  C0D9              ;
  5+  C0D9              ; Holds the number of thousands for the current gem type
  6+  C0D9              ;
  7+  C0D9              diamonds_score:
  8+  C0D9 00               defb 0
  9+  C0DA
 10+  C0DA              ;
 11+  C0DA              ; Changes the attribute of gem and diamond cells based on the frame count
 12+  C0DA              ; Inputs:
 13+  C0DA              ; hl - memory location of gem type
 14+  C0DA              diamonds_twinkle_type:
 15+  C0DA CD 29 B9         call game_getcurrentframe       ; get current frame number
 16+  C0DD E6 07            and 7                           ; want a number from 0-7
 17+  C0DF C6 40            add 64                          ; add to 60 to get attr colour
 18+  C0E1              diamonds_twinkle_type0:
 19+  C0E1 4E 23 46 2B      ld bc,(hl)                      ; get coords into bc
 20+  C0E5 08               ex af, af'
 21+  C0E6 79               ld a,c                          ; load c into a
 22+  C0E7 FE FF            cp 255                          ; is this the end?
 23+  C0E9 CA 06 C1         jp z,diamonds_twinkle_type1           ; step out if so
 24+  C0EC 23               inc hl
 25+  C0ED 23               inc hl
 26+  C0EE 7E               ld a,(hl)                       ; check the state, don't process if collected
 27+  C0EF FE 01            cp 1
 28+  C0F1 CA 07 C1         jp z,diamonds_twinkle_type2           ; step out if so
 29+  C0F4 CD 46 C1         call diamonds_checkforplayer    ; check to see if we've collided with player
 30+  C0F7 DC 0E C1         call c,diamonds_collect     ; we collided
 31+  C0FA 23               inc hl
 32+  C0FB 08               ex af,af'
 33+  C0FC 5E 23 56 2B      ld de,(hl)                      ; get the memory location into de
 34+  C100 12               ld (de),a                       ; set the value of attr
 35+  C101 23               inc hl
 36+  C102 23               inc hl                          ; move to next diamond
 37+  C103 C3 E1 C0         jp diamonds_twinkle_type0
 38+  C106              diamonds_twinkle_type1:
 39+  C106 C9               ret
 40+  C107              diamonds_twinkle_type2:
 41+  C107 23               inc hl                          ; do stuff the we would have done anyway to get to next gem
 42+  C108 23               inc hl
 43+  C109 23               inc hl
 44+  C10A 08               ex af,af'
 45+  C10B C3 E1 C0         jp diamonds_twinkle_type0       ; rejoin main loop
 46+  C10E
 47+  C10E              ;
 48+  C10E              ; Collect the diamond we collided with
 49+  C10E              ; Inputs:
 50+  C10E              ; hl - memory location of current diamond, currently on state
 51+  C10E              ; Output:
 52+  C10E              ; a - 70 - for yellow on black
 53+  C10E              diamonds_collect:
 54+  C10E 36 01            ld (hl),1                       ; collected
 55+  C110 E5               push hl
 56+  C111 2B               dec hl
 57+  C112 2B               dec hl
 58+  C113 4E 23 46 2B      ld bc,(hl)                      ; get the coords
 59+  C117 CD 63 A8         call screen_getscreencoordsfromcharcoords ; get the screen coords into bc
 60+  C11A ED 5B D8 C0      ld de,(diamonds_tmp)            ; tmp stores the offset for this type of gem
 61+  C11E 16 00            ld d,0
 62+  C120 21 EB B2         ld hl,sprites
 63+  C123 19               add hl,de
 64+  C124 CD EE A8         call sprites_drawsprite     ; call the routine to draw the sprite
 65+  C127 E1               pop hl
 66+  C128 08               ex af,af'
 67+  C129 3E 46            ld a,70
 68+  C12B 08               ex af,af'                       ; make sure a is in the af we'll use for the attr
 69+  C12C D9               exx
 70+  C12D 3A D9 C0         ld a,(diamonds_score)
 71+  C130 47               ld b,a
 72+  C131 CD F7 BF         call scores_addthousands
 73+  C134 3A D8 C0         ld a,(diamonds_tmp)
 74+  C137 FE 40            cp 64                       ; check the gem type offset, if its 64 this is a diamond, so mark the level as completable
 75+  C139 C2 41 C1         jp nz,diamonds_collect0
 76+  C13C 21 40 B9         ld hl,player+13
 77+  C13F 36 01            ld (hl),1                   ; mark the player as able to complete the level
 78+  C141              diamonds_collect0:
 79+  C141 CD FF AC         call sound_gemcollected
 80+  C144 D9               exx
 81+  C145 C9               ret
 82+  C146
 83+  C146              ;
 84+  C146              ; Checks to see if the gem is hitting a player
 85+  C146              ; Inputs:
 86+  C146              ; bc - coords of diamond we're checking
 87+  C146              diamonds_checkforplayer:
 88+  C146 78               ld a,b               ; multiply b by 8
 89+  C147 07               rlca
 90+  C148 07               rlca
 91+  C149 07               rlca
 92+  C14A 47               ld b,a
 93+  C14B ED 5B 33 B9      ld de,(player)       ; get the player coords
 94+  C14F 7B               ld a,e               ; get the vert coord first
 95+  C150 90               sub b                ; subtract the diamond vertical coord from players
 96+  C151 C6 04            add 4                ; add the max distance
 97+  C153 FE 09            cp 9                ; compare to max*2+1? if carry flag set, they've hit
 98+  C155 D0               ret nc               ; if not, hasn't hit
 99+  C156 79               ld a,c               ; multiply c by 8
100+  C157 07               rlca
101+  C158 07               rlca
102+  C159 07               rlca
103+  C15A 4F               ld c,a
104+  C15B 7A               ld a,d               ; get the player horiz coord
105+  C15C 91               sub c                ; subtract rock coord
106+  C15D C6 04            add 4                ; add max distance
107+  C15F FE 09            cp 9                ; compare to max*2+1? if carry flag set, they've hit
108+  C161 D0               ret nc
109+  C162 3E 00            ld a,0
110+  C164 C9               ret
111+  C165
112+  C165
113+  C165              ;
114+  C165              ; Initialise diamonds and gems
115+  C165              ;
116+  C165              diamonds_twinkle
117+  C165 21 D9 C0         ld hl,diamonds_score
118+  C168 36 02            ld (hl),2         ; store the score we'll add
119+  C16A 21 D8 C0         ld hl,diamonds_tmp
120+  C16D 36 40            ld (hl),64         ; store the location the diamond sprite
121+  C16F 21 66 B2         ld hl, level01diamonds
122+  C172 CD DA C0         call diamonds_twinkle_type
123+  C175 21 D9 C0         ld hl,diamonds_score
124+  C178 36 01            ld (hl),1         ; store the score we'll add
125+  C17A 21 D8 C0         ld hl,diamonds_tmp
126+  C17D 36 70            ld (hl),112         ; store the location the gem sprite
127+  C17F 21 76 B2         ld hl, level01gems
128+  C182 CD DA C0         call diamonds_twinkle_type
129+  C185 C9               ret
130+  C186
131+  C186              ;
132+  C186              ; Initialise diamonds and gems
133+  C186              ;
134+  C186              diamonds_init:
135+  C186 21 66 B2         ld hl, level01diamonds
136+  C189 CD 93 C1         call diamonds_init_type
137+  C18C 21 76 B2         ld hl, level01gems
138+  C18F CD 93 C1         call diamonds_init_type
139+  C192 C9               ret
140+  C193
141+  C193              ;
142+  C193              ; Initialise diamonds or gems, get memory addresses
143+  C193              ; Inputs:
144+  C193              ; hl - memory location
145+  C193              diamonds_init_type:
146+  C193 4E               ld c,(hl)                      ; get coords into c
147+  C194 79               ld a,c                          ; load c into add
148+  C195 FE FF            cp 255                          ; is this the end?
149+  C197 CA AE C1         jp z,diamonds_init_type1             ; step out if so
150+  C19A 23               inc hl
151+  C19B 46               ld b,(hl)                       ; get coords into b
152+  C19C E5               push hl
153+  C19D CD 10 A8         call screen_getcellattradress ; get memory of attr for this diamond into de
154+  C1A0 E1               pop hl
155+  C1A1 23               inc hl                          ; move to state
156+  C1A2 36 00            ld (hl),0
157+  C1A4 23               inc hl                          ; move to memory
158+  C1A5 73 23 72 2B      ld (hl),de                      ; store the memory location
159+  C1A9 23               inc hl                          ; move to next diamond
160+  C1AA 23               inc hl
161+  C1AB C3 93 C1         jp diamonds_init_type
162+  C1AE              diamonds_init_type1:
163+  C1AE C9               ret
# file closed: game/diamonds.asm
 45   C1AF                  include "game\missiles.asm"
# file opened: game/missiles.asm
  1+  C1AF              ;
  2+  C1AF              ; Controls when missiles fall
  3+  C1AF              ;
  4+  C1AF              missiles_count:
  5+  C1AF 00               defb 0
  6+  C1B0
  7+  C1B0              ;
  8+  C1B0              ; A structure of falling missiles
  9+  C1B0              ; Assume we'll never have more than 4 falling at any one time
 10+  C1B0              ; (1,2 - 16 bit memory location for missile graphic),state (0 fell, 1 falling)
 11+  C1B0              ;
 12+  C1B0              missiles_falling:
 13+  C1B0 00 00 00         defb 0,0,0
 14+  C1B3 00 00 00         defb 0,0,0
 15+  C1B6 00 00 00         defb 0,0,0
 16+  C1B9 00 00 00         defb 0,0,0
 17+  C1BC
 18+  C1BC              ;
 19+  C1BC              ; The coords of the missile that killed us
 20+  C1BC              ;
 21+  C1BC              missiles_killermissile:
 22+  C1BC 00 00            defb 0,0
 23+  C1BE
 24+  C1BE              ;
 25+  C1BE              ; Zeroes the state of each missile
 26+  C1BE              ;
 27+  C1BE              missiles_init:
 28+  C1BE 06 0C            ld b,12
 29+  C1C0 DD 21 ED B1      ld ix,level01missiles
 30+  C1C4              missiles_init0:
 31+  C1C4 DD 36 02 00      ld (ix+2),0               ; set the state to zero
 32+  C1C8 11 05 00         ld de,5
 33+  C1CB DD 19            add ix,de
 34+  C1CD DD 36 02 00      ld (ix+2),0
 35+  C1D1 DD 19            add ix,de
 36+  C1D3 10 EF            djnz missiles_init0
 37+  C1D5 06 04            ld b,4                  ; reset four falling missiles
 38+  C1D7 21 B0 C1         ld hl,missiles_falling
 39+  C1DA              missiles_init1:
 40+  C1DA 36 00            ld (hl),0
 41+  C1DC 23               inc hl
 42+  C1DD 36 00            ld (hl),0
 43+  C1DF 23               inc hl
 44+  C1E0 36 00            ld (hl),0
 45+  C1E2 23               inc hl
 46+  C1E3 10 F5            djnz missiles_init1
 47+  C1E5 C9               ret
 48+  C1E6
 49+  C1E6              ;
 50+  C1E6              ; Runs each frame and checks if a missile can fall, then selects one at random and adds to the falling missiles
 51+  C1E6              ; Processes any already falling missiles
 52+  C1E6              ;
 53+  C1E6              missiles_process:
 54+  C1E6 3A 3E B9         ld a,(player+11)                        ; check if the player was hit by a missile previously
 55+  C1E9 FE 03            cp 3
 56+  C1EB C2 F2 C1         jp nz,missiles_process3                 ; if not, continue
 57+  C1EE CD 53 C3         call missiles_zonkplayer
 58+  C1F1 C9               ret
 59+  C1F2              missiles_process3:
 60+  C1F2 3A 41 B9         ld a,(player_location)
 61+  C1F5 FE 01            cp 1
 62+  C1F7 C2 6A C2         jp nz, missiles_process0                ; if not 1 we're not in the cavern so no need to make any more fall
 63+  C1FA 21 40 B9         ld hl,player+13
 64+  C1FD 7E               ld a,(hl)                               ; check if player has collected a diamond
 65+  C1FE FE 01            cp 1
 66+  C200 C2 6A C2         jp nz, missiles_process0                ; don't activate if not
 67+  C203 21 AF C1         ld hl,missiles_count
 68+  C206 7E               ld a,(hl)                   ; get the missiles count
 69+  C207 3C               inc a
 70+  C208 FE 32            cp 50                                   ; have we reached the count yet
 71+  C20A CA 11 C2         jp z,missiles_process2                 ; if not, don't activate a new one
 72+  C20D 77               ld (hl),a                               ; store the updated count, and continue without activating
 73+  C20E C3 6A C2         jp missiles_process0
 74+  C211              missiles_process2:
 75+  C211 36 00            ld (hl),0                               ; zero the counter
 76+  C213 1E 0C            ld e,12
 77+  C215 CD D6 80         call utilities_randomupper              ; get random number from 0 to 11
 78+  C218 11 0A 00         ld de,10
 79+  C21B CD 3A 80         call utilities_multiply                 ; multiple random number by 10
 80+  C21E 54 5D            ld de,hl                                ; this is the offset for the random missile
 81+  C220 DD 21 ED B1      ld ix,level01missiles                   ; load the location of the missile definitions
 82+  C224 DD 19            add ix,de                               ; get to location of missile
 83+  C226 DD 7E 02         ld a,(ix+2)
 84+  C229 FE 00            cp 0
 85+  C22B CA 3B C2         jp z,missiles_process1                  ; if this missile isn't active, activate it
 86+  C22E 11 05 00         ld de,5                                 ; otherwise, check the missile above
 87+  C231 DD 19            add ix,de
 88+  C233 DD 7E 02         ld a,(ix+2)
 89+  C236 FE 00            cp 0
 90+  C238 C2 6A C2         jp nz,missiles_process0                 ; if this is active as well, the player got lucky
 91+  C23B              missiles_process1:                          ; activate a missile
 92+  C23B DD 36 02 01      ld (ix+2),1                               ; mark this missile as active
 93+  C23F DD 4E 00 DD      ld bc,(ix)                              ; get char coords from the missile
 93+  C243 46 01
 94+  C245 78               ld a,b
 95+  C246 ED 5B 15 A7      ld de,(screen_offset)          ; load the screen offset, this is in rows
 96+  C24A 93               sub e
 97+  C24B C5               push bc
 98+  C24C CD C5 A5         call buffer_marklineforupdate
 99+  C24F C1               pop bc
100+  C250 CD 63 A8         call screen_getscreencoordsfromcharcoords ; get screen coords into bc
101+  C253 C5               push bc
102+  C254 3E 0C            ld a,12                                 ; inactive missile sprite
103+  C256 CD 97 A8         call screen_getblock
104+  C259 CD EE A8         call sprites_drawsprite                 ; draw the sprite over the old one
105+  C25C C1               pop bc
106+  C25D C5               push bc
107+  C25E 3E 14            ld a,20                                 ; active missile sprite
108+  C260 CD 97 A8         call screen_getblock
109+  C263 CD EE A8         call sprites_drawsprite                 ; draw the sprite over the old one
110+  C266 C1               pop bc
111+  C267 CD 17 C3         call missiles_addmissiletofalling
112+  C26A              missiles_process0:
113+  C26A CD 6E C2         call missiles_fall
114+  C26D C9               ret
115+  C26E
116+  C26E              ;
117+  C26E              ; Processes falling missiles
118+  C26E              ;
119+  C26E              missiles_fall:
120+  C26E 06 04            ld b,4              ; number of possible falling missiles
121+  C270 DD 21 B0 C1      ld ix,missiles_falling
122+  C274              missiles_fall0:
123+  C274 C5               push bc
124+  C275 DD 7E 02         ld a,(ix+2)
125+  C278 FE 00            cp 0
126+  C27A CA E1 C2         jp z,missiles_fall1 ; not falling move to next
127+  C27D FE 01            cp 1                ; is this ready to fall
128+  C27F CA 85 C2         jp z, missiles_fall3
129+  C282 C3 FB C2         jp missiles_fall4   ; if not, decrease the countdown
130+  C285              missiles_fall3:
131+  C285 DD 4E 00 DD      ld bc,(ix)          ; load coords into bc
131+  C289 46 01
132+  C28B CD 31 A9         call sprites_scadd  ; get the memory of the coords into de
133+  C28E 14               inc d               ; add 256 to get next row
134+  C28F 1A               ld a,(de)           ; get the contents of the next row
135+  C290 FE 00            cp 0
136+  C292 C2 F4 C2         jp nz,missiles_fall2 ; if this is not empty, stop this missile falling
137+  C295 3E 14            ld a,20                                 ; active missile sprite
138+  C297 CD 97 A8         call screen_getblock
139+  C29A CD EE A8         call sprites_drawsprite                 ; draw the sprite over the old one
140+  C29D DD 4E 00 DD      ld bc,(ix)          ; load coords into bc
140+  C2A1 46 01
141+  C2A3 CD 02 C3         call missiles_storeupdatedlines
142+  C2A6 DD 4E 00 DD      ld bc,(ix)          ; load coords into bc
142+  C2AA 46 01
143+  C2AC 0C               inc c               ; move down one pixel
144+  C2AD DD 71 00 DD      ld (ix),bc          ; store the new coords
144+  C2B1 70 01
145+  C2B3 3E 14            ld a,20                                 ; active missile sprite
146+  C2B5 CD 97 A8         call screen_getblock
147+  C2B8 CD EE A8         call sprites_drawsprite                 ; draw the sprite
148+  C2BB DD 4E 00 DD      ld bc,(ix)          ; load coords into bc
148+  C2BF 46 01
149+  C2C1 79               ld a,c              ; get the vertical coord into a
150+  C2C2 E6 07            and 7               ; divisible by 8?
151+  C2C4 FE 00            cp 0
152+  C2C6 C2 E1 C2         jp nz,missiles_fall1   ; if not, carry on
153+  C2C9 CD 40 A8         call screen_getattraddressfromscreencoords ; get the attr address into de
154+  C2CC 62 6B            ld hl,de
155+  C2CE 36 43            ld (hl),67          ; load this square with the magenta colour
156+  C2D0 DD 4E 00 DD      ld bc,(ix)
156+  C2D4 46 01
157+  C2D6 79               ld a,c              ; get vertical
158+  C2D7 D6 08            sub 8               ; look up one square
159+  C2D9 4F               ld c,a              ; put a back in c
160+  C2DA CD 40 A8         call screen_getattraddressfromscreencoords ; get the attr address into de
161+  C2DD 62 6B            ld hl,de
162+  C2DF 36 46            ld (hl),70          ; load this square with the yellow colour
163+  C2E1              missiles_fall1:         ; hl at state
164+  C2E1 DD 4E 00 DD      ld bc,(ix)          ; get coords back
164+  C2E5 46 01
165+  C2E7 CD 38 C3         call missiles_checkforplayer ; check for player
166+  C2EA DD 23            inc ix
167+  C2EC DD 23            inc ix
168+  C2EE DD 23            inc ix              ; get to next missile
169+  C2F0 C1               pop bc
170+  C2F1 10 81            djnz missiles_fall0
171+  C2F3 C9               ret
172+  C2F4              missiles_fall2:
173+  C2F4 DD 36 02 00      ld (ix+2),0
174+  C2F8 C3 E1 C2         jp missiles_fall1   ; rejoin the loop
175+  C2FB              missiles_fall4:
176+  C2FB 3D               dec a               ; decrease the countdown
177+  C2FC DD 77 02         ld (ix+2),a         ; store back
178+  C2FF C3 E1 C2         jp missiles_fall1   ; do next missile
179+  C302
180+  C302              ;
181+  C302              ; Stores the updated rows associated with the missiles
182+  C302              ; Inputs:
183+  C302              ; bc - coords
184+  C302              ;
185+  C302              missiles_storeupdatedlines:
186+  C302 79               ld a,c                  ; get the missile block coords of current block
187+  C303 E6 F8            and 248                 ; find closest multiple of eight
188+  C305 0F               rrca
189+  C306 0F               rrca
190+  C307 0F               rrca                    ; divide by 8
191+  C308 ED 5B 15 A7      ld de,(screen_offset)          ; load the screen offset, this is in rows
192+  C30C 93               sub e
193+  C30D F5               push af
194+  C30E CD C5 A5         call buffer_marklineforupdate  ; store current row in updated lines
195+  C311 F1               pop af
196+  C312 3C               inc a
197+  C313 CD C5 A5         call buffer_marklineforupdate  ; store line beneath
198+  C316 C9               ret
199+  C317
200+  C317              ;
201+  C317              ; Adds the missile to the structure that tracks falling missile
202+  C317              ; Inputs:
203+  C317              ; bc - coords of missile, c vert
204+  C317              missiles_addmissiletofalling:
205+  C317 C5               push bc             ; store the coords
206+  C318 11 B0 C1         ld de,missiles_falling
207+  C31B 06 04            ld b,4              ; number of possible falling missiles
208+  C31D              missiles_addmissiletofalling0:
209+  C31D 13               inc de
210+  C31E 13               inc de              ; move three along to get the state
211+  C31F 1A               ld a,(de)           ; load the state
212+  C320 FE 00            cp 0                ; check if this is not falling
213+  C322 C2 33 C3         jp nz,missiles_addmissiletofalling1 ; continue the loop if not 0
214+  C325 3E 19            ld a,25
215+  C327 12               ld (de),a           ; set the state to pre-falling
216+  C328 1B               dec de              ; move back coords
217+  C329 C1               pop bc              ; get back coords
218+  C32A 78               ld a,b
219+  C32B 12               ld (de),a           ; store the vertical
220+  C32C 1B               dec de
221+  C32D 79               ld a,c
222+  C32E 12               ld (de),a           ; store the horizontal
223+  C32F C5               push bc
224+  C330 C3 36 C3         jp missiles_addmissiletofalling2 ; done
225+  C333              missiles_addmissiletofalling1:
226+  C333 13               inc de              ; move memory along to next rock
227+  C334 10 E7            djnz missiles_addmissiletofalling0 ; try the next missile
228+  C336              missiles_addmissiletofalling2: ; done, return
229+  C336 C1               pop bc              ; to tidy up
230+  C337 C9               ret
231+  C338
232+  C338              ;
233+  C338              ; Checks to see if the missile is hitting a player
234+  C338              ; Inputs:
235+  C338              ; bc - coords of missile we're checking
236+  C338              missiles_checkforplayer:
237+  C338 ED 5B 33 B9      ld de,(player)       ; get the player coords
238+  C33C 7B               ld a,e               ; get the vert coord first
239+  C33D 91               sub c                ; subtract the missile vertical coord from players
240+  C33E FE 08            cp 8                 ; the missile will only hit a player if the player is directly underneath, so this must be 8
241+  C340 C0               ret nz               ; if not, hasn't hit
242+  C341 7A               ld a,d               ; get the player horiz coord
243+  C342 90               sub b                ; subtract missile coord
244+  C343 C6 07            add 7                ; add max distance
245+  C345 FE 0D            cp 13                ; compare to 13? if carry flag set, they've hit
246+  C347 DA 4B C3         jp c,missiles_checkforplayer0
247+  C34A C9               ret
248+  C34B              missiles_checkforplayer0:
249+  C34B ED 43 BC C1      ld (missiles_killermissile),bc; store the coords of the killer missile
250+  C34F CD 2D BA         call player_zonkplayer ; if so, jump out
251+  C352 C9               ret
252+  C353
253+  C353              ;
254+  C353              ; Player has been hit, so draw text over them and mark as dead
255+  C353              ;
256+  C353              missiles_zonkplayer:
257+  C353 CD 1B BA         call player_killplayer      ; mark as dead
258+  C356 ED 4B 33 B9      ld bc,(player)              ; get player coords
259+  C35A CD 53 A8         call screen_getcharcoordsfromscreencoords ; get char coords
260+  C35D 0D               dec c
261+  C35E 0D               dec c
262+  C35F C5               push bc
263+  C360 CD 10 A8         call screen_getcellattradress ; attrs here
264+  C363 06 05            ld b,5
265+  C365 3E 42            ld a,66
266+  C367 CD CA A7         call screen_setcolours
267+  C36A CD 5C A6         call buffer_buffertoscreen  ; copy buffer to screen
268+  C36D C1               pop bc
269+  C36E ED 5B 15 A7      ld de,(screen_offset)
270+  C372 78               ld a,b
271+  C373 93               sub e
272+  C374 47               ld b,a                      ; subtract the offset
273+  C375 04               inc b
274+  C376 04               inc b                       ; add two for the score rows
275+  C377 ED 43 BD 84      ld (string_zonk),bc         ; set coords of string
276+  C37B 21 BD 84         ld hl,string_zonk
277+  C37E CD C5 84         call string_print
278+  C381 06 14            ld b,20
279+  C383 CD 82 80         call utilities_pauseforframes ; pause
280+  C386 C9               ret
281+  C387
# file closed: game/missiles.asm
 46   C387
 47   C387              ;===========================================================================
 48   C387              ; main routine - the code execution starts here.
 49   C387              ; Sets up the new interrupt routine, the memory
 50   C387              ; banks and jumps to the start loop.
 51   C387              ;===========================================================================
 52   C387              main:
 53   C387
 54   C387                  ; Draw the title screen
 55   C387              main_titlescreen:
 56   C387 CD 57 A9         call titlescreen_show
 57   C38A CD 78 B9         call player_init_gamestart
 58   C38D
 59   C38D              main_lifestart:
 60   C38D
 61   C38D CD 96 B9         call player_init_lifestart
 62   C390
 63   C390 CD BB AA         call lifescreen_draw        ; show the lives remaining screen
 64   C393
 65   C393 CD 00 80         call init_start
 66   C396 CD 30 A7         call screen_draw
 67   C399 CD 8E A6         call buffer_allbuffertoscreen
 68   C39C CD BE C1         call missiles_init
 69   C39F CD 3F BB         call ship_land              ; land the ship
 70   C3A2 CD 61 BC         call tank_init
 71   C3A5 CD 86 C1         call diamonds_init
 72   C3A8
 73   C3A8              mloop:
 74   C3A8 76               halt
 75   C3A9 CD DD C3         call main_loop_processing
 76   C3AC
 77   C3AC                  ;
 78   C3AC                  ; Check if the player died
 79   C3AC                  ;
 80   C3AC 21 3D B9         ld hl,player+10
 81   C3AF 7E               ld a,(hl)                   ; check if the player died this frame
 82   C3B0 FE 01            cp 1
 83   C3B2 C2 C9 C3         jp nz,mloop0
 84   C3B5 CD FD B9         call player_died        ; do end of life housekeeping
 85   C3B8 06 28            ld b,40
 86   C3BA CD 82 80         call utilities_pauseforframes
 87   C3BD 21 3C B9         ld hl,player+9        ; check lives remaining
 88   C3C0 7E               ld a,(hl)
 89   C3C1 FE 00            cp 0
 90   C3C3 CA 05 C4         jp z,main_gameover   ; leave the loop if we're done
 91   C3C6 C3 8D C3         jp main_lifestart    ; otherwise, start a new life
 92   C3C9              mloop0:
 93   C3C9                  ;
 94   C3C9                  ; Check if the player completed the level
 95   C3C9                  ;
 96   C3C9 21 40 B9         ld hl,player+13
 97   C3CC 7E               ld a,(hl)
 98   C3CD FE 01            cp 1
 99   C3CF C2 A8 C3         jp nz,mloop
100   C3D2 CD 09 BB         call player_checkforexit
101   C3D5 FE 01            cp 1                        ; look at return, if 1, level has been completed
102   C3D7 CA 0B C4         jp z,main_endlevel          ; jump to level transition screen
103   C3DA C3 A8 C3         jp mloop                ; start the loop again
104   C3DD
105   C3DD
106   C3DD              main_loop_processing:
107   C3DD
108   C3DD CD 5C A6         call buffer_buffertoscreen  ; copy buffer to screen
109   C3E0 CD DC A5         call buffer_clearlist       ; zero the updated lines list
110   C3E3 CD 42 B9         call player_getlocation     ; figure out where the player is
111   C3E6 CD 33 BA         call player_drawplayer      ; delete player
112   C3E9 CD B0 B4         call control_keyboard       ; check keyboard
113   C3EC CD 33 BA         call player_drawplayer      ; draw player
114   C3EF CD 90 BC         call tank_process           ; prcoess the tank
115   C3F2 CD 2A BB         call ship_process           ; proces the ship
116   C3F5 CD 8A BE         call rocks_processrocks     ; process falling rocks
117   C3F8 CD E6 C1         call missiles_process       ; process missiles
118   C3FB CD 65 C1         call diamonds_twinkle       ; make the diamonds twinkle
119   C3FE CD FE BF         call scores_printscore      ; update the score on screen
120   C401 CD 1A B9         call game_incrementframe    ; increment the game frame
121   C404
122   C404 C9               ret
123   C405
124   C405              main_gameover:
125   C405 CD 0E AB         call gameover_draw          ; show the game over screen
126   C408 C3 87 C3         jp main_titlescreen         ; go back to title
127   C40B
128   C40B              main_endlevel:
129   C40B CD E3 B9         call player_recordcurrentscore
130   C40E CD FC AB         call endlevel_draw          ; show the end level screen
131   C411 C3 8D C3         jp main_lifestart           ; start a new life
132   C414
133   C414              ;===========================================================================
134   C414              ; Stack.
135   C414              ;===========================================================================
136   C414
137   C414              ; Stack: this area is reserved for the stack
138   C414              STACK_SIZE: equ 100    ; in words
139   C414
140   C414              ; Reserve stack space
141   C414 00 00            defw 0  ; WPMEM, 2
142   C416              stack_bottom:
143   C416 00 00 00...      defs    STACK_SIZE*2, 0
144   C4DE              stack_top:
145   C4DE 00 00            defw 0  ; WPMEM, 2
146   C4E0
147   C4E0                     SAVESNA "ThePit.sna", main
# file closed: main.asm
