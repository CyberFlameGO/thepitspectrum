# file opened: main.asm
  1   0000                  DEVICE ZXSPECTRUM48
  2   0000
  3   0000                  ORG $8000
  4   8000
  5   8000              ;===========================================================================
  6   8000              ; Persistent watchpoint.
  7   8000              ; Change WPMEMx (remove the 'x' from WPMEMx) below to activate.
  8   8000              ; If you do so the program will hit a breakpoint when it tries to
  9   8000              ; write to the first byte of the 3rd line.
 10   8000              ; When program breaks in the fill_memory sub routine please hover over hl
 11   8000              ; to see that it contains 0x5804 or COLOR_SCREEN+64.
 12   8000              ;===========================================================================
 13   8000
 14   8000              ; WPMEMx 0x5840, 1, w
 15   8000
 16   8000
 17   8000              ;===========================================================================
 18   8000              ; Include modules
 19   8000              ;===========================================================================
 20   8000                  include "init.asm"
# file opened: init.asm
  1+  8000              ;
  2+  8000              ; Set up at start up
  3+  8000              ;
  4+  8000              init_start:
  5+  8000              ; We want a black screen.
  6+  8000
  7+  8000 3E 47            ld a,71             ; white ink (7) on black paper (0),
  8+  8002                                      ; bright (64).
  9+  8002 CD 67 80         call utilities_clearscreen
 10+  8005 32 8D 5C         ld (23693),a        ; set our screen colours.
 11+  8008 AF               xor a               ; quick way to load accumulator with zero.
 12+  8009 CD 9B 22         call 8859           ; set permanent border colours.
 13+  800C
 14+  800C 21 F6 A6         ld hl,screen_offset ; reset some temp variables
 15+  800F 36 00            ld (hl),0
 16+  8011 21 F7 A6         ld hl,screen_tmp
 17+  8014 36 00            ld (hl),0
 18+  8016 21 8E A5         ld hl,buffer_tmp
 19+  8019 36 00            ld (hl),0
 20+  801B 23               inc hl
 21+  801C 36 00            ld (hl),0
 22+  801E
 23+  801E CD EC B7         call game_resetcurrentframe ; reset current frame
 24+  8021
 25+  8021 C9               ret
 26+  8022
 27+  8022              ;
 28+  8022              ;   Start coord
 29+  8022              ;   vert c, horiz b
 30+  8022              init_coord:
 31+  8022 18 30            defb 24,48
 32+  8024
 33+  8024              ;
 34+  8024              ; Number of lives to start
 35+  8024              ;
 36+  8024              init_lives:
 37+  8024 03               defb 3
 38+  8025
 39+  8025              ;
 40+  8025              ; Score to start
 41+  8025              ;
 42+  8025              init_score:
 43+  8025 30 30 30 30      defb '000000'
 43+  8029 30 30
# file closed: init.asm
 21   802B                  include "utilities.asm"
# file opened: utilities.asm
  1+  802B              ; ##########################################################################
  2+  802B              ; Print a character
  3+  802B              ; Inputs:
  4+  802B              ; b - x coord
  5+  802B              ; c - y coord
  6+  802B              ; d - character
  7+  802B              ; e - colour
  8+  802B              ; ##########################################################################
  9+  802B              utilities_print_char:
 10+  802B 7B               ld a,e
 11+  802C 32 8F 5C         ld (23695),a        ; set our temporary screen colours.
 12+  802F 3E 16            ld a,22
 13+  8031 D7               rst 16              ; Calls the Sinclair PRINT AT routine
 14+  8032 78               ld a,b              ; Gets the X co-ordinate
 15+  8033 3D               dec a
 16+  8034 D7               rst 16
 17+  8035 79               ld a,c              ; and the Y co-ordinate
 18+  8036 D7               rst 16              ; So, essentially PRINT AT X,Y; like in BASIC
 19+  8037 7A               ld a,d              ; ASCII code for udg.
 20+  8038 D7               rst 16              ; draw block.
 21+  8039 C9               ret
 22+  803A
 23+  803A
 24+  803A              ;Inputs:
 25+  803A              ;     DE and A are factors
 26+  803A              ;Outputs:
 27+  803A              ;     A is not changed
 28+  803A              ;     B is 0
 29+  803A              ;     C is not changed
 30+  803A              ;     DE is not changed
 31+  803A              ;     HL is the product
 32+  803A              ;Time:
 33+  803A              ;     342+6x
 34+  803A              ;
 35+  803A              utilities_multiply:
 36+  803A 06 08            ld b,8          ;7           7
 37+  803C 21 00 00         ld hl,0         ;10         10
 38+  803F 29               add hl,hl     ;11*8       88
 39+  8040 07               rlca          ;4*8        32
 40+  8041 30 01            jr nc,$+3     ;(12|18)*8  96+6x
 41+  8043 19                   add hl,de   ;--         --
 42+  8044 10 F9            djnz $-5      ;13*7+8     99
 43+  8046 C9               ret             ;10         10
 44+  8047
 45+  8047              utilities_waitforkey:
 46+  8047 21 08 5C         ld hl,23560         ; LAST K system variable.
 47+  804A 36 00            ld (hl),0           ; put null value there.
 48+  804C              utilities_waitforkey0:
 49+  804C 7E               ld a,(hl)           ; new value of LAST K.
 50+  804D FE 00            cp 0                ; is it still zero?
 51+  804F 28 FB            jr z,utilities_waitforkey0           ; yes, so no key pressed.
 52+  8051 C9               ret                 ; key was pressed.
 53+  8052
 54+  8052              ;
 55+  8052              ; Waits number of frames for keypress. If got, returns 1, if not 0
 56+  8052              ; Inputs:
 57+  8052              ; a - number of frames to waits
 58+  8052              ; Ouputs:
 59+  8052              ; e - 0 not pressed, 1 pressed
 60+  8052              utilities_waitforkey_forframes:
 61+  8052 21 08 5C         ld hl,23560         ; LAST K system variable.
 62+  8055 36 00            ld (hl),0           ; put null value there.
 63+  8057 47               ld b,a              ; number of frames to wait
 64+  8058              utilities_waitforkey_forframes0:
 65+  8058 7E               ld a,(hl)           ; new value of LAST K.
 66+  8059 FE 00            cp 0                ; is it still zero?
 67+  805B 28 03            jr z,utilities_waitforkey_forframes1           ; yes, so no key pressed.
 68+  805D 1E 01            ld e,1              ; set the pressed flag
 69+  805F C9               ret                 ; key was pressed.
 70+  8060              utilities_waitforkey_forframes1:
 71+  8060 76               halt                ; wait for frame
 72+  8061 76               halt                ; wait for frame
 73+  8062 10 F4            djnz utilities_waitforkey_forframes0 ; loop again
 74+  8064 1E 00            ld e,0              ; nothing pressed in time
 75+  8066 C9               ret
 76+  8067
 77+  8067              ;
 78+  8067              ; Clears the screen
 79+  8067              ; Inputs:
 80+  8067              ; a - attribute colour
 81+  8067              utilities_clearscreen:
 82+  8067 76               halt
 83+  8068 21 00 58         ld hl,22528         ; attr
 84+  806B 11 01 58         ld de,22529         ; attr+1
 85+  806E 01 FF 02         ld bc,767
 86+  8071 77               ld (hl),a
 87+  8072 ED B0            ldir
 88+  8074
 89+  8074 21 00 40         ld hl, 16384        ;pixels
 90+  8077 11 01 40         ld de, 16385        ;pixels + 1
 91+  807A 01 FF 17         ld bc, 6143         ;pixels area length - 1
 92+  807D 36 00            ld (hl), 0          ;set first byte to '0'
 93+  807F ED B0            ldir                ;copy bytes
 94+  8081
 95+  8081 C9               ret
 96+  8082
 97+  8082              ;
 98+  8082              ; Wait for a number of frames
 99+  8082              ; Inputs:
100+  8082              ; b - number of frames
101+  8082              utilities_pauseforframes:
102+  8082 76               halt
103+  8083 10 FD            djnz utilities_pauseforframes
104+  8085 C9               ret
105+  8086
106+  8086              utilities_readkey:
107+  8086 21 A6 80         LD HL,utilties_keymap              ; Point HL at the keyboard list
108+  8089 16 08            LD D,8                                  ; This is the number of ports (rows) to check
109+  808B 0E FE            LD C,$FE                            ; C is always FEh for reading keyboard ports
110+  808D              utilities_readkey_0:
111+  808D 46               LD B,(HL)                               ; Get the keyboard port address from table
112+  808E 23               INC HL                                  ; Increment to list of keys
113+  808F ED 78            IN A,(C)                                ; Read the row of keys in
114+  8091 E6 1F            AND $1F                                     ; We are only interested in the first five bits
115+  8093 1E 05            LD E,5                                  ; This is the number of keys in the row
116+  8095              utilities_readkey_1:
117+  8095 CB 3F            SRL A                                   ; Shift A right; bit 0 sets carry bit
118+  8097 30 0B            JR NC,utilities_readkey_2   ; If the bit is 0, we've found our key
119+  8099 23               INC HL                                  ; Go to next table address
120+  809A 1D               DEC E                                   ; Decrement key loop counter
121+  809B 20 F8            JR NZ,utilities_readkey_1   ; Loop around until this row finished
122+  809D 15               DEC D                                   ; Decrement row loop counter
123+  809E 20 ED            JR NZ,utilities_readkey_0   ; Loop around until we are done
124+  80A0 A7               AND A                                   ; Clear A (no key found)
125+  80A1 C3 86 80         jp utilities_readkey
126+  80A4              utilities_readkey_2:
127+  80A4 7E               LD A,(HL)                               ; We've found a key at this point; fetch the character code!
128+  80A5 C9               RET
129+  80A6
130+  80A6              utilties_keymap:
131+  80A6 FE 23 5A 58      defb $FE,"#","Z","X","C","V"
131+  80AA 43 56
132+  80AC FD 41 53 44      defb $FD,"A","S","D","F","G"
132+  80B0 46 47
133+  80B2 FB 51 57 45      defb $FB,"Q","W","E","R","T"
133+  80B6 52 54
134+  80B8 F7 31 32 33      defb $F7,"1","2","3","4","5"
134+  80BC 34 35
135+  80BE EF 30 39 38      defb $EF,"0","9","8","7","6"
135+  80C2 37 36
136+  80C4 DF 50 4F 49      defb $DF,"P","O","I","U","Y"
136+  80C8 55 59
137+  80CA BF 23 4C 4B      defb $BF,"#","L","K","J","H"
137+  80CE 4A 48
138+  80D0 7F 20 23 4D      defb $7F," ","#","M","N","B"
138+  80D4 4E 42
# file closed: utilities.asm
 22   80D6                  include "strings.asm"
# file opened: strings.asm
  1+  80D6              string_score1:
  2+  80D6 04 00 53 43      defb 4,0,'SCORE1',255
  2+  80DA 4F 52 45 31
  2+  80DE FF
  3+  80DF              string_scorenumbers1:
  4+  80DF 04 01 30 30      defb 4,1,'000000',255
  4+  80E3 30 30 30 30
  4+  80E7 FF
  5+  80E8              string_company:
  6+  80E8 0E 00 45 4E      defb 14,0,'ENV',255
  6+  80EC 56 FF
  7+  80EE              string_credits:
  8+  80EE 0C 01 50 4C      defb 12,1,'PLAYER 1',255
  8+  80F2 41 59 45 52
  8+  80F6 20 31 FF
  9+  80F9              string_score2:
 10+  80F9 16 00 53 43      defb 22,0,'SCORE2',255
 10+  80FD 4F 52 45 32
 10+  8101 FF
 11+  8102              string_scorenumbers2:
 12+  8102 16 01 30 30      defb 22,1,'000000',255
 12+  8106 30 30 30 30
 12+  810A FF
 13+  810B              string_titlescreen_copyright:
 14+  810B 04 16 7F 20      defb 4,22, 127,' 1982 AW ZILEC ELC LTD',255
 14+  810F 31 39 38 32
 14+  8113 20 41 57 20
 14+  8117 5A 49 4C 45
 14+  811B 43 20 45 4C
 14+  811F 43 20 4C 54
 14+  8123 44 FF
 15+  8125
 16+  8125
 17+  8125              string_alttitlescreen_1:
 18+  8125 0C 00 43 52      defb 12,0,'CREDITS 1',255
 18+  8129 45 44 49 54
 18+  812D 53 20 31 FF
 19+  8131              string_alttitlescreen_2:
 20+  8131 00 02 20 20      defb 0,2,'           THE OBJECT',254
 20+  8135 20 20 20 20
 20+  8139 20 20 20 20
 20+  813D 20 54 48 45
 20+  8141 20 4F 42 4A
 20+  8145 45 43 54 FE
 21+  8149 00 03 20 20      defb 0,3,'          OF THIS GAME',254
 21+  814D 20 20 20 20
 21+  8151 20 20 20 20
 21+  8155 4F 46 20 54
 21+  8159 48 49 53 20
 21+  815D 47 41 4D 45
 21+  8161 FE
 22+  8162 00 04 20 20      defb 0,4,'         IS TO DIG DOWN',254
 22+  8166 20 20 20 20
 22+  816A 20 20 20 49
 22+  816E 53 20 54 4F
 22+  8172 20 44 49 47
 22+  8176 20 44 4F 57
 22+  817A 4E FE
 23+  817C 00 05 20 20      defb 0,5,'        TO THE BOTTOM PIT',254
 23+  8180 20 20 20 20
 23+  8184 20 20 54 4F
 23+  8188 20 54 48 45
 23+  818C 20 42 4F 54
 23+  8190 54 4F 4D 20
 23+  8194 50 49 54 FE
 24+  8198 00 06 20 20      defb 0,6,'               AND',254
 24+  819C 20 20 20 20
 24+  81A0 20 20 20 20
 24+  81A4 20 20 20 20
 24+  81A8 20 41 4E 44
 24+  81AC FE
 25+  81AD 00 07 20 20      defb 0,7,'        COLLECT AT LEAST',254
 25+  81B1 20 20 20 20
 25+  81B5 20 20 43 4F
 25+  81B9 4C 4C 45 43
 25+  81BD 54 20 41 54
 25+  81C1 20 4C 45 41
 25+  81C5 53 54 FE
 26+  81C8 00 08 20 20      defb 0,8,'         ONE LARGE JEWEL',254
 26+  81CC 20 20 20 20
 26+  81D0 20 20 20 4F
 26+  81D4 4E 45 20 4C
 26+  81D8 41 52 47 45
 26+  81DC 20 4A 45 57
 26+  81E0 45 4C FE
 27+  81E3 00 09 20 20      defb 0,9,'              THEN',254
 27+  81E7 20 20 20 20
 27+  81EB 20 20 20 20
 27+  81EF 20 20 20 20
 27+  81F3 54 48 45 4E
 27+  81F7 FE
 28+  81F8 00 0A 20 20      defb 0,10,'         RETURN TO SHIP',254
 28+  81FC 20 20 20 20
 28+  8200 20 20 20 52
 28+  8204 45 54 55 52
 28+  8208 4E 20 54 4F
 28+  820C 20 53 48 49
 28+  8210 50 FE
 29+  8212 00 0B 20 20      defb 0,11,'         THRU UPPER PIT',255
 29+  8216 20 20 20 20
 29+  821A 20 20 20 54
 29+  821E 48 52 55 20
 29+  8222 55 50 50 45
 29+  8226 52 20 50 49
 29+  822A 54 FF
 30+  822C              string_alttitlescreen_3:
 31+  822C 00 0D 20 20      defb 0,13,'    SINGLE BONUS  5000 POINTS',254
 31+  8230 20 20 53 49
 31+  8234 4E 47 4C 45
 31+  8238 20 42 4F 4E
 31+  823C 55 53 20 20
 31+  8240 35 30 30 30
 31+  8244 20 50 4F 49
 31+  8248 4E 54 53 FE
 32+  824C 00 0E 20 20      defb 0,14,'      COLLECT 1 LARGE JEWEL',254
 32+  8250 20 20 20 20
 32+  8254 43 4F 4C 4C
 32+  8258 45 43 54 20
 32+  825C 31 20 4C 41
 32+  8260 52 47 45 20
 32+  8264 4A 45 57 45
 32+  8268 4C FE
 33+  826A 00 0F 20 20      defb 0,15,'       AND RETURN TO SHIP',254
 33+  826E 20 20 20 20
 33+  8272 20 41 4E 44
 33+  8276 20 52 45 54
 33+  827A 55 52 4E 20
 33+  827E 54 4F 20 53
 33+  8282 48 49 50 FE
 34+  8286 00 11 20 20      defb 0,17,'    DOUBLE BONUS  10000 POINTS',254
 34+  828A 20 20 44 4F
 34+  828E 55 42 4C 45
 34+  8292 20 42 4F 4E
 34+  8296 55 53 20 20
 34+  829A 31 30 30 30
 34+  829E 30 20 50 4F
 34+  82A2 49 4E 54 53
 34+  82A6 FE
 35+  82A7 00 12 20 20      defb 0,18,'    COLLECT ALL 3 LARGE JEWELS',254
 35+  82AB 20 20 43 4F
 35+  82AF 4C 4C 45 43
 35+  82B3 54 20 41 4C
 35+  82B7 4C 20 33 20
 35+  82BB 4C 41 52 47
 35+  82BF 45 20 4A 45
 35+  82C3 57 45 4C 53
 35+  82C7 FE
 36+  82C8 00 13 20 20      defb 0,19,'       OR   ALL 4 SMALL JEWELS',254
 36+  82CC 20 20 20 20
 36+  82D0 20 4F 52 20
 36+  82D4 20 20 41 4C
 36+  82D8 4C 20 34 20
 36+  82DC 53 4D 41 4C
 36+  82E0 4C 20 4A 45
 36+  82E4 57 45 4C 53
 36+  82E8 FE
 37+  82E9 00 15 20 20      defb 0,21,'    TRIPLE BONUS  15000 POINTS',254
 37+  82ED 20 20 54 52
 37+  82F1 49 50 4C 45
 37+  82F5 20 42 4F 4E
 37+  82F9 55 53 20 20
 37+  82FD 31 35 30 30
 37+  8301 30 20 50 4F
 37+  8305 49 4E 54 53
 37+  8309 FE
 38+  830A 00 16 20 20      defb 0,22,'       COLLECT ALL 7 JEWELS',255
 38+  830E 20 20 20 20
 38+  8312 20 43 4F 4C
 38+  8316 4C 45 43 54
 38+  831A 20 41 4C 4C
 38+  831E 20 37 20 4A
 38+  8322 45 57 45 4C
 38+  8326 53 FF
 39+  8328
 40+  8328              string_lifescreen_player:
 41+  8328 0B 00 20 50      defb 11,0,' PLAYER 1 ',255
 41+  832C 4C 41 59 45
 41+  8330 52 20 31 20
 41+  8334 FF
 42+  8335              string_lifescreen_lives:
 43+  8335 0B 03 30 20      defb 11,3,48,' MEN LEFT',255
 43+  8339 4D 45 4E 20
 43+  833D 4C 45 46 54
 43+  8341 FF
 44+  8342              string_lifescreen_lastman:
 45+  8342 0C 03 4C 41      defb 12,3,'LAST MAN',255
 45+  8346 53 54 20 4D
 45+  834A 41 4E FF
 46+  834D
 47+  834D              string_gameoverscreen_gameover:
 48+  834D 0C 06 47 41      defb 12,6,'GAME OVER',255
 48+  8351 4D 45 20 4F
 48+  8355 56 45 52 FF
 49+  8359              string_gameoverscreen_copyright:
 50+  8359 05 12 7F 20      defb 5,18,127,' 1982 AW ZILEC ELC LTD',255
 50+  835D 31 39 38 32
 50+  8361 20 41 57 20
 50+  8365 5A 49 4C 45
 50+  8369 43 20 45 4C
 50+  836D 43 20 4C 54
 50+  8371 44 FF
 51+  8373              string_gameoverscreen_bestscores:
 52+  8373 07 16 42 45      defb 7,22,'BEST SCORES TODAY',255
 52+  8377 53 54 20 53
 52+  837B 43 4F 52 45
 52+  837F 53 20 54 4F
 52+  8383 44 41 59 FF
 53+  8387              string_gameover_credits:
 54+  8387 0C 01 43 52      defb 12,1,'CREDITS 0',255
 54+  838B 45 44 49 54
 54+  838F 53 20 30 FF
 55+  8393
 56+  8393              string_highscore_congratulations:
 57+  8393 08 05 43 4F      defb 8,5,'CONGRATULATIONS',255
 57+  8397 4E 47 52 41
 57+  839B 54 55 4C 41
 57+  839F 54 49 4F 4E
 57+  83A3 53 FF
 58+  83A5              string_highscore_player1:
 59+  83A5 0C 07 50 4C      defb 12,7,'PLAYER 1',255
 59+  83A9 41 59 45 52
 59+  83AD 20 31 FF
 60+  83B0              string_highscore_player2:
 61+  83B0 0C 07 50 4C      defb 12,7,'PLAYER 2',255
 61+  83B4 41 59 45 52
 61+  83B8 20 32 FF
 62+  83BB              string_highscore_youhaveearned:
 63+  83BB 08 0A 59 4F      defb 8,10,'YOU HAVE EARNED',255
 63+  83BF 55 20 48 41
 63+  83C3 56 45 20 45
 63+  83C7 41 52 4E 45
 63+  83CB 44 FF
 64+  83CD              string_highscore_place1:
 65+  83CD 06 0C 54 48      defb 6,12,'THE GREATEST SCORE',255
 65+  83D1 45 20 47 52
 65+  83D5 45 41 54 45
 65+  83D9 53 54 20 53
 65+  83DD 43 4F 52 45
 65+  83E1 FF
 66+  83E2              string_highscore_place2:
 67+  83E2 06 0C 54 48      defb 6,12,'THE 2ND BEST SCORE',255
 67+  83E6 45 20 32 4E
 67+  83EA 44 20 42 45
 67+  83EE 53 54 20 53
 67+  83F2 43 4F 52 45
 67+  83F6 FF
 68+  83F7              string_highscore_place3:
 69+  83F7 06 0C 54 48      defb 6,12,'THE 3RD BEST SCORE',255
 69+  83FB 45 20 33 52
 69+  83FF 44 20 42 45
 69+  8403 53 54 20 53
 69+  8407 43 4F 52 45
 69+  840B FF
 70+  840C              string_highscore_pleaseenter
 71+  840C 03 0F 52 45      defb 3,15,'RECORD YOUR INITIALS BELOW',255
 71+  8410 43 4F 52 44
 71+  8414 20 59 4F 55
 71+  8418 52 20 49 4E
 71+  841C 49 54 49 41
 71+  8420 4C 53 20 42
 71+  8424 45 4C 4F 57
 71+  8428 FF
 72+  8429
 73+  8429              string_endlevel_youhaveearned:
 74+  8429 08 0B 59 4F      defb 8,11,'YOU HAVE EARNED',255
 74+  842D 55 20 48 41
 74+  8431 56 45 20 45
 74+  8435 41 52 4E 45
 74+  8439 44 FF
 75+  843B              string_endlevel_bonus1:
 76+  843B 09 0D 53 49      defb 9,13,'SINGLE BONUS',255
 76+  843F 4E 47 4C 45
 76+  8443 20 42 4F 4E
 76+  8447 55 53 FF
 77+  844A              string_endlevel_bonus2:
 78+  844A 09 0D 44 4F      defb 9,13,'DOUBLE BONUS',255
 78+  844E 55 42 4C 45
 78+  8452 20 42 4F 4E
 78+  8456 55 53 FF
 79+  8459              string_endlevel_bonus3:
 80+  8459 09 0D 54 52      defb 9,13,'TRIPLE BONUS',255
 80+  845D 49 50 4C 45
 80+  8461 20 42 4F 4E
 80+  8465 55 53 FF
 81+  8468              string_endlevel_points1:
 82+  8468 0A 0F 35 30      defb 10,15,'5000 POINTS',255
 82+  846C 30 30 20 50
 82+  8470 4F 49 4E 54
 82+  8474 53 FF
 83+  8476              string_endlevel_points2:
 84+  8476 09 0F 31 30      defb 9,15,'10000 POINTS',255
 84+  847A 30 30 30 20
 84+  847E 50 4F 49 4E
 84+  8482 54 53 FF
 85+  8485              string_endlevel_points3:
 86+  8485 09 0F 31 35      defb 9,15,'15000 POINTS',255
 86+  8489 30 30 30 20
 86+  848D 50 4F 49 4E
 86+  8491 54 53 FF
 87+  8494              string_endlevel_anothergo:
 88+  8494 08 12 48 41      defb 8,18,'HAVE ANOTHER GO',255
 88+  8498 56 45 20 41
 88+  849C 4E 4F 54 48
 88+  84A0 45 52 20 47
 88+  84A4 4F FF
 89+  84A6              ;
 90+  84A6              ; Prints specified string
 91+  84A6              ; Inputs:
 92+  84A6              ; de: pointer to string
 93+  84A6              ; bc: length of string
 94+  84A6              ;
 95+  84A6              ; Print String Data
 96+  84A6              ; First two bytes of string contain X and Y char position, then the string
 97+  84A6              ; Individual strings are terminated with 0xFE
 98+  84A6              ; End of data is terminated with 0xFF
 99+  84A6              ; HL: Address of string
100+  84A6              ;
101+  84A6 5E           string_print:           LD E,(HL)                       ; Fetch the X coordinate
102+  84A7 23                                   INC HL                          ; Increase HL to the next memory location
103+  84A8 56                                   LD D,(HL)                       ; Fetch the Y coordinate
104+  84A9 23                                   INC HL                          ; Increase HL to the next memory location
105+  84AA CD BD 84                             CALL string_getcharaddress           ; Calculate the screen address (in DE)
106+  84AD 7E           string_print_0:         LD A,(HL)                       ; Fetch the character to print
107+  84AE 23                                   INC HL                          ; Increase HL to the next character
108+  84AF FE FE                                CP 0xFE                         ; Compare with 0xFE
109+  84B1 28 F3                                JR Z,string_print               ; If it is equal to 0xFE then loop back to print next string
110+  84B3 D0                                   RET NC                          ; If it is greater or equal to (carry bit set) then
111+  84B4 E5                                   PUSH HL                         ; Push HL on stack (Print_Char will not preserve HL)
112+  84B5 CD CD 84                             CALL Print_Char                 ; Print the character
113+  84B8 E1                                   POP HL                          ; Retrieve HL back off the stack
114+  84B9 1C                                   INC E                           ; Go to the next screen address
115+  84BA 18 F1                                JR string_print_0               ; Loop back to print next character
116+  84BC C9                                   RET
117+  84BD
118+  84BD              ; Get screen address
119+  84BD              ; D = Y character position
120+  84BD              ; E = X character position
121+  84BD              ; Returns address in DE
122+  84BD              ;
123+  84BD 7A           string_getcharaddress:       LD A,D
124+  84BE E6 07                                AND %00000111
125+  84C0 1F                                   RRA
126+  84C1 1F                                   RRA
127+  84C2 1F                                   RRA
128+  84C3 1F                                   RRA
129+  84C4 B3                                   OR E
130+  84C5 5F                                   LD E,A
131+  84C6 7A                                   LD A,D
132+  84C7 E6 18                                AND %00011000
133+  84C9 F6 40                                OR %01000000
134+  84CB 57                                   LD D,A
135+  84CC C9                                   RET                             ; Returns screen address in DE
136+  84CD
137+  84CD              ; Print a single character out
138+  84CD              ; A:  Character to print
139+  84CD              ; DE: Screen address to print character at
140+  84CD              ;
141+  84CD 21 00 3C     Print_Char:             LD HL,0x3C00                    ; Address of character set table in ROM
142+  84D0 06 00                                LD B,0                          ; Set BC to A
143+  84D2 4F                                   LD C,A
144+  84D3 E6 FF                                AND 0xFF                        ; Clear the carry bit
145+  84D5 CB 11                                RL C                            ; Multiply BC by 8 (shift left 3 times)
146+  84D7 CB 10                                RL B
147+  84D9 CB 11                                RL C
148+  84DB CB 10                                RL B
149+  84DD CB 11                                RL C
150+  84DF CB 10                                RL B
151+  84E1 09                                   ADD HL,BC                       ; Get the character address in HL
152+  84E2 0E 08                                LD C,8                          ; Loop counter
153+  84E4 D5                                   PUSH DE
154+  84E5 7E           Print_Char_1:           LD A,(HL)                       ; Get the byte from the ROM into A
155+  84E6 12                                   LD (DE),A                       ; Stick A onto the screen
156+  84E7 14                                   INC D                           ; Goto next line on screen
157+  84E8 2C                                   INC L                           ; Goto next byte of character
158+  84E9 0D                                   DEC C                           ; Decrease the loop counter
159+  84EA 20 F9                                JR NZ,Print_Char_1              ; Loop around whilst it is Not Zero (NZ)
160+  84EC D1                                   POP DE
161+  84ED C9                                   RET                             ; Return from the subroutine
# file closed: strings.asm
 23   84EE                  include "screen\buffer.asm"
# file opened: screen/buffer.asm
  1+  84EE              buffer_buffer:
  2+  84EE 00 00 00...      defs 7424                   ; area reserved for screen
  3+  A1EE
  4+  A1EE              buffer_attr_buffer:
  5+  A1EE 00 00 00...      defs 928                    ; attrs buffer area
  6+  A58E
  7+  A58E              buffer_tmp:
  8+  A58E 00 00            defb 0,0                    ; temp area
  9+  A590
 10+  A590              buffer_updatedlines:
 11+  A590 FF FF FF...      defs 21,255
 12+  A5A5
 13+  A5A5              buffer_updateall:
 14+  A5A5 00               defb 0
 15+  A5A6
 16+  A5A6              ;
 17+  A5A6              ; Stores a line number in the update list
 18+  A5A6              ; Inputs:
 19+  A5A6              ; a - row number
 20+  A5A6              buffer_marklineforupdate:
 21+  A5A6 FE 15            cp 21
 22+  A5A8 D0               ret nc                          ; dont store lines that we shouldn't draw
 23+  A5A9 5F               ld e,a                          ; store in e
 24+  A5AA 06 15            ld b,21
 25+  A5AC 21 90 A5         ld hl,buffer_updatedlines
 26+  A5AF              buffer_marklineforupdate0:
 27+  A5AF 7E               ld a,(hl)                       ; get the line stored in updated lines
 28+  A5B0 BB               cp e                            ; is this the same as the row number passed in?
 29+  A5B1 C8               ret z                           ; if so, don't need to do anything
 30+  A5B2 FE FF            cp 255                          ; is this 255, ie the end of the buffer
 31+  A5B4 C2 B9 A5         jp nz,buffer_marklineforupdate1 ; if not, move to next
 32+  A5B7 73               ld (hl),e                       ; if it is, this spot is empty, so store the row number
 33+  A5B8 C9               ret                             ; and finish
 34+  A5B9              buffer_marklineforupdate1:
 35+  A5B9 23               inc hl
 36+  A5BA 10 F3            djnz buffer_marklineforupdate0
 37+  A5BC C9               ret
 38+  A5BD
 39+  A5BD              ;
 40+  A5BD              ; Zeroes the updated lines list
 41+  A5BD              ;
 42+  A5BD              buffer_clearlist:
 43+  A5BD 06 15            ld b,21
 44+  A5BF 21 90 A5         ld hl,buffer_updatedlines
 45+  A5C2              buffer_clearlist0:
 46+  A5C2 36 FF            ld (hl),255
 47+  A5C4 23               inc hl
 48+  A5C5 10 FB            djnz buffer_clearlist0
 49+  A5C7 C9               ret
 50+  A5C8
 51+  A5C8              ;
 52+  A5C8              ; Copies the buffer to the screen. Use stack.
 53+  A5C8              ; Inputs:
 54+  A5C8              ; a - row number to display - 0 is first line
 55+  A5C8              ;
 56+  A5C8              buffer_bufferlinetoscreen:
 57+  A5C8 4F               ld c,a                          ; store a
 58+  A5C9 ED 5B F6 A6      ld de,(screen_offset)          ; load the screen offset, this is in rows, want it *256
 59+  A5CD 83               add a,e                       ; add the row number
 60+  A5CE 11 00 01         ld de,256
 61+  A5D1 CD 3A 80         call utilities_multiply
 62+  A5D4 54 5D            ld de,hl
 63+  A5D6 21 EE 84         ld hl,buffer_buffer
 64+  A5D9 19               add hl,de                   ; add the offset
 65+  A5DA 79               ld a,c                      ; get original row back
 66+  A5DB ED 73 39 A6      ld (buffer_bufferlinetoscreen1+1),sp ; this is some self-modifying code; stores the stack pointer in an ld sp,nn instruction at the end
 67+  A5DF D9               exx
 68+  A5E0 0E 00            ld c,0                      ; zero horizontal
 69+  A5E2 47               ld b,a                      ; load the row number into vertical coord
 70+  A5E3 04               inc b
 71+  A5E4 04               inc b                       ; move forward 2 to allow for scores
 72+  A5E5 CD E0 A7         call screen_getcelladdress  ; get the memory into de
 73+  A5E8 21 10 00         ld hl,16                    ; offset by 16 chars to get to the centre, since populating stack from right
 74+  A5EB 19               add hl,de
 75+  A5EC              buffer_bufferlinetoscreen0:
 76+  A5EC D9               exx                         ; hl is now buffer
 77+  A5ED 23               inc hl
 78+  A5EE 23               inc hl                      ; move hl forward 2 to skip first two blocks
 79+  A5EF F9               ld sp,hl                    ; do first fourteen for left hand side, sp pointing at buffer
 80+  A5F0 F1               pop af
 81+  A5F1 C1               pop bc
 82+  A5F2 D1               pop de
 83+  A5F3 DD E1            pop ix
 84+  A5F5 D9               exx                         ; hl is now screen
 85+  A5F6 08               ex af,af'
 86+  A5F7 F1               pop af
 87+  A5F8 C1               pop bc
 88+  A5F9 D1               pop de
 89+  A5FA F9               ld sp,hl                    ; sp pointing at screen
 90+  A5FB D5               push de
 91+  A5FC C5               push bc
 92+  A5FD F5               push af
 93+  A5FE 08               ex af,af'
 94+  A5FF D9               exx                         ; hl is now buffer
 95+  A600 DD E5            push ix
 96+  A602 D5               push de
 97+  A603 C5               push bc
 98+  A604 F5               push af
 99+  A605 1E 0E            ld e,14                    ; do another fourteen for right hand side
100+  A607 16 00            ld d,0
101+  A609 19               add hl,de
102+  A60A F9               ld sp,hl                    ; sp pointing at buffer
103+  A60B F1               pop af
104+  A60C C1               pop bc
105+  A60D D1               pop de
106+  A60E DD E1            pop ix
107+  A610                  ;pop ix
108+  A610 D9               exx                         ; hl is now screen
109+  A611 08               ex af,af'
110+  A612 1E 0E            ld e,14
111+  A614 16 00            ld d,0
112+  A616 19               add hl,de
113+  A617 F1               pop af
114+  A618 C1               pop bc
115+  A619 D1               pop de
116+  A61A                  ;pop iy
117+  A61A F9               ld sp,hl                    ; sp pointing at screen
118+  A61B                  ;push iy
119+  A61B D5               push de
120+  A61C C5               push bc
121+  A61D F5               push af
122+  A61E 08               ex af,af'
123+  A61F D9               exx                         ; hl is now buffer
124+  A620 DD E5            push ix
125+  A622 D5               push de
126+  A623 C5               push bc
127+  A624 F5               push af
128+  A625 1E 10            ld e,16
129+  A627 16 00            ld d,0
130+  A629 19               add hl,de
131+  A62A D9               exx                         ; hl is now screen
132+  A62B 1E 0E            ld e,14
133+  A62D 16 00            ld d,0
134+  A62F ED 52            sbc hl,de
135+  A631 24               inc h
136+  A632 7C               ld a,h
137+  A633 E6 07            and 0x07                    ; check if this is multiple of 8, if so, end of cell line
138+  A635 C2 EC A5         jp nz,buffer_bufferlinetoscreen0 ; next line in cell
139+  A638              buffer_bufferlinetoscreen1:
140+  A638 31 00 00         ld sp,0
141+  A63B D9               exx
142+  A63C C9               ret
143+  A63D
144+  A63D              ;
145+  A63D              ; Copies the buffer to the screen for updated lines. Use stack.
146+  A63D              ; Inputs: none
147+  A63D              ;
148+  A63D              buffer_buffertoscreen:
149+  A63D 3A A5 A5         ld a,(buffer_updateall)      ; get the all update flag
150+  A640 FE 00            cp 0
151+  A642 CA 4E A6         jp z,buffer_buffertoscreen2  ; if not set, draw only updated
152+  A645 CD 6F A6         call buffer_allbuffertoscreen ; otherwise, draw whole screen
153+  A648 21 A5 A5         ld hl,buffer_updateall
154+  A64B 36 00            ld (hl),0                    ; reset flag
155+  A64D C9               ret
156+  A64E              buffer_buffertoscreen2:
157+  A64E 06 15            ld b,21
158+  A650 FD 21 90 A5      ld iy,buffer_updatedlines    ; the location of the updated lines
159+  A654              buffer_buffertoscreen0:
160+  A654 FD 7E 00         ld a,(iy)
161+  A657 FE FF            cp 255
162+  A659 CA 6B A6         jp z,buffer_buffertoscreen1                       ; if this is 255, then we're at the end of the updated list
163+  A65C C5               push bc
164+  A65D FD E5            push iy
165+  A65F F3               di
166+  A660 CD C8 A5         call buffer_bufferlinetoscreen
167+  A663 FB               ei
168+  A664 FD E1            pop iy
169+  A666 C1               pop bc
170+  A667 FD 23            inc iy
171+  A669 10 E9            djnz buffer_buffertoscreen0
172+  A66B              buffer_buffertoscreen1:
173+  A66B CD 83 A6         call buffer_buffertoattrsfast
174+  A66E C9               ret
175+  A66F
176+  A66F              ;
177+  A66F              ; Copies the buffer to the screen. Use stack.
178+  A66F              ; Inputs: none
179+  A66F              ;
180+  A66F              buffer_allbuffertoscreen:
181+  A66F 06 15            ld b,21
182+  A671 3E 00            ld a,0
183+  A673              buffer_allbuffertoscreen0:
184+  A673 C5               push bc
185+  A674 F5               push af
186+  A675 F3               di
187+  A676 CD C8 A5         call buffer_bufferlinetoscreen
188+  A679 FB               ei
189+  A67A F1               pop af
190+  A67B C1               pop bc
191+  A67C 3C               inc a
192+  A67D 10 F4            djnz buffer_allbuffertoscreen0
193+  A67F
194+  A67F CD 83 A6         call buffer_buffertoattrsfast
195+  A682 C9               ret
196+  A683
197+  A683              ;
198+  A683              ; Copies the attrs buffer to screen with the stack
199+  A683              ;
200+  A683              buffer_buffertoattrsfast:
201+  A683 ED 73 F2 A6      ld (buffer_buffertoattrsfast1+1),sp ; this is some self-modifying code; stores the stack pointer in an ld sp,nn instruction at the end
202+  A687 3A F6 A6         ld a,(screen_offset)            ; get the screen offset in rows, so want *32
203+  A68A 11 20 00         ld de,32
204+  A68D CD 3A 80         call utilities_multiply
205+  A690 54 5D            ld de,hl
206+  A692 21 EE A1         ld hl,buffer_attr_buffer
207+  A695 19               add hl,de                       ; add the offset, start of attr buffer now in hl
208+  A696 D9               exx
209+  A697 21 50 58         ld hl,22528+80                  ; start of attr memory + 2 lines for score + 16 to start at right side
210+  A69A FD 21 8E A5      ld iy,buffer_tmp
211+  A69E FD 36 00 15      ld (iy),21              ; number of times to loop
212+  A6A2              buffer_buffertoattrsfast0:
213+  A6A2 D9               exx                         ; hl is now buffer
214+  A6A3 23               inc hl
215+  A6A4 23               inc hl                      ; move hl forward 2 to skip first two blocks
216+  A6A5 F9               ld sp,hl                    ; do first fourteen for left hand side, sp pointing at buffer
217+  A6A6 F1               pop af
218+  A6A7 C1               pop bc
219+  A6A8 D1               pop de
220+  A6A9 DD E1            pop ix
221+  A6AB D9               exx                         ; hl is now screen
222+  A6AC 08               ex af,af'
223+  A6AD F1               pop af
224+  A6AE C1               pop bc
225+  A6AF D1               pop de
226+  A6B0 F9               ld sp,hl                    ; sp pointing at screen
227+  A6B1 D5               push de
228+  A6B2 C5               push bc
229+  A6B3 F5               push af
230+  A6B4 08               ex af,af'
231+  A6B5 D9               exx                         ; hl is now buffer
232+  A6B6 DD E5            push ix
233+  A6B8 D5               push de
234+  A6B9 C5               push bc
235+  A6BA F5               push af
236+  A6BB 1E 0E            ld e,14                    ; do another fourteen for right hand side
237+  A6BD 16 00            ld d,0
238+  A6BF 19               add hl,de
239+  A6C0 F9               ld sp,hl                    ; sp pointing at buffer
240+  A6C1 F1               pop af
241+  A6C2 C1               pop bc
242+  A6C3 D1               pop de
243+  A6C4 DD E1            pop ix
244+  A6C6 D9               exx                         ; hl is now screen
245+  A6C7 08               ex af,af'
246+  A6C8 1E 0E            ld e,14
247+  A6CA 16 00            ld d,0
248+  A6CC 19               add hl,de
249+  A6CD F1               pop af
250+  A6CE C1               pop bc
251+  A6CF D1               pop de
252+  A6D0 F9               ld sp,hl                    ; sp pointing at screen
253+  A6D1 D5               push de
254+  A6D2 C5               push bc
255+  A6D3 F5               push af
256+  A6D4 08               ex af,af'
257+  A6D5 D9               exx                         ; hl is now buffer
258+  A6D6 DD E5            push ix
259+  A6D8 D5               push de
260+  A6D9 C5               push bc
261+  A6DA F5               push af
262+  A6DB 1E 10            ld e,16
263+  A6DD 16 00            ld d,0
264+  A6DF 19               add hl,de
265+  A6E0 D9               exx                         ; hl is now screen
266+  A6E1 11 12 00         ld de,18
267+  A6E4 19               add hl,de
268+  A6E5 FD 7E 00         ld a,(iy)
269+  A6E8 3D               dec a
270+  A6E9 FE 00            cp 0
271+  A6EB FD 77 00         ld (iy),a
272+  A6EE C2 A2 A6         jp nz,buffer_buffertoattrsfast0 ; do another row
273+  A6F1              buffer_buffertoattrsfast1:
274+  A6F1 31 00 00         ld sp,0
275+  A6F4 D9               exx
276+  A6F5 C9               ret
# file closed: screen/buffer.asm
 24   A6F6                  include "screen\screen.asm"
# file opened: screen/screen.asm
  1+  A6F6              screen_offset:
  2+  A6F6 00               defb 0                      ; offset from top of screen in lines
  3+  A6F7
  4+  A6F7              screen_tmp:
  5+  A6F7 00 00            defb 0,0                      ; temporary memory
  6+  A6F9
  7+  A6F9              screen_setscorecolours:
  8+  A6F9 21 80 B1         ld hl,score_colours
  9+  A6FC 11 00 58         ld de,22528                     ; attrs here
 10+  A6FF 01 40 00         ld bc,64
 11+  A702 ED B0            ldir
 12+  A704 C9               ret
 13+  A705
 14+  A705              screen_sethighscorecolours:
 15+  A705 21 C0 B1         ld hl,high_score_colours
 16+  A708 11 E0 5A         ld de,22528+736                 ; attrs here
 17+  A70B 01 20 00         ld bc,32
 18+  A70E ED B0            ldir
 19+  A710 C9               ret
 20+  A711
 21+  A711              ; Draw the screen
 22+  A711              ; Inputs:
 23+  A711              ; none
 24+  A711              ; Notes:
 25+  A711              ; The value held at screen_offset tells the screen how many rows to scroll down. Set to five to bottom out.
 26+  A711              screen_draw:
 27+  A711                  ;call clear_screen
 28+  A711 0E 00            ld c,0                      ; horiz
 29+  A713 06 00            ld b,0                      ; vert, 0 at top
 30+  A715 DD 21 2D AC      ld ix,level01               ; point ix at level data
 31+  A719 FD 21 EE A1      ld iy,buffer_attr_buffer    ; point iy at attr data
 32+  A71D              screen_draw0:
 33+  A71D DD 7E 00         ld a,(ix)                   ; load the block number
 34+  A720 C5               push bc                     ; store bc, contains loop count
 35+  A721 CD 83 A8         call screen_getattr         ; get the memory location for this cell's attr into hl
 36+  A724 7E               ld a,(hl)                   ; get the attr value at the address
 37+  A725 FD 77 00         ld (iy),a                   ; load the attr into memory
 38+  A728 DD 7E 00         ld a,(ix)                   ; load the block number
 39+  A72B CD 78 A8         call screen_getblock        ; get the block data into hl
 40+  A72E CD 5E A8         call screen_showchar        ; show this character here
 41+  A731 C1               pop bc                      ; get the loop counter back
 42+  A732 DD 23            inc ix                      ; increment level location
 43+  A734 FD 23            inc iy                      ; increment attr location
 44+  A736 0C               inc c                       ; increment horiz
 45+  A737 79               ld a,c
 46+  A738 FE 20            cp 32                       ; check if horiz has reach edge of screen
 47+  A73A C2 1D A7         jp nz,screen_draw0          ; if not, loop
 48+  A73D 0E 00            ld c,0                      ; if so, reset horiz
 49+  A73F 04               inc b                       ; increment vertical
 50+  A740 78               ld a,b
 51+  A741 FE 1D            cp 29                       ; check if at bottom
 52+  A743 C2 1D A7         jp nz,screen_draw0          ; if not, loop
 53+  A746 21 F7 A6         ld hl, screen_tmp
 54+  A749 36 09            ld (hl),9                   ; load the block number into memory
 55+  A74B DD 21 E2 AF      ld ix,level01rocks          ; rock memory
 56+  A74F CD B0 A7         call screen_initobjects     ; draw rocks
 57+  A752 21 F7 A6         ld hl, screen_tmp
 58+  A755 36 0C            ld (hl),12                  ; load the block number into memory
 59+  A757 DD 21 E2 B0      ld ix,level01missiles       ; missile memory
 60+  A75B CD B0 A7         call screen_initobjects     ; draw missiles
 61+  A75E 21 F7 A6         ld hl, screen_tmp
 62+  A761 36 08            ld (hl),08                  ; load the block number into memory
 63+  A763 DD 21 5B B1      ld ix,level01diamonds       ; diamond memory
 64+  A767 CD B0 A7         call screen_initobjects     ; draw diamonds
 65+  A76A 21 F7 A6         ld hl, screen_tmp
 66+  A76D 36 0E            ld (hl),14                  ; load the block number into memory
 67+  A76F DD 21 6B B1      ld ix,level01gems           ; gems memory
 68+  A773 CD B0 A7         call screen_initobjects     ; draw gems
 69+  A776 CD 7D A7         call screen_setuptext       ; draws text on the screen
 70+  A779 CD F3 BC         call scores_printscores     ; print the current scores
 71+  A77C C9               ret
 72+  A77D
 73+  A77D              ;
 74+  A77D              ; Sets up text on the screen
 75+  A77D              ;
 76+  A77D              screen_setuptext:
 77+  A77D CD 15 BD         call scores_showtable
 78+  A780 CD 05 A7         call screen_sethighscorecolours
 79+  A783 21 D6 80         ld hl, string_score1
 80+  A786 CD A6 84         call string_print
 81+  A789 21 DF 80         ld hl, string_scorenumbers1
 82+  A78C CD A6 84         call string_print
 83+  A78F 21 E8 80         ld hl, string_company
 84+  A792 CD A6 84         call string_print
 85+  A795 21 F9 80         ld hl, string_score2
 86+  A798 CD A6 84         call string_print
 87+  A79B 21 02 81         ld hl, string_scorenumbers2
 88+  A79E CD A6 84         call string_print
 89+  A7A1 21 EE 80         ld hl, string_credits
 90+  A7A4 CD A6 84         call string_print
 91+  A7A7 CD F9 A6         call screen_setscorecolours
 92+  A7AA C9               ret
 93+  A7AB
 94+  A7AB              ;
 95+  A7AB              ; Sets a line of colours
 96+  A7AB              ; Inputs:
 97+  A7AB              ; a - colour to set
 98+  A7AB              ; b - number to set
 99+  A7AB              ; de - start memory location
100+  A7AB              ;
101+  A7AB              screen_setcolours:
102+  A7AB 12               ld (de),a
103+  A7AC 13               inc de
104+  A7AD 10 FC            djnz screen_setcolours
105+  A7AF C9               ret
106+  A7B0
107+  A7B0              ;
108+  A7B0              ; Draw initial object positions
109+  A7B0              ; Inputs:
110+  A7B0              ; ix - memory location of objects
111+  A7B0              ; a - graphic
112+  A7B0              screen_initobjects:
113+  A7B0 DD 4E 00         ld c,(ix)                   ; get the horiz coord
114+  A7B3 79               ld a,c
115+  A7B4 FE FF            cp 255
116+  A7B6 CA DF A7         jp z,screen_initobjects2
117+  A7B9 DD 23            inc ix                      ; move to next
118+  A7BB DD 46 00         ld b,(ix)                   ; get the vert coord
119+  A7BE DD 23            inc ix
120+  A7C0 CD F1 A7         call screen_getcellattradress ; get the memory address of b,c attr into de
121+  A7C3 D5               push de
122+  A7C4 3A F7 A6         ld a,(screen_tmp)                  ; get the block number back
123+  A7C7 CD 83 A8         call screen_getattr         ; get the memory location for this cell's attr into hl
124+  A7CA D1               pop de
125+  A7CB 7E               ld a,(hl)                   ; get the attr value at the address
126+  A7CC 12               ld (de),a                   ; load the attr into memory
127+  A7CD 3A F7 A6         ld a,(screen_tmp)                  ; get the block number back
128+  A7D0 CD 78 A8         call screen_getblock        ; get the block data into hl
129+  A7D3 CD 5E A8         call screen_showchar        ; show this character here
130+  A7D6
131+  A7D6              screen_initobjects1:
132+  A7D6 DD 23            inc ix                      ; move past state
133+  A7D8 DD 23            inc ix
134+  A7DA DD 23            inc ix                      ; move past mem
135+  A7DC C3 B0 A7         jp screen_initobjects
136+  A7DF              screen_initobjects2:
137+  A7DF C9               ret
138+  A7E0
139+  A7E0
140+  A7E0              ;
141+  A7E0              ; Return character cell address offset of block at (b, c) ready for addition to screen  memory.
142+  A7E0              ; Inputs:
143+  A7E0              ; bc: coords
144+  A7E0              ; Outputs:
145+  A7E0              ; de: memory location
146+  A7E0              ;
147+  A7E0              screen_getcelladdress:
148+  A7E0 78               ld a,b      ; vertical position.
149+  A7E1 E6 18            and 24      ; which segment, 0, 1 or 2?
150+  A7E3 C6 40            add a,64    ; 64*256 = 16384, Spectrum's screen memory.
151+  A7E5 57               ld d,a      ; this is our high byte.
152+  A7E6 78               ld a,b      ; what was that vertical position again?
153+  A7E7 E6 07            and 7       ; which row within segment?
154+  A7E9 0F               rrca        ; multiply row by 32.
155+  A7EA 0F               rrca
156+  A7EB 0F               rrca
157+  A7EC 5F               ld e,a      ; low byte.
158+  A7ED 79               ld a,c      ; add on y coordinate.
159+  A7EE 83               add a,e     ; mix with low byte.
160+  A7EF 5F               ld e,a      ; address of screen position in de.
161+  A7F0 C9               ret
162+  A7F1
163+  A7F1              ;
164+  A7F1              ; Calculate buffer address of attribute for character at (b, c).
165+  A7F1              ; Inputs:
166+  A7F1              ; bc: coords
167+  A7F1              ; Outputs:
168+  A7F1              ; de: memory location
169+  A7F1              ;
170+  A7F1              screen_getcellattradress:
171+  A7F1 11 EE A1         ld de,buffer_attr_buffer ; memory is at base + horiz (c) + vert*32 (b)
172+  A7F4 69               ld l,c      ; x position.
173+  A7F5 26 00            ld h,0      ; 0 h
174+  A7F7 19               add hl,de
175+  A7F8 54 5D            ld de,hl    ; horiz done
176+  A7FA 78               ld a,b      ; do vert
177+  A7FB D5               push de
178+  A7FC C5               push bc
179+  A7FD 11 20 00         ld de,32
180+  A800 CD 3A 80         call utilities_multiply
181+  A803 C1               pop bc
182+  A804 D1               pop de
183+  A805 19               add hl,de
184+  A806 54 5D            ld de,hl    ; vert done
185+  A808 C9               ret
186+  A809
187+  A809              ;
188+  A809              ; Calculate buffer address of attribute for character at (b, c).
189+  A809              ; Inputs:
190+  A809              ; bc: coords
191+  A809              ; Outputs:
192+  A809              ; de: memory location
193+  A809              ;
194+  A809              screen_getscreenattradress:
195+  A809 11 00 58         ld de,22528 ; memory is at base + horiz (c) + vert*32 (b)
196+  A80C 69               ld l,c      ; x position.
197+  A80D 26 00            ld h,0      ; 0 h
198+  A80F 19               add hl,de
199+  A810 54 5D            ld de,hl    ; horiz done
200+  A812 78               ld a,b      ; do vert
201+  A813 D5               push de
202+  A814 C5               push bc
203+  A815 11 20 00         ld de,32
204+  A818 CD 3A 80         call utilities_multiply
205+  A81B C1               pop bc
206+  A81C D1               pop de
207+  A81D 19               add hl,de
208+  A81E 54 5D            ld de,hl    ; vert done
209+  A820 C9               ret
210+  A821
211+  A821              ;
212+  A821              ; Gets the attr memory location for a screen coord
213+  A821              ; Will overwrite bc
214+  A821              ; Inputs:
215+  A821              ; bc - screen coords
216+  A821              ; Outputs:
217+  A821              ; de - memory location
218+  A821              ; bc - character coords
219+  A821              ;
220+  A821              screen_getattraddressfromscreencoords:
221+  A821 78               ld a,b                          ; get the player block coords of current block
222+  A822 E6 F8            and 248                         ; find closest multiple of eight
223+  A824 0F               rrca
224+  A825 0F               rrca
225+  A826 0F               rrca                ; divide by 8
226+  A827 47               ld b,a
227+  A828 79               ld a,c
228+  A829 48               ld c,b                         ; swap b and c
229+  A82A E6 F8            and 248
230+  A82C 0F               rrca
231+  A82D 0F               rrca
232+  A82E 0F               rrca                ; divide by 8
233+  A82F 47               ld b,a
234+  A830 CD F1 A7         call screen_getcellattradress   ; work out memory location of current block attributes, memory in de
235+  A833 C9               ret
236+  A834
237+  A834
238+  A834              ; Gets the nearest cell coords for a screen coord
239+  A834              ; Will overwrite bc
240+  A834              ; Inputs:
241+  A834              ; bc - screen coords
242+  A834              ; Outputs:
243+  A834              ; bc - character coords
244+  A834              ;
245+  A834              screen_getcharcoordsfromscreencoords:
246+  A834 78               ld a,b                          ; get the player block coords of current block
247+  A835 E6 F8            and 248                         ; find closest multiple of eight
248+  A837 0F               rrca
249+  A838 0F               rrca
250+  A839 0F               rrca                ; divide by 8
251+  A83A 47               ld b,a
252+  A83B 79               ld a,c
253+  A83C 48               ld c,b                         ; swap b and c
254+  A83D E6 F8            and 248
255+  A83F 0F               rrca
256+  A840 0F               rrca
257+  A841 0F               rrca                ; divide by 8
258+  A842 47               ld b,a
259+  A843 C9               ret
260+  A844
261+  A844              ; Gets the screen coords for a cell coord
262+  A844              ; Will overwrite bc
263+  A844              ; Inputs:
264+  A844              ; bc - char coords
265+  A844              ; Outputs:
266+  A844              ; bc - screen coords
267+  A844              ;
268+  A844              screen_getscreencoordsfromcharcoords:
269+  A844 78               ld a,b                          ; get the player block coords of current block
270+  A845 07               rlca
271+  A846 07               rlca
272+  A847 07               rlca                ; multiply by 8
273+  A848 47               ld b,a
274+  A849 79               ld a,c
275+  A84A 48               ld c,b                         ; swap b and c
276+  A84B 07               rlca
277+  A84C 07               rlca
278+  A84D 07               rlca                ; divide by 8
279+  A84E 47               ld b,a
280+  A84F C9               ret
281+  A850
282+  A850              ;
283+  A850              ; Get buffer address for a character at b,c - b vert
284+  A850              ; Buffer memory is stored as sequential block
285+  A850              ; Char at 0,0 is stored 0,32,64...; 0,1 is stored at 1,33,65
286+  A850              ; Inputs:
287+  A850              ; bc - coords
288+  A850              ; Outputs:
289+  A850              ; de - memory location of first byte
290+  A850              screen_getbufferaddress:
291+  A850 21 EE 84         ld hl, buffer_buffer    ; first get screen buffer start
292+  A853 50               ld d,b                  ; then work out vertical offset
293+  A854 1E 00            ld e,0                  ; mult by 256, low byte becomes high byte, de now holds result
294+  A856 19               add hl,de               ; add to base
295+  A857 59               ld e,c                  ; then add horizontal offset (c)
296+  A858 16 00            ld d,0
297+  A85A 19               add hl,de               ; add to base
298+  A85B 54 5D            ld de,hl
299+  A85D C9               ret
300+  A85E
301+  A85E              ;
302+  A85E              ; Display character hl at (b, c) to buffer.
303+  A85E              ; Stored sequentially
304+  A85E              ; Inputs:
305+  A85E              ; hl: block address
306+  A85E              ; bc: coords
307+  A85E              ;
308+  A85E              screen_showchar:
309+  A85E 3E 00            ld a,0
310+  A860 E5               push hl
311+  A861 CD 50 A8         call screen_getbufferaddress ; get the current screen buffer pointer
312+  A864 E1               pop hl
313+  A865 06 08            ld b,8              ; number of pixels high.
314+  A867              screen_showchar0:
315+  A867 7E               ld a,(hl)           ; source graphic.
316+  A868 12               ld (de),a           ; transfer to screen.
317+  A869 23               inc hl              ; next piece of data.
318+  A86A E5               push hl             ; store hl
319+  A86B 62 6B            ld hl,de            ; put de in hl
320+  A86D 1E 20            ld e,32            ; inc memory by 32, so load 32 into de
321+  A86F 16 00            ld d,0
322+  A871 19               add hl,de              ; add de to hl
323+  A872 54 5D            ld de,hl            ; load back to de
324+  A874 E1               pop hl              ; restore hl
325+  A875
326+  A875 10 F0            djnz screen_showchar0 ; repeat
327+  A877 C9               ret
328+  A878
329+  A878
330+  A878              ;
331+  A878              ; Get cell graphic.
332+  A878              ; Inputs:
333+  A878              ; a: block
334+  A878              ; Outputs:
335+  A878              ; hl: memory
336+  A878              ;
337+  A878              screen_getblock:
338+  A878 07               rlca                        ; multiply block number by eight.
339+  A879 07               rlca
340+  A87A 07               rlca
341+  A87B 5F               ld e,a                      ; displacement to graphic address.
342+  A87C 16 00            ld d,0                      ; no high byte.
343+  A87E 21 E0 B1         ld hl,sprites               ; address of character blocks.
344+  A881 19               add hl,de                   ; point to block.
345+  A882 C9               ret
346+  A883
347+  A883              ;
348+  A883              ; Get cell attribute.
349+  A883              ; Inputs:
350+  A883              ; a: block
351+  A883              ; Outputs:
352+  A883              ; hl: memory
353+  A883              ;
354+  A883              screen_getattr:
355+  A883 5F               ld e,a                      ; displacement to attribute address.
356+  A884 16 00            ld d,0                      ; no high byte.
357+  A886 21 58 B2         ld hl,sprite_attrs          ; address of block attributes.
358+  A889 19               add hl,de                   ; point to attribute.
359+  A88A C9               ret
360+  A88B
# file closed: screen/screen.asm
 25   A88B                  include "screen\sprites.asm"
# file opened: screen/sprites.asm
  1+  A88B              ;
  2+  A88B              ; This is the sprite routine and expects coordinates in (c ,b) form,
  3+  A88B              ; where c is the vertical coord from the top of the screen (0-176), and
  4+  A88B              ; b is the horizontal coord from the left of the screen (0 to 240).
  5+  A88B              ; Sprite data is stored as you'd expect in its unshifted form as this
  6+  A88B              ; routine takes care of all the shifting itself. This means that sprite
  7+  A88B              ; handling isn't particularly fast but the graphics only take 1/8th of the
  8+  A88B              ; space they would require in pre-shifted form.
  9+  A88B              ; Inputs:
 10+  A88B              ; hl - sprite data
 11+  A88B              ; bc - screen coords
 12+  A88B              ;
 13+  A88B              sprites_drawsprite7:
 14+  A88B EE 07            xor 7               ; complement last 3 bits.
 15+  A88D 3C               inc a               ; add one for luck!
 16+  A88E              sprites_drawsprite3:
 17+  A88E CB 11            rl c                ; ...into middle byte...
 18+  A890 CB 12            rl d                ; ...and finally into left character cell.
 19+  A892 3D               dec a               ; count shifts we've done.
 20+  A893 20 F9            jr nz,sprites_drawsprite3 ; return until all shifts complete.
 21+  A895                                      ; Line of sprite image is now in e + c + d, we need it in form c + d + e.
 22+  A895 79               ld a,c              ; left edge of image is currently in e.
 23+  A896 4A               ld c,d              ; put right edge there instead.
 24+  A897 57               ld d,a              ; and the left edge back into c.
 25+  A898 18 25            jr sprites_drawsprite0   ; we've done the switch so transfer to screen.
 26+  A89A              sprites_drawsprite:
 27+  A89A ED 43 FF A8      ld (dispx),bc       ; store coords in dispx for now.
 28+  A89E E5               push hl
 29+  A89F CD DD A8         call sprites_scadd  ; calculate screen address.
 30+  A8A2 E1               pop hl
 31+  A8A3 3E 08            ld a,8              ; height of sprite in pixels.
 32+  A8A5              sprites_drawsprite1:
 33+  A8A5 08               ex af,af'           ; store loop counter.
 34+  A8A6 D5               push de             ; store screen address.
 35+  A8A7 4E               ld c,(hl)           ; first sprite graphic.
 36+  A8A8 23               inc hl              ; increment poiinter to sprite data.
 37+  A8A9 22 01 A9         ld (sprtmp),hl      ; store it for later.
 38+  A8AC 16 00            ld d,0              ; blank right byte for now.
 39+  A8AE 78               ld a,b              ; b holds y position.
 40+  A8AF E6 07            and 7               ; how are we straddling character cells?
 41+  A8B1 28 0C            jr z,sprites_drawsprite0 ; we're not straddling them, don't bother shifting.
 42+  A8B3 FE 05            cp 5                ; 5 or more right shifts needed?
 43+  A8B5 30 D4            jr nc,sprites_drawsprite7 ; yes, shift from left as it's quicker.
 44+  A8B7 A7               and a               ; oops, carry flag is set so clear it.
 45+  A8B8              sprites_drawsprite2:
 46+  A8B8 CB 19            rr c                ; rotate left byte right...
 47+  A8BA CB 1A            rr d                ; ...into right byte.
 48+  A8BC 3D               dec a               ; one less shift to do.
 49+  A8BD 20 F9            jr nz,sprites_drawsprite2 ; return until all shifts complete.
 50+  A8BF              sprites_drawsprite0:
 51+  A8BF E1               pop hl              ; pop screen address from stack.
 52+  A8C0 7E               ld a,(hl)           ; what's there already.
 53+  A8C1 A9               xor c               ; merge in image data.
 54+  A8C2 77               ld (hl),a           ; place onto screen.
 55+  A8C3 23               inc hl
 56+  A8C4 7E               ld a,(hl)           ; what's already there.
 57+  A8C5 AA               xor d               ; right edge of sprite image data.
 58+  A8C6 77               ld (hl),a           ; plonk it on screen.
 59+  A8C7 3A FF A8         ld a,(dispx)        ; vertical coordinate.
 60+  A8CA 3C               inc a               ; next line down.
 61+  A8CB 32 FF A8         ld (dispx),a        ; store new position.
 62+  A8CE 2B               dec hl
 63+  A8CF 11 20 00         ld de,32            ; add 32 to get to the next row
 64+  A8D2 19               add hl,de           ; add 32
 65+  A8D3              sprites_drawsprite6:
 66+  A8D3 EB               ex de,hl            ; screen address in de.
 67+  A8D4 2A 01 A9         ld hl,(sprtmp)      ; restore graphic address.
 68+  A8D7 08               ex af,af'           ; restore loop counter.
 69+  A8D8 3D               dec a               ; decrement it.
 70+  A8D9 C2 A5 A8         jp nz,sprites_drawsprite1 ; not reached bottom of sprite yet to repeat.
 71+  A8DC C9               ret                 ; job done.
 72+  A8DD
 73+  A8DD              ;
 74+  A8DD              ; This routine returns a buffer address for (c, b) in de (c vert).
 75+  A8DD              ; For example: 0,0 will be at memory offset 0
 76+  A8DD              ; 1,0 (1 down) will be at memory offset 1
 77+  A8DD              ; 0,7 will be at memory offset 0
 78+  A8DD              ; 9,1 will be at memory offset 8+1
 79+  A8DD              ; 8,0 will be at memory offset 256
 80+  A8DD              ; 9,0 will be at memory offset 257
 81+  A8DD              ; Outputs:
 82+  A8DD              ; de - coords
 83+  A8DD              ;
 84+  A8DD              sprites_scadd:
 85+  A8DD 79               ld a,c               ; calculate vertical offset
 86+  A8DE E6 F8            and 248             ;  to get nearest multiple of 8
 87+  A8E0 0F               rrca
 88+  A8E1 0F               rrca
 89+  A8E2 0F               rrca                ; divide by 8
 90+  A8E3 67               ld h,a
 91+  A8E4 78               ld a,b               ; calculate horizontal offset
 92+  A8E5 E6 F8            and 248             ;  to get nearest multiple of 8
 93+  A8E7 0F               rrca
 94+  A8E8 0F               rrca
 95+  A8E9 0F               rrca                ; divide by 8
 96+  A8EA 6F               ld l,a
 97+  A8EB C5               push bc             ; store the screen coords
 98+  A8EC 44 4D            ld bc,hl            ; load bc with the character coords
 99+  A8EE CD 50 A8         call screen_getbufferaddress
100+  A8F1 C1               pop bc              ; get back screen coords, de is now memory of character
101+  A8F2 79               ld a,c              ; now add the vertical within the cell
102+  A8F3 E6 07            and 7
103+  A8F5 0F               rrca                ; multiply by 32.
104+  A8F6 0F               rrca
105+  A8F7 0F               rrca
106+  A8F8 6F               ld l,a
107+  A8F9 26 00            ld h,0
108+  A8FB 19               add hl,de
109+  A8FC 54 5D            ld de,hl
110+  A8FE C9               ret
111+  A8FF
112+  A8FF 00           dispx   defb 0           ; general-use coordinates.
113+  A900 00           dispy   defb 0
114+  A901 00 00        sprtmp  defb 0,0           ; sprite temporary address.
115+  A903
# file closed: screen/sprites.asm
 26   A903                  include "screen\titlescreen.asm"
# file opened: screen/titlescreen.asm
  1+  A903              ;
  2+  A903              ; Draws the title screen
  3+  A903              ;
  4+  A903              titlescreen_show:
  5+  A903 CD 7B A9         call titlescreen_init
  6+  A906 CD 24 A9         call titlescreen_drawtitle
  7+  A909 3E FA            ld a,250                              ; wait for 200 frames
  8+  A90B CD 52 80         call utilities_waitforkey_forframes   ; wait for keypress
  9+  A90E 7B               ld a,e
 10+  A90F FE 01            cp 1                                  ; was anything pressed?
 11+  A911 C8               ret z                                 ; end titlescreen if so
 12+  A912
 13+  A912 CD 8E A9         call titlescreen_alt_init             ; otherwise, draw alt screen
 14+  A915 CD 40 A9         call titlescreen_alt_drawtitle
 15+  A918 3E FA            ld a,250                              ; wait for 200 frames
 16+  A91A CD 52 80         call utilities_waitforkey_forframes   ; wait for keypress
 17+  A91D 7B               ld a,e
 18+  A91E FE 01            cp 1                                  ; was anything pressed?
 19+  A920 C2 03 A9         jp nz,titlescreen_show                ; start again if not
 20+  A923 C9               ret
 21+  A924
 22+  A924              ;
 23+  A924              ; Draws the iconic logo
 24+  A924              ;
 25+  A924              titlescreen_drawtitle:
 26+  A924 06 66            ld b,102              ; number of points
 27+  A926 DD 21 9B A9      ld ix,titlescreen_logo_data
 28+  A92A              titlescreen_drawtitle0:
 29+  A92A C5               push bc
 30+  A92B DD 4E 00         ld c,(ix)                   ; got horiz
 31+  A92E DD 23            inc ix
 32+  A930 DD 46 00         ld b,(ix)                   ; got vert
 33+  A933 DD 23            inc ix
 34+  A935 CD 09 A8         call screen_getscreenattradress ; memory in de
 35+  A938 13               inc de                      ; slide one to the right, since I'm too lazy to change the data
 36+  A939 3E 13            ld a,19
 37+  A93B 12               ld (de),a
 38+  A93C C1               pop bc
 39+  A93D 10 EB            djnz titlescreen_drawtitle0 ; loop if we're not at the end
 40+  A93F C9               ret
 41+  A940
 42+  A940              ;
 43+  A940              ; Draws the alternate title screen
 44+  A940              ;
 45+  A940              titlescreen_alt_drawtitle:
 46+  A940 21 25 81         ld hl,string_alttitlescreen_1
 47+  A943 CD A6 84         call string_print
 48+  A946 21 31 81         ld hl,string_alttitlescreen_2
 49+  A949 CD A6 84         call string_print
 50+  A94C 21 2C 82         ld hl,string_alttitlescreen_3
 51+  A94F CD A6 84         call string_print
 52+  A952 06 20            ld b,32
 53+  A954 3E 43            ld a,67
 54+  A956 11 00 58         ld de,22528                         ; top row attrs here
 55+  A959 CD AB A7         call screen_setcolours
 56+  A95C 06 20            ld b,32
 57+  A95E 3E 46            ld a,70
 58+  A960 11 A0 59         ld de,22528+416                     ; 13th row attrs here
 59+  A963 CD AB A7         call screen_setcolours
 60+  A966 06 20            ld b,32
 61+  A968 3E 43            ld a,67
 62+  A96A 11 20 5A         ld de,22528+544                         ; 17th row attrs here
 63+  A96D CD AB A7         call screen_setcolours
 64+  A970 06 20            ld b,32
 65+  A972 3E 42            ld a,66
 66+  A974 11 A0 5A         ld de,22528+672                         ; 21st row attrs here
 67+  A977 CD AB A7         call screen_setcolours
 68+  A97A C9               ret
 69+  A97B
 70+  A97B              ;
 71+  A97B              ; Initialises the screen
 72+  A97B              ;
 73+  A97B              titlescreen_init:
 74+  A97B              ; We want a black screen.
 75+  A97B 3E 0B            ld a,11             ; magenta ink (7) on blue paper (0),
 76+  A97D                                      ; bright (64).
 77+  A97D CD 67 80         call utilities_clearscreen
 78+  A980 32 8D 5C         ld (23693),a        ; set our screen colours.
 79+  A983 3E 01            ld a,1              ; 2 is the code for red.
 80+  A985 D3 FE            out (254),a         ; write to port 254.
 81+  A987
 82+  A987 21 0B 81         ld hl,string_titlescreen_copyright
 83+  A98A CD A6 84         call string_print
 84+  A98D
 85+  A98D C9               ret
 86+  A98E
 87+  A98E              ;
 88+  A98E              ; Initialises the screen
 89+  A98E              ;
 90+  A98E              titlescreen_alt_init:
 91+  A98E              ; We want a black screen.
 92+  A98E 3E 47            ld a,71             ; white ink (7) on black paper (0),
 93+  A990                                      ; bright (64).
 94+  A990 CD 67 80         call utilities_clearscreen
 95+  A993 32 8D 5C         ld (23693),a        ; set our screen colours.
 96+  A996 3E 00            ld a,0              ; 2 is the code for red.
 97+  A998 D3 FE            out (254),a         ; write to port 254.
 98+  A99A
 99+  A99A C9               ret
100+  A99B
101+  A99B              ;
102+  A99B              ; Horiz, vert
103+  A99B              ;
104+  A99B              titlescreen_logo_data:
105+  A99B 08 00 09 00      defb 8,0,9,0,10,0,12,0,15,0,17,0,18,0,19,0
105+  A99F 0A 00 0C 00
105+  A9A3 0F 00 11 00
105+  A9A7 12 00 13 00
106+  A9AB 09 01 0C 01      defb 9,1,12,1,15,1,17,1
106+  A9AF 0F 01 11 01
107+  A9B3 09 02 0C 02      defb 9,2,12,2,13,2,14,2,15,2,17,2,18,2,19,2
107+  A9B7 0D 02 0E 02
107+  A9BB 0F 02 11 02
107+  A9BF 12 02 13 02
108+  A9C3 09 03 0C 03      defb 9,3,12,3,15,3,17,3
108+  A9C7 0F 03 11 03
109+  A9CB 09 04 0C 04      defb 9,4,12,4,15,4,17,4,18,4,19,4
109+  A9CF 0F 04 11 04
109+  A9D3 12 04 13 04
110+  A9D7 00 06 01 06      defb 0,6,1,6,2,6,3,6,4,6,5,6,6,6,7,6,8,6,9,6,10,6,11,6
110+  A9DB 02 06 03 06
110+  A9DF 04 06 05 06
110+  A9E3 06 06 07 06
110+  A9E7 08 06 09 06
110+  A9EB 0A 06 0B 06
111+  A9EF 10 06 11 06      defb 16,6,17,6,18,6,19,6,20,6,21,6,22,6,23,6,24,6,25,6,26,6,27,6
111+  A9F3 12 06 13 06
111+  A9F7 14 06 15 06
111+  A9FB 16 06 17 06
111+  A9FF 18 06 19 06
111+  AA03 1A 06 1B 06
112+  AA07 02 07 02 08      defb 2,7,2,8,2,9,2,10,2,11,2,12,2,13,2,14,2,15,2,16,2,17,2,18,2,19,2,20
112+  AA0B 02 09 02 0A
112+  AA0F 02 0B 02 0C
112+  AA13 02 0D 02 0E
112+  AA17 02 0F 02 10
112+  AA1B 02 11 02 12
112+  AA1F 02 13 02 14
113+  AA23 19 07 19 08      defb 25,7,25,8,25,9,25,10,25,11,25,12,25,13,25,14,25,15,25,16,25,17,25,18,25,19,25,20
113+  AA27 19 09 19 0A
113+  AA2B 19 0B 19 0C
113+  AA2F 19 0D 19 0E
113+  AA33 19 0F 19 10
113+  AA37 19 11 19 12
113+  AA3B 19 13 19 14
114+  AA3F 03 0B 04 0B      defb 3,11,4,11,5,11,6,11,7,11,8,11,9,11,10,11,11,11
114+  AA43 05 0B 06 0B
114+  AA47 07 0B 08 0B
114+  AA4B 09 0B 0A 0B
114+  AA4F 0B 0B
115+  AA51 0B 07 0B 08      defb 11,7,11,8,11,9,11,10
115+  AA55 0B 09 0B 0A
116+  AA59 10 0D 10 0F      defb 16,13,16,15,16,16,16,17,16,18,16,19,16,20
116+  AA5D 10 10 10 11
116+  AA61 10 12 10 13
116+  AA65 10 14
117+  AA67
# file closed: screen/titlescreen.asm
 27   AA67                  include "screen\lifescreen.asm"
# file opened: screen/lifescreen.asm
  1+  AA67              ;
  2+  AA67              ; Draws the life remaining screen
  3+  AA67              ;
  4+  AA67              lifescreen_draw:
  5+  AA67 CD AD AA         call lifescreen_init
  6+  AA6A
  7+  AA6A 3A C4 B7         ld a,(game_currentplayer)             ; get the current player
  8+  AA6D C6 30            add 48                                ; add 48 to get char
  9+  AA6F 21 32 83         ld hl,string_lifescreen_player+10
 10+  AA72 77               ld (hl),a                             ; load this to the string we're about to show
 11+  AA73
 12+  AA73 21 28 83         ld hl,string_lifescreen_player
 13+  AA76 CD A6 84         call string_print
 14+  AA79
 15+  AA79 3A FB B7         ld a,(player+9)                       ; get the current player lives
 16+  AA7C C6 30            add 48                                ; add 48 to get the character
 17+  AA7E FE 31            cp 49
 18+  AA80 C2 93 AA         jp nz,lifescreen_draw0
 19+  AA83 21 42 83         ld hl,string_lifescreen_lastman
 20+  AA86
 21+  AA86 06 08            ld b,8
 22+  AA88 3E 0A            ld a,10                                ; set red
 23+  AA8A 11 6C 58         ld de,22528+108                        ; attrs here
 24+  AA8D CD AB A7         call screen_setcolours
 25+  AA90
 26+  AA90 C3 9A AA         jp lifescreen_draw1
 27+  AA93              lifescreen_draw0:
 28+  AA93 21 37 83         ld hl,string_lifescreen_lives+2       ; not last man, so use the normal view
 29+  AA96 77               ld (hl),a                             ; load this to the string we're about to show
 30+  AA97 21 35 83         ld hl,string_lifescreen_lives
 31+  AA9A              lifescreen_draw1:
 32+  AA9A CD A6 84         call string_print
 33+  AA9D
 34+  AA9D 3E 86            ld a,134
 35+  AA9F 11 0B 58         ld de, 22528+11     ; get the colour for the top text
 36+  AAA2 06 0A            ld b,10
 37+  AAA4 CD AB A7         call screen_setcolours
 38+  AAA7
 39+  AAA7 3E 64            ld a,100                              ; wait for 200 frames
 40+  AAA9 CD 52 80         call utilities_waitforkey_forframes   ; wait for keypress
 41+  AAAC
 42+  AAAC C9               ret
 43+  AAAD
 44+  AAAD              ;
 45+  AAAD              ; Initialises the screen
 46+  AAAD              ;
 47+  AAAD              lifescreen_init:
 48+  AAAD              ; We want a blue screen.
 49+  AAAD                  ;call $0D6B
 50+  AAAD 3E 0E            ld a,14             ; yellow ink (6) on blue paper (1),
 51+  AAAF                                      ; bright (64).
 52+  AAAF CD 67 80         call utilities_clearscreen
 53+  AAB2 32 8D 5C         ld (23693),a        ; set our screen colours.
 54+  AAB5 3E 01            ld a,1              ; 1 is the code for blue.
 55+  AAB7 D3 FE            out (254),a         ; write to port 254.
 56+  AAB9                  ;call 3503           ; ROM routine - clears screen, opens chan 2.
 57+  AAB9
 58+  AAB9 C9               ret
# file closed: screen/lifescreen.asm
 28   AABA                  include "screen\gameover.asm"
# file opened: screen/gameover.asm
  1+  AABA              ;
  2+  AABA              ; Draws the game over screen
  3+  AABA              ;
  4+  AABA              gameover_draw:
  5+  AABA CD 29 BD         call scores_processhighscores
  6+  AABD
  7+  AABD              gameover_draw0:
  8+  AABD CD FD AA         call gameover_enterhighscores
  9+  AAC0
 10+  AAC0 CD 9B AB         call gameover_init
 11+  AAC3
 12+  AAC3 21 4D 83         ld hl,string_gameoverscreen_gameover
 13+  AAC6 CD A6 84         call string_print
 14+  AAC9
 15+  AAC9 21 59 83         ld hl,string_gameoverscreen_copyright
 16+  AACC CD A6 84         call string_print
 17+  AACF
 18+  AACF CD E0 AA         call gameover_commontext
 19+  AAD2
 20+  AAD2 06 0B            ld b,11
 21+  AAD4 3E 42            ld a,66
 22+  AAD6 11 2B 58         ld de,22528+43                         ; attrs here
 23+  AAD9 CD AB A7         call screen_setcolours
 24+  AADC CD 47 80         call utilities_waitforkey   ; wait for keypress
 25+  AADF
 26+  AADF C9               ret
 27+  AAE0
 28+  AAE0              ;
 29+  AAE0              ; Draws text shared by the game over and high score screens
 30+  AAE0              ;
 31+  AAE0              gameover_commontext:
 32+  AAE0 CD 7D A7         call screen_setuptext       ; show scores
 33+  AAE3 CD F3 BC         call scores_printscores     ; print the current scores
 34+  AAE6
 35+  AAE6 21 87 83         ld hl,string_gameover_credits
 36+  AAE9 CD A6 84         call string_print
 37+  AAEC
 38+  AAEC 21 73 83         ld hl,string_gameoverscreen_bestscores
 39+  AAEF CD A6 84         call string_print
 40+  AAF2
 41+  AAF2 06 20            ld b,32
 42+  AAF4 3E 45            ld a,69
 43+  AAF6 11 C0 5A         ld de,22528+704                         ; attrs here
 44+  AAF9 CD AB A7         call screen_setcolours
 45+  AAFC
 46+  AAFC C9               ret
 47+  AAFD
 48+  AAFD              ;
 49+  AAFD              ; If required, enter highscore
 50+  AAFD              ;
 51+  AAFD              gameover_enterhighscores:
 52+  AAFD                  ; check if we need to enter initial
 53+  AAFD 3A 28 BD         ld a,(scores_highscoretmp)
 54+  AB00 FE 00            cp 0
 55+  AB02 C8               ret z
 56+  AB03 CD 31 AB         call gameover_enterhighscores_init
 57+  AB06 3A 28 BD         ld a,(scores_highscoretmp)
 58+  AB09 3D               dec a
 59+  AB0A 3D               dec a
 60+  AB0B 3D               dec a                                   ; get high score location back to position of name
 61+  AB0C 16 00            ld d,0
 62+  AB0E 5F               ld e,a
 63+  AB0F 21 AF BC         ld hl,scores_table
 64+  AB12 19               add hl,de                               ; load memory into hl
 65+  AB13 08               ex af,af'
 66+  AB14 06 0F            ld b,15
 67+  AB16 CD 82 80         call utilities_pauseforframes           ; pause for a little bit
 68+  AB19 06 03            ld b,3                                  ; collect three chars
 69+  AB1B              gameover_draw2:
 70+  AB1B C5               push bc
 71+  AB1C E5               push hl
 72+  AB1D CD 86 80         call utilities_readkey               ; get key into a
 73+  AB20 E1               pop hl
 74+  AB21 77               ld (hl),a
 75+  AB22 23               inc hl
 76+  AB23 E5               push hl
 77+  AB24 CD 15 BD         call scores_showtable
 78+  AB27 E1               pop hl
 79+  AB28 06 0F            ld b,15
 80+  AB2A CD 82 80         call utilities_pauseforframes
 81+  AB2D C1               pop bc
 82+  AB2E 10 EB            djnz gameover_draw2
 83+  AB30 C9               ret
 84+  AB31
 85+  AB31              ;
 86+  AB31              ; Displays the screen text for high score entry
 87+  AB31              ;
 88+  AB31              gameover_enterhighscores_init:
 89+  AB31
 90+  AB31 CD 9B AB         call gameover_init
 91+  AB34 CD E0 AA         call gameover_commontext
 92+  AB37
 93+  AB37 21 93 83         ld hl,string_highscore_congratulations
 94+  AB3A CD A6 84         call string_print
 95+  AB3D
 96+  AB3D 3A C4 B7         ld a,(game_currentplayer)
 97+  AB40 FE 01            cp 1
 98+  AB42 21 A5 83         ld hl,string_highscore_player1
 99+  AB45 C3 4B AB         jp gameover_enterhighscores_init1
100+  AB48              gameover_enterhighscores_init0:
101+  AB48 21 B0 83         ld hl,string_highscore_player2
102+  AB4B              gameover_enterhighscores_init1:
103+  AB4B CD A6 84         call string_print
104+  AB4E 06 60            ld b,96
105+  AB50 3E 43            ld a,67
106+  AB52 11 A0 58         ld de,22528+160                         ; attrs here
107+  AB55 CD AB A7         call screen_setcolours
108+  AB58
109+  AB58 21 BB 83         ld hl,string_highscore_youhaveearned
110+  AB5B CD A6 84         call string_print
111+  AB5E
112+  AB5E 3A 28 BD         ld a,(scores_highscoretmp)
113+  AB61 FE 05            cp 5
114+  AB63 CA 71 AB         jp z, gameover_enterhighscores_init2    ; first place
115+  AB66 FE 11            cp 17
116+  AB68 CA 77 AB         jp z, gameover_enterhighscores_init3    ; 2nd place
117+  AB6B 21 F7 83         ld hl,string_highscore_place3           ; 3rd place
118+  AB6E C3 7D AB         jp gameover_enterhighscores_init4
119+  AB71              gameover_enterhighscores_init2
120+  AB71 21 CD 83         ld hl,string_highscore_place1
121+  AB74 C3 7D AB         jp gameover_enterhighscores_init4
122+  AB77              gameover_enterhighscores_init3
123+  AB77 21 E2 83         ld hl,string_highscore_place2
124+  AB7A C3 7D AB         jp gameover_enterhighscores_init4
125+  AB7D              gameover_enterhighscores_init4
126+  AB7D CD A6 84         call string_print
127+  AB80
128+  AB80 06 60            ld b,96
129+  AB82 3E 42            ld a,66
130+  AB84 11 40 59         ld de,22528+320                         ; attrs here
131+  AB87 CD AB A7         call screen_setcolours
132+  AB8A
133+  AB8A 21 0C 84         ld hl,string_highscore_pleaseenter
134+  AB8D CD A6 84         call string_print
135+  AB90
136+  AB90 06 60            ld b,96
137+  AB92 3E 46            ld a,70
138+  AB94 11 E0 59         ld de,22528+480                         ; attrs here
139+  AB97 CD AB A7         call screen_setcolours
140+  AB9A C9               ret
141+  AB9B
142+  AB9B              ;
143+  AB9B              ; Initialises the screen
144+  AB9B              ;
145+  AB9B              gameover_init:
146+  AB9B              ; We want a black screen.
147+  AB9B 3E 47            ld a,71             ; white ink (7) on black paper (0),
148+  AB9D                                      ; bright (64).
149+  AB9D CD 67 80         call utilities_clearscreen
150+  ABA0 32 8D 5C         ld (23693),a        ; set our screen colours.
151+  ABA3 3E 00            ld a,0              ; 2 is the code for red.
152+  ABA5 D3 FE            out (254),a         ; write to port 254.
153+  ABA7 C9               ret
# file closed: screen/gameover.asm
 29   ABA8                  include "screen\endlevel.asm"
# file opened: screen/endlevel.asm
  1+  ABA8              ;
  2+  ABA8              ; Draws the level transition screen
  3+  ABA8              ;
  4+  ABA8              endlevel_draw:
  5+  ABA8 CD 20 AC         call endlevel_init
  6+  ABAB CD 09 AC         call endlevel_commontext
  7+  ABAE
  8+  ABAE 21 93 83         ld hl,string_highscore_congratulations
  9+  ABB1 CD A6 84         call string_print
 10+  ABB4
 11+  ABB4 3A C4 B7         ld a,(game_currentplayer)
 12+  ABB7 FE 01            cp 1
 13+  ABB9 21 A5 83         ld hl,string_highscore_player1
 14+  ABBC C3 C2 AB         jp endlevel_init1
 15+  ABBF              endlevel_init0:
 16+  ABBF 21 B0 83         ld hl,string_highscore_player2
 17+  ABC2              endlevel_init1:
 18+  ABC2 CD A6 84         call string_print
 19+  ABC5
 20+  ABC5 21 29 84         ld hl,string_endlevel_youhaveearned
 21+  ABC8 CD A6 84         call string_print
 22+  ABCB 21 3B 84         ld hl, string_endlevel_bonus1
 23+  ABCE CD A6 84         call string_print
 24+  ABD1 21 68 84         ld hl, string_endlevel_points1
 25+  ABD4 CD A6 84         call string_print
 26+  ABD7 21 94 84         ld hl, string_endlevel_anothergo
 27+  ABDA CD A6 84         call string_print
 28+  ABDD
 29+  ABDD 06 20            ld b,32
 30+  ABDF 3E 63            ld a,99
 31+  ABE1 11 60 59         ld de,22528+352                         ; attrs here
 32+  ABE4 CD AB A7         call screen_setcolours
 33+  ABE7
 34+  ABE7 06 20            ld b,32
 35+  ABE9 3E 65            ld a,101
 36+  ABEB 11 A0 59         ld de,22528+416                         ; attrs here
 37+  ABEE CD AB A7         call screen_setcolours
 38+  ABF1
 39+  ABF1 06 20            ld b,32
 40+  ABF3 3E 63            ld a,99
 41+  ABF5 11 E0 59         ld de,22528+480                         ; attrs here
 42+  ABF8 CD AB A7         call screen_setcolours
 43+  ABFB
 44+  ABFB 06 20            ld b,32
 45+  ABFD 3E 62            ld a,98
 46+  ABFF 11 40 5A         ld de,22528+576                         ; attrs here
 47+  AC02 CD AB A7         call screen_setcolours
 48+  AC05
 49+  AC05 CD 47 80         call utilities_waitforkey   ; wait for keypress
 50+  AC08
 51+  AC08 C9               ret
 52+  AC09
 53+  AC09              ;
 54+  AC09              ; Draws text shared by the game over and high score screens
 55+  AC09              ;
 56+  AC09              endlevel_commontext:
 57+  AC09 CD 7D A7         call screen_setuptext       ; show scores
 58+  AC0C CD F3 BC         call scores_printscores     ; print the current scores
 59+  AC0F
 60+  AC0F 21 73 83         ld hl,string_gameoverscreen_bestscores
 61+  AC12 CD A6 84         call string_print
 62+  AC15
 63+  AC15 06 20            ld b,32
 64+  AC17 3E 45            ld a,69
 65+  AC19 11 C0 5A         ld de,22528+704                         ; attrs here
 66+  AC1C CD AB A7         call screen_setcolours
 67+  AC1F
 68+  AC1F C9               ret
 69+  AC20
 70+  AC20              ;
 71+  AC20              ; Initialises the screen
 72+  AC20              ;
 73+  AC20              endlevel_init:
 74+  AC20              ; We want a green screen.
 75+  AC20 3E 61            ld a,97             ; white ink (7) on black paper (0),
 76+  AC22                                      ; bright (64).
 77+  AC22 CD 67 80         call utilities_clearscreen
 78+  AC25 32 8D 5C         ld (23693),a        ; set our screen colours.
 79+  AC28 3E 00            ld a,0              ; 2 is the code for red.
 80+  AC2A D3 FE            out (254),a         ; write to port 254.
 81+  AC2C C9               ret
# file closed: screen/endlevel.asm
 30   AC2D
 31   AC2D                  include "leveldata\level01.asm"
# file opened: leveldata/level01.asm
  1+  AC2D              ; ###############################################################
  2+  AC2D              ; Data for level 1
  3+  AC2D              ; ###############################################################
  4+  AC2D              level01:
  5+  AC2D
  6+  AC2D                  ;defb 09,04,04,04,04,04,04,04,04,04,04,04,04,04,04,09,09,04,04,04,04,04,04,04,04,04,04,04,04,04,04,09
  7+  AC2D
  8+  AC2D 00 00 05 05      defb 00,00,05,05,05,05,05,05,05,05,05,05,05,05,02,01,01,01,03,05,05,05,05,05,05,05,05,05,05,05,00,00
  8+  AC31 05 05 05 05
  8+  AC35 05 05 05 05
  8+  AC39 05 05 02 01
  8+  AC3D 01 01 03 05
  8+  AC41 05 05 05 05
  8+  AC45 05 05 05 05
  8+  AC49 05 05 00 00
  9+  AC4D 00 00 05 05      defb 00,00,05,05,05,05,05,05,05,05,05,05,02,01,01,01,01,01,01,01,03,05,05,05,05,05,05,05,05,05,00,00
  9+  AC51 05 05 05 05
  9+  AC55 05 05 05 05
  9+  AC59 02 01 01 01
  9+  AC5D 01 01 01 01
  9+  AC61 03 05 05 05
  9+  AC65 05 05 05 05
  9+  AC69 05 05 00 00
 10+  AC6D 00 00 05 05      defb 00,00,05,05,05,05,05,05,05,05,02,01,01,01,01,01,01,01,01,01,01,01,03,05,13,13,13,13,13,13,00,00
 10+  AC71 05 05 05 05
 10+  AC75 05 05 02 01
 10+  AC79 01 01 01 01
 10+  AC7D 01 01 01 01
 10+  AC81 01 01 03 05
 10+  AC85 0D 0D 0D 0D
 10+  AC89 0D 0D 00 00
 11+  AC8D 00 00 01 01      defb 00,00,01,01,01,01,00,01,01,01,01,01,01,01,01,01,01,01,01,01,01,01,01,03,05,05,05,05,05,05,00,00
 11+  AC91 01 01 00 01
 11+  AC95 01 01 01 01
 11+  AC99 01 01 01 01
 11+  AC9D 01 01 01 01
 11+  ACA1 01 01 01 03
 11+  ACA5 05 05 05 05
 11+  ACA9 05 05 00 00
 12+  ACAD 00 00 01 01      defb 00,00,01,01,04,04,04,04,04,04,01,01,01,01,01,01,01,01,01,01,01,01,01,01,01,01,01,01,00,01,00,00
 12+  ACB1 04 04 04 04
 12+  ACB5 04 04 01 01
 12+  ACB9 01 01 01 01
 12+  ACBD 01 01 01 01
 12+  ACC1 01 01 01 01
 12+  ACC5 01 01 01 01
 12+  ACC9 00 01 00 00
 13+  ACCD 00 00 01 04      defb 00,00,01,04,04,04,04,04,04,04,04,04,01,01,01,01,01,01,01,01,01,01,01,01,00,00,00,00,00,01,00,00
 13+  ACD1 04 04 04 04
 13+  ACD5 04 04 04 04
 13+  ACD9 01 01 01 01
 13+  ACDD 01 01 01 01
 13+  ACE1 01 01 01 01
 13+  ACE5 00 00 00 00
 13+  ACE9 00 01 00 00
 14+  ACED 00 00 01 04      defb 00,00,01,04,04,01,01,01,01,01,04,04,04,04,01,01,01,01,01,01,01,00,00,00,00,01,01,01,01,01,00,00
 14+  ACF1 04 01 01 01
 14+  ACF5 01 01 04 04
 14+  ACF9 04 04 01 01
 14+  ACFD 01 01 01 01
 14+  AD01 01 00 00 00
 14+  AD05 00 01 01 01
 14+  AD09 01 01 00 00
 15+  AD0D 00 00 01 04      defb 00,00,01,04,04,04,04,04,04,01,04,04,04,04,04,04,04,04,00,00,00,00,04,04,04,04,04,04,04,01,00,00
 15+  AD11 04 04 04 04
 15+  AD15 04 01 04 04
 15+  AD19 04 04 04 04
 15+  AD1D 04 04 00 00
 15+  AD21 00 00 04 04
 15+  AD25 04 04 04 04
 15+  AD29 04 01 00 00
 16+  AD2D 00 00 01 01      defb 00,00,01,01,01,04,01,01,01,01,04,04,04,04,04,04,04,04,00,04,04,04,04,04,04,04,04,04,04,01,00,00
 16+  AD31 01 04 01 01
 16+  AD35 01 01 04 04
 16+  AD39 04 04 04 04
 16+  AD3D 04 04 00 04
 16+  AD41 04 04 04 04
 16+  AD45 04 04 04 04
 16+  AD49 04 01 00 00
 17+  AD4D 00 00 01 00      defb 00,00,01,00,00,00,00,00,00,04,04,04,04,04,04,04,04,04,00,04,04,04,04,04,04,04,04,04,04,01,00,00
 17+  AD51 00 00 00 00
 17+  AD55 00 04 04 04
 17+  AD59 04 04 04 04
 17+  AD5D 04 04 00 04
 17+  AD61 04 04 04 04
 17+  AD65 04 04 04 04
 17+  AD69 04 01 00 00
 18+  AD6D 00 00 01 07      defb 00,00,01,07,07,07,07,07,07,01,04,04,04,04,04,04,04,04,00,04,04,04,04,04,04,04,04,04,04,01,00,00
 18+  AD71 07 07 07 07
 18+  AD75 07 01 04 04
 18+  AD79 04 04 04 04
 18+  AD7D 04 04 00 04
 18+  AD81 04 04 04 04
 18+  AD85 04 04 04 04
 18+  AD89 04 01 00 00
 19+  AD8D 00 00 01 00      defb 00,00,01,00,00,00,00,00,00,01,04,04,04,04,04,04,04,04,00,04,04,04,04,04,04,00,00,00,00,01,00,00
 19+  AD91 00 00 00 00
 19+  AD95 00 01 04 04
 19+  AD99 04 04 04 04
 19+  AD9D 04 04 00 04
 19+  ADA1 04 04 04 04
 19+  ADA5 04 00 00 00
 19+  ADA9 00 01 00 00
 20+  ADAD 00 00 01 00      defb 00,00,01,00,00,00,00,00,00,01,04,04,04,04,04,04,04,04,00,04,04,04,04,04,04,00,04,04,00,01,00,00
 20+  ADB1 00 00 00 00
 20+  ADB5 00 01 04 04
 20+  ADB9 04 04 04 04
 20+  ADBD 04 04 00 04
 20+  ADC1 04 04 04 04
 20+  ADC5 04 00 04 04
 20+  ADC9 00 01 00 00
 21+  ADCD 00 00 01 06      defb 00,00,01,06,06,06,06,06,06,01,04,04,04,04,04,04,04,04,00,04,04,04,04,04,04,00,04,04,00,01,00,00
 21+  ADD1 06 06 06 06
 21+  ADD5 06 01 04 04
 21+  ADD9 04 04 04 04
 21+  ADDD 04 04 00 04
 21+  ADE1 04 04 04 04
 21+  ADE5 04 00 04 04
 21+  ADE9 00 01 00 00
 22+  ADED 00 00 01 06      defb 00,00,01,06,06,06,06,06,06,01,04,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,04,04,00,01,00,00
 22+  ADF1 06 06 06 06
 22+  ADF5 06 01 04 00
 22+  ADF9 00 00 00 00
 22+  ADFD 00 00 00 00
 22+  AE01 00 00 00 00
 22+  AE05 00 00 04 04
 22+  AE09 00 01 00 00
 23+  AE0D 00 00 01 06      defb 00,00,01,06,06,06,06,06,06,01,04,00,04,04,04,04,04,04,00,04,04,04,00,04,04,04,04,04,00,01,00,00
 23+  AE11 06 06 06 06
 23+  AE15 06 01 04 00
 23+  AE19 04 04 04 04
 23+  AE1D 04 04 00 04
 23+  AE21 04 04 00 04
 23+  AE25 04 04 04 04
 23+  AE29 00 01 00 00
 24+  AE2D 00 00 01 06      defb 00,00,01,06,06,06,06,06,06,01,04,00,04,04,04,04,04,04,00,04,04,04,00,04,04,04,04,04,00,01,00,00
 24+  AE31 06 06 06 06
 24+  AE35 06 01 04 00
 24+  AE39 04 04 04 04
 24+  AE3D 04 04 00 04
 24+  AE41 04 04 00 04
 24+  AE45 04 04 04 04
 24+  AE49 00 01 00 00
 25+  AE4D 00 00 01 01      defb 00,00,01,01,01,01,01,01,01,01,04,00,04,04,04,04,04,04,00,04,04,04,00,04,04,04,04,04,00,01,00,00
 25+  AE51 01 01 01 01
 25+  AE55 01 01 04 00
 25+  AE59 04 04 04 04
 25+  AE5D 04 04 00 04
 25+  AE61 04 04 00 04
 25+  AE65 04 04 04 04
 25+  AE69 00 01 00 00
 26+  AE6D 00 00 01 04      defb 00,00,01,04,04,04,04,04,04,04,04,00,04,04,04,04,04,04,00,04,04,04,00,00,00,00,04,04,04,01,00,00
 26+  AE71 04 04 04 04
 26+  AE75 04 04 04 00
 26+  AE79 04 04 04 04
 26+  AE7D 04 04 00 04
 26+  AE81 04 04 00 00
 26+  AE85 00 00 04 04
 26+  AE89 04 01 00 00
 27+  AE8D 00 00 01 04      defb 00,00,01,04,04,04,00,00,00,00,00,00,04,04,04,04,04,04,00,04,04,04,04,04,04,00,04,04,04,01,00,00
 27+  AE91 04 04 00 00
 27+  AE95 00 00 00 00
 27+  AE99 04 04 04 04
 27+  AE9D 04 04 00 04
 27+  AEA1 04 04 04 04
 27+  AEA5 04 00 04 04
 27+  AEA9 04 01 00 00
 28+  AEAD 00 00 01 04      defb 00,00,01,04,04,04,00,04,04,04,04,04,04,04,04,04,04,04,00,04,04,04,04,04,04,00,04,04,04,01,00,00
 28+  AEB1 04 04 00 04
 28+  AEB5 04 04 04 04
 28+  AEB9 04 04 04 04
 28+  AEBD 04 04 00 04
 28+  AEC1 04 04 04 04
 28+  AEC5 04 00 04 04
 28+  AEC9 04 01 00 00
 29+  AECD 00 00 01 04      defb 00,00,01,04,04,04,00,04,04,04,01,01,01,01,01,01,01,01,01,01,01,01,01,01,04,00,04,04,04,01,00,00
 29+  AED1 04 04 00 04
 29+  AED5 04 04 01 01
 29+  AED9 01 01 01 01
 29+  AEDD 01 01 01 01
 29+  AEE1 01 01 01 01
 29+  AEE5 04 00 04 04
 29+  AEE9 04 01 00 00
 30+  AEED 00 00 01 04      defb 00,00,01,04,04,04,00,04,04,04,01,00,00,00,00,00,00,00,00,00,00,00,00,01,04,00,04,04,04,01,00,00
 30+  AEF1 04 04 00 04
 30+  AEF5 04 04 01 00
 30+  AEF9 00 00 00 00
 30+  AEFD 00 00 00 00
 30+  AF01 00 00 00 01
 30+  AF05 04 00 04 04
 30+  AF09 04 01 00 00
 31+  AF0D 00 00 01 04      defb 00,00,01,04,04,04,00,04,04,04,01,00,00,00,00,00,00,00,00,00,00,00,00,01,04,00,04,04,04,01,00,00
 31+  AF11 04 04 00 04
 31+  AF15 04 04 01 00
 31+  AF19 00 00 00 00
 31+  AF1D 00 00 00 00
 31+  AF21 00 00 00 01
 31+  AF25 04 00 04 04
 31+  AF29 04 01 00 00
 32+  AF2D 00 00 01 04      defb 00,00,01,04,04,04,00,04,04,04,01,00,00,00,00,00,00,00,00,00,00,00,00,01,04,00,04,04,04,01,00,00
 32+  AF31 04 04 00 04
 32+  AF35 04 04 01 00
 32+  AF39 00 00 00 00
 32+  AF3D 00 00 00 00
 32+  AF41 00 00 00 01
 32+  AF45 04 00 04 04
 32+  AF49 04 01 00 00
 33+  AF4D 00 00 01 04      defb 00,00,01,04,04,04,00,04,04,04,04,00,00,00,00,00,00,00,00,00,00,00,00,04,04,04,04,04,04,01,00,00
 33+  AF51 04 04 00 04
 33+  AF55 04 04 04 00
 33+  AF59 00 00 00 00
 33+  AF5D 00 00 00 00
 33+  AF61 00 00 00 04
 33+  AF65 04 04 04 04
 33+  AF69 04 01 00 00
 34+  AF6D 00 00 01 04      defb 00,00,01,04,04,04,04,04,04,04,01,00,00,00,00,00,00,00,00,00,00,00,00,01,04,04,04,04,04,01,00,00
 34+  AF71 04 04 04 04
 34+  AF75 04 04 01 00
 34+  AF79 00 00 00 00
 34+  AF7D 00 00 00 00
 34+  AF81 00 00 00 01
 34+  AF85 04 04 04 04
 34+  AF89 04 01 00 00
 35+  AF8D 00 00 01 04      defb 00,00,01,04,04,04,04,04,04,04,01,00,00,00,01,00,00,00,00,01,00,00,00,01,04,04,04,04,04,01,00,00
 35+  AF91 04 04 04 04
 35+  AF95 04 04 01 00
 35+  AF99 00 00 01 00
 35+  AF9D 00 00 00 01
 35+  AFA1 00 00 00 01
 35+  AFA5 04 04 04 04
 35+  AFA9 04 01 00 00
 36+  AFAD 00 00 01 01      defb 00,00,01,01,01,01,01,01,01,01,01,01,01,01,01,01,01,01,01,01,01,01,01,01,01,01,01,01,01,01,00,00
 36+  AFB1 01 01 01 01
 36+  AFB5 01 01 01 01
 36+  AFB9 01 01 01 01
 36+  AFBD 01 01 01 01
 36+  AFC1 01 01 01 01
 36+  AFC5 01 01 01 01
 36+  AFC9 01 01 00 00
 37+  AFCD
 38+  AFCD              ; ###############################################################
 39+  AFCD              ; Object data: horiz, vert, state, memh, meml
 40+  AFCD              ; ###############################################################
 41+  AFCD              level01rocks1:
 42+  AFCD 1C 09 00 00      defb 28,9,0,0,0
 42+  AFD1 00
 43+  AFD2 1B 0C 00 00      defb 27,12,0,0,0
 43+  AFD6 00
 44+  AFD7 1B 11 00 00      defb 27,17,0,0,0
 44+  AFDB 00
 45+  AFDC 1C 12 00 00      defb 28,18,0,0,0
 45+  AFE0 00
 46+  AFE1 FF               defb 255
 47+  AFE2
 48+  AFE2              level01rocks:
 49+  AFE2 09 04 00 00      defb 9,4,0,0,0
 49+  AFE6 00
 50+  AFE7 0C 07 00 00      defb 12,7,0,0,0
 50+  AFEB 00
 51+  AFEC 10 07 00 00      defb 16,7,0,0,0
 51+  AFF0 00
 52+  AFF1 0B 08 00 00      defb 11,8,0,0,0
 52+  AFF5 00
 53+  AFF6 0A 0A 00 00      defb 10,10,0,0,0
 53+  AFFA 00
 54+  AFFB 0C 0A 00 00      defb 12,10,0,0,0
 54+  AFFF 00
 55+  B000 0D 09 00 00      defb 13,9,0,0,0
 55+  B004 00
 56+  B005 0E 08 00 00      defb 14,8,0,0,0
 56+  B009 00
 57+  B00A 0F 0B 00 00      defb 15,11,0,0,0
 57+  B00E 00
 58+  B00F 0B 0C 00 00      defb 11,12,0,0,0
 58+  B013 00
 59+  B014 11 0C 00 00      defb 17,12,0,0,0
 59+  B018 00
 60+  B019 13 08 00 00      defb 19,8,0,0,0
 60+  B01D 00
 61+  B01E 16 09 00 00      defb 22,9,0,0,0
 61+  B022 00
 62+  B023 13 0A 00 00      defb 19,10,0,0,0
 62+  B027 00
 63+  B028 15 0A 00 00      defb 21,10,0,0,0
 63+  B02C 00
 64+  B02D 15 0C 00 00      defb 21,12,0,0,0
 64+  B031 00
 65+  B032 16 0C 00 00      defb 22,12,0,0,0
 65+  B036 00
 66+  B037 18 0A 00 00      defb 24,10,0,0,0
 66+  B03B 00
 67+  B03C 19 09 00 00      defb 25,9,0,0,0
 67+  B040 00
 68+  B041 1C 09 00 00      defb 28,9,0,0,0
 68+  B045 00
 69+  B046 1B 0C 00 00      defb 27,12,0,0,0
 69+  B04A 00
 70+  B04B 1A 0D 00 00      defb 26,13,0,0,0
 70+  B04F 00
 71+  B050 19 0E 00 00      defb 25,14,0,0,0
 71+  B054 00
 72+  B055 19 10 00 00      defb 25,16,0,0,0
 72+  B059 00
 73+  B05A 1A 11 00 00      defb 26,17,0,0,0
 73+  B05E 00
 74+  B05F 1B 11 00 00      defb 27,17,0,0,0
 74+  B063 00
 75+  B064 1C 12 00 00      defb 28,18,0,0,0
 75+  B068 00
 76+  B069 1A 13 00 00      defb 26,19,0,0,0
 76+  B06D 00
 77+  B06E 1B 15 00 00      defb 27,21,0,0,0
 77+  B072 00
 78+  B073 1A 17 00 00      defb 26,23,0,0,0
 78+  B077 00
 79+  B078 1B 18 00 00      defb 27,24,0,0,0
 79+  B07C 00
 80+  B07D 19 18 00 00      defb 25,24,0,0,0
 80+  B081 00
 81+  B082 18 17 00 00      defb 24,23,0,0,0
 81+  B086 00
 82+  B087 13 14 00 00      defb 19,20,0,0,0
 82+  B08B 00
 83+  B08C 14 12 00 00      defb 20,18,0,0,0
 83+  B090 00
 84+  B091 14 10 00 00      defb 20,16,0,0,0
 84+  B095 00
 85+  B096 15 10 00 00      defb 21,16,0,0,0
 85+  B09A 00
 86+  B09B 16 12 00 00      defb 22,18,0,0,0
 86+  B09F 00
 87+  B0A0 11 14 00 00      defb 17,20,0,0,0
 87+  B0A4 00
 88+  B0A5 0D 11 00 00      defb 13,17,0,0,0
 88+  B0A9 00
 89+  B0AA 0C 13 00 00      defb 12,19,0,0,0
 89+  B0AE 00
 90+  B0AF 0B 13 00 00      defb 11,19,0,0,0
 90+  B0B3 00
 91+  B0B4 0A 11 00 00      defb 10,17,0,0,0
 91+  B0B8 00
 92+  B0B9 05 12 00 00      defb 5,18,0,0,0
 92+  B0BD 00
 93+  B0BE 07 16 00 00      defb 7,22,0,0,0
 93+  B0C2 00
 94+  B0C3 09 17 00 00      defb 9,23,0,0,0
 94+  B0C7 00
 95+  B0C8 07 18 00 00      defb 7,24,0,0,0
 95+  B0CC 00
 96+  B0CD 05 18 00 00      defb 5,24,0,0,0
 96+  B0D1 00
 97+  B0D2 06 19 00 00      defb 6,25,0,0,0
 97+  B0D6 00
 98+  B0D7 08 19 00 00      defb 8,25,0,0,0
 98+  B0DB 00
 99+  B0DC 04 17 00 00      defb 4,23,0,0,0
 99+  B0E0 00
100+  B0E1 FF               defb 255
101+  B0E2
102+  B0E2              level01missiles:
103+  B0E2 0B 17 00 00      defb 11,23,0,0,0
103+  B0E6 00
104+  B0E7 0B 16 00 00      defb 11,22,0,0,0
104+  B0EB 00
105+  B0EC 0C 17 00 00      defb 12,23,0,0,0
105+  B0F0 00
106+  B0F1 0C 16 00 00      defb 12,22,0,0,0
106+  B0F5 00
107+  B0F6 0D 17 00 00      defb 13,23,0,0,0
107+  B0FA 00
108+  B0FB 0D 16 00 00      defb 13,22,0,0,0
108+  B0FF 00
109+  B100 0E 17 00 00      defb 14,23,0,0,0
109+  B104 00
110+  B105 0E 16 00 00      defb 14,22,0,0,0
110+  B109 00
111+  B10A 0F 17 00 00      defb 15,23,0,0,0
111+  B10E 00
112+  B10F 0F 16 00 00      defb 15,22,0,0,0
112+  B113 00
113+  B114 10 17 00 00      defb 16,23,0,0,0
113+  B118 00
114+  B119 10 16 00 00      defb 16,22,0,0,0
114+  B11D 00
115+  B11E 11 17 00 00      defb 17,23,0,0,0
115+  B122 00
116+  B123 11 16 00 00      defb 17,22,0,0,0
116+  B127 00
117+  B128 12 17 00 00      defb 18,23,0,0,0
117+  B12C 00
118+  B12D 12 16 00 00      defb 18,22,0,0,0
118+  B131 00
119+  B132 13 17 00 00      defb 19,23,0,0,0
119+  B136 00
120+  B137 13 16 00 00      defb 19,22,0,0,0
120+  B13B 00
121+  B13C 14 17 00 00      defb 20,23,0,0,0
121+  B140 00
122+  B141 14 16 00 00      defb 20,22,0,0,0
122+  B145 00
123+  B146 15 17 00 00      defb 21,23,0,0,0
123+  B14A 00
124+  B14B 15 16 00 00      defb 21,22,0,0,0
124+  B14F 00
125+  B150 16 17 00 00      defb 22,23,0,0,0
125+  B154 00
126+  B155 16 16 00 00      defb 22,22,0,0,0
126+  B159 00
127+  B15A FF               defb 255
128+  B15B
129+  B15B              ;
130+  B15B              ; Diamonds: x,y,state,mem1+mem2
131+  B15B              ;
132+  B15B              level01diamonds:
133+  B15B 0C 1B 00 00      defb 12,27,0,0,0
133+  B15F 00
134+  B160 10 1B 00 00      defb 16,27,0,0,0
134+  B164 00
135+  B165 15 1B 00 00      defb 21,27,0,0,0
135+  B169 00
136+  B16A FF               defb 255
137+  B16B
138+  B16B              level01gems:
139+  B16B 12 14 00 00      defb 18,20,0,0,0
139+  B16F 00
140+  B170 06 18 00 00      defb 6,24,0,0,0
140+  B174 00
141+  B175 19 17 00 00      defb 25,23,0,0,0
141+  B179 00
142+  B17A 1C 11 00 00      defb 28,17,0,0,0
142+  B17E 00
143+  B17F FF               defb 255
144+  B180              ;
145+  B180              ; Score area colours
146+  B180              ;
147+  B180              score_colours:
148+  B180 47 47 47 47      defb 71,71,71,71,71,71,71,71,71,71,71,66,67,67,67,67,67,67,67,67,66,71,71,71,71,71,71,71,71,71,71,71
148+  B184 47 47 47 47
148+  B188 47 47 47 42
148+  B18C 43 43 43 43
148+  B190 43 43 43 43
148+  B194 42 47 47 47
148+  B198 47 47 47 47
148+  B19C 47 47 47 47
149+  B1A0 47 47 47 47      defb 71,71,71,71,71,71,71,71,71,71,71,70,70,70,70,70,70,70,70,70,70,71,71,71,71,71,71,71,71,71,71,71
149+  B1A4 47 47 47 47
149+  B1A8 47 47 47 46
149+  B1AC 46 46 46 46
149+  B1B0 46 46 46 46
149+  B1B4 46 47 47 47
149+  B1B8 47 47 47 47
149+  B1BC 47 47 47 47
150+  B1C0
151+  B1C0              high_score_colours:
152+  B1C0 00 00 00 42      defb  0, 0, 0,66,66,66,71,71,71,71,71,71,67,67,67,71,71,71,71,71,71,70,70,70,71,71,71,71,71,71,0,0
152+  B1C4 42 42 47 47
152+  B1C8 47 47 47 47
152+  B1CC 43 43 43 47
152+  B1D0 47 47 47 47
152+  B1D4 47 46 46 46
152+  B1D8 47 47 47 47
152+  B1DC 47 47 00 00
# file closed: leveldata/level01.asm
 32   B1E0                  include "graphics\graphics.asm"
# file opened: graphics/graphics.asm
  1+  B1E0              ; Tiles graphics.
  2+  B1E0              sprites:
  3+  B1E0 00 00 00 00      defb    0  ,  0,  0,  0,  0,  0,  0,  0   ; 0, space
  3+  B1E4 00 00 00 00
  4+  B1E8 FF FF FF FF      defb    255,255,255,255,255,255,255,255   ; 1, cyan block
  4+  B1EC FF FF FF FF
  5+  B1F0 01 03 07 0F      defb	  1,  3,  7, 15, 31, 63,127,255   ; 2, slope left
  5+  B1F4 1F 3F 7F FF
  6+  B1F8 80 C0 E0 F0      defb    128,192,224,240,248,252,254,255   ; 3, slope right
  6+  B1FC F8 FC FE FF
  7+  B200 55 AA 55 AA      defb    85,170, 85,170, 85,170, 85,170    ; 4, dirt
  7+  B204 55 AA 55 AA
  8+  B208 00 00 00 00      defb    0  ,  0,  0,  0,  0,  0,  0,  0   ; 5, sky block
  8+  B20C 00 00 00 00
  9+  B210 FF FF FF FF      defb    255,255,255,255,255,255,255,255   ; 6, slime block
  9+  B214 FF FF FF FF
 10+  B218 FF FF 00 00      defb    255,255,  0,  0,  0,  0,  0,  0   ; 7, trapdoor
 10+  B21C 00 00 00 00
 11+  B220 18 2C 4E 8F      defb    24, 44, 78,143,241,114, 52,  24    ; 8, diamond
 11+  B224 F1 72 34 18
 12+  B228 3C 7E FF 7F      defb    60,126,255,127,254,254,255,126    ; 9, rock
 12+  B22C FE FE FF 7E
 13+  B230 7E FF 7F 7F  	defb	126,255,127,127,254,255,126, 60    ; 10, rock 2
 13+  B234 FE FF 7E 3C
 14+  B238 00 00 00 00      defb    0  ,  0,  0,  0,  0,  0,255,255   ; 11, sky block, pixel trapdoor
 14+  B23C 00 00 FF FF
 15+  B240 99 DB 7E 24  	defb    153,219,126, 36,255,126, 60, 24   ; 12, missile
 15+  B244 FF 7E 3C 18
 16+  B248 00 00 00 00      defb    0  ,  0,  0,  0,  0,  0,  0,  0   ; 13, sky block, tank background
 16+  B24C 00 00 00 00
 17+  B250 00 00 00 00  	defb    0,  0,  0,  0,  0, 60, 90, 52     ; 14, gem
 17+  B254 00 3C 5A 34
 18+  B258
 19+  B258              sprite_attrs:
 20+  B258 46               defb    070 ; 0, space
 21+  B259 65               defb    101 ; 1, cyan block
 22+  B25A 4D               defb    077 ; 2, slope left
 23+  B25B 4D               defb    077 ; 3, slope right
 24+  B25C 46               defb    070 ; 4, dirt
 25+  B25D 4E               defb    078 ; 5, sky
 26+  B25E 4C               defb    076 ; 6, slime
 27+  B25F 42               defb    066 ; 7, trapdoor
 28+  B260 46               defb    070 ; 8, diamond
 29+  B261 42               defb    066 ; 9, rock
 30+  B262 42               defb    066 ; 10, rock 2
 31+  B263 49           	defb    073 ; 11, sky, trapdoor
 32+  B264 43           	defb    067 ; 12, missile
 33+  B265 4A               defb    074 ; 13, sky, red ink (tank)
 34+  B266 46               defb    070 ; 14, gem
 35+  B267
 36+  B267              player_sprite:
 37+  B267 10 39 92 FC  	defb	 16, 57,146,252, 56, 61,195,128 ; 0 up/down 1
 37+  B26B 38 3D C3 80
 38+  B26F 08 1C 08 FC  	defb	  8, 28,  8,252, 60, 28, 22, 50 ; 1 left 1
 38+  B273 3C 1C 16 32
 39+  B277 10 38 10 3F      defb   	 16, 56, 16, 63, 60, 56,104, 76 ; 2 right 1
 39+  B27B 3C 38 68 4C
 40+  B27F 08 9C 49 3F  	defb	  8,156, 73, 63, 28,188,195,  1 ; 3 up/down 2
 40+  B283 1C BC C3 01
 41+  B287 08 1C 08 FC  	defb	  8, 28,  8,252, 60, 60,100, 12; 4 left 2
 41+  B28B 3C 3C 64 0C
 42+  B28F 10 38 10 3F  	defb	 16, 56, 16, 63, 60, 60, 38, 48 ; 5 right 2
 42+  B293 3C 3C 26 30
 43+  B297 54 28 10 12  	defb	 84, 40, 16, 18, 30, 92,253, 95 ; 6 shoot up
 43+  B29B 1E 5C FD 5F
 44+  B29F 02 87 42 BF  	defb	 2,135, 66,191, 79,143, 25,  3  ; 7 shoot left
 44+  B2A3 4F 8F 19 03
 45+  B2A7 40 E1 42 FD  	defb	 64,225, 66,253,242,241,152,192 ; 8 shoot right
 45+  B2AB F2 F1 98 C0
 46+  B2AF FA BF 3A 78  	defb	 250,191, 58,120, 72,  8, 20, 42 ; 9 shoot down
 46+  B2B3 48 08 14 2A
 47+  B2B7 92 BA 94 78  	defb 	 146,186,148,120, 56,120, 68,195 ; 10 crushed 1
 47+  B2BB 38 78 44 C3
 48+  B2BF 49 5D 29 1E  	defb	  73, 93, 41, 30, 28, 30, 34,195 ; 11 crushed 2
 48+  B2C3 1C 1E 22 C3
 49+  B2C7
 50+  B2C7              ;
 51+  B2C7              ; First 4 top half, next 4 bottom 1, next 4 bottom 2
 52+  B2C7              ;
 53+  B2C7              ship_sprite:
 54+  B2C7 00 00 00 01  	defb	  0,  0,  0,  1,  3, 31,127,255
 54+  B2CB 03 1F 7F FF
 55+  B2CF 1F 01 7F FF  	defb	 31,  1,127,255,255,255,255,255
 55+  B2D3 FF FF FF FF
 56+  B2D7 F8 80 FE FF  	defb	248,128,254,255,255,255,255,255
 56+  B2DB FF FF FF FF
 57+  B2DF 00 00 00 80  	defb	  0,  0,  0,128,192,248,254,255
 57+  B2E3 C0 F8 FE FF
 58+  B2E7 B3 B3 7F 1F  	defb	179,179,127, 31,  3,  3,  2,  7
 58+  B2EB 03 03 02 07
 59+  B2EF 8F 8F FF FF  	defb	143,143,255,255,255, 15,  7,131
 59+  B2F3 FF 0F 07 83
 60+  B2F7 0F 0F FF FF  	defb	 15, 15,255,255,255, 16, 32,193
 60+  B2FB FF 10 20 C1
 61+  B2FF 19 19 FE F8  	defb	 25, 25,254,248,192,192, 64,224
 61+  B303 C0 C0 40 E0
 62+  B307 98 98 7F 1F  	defb	152,152,127, 31,  3,  3,  2,  7
 62+  B30B 03 03 02 07
 63+  B30F F0 F0 FF FF  	defb	240,240,255,255,255,  8,  4,131
 63+  B313 FF 08 04 83
 64+  B317 F1 F1 FF FF  	defb	241,241,255,255,255,240,224,193
 64+  B31B FF F0 E0 C1
 65+  B31F CD CD FE F8  	defb	205,205,254,248,192,192, 64,224
 65+  B323 C0 C0 40 E0
 66+  B327
 67+  B327              ;
 68+  B327              ;  First 8 frames are tank, last frame is the gun barrel
 69+  B327              ;
 70+  B327              tank_sprite:
 71+  B327 00 00 00 7F  	defb	  0,  0,  0,127,127,  0,  0,  0
 71+  B32B 7F 00 00 00
 72+  B32F 01 03 FE FC  	defb	  1,  3,254,252,254,255,127, 64
 72+  B333 FE FF 7F 40
 73+  B337 FF FF 03 F9  	defb	255,255,  3,249,  3,255,255,  1
 73+  B33B 03 FF FF 01
 74+  B33F 00 00 C0 E0  	defb	  0,  0,192,224,224,192,  0,  0
 74+  B343 E0 C0 00 00
 75+  B347 3F 7F E1 FB  	defb	 63,127,225,251,247,225,127, 63
 75+  B34B F7 E1 7F 3F
 76+  B34F FF FF 16 52  	defb	255,255, 22, 82, 84, 22,255,255
 76+  B353 54 16 FF FF
 77+  B357 FF FF A8 A9  	defb	255,255,168,169,155,168,255,255
 77+  B35B 9B A8 FF FF
 78+  B35F FC FE 8F AF  	defb	252,254,143,175,159,175,254,252
 78+  B363 9F AF FE FC
 79+  B367 00 00 00 1F  	defb	  0,  0,  0, 31, 31,  0,  0,  0
 79+  B36B 1F 00 00 00
# file closed: graphics/graphics.asm
 33   B36F
 34   B36F                  include "game\control.asm"
# file opened: game/control.asm
  1+  B36F              ;
  2+  B36F              ; Check the keyboard then move
  3+  B36F              ;
  4+  B36F              control_keyboard:
  5+  B36F 3A FD B7         ld a,(player+11)    ; first, check if player is dying
  6+  B372 FE 00            cp 0
  7+  B374 C0               ret nz               ; if so, can't move
  8+  B375 3A F7 B7         ld a,(player+5)      ; next, check if the player has pixels left to move
  9+  B378 FE 00            cp 0
 10+  B37A CA 81 B3         jp z, control_keyboard5
 11+  B37D CD 86 B4         call control_automove
 12+  B380 C9               ret
 13+  B381              control_keyboard5:
 14+  B381 3A F8 B7         ld a,(player+6)      ; next, check if the player is digging
 15+  B384 FE 00            cp 0
 16+  B386 CA 8D B3         jp z, control_keyboard0
 17+  B389 CD C4 B3         call control_dig
 18+  B38C C9               ret
 19+  B38D              control_keyboard0:
 20+  B38D 01 FE FB         ld bc,64510         ; port for keyboard row q-t.
 21+  B390 ED 78            in a,(c)            ; read keyboard.
 22+  B392 47               ld b,a              ; store result in b register.
 23+  B393 CB 18            rr b                ; check outermost key (q).
 24+  B395 D2 B4 B3         jp nc,control_keyboard1
 25+  B398 01 FE FD         ld bc,65022         ; port for keyboard row a-f.
 26+  B39B ED 78            in a,(c)            ; read keyboard.
 27+  B39D 47               ld b,a              ; store result in b register.
 28+  B39E CB 18            rr b                ; check outermost key (a).
 29+  B3A0 D2 B8 B3         jp nc,control_keyboard2
 30+  B3A3 01 FE DF         ld bc,57342         ; port for keyboard row y-p.
 31+  B3A6 ED 78            in a,(c)            ; read keyboard.
 32+  B3A8 47               ld b,a              ; store result in b register.
 33+  B3A9 CB 18            rr b                ; check outermost key (p).
 34+  B3AB D2 BC B3         jp nc,control_keyboard3
 35+  B3AE CB 18            rr b                ; check next key.
 36+  B3B0 D2 C0 B3         jp nc,control_keyboard4
 37+  B3B3 C9               ret
 38+  B3B4              control_keyboard1:
 39+  B3B4 CD CF B4         call control_pl_moveup         ; player up.
 40+  B3B7 C9               ret
 41+  B3B8              control_keyboard2:
 42+  B3B8 CD FE B4         call control_pl_movedown       ; player down.
 43+  B3BB C9               ret
 44+  B3BC              control_keyboard3:
 45+  B3BC CD 5B B5         call control_pl_moveright       ; player left.
 46+  B3BF C9               ret
 47+  B3C0              control_keyboard4:
 48+  B3C0 CD 2B B5         call control_pl_moveleft       ; player right.
 49+  B3C3 C9               ret
 50+  B3C4
 51+  B3C4              ;
 52+  B3C4              ; Performs a dig if the counter has reset, otherwise, messes with the graphics
 53+  B3C4              ;
 54+  B3C4              control_dig:
 55+  B3C4 ED 4B F2 B7      ld bc,(player)      ; load the current coords into bc
 56+  B3C8 C5               push bc
 57+  B3C9 3A F4 B7         ld a,(player+2)     ; get the direction
 58+  B3CC FE 01            cp 1                ; left
 59+  B3CE CA E6 B3         jp z,control_dig0
 60+  B3D1 FE 02            cp 2                ; right
 61+  B3D3 CA FB B3         jp z,control_dig1
 62+  B3D6 FE 03            cp 3                ; down
 63+  B3D8 CA 1F B4         jp z,control_dig5
 64+  B3DB FE 00            cp 0                ; up
 65+  B3DD CA 0F B4         jp z,control_dig4
 66+  B3E0 21 F8 B7         ld hl,player+6
 67+  B3E3 36 00            ld (hl),0           ; turn off digging
 68+  B3E5 C9               ret                 ; return
 69+  B3E6              control_dig0:           ; going left
 70+  B3E6 CD DD A8         call sprites_scadd  ; get the current coord
 71+  B3E9 62 6B            ld hl,de
 72+  B3EB 2B               dec hl              ; move one left
 73+  B3EC C1               pop bc              ; get the coords back, subtract 8 from horiz, 8 from vert, store (will be coords of space above dug dirt)
 74+  B3ED 78               ld a,b
 75+  B3EE 06 08            ld b,8
 76+  B3F0 90               sub b
 77+  B3F1 47               ld b,a
 78+  B3F2 79               ld a,c
 79+  B3F3 0E 08            ld c,8
 80+  B3F5 91               sub c
 81+  B3F6 4F               ld c,a
 82+  B3F7 C5               push bc
 83+  B3F8 C3 28 B4         jp control_dig2
 84+  B3FB              control_dig1:
 85+  B3FB CD DD A8         call sprites_scadd  ; get the current coord
 86+  B3FE 62 6B            ld hl,de
 87+  B400 23               inc hl              ; move one right
 88+  B401 C1               pop bc              ; get the coords back, add 8 to horiz, subtract 8 from vert store (will be coords of space above dug dirt)
 89+  B402 3E 08            ld a,8
 90+  B404 80               add a,b
 91+  B405 47               ld b,a
 92+  B406 79               ld a,c
 93+  B407 0E 08            ld c,8
 94+  B409 91               sub c
 95+  B40A 4F               ld c,a
 96+  B40B C5               push bc
 97+  B40C C3 28 B4         jp control_dig2
 98+  B40F              control_dig4:
 99+  B40F CD DD A8         call sprites_scadd  ; get the current coord
100+  B412 62 6B            ld hl,de
101+  B414 11 20 00         ld de,32
102+  B417 ED 52            sbc hl,de             ; move one up
103+  B419 C1               pop bc              ; get the coords back, 1 from vert, store, then we'll sub 1 from c for each row later
104+  B41A 0D               dec c
105+  B41B C5               push bc
106+  B41C C3 40 B4         jp control_dig6
107+  B41F              control_dig5:
108+  B41F CD DD A8         call sprites_scadd  ; get the current coord
109+  B422 62 6B            ld hl,de
110+  B424 24               inc h              ; move one down
111+  B425                                     ; not bothered about working out bc here, since rock will never fall if digging down
112+  B425 C3 28 B4         jp control_dig2
113+  B428              ; Normal (not up) digging
114+  B428              control_dig2:
115+  B428 3A FA B7         ld a,(player+8)     ; get the number of rows we need to overwrite
116+  B42B 47               ld b,a              ; rows to copy over
117+  B42C E5               push hl             ; store the memory location of the first row for later
118+  B42D              control_dig3:
119+  B42D CD 6F B4         call control_getpixelrow
120+  B430 77               ld (hl),a           ; load contents into row
121+  B431 11 20 00         ld de,32
122+  B434 19               add hl,de           ; move to next row
123+  B435 10 F6            djnz control_dig3
124+  B437 E1               pop hl              ; get the original memory location back
125+  B438 11 20 00         ld de,32
126+  B43B ED 52            sbc hl,de           ; move to above row, ready for checking for rock
127+  B43D C3 56 B4         jp control_dig10
128+  B440              ; Special case for going up
129+  B440              control_dig6:
130+  B440 3A FA B7         ld a,(player+8)     ; get the number of rows we need to overwrite
131+  B443 47               ld b,a              ; rows to copy over
132+  B444              control_dig7:
133+  B444 CD 6F B4         call control_getpixelrow
134+  B447              control_dig12:
135+  B447 77               ld (hl),a           ; load empty into row
136+  B448 11 20 00         ld de,32
137+  B44B ED 52            sbc hl,de           ; move up to next row
138+  B44D 0D               dec c               ; decrease c to track rows
139+  B44E 10 F4            djnz control_dig7
140+  B450 79               ld a,c
141+  B451 D6 07            sub 7
142+  B453 C1               pop bc
143+  B454 4F               ld c,a
144+  B455 C5               push bc             ; store the decreased c coord
145+  B456              control_dig10:
146+  B456 DD 21 F9 B7      ld ix,player+7
147+  B45A DD 7E 00         ld a,(ix)     ; get the dig frame number
148+  B45D 3D               dec a
149+  B45E DD 77 00         ld (ix),a
150+  B461                  ; call the check for rocks above the removed dirt
151+  B461 DD 21 F8 B7      ld ix,player+6
152+  B465 DD 7E 00         ld a,(ix)     ; get the dig state
153+  B468 FE 00            cp 0
154+  B46A C1               pop bc
155+  B46B CC 48 BB         call z, rocks_checkforfalling ; make the check if we're no longer digging
156+  B46E C9               ret
157+  B46F
158+  B46F              ;
159+  B46F              ; Gets a modified pixel row to overwrite dirt - if this is the last dig, overwrite with nothing, otherwise xor to flip the dirt
160+  B46F              ; Inputs:
161+  B46F              ; hl - memory of pixel row
162+  B46F              ; Outputs:
163+  B46F              ; a - modified row to write
164+  B46F              ;
165+  B46F              control_getpixelrow:
166+  B46F 3A F9 B7         ld a,(player+7)     ; get the dig frame number
167+  B472 FE 00            cp 0                ; is this the last dig
168+  B474 CA 7B B4         jp z,control_getpixelrow1
169+  B477 7E               ld a,(hl)           ; if not, xor with 255 to flip it
170+  B478 EE FF            xor 255
171+  B47A C9               ret
172+  B47B              control_getpixelrow1:
173+  B47B DD 21 F8 B7      ld ix,player+6
174+  B47F DD 36 00 00      ld (ix),0           ; turn off digging
175+  B483 3E 00            ld a,0              ; if it is, load with empty
176+  B485 C9               ret
177+  B486
178+  B486              ;
179+  B486              ; Auto move the player until pixels is zero
180+  B486              ;
181+  B486              control_automove:
182+  B486 5F               ld e,a              ; store the number of pixels left to move in e
183+  B487 ED 4B F2 B7      ld bc,(player)      ; load the current coords into bc
184+  B48B 21 F4 B7         ld hl,player+2      ; get the direction
185+  B48E 7E               ld a,(hl)
186+  B48F FE 03            cp 3                ; down
187+  B491 CA A5 B4         jp z,control_automove3  ; don't need to do anything
188+  B494 FE 00            cp 0                ; going up
189+  B496 CA B1 B4         jp z,control_automove2
190+  B499 FE 01            cp 1                ; going left?
191+  B49B CA BD B4         jp z,control_automove0
192+  B49E 78               ld a,b
193+  B49F 3C               inc a               ; if we're going right, increment a twice for two pixels
194+  B4A0 3C               inc a
195+  B4A1 47               ld b,a
196+  B4A2 C3 C1 B4         jp control_automove1
197+  B4A5              control_automove3:
198+  B4A5 79               ld a,c
199+  B4A6 3C               inc a
200+  B4A7 3C               inc a               ; if we're going down, increment twice
201+  B4A8 4F               ld c,a
202+  B4A9 FE 90            cp 144
203+  B4AB CC 89 B5         call z, control_scroll_down
204+  B4AE C3 C1 B4         jp control_automove1
205+  B4B1              control_automove2:
206+  B4B1 79               ld a,c
207+  B4B2 3D               dec a
208+  B4B3 3D               dec a               ; if we're going up, decrement twice
209+  B4B4 4F               ld c,a
210+  B4B5 FE 60            cp 96
211+  B4B7 CC 96 B5         call z, control_scroll_up
212+  B4BA C3 C1 B4         jp control_automove1
213+  B4BD              control_automove0:
214+  B4BD 78               ld a,b
215+  B4BE 3D               dec a               ; if we're going left, decrement a twice
216+  B4BF 3D               dec a
217+  B4C0 47               ld b,a
218+  B4C1              control_automove1:
219+  B4C1 ED 43 F2 B7      ld (player),bc      ; and back to player
220+  B4C5 7B               ld a,e              ; now get the pixel count back
221+  B4C6 3D               dec a               ; decrease by one
222+  B4C7 21 F7 B7         ld hl,player+5
223+  B4CA 77               ld (hl),a           ; copy back
224+  B4CB CD 29 B9         call player_justmoved
225+  B4CE C9               ret
226+  B4CF
227+  B4CF              ;
228+  B4CF              ; Moves the player up
229+  B4CF              ;
230+  B4CF              control_pl_moveup:
231+  B4CF C5               push bc
232+  B4D0 ED 4B F2 B7      ld bc,(player)          ; get the current coords, b horiz, c vert
233+  B4D4 79               ld a,c                  ; load c into the acc
234+  B4D5 FE 18            cp 24
235+  B4D7 CA F7 B4         jp z,control_pl_moveup0 ; are we at the edge of the screen
236+  B4DA FE 60            cp 96
237+  B4DC CC 96 B5         call z, control_scroll_up
238+  B4DF CD 36 B7         call movement_checkcanmove_up ; check we can move up, e will be 1 if we can
239+  B4E2 F5               push af
240+  B4E3 7B               ld a,e                  ; put e in a
241+  B4E4 FE 00            cp 0
242+  B4E6 CA F6 B4         jp z,control_pl_moveup1 ; don't move if we can't
243+  B4E9 F1               pop af
244+  B4EA D6 01            sub 1                   ; subtract 1
245+  B4EC D6 01            sub 1                   ; subtract 1
246+  B4EE 4F               ld c,a                  ; load back to c
247+  B4EF ED 43 F2 B7      ld (player),bc          ; load back to player
248+  B4F3 C3 F7 B4         jp control_pl_moveup0
249+  B4F6              control_pl_moveup1:
250+  B4F6 F1               pop af                  ; restore af if needed
251+  B4F7              control_pl_moveup0:
252+  B4F7 3E 00            ld a,0
253+  B4F9 32 F4 B7         ld (player+2),a        ; set direction to up
254+  B4FC C1               pop bc
255+  B4FD C9               ret
256+  B4FE              ;
257+  B4FE              ; Moves the player down
258+  B4FE              ;
259+  B4FE              control_pl_movedown:
260+  B4FE C5               push bc
261+  B4FF ED 4B F2 B7      ld bc,(player)          ; get the current coords, b horiz, c vert
262+  B503 79               ld a,c                  ; load c into the acc
263+  B504 FE E0            cp 224
264+  B506 CA 24 B5         jp z,control_pl_movedown0 ; are we at the edge of the screen
265+  B509 FE 80            cp 128
266+  B50B CC 89 B5         call z, control_scroll_down
267+  B50E CD 0A B7         call movement_checkcanmove_down ; check we can move down, e will be 1 if we can
268+  B511 F5               push af
269+  B512 7B               ld a,e                  ; put e in a
270+  B513 FE 00            cp 0
271+  B515 CA 23 B5         jp z,control_pl_movedown1 ; don't move if we can't
272+  B518 F1               pop af
273+  B519 3C               inc a                   ; add 1
274+  B51A 3C               inc a                   ; add 1
275+  B51B 4F               ld c,a                  ; load back to c
276+  B51C ED 43 F2 B7      ld (player),bc          ; load back to player
277+  B520 C3 24 B5         jp control_pl_movedown0
278+  B523              control_pl_movedown1:
279+  B523 F1               pop af                  ; restore af if needed
280+  B524              control_pl_movedown0:
281+  B524 3E 03            ld a,3
282+  B526 32 F4 B7         ld (player+2),a        ; set direction to down
283+  B529 C1               pop bc
284+  B52A C9               ret
285+  B52B              ;
286+  B52B              ; Moves the player left
287+  B52B              ;
288+  B52B              control_pl_moveleft:
289+  B52B C5               push bc
290+  B52C ED 4B F2 B7      ld bc,(player)          ; get the current coords, b horiz, c vert
291+  B530 78               ld a,b                  ; load b into the acc
292+  B531 FE 10            cp 16
293+  B533 CA 54 B5         jp z,control_pl_moveleft0 ; are we at the edge of the screen
294+  B536 CD 95 B7         call movement_checkcanmove_left ; check we can move down, e will be 1 if we can
295+  B539 F5               push af
296+  B53A 7B               ld a,e                  ; put e in a
297+  B53B FE 00            cp 0
298+  B53D CA 53 B5         jp z,control_pl_moveleft1 ; don't move if we can't
299+  B540 21 F7 B7         ld hl,player+5          ; need to store the amount of pixels still left to move in the player status
300+  B543 3E 03            ld a,3
301+  B545 77               ld (hl),a
302+  B546 F1               pop af
303+  B547 D6 01            sub 1                    ; subtract 2
304+  B549 D6 01            sub 1
305+  B54B 47               ld b,a                  ; load back to c
306+  B54C ED 43 F2 B7      ld (player),bc          ; load back to player
307+  B550 C3 54 B5         jp control_pl_moveleft0
308+  B553              control_pl_moveleft1:
309+  B553 F1               pop af
310+  B554              control_pl_moveleft0:
311+  B554 3E 01            ld a,1
312+  B556 32 F4 B7         ld (player+2),a        ; set direction to left
313+  B559 C1               pop bc
314+  B55A C9               ret
315+  B55B              ;
316+  B55B              ; Moves the player right
317+  B55B              ;
318+  B55B              control_pl_moveright:
319+  B55B C5               push bc
320+  B55C ED 4B F2 B7      ld bc,(player)          ; get the current coords, b horiz, c vert
321+  B560 78               ld a,b                  ; load b into the acc
322+  B561 FE F0            cp 240
323+  B563 CA 82 B5         jp z,control_pl_moveright0 ; are we at the edge of the screen
324+  B566 CD 69 B7         call movement_checkcanmove_right ; check we can move down, e will be 1 if we can
325+  B569 F5               push af
326+  B56A 7B               ld a,e                  ; put e in a
327+  B56B FE 00            cp 0
328+  B56D CA 81 B5         jp z,control_pl_moveright1 ; don't move if we can't
329+  B570 21 F7 B7         ld hl,player+5          ; need to store the amount of pixels still left to move in the player status
330+  B573 3E 03            ld a,3
331+  B575 77               ld (hl),a
332+  B576 F1               pop af
333+  B577 3C               inc a                   ; add 2
334+  B578 3C               inc a
335+  B579 47               ld b,a                  ; load back to b
336+  B57A ED 43 F2 B7      ld (player),bc          ; load back to player
337+  B57E C3 82 B5         jp control_pl_moveright0
338+  B581              control_pl_moveright1:
339+  B581 F1               pop af                  ; restore af if needed
340+  B582              control_pl_moveright0:
341+  B582 3E 02            ld a,2
342+  B584 32 F4 B7         ld (player+2),a        ; set direction to right
343+  B587 C1               pop bc
344+  B588 C9               ret
345+  B589
346+  B589              ;
347+  B589              ; Scrolls the screen down
348+  B589              ;
349+  B589              control_scroll_down:
350+  B589 F5               push af
351+  B58A 3E 08            ld a,8
352+  B58C 32 F6 A6         ld (screen_offset),a
353+  B58F F1               pop af
354+  B590 21 A5 A5         ld hl,buffer_updateall
355+  B593 36 01            ld (hl),1         ; flag as screen needing update
356+  B595 C9               ret
357+  B596
358+  B596              ;
359+  B596              ; Scrolls the screen up
360+  B596              ;
361+  B596              control_scroll_up:
362+  B596 F5               push af
363+  B597 3E 00            ld a,0
364+  B599 32 F6 A6         ld (screen_offset),a
365+  B59C F1               pop af
366+  B59D 21 A5 A5         ld hl,buffer_updateall
367+  B5A0 36 01            ld (hl),1         ; flag as screen needing update
368+  B5A2 C9               ret
369+  B5A3
370+  B5A3
371+  B5A3
372+  B5A3
# file closed: game/control.asm
 35   B5A3                  include "game\movement.asm"
# file opened: game/movement.asm
  1+  B5A3              ;
  2+  B5A3              ; Checks the contents of a cell are empty - ie, all pixel rows are zero
  3+  B5A3              ; Inputs:
  4+  B5A3              ; hl - memory location of top pixel row
  5+  B5A3              ; bc - screen coords, b horiz, c vert
  6+  B5A3              ; Outputs:
  7+  B5A3              ; e - 0 if not empty, 1 if empty
  8+  B5A3              ;
  9+  B5A3              movement_spaceisempty:
 10+  B5A3 C5               push bc
 11+  B5A4 E5               push hl
 12+  B5A5 CD CD B5         call movement_spaceisgem        ; check if space is a gem
 13+  B5A8 E1               pop hl
 14+  B5A9 C1               pop bc
 15+  B5AA 7B               ld a,e
 16+  B5AB FE 01            cp 1
 17+  B5AD C8               ret z                           ; if e is 1, space is a gem so can move here, return
 18+  B5AE 3E 08            ld a,8                          ; 8 rows to check
 19+  B5B0              movement_spaceisempty0:
 20+  B5B0 08               ex af,af'                       ; store the loop counter
 21+  B5B1 7E               ld a,(hl)                       ; get current pixel row
 22+  B5B2 FE 00            cp 0
 23+  B5B4 C2 C8 B5         jp nz, movement_spaceisempty1    ; row is not empty, can't move here
 24+  B5B7 79               ld a,c                          ; load the vertical coord
 25+  B5B8 3C               inc a                           ; next row down
 26+  B5B9 11 20 00         ld de,32
 27+  B5BC 19               add hl,de                       ; otherwise, just go one down for hl, which means add 32, because of course
 28+  B5BD 4F               ld c,a                          ; copy vert coord back to c
 29+  B5BE 08               ex af,af'                       ; get loop counter back
 30+  B5BF 3D               dec a                           ; decrease loop counter
 31+  B5C0 C2 B0 B5         jp nz, movement_spaceisempty0
 32+  B5C3 16 00            ld d,0
 33+  B5C5 1E 01            ld e,1                          ; got to end, so space is empty
 34+  B5C7 C9               ret
 35+  B5C8              movement_spaceisempty1:
 36+  B5C8 16 00            ld d,0
 37+  B5CA 1E 00            ld e,0                          ; returning false, ie space not empty
 38+  B5CC C9               ret
 39+  B5CD
 40+  B5CD              ;
 41+  B5CD              ; Check if a space contains a gem
 42+  B5CD              ; Inputs:
 43+  B5CD              ; bc - screen coords
 44+  B5CD              ; Outputs:
 45+  B5CD              ; e = 1 if gem
 46+  B5CD              movement_spaceisgem:
 47+  B5CD CD 34 A8         call screen_getcharcoordsfromscreencoords   ; get the char coords we're checking into bc
 48+  B5D0 21 5B B1         ld hl,level01diamonds           ; check diamonds first
 49+  B5D3              movement_spaceisgem0:
 50+  B5D3 5E 23 56 2B      ld de,(hl)                      ; get gem coords into de
 51+  B5D7 7B               ld a,e                          ; check for end of data
 52+  B5D8 FE FF            cp 255
 53+  B5DA CA F5 B5         jp z,movement_spaceisgem1       ; if yes, done with diamonds
 54+  B5DD 23               inc hl
 55+  B5DE 23               inc hl                          ; move to state
 56+  B5DF 7E               ld a,(hl)
 57+  B5E0 23               inc hl
 58+  B5E1 23               inc hl
 59+  B5E2 23               inc hl                          ; get to next
 60+  B5E3 FE 01            cp 1                            ; check if collected
 61+  B5E5 CA D3 B5         jp z,movement_spaceisgem0       ; if yes, move to next diamond
 62+  B5E8 7B               ld a,e                          ; load e again
 63+  B5E9 B9               cp c                            ; otherwise, compare c with e
 64+  B5EA C2 D3 B5         jp nz,movement_spaceisgem0      ; if different, move to next diamond
 65+  B5ED 7A               ld a,d                          ; get d coord
 66+  B5EE B8               cp b                            ; compare b with d
 67+  B5EF C2 D3 B5         jp nz,movement_spaceisgem0      ; if different, move to next diamond
 68+  B5F2 1E 01            ld e,1                          ; otherwise, exit with e = 1
 69+  B5F4 C9               ret
 70+  B5F5              movement_spaceisgem1:
 71+  B5F5 21 6B B1         ld hl,level01gems              ; check gems
 72+  B5F8              movement_spaceisgem2:
 73+  B5F8 5E 23 56 2B      ld de,(hl)                      ; get gem coords into de
 74+  B5FC 7B               ld a,e                          ; check for end of data
 75+  B5FD FE FF            cp 255
 76+  B5FF CA 1A B6         jp z,movement_spaceisgem3       ; if yes, done with gems
 77+  B602 23               inc hl
 78+  B603 23               inc hl                          ; move to state
 79+  B604 7E               ld a,(hl)
 80+  B605 23               inc hl
 81+  B606 23               inc hl
 82+  B607 23               inc hl                          ; get to next
 83+  B608 FE 01            cp 1                            ; check if collected
 84+  B60A CA F8 B5         jp z,movement_spaceisgem2       ; if yes, move to next diamond
 85+  B60D 7B               ld a,e                          ; load e again
 86+  B60E B9               cp c                            ; otherwise, compare c with e
 87+  B60F C2 F8 B5         jp nz,movement_spaceisgem2      ; if different, move to next gem
 88+  B612 7A               ld a,d                          ; get d coord
 89+  B613 B8               cp b                            ; compare b with d
 90+  B614 C2 F8 B5         jp nz,movement_spaceisgem2      ; if different, move to next gem
 91+  B617 1E 01            ld e,1                          ; otherwise, exit with e = 1
 92+  B619 C9               ret
 93+  B61A              movement_spaceisgem3:
 94+  B61A 1E 00            ld e,0                          ; nothing found, return e = 0
 95+  B61C C9               ret
 96+  B61D
 97+  B61D              ;
 98+  B61D              ; Checks the line of a cell below is empty - ie, first pixel rows is zero
 99+  B61D              ; Inputs:
100+  B61D              ; hl - memory location of top pixel row
101+  B61D              ; bc - screen coords, b horiz, c vert
102+  B61D              ; Outputs:
103+  B61D              ; e - 0 if not empty, 1 if empty
104+  B61D              ;
105+  B61D              movement_linebelowisempty:
106+  B61D C5               push bc
107+  B61E E5               push hl
108+  B61F CD CD B5         call movement_spaceisgem        ; check if space is a gem
109+  B622 E1               pop hl
110+  B623 C1               pop bc
111+  B624 7B               ld a,e
112+  B625 FE 01            cp 1
113+  B627 C8               ret z                           ; if e is 1, space is a gem so can move here, return
114+  B628 7E               ld a,(hl)                       ; get current pixel row
115+  B629 FE 00            cp 0
116+  B62B C2 33 B6         jp nz, movement_linebelowisempty1    ; row is not empty, can't move here
117+  B62E 16 00            ld d,0
118+  B630 1E 01            ld e,1                          ; got to end, so space is empty
119+  B632 C9               ret
120+  B633              movement_linebelowisempty1:
121+  B633 16 00            ld d,0
122+  B635 1E 00            ld e,0                          ; returning false, ie space not empty
123+  B637 C9               ret
124+  B638
125+  B638              ;
126+  B638              ; Checks the line of a cell above is empty - ie, last pixel rows are zero
127+  B638              ; Inputs:
128+  B638              ; hl - memory location of top pixel row
129+  B638              ; bc - screen coords, b horiz, c vert
130+  B638              ; Outputs:
131+  B638              ; e - 0 if not empty, 1 if empty
132+  B638              ;
133+  B638              movement_lineaboveisempty:
134+  B638 C5               push bc
135+  B639 E5               push hl
136+  B63A CD CD B5         call movement_spaceisgem        ; check if space is a gem
137+  B63D E1               pop hl
138+  B63E C1               pop bc
139+  B63F 7B               ld a,e
140+  B640 FE 01            cp 1
141+  B642 C8               ret z
142+  B643 7E               ld a,(hl)                       ; get current pixel row
143+  B644 FE 00            cp 0
144+  B646 C2 4E B6         jp nz, movement_lineaboveisempty1    ; row is not empty, can't move here
145+  B649 16 00            ld d,0
146+  B64B 1E 01            ld e,1                          ; got to end, so space is empty
147+  B64D C9               ret
148+  B64E              movement_lineaboveisempty1:
149+  B64E 16 00            ld d,0
150+  B650 1E 00            ld e,0                          ; returning false, ie space not empty
151+  B652 C9               ret
152+  B653
153+  B653              ;
154+  B653              ; Checks the contents of a cell are diggable - ie, all pixel rows are dirt or empty
155+  B653              ; Inputs:
156+  B653              ; hl - memory location of top pixel row
157+  B653              ; bc - screen coords, b horiz, c vert
158+  B653              ; Outputs:
159+  B653              ; none - puts player into digging mode
160+  B653              ;
161+  B653              movement_spaceisdiggable:
162+  B653 3E 08            ld a,8                          ; 8 rows to check
163+  B655              movement_spaceisdiggable0:
164+  B655 08               ex af,af'                       ; store the loop counter
165+  B656 7E               ld a,(hl)                       ; get current pixel row
166+  B657 FE 00            cp 0
167+  B659 CA 69 B6         jp z, movement_spaceisdiggable2  ; row is empty, can dig here
168+  B65C FE 55            cp 85
169+  B65E CA 69 B6         jp z, movement_spaceisdiggable2  ; row is dirt, can dig here
170+  B661 FE AA            cp 170
171+  B663 CA 69 B6         jp z, movement_spaceisdiggable2  ; row is dirt, can dig here
172+  B666 C3 81 B6         jp movement_spaceisdiggable1     ; otherwise, stop checking
173+  B669              movement_spaceisdiggable2:
174+  B669 79               ld a,c                          ; load the vertical coord
175+  B66A 3C               inc a                           ; next row down
176+  B66B 11 20 00         ld de,32
177+  B66E 19               add hl,de                       ; otherwise, just go one down for hl, which means add 32, because of course
178+  B66F 4F               ld c,a                          ; copy vert coord back to c
179+  B670 08               ex af,af'                       ; get loop counter back
180+  B671 3D               dec a                           ; decrease loop counter
181+  B672 C2 55 B6         jp nz, movement_spaceisdiggable0
182+  B675 21 F8 B7         ld hl,player+6
183+  B678 36 01            ld (hl),1                       ; set the player into digging mode
184+  B67A 23               inc hl
185+  B67B 36 05            ld (hl),5                      ; set the number of frame to dig for
186+  B67D 23               inc hl
187+  B67E 36 08            ld (hl),8                       ; set the number of pixels to dig
188+  B680 C9               ret
189+  B681              movement_spaceisdiggable1:
190+  B681 21 F8 B7         ld hl,player+6
191+  B684 36 00            ld (hl),0                       ; set the player out of digging mode
192+  B686 C9               ret
193+  B687
194+  B687              ;
195+  B687              ; Checks the contents of a cell below are diggable - ie, at least one pixel row has dirt. If the first one isn't dirt, stop
196+  B687              ; Inputs:
197+  B687              ; hl - memory location of top pixel row
198+  B687              ; bc - screen coords, b horiz, c vert
199+  B687              ; Outputs:
200+  B687              ; none - puts player into digging mode
201+  B687              ;
202+  B687              movement_spacebelowisdiggable:
203+  B687 7E               ld a,(hl)                       ; get first pixel row
204+  B688 FE 55            cp 85
205+  B68A CA 95 B6         jp z, movement_spacebelowisdiggable3  ; row is dirt, can dig here
206+  B68D FE AA            cp 170
207+  B68F CA 95 B6         jp z, movement_spacebelowisdiggable3  ; row is dirt, can dig here
208+  B692 C3 81 B6         jp movement_spaceisdiggable1    ; the first row is not dirt, so don't bother checking the rest, can't dig
209+  B695              movement_spacebelowisdiggable3:
210+  B695 3E 08            ld a,8                          ; rows to check
211+  B697 1E 00            ld e,0                          ; count of rows to dig
212+  B699              movement_spacebelowisdiggable0:
213+  B699 08               ex af,af'                       ; store the loop counter
214+  B69A 7E               ld a,(hl)                       ; get current pixel row
215+  B69B FE 55            cp 85
216+  B69D CA A8 B6         jp z, movement_spacebelowisdiggable4  ; row is dirt, can dig here
217+  B6A0 FE AA            cp 170
218+  B6A2 CA A8 B6         jp z, movement_spacebelowisdiggable4  ; row is dirt, can dig here
219+  B6A5 C3 B7 B6         jp movement_spacebelowisdiggable5     ; don't count this row and stop counting
220+  B6A8              movement_spacebelowisdiggable4:
221+  B6A8 1C               inc e                           ; inc count of rows to dig
222+  B6A9              movement_spacebelowisdiggable2:
223+  B6A9 79               ld a,c                          ; load the vertical coord
224+  B6AA 3C               inc a                           ; next row down
225+  B6AB D5               push de                         ; need e for later
226+  B6AC 11 20 00         ld de,32
227+  B6AF 19               add hl,de                       ; otherwise, just go one down for hl, which means add 32, because of course
228+  B6B0 4F               ld c,a                          ; copy vert coord back to c
229+  B6B1 D1               pop de                          ; get e back
230+  B6B2 08               ex af,af'                       ; get loop counter back
231+  B6B3 3D               dec a                           ; incease loop counter
232+  B6B4 C2 99 B6         jp nz, movement_spacebelowisdiggable0
233+  B6B7              movement_spacebelowisdiggable5:
234+  B6B7 21 F8 B7         ld hl,player+6
235+  B6BA 36 01            ld (hl),1                       ; set the player into digging mode
236+  B6BC 23               inc hl
237+  B6BD 36 03            ld (hl),3                      ; set the number of frame to dig for
238+  B6BF 23               inc hl
239+  B6C0 73               ld (hl),e                       ; set the number of pixels to dig
240+  B6C1 C9               ret
241+  B6C2              movement_spacebelowisdiggable1:
242+  B6C2 21 F8 B7         ld hl,player+6
243+  B6C5 36 00            ld (hl),0                       ; set the player out of digging mode
244+  B6C7 C9               ret
245+  B6C8
246+  B6C8              ;
247+  B6C8              ; Checks the contents of a cell above are diggable - ie, at least one pixel row has dirt. If the first one isn't dirt, stop
248+  B6C8              ; Inputs:
249+  B6C8              ; hl - memory location of top pixel row
250+  B6C8              ; bc - screen coords, b horiz, c vert
251+  B6C8              ; Outputs:
252+  B6C8              ; none - puts player into digging mode
253+  B6C8              ;
254+  B6C8              movement_spaceaboveisdiggable:
255+  B6C8 7E               ld a,(hl)                       ; get first pixel row
256+  B6C9 FE 55            cp 85
257+  B6CB CA D6 B6         jp z, movement_spaceaboveisdiggable3  ; row is dirt, can dig here
258+  B6CE FE AA            cp 170
259+  B6D0 CA D6 B6         jp z, movement_spaceaboveisdiggable3  ; row is dirt, can dig here
260+  B6D3 C3 81 B6         jp movement_spaceisdiggable1    ; the first row is not dirt, so don't bother checking the rest, can't dig
261+  B6D6              movement_spaceaboveisdiggable3:
262+  B6D6 3E 08            ld a,8                          ; rows to check
263+  B6D8 1E 00            ld e,0                          ; count of rows to dig
264+  B6DA              movement_spaceaboveisdiggable0:
265+  B6DA 08               ex af,af'                       ; store the loop counter
266+  B6DB 7E               ld a,(hl)                       ; get current pixel row
267+  B6DC FE 55            cp 85
268+  B6DE CA E9 B6         jp z, movement_spaceaboveisdiggable4  ; row is dirt, can dig here
269+  B6E1 FE AA            cp 170
270+  B6E3 CA E9 B6         jp z, movement_spaceaboveisdiggable4  ; row is dirt, can dig here
271+  B6E6 C3 F9 B6         jp movement_spaceaboveisdiggable5     ; don't count this row and stop counting
272+  B6E9              movement_spaceaboveisdiggable4:
273+  B6E9 1C               inc e                           ; inc count of rows to dig
274+  B6EA              movement_spaceaboveisdiggable2:
275+  B6EA 79               ld a,c                          ; load the vertical coord
276+  B6EB 3D               dec a                           ; next row up
277+  B6EC D5               push de                         ; need e for later
278+  B6ED 11 20 00         ld de,32
279+  B6F0 ED 52            sbc hl,de                       ; otherwise, just go one up for hl, which means sub 32, because of course
280+  B6F2 4F               ld c,a                          ; copy vert coord back to c
281+  B6F3 D1               pop de                          ; get e back
282+  B6F4 08               ex af,af'                       ; get loop counter back
283+  B6F5 3D               dec a                           ; incease loop counter
284+  B6F6 C2 DA B6         jp nz, movement_spaceaboveisdiggable0
285+  B6F9              movement_spaceaboveisdiggable5:
286+  B6F9 21 F8 B7         ld hl,player+6
287+  B6FC 36 01            ld (hl),1                       ; set the player into digging mode
288+  B6FE 23               inc hl
289+  B6FF 36 05            ld (hl),5                       ; set the number of frame to dig for
290+  B701 23               inc hl
291+  B702 73               ld (hl),e                       ; set the number of pixels to dig
292+  B703 C9               ret
293+  B704              movement_spaceaboveisdiggable1:
294+  B704 21 F8 B7         ld hl,player+6
295+  B707 36 00            ld (hl),0                       ; set the player out of digging mode
296+  B709 C9               ret
297+  B70A
298+  B70A              ;
299+  B70A              ; Checks if the player can move down
300+  B70A              ; Inputs:
301+  B70A              ; bc - player coords, b horiz, c vert
302+  B70A              ; Outputs:
303+  B70A              ; de - 1 can move
304+  B70A              movement_checkcanmove_down:
305+  B70A F5               push af
306+  B70B C5               push bc
307+  B70C CD DD A8         call sprites_scadd              ; get the memory location of cell into de
308+  B70F 62 6B            ld hl,de                        ; look at cell directly underneath (add 256)
309+  B711 24               inc h                       ; memory location of cell beneath now in hl
310+  B712 3E 08            ld a,8                       ; look below
311+  B714 81               add c
312+  B715 4F               ld c,a
313+  B716 CD 1D B6         call movement_linebelowisempty       ; check space is empty
314+  B719 7B               ld a,e                          ; check space empty flag
315+  B71A FE 00            cp 0
316+  B71C CA 25 B7         jp z, movement_checkcanmove_down1 ; can't move
317+  B71F CD 29 B9         call player_justmoved
318+  B722 C1               pop bc
319+  B723 F1               pop af
320+  B724 C9               ret
321+  B725              movement_checkcanmove_down1:
322+  B725 C1               pop bc
323+  B726 CD DD A8         call sprites_scadd              ; get the memory location of cell into de
324+  B729 62 6B            ld hl,de                        ; look at cell directly underneath (add 256)
325+  B72B 24               inc h
326+  B72C C5               push bc
327+  B72D CD 87 B6         call movement_spacebelowisdiggable    ; can't move here, but can we dig
328+  B730 11 00 00         ld de,0
329+  B733 C1               pop bc
330+  B734 F1               pop af
331+  B735 C9               ret
332+  B736
333+  B736              ;
334+  B736              ; Checks if the player can move up
335+  B736              ; Inputs:
336+  B736              ; bc - player coords, b horiz, c vert
337+  B736              ; Outputs:
338+  B736              ; de - 1 can move
339+  B736              movement_checkcanmove_up:
340+  B736 F5               push af
341+  B737 C5               push bc
342+  B738 CD DD A8         call sprites_scadd              ; get the memory location of cell into de
343+  B73B 62 6B            ld hl,de                        ; look at cell directly above (subtract 32)
344+  B73D 11 20 00         ld de,32
345+  B740 ED 52            sbc hl,de                       ; memory location of line above now in hl
346+  B742 0D               dec c                           ; look above
347+  B743 CD 38 B6         call movement_lineaboveisempty       ; check space is empty
348+  B746 7B               ld a,e                          ; check space empty flag
349+  B747 FE 00            cp 0
350+  B749 CA 54 B7         jp z, movement_checkcanmove_up1 ; can't move
351+  B74C 1E 01            ld e,1
352+  B74E CD 29 B9         call player_justmoved
353+  B751 C1               pop bc
354+  B752 F1               pop af
355+  B753 C9               ret
356+  B754              movement_checkcanmove_up1:
357+  B754 C1               pop bc
358+  B755 CD DD A8         call sprites_scadd              ; get the memory location of cell into de
359+  B758 62 6B            ld hl,de                        ; look at cell directly above (subtract 32)
360+  B75A 11 20 00         ld de,32
361+  B75D ED 52            sbc hl,de                       ; memory location of line above now in hl
362+  B75F C5               push bc
363+  B760 CD C8 B6         call movement_spaceaboveisdiggable    ; can't move here, but can we dig
364+  B763 11 00 00         ld de,0
365+  B766 C1               pop bc
366+  B767 F1               pop af
367+  B768 C9               ret
368+  B769
369+  B769              ;
370+  B769              ; Checks if the player can move right
371+  B769              ; Inputs:
372+  B769              ; bc - player coords, b horiz, c vert
373+  B769              ; Outputs:
374+  B769              ; de - 1 can move
375+  B769              movement_checkcanmove_right:
376+  B769 F5               push af
377+  B76A C5               push bc
378+  B76B CD DD A8         call sprites_scadd              ; get the memory location of cell into de
379+  B76E 62 6B            ld hl,de                        ; look at cell directly to the right (add 1)
380+  B770 3E 08            ld a,8
381+  B772 80               add b                           ; move one cell right
382+  B773 47               ld b,a
383+  B774 23               inc hl                          ; memory location of cell to the right now in hl
384+  B775 CD A3 B5         call movement_spaceisempty       ; check space is empty
385+  B778 7B               ld a,e                          ; check space empty flag
386+  B779 FE 00            cp 0
387+  B77B CA 84 B7         jp z, movement_checkcanmove_right1 ; can't move
388+  B77E CD 29 B9         call player_justmoved
389+  B781 C1               pop bc
390+  B782 F1               pop af
391+  B783 C9               ret
392+  B784              movement_checkcanmove_right1:
393+  B784 C1               pop bc
394+  B785 CD DD A8         call sprites_scadd              ; get the memory location of cell into de
395+  B788 62 6B            ld hl,de
396+  B78A 23               inc hl                          ; memory location of cell to the right now in hl
397+  B78B C5               push bc
398+  B78C CD 53 B6         call movement_spaceisdiggable    ; can't move here, but can we dig
399+  B78F 11 00 00         ld de,0
400+  B792 C1               pop bc
401+  B793 F1               pop af
402+  B794 C9               ret
403+  B795
404+  B795              ;
405+  B795              ; Checks if the player can move left
406+  B795              ; Inputs:
407+  B795              ; bc - player coords, b horiz, c vert
408+  B795              ; Outputs:
409+  B795              ; de - 1 can move
410+  B795              movement_checkcanmove_left:
411+  B795 F5               push af
412+  B796 C5               push bc
413+  B797 CD DD A8         call sprites_scadd              ; get the memory location of cell into de
414+  B79A 62 6B            ld hl,de                        ; look at cell directly to the right (add 1)
415+  B79C 78               ld a,b
416+  B79D 06 08            ld b,8
417+  B79F 90               sub b                           ; move one cell left
418+  B7A0 47               ld b,a
419+  B7A1 2B               dec hl                          ; memory location of cell to the right now in hl
420+  B7A2 CD A3 B5         call movement_spaceisempty       ; check space is empty
421+  B7A5 7B               ld a,e                          ; check space empty flag
422+  B7A6 FE 00            cp 0
423+  B7A8 CA B1 B7         jp z, movement_checkcanmove_left1 ; can't move
424+  B7AB CD 29 B9         call player_justmoved
425+  B7AE C1               pop bc
426+  B7AF F1               pop af
427+  B7B0 C9               ret
428+  B7B1              movement_checkcanmove_left1:
429+  B7B1 C1               pop bc
430+  B7B2 CD DD A8         call sprites_scadd              ; get the memory location of cell into de
431+  B7B5 62 6B            ld hl,de
432+  B7B7 2B               dec hl                          ; memory location of cell to the right now in hl
433+  B7B8 C5               push bc
434+  B7B9 CD 53 B6         call movement_spaceisdiggable    ; can't move here, but can we dig
435+  B7BC 11 00 00         ld de,0
436+  B7BF C1               pop bc
437+  B7C0 F1               pop af
438+  B7C1 C9               ret
# file closed: game/movement.asm
 36   B7C2                  include "game\game.asm"
# file opened: game/game.asm
  1+  B7C2              ;
  2+  B7C2              ; The current frame count, incremented each frame
  3+  B7C2              ;
  4+  B7C2              game_framenumber:
  5+  B7C2 00               defb    0
  6+  B7C3
  7+  B7C3              ;
  8+  B7C3              ; The number of players
  9+  B7C3              ;
 10+  B7C3              game_numberplayers:
 11+  B7C3 01               defb 1
 12+  B7C4
 13+  B7C4              ;
 14+  B7C4              ; The current player
 15+  B7C4              ;
 16+  B7C4              game_currentplayer:
 17+  B7C4 01               defb 1
 18+  B7C5
 19+  B7C5              ;
 20+  B7C5              ; The default number of lives
 21+  B7C5              ;
 22+  B7C5              game_numberlives:
 23+  B7C5 04               defb 4
 24+  B7C6
 25+  B7C6              ;
 26+  B7C6              ; Moves to the next player
 27+  B7C6              ;
 28+  B7C6              game_changeplayer:
 29+  B7C6 3A C4 B7         ld a,(game_currentplayer)
 30+  B7C9 FE 01            cp 1
 31+  B7CB C8               ret z                       ; if just one player, no need to change
 32+  B7CC 3D               dec a                       ; otherwise decrease by one
 33+  B7CD EE 01            xor 1                       ; xor with one to flip
 34+  B7CF 3C               inc a                       ; increment
 35+  B7D0 21 C4 B7         ld hl,game_currentplayer
 36+  B7D3 77               ld (hl),a                   ; store
 37+  B7D4 C9               ret
 38+  B7D5
 39+  B7D5              ;
 40+  B7D5              ; Sets the number of players at the start of the game
 41+  B7D5              ; Inputs:
 42+  B7D5              ; a - number of players
 43+  B7D5              game_setnumberofplayers:
 44+  B7D5 21 C3 B7         ld hl,game_numberplayers
 45+  B7D8 77               ld (hl),a
 46+  B7D9
 47+  B7D9              ;
 48+  B7D9              ; Increment frame number by 1
 49+  B7D9              ;
 50+  B7D9              game_incrementframe:
 51+  B7D9 3A C2 B7         ld a,(game_framenumber)
 52+  B7DC FE FF            cp 255
 53+  B7DE C2 E3 B7         jp nz,game_incrementframe0
 54+  B7E1 3E 00            ld a,0
 55+  B7E3              game_incrementframe0:
 56+  B7E3 3C               inc a
 57+  B7E4 32 C2 B7         ld (game_framenumber),a
 58+  B7E7 C9               ret
 59+  B7E8
 60+  B7E8              ;
 61+  B7E8              ; Returns current frame
 62+  B7E8              ; Outputs:
 63+  B7E8              ; a - current frame
 64+  B7E8              ;
 65+  B7E8              game_getcurrentframe:
 66+  B7E8 3A C2 B7         ld a,(game_framenumber)
 67+  B7EB C9               ret
 68+  B7EC
 69+  B7EC              ;
 70+  B7EC              ; Resets current frame
 71+  B7EC              ;
 72+  B7EC              game_resetcurrentframe:
 73+  B7EC 21 C2 B7         ld hl,game_framenumber
 74+  B7EF 36 00            ld (hl),0
 75+  B7F1 C9               ret
# file closed: game/game.asm
 37   B7F2                  include "game\player.asm"
# file opened: game/player.asm
  1+  B7F2              ;
  2+  B7F2              ;   Data for current player
  3+  B7F2              ;
  4+  B7F2              player:
  5+  B7F2 00 00            defb    0,0                 ; horiz,vert (+0,+1)
  6+  B7F4 02 00 01         defb    2,0,1               ; dir (0 up, 1 left, 2 right, 3 down), frame, frame transition count (+2,+3,+4)
  7+  B7F7 00               defb    0                   ; auto move remaining (+5)
  8+  B7F8 00 00 00         defb    0,0,0               ; is digging (0 no), digging count, pixels to di (+6,+7,+8)
  9+  B7FB 00               defb    0                   ; lives remaining (+9)
 10+  B7FC 00               defb    0                   ; died this life (+10)
 11+  B7FD 00 00            defb    0,0                 ; crushed (+11), frames (+12)
 12+  B7FF 00               defb    0                   ; can finish level, whether can finish level or not (+13)
 13+  B800
 14+  B800              ;
 15+  B800              ; Initializes a player at start of game
 16+  B800              ; Copy initial coords, copy lives, copy score
 17+  B800              ;
 18+  B800              player_init_gamestart:
 19+  B800 3A C5 B7         ld a,(game_numberlives)
 20+  B803 32 84 B8         ld (player1_lives),a
 21+  B806 32 85 B8         ld (player2_lives),a                        ; set the initial number of lives at game start
 22+  B809
 23+  B809 21 88 B8         ld hl,player1_score+2
 24+  B80C 06 06            ld b,6
 25+  B80E              player_init_gamestart0:
 26+  B80E 36 30            ld (hl),48
 27+  B810 23               inc hl
 28+  B811 10 FB            djnz player_init_gamestart0                 ; zero out player 1 score
 29+  B813 21 91 B8         ld hl,player2_score+2
 30+  B816 06 06            ld b,6
 31+  B818              player_init_gamestart1:
 32+  B818 36 30            ld (hl),48
 33+  B81A 23               inc hl
 34+  B81B 10 FB            djnz player_init_gamestart1                 ; zero out player 2 score
 35+  B81D C9               ret
 36+  B81E
 37+  B81E              ;
 38+  B81E              ; Initializes a player at start of a life
 39+  B81E              ; Copy initial coords, copy lives, copy score
 40+  B81E              ;
 41+  B81E              player_init_lifestart:
 42+  B81E 21 F7 B7         ld hl,player+5
 43+  B821 06 09            ld b,9                      ; initialise 9 properties
 44+  B823              player_init_lifestart2:
 45+  B823 36 00            ld (hl),0
 46+  B825 23               inc hl
 47+  B826 10 FB            djnz player_init_lifestart2
 48+  B828
 49+  B828 ED 4B 22 80      ld bc,(init_coord)
 50+  B82C ED 43 F2 B7      ld (player),bc
 51+  B830 01 FB B7         ld bc,player+9
 52+  B833 3A 84 B8         ld a,(player1_lives)
 53+  B836 02               ld (bc),a
 54+  B837
 55+  B837 CD 5F BE         call diamonds_init      ; initialise gems
 56+  B83A
 57+  B83A 01 06 00         ld bc,6
 58+  B83D 11 A5 BC         ld de,scores_current+2
 59+  B840 3A C4 B7         ld a,(game_currentplayer)
 60+  B843 FE 01            cp 1
 61+  B845 C2 4E B8         jp nz,player_init_lifestart0
 62+  B848 21 88 B8         ld hl,player1_score+2
 63+  B84B C3 51 B8         jp player_init_lifestart1
 64+  B84E              player_init_lifestart0:
 65+  B84E 21 91 B8         ld hl,player2_score+2
 66+  B851              player_init_lifestart1:
 67+  B851 ED B0            ldir
 68+  B853 C9               ret
 69+  B854
 70+  B854              ;
 71+  B854              ; Finalises a player at end of a life
 72+  B854              ; Copy lives, copy score
 73+  B854              ;
 74+  B854              player_lifeend:
 75+  B854 01 FB B7         ld bc,player+9
 76+  B857 0A               ld a,(bc)
 77+  B858 01 84 B8         ld bc,player1_lives
 78+  B85B 02               ld (bc),a
 79+  B85C CD 60 B8         call player_recordcurrentscore
 80+  B85F C9               ret
 81+  B860
 82+  B860              ;
 83+  B860              ; Copies the current score in the current
 84+  B860              ;
 85+  B860              player_recordcurrentscore:
 86+  B860 01 06 00         ld bc,6                  ; copy current score back to correct player
 87+  B863 21 A5 BC         ld hl,scores_current+2
 88+  B866 3A C4 B7         ld a,(game_currentplayer)
 89+  B869 FE 01            cp 1
 90+  B86B C2 74 B8         jp nz,player_lifeend0
 91+  B86E 11 88 B8         ld de,player1_score+2
 92+  B871 C3 77 B8         jp player_lifeend1
 93+  B874              player_lifeend0:
 94+  B874 11 91 B8         ld de,player2_score+2
 95+  B877              player_lifeend1:
 96+  B877 ED B0            ldir
 97+  B879 C9               ret
 98+  B87A
 99+  B87A              ;
100+  B87A              ; Player just died, subtract a life
101+  B87A              ;
102+  B87A              player_died:
103+  B87A 01 FB B7         ld bc,player+9
104+  B87D 0A               ld a,(bc)
105+  B87E 3D               dec a
106+  B87F 02               ld (bc),a
107+  B880 CD 54 B8         call player_lifeend
108+  B883 C9               ret
109+  B884
110+  B884              ;
111+  B884              ; Player lives
112+  B884              ;
113+  B884              player1_lives:
114+  B884 03               defb 3
115+  B885              player2_lives:
116+  B885 03               defb 3
117+  B886
118+  B886              ;
119+  B886              ; Player scores
120+  B886              ;
121+  B886              player1_score:
122+  B886 04 01 30 30      defb 4,1,'000000',255
122+  B88A 30 30 30 30
122+  B88E FF
123+  B88F              player2_score:
124+  B88F 16 01 30 30      defb 22,1,'000000',255
124+  B893 30 30 30 30
124+  B897 FF
125+  B898
126+  B898              ;
127+  B898              ; Kills a player this life
128+  B898              ;
129+  B898              player_killplayer:
130+  B898 21 FC B7         ld hl,player+10
131+  B89B 36 01            ld (hl),1
132+  B89D C9               ret
133+  B89E
134+  B89E              ;
135+  B89E              ; Crush a player this life
136+  B89E              ;
137+  B89E              player_crushplayer:
138+  B89E 21 FD B7         ld hl,player+11             ; mark as crushed
139+  B8A1 36 01            ld (hl),1
140+  B8A3 C9               ret
141+  B8A4
142+  B8A4              ;
143+  B8A4              ; Draws the player at the current position or deletes them
144+  B8A4              ;
145+  B8A4              player_drawplayer:
146+  B8A4 3A F4 B7         ld a,(player+2)             ; get the current direction
147+  B8A7 FE 03            cp 3
148+  B8A9 C2 AE B8         jp nz,player_drawplayer0
149+  B8AC 3E 00            ld a,0                      ; if 3, then down, so set the direction to 0 since the sprite is the same as up
150+  B8AE              player_drawplayer0:
151+  B8AE 5F               ld e,a                      ; store in e
152+  B8AF 3A FD B7         ld a,(player+11)             ; get the dying flag
153+  B8B2 FE 01            cp 1
154+  B8B4 CA C6 B8         jp z,player_drawplayer3     ; if it's one, we're being crushed
155+  B8B7              player_drawplayer4:
156+  B8B7 3A F8 B7         ld a,(player+6)             ; get the dig flag
157+  B8BA FE 01            cp 1
158+  B8BC CA 0F B9         jp z,player_drawplayer1    ; get dig frame
159+  B8BF 3A F5 B7         ld a,(player+3)             ; this is normal movement so get the current frame
160+  B8C2 83               add a,e
161+  B8C3 C3 14 B9         jp player_drawplayer2
162+  B8C6              player_drawplayer3:
163+  B8C6 21 FE B7         ld hl,player+12
164+  B8C9 7E               ld a,(hl)                  ; crushing, so get the current anim flag
165+  B8CA FE 00            cp 0
166+  B8CC C2 D5 B8         jp nz,player_drawplayer5    ; if this isn't zero, then this isn't the first time round, so do the crush anim
167+  B8CF 3E 64            ld a,100
168+  B8D1 77               ld (hl),a                   ; otherwise, load up the anim frames
169+  B8D2 C3 B7 B8         jp player_drawplayer4       ; and return to the main loop to remove the current frame
170+  B8D5              player_drawplayer5:
171+  B8D5 3D               dec a
172+  B8D6 77               ld (hl),a
173+  B8D7 FE 00            cp 0
174+  B8D9 CC 98 B8         call z,player_killplayer    ; final animation, so kill the player
175+  B8DC FE 14            cp 20                        ; check if we should move the rock
176+  B8DE C2 F2 B8         jp nz,player_drawplayer8
177+  B8E1 D9               exx
178+  B8E2 08               ex af,af'
179+  B8E3 ED 4B 46 BB      ld bc,(rocks_killerrock)    ; get the coords of the rock that killed us
180+  B8E7 21 28 B2         ld hl,sprites+72
181+  B8EA CD 9A A8         call sprites_drawsprite     ; draw a rock over current
182+  B8ED 08               ex af,af'
183+  B8EE D9               exx
184+  B8EF C3 08 B9         jp player_drawplayer6       ; continue drawing player
185+  B8F2              player_drawplayer8:
186+  B8F2 FE 14            cp 20
187+  B8F4 D2 08 B9         jp nc,player_drawplayer6    ; if not in last 10 frames, draw as normal
188+  B8F7 ED 4B F2 B7      ld bc,(player)
189+  B8FB CD 21 A8         call screen_getattraddressfromscreencoords ; get the attr address into de
190+  B8FE 62 6B            ld hl,de
191+  B900 36 42            ld (hl),66
192+  B902 21 28 B2         ld hl,sprites+72            ; otherwise, player is rock
193+  B905 C3 1E B9         jp player_drawplayer7
194+  B908              player_drawplayer6:
195+  B908 E6 01            and 1                       ; check for odd
196+  B90A C6 0A            add 10                      ; add 10, to get either 10 or 11
197+  B90C C3 14 B9         jp player_drawplayer2
198+  B90F              player_drawplayer1:
199+  B90F 3A F4 B7         ld a,(player+2)             ; digging, get the current direction again, because want all four
200+  B912 C6 06            add a,6                     ; add direction to 6 to get frame
201+  B914              player_drawplayer2:
202+  B914 07               rlca
203+  B915 07               rlca
204+  B916 07               rlca                        ; multiply by eight
205+  B917 6F               ld l,a
206+  B918 26 00            ld h,0
207+  B91A 11 67 B2         ld de,player_sprite
208+  B91D 19               add hl,de                   ; load hl with the location of the player sprite data
209+  B91E              player_drawplayer7:
210+  B91E ED 4B F2 B7      ld bc,(player)              ; load bc with the start coords
211+  B922 CD 9A A8         call sprites_drawsprite     ; call the routine to draw the sprite
212+  B925 CD 55 B9         call player_storeupdatedlines ; log updated rows
213+  B928 C9               ret
214+  B929
215+  B929
216+  B929              ;
217+  B929              ; Runs after the player just moved. Changes animation frame if required
218+  B929              ;
219+  B929              player_justmoved:
220+  B929 D9               exx
221+  B92A 3A F6 B7         ld a,(player+4)             ; get the transition count
222+  B92D FE 00            cp 0
223+  B92F CA 35 B9         jp z, player_justmoved2     ; if zero reset and change the frame
224+  B932 C3 4F B9         jp player_justmoved1       ; otherwise decrease and continue
225+  B935              player_justmoved2:
226+  B935                  ; reset and change frame in here
227+  B935 3E 01            ld a,1
228+  B937 32 F6 B7         ld (player+4),a            ; reset back to whatever
229+  B93A 3A F5 B7         ld a,(player+3)             ; load the frame
230+  B93D FE 03            cp 3                       ; flip between 3 and 0
231+  B93F C2 47 B9         jp nz, player_justmoved4
232+  B942 3E 00            ld a,0
233+  B944 C3 49 B9         jp player_justmoved5
234+  B947              player_justmoved4:
235+  B947 3E 03            ld a,3
236+  B949              player_justmoved5:
237+  B949 32 F5 B7         ld (player+3),a           ; save back
238+  B94C C3 53 B9         jp player_justmoved3
239+  B94F              player_justmoved1:
240+  B94F                  ; decrease count
241+  B94F 3D               dec a
242+  B950 32 F6 B7         ld (player+4),a
243+  B953              player_justmoved3:
244+  B953 D9               exx;
245+  B954 C9               ret
246+  B955
247+  B955              ;
248+  B955              ; Stores the updated rows associated with the player
249+  B955              ;
250+  B955              player_storeupdatedlines:
251+  B955 ED 4B F2 B7      ld bc,(player)          ; get the screen coords into bc
252+  B959 79               ld a,c                  ; get the player block coords of current block
253+  B95A E6 F8            and 248                 ; find closest multiple of eight
254+  B95C 0F               rrca
255+  B95D 0F               rrca
256+  B95E 0F               rrca                    ; divide by 8
257+  B95F ED 5B F6 A6      ld de,(screen_offset)          ; load the screen offset, this is in rows
258+  B963 93               sub e
259+  B964 F5               push af
260+  B965 CD A6 A5         call buffer_marklineforupdate  ; store current row in updated lines
261+  B968 F1               pop af
262+  B969 3D               dec a
263+  B96A F5               push af
264+  B96B CD A6 A5         call buffer_marklineforupdate  ; store line above
265+  B96E F1               pop af
266+  B96F 3C               inc a
267+  B970 3C               inc a
268+  B971 CD A6 A5         call buffer_marklineforupdate  ; store line beneath
269+  B974 C9               ret
270+  B975
271+  B975              ;
272+  B975              ; Called if the player has collected a diamond. Checks the current coord. If it is the start coord, then return complete
273+  B975              ; Outputs:
274+  B975              ; a - 1 for completed level
275+  B975              player_checkforexit:
276+  B975 ED 4B F2 B7      ld bc,(player)                 ; get player coords
277+  B979 ED 5B 22 80      ld de,(init_coord)             ; get start coords
278+  B97D 78               ld a,b
279+  B97E BA               cp d                         ; compare horiz
280+  B97F C2 8A B9         jp nz,player_checkforexit1
281+  B982 79               ld a,c
282+  B983 BB               cp e                        ; compare vert
283+  B984 C2 8A B9         jp nz,player_checkforexit1
284+  B987              player_checkforexit0:
285+  B987 3E 01            ld a,1                       ; hasn't completed
286+  B989 C9               ret
287+  B98A              player_checkforexit1:
288+  B98A 3E 00            ld a,0                       ; has completed
289+  B98C C9               ret
# file closed: game/player.asm
 38   B98D                  include "game\ship.asm"
# file opened: game/ship.asm
  1+  B98D              ;
  2+  B98D              ; Ship initial position: vert,horiz
  3+  B98D              ;
  4+  B98D              ship_initpos:
  5+  B98D 00 24            defb 0,36
  6+  B98F              ship_initpos2:
  7+  B98F 00 00            defb 0,0
  8+  B991              ship_frame:
  9+  B991 00               defb 0
 10+  B992              ;
 11+  B992              ; The current memory location
 12+  B992              ;
 13+  B992              ship_current_sprite:
 14+  B992 00 00            defb 0,0
 15+  B994
 16+  B994              ship_current_coords:
 17+  B994 00 00            defb 0,0
 18+  B996
 19+  B996              ;
 20+  B996              ;   Draw and land the ship - first move the ship down, then across, drawing the player in the middle
 21+  B996              ;
 22+  B996              ship_land:
 23+  B996 ED 4B 8D B9      ld bc,(ship_initpos)
 24+  B99A ED 43 8F B9      ld (ship_initpos2),bc        ; save the initial position for later use
 25+  B99E 1E 00            ld e,0                      ; store a flag to track first time round
 26+  B9A0 06 09            ld b,9                      ; move down 8 pixels
 27+  B9A2              ship_land0:
 28+  B9A2 C5               push bc
 29+  B9A3 7B               ld a,e
 30+  B9A4 D5               push de                     ; store de for next time round
 31+  B9A5 FE 01            cp 1                        ; check first time flag
 32+  B9A7 C2 BC B9         jp nz,ship_land1             ; don't draw over previous one if first time
 33+  B9AA CD 24 BA         call ship_draw_full         ; delete old one
 34+  B9AD CD F9 B9         call ship_change_frame      ; increment the frame
 35+  B9B0 ED 4B 8F B9      ld bc,(ship_initpos2)       ; get the current coords
 36+  B9B4 81 C6 01         add c,1                     ; move down one pixels
 37+  B9B7 4F               ld c,a
 38+  B9B8 ED 43 8F B9      ld (ship_initpos2),bc
 39+  B9BC              ship_land1:
 40+  B9BC CD 24 BA         call ship_draw_full         ; draw the ship
 41+  B9BF CD 0E BA         call ship_draw_screen
 42+  B9C2 D1               pop de
 43+  B9C3 1E 01            ld e,1
 44+  B9C5 C1               pop bc
 45+  B9C6 10 DA            djnz ship_land0             ; repeat for downward movement
 46+  B9C8                  ; done moving down
 47+  B9C8                  ; now move across
 48+  B9C8 CD A4 B8         call player_drawplayer      ; draw player
 49+  B9CB CD 24 BA         call ship_draw_full         ; delete old one
 50+  B9CE 1E 00            ld e,0                      ; store a flag to track first time round
 51+  B9D0 06 14            ld b,20                      ; move back 20 pixels pixels
 52+  B9D2              ship_land3:
 53+  B9D2 C5               push bc
 54+  B9D3 7B               ld a,e
 55+  B9D4 D5               push de                     ; store de for next time round
 56+  B9D5 FE 01            cp 1                        ; check first time flag
 57+  B9D7 C2 EC B9         jp nz,ship_land2             ; don't draw over previous one if first time
 58+  B9DA CD 24 BA         call ship_draw_full         ; delete old one
 59+  B9DD CD F9 B9         call ship_change_frame      ; increment the frame
 60+  B9E0 ED 4B 8F B9      ld bc,(ship_initpos2)       ; get the current coords
 61+  B9E4 78               ld a,b
 62+  B9E5 D6 01            sub 1                       ; move back one pixels
 63+  B9E7 47               ld b,a
 64+  B9E8 ED 43 8F B9      ld (ship_initpos2),bc
 65+  B9EC              ship_land2:
 66+  B9EC CD 24 BA         call ship_draw_full         ; draw the ship
 67+  B9EF CD 0E BA         call ship_draw_screen       ; draw the frame to screen by clearing the buffer
 68+  B9F2 D1               pop de
 69+  B9F3 1E 01            ld e,1                      ; set e to 1 to indicate >1 time
 70+  B9F5 C1               pop bc
 71+  B9F6 10 DA            djnz ship_land3             ; repeat for vertical movement
 72+  B9F8 C9               ret
 73+  B9F9
 74+  B9F9              ;
 75+  B9F9              ; Swap the animation frame between 0 and 32. This will be added to the memory location later
 76+  B9F9              ;
 77+  B9F9              ship_change_frame:
 78+  B9F9 F5               push af
 79+  B9FA 3A 91 B9         ld a,(ship_frame)
 80+  B9FD FE 00            cp 0
 81+  B9FF CA 07 BA         jp z,ship_change_frame0
 82+  BA02 3E 00            ld a,0                      ; flip to 0
 83+  BA04 C3 09 BA         jp ship_change_frame1
 84+  BA07              ship_change_frame0:
 85+  BA07 3E 20            ld a,32                      ; flip to 32
 86+  BA09              ship_change_frame1:
 87+  BA09 32 91 B9         ld (ship_frame),a            ; save the frame
 88+  BA0C F1               pop af
 89+  BA0D C9               ret
 90+  BA0E
 91+  BA0E              ship_draw_screen:
 92+  BA0E 3E 00            ld a,0
 93+  BA10 CD A6 A5         call buffer_marklineforupdate
 94+  BA13 3E 01            ld a,1
 95+  BA15 CD A6 A5         call buffer_marklineforupdate
 96+  BA18 3E 02            ld a,2
 97+  BA1A CD A6 A5         call buffer_marklineforupdate   ; mark the first three rows for update
 98+  BA1D 76               halt
 99+  BA1E F3               di
100+  BA1F CD 3D A6         call buffer_buffertoscreen  ; copy buffer to screen
101+  BA22 FB               ei                          ; enable interupts
102+  BA23 C9               ret
103+  BA24
104+  BA24              ship_draw_full:
105+  BA24 21 C7 B2         ld hl,ship_sprite
106+  BA27 ED 4B 8F B9      ld bc,(ship_initpos2)         ; load bc with the start coords
107+  BA2B 22 92 B9         ld (ship_current_sprite),hl  ; put into memory
108+  BA2E ED 43 94 B9      ld (ship_current_coords),bc  ; put into memory
109+  BA32 CD 51 BA         call ship_draw
110+  BA35 08               ex af,af'
111+  BA36 3A 91 B9         ld a,(ship_frame)            ; get the animation frame
112+  BA39 16 00            ld d,0
113+  BA3B 5F               ld e,a
114+  BA3C 19               add hl,de
115+  BA3D 22 92 B9         ld (ship_current_sprite),hl  ; put into memory
116+  BA40 08               ex af,af'
117+  BA41 ED 4B 8F B9      ld bc,(ship_initpos2)         ; load bc with the start coords
118+  BA45 81 C6 08         add c,8                      ; move one line down
119+  BA48 4F               ld c,a
120+  BA49 ED 43 94 B9      ld (ship_current_coords),bc  ; put into memory
121+  BA4D CD 51 BA         call ship_draw
122+  BA50 C9               ret
123+  BA51
124+  BA51              ;
125+  BA51              ; Draw the ship
126+  BA51              ; Inputs:
127+  BA51              ; None, all in memory
128+  BA51              ;
129+  BA51              ship_draw:
130+  BA51 3E 04            ld a,4                              ; 4 pieces per half
131+  BA53              ship_draw0:
132+  BA53 F5               push af
133+  BA54 2A 92 B9         ld hl,(ship_current_sprite)
134+  BA57 ED 4B 94 B9      ld bc,(ship_current_coords)         ; load bc with the start coords
135+  BA5B CD 9A A8         call sprites_drawsprite
136+  BA5E 2A 92 B9         ld hl,(ship_current_sprite)
137+  BA61 ED 4B 94 B9      ld bc,(ship_current_coords)         ; load bc with the start coords
138+  BA65 11 08 00         ld de,8
139+  BA68 19               add hl,de
140+  BA69 80 C6 08         add b,8
141+  BA6C 47               ld b,a
142+  BA6D 22 92 B9         ld (ship_current_sprite),hl         ; put into memory
143+  BA70 ED 43 94 B9      ld (ship_current_coords),bc         ; put into memory
144+  BA74 F1               pop af
145+  BA75 3D               dec a
146+  BA76 FE 00            cp 0
147+  BA78 C2 53 BA         jp nz,ship_draw0
148+  BA7B
149+  BA7B C9               ret
150+  BA7C
# file closed: game/ship.asm
 39   BA7C                  include "game\tank.asm"
# file opened: game/tank.asm
  1+  BA7C              ;
  2+  BA7C              ; tank initial position: vert,horiz
  3+  BA7C              ;
  4+  BA7C              tank_initpos:
  5+  BA7C 10 D0            defb 16,208
  6+  BA7E              tank_initpos2:
  7+  BA7E 00 00            defb 0,0
  8+  BA80              tank_frame:
  9+  BA80 00               defb 0
 10+  BA81              tank_anim:
 11+  BA81 11               defb 17
 12+  BA82              ;
 13+  BA82              ; The current memory location
 14+  BA82              ;
 15+  BA82              tank_current_sprite:
 16+  BA82 00 00            defb 0,0
 17+  BA84
 18+  BA84              tank_current_coords:
 19+  BA84 00 00            defb 0,0
 20+  BA86
 21+  BA86              ;
 22+  BA86              ; Initialise the tank
 23+  BA86              ;
 24+  BA86              tank_init:
 25+  BA86 ED 4B 7C BA      ld bc,(tank_initpos)
 26+  BA8A ED 43 7E BA      ld (tank_initpos2),bc       ; save the initial position for later use
 27+  BA8E 21 80 BA         ld hl,tank_frame
 28+  BA91 36 00            ld (hl),0
 29+  BA93 21 81 BA         ld hl,tank_anim
 30+  BA96 36 11            ld (hl),17                  ; reset tank
 31+  BA98 C9               ret
 32+  BA99
 33+  BA99              ;
 34+  BA99              ;   Draw and move the tank
 35+  BA99              ;   Start processing at frame 200
 36+  BA99              ;   Don't move if anim is zero
 37+  BA99              ;   Decrement frame if moved
 38+  BA99              ;
 39+  BA99              tank_process:
 40+  BA99 3A 81 BA         ld a,(tank_anim)
 41+  BA9C FE 00            cp 0
 42+  BA9E C8               ret z                       ; return if we've already moved
 43+  BA9F CD E8 B7         call game_getcurrentframe   ; get the current frame number into a
 44+  BAA2 FE 4B            cp 75
 45+  BAA4 D8               ret c                       ; return if the frame number is below 100
 46+  BAA5 CD B0 BA         call tank_move              ; move tank if not
 47+  BAA8 3A 81 BA         ld a,(tank_anim)
 48+  BAAB 3D               dec a
 49+  BAAC 32 81 BA         ld (tank_anim),a            ; decrease the anim count
 50+  BAAF C9               ret
 51+  BAB0
 52+  BAB0              tank_move:
 53+  BAB0 ED 4B 7E BA      ld bc,(tank_initpos2)
 54+  BAB4 C5               push bc
 55+  BAB5 3A 81 BA         ld a,(tank_anim)
 56+  BAB8 FE 11            cp 17                       ; check first time flag
 57+  BABA CA CC BA         jp z,tank_move1             ; don't draw over previous one if first time
 58+  BABD CD D1 BA         call tank_draw_full         ; delete old one
 59+  BAC0 ED 4B 7E BA      ld bc,(tank_initpos2)       ; get the current coords
 60+  BAC4 78               ld a,b
 61+  BAC5 D6 01            sub 1                       ; move back one pixels
 62+  BAC7 47               ld b,a
 63+  BAC8 ED 43 7E BA      ld (tank_initpos2),bc
 64+  BACC              tank_move1:
 65+  BACC CD D1 BA         call tank_draw_full         ; draw the tank
 66+  BACF C1               pop bc
 67+  BAD0 C9               ret
 68+  BAD1
 69+  BAD1              tank_draw_full:
 70+  BAD1 21 27 B3         ld hl,tank_sprite
 71+  BAD4 ED 4B 7E BA      ld bc,(tank_initpos2)         ; load bc with the start coords
 72+  BAD8 22 82 BA         ld (tank_current_sprite),hl  ; put into memory
 73+  BADB ED 43 84 BA      ld (tank_current_coords),bc  ; put into memory
 74+  BADF CD 08 BB         call tank_draw
 75+  BAE2 08               ex af,af'
 76+  BAE3 3A 80 BA         ld a,(tank_frame)            ; get the animation frame
 77+  BAE6 16 00            ld d,0
 78+  BAE8 5F               ld e,a
 79+  BAE9 19               add hl,de
 80+  BAEA 22 82 BA         ld (tank_current_sprite),hl  ; put into memory
 81+  BAED 08               ex af,af'
 82+  BAEE ED 4B 7E BA      ld bc,(tank_initpos2)         ; load bc with the start coords
 83+  BAF2 81 C6 08         add c,8                      ; move one line down
 84+  BAF5 4F               ld c,a
 85+  BAF6 ED 43 84 BA      ld (tank_current_coords),bc  ; put into memory
 86+  BAFA CD 08 BB         call tank_draw
 87+  BAFD 3E 02            ld a,2
 88+  BAFF CD A6 A5         call buffer_marklineforupdate
 89+  BB02 3E 03            ld a,3
 90+  BB04 CD A6 A5         call buffer_marklineforupdate   ; mark the first two rows for update
 91+  BB07 C9               ret
 92+  BB08
 93+  BB08              ;
 94+  BB08              ; Draw the tank
 95+  BB08              ; Inputs:
 96+  BB08              ; None, all in memory
 97+  BB08              ;
 98+  BB08              tank_draw:
 99+  BB08 3E 04            ld a,4                              ; 4 pieces per half
100+  BB0A              tank_draw0:
101+  BB0A F5               push af
102+  BB0B 2A 82 BA         ld hl,(tank_current_sprite)
103+  BB0E ED 4B 84 BA      ld bc,(tank_current_coords)         ; load bc with the start coords
104+  BB12 CD 9A A8         call sprites_drawsprite
105+  BB15 2A 82 BA         ld hl,(tank_current_sprite)
106+  BB18 ED 4B 84 BA      ld bc,(tank_current_coords)         ; load bc with the start coords
107+  BB1C 11 08 00         ld de,8
108+  BB1F 19               add hl,de
109+  BB20 80 C6 08         add b,8
110+  BB23 47               ld b,a
111+  BB24 22 82 BA         ld (tank_current_sprite),hl         ; put into memory
112+  BB27 ED 43 84 BA      ld (tank_current_coords),bc         ; put into memory
113+  BB2B F1               pop af
114+  BB2C 3D               dec a
115+  BB2D FE 00            cp 0
116+  BB2F C2 0A BB         jp nz,tank_draw0
117+  BB32
118+  BB32 C9               ret
119+  BB33
# file closed: game/tank.asm
 40   BB33                  include "game\rocks.asm"
# file opened: game/rocks.asm
  1+  BB33              ;
  2+  BB33              ; A structure of falling rocks
  3+  BB33              ; Assume we'll never have more than 4 falling at any one time
  4+  BB33              ; (1,2 - 16 bit memory location for rock graphic),state (0 fell, 1 falling, 2 wobbling), countdown
  5+  BB33              ;
  6+  BB33              rocks_falling:
  7+  BB33 00 00 00 00      defb 0,0,0,0
  8+  BB37 00 00 00 00      defb 0,0,0,0
  9+  BB3B 00 00 00 00      defb 0,0,0,0
 10+  BB3F 00 00 00 00      defb 0,0,0,0
 11+  BB43
 12+  BB43              rocks_tmp:
 13+  BB43 00               defb 0
 14+  BB44
 15+  BB44              rocks_tmp2:
 16+  BB44 00 00            defb 0,0
 17+  BB46
 18+  BB46              ;
 19+  BB46              ; Coords of the rock that killed us
 20+  BB46              ;
 21+  BB46              rocks_killerrock:
 22+  BB46 00 00            defb 0,0
 23+  BB48
 24+  BB48              ;
 25+  BB48              ; Checks for a rock that needs to start falling. Takes a memory location of the first line at the bottom of the space.
 26+  BB48              ; Checks to see if the pixel row in that location is a rock bottom. If it is, mark this rock as ready to fall.
 27+  BB48              ; If the pixel row is not the rock bottom, stop checking.
 28+  BB48              ; Inputs:
 29+  BB48              ; hl- memory location
 30+  BB48              ;
 31+  BB48              rocks_checkforfalling:
 32+  BB48 7E               ld a,(hl)           ; get the pixel row in this memory location
 33+  BB49 FE 7E            cp 126              ; check against the bottom pixel row of the rock graphic
 34+  BB4B C2 51 BB         jp nz,rocks_checkforfalling2 ; not a rock, stop
 35+  BB4E CD 52 BB         call rocks_addrocktofalling ; mark the rock as falling
 36+  BB51              rocks_checkforfalling2:
 37+  BB51 C9               ret
 38+  BB52
 39+  BB52              ;
 40+  BB52              ; Adds the rock to the structure that tracks falling rocks
 41+  BB52              ; Inputs:
 42+  BB52              ; hl - memory location of falling rock graphic
 43+  BB52              ; bc - coords of rock, c vert
 44+  BB52              rocks_addrocktofalling:
 45+  BB52 C5               push bc             ; store the coords
 46+  BB53 11 33 BB         ld de,rocks_falling
 47+  BB56 06 04            ld b,4              ; number of possible falling rocks
 48+  BB58              rocks_addrocktofalling0:
 49+  BB58 13               inc de
 50+  BB59                  ;inc de
 51+  BB59 13               inc de              ; move three along to get the state
 52+  BB5A 1A               ld a,(de)           ; load the state
 53+  BB5B FE 00            cp 0                ; check if this is not falling
 54+  BB5D C2 73 BB         jp nz,rocks_addrocktofalling1 ; continue the loop if not 0
 55+  BB60 13               inc de              ; move to frame
 56+  BB61 3E 10            ld a,16             ; load the number of frames to wobble
 57+  BB63 12               ld (de),a
 58+  BB64 1B               dec de              ; move de back to state
 59+  BB65 3E 02            ld a,2
 60+  BB67 12               ld (de),a           ; set the state to wobbling
 61+  BB68 1B               dec de              ; move back coords
 62+  BB69 C1               pop bc              ; get back coords
 63+  BB6A 78               ld a,b
 64+  BB6B 12               ld (de),a           ; store the vertical
 65+  BB6C 1B               dec de
 66+  BB6D 79               ld a,c
 67+  BB6E 12               ld (de),a           ; store the horizontal
 68+  BB6F C5               push bc
 69+  BB70 C3 77 BB         jp rocks_addrocktofalling2 ; done
 70+  BB73              rocks_addrocktofalling1:
 71+  BB73 13               inc de
 72+  BB74 13               inc de              ; move memory along to next rock
 73+  BB75 10 E1            djnz rocks_addrocktofalling0 ; try the next rock
 74+  BB77              rocks_addrocktofalling2: ; done, return
 75+  BB77 C1               pop bc              ; to tidy up
 76+  BB78 C9               ret
 77+  BB79
 78+  BB79              ;
 79+  BB79              ; Processes any falling rocks
 80+  BB79              ;
 81+  BB79              rocks_processrocks:
 82+  BB79 DD 21 33 BB      ld ix,rocks_falling
 83+  BB7D 06 04            ld b,4              ; the number of rocks to check
 84+  BB7F              rocks_processrocks0:
 85+  BB7F C5               push bc             ; store loop count
 86+  BB80 DD 4E 00 DD      ld bc,(ix)          ; load the coords for this rock into bc
 86+  BB84 46 01
 87+  BB86 DD 23            inc ix
 88+  BB88 DD 23            inc ix              ; move to the state
 89+  BB8A DD 7E 00         ld a,(ix)           ; load the state into a
 90+  BB8D FE 00            cp 0
 91+  BB8F CA B3 BB         jp z,rocks_processrocks3 ; if not falling, check next
 92+  BB92 FE 02            cp 2
 93+  BB94 C2 A4 BB         jp nz, rocks_processrocks2
 94+  BB97                  ; we're wobbling
 95+  BB97 DD 23            inc ix              ; get frame number for wobble
 96+  BB99 DD 7E 00         ld a,(ix)           ; get wobble frame into a
 97+  BB9C CD 71 BC         call rocks_wobble
 98+  BB9F DD 23            inc ix              ; increment for next
 99+  BBA1 C3 B7 BB         jp rocks_processrocks1  ; do next rock
100+  BBA4              rocks_processrocks2:
101+  BBA4                  ; we're falling
102+  BBA4 C5               push bc
103+  BBA5 CD D0 BB         call rocks_fall
104+  BBA8 C1               pop bc
105+  BBA9 CD BB BB         call rocks_storeupdatedlines
106+  BBAC DD 23            inc ix
107+  BBAE DD 23            inc ix              ; inc ix to get to next
108+  BBB0 C3 B7 BB         jp rocks_processrocks1
109+  BBB3              rocks_processrocks3:
110+  BBB3 DD 23            inc ix
111+  BBB5 DD 23            inc ix
112+  BBB7              rocks_processrocks1:
113+  BBB7 C1               pop bc              ; get loop count back
114+  BBB8 10 C5            djnz rocks_processrocks0
115+  BBBA C9               ret
116+  BBBB
117+  BBBB              ;
118+  BBBB              ; Stores the updated rows associated with the rock
119+  BBBB              ; Inputs:
120+  BBBB              ; bc - coords
121+  BBBB              ;
122+  BBBB              rocks_storeupdatedlines:
123+  BBBB 79               ld a,c                  ; get the rock block coords of current block
124+  BBBC E6 F8            and 248                 ; find closest multiple of eight
125+  BBBE 0F               rrca
126+  BBBF 0F               rrca
127+  BBC0 0F               rrca                    ; divide by 8
128+  BBC1 ED 5B F6 A6      ld de,(screen_offset)          ; load the screen offset, this is in rows
129+  BBC5 93               sub e
130+  BBC6 F5               push af
131+  BBC7 CD A6 A5         call buffer_marklineforupdate  ; store current row in updated lines
132+  BBCA F1               pop af
133+  BBCB 3C               inc a
134+  BBCC CD A6 A5         call buffer_marklineforupdate  ; store line beneath
135+  BBCF C9               ret
136+  BBD0
137+  BBD0              ;
138+  BBD0              ; Falls a rock one pixel, checks the next square down to see if it is empty, if not, stop falling
139+  BBD0              ; bc - coord of current rock graphic on screen
140+  BBD0              ; ix - memory location of current rock in rock list, currently at the 3rd position (rock state)
141+  BBD0              ;
142+  BBD0              rocks_fall:
143+  BBD0 DD 2B            dec ix
144+  BBD2 DD 2B            dec ix              ; decrease ix back to coords
145+  BBD4 ED 43 44 BB      ld (rocks_tmp2),bc  ; store original coords
146+  BBD8 3E 03            ld a,3              ; move this number of pixels
147+  BBDA              rocks_fall1:
148+  BBDA 08               ex af,af'
149+  BBDB DD 4E 00 DD      ld bc,(ix)          ; get current coords
149+  BBDF 46 01
150+  BBE1 CD DD A8         call sprites_scadd  ; get the memory of the coords into de
151+  BBE4 14               inc d               ; add 256 to get next row
152+  BBE5 1A               ld a,(de)           ; get the contents of the next row
153+  BBE6 FE 00            cp 0
154+  BBE8 C2 41 BC         jp nz,rocks_fall3    ; move the rock if the row is empty
155+  BBEB 0C               inc c               ; increment the vertical
156+  BBEC DD 71 00 DD      ld (ix),bc          ; store the new coords
156+  BBF0 70 01
157+  BBF2 79               ld a,c              ; get the vertical coord into a
158+  BBF3 E6 07            and 7               ; divisible by 8?
159+  BBF5 FE 00            cp 0
160+  BBF7 C2 12 BC         jp nz,rocks_fall4   ; if not, carry on
161+  BBFA CD 21 A8         call screen_getattraddressfromscreencoords ; get the attr address into de
162+  BBFD 62 6B            ld hl,de
163+  BBFF 36 42            ld (hl),66          ; load this square with the yellow colour
164+  BC01 DD 4E 00 DD      ld bc,(ix)
164+  BC05 46 01
165+  BC07 79               ld a,c              ; get vertical
166+  BC08 D6 08            sub 8               ; look up one square
167+  BC0A 4F               ld c,a              ; put a back in c
168+  BC0B CD 21 A8         call screen_getattraddressfromscreencoords ; get the attr address into de
169+  BC0E 62 6B            ld hl,de
170+  BC10 36 46            ld (hl),70          ; load this square with the yellow colour
171+  BC12              rocks_fall4:
172+  BC12 08               ex af,af'
173+  BC13 3D               dec a
174+  BC14 FE 00            cp 0
175+  BC16 C2 DA BB         jp nz,rocks_fall1   ; do another pixel if needed
176+  BC19              rocks_fall2:
177+  BC19 3E 09            ld a,9              ; rock graphic
178+  BC1B ED 4B 44 BB      ld bc,(rocks_tmp2)  ; get the original coords
179+  BC1F CD 78 A8         call screen_getblock     ; get the memory into hl
180+  BC22 CD 9A A8         call sprites_drawsprite  ; draw the sprite - over the top of the current one
181+  BC25 3E 09            ld a,9
182+  BC27 DD 4E 00 DD      ld bc,(ix)          ; get the new coords
182+  BC2B 46 01
183+  BC2D CD 78 A8         call screen_getblock     ; get the memory into hl
184+  BC30 CD 9A A8         call sprites_drawsprite  ; draw the sprite - over the top of the current one
185+  BC33 DD 4E 00 DD      ld bc,(ix)          ; get the coords again
185+  BC37 46 01
186+  BC39 CD 56 BC         call rocks_checkforplayer ; check to see if we hit a player
187+  BC3C DD 23            inc ix
188+  BC3E DD 23            inc ix                  ; get ix back to state
189+  BC40 C9               ret
190+  BC41              rocks_fall3:
191+  BC41 3E 00            ld a,0              ; set the state to fell
192+  BC43 DD 77 02         ld (ix+2),a           ; store the falling state
193+  BC46 DD 4E 00 DD      ld bc,(ix)          ; get the coords
193+  BC4A 46 01
194+  BC4C CD 21 A8         call screen_getattraddressfromscreencoords ; get the attr address into de
195+  BC4F 62 6B            ld hl,de
196+  BC51 36 42            ld (hl),66
197+  BC53 C3 19 BC         jp rocks_fall2      ; rejoin main loop
198+  BC56
199+  BC56              ;
200+  BC56              ; Checks to see if the rock is hitting a player
201+  BC56              ; Inputs:
202+  BC56              ; bc - coords of rock we're checking
203+  BC56              rocks_checkforplayer:
204+  BC56 ED 5B F2 B7      ld de,(player)       ; get the player coords
205+  BC5A 7B               ld a,e               ; get the vert coord first
206+  BC5B 91               sub c                ; subtract the rock vertical coord from players
207+  BC5C FE 08            cp 8                 ; the rock will only hit a player if the player is directly underneath, so this must be 8
208+  BC5E C0               ret nz               ; if not, hasn't hit
209+  BC5F 7A               ld a,d               ; get the player horiz coord
210+  BC60 90               sub b                ; subtract rock coord
211+  BC61 C6 07            add 7                ; add max distance
212+  BC63 FE 0D            cp 13                ; compare to 13? if carry flag set, they've hit
213+  BC65 DA 69 BC         jp c,rocks_checkforplayer0
214+  BC68 C9               ret
215+  BC69              rocks_checkforplayer0:
216+  BC69 ED 43 46 BB      ld (rocks_killerrock),bc; store the coords of the killer rock
217+  BC6D CD 9E B8         call player_crushplayer ; if so, jump out
218+  BC70 C9               ret
219+  BC71
220+  BC71              ;
221+  BC71              ; Wobbles a rocks
222+  BC71              ; Inputs:
223+  BC71              ; bc - coord of current rock graphic on screen
224+  BC71              ; ix - memory location of current rock in rock list, currently at the 4th position (wobble count)
225+  BC71              ; a - wobble frame
226+  BC71              rocks_wobble:
227+  BC71 DD 7E 00         ld a,(ix)           ; get the wobble count, which we'll use as frame toggle
228+  BC74 E6 01            and 1               ; is it odd or even, gets 1 or 0
229+  BC76 1E 09            ld e,9              ; this is the rock frame
230+  BC78 83               add a,e             ; add the frame toggle
231+  BC79 C5               push bc
232+  BC7A CD 78 A8         call screen_getblock     ; get the memory into hl
233+  BC7D CD 9A A8         call sprites_drawsprite  ; draw the sprite - over the top of the current one
234+  BC80
235+  BC80 DD 7E 00         ld a,(ix)           ; get the frame toggle again
236+  BC83 3D               dec a               ; decrease
237+  BC84 DD 77 00         ld (ix),a           ; store
238+  BC87
239+  BC87 E6 01            and 1
240+  BC89 1E 09            ld e,9              ; this is the rock frame
241+  BC8B 83               add a,e             ; add the frame toggle
242+  BC8C CD 78 A8         call screen_getblock     ; get the memory into hl
243+  BC8F
244+  BC8F C1               pop bc
245+  BC90 CD 9A A8         call sprites_drawsprite  ; draw the sprite again with the new frame - next time it will do the opposite
246+  BC93
247+  BC93 DD 7E 00         ld a,(ix)           ; get the wobble count back
248+  BC96 FE 00            cp 0
249+  BC98 C0               ret nz              ; if we're not at zero, return
250+  BC99 DD 2B            dec ix              ; otherwise look to state location
251+  BC9B 3E 01            ld a,1              ; set the state to falling
252+  BC9D DD 77 00         ld (ix),a           ; store the falling state
253+  BCA0 DD 23            inc ix              ; set ix back to location of wobble count, and we're done
254+  BCA2 C9               ret
255+  BCA3
# file closed: game/rocks.asm
 41   BCA3                  include "game\scores.asm"
# file opened: game/scores.asm
  1+  BCA3              ;
  2+  BCA3              ; The score of the current player
  3+  BCA3              ;
  4+  BCA3              scores_current:
  5+  BCA3 04 01 30 30      defb 4,1,'000000',255       ;+2
  5+  BCA7 30 30 30 30
  5+  BCAB FF
  6+  BCAC
  7+  BCAC              scores_defaultname:
  8+  BCAC 2D 2D 2D         defb '---'
  9+  BCAF
 10+  BCAF              ;
 11+  BCAF              ; The current high score table
 12+  BCAF              ;
 13+  BCAF              scores_table:
 14+  BCAF 03 17 47 41      defb 03,23,'GAM000000',255         ;+0, +2, +5
 14+  BCB3 4D 30 30 30
 14+  BCB7 30 30 30 FF
 15+  BCBB 0C 17 47 41      defb 12,23,'GAM000000',255        ;+12, +14, +17
 15+  BCBF 4D 30 30 30
 15+  BCC3 30 30 30 FF
 16+  BCC7 15 17 47 41      defb 21,23,'GAM000000',255        ;+24, +26, +29
 16+  BCCB 4D 30 30 30
 16+  BCCF 30 30 30 FF
 17+  BCD3
 18+  BCD3              ;
 19+  BCD3              ; Add thousands to the score
 20+  BCD3              ; Inputs:
 21+  BCD3              ; b - number to add
 22+  BCD3              ;
 23+  BCD3              scores_addthousands:
 24+  BCD3 21 A7 BC         ld hl,scores_current+4
 25+  BCD6 CD 00 BD         call scores_update
 26+  BCD9 C9               ret
 27+  BCDA
 28+  BCDA              ;
 29+  BCDA              ; Prints the score to screen
 30+  BCDA              ;
 31+  BCDA              scores_printscore:
 32+  BCDA 3A C4 B7         ld a,(game_currentplayer)   ; get current player
 33+  BCDD 21 A3 BC         ld hl,scores_current
 34+  BCE0 FE 01            cp 1
 35+  BCE2 C2 EA BC         jp nz, score_printscore0    ; if not player 1
 36+  BCE5 36 04            ld (hl),4       ; set position for player 1
 37+  BCE7 C3 EC BC         jp score_printscore1
 38+  BCEA              score_printscore0:
 39+  BCEA 36 16            ld (hl),22       ; set position for player 2
 40+  BCEC              score_printscore1:
 41+  BCEC 21 A3 BC         ld hl,scores_current
 42+  BCEF CD A6 84         call string_print
 43+  BCF2 C9               ret
 44+  BCF3
 45+  BCF3              ;
 46+  BCF3              ; Prints both scores to screen
 47+  BCF3              ;
 48+  BCF3              scores_printscores:
 49+  BCF3 21 86 B8         ld hl,player1_score
 50+  BCF6 CD A6 84         call string_print
 51+  BCF9 21 8F B8         ld hl,player2_score
 52+  BCFC CD A6 84         call string_print
 53+  BCFF C9               ret
 54+  BD00
 55+  BD00              ;
 56+  BD00              ; Updates the current score.
 57+  BD00              ; Inputs:
 58+  BD00              ; hl - memory location of the score column
 59+  BD00              ; b - number to add
 60+  BD00              ;
 61+  BD00              scores_update:
 62+  BD00 7E               ld a,(hl)           ; current value of digit.
 63+  BD01 80               add a,b             ; add points to this digit.
 64+  BD02 77               ld (hl),a           ; place new digit back in string.
 65+  BD03 FE 3A            cp 58               ; more than ASCII value '9'?
 66+  BD05 D8               ret c               ; no - relax.
 67+  BD06 D6 0A            sub 10              ; subtract 10.
 68+  BD08 77               ld (hl),a           ; put new character back in string.
 69+  BD09              scores_update0:
 70+  BD09 2B               dec hl              ; previous character in string.
 71+  BD0A 34               inc (hl)            ; up this by one.
 72+  BD0B 7E               ld a,(hl)           ; what's the new value?
 73+  BD0C FE 3A            cp 58               ; gone past ASCII nine?
 74+  BD0E D8               ret c               ; no, scoring done.
 75+  BD0F D6 0A            sub 10              ; down by ten.
 76+  BD11 77               ld (hl),a           ; put it back
 77+  BD12 C3 09 BD         jp scores_update0   ; go round again.
 78+  BD15
 79+  BD15
 80+  BD15              ;
 81+  BD15              ; Displays the high score table at the bottom of the screen
 82+  BD15              ;
 83+  BD15              scores_showtable:
 84+  BD15 21 AF BC         ld hl, scores_table
 85+  BD18 CD A6 84         call string_print
 86+  BD1B 21 BB BC         ld hl, scores_table+12
 87+  BD1E CD A6 84         call string_print
 88+  BD21 21 C7 BC         ld hl, scores_table+24
 89+  BD24 CD A6 84         call string_print
 90+  BD27 C9               ret
 91+  BD28
 92+  BD28              ;
 93+  BD28              ; Place to store the current position we're checking
 94+  BD28              ;
 95+  BD28              scores_highscoretmp:
 96+  BD28 00               defb 0
 97+  BD29
 98+  BD29              ;
 99+  BD29              ; Updates the highscore table. Start at bottom score. Work way from left. Compare each digit. If current is higher than one we're checking,
100+  BD29              ; copy checking one down (or erase) then copy current over that one. Then move up one and do the same
101+  BD29              ;
102+  BD29              scores_processhighscores:
103+  BD29 21 28 BD         ld hl,scores_highscoretmp
104+  BD2C 36 00            ld (hl),0  ; load up the tracking byte with 0 (ie, not on the table)
105+  BD2E 3E 1D            ld a,29
106+  BD30              scores_processhighscores3:
107+  BD30 21 AF BC         ld hl,scores_table          ; position of first score column
108+  BD33 5F               ld e,a
109+  BD34 16 00            ld d,0
110+  BD36 19               add hl,de
111+  BD37 08               ex af,af'                   ; store a for later
112+  BD38 11 A5 BC         ld de,scores_current+2      ; position of current score column
113+  BD3B 06 06            ld b,6                      ; times to loop
114+  BD3D              scores_processhighscores0:
115+  BD3D 7E               ld a,(hl)
116+  BD3E 4F               ld c,a                      ; get first score column
117+  BD3F 1A               ld a,(de)                   ; get first current column
118+  BD40 B9               cp c                        ; compare current with first
119+  BD41 DA 52 BD         jp c,scores_processhighscores4  ; if c is bigger, then this is not a higher score, so end
120+  BD44 23               inc hl
121+  BD45 13               inc de                      ; move to next column
122+  BD46 10 F5            djnz scores_processhighscores0 ; loop
123+  BD48 08               ex af,af'                     ; still here, so must be bigger
124+  BD49 32 28 BD         ld (scores_highscoretmp),a  ; store the position indicator in the tracking byte
125+  BD4C 0E 0C            ld c,12
126+  BD4E 91               sub c
127+  BD4F D2 30 BD         jp nc,scores_processhighscores3 ; if the place we're looking is less than zero, we've gone to far, so continue, otherwise go again
128+  BD52              scores_processhighscores4
129+  BD52 CD 56 BD         call scores_updatehighscores
130+  BD55 C9               ret
131+  BD56
132+  BD56              ;
133+  BD56              ; Update score table
134+  BD56              ;
135+  BD56              scores_updatehighscores:
136+  BD56 3A 28 BD         ld a,(scores_highscoretmp)  ; get the place we want to overwrite
137+  BD59 FE 00            cp 0
138+  BD5B C8               ret z                       ; if this is 0, didn't get a high score
139+  BD5C FE 1D            cp 29                       ; check against 29... if it's equal, we don't want to copy the current score down one
140+  BD5E CA 91 BD         jp z, scores_updatehighscores3
141+  BD61                                              ; copy old score over one below, if not first
142+  BD61 21 AF BC         ld hl,scores_table
143+  BD64 11 11 00         ld de,17                    ; start at second score, because this is the first one we'd ever need to copy...
144+  BD67 19               add hl,de                   ; position of first column
145+  BD68 2B               dec hl
146+  BD69 2B               dec hl
147+  BD6A 2B               dec hl
148+  BD6B E5               push hl
149+  BD6C 11 0C 00         ld de,12
150+  BD6F 19               add hl,de                   ; get position of next score
151+  BD70 54 5D            ld de,hl
152+  BD72 E1               pop hl                      ; get hl back
153+  BD73 01 09 00         ld bc,9
154+  BD76 ED B0            ldir
155+  BD78 FE 11            cp 17                       ; see if we're copying into the second place slot (17 memory offset). If so, stop copying back the scores
156+  BD7A CA 91 BD         jp z,scores_updatehighscores3
157+  BD7D 21 AF BC         ld hl,scores_table
158+  BD80 11 02 00         ld de,2                    ; ... otherwise, copy back the first score
159+  BD83 19               add hl,de                   ; position of first column
160+  BD84 E5               push hl
161+  BD85 11 0C 00         ld de,12
162+  BD88 19               add hl,de                   ; get position of next score
163+  BD89 54 5D            ld de,hl
164+  BD8B E1               pop hl                      ; get hl back
165+  BD8C 01 09 00         ld bc,9
166+  BD8F ED B0            ldir
167+  BD91              scores_updatehighscores3:
168+  BD91 06 06            ld b,6                      ; now overwrite
169+  BD93 21 AF BC         ld hl,scores_table
170+  BD96 16 00            ld d,0
171+  BD98 5F               ld e,a
172+  BD99 19               add hl,de                   ; position of first column
173+  BD9A 08               ex af,af'
174+  BD9B 11 A5 BC         ld de,scores_current+2      ; position of current score column
175+  BD9E              scores_updatehighscores2:
176+  BD9E 1A               ld a,(de)
177+  BD9F 77               ld (hl),a
178+  BDA0 23               inc hl
179+  BDA1 13               inc de
180+  BDA2 10 FA            djnz scores_updatehighscores2
181+  BDA4 11 09 00         ld de,9
182+  BDA7 ED 52            sbc hl,de
183+  BDA9 54 5D            ld de,hl                    ; get back to start of entry
184+  BDAB 21 AC BC         ld hl,scores_defaultname    ; still need to overwrite the name
185+  BDAE 01 03 00         ld bc,3                      ; 3 chars to copy
186+  BDB1 ED B0            ldir
187+  BDB3 C9               ret
# file closed: game/scores.asm
 42   BDB4                  include "game\diamonds.asm"
# file opened: game/diamonds.asm
  1+  BDB4              diamonds_tmp:
  2+  BDB4 00               defb 0
  3+  BDB5
  4+  BDB5              ;
  5+  BDB5              ; Holds the number of thousands for the current gem type
  6+  BDB5              ;
  7+  BDB5              diamonds_score:
  8+  BDB5 00               defb 0
  9+  BDB6
 10+  BDB6              ;
 11+  BDB6              ; Changes the attribute of gem and diamond cells based on the frame count
 12+  BDB6              ; Inputs:
 13+  BDB6              ; hl - memory location of gem type
 14+  BDB6              diamonds_twinkle_type:
 15+  BDB6 CD E8 B7         call game_getcurrentframe       ; get current frame number
 16+  BDB9 E6 07            and 7                           ; want a number from 0-7
 17+  BDBB C6 40            add 64                          ; add to 60 to get attr colour
 18+  BDBD              diamonds_twinkle_type0:
 19+  BDBD 4E 23 46 2B      ld bc,(hl)                      ; get coords into bc
 20+  BDC1 08               ex af, af'
 21+  BDC2 79               ld a,c                          ; load c into a
 22+  BDC3 FE FF            cp 255                          ; is this the end?
 23+  BDC5 CA E2 BD         jp z,diamonds_twinkle_type1           ; step out if so
 24+  BDC8 23               inc hl
 25+  BDC9 23               inc hl
 26+  BDCA 7E               ld a,(hl)                       ; check the state, don't process if collected
 27+  BDCB FE 01            cp 1
 28+  BDCD CA E3 BD         jp z,diamonds_twinkle_type2           ; step out if so
 29+  BDD0 CD 1F BE         call diamonds_checkforplayer    ; check to see if we've collided with player
 30+  BDD3 DC EA BD         call c,diamonds_collect     ; we collided
 31+  BDD6 23               inc hl
 32+  BDD7 08               ex af,af'
 33+  BDD8 5E 23 56 2B      ld de,(hl)                      ; get the memory location into de
 34+  BDDC 12               ld (de),a                       ; set the value of attr
 35+  BDDD 23               inc hl
 36+  BDDE 23               inc hl                          ; move to next diamond
 37+  BDDF C3 BD BD         jp diamonds_twinkle_type0
 38+  BDE2              diamonds_twinkle_type1:
 39+  BDE2 C9               ret
 40+  BDE3              diamonds_twinkle_type2:
 41+  BDE3 23               inc hl                          ; do stuff the we would have done anyway to get to next gem
 42+  BDE4 23               inc hl
 43+  BDE5 23               inc hl
 44+  BDE6 08               ex af,af'
 45+  BDE7 C3 BD BD         jp diamonds_twinkle_type0       ; rejoin main loop
 46+  BDEA
 47+  BDEA              ;
 48+  BDEA              ; Collect the diamond we collided with
 49+  BDEA              ; Inputs:
 50+  BDEA              ; hl - memory location of current diamond, currently on state
 51+  BDEA              ; Output:
 52+  BDEA              ; a - 70 - for yellow on black
 53+  BDEA              diamonds_collect:
 54+  BDEA 36 01            ld (hl),1                       ; collected
 55+  BDEC E5               push hl
 56+  BDED 2B               dec hl
 57+  BDEE 2B               dec hl
 58+  BDEF 4E 23 46 2B      ld bc,(hl)                      ; get the coords
 59+  BDF3 CD 44 A8         call screen_getscreencoordsfromcharcoords ; get the screen coords into bc
 60+  BDF6 ED 5B B4 BD      ld de,(diamonds_tmp)            ; tmp stores the offset for this type of gem
 61+  BDFA 16 00            ld d,0
 62+  BDFC 21 E0 B1         ld hl,sprites
 63+  BDFF 19               add hl,de
 64+  BE00 CD 9A A8         call sprites_drawsprite     ; call the routine to draw the sprite
 65+  BE03 E1               pop hl
 66+  BE04 08               ex af,af'
 67+  BE05 3E 46            ld a,70
 68+  BE07 08               ex af,af'                       ; make sure a is in the af we'll use for the attr
 69+  BE08 D9               exx
 70+  BE09 3A B5 BD         ld a,(diamonds_score)
 71+  BE0C 47               ld b,a
 72+  BE0D CD D3 BC         call scores_addthousands
 73+  BE10 3A B4 BD         ld a,(diamonds_tmp)
 74+  BE13 FE 40            cp 64                       ; check the gem type offset, if its 64 this is a diamond, so mark the level as completable
 75+  BE15 C2 1D BE         jp nz,diamonds_collect0
 76+  BE18 21 FF B7         ld hl,player+13
 77+  BE1B 36 01            ld (hl),1                   ; mark the player as able to complete the level
 78+  BE1D              diamonds_collect0:
 79+  BE1D D9               exx
 80+  BE1E C9               ret
 81+  BE1F
 82+  BE1F              ;
 83+  BE1F              ; Checks to see if the gem is hitting a player
 84+  BE1F              ; Inputs:
 85+  BE1F              ; bc - coords of diamond we're checking
 86+  BE1F              diamonds_checkforplayer:
 87+  BE1F 78               ld a,b               ; multiply b by 8
 88+  BE20 07               rlca
 89+  BE21 07               rlca
 90+  BE22 07               rlca
 91+  BE23 47               ld b,a
 92+  BE24 ED 5B F2 B7      ld de,(player)       ; get the player coords
 93+  BE28 7B               ld a,e               ; get the vert coord first
 94+  BE29 90               sub b                ; subtract the diamond vertical coord from players
 95+  BE2A C6 04            add 4                ; add the max distance
 96+  BE2C FE 09            cp 9                ; compare to max*2+1? if carry flag set, they've hit
 97+  BE2E D0               ret nc               ; if not, hasn't hit
 98+  BE2F 79               ld a,c               ; multiply c by 8
 99+  BE30 07               rlca
100+  BE31 07               rlca
101+  BE32 07               rlca
102+  BE33 4F               ld c,a
103+  BE34 7A               ld a,d               ; get the player horiz coord
104+  BE35 91               sub c                ; subtract rock coord
105+  BE36 C6 04            add 4                ; add max distance
106+  BE38 FE 09            cp 9                ; compare to max*2+1? if carry flag set, they've hit
107+  BE3A D0               ret nc
108+  BE3B 3E 00            ld a,0
109+  BE3D C9               ret
110+  BE3E
111+  BE3E
112+  BE3E              ;
113+  BE3E              ; Initialise diamonds and gems
114+  BE3E              ;
115+  BE3E              diamonds_twinkle
116+  BE3E 21 B5 BD         ld hl,diamonds_score
117+  BE41 36 02            ld (hl),2         ; store the score we'll add
118+  BE43 21 B4 BD         ld hl,diamonds_tmp
119+  BE46 36 40            ld (hl),64         ; store the location the diamond sprite
120+  BE48 21 5B B1         ld hl, level01diamonds
121+  BE4B CD B6 BD         call diamonds_twinkle_type
122+  BE4E 21 B5 BD         ld hl,diamonds_score
123+  BE51 36 01            ld (hl),1         ; store the score we'll add
124+  BE53 21 B4 BD         ld hl,diamonds_tmp
125+  BE56 36 70            ld (hl),112         ; store the location the gem sprite
126+  BE58 21 6B B1         ld hl, level01gems
127+  BE5B CD B6 BD         call diamonds_twinkle_type
128+  BE5E C9               ret
129+  BE5F
130+  BE5F              ;
131+  BE5F              ; Initialise diamonds and gems
132+  BE5F              ;
133+  BE5F              diamonds_init:
134+  BE5F 21 5B B1         ld hl, level01diamonds
135+  BE62 CD 6C BE         call diamonds_init_type
136+  BE65 21 6B B1         ld hl, level01gems
137+  BE68 CD 6C BE         call diamonds_init_type
138+  BE6B C9               ret
139+  BE6C
140+  BE6C              ;
141+  BE6C              ; Initialise diamonds or gems, get memory addresses
142+  BE6C              ; Inputs:
143+  BE6C              ; hl - memory location
144+  BE6C              diamonds_init_type:
145+  BE6C 4E               ld c,(hl)                      ; get coords into c
146+  BE6D 79               ld a,c                          ; load c into add
147+  BE6E FE FF            cp 255                          ; is this the end?
148+  BE70 CA 87 BE         jp z,diamonds_init_type1             ; step out if so
149+  BE73 23               inc hl
150+  BE74 46               ld b,(hl)                       ; get coords into b
151+  BE75 E5               push hl
152+  BE76 CD F1 A7         call screen_getcellattradress ; get memory of attr for this diamond into de
153+  BE79 E1               pop hl
154+  BE7A 23               inc hl                          ; move to state
155+  BE7B 36 00            ld (hl),0
156+  BE7D 23               inc hl                          ; move to memory
157+  BE7E 73 23 72 2B      ld (hl),de                      ; store the memory location
158+  BE82 23               inc hl                          ; move to next diamond
159+  BE83 23               inc hl
160+  BE84 C3 6C BE         jp diamonds_init_type
161+  BE87              diamonds_init_type1:
162+  BE87 C9               ret
# file closed: game/diamonds.asm
 43   BE88
 44   BE88              ;===========================================================================
 45   BE88              ; main routine - the code execution starts here.
 46   BE88              ; Sets up the new interrupt routine, the memory
 47   BE88              ; banks and jumps to the start loop.
 48   BE88              ;===========================================================================
 49   BE88              main:
 50   BE88
 51   BE88                  ; Draw the title screen
 52   BE88              main_titlescreen:
 53   BE88 CD 03 A9         call titlescreen_show
 54   BE8B CD 00 B8         call player_init_gamestart
 55   BE8E
 56   BE8E              main_lifestart:
 57   BE8E
 58   BE8E CD 1E B8         call player_init_lifestart
 59   BE91
 60   BE91 CD 67 AA         call lifescreen_draw        ; show the lives remaining screen
 61   BE94
 62   BE94 CD 00 80         call init_start
 63   BE97 CD 11 A7         call screen_draw
 64   BE9A CD 6F A6         call buffer_allbuffertoscreen
 65   BE9D
 66   BE9D CD 96 B9         call ship_land              ; land the ship
 67   BEA0 CD 86 BA         call tank_init
 68   BEA3 CD 5F BE         call diamonds_init
 69   BEA6
 70   BEA6              mloop:
 71   BEA6 76               halt
 72   BEA7 CD D6 BE         call main_loop_processing
 73   BEAA
 74   BEAA                  ;
 75   BEAA                  ; Check if the player died
 76   BEAA                  ;
 77   BEAA 21 FC B7         ld hl,player+10
 78   BEAD 7E               ld a,(hl)                   ; check if the player died this frame
 79   BEAE FE 01            cp 1
 80   BEB0 C2 C2 BE         jp nz,mloop0
 81   BEB3 CD 7A B8         call player_died        ; do end of life housekeeping
 82   BEB6 21 FB B7         ld hl,player+9        ; check lives remaining
 83   BEB9 7E               ld a,(hl)
 84   BEBA FE 00            cp 0
 85   BEBC CA F5 BE         jp z,main_gameover   ; leave the loop if we're done
 86   BEBF C3 8E BE         jp main_lifestart    ; otherwise, start a new life
 87   BEC2              mloop0:
 88   BEC2                  ;
 89   BEC2                  ; Check if the player completed the level
 90   BEC2                  ;
 91   BEC2 21 FF B7         ld hl,player+13
 92   BEC5 7E               ld a,(hl)
 93   BEC6 FE 01            cp 1
 94   BEC8 C2 A6 BE         jp nz,mloop
 95   BECB CD 75 B9         call player_checkforexit
 96   BECE FE 01            cp 1                        ; look at return, if 1, level has been completed
 97   BED0 CA FB BE         jp z,main_endlevel          ; jump to level transition screen
 98   BED3 C3 A6 BE         jp mloop                ; start the loop again
 99   BED6
100   BED6
101   BED6              main_loop_processing:
102   BED6 CD 3D A6         call buffer_buffertoscreen  ; copy buffer to screen
103   BED9 CD BD A5         call buffer_clearlist       ; zero the updated lines list
104   BEDC CD A4 B8         call player_drawplayer      ; delete player
105   BEDF CD 6F B3         call control_keyboard       ; check keyboard
106   BEE2 CD A4 B8         call player_drawplayer      ; draw player
107   BEE5 CD 99 BA         call tank_process           ; prcoess the tank
108   BEE8 CD 79 BB         call rocks_processrocks     ; process falling rocks
109   BEEB CD 3E BE         call diamonds_twinkle       ; make the diamonds twinkle
110   BEEE CD DA BC         call scores_printscore      ; update the score on screen
111   BEF1 CD D9 B7         call game_incrementframe    ; increment the game frame
112   BEF4
113   BEF4 C9               ret
114   BEF5
115   BEF5              main_gameover:
116   BEF5 CD BA AA         call gameover_draw          ; show the game over screen
117   BEF8 C3 88 BE         jp main_titlescreen         ; go back to title
118   BEFB
119   BEFB              main_endlevel:
120   BEFB CD 60 B8         call player_recordcurrentscore
121   BEFE CD A8 AB         call endlevel_draw          ; show the end level screen
122   BF01 C3 8E BE         jp main_lifestart           ; start a new life
123   BF04
124   BF04              ;===========================================================================
125   BF04              ; Stack.
126   BF04              ;===========================================================================
127   BF04
128   BF04              ; Stack: this area is reserved for the stack
129   BF04              STACK_SIZE: equ 100    ; in words
130   BF04
131   BF04              ; Reserve stack space
132   BF04 00 00            defw 0  ; WPMEM, 2
133   BF06              stack_bottom:
134   BF06 00 00 00...      defs    STACK_SIZE*2, 0
135   BFCE              stack_top:
136   BFCE 00 00            defw 0  ; WPMEM, 2
137   BFD0
138   BFD0                     SAVESNA "ThePit.sna", main
# file closed: main.asm
