# file opened: main.asm
  1   0000                  DEVICE ZXSPECTRUM48
  2   0000
  3   0000                  ORG $8000
  4   8000
  5   8000              ;===========================================================================
  6   8000              ; Persistent watchpoint.
  7   8000              ; Change WPMEMx (remove the 'x' from WPMEMx) below to activate.
  8   8000              ; If you do so the program will hit a breakpoint when it tries to
  9   8000              ; write to the first byte of the 3rd line.
 10   8000              ; When program breaks in the fill_memory sub routine please hover over hl
 11   8000              ; to see that it contains 0x5804 or COLOR_SCREEN+64.
 12   8000              ;===========================================================================
 13   8000
 14   8000              ; WPMEMx 0x5840, 1, w
 15   8000
 16   8000
 17   8000              ;===========================================================================
 18   8000              ; Include modules
 19   8000              ;===========================================================================
 20   8000                  include "init.asm"
# file opened: init.asm
  1+  8000              ;
  2+  8000              ; Set up at start up
  3+  8000              ;
  4+  8000              init_start:
  5+  8000              ; We want a black screen.
  6+  8000
  7+  8000 3E 47            ld a,71             ; white ink (7) on black paper (0),
  8+  8002                                      ; bright (64).
  9+  8002 CD 67 80         call utilities_clearscreen
 10+  8005 32 8D 5C         ld (23693),a        ; set our screen colours.
 11+  8008 AF               xor a               ; quick way to load accumulator with zero.
 12+  8009 CD 9B 22         call 8859           ; set permanent border colours.
 13+  800C
 14+  800C 21 8C A5         ld hl,screen_offset ; reset some temp variables
 15+  800F 36 00            ld (hl),0
 16+  8011 21 8D A5         ld hl,screen_tmp
 17+  8014 36 00            ld (hl),0
 18+  8016 21 27 A4         ld hl,buffer_tmp
 19+  8019 36 00            ld (hl),0
 20+  801B 23               inc hl
 21+  801C 36 00            ld (hl),0
 22+  801E
 23+  801E CD 89 B4         call game_resetcurrentframe ; reset current frame
 24+  8021
 25+  8021 C9               ret
 26+  8022
 27+  8022              ;
 28+  8022              ;   Start coord
 29+  8022              ;   vert c, horiz b
 30+  8022              init_coord:
 31+  8022 18 30            defb 24,48
 32+  8024
 33+  8024              ;
 34+  8024              ; Number of lives to start
 35+  8024              ;
 36+  8024              init_lives:
 37+  8024 03               defb 3
 38+  8025
 39+  8025              ;
 40+  8025              ; Score to start
 41+  8025              ;
 42+  8025              init_score:
 43+  8025 30 30 30 30      defb '000000'
 43+  8029 30 30
# file closed: init.asm
 21   802B                  include "utilities.asm"
# file opened: utilities.asm
  1+  802B              ; ##########################################################################
  2+  802B              ; Print a character
  3+  802B              ; Inputs:
  4+  802B              ; b - x coord
  5+  802B              ; c - y coord
  6+  802B              ; d - character
  7+  802B              ; e - colour
  8+  802B              ; ##########################################################################
  9+  802B              utilities_print_char:
 10+  802B 7B               ld a,e
 11+  802C 32 8F 5C         ld (23695),a        ; set our temporary screen colours.
 12+  802F 3E 16            ld a,22
 13+  8031 D7               rst 16              ; Calls the Sinclair PRINT AT routine
 14+  8032 78               ld a,b              ; Gets the X co-ordinate
 15+  8033 3D               dec a
 16+  8034 D7               rst 16
 17+  8035 79               ld a,c              ; and the Y co-ordinate
 18+  8036 D7               rst 16              ; So, essentially PRINT AT X,Y; like in BASIC
 19+  8037 7A               ld a,d              ; ASCII code for udg.
 20+  8038 D7               rst 16              ; draw block.
 21+  8039 C9               ret
 22+  803A
 23+  803A
 24+  803A              ;Inputs:
 25+  803A              ;     DE and A are factors
 26+  803A              ;Outputs:
 27+  803A              ;     A is not changed
 28+  803A              ;     B is 0
 29+  803A              ;     C is not changed
 30+  803A              ;     DE is not changed
 31+  803A              ;     HL is the product
 32+  803A              ;Time:
 33+  803A              ;     342+6x
 34+  803A              ;
 35+  803A              utilities_multiply:
 36+  803A 06 08            ld b,8          ;7           7
 37+  803C 21 00 00         ld hl,0         ;10         10
 38+  803F 29               add hl,hl     ;11*8       88
 39+  8040 07               rlca          ;4*8        32
 40+  8041 30 01            jr nc,$+3     ;(12|18)*8  96+6x
 41+  8043 19                   add hl,de   ;--         --
 42+  8044 10 F9            djnz $-5      ;13*7+8     99
 43+  8046 C9               ret             ;10         10
 44+  8047
 45+  8047              utilities_waitforkey:
 46+  8047 21 08 5C         ld hl,23560         ; LAST K system variable.
 47+  804A 36 00            ld (hl),0           ; put null value there.
 48+  804C              utilities_waitforkey0:
 49+  804C 7E               ld a,(hl)           ; new value of LAST K.
 50+  804D FE 00            cp 0                ; is it still zero?
 51+  804F 28 FB            jr z,utilities_waitforkey0           ; yes, so no key pressed.
 52+  8051 C9               ret                 ; key was pressed.
 53+  8052
 54+  8052              ;
 55+  8052              ; Waits number of frames for keypress. If got, returns 1, if not 0
 56+  8052              ; Inputs:
 57+  8052              ; a - number of frames to waits
 58+  8052              ; Ouputs:
 59+  8052              ; e - 0 not pressed, 1 pressed
 60+  8052              utilities_waitforkey_forframes:
 61+  8052 21 08 5C         ld hl,23560         ; LAST K system variable.
 62+  8055 36 00            ld (hl),0           ; put null value there.
 63+  8057 47               ld b,a              ; number of frames to wait
 64+  8058              utilities_waitforkey_forframes0:
 65+  8058 7E               ld a,(hl)           ; new value of LAST K.
 66+  8059 FE 00            cp 0                ; is it still zero?
 67+  805B 28 03            jr z,utilities_waitforkey_forframes1           ; yes, so no key pressed.
 68+  805D 1E 01            ld e,1              ; set the pressed flag
 69+  805F C9               ret                 ; key was pressed.
 70+  8060              utilities_waitforkey_forframes1:
 71+  8060 76               halt                ; wait for frame
 72+  8061 76               halt                ; wait for frame
 73+  8062 10 F4            djnz utilities_waitforkey_forframes0 ; loop again
 74+  8064 1E 00            ld e,0              ; nothing pressed in time
 75+  8066 C9               ret
 76+  8067
 77+  8067              ;
 78+  8067              ; Clears the screen
 79+  8067              ; Inputs:
 80+  8067              ; a - attribute colour
 81+  8067              utilities_clearscreen:
 82+  8067 76               halt
 83+  8068 21 00 58         ld hl,22528         ; attr
 84+  806B 11 01 58         ld de,22529         ; attr+1
 85+  806E 01 FF 02         ld bc,767
 86+  8071 77               ld (hl),a
 87+  8072 ED B0            ldir
 88+  8074
 89+  8074 21 00 40         ld hl, 16384        ;pixels
 90+  8077 11 01 40         ld de, 16385        ;pixels + 1
 91+  807A 01 FF 17         ld bc, 6143         ;pixels area length - 1
 92+  807D 36 00            ld (hl), 0          ;set first byte to '0'
 93+  807F ED B0            ldir                ;copy bytes
 94+  8081
 95+  8081 C9               ret
 96+  8082
# file closed: utilities.asm
 22   8082                  include "strings.asm"
# file opened: strings.asm
  1+  8082              string_score1:
  2+  8082 04 00 53 43      defb 4,0,'SCORE1',255
  2+  8086 4F 52 45 31
  2+  808A FF
  3+  808B              string_scorenumbers1:
  4+  808B 04 01 30 30      defb 4,1,'000000',255
  4+  808F 30 30 30 30
  4+  8093 FF
  5+  8094              string_company:
  6+  8094 0F 00 45 4E      defb 15,0,'ENV',255
  6+  8098 56 FF
  7+  809A              string_credits:
  8+  809A 0C 01 50 4C      defb 12,1,'PLAYER 1',255
  8+  809E 41 59 45 52
  8+  80A2 20 31 FF
  9+  80A5              string_score2:
 10+  80A5 16 00 53 43      defb 22,0,'SCORE2',255
 10+  80A9 4F 52 45 32
 10+  80AD FF
 11+  80AE              string_scorenumbers2:
 12+  80AE 16 01 30 30      defb 22,1,'000000',255
 12+  80B2 30 30 30 30
 12+  80B6 FF
 13+  80B7              string_titlescreen_copyright:
 14+  80B7 04 16 7F 20      defb 4,22, 127,' 1982 AW ZILEC ELC LTD',255
 14+  80BB 31 39 38 32
 14+  80BF 20 41 57 20
 14+  80C3 5A 49 4C 45
 14+  80C7 43 20 45 4C
 14+  80CB 43 20 4C 54
 14+  80CF 44 FF
 15+  80D1
 16+  80D1
 17+  80D1              string_alttitlescreen_1:
 18+  80D1 0C 00 43 52      defb 12,0,'CREDITS 1',255
 18+  80D5 45 44 49 54
 18+  80D9 53 20 31 FF
 19+  80DD              string_alttitlescreen_2:
 20+  80DD 00 02 20 20      defb 0,2,'           THE OBJECT',254
 20+  80E1 20 20 20 20
 20+  80E5 20 20 20 20
 20+  80E9 20 54 48 45
 20+  80ED 20 4F 42 4A
 20+  80F1 45 43 54 FE
 21+  80F5 00 03 20 20      defb 0,3,'          OF THIS GAME',254
 21+  80F9 20 20 20 20
 21+  80FD 20 20 20 20
 21+  8101 4F 46 20 54
 21+  8105 48 49 53 20
 21+  8109 47 41 4D 45
 21+  810D FE
 22+  810E 00 04 20 20      defb 0,4,'         IS TO DIG DOWN',254
 22+  8112 20 20 20 20
 22+  8116 20 20 20 49
 22+  811A 53 20 54 4F
 22+  811E 20 44 49 47
 22+  8122 20 44 4F 57
 22+  8126 4E FE
 23+  8128 00 05 20 20      defb 0,5,'        TO THE BOTTOM PIT',254
 23+  812C 20 20 20 20
 23+  8130 20 20 54 4F
 23+  8134 20 54 48 45
 23+  8138 20 42 4F 54
 23+  813C 54 4F 4D 20
 23+  8140 50 49 54 FE
 24+  8144 00 06 20 20      defb 0,6,'               AND',254
 24+  8148 20 20 20 20
 24+  814C 20 20 20 20
 24+  8150 20 20 20 20
 24+  8154 20 41 4E 44
 24+  8158 FE
 25+  8159 00 07 20 20      defb 0,7,'        COLLECT AT LEAST',254
 25+  815D 20 20 20 20
 25+  8161 20 20 43 4F
 25+  8165 4C 4C 45 43
 25+  8169 54 20 41 54
 25+  816D 20 4C 45 41
 25+  8171 53 54 FE
 26+  8174 00 08 20 20      defb 0,8,'         ONE LARGE JEWEL',254
 26+  8178 20 20 20 20
 26+  817C 20 20 20 4F
 26+  8180 4E 45 20 4C
 26+  8184 41 52 47 45
 26+  8188 20 4A 45 57
 26+  818C 45 4C FE
 27+  818F 00 09 20 20      defb 0,9,'              THEN',254
 27+  8193 20 20 20 20
 27+  8197 20 20 20 20
 27+  819B 20 20 20 20
 27+  819F 54 48 45 4E
 27+  81A3 FE
 28+  81A4 00 0A 20 20      defb 0,10,'         RETURN TO SHIP',254
 28+  81A8 20 20 20 20
 28+  81AC 20 20 20 52
 28+  81B0 45 54 55 52
 28+  81B4 4E 20 54 4F
 28+  81B8 20 53 48 49
 28+  81BC 50 FE
 29+  81BE 00 0B 20 20      defb 0,11,'         THRU UPPER PIT',255
 29+  81C2 20 20 20 20
 29+  81C6 20 20 20 54
 29+  81CA 48 52 55 20
 29+  81CE 55 50 50 45
 29+  81D2 52 20 50 49
 29+  81D6 54 FF
 30+  81D8              string_alttitlescreen_3:
 31+  81D8 00 0D 20 20      defb 0,13,'    SINGLE BONUS  5000 POINTS',254
 31+  81DC 20 20 53 49
 31+  81E0 4E 47 4C 45
 31+  81E4 20 42 4F 4E
 31+  81E8 55 53 20 20
 31+  81EC 35 30 30 30
 31+  81F0 20 50 4F 49
 31+  81F4 4E 54 53 FE
 32+  81F8 00 0E 20 20      defb 0,14,'      COLLECT 1 LARGE JEWEL',254
 32+  81FC 20 20 20 20
 32+  8200 43 4F 4C 4C
 32+  8204 45 43 54 20
 32+  8208 31 20 4C 41
 32+  820C 52 47 45 20
 32+  8210 4A 45 57 45
 32+  8214 4C FE
 33+  8216 00 0F 20 20      defb 0,15,'       AND RETURN TO SHIP',254
 33+  821A 20 20 20 20
 33+  821E 20 41 4E 44
 33+  8222 20 52 45 54
 33+  8226 55 52 4E 20
 33+  822A 54 4F 20 53
 33+  822E 48 49 50 FE
 34+  8232 00 11 20 20      defb 0,17,'    DOUBLE BONUS  10000 POINTS',254
 34+  8236 20 20 44 4F
 34+  823A 55 42 4C 45
 34+  823E 20 42 4F 4E
 34+  8242 55 53 20 20
 34+  8246 31 30 30 30
 34+  824A 30 20 50 4F
 34+  824E 49 4E 54 53
 34+  8252 FE
 35+  8253 00 12 20 20      defb 0,18,'    COLLECT ALL 3 LARGE JEWELS',254
 35+  8257 20 20 43 4F
 35+  825B 4C 4C 45 43
 35+  825F 54 20 41 4C
 35+  8263 4C 20 33 20
 35+  8267 4C 41 52 47
 35+  826B 45 20 4A 45
 35+  826F 57 45 4C 53
 35+  8273 FE
 36+  8274 00 13 20 20      defb 0,19,'       OR   ALL 4 SMALL JEWELS',254
 36+  8278 20 20 20 20
 36+  827C 20 4F 52 20
 36+  8280 20 20 41 4C
 36+  8284 4C 20 34 20
 36+  8288 53 4D 41 4C
 36+  828C 4C 20 4A 45
 36+  8290 57 45 4C 53
 36+  8294 FE
 37+  8295 00 15 20 20      defb 0,21,'    TRIPLE BONUS  15000 POINTS',254
 37+  8299 20 20 54 52
 37+  829D 49 50 4C 45
 37+  82A1 20 42 4F 4E
 37+  82A5 55 53 20 20
 37+  82A9 31 35 30 30
 37+  82AD 30 20 50 4F
 37+  82B1 49 4E 54 53
 37+  82B5 FE
 38+  82B6 00 16 20 20      defb 0,22,'       COLLECT ALL 7 JEWELS',255
 38+  82BA 20 20 20 20
 38+  82BE 20 43 4F 4C
 38+  82C2 4C 45 43 54
 38+  82C6 20 41 4C 4C
 38+  82CA 20 37 20 4A
 38+  82CE 45 57 45 4C
 38+  82D2 53 FF
 39+  82D4
 40+  82D4              string_lifescreen_player:
 41+  82D4 0B 00 20 50      defb 11,0,' PLAYER 1 ',255
 41+  82D8 4C 41 59 45
 41+  82DC 52 20 31 20
 41+  82E0 FF
 42+  82E1              string_lifescreen_lives:
 43+  82E1 0B 03 30 20      defb 11,3,48,' MEN LEFT',255
 43+  82E5 4D 45 4E 20
 43+  82E9 4C 45 46 54
 43+  82ED FF
 44+  82EE              string_lifescreen_lastman:
 45+  82EE 0C 03 4C 41      defb 12,3,'LAST MAN',255
 45+  82F2 53 54 20 4D
 45+  82F6 41 4E FF
 46+  82F9
 47+  82F9              string_gameoverscreen_gameover:
 48+  82F9 0C 06 47 41      defb 12,6,'GAME OVER',255
 48+  82FD 4D 45 20 4F
 48+  8301 56 45 52 FF
 49+  8305              string_gameoverscreen_copyright:
 50+  8305 05 12 7F 20      defb 5,18,127,' 1982 AW ZILEC ELC LTD',255
 50+  8309 31 39 38 32
 50+  830D 20 41 57 20
 50+  8311 5A 49 4C 45
 50+  8315 43 20 45 4C
 50+  8319 43 20 4C 54
 50+  831D 44 FF
 51+  831F              string_gameoverscreen_bestscores:
 52+  831F 07 16 42 45      defb 7,22,'BEST SCORES TODAY',255
 52+  8323 53 54 20 53
 52+  8327 43 4F 52 45
 52+  832B 53 20 54 4F
 52+  832F 44 41 59 FF
 53+  8333              string_gameover_credits:
 54+  8333 0C 01 43 52      defb 12,1,'CREDITS 0',255
 54+  8337 45 44 49 54
 54+  833B 53 20 30 FF
 55+  833F
 56+  833F              ;
 57+  833F              ; Prints specified string
 58+  833F              ; Inputs:
 59+  833F              ; de: pointer to string
 60+  833F              ; bc: length of string
 61+  833F              ;
 62+  833F              ; Print String Data
 63+  833F              ; First two bytes of string contain X and Y char position, then the string
 64+  833F              ; Individual strings are terminated with 0xFE
 65+  833F              ; End of data is terminated with 0xFF
 66+  833F              ; HL: Address of string
 67+  833F              ;
 68+  833F 5E           string_print:           LD E,(HL)                       ; Fetch the X coordinate
 69+  8340 23                                   INC HL                          ; Increase HL to the next memory location
 70+  8341 56                                   LD D,(HL)                       ; Fetch the Y coordinate
 71+  8342 23                                   INC HL                          ; Increase HL to the next memory location
 72+  8343 CD 56 83                             CALL string_getcharaddress           ; Calculate the screen address (in DE)
 73+  8346 7E           string_print_0:         LD A,(HL)                       ; Fetch the character to print
 74+  8347 23                                   INC HL                          ; Increase HL to the next character
 75+  8348 FE FE                                CP 0xFE                         ; Compare with 0xFE
 76+  834A 28 F3                                JR Z,string_print               ; If it is equal to 0xFE then loop back to print next string
 77+  834C D0                                   RET NC                          ; If it is greater or equal to (carry bit set) then
 78+  834D E5                                   PUSH HL                         ; Push HL on stack (Print_Char will not preserve HL)
 79+  834E CD 66 83                             CALL Print_Char                 ; Print the character
 80+  8351 E1                                   POP HL                          ; Retrieve HL back off the stack
 81+  8352 1C                                   INC E                           ; Go to the next screen address
 82+  8353 18 F1                                JR string_print_0               ; Loop back to print next character
 83+  8355 C9                                   RET
 84+  8356
 85+  8356              ; Get screen address
 86+  8356              ; D = Y character position
 87+  8356              ; E = X character position
 88+  8356              ; Returns address in DE
 89+  8356              ;
 90+  8356 7A           string_getcharaddress:       LD A,D
 91+  8357 E6 07                                AND %00000111
 92+  8359 1F                                   RRA
 93+  835A 1F                                   RRA
 94+  835B 1F                                   RRA
 95+  835C 1F                                   RRA
 96+  835D B3                                   OR E
 97+  835E 5F                                   LD E,A
 98+  835F 7A                                   LD A,D
 99+  8360 E6 18                                AND %00011000
100+  8362 F6 40                                OR %01000000
101+  8364 57                                   LD D,A
102+  8365 C9                                   RET                             ; Returns screen address in DE
103+  8366
104+  8366              ; Print a single character out
105+  8366              ; A:  Character to print
106+  8366              ; DE: Screen address to print character at
107+  8366              ;
108+  8366 21 00 3C     Print_Char:             LD HL,0x3C00                    ; Address of character set table in ROM
109+  8369 06 00                                LD B,0                          ; Set BC to A
110+  836B 4F                                   LD C,A
111+  836C E6 FF                                AND 0xFF                        ; Clear the carry bit
112+  836E CB 11                                RL C                            ; Multiply BC by 8 (shift left 3 times)
113+  8370 CB 10                                RL B
114+  8372 CB 11                                RL C
115+  8374 CB 10                                RL B
116+  8376 CB 11                                RL C
117+  8378 CB 10                                RL B
118+  837A 09                                   ADD HL,BC                       ; Get the character address in HL
119+  837B 0E 08                                LD C,8                          ; Loop counter
120+  837D D5                                   PUSH DE
121+  837E 7E           Print_Char_1:           LD A,(HL)                       ; Get the byte from the ROM into A
122+  837F 12                                   LD (DE),A                       ; Stick A onto the screen
123+  8380 14                                   INC D                           ; Goto next line on screen
124+  8381 2C                                   INC L                           ; Goto next byte of character
125+  8382 0D                                   DEC C                           ; Decrease the loop counter
126+  8383 20 F9                                JR NZ,Print_Char_1              ; Loop around whilst it is Not Zero (NZ)
127+  8385 D1                                   POP DE
128+  8386 C9                                   RET                             ; Return from the subroutine
# file closed: strings.asm
 23   8387                  include "screen\buffer.asm"
# file opened: screen/buffer.asm
  1+  8387              buffer_buffer:
  2+  8387 00 00 00...      defs 7424                   ; area reserved for screen
  3+  A087
  4+  A087              buffer_attr_buffer:
  5+  A087 00 00 00...      defs 928                    ; attrs buffer area
  6+  A427
  7+  A427              buffer_tmp:
  8+  A427 00 00            defb 0,0                    ; temp area
  9+  A429
 10+  A429              buffer_updatedlines:
 11+  A429 FF FF FF...      defs 21,255
 12+  A43E
 13+  A43E              buffer_updateall:
 14+  A43E 00               defb 0
 15+  A43F
 16+  A43F              ;
 17+  A43F              ; Stores a line number in the update list
 18+  A43F              ; Inputs:
 19+  A43F              ; a - row number
 20+  A43F              buffer_marklineforupdate:
 21+  A43F 5F               ld e,a                          ; store in e
 22+  A440 06 15            ld b,21
 23+  A442 21 29 A4         ld hl,buffer_updatedlines
 24+  A445              buffer_marklineforupdate0:
 25+  A445 7E               ld a,(hl)                       ; get the line stored in updated lines
 26+  A446 BB               cp e                            ; is this the same as the row number passed in?
 27+  A447 C8               ret z                           ; if so, don't need to do anything
 28+  A448 FE FF            cp 255                          ; is this 255, ie the end of the buffer
 29+  A44A C2 4F A4         jp nz,buffer_marklineforupdate1 ; if not, move to next
 30+  A44D 73               ld (hl),e                       ; if it is, this spot is empty, so store the row number
 31+  A44E C9               ret                             ; and finish
 32+  A44F              buffer_marklineforupdate1:
 33+  A44F 23               inc hl
 34+  A450 10 F3            djnz buffer_marklineforupdate0
 35+  A452 C9               ret
 36+  A453
 37+  A453              ;
 38+  A453              ; Zeroes the updated lines list
 39+  A453              ;
 40+  A453              buffer_clearlist:
 41+  A453 06 15            ld b,21
 42+  A455 21 29 A4         ld hl,buffer_updatedlines
 43+  A458              buffer_clearlist0:
 44+  A458 36 FF            ld (hl),255
 45+  A45A 23               inc hl
 46+  A45B 10 FB            djnz buffer_clearlist0
 47+  A45D C9               ret
 48+  A45E
 49+  A45E              ;
 50+  A45E              ; Copies the buffer to the screen. Use stack.
 51+  A45E              ; Inputs:
 52+  A45E              ; a - row number to display - 0 is first line
 53+  A45E              ;
 54+  A45E              buffer_bufferlinetoscreen:
 55+  A45E 4F               ld c,a                          ; store a
 56+  A45F ED 5B 8C A5      ld de,(screen_offset)          ; load the screen offset, this is in rows, want it *256
 57+  A463 83               add a,e                       ; add the row number
 58+  A464 11 00 01         ld de,256
 59+  A467 CD 3A 80         call utilities_multiply
 60+  A46A 54 5D            ld de,hl
 61+  A46C 21 87 83         ld hl,buffer_buffer
 62+  A46F 19               add hl,de                   ; add the offset
 63+  A470 79               ld a,c                      ; get original row back
 64+  A471 ED 73 CF A4      ld (buffer_bufferlinetoscreen1+1),sp ; this is some self-modifying code; stores the stack pointer in an ld sp,nn instruction at the end
 65+  A475 D9               exx
 66+  A476 0E 00            ld c,0                      ; zero horizontal
 67+  A478 47               ld b,a                      ; load the row number into vertical coord
 68+  A479 04               inc b
 69+  A47A 04               inc b                       ; move forward 2 to allow for scores
 70+  A47B CD 73 A6         call screen_getcelladdress  ; get the memory into de
 71+  A47E 21 10 00         ld hl,16                    ; offset by 16 chars to get to the centre, since populating stack from right
 72+  A481 19               add hl,de
 73+  A482              buffer_bufferlinetoscreen0:
 74+  A482 D9               exx                         ; hl is now buffer
 75+  A483 23               inc hl
 76+  A484 23               inc hl                      ; move hl forward 2 to skip first two blocks
 77+  A485 F9               ld sp,hl                    ; do first fourteen for left hand side, sp pointing at buffer
 78+  A486 F1               pop af
 79+  A487 C1               pop bc
 80+  A488 D1               pop de
 81+  A489 DD E1            pop ix
 82+  A48B D9               exx                         ; hl is now screen
 83+  A48C 08               ex af,af'
 84+  A48D F1               pop af
 85+  A48E C1               pop bc
 86+  A48F D1               pop de
 87+  A490 F9               ld sp,hl                    ; sp pointing at screen
 88+  A491 D5               push de
 89+  A492 C5               push bc
 90+  A493 F5               push af
 91+  A494 08               ex af,af'
 92+  A495 D9               exx                         ; hl is now buffer
 93+  A496 DD E5            push ix
 94+  A498 D5               push de
 95+  A499 C5               push bc
 96+  A49A F5               push af
 97+  A49B 1E 0E            ld e,14                    ; do another fourteen for right hand side
 98+  A49D 16 00            ld d,0
 99+  A49F 19               add hl,de
100+  A4A0 F9               ld sp,hl                    ; sp pointing at buffer
101+  A4A1 F1               pop af
102+  A4A2 C1               pop bc
103+  A4A3 D1               pop de
104+  A4A4 DD E1            pop ix
105+  A4A6                  ;pop ix
106+  A4A6 D9               exx                         ; hl is now screen
107+  A4A7 08               ex af,af'
108+  A4A8 1E 0E            ld e,14
109+  A4AA 16 00            ld d,0
110+  A4AC 19               add hl,de
111+  A4AD F1               pop af
112+  A4AE C1               pop bc
113+  A4AF D1               pop de
114+  A4B0                  ;pop iy
115+  A4B0 F9               ld sp,hl                    ; sp pointing at screen
116+  A4B1                  ;push iy
117+  A4B1 D5               push de
118+  A4B2 C5               push bc
119+  A4B3 F5               push af
120+  A4B4 08               ex af,af'
121+  A4B5 D9               exx                         ; hl is now buffer
122+  A4B6 DD E5            push ix
123+  A4B8 D5               push de
124+  A4B9 C5               push bc
125+  A4BA F5               push af
126+  A4BB 1E 10            ld e,16
127+  A4BD 16 00            ld d,0
128+  A4BF 19               add hl,de
129+  A4C0 D9               exx                         ; hl is now screen
130+  A4C1 1E 0E            ld e,14
131+  A4C3 16 00            ld d,0
132+  A4C5 ED 52            sbc hl,de
133+  A4C7 24               inc h
134+  A4C8 7C               ld a,h
135+  A4C9 E6 07            and 0x07                    ; check if this is multiple of 8, if so, end of cell line
136+  A4CB C2 82 A4         jp nz,buffer_bufferlinetoscreen0 ; next line in cell
137+  A4CE              buffer_bufferlinetoscreen1:
138+  A4CE 31 00 00         ld sp,0
139+  A4D1 D9               exx
140+  A4D2 C9               ret
141+  A4D3
142+  A4D3              ;
143+  A4D3              ; Copies the buffer to the screen for updated lines. Use stack.
144+  A4D3              ; Inputs: none
145+  A4D3              ;
146+  A4D3              buffer_buffertoscreen:
147+  A4D3 3A 3E A4         ld a,(buffer_updateall)      ; get the all update flag
148+  A4D6 FE 00            cp 0
149+  A4D8 CA E4 A4         jp z,buffer_buffertoscreen2  ; if not set, draw only updated
150+  A4DB CD 05 A5         call buffer_allbuffertoscreen ; otherwise, draw whole screen
151+  A4DE 21 3E A4         ld hl,buffer_updateall
152+  A4E1 36 00            ld (hl),0                    ; reset flag
153+  A4E3 C9               ret
154+  A4E4              buffer_buffertoscreen2:
155+  A4E4 06 15            ld b,21
156+  A4E6 FD 21 29 A4      ld iy,buffer_updatedlines    ; the location of the updated lines
157+  A4EA              buffer_buffertoscreen0:
158+  A4EA FD 7E 00         ld a,(iy)
159+  A4ED FE FF            cp 255
160+  A4EF CA 01 A5         jp z,buffer_buffertoscreen1                       ; if this is 255, then we're at the end of the updated list
161+  A4F2 C5               push bc
162+  A4F3 FD E5            push iy
163+  A4F5 F3               di
164+  A4F6 CD 5E A4         call buffer_bufferlinetoscreen
165+  A4F9 FB               ei
166+  A4FA FD E1            pop iy
167+  A4FC C1               pop bc
168+  A4FD FD 23            inc iy
169+  A4FF 10 E9            djnz buffer_buffertoscreen0
170+  A501              buffer_buffertoscreen1:
171+  A501 CD 19 A5         call buffer_buffertoattrsfast
172+  A504 C9               ret
173+  A505
174+  A505              ;
175+  A505              ; Copies the buffer to the screen. Use stack.
176+  A505              ; Inputs: none
177+  A505              ;
178+  A505              buffer_allbuffertoscreen:
179+  A505 06 15            ld b,21
180+  A507 3E 00            ld a,0
181+  A509              buffer_allbuffertoscreen0:
182+  A509 C5               push bc
183+  A50A F5               push af
184+  A50B F3               di
185+  A50C CD 5E A4         call buffer_bufferlinetoscreen
186+  A50F FB               ei
187+  A510 F1               pop af
188+  A511 C1               pop bc
189+  A512 3C               inc a
190+  A513 10 F4            djnz buffer_allbuffertoscreen0
191+  A515
192+  A515 CD 19 A5         call buffer_buffertoattrsfast
193+  A518 C9               ret
194+  A519
195+  A519              ;
196+  A519              ; Copies the attrs buffer to screen with the stack
197+  A519              ;
198+  A519              buffer_buffertoattrsfast:
199+  A519 ED 73 88 A5      ld (buffer_buffertoattrsfast1+1),sp ; this is some self-modifying code; stores the stack pointer in an ld sp,nn instruction at the end
200+  A51D 3A 8C A5         ld a,(screen_offset)            ; get the screen offset in rows, so want *32
201+  A520 11 20 00         ld de,32
202+  A523 CD 3A 80         call utilities_multiply
203+  A526 54 5D            ld de,hl
204+  A528 21 87 A0         ld hl,buffer_attr_buffer
205+  A52B 19               add hl,de                       ; add the offset, start of attr buffer now in hl
206+  A52C D9               exx
207+  A52D 21 50 58         ld hl,22528+80                  ; start of attr memory + 2 lines for score + 16 to start at right side
208+  A530 FD 21 27 A4      ld iy,buffer_tmp
209+  A534 FD 36 00 15      ld (iy),21              ; number of times to loop
210+  A538              buffer_buffertoattrsfast0:
211+  A538 D9               exx                         ; hl is now buffer
212+  A539 23               inc hl
213+  A53A 23               inc hl                      ; move hl forward 2 to skip first two blocks
214+  A53B F9               ld sp,hl                    ; do first fourteen for left hand side, sp pointing at buffer
215+  A53C F1               pop af
216+  A53D C1               pop bc
217+  A53E D1               pop de
218+  A53F DD E1            pop ix
219+  A541 D9               exx                         ; hl is now screen
220+  A542 08               ex af,af'
221+  A543 F1               pop af
222+  A544 C1               pop bc
223+  A545 D1               pop de
224+  A546 F9               ld sp,hl                    ; sp pointing at screen
225+  A547 D5               push de
226+  A548 C5               push bc
227+  A549 F5               push af
228+  A54A 08               ex af,af'
229+  A54B D9               exx                         ; hl is now buffer
230+  A54C DD E5            push ix
231+  A54E D5               push de
232+  A54F C5               push bc
233+  A550 F5               push af
234+  A551 1E 0E            ld e,14                    ; do another fourteen for right hand side
235+  A553 16 00            ld d,0
236+  A555 19               add hl,de
237+  A556 F9               ld sp,hl                    ; sp pointing at buffer
238+  A557 F1               pop af
239+  A558 C1               pop bc
240+  A559 D1               pop de
241+  A55A DD E1            pop ix
242+  A55C D9               exx                         ; hl is now screen
243+  A55D 08               ex af,af'
244+  A55E 1E 0E            ld e,14
245+  A560 16 00            ld d,0
246+  A562 19               add hl,de
247+  A563 F1               pop af
248+  A564 C1               pop bc
249+  A565 D1               pop de
250+  A566 F9               ld sp,hl                    ; sp pointing at screen
251+  A567 D5               push de
252+  A568 C5               push bc
253+  A569 F5               push af
254+  A56A 08               ex af,af'
255+  A56B D9               exx                         ; hl is now buffer
256+  A56C DD E5            push ix
257+  A56E D5               push de
258+  A56F C5               push bc
259+  A570 F5               push af
260+  A571 1E 10            ld e,16
261+  A573 16 00            ld d,0
262+  A575 19               add hl,de
263+  A576 D9               exx                         ; hl is now screen
264+  A577 11 12 00         ld de,18
265+  A57A 19               add hl,de
266+  A57B FD 7E 00         ld a,(iy)
267+  A57E 3D               dec a
268+  A57F FE 00            cp 0
269+  A581 FD 77 00         ld (iy),a
270+  A584 C2 38 A5         jp nz,buffer_buffertoattrsfast0 ; do another row
271+  A587              buffer_buffertoattrsfast1:
272+  A587 31 00 00         ld sp,0
273+  A58A D9               exx
274+  A58B C9               ret
# file closed: screen/buffer.asm
 24   A58C                  include "screen\screen.asm"
# file opened: screen/screen.asm
  1+  A58C              screen_offset:
  2+  A58C 00               defb 0                      ; offset from top of screen in lines
  3+  A58D
  4+  A58D              screen_tmp:
  5+  A58D 00 00            defb 0,0                      ; temporary memory
  6+  A58F
  7+  A58F              screen_setscorecolours:
  8+  A58F 21 B2 AE         ld hl,score_colours
  9+  A592 11 00 58         ld de,22528                     ; attrs here
 10+  A595 01 40 00         ld bc,64
 11+  A598 ED B0            ldir
 12+  A59A C9               ret
 13+  A59B
 14+  A59B              screen_sethighscorecolours:
 15+  A59B 21 F2 AE         ld hl,high_score_colours
 16+  A59E 11 E0 5A         ld de,22528+736                 ; attrs here
 17+  A5A1 01 20 00         ld bc,32
 18+  A5A4 ED B0            ldir
 19+  A5A6 C9               ret
 20+  A5A7
 21+  A5A7              ; Draw the screen
 22+  A5A7              ; Inputs:
 23+  A5A7              ; none
 24+  A5A7              ; Notes:
 25+  A5A7              ; The value held at screen_offset tells the screen how many rows to scroll down. Set to five to bottom out.
 26+  A5A7              screen_draw:
 27+  A5A7                  ;call clear_screen
 28+  A5A7 0E 00            ld c,0                      ; horiz
 29+  A5A9 06 00            ld b,0                      ; vert, 0 at top
 30+  A5AB DD 21 74 A9      ld ix,level01               ; point ix at level data
 31+  A5AF FD 21 87 A0      ld iy,buffer_attr_buffer    ; point iy at attr data
 32+  A5B3              screen_draw0:
 33+  A5B3 DD 7E 00         ld a,(ix)                   ; load the block number
 34+  A5B6 C5               push bc                     ; store bc, contains loop count
 35+  A5B7 CD FA A6         call screen_getattr         ; get the memory location for this cell's attr into hl
 36+  A5BA 7E               ld a,(hl)                   ; get the attr value at the address
 37+  A5BB FD 77 00         ld (iy),a                   ; load the attr into memory
 38+  A5BE DD 7E 00         ld a,(ix)                   ; load the block number
 39+  A5C1 CD EF A6         call screen_getblock        ; get the block data into hl
 40+  A5C4 CD D5 A6         call screen_showchar        ; show this character here
 41+  A5C7 C1               pop bc                      ; get the loop counter back
 42+  A5C8 DD 23            inc ix                      ; increment level location
 43+  A5CA FD 23            inc iy                      ; increment attr location
 44+  A5CC 0C               inc c                       ; increment horiz
 45+  A5CD 79               ld a,c
 46+  A5CE FE 20            cp 32                       ; check if horiz has reach edge of screen
 47+  A5D0 C2 B3 A5         jp nz,screen_draw0          ; if not, loop
 48+  A5D3 0E 00            ld c,0                      ; if so, reset horiz
 49+  A5D5 04               inc b                       ; increment vertical
 50+  A5D6 78               ld a,b
 51+  A5D7 FE 1D            cp 29                       ; check if at bottom
 52+  A5D9 C2 B3 A5         jp nz,screen_draw0          ; if not, loop
 53+  A5DC 21 8D A5         ld hl, screen_tmp
 54+  A5DF 36 09            ld (hl),9                   ; load the block number into memory
 55+  A5E1 DD 21 14 AD      ld ix,level01rocks          ; rock memory
 56+  A5E5 CD 43 A6         call screen_initobjects     ; draw rocks
 57+  A5E8 21 8D A5         ld hl, screen_tmp
 58+  A5EB 36 0C            ld (hl),12                  ; load the block number into memory
 59+  A5ED DD 21 14 AE      ld ix,level01missiles       ; missile memory
 60+  A5F1 CD 43 A6         call screen_initobjects     ; draw missiles
 61+  A5F4 21 8D A5         ld hl, screen_tmp
 62+  A5F7 36 08            ld (hl),08                  ; load the block number into memory
 63+  A5F9 DD 21 8D AE      ld ix,level01diamonds       ; diamond memory
 64+  A5FD CD 43 A6         call screen_initobjects     ; draw diamonds
 65+  A600 21 8D A5         ld hl, screen_tmp
 66+  A603 36 0E            ld (hl),14                  ; load the block number into memory
 67+  A605 DD 21 9D AE      ld ix,level01gems           ; gems memory
 68+  A609 CD 43 A6         call screen_initobjects     ; draw gems
 69+  A60C CD 10 A6         call screen_setuptext       ; draws text on the screen
 70+  A60F C9               ret
 71+  A610
 72+  A610              ;
 73+  A610              ; Sets up text on the screen
 74+  A610              ;
 75+  A610              screen_setuptext:
 76+  A610 CD A6 B8         call scores_showtable
 77+  A613 CD 9B A5         call screen_sethighscorecolours
 78+  A616 21 82 80         ld hl, string_score1
 79+  A619 CD 3F 83         call string_print
 80+  A61C 21 8B 80         ld hl, string_scorenumbers1
 81+  A61F CD 3F 83         call string_print
 82+  A622 21 94 80         ld hl, string_company
 83+  A625 CD 3F 83         call string_print
 84+  A628 21 A5 80         ld hl, string_score2
 85+  A62B CD 3F 83         call string_print
 86+  A62E 21 AE 80         ld hl, string_scorenumbers2
 87+  A631 CD 3F 83         call string_print
 88+  A634 21 9A 80         ld hl, string_credits
 89+  A637 CD 3F 83         call string_print
 90+  A63A CD 8F A5         call screen_setscorecolours
 91+  A63D C9               ret
 92+  A63E
 93+  A63E              ;
 94+  A63E              ; Sets a line of colours
 95+  A63E              ; Inputs:
 96+  A63E              ; a - colour to set
 97+  A63E              ; b - number to set
 98+  A63E              ; de - start memory location
 99+  A63E              ;
100+  A63E              screen_setcolours:
101+  A63E 12               ld (de),a
102+  A63F 13               inc de
103+  A640 10 FC            djnz screen_setcolours
104+  A642 C9               ret
105+  A643
106+  A643              ;
107+  A643              ; Draw initial object positions
108+  A643              ; Inputs:
109+  A643              ; ix - memory location of objects
110+  A643              ; a - graphic
111+  A643              screen_initobjects:
112+  A643 DD 4E 00         ld c,(ix)                   ; get the horiz coord
113+  A646 79               ld a,c
114+  A647 FE FF            cp 255
115+  A649 CA 72 A6         jp z,screen_initobjects2
116+  A64C DD 23            inc ix                      ; move to next
117+  A64E DD 46 00         ld b,(ix)                   ; get the vert coord
118+  A651 DD 23            inc ix
119+  A653 CD 84 A6         call screen_getcellattradress ; get the memory address of b,c attr into de
120+  A656 D5               push de
121+  A657 3A 8D A5         ld a,(screen_tmp)                  ; get the block number back
122+  A65A CD FA A6         call screen_getattr         ; get the memory location for this cell's attr into hl
123+  A65D D1               pop de
124+  A65E 7E               ld a,(hl)                   ; get the attr value at the address
125+  A65F 12               ld (de),a                   ; load the attr into memory
126+  A660 3A 8D A5         ld a,(screen_tmp)                  ; get the block number back
127+  A663 CD EF A6         call screen_getblock        ; get the block data into hl
128+  A666 CD D5 A6         call screen_showchar        ; show this character here
129+  A669
130+  A669              screen_initobjects1:
131+  A669 DD 23            inc ix                      ; move past state
132+  A66B DD 23            inc ix
133+  A66D DD 23            inc ix                      ; move past mem
134+  A66F C3 43 A6         jp screen_initobjects
135+  A672              screen_initobjects2:
136+  A672 C9               ret
137+  A673
138+  A673
139+  A673              ;
140+  A673              ; Return character cell address offset of block at (b, c) ready for addition to screen  memory.
141+  A673              ; Inputs:
142+  A673              ; bc: coords
143+  A673              ; Outputs:
144+  A673              ; de: memory location
145+  A673              ;
146+  A673              screen_getcelladdress:
147+  A673 78               ld a,b      ; vertical position.
148+  A674 E6 18            and 24      ; which segment, 0, 1 or 2?
149+  A676 C6 40            add a,64    ; 64*256 = 16384, Spectrum's screen memory.
150+  A678 57               ld d,a      ; this is our high byte.
151+  A679 78               ld a,b      ; what was that vertical position again?
152+  A67A E6 07            and 7       ; which row within segment?
153+  A67C 0F               rrca        ; multiply row by 32.
154+  A67D 0F               rrca
155+  A67E 0F               rrca
156+  A67F 5F               ld e,a      ; low byte.
157+  A680 79               ld a,c      ; add on y coordinate.
158+  A681 83               add a,e     ; mix with low byte.
159+  A682 5F               ld e,a      ; address of screen position in de.
160+  A683 C9               ret
161+  A684
162+  A684              ;
163+  A684              ; Calculate buffer address of attribute for character at (b, c).
164+  A684              ; Inputs:
165+  A684              ; bc: coords
166+  A684              ; Outputs:
167+  A684              ; de: memory location
168+  A684              ;
169+  A684              screen_getcellattradress:
170+  A684 11 87 A0         ld de,buffer_attr_buffer ; memory is at base + horiz (c) + vert*32 (b)
171+  A687 69               ld l,c      ; x position.
172+  A688 26 00            ld h,0      ; 0 h
173+  A68A 19               add hl,de
174+  A68B 54 5D            ld de,hl    ; horiz done
175+  A68D 78               ld a,b      ; do vert
176+  A68E D5               push de
177+  A68F C5               push bc
178+  A690 11 20 00         ld de,32
179+  A693 CD 3A 80         call utilities_multiply
180+  A696 C1               pop bc
181+  A697 D1               pop de
182+  A698 19               add hl,de
183+  A699 54 5D            ld de,hl    ; vert done
184+  A69B C9               ret
185+  A69C
186+  A69C              ;
187+  A69C              ; Calculate buffer address of attribute for character at (b, c).
188+  A69C              ; Inputs:
189+  A69C              ; bc: coords
190+  A69C              ; Outputs:
191+  A69C              ; de: memory location
192+  A69C              ;
193+  A69C              screen_getscreenattradress:
194+  A69C 11 00 58         ld de,22528 ; memory is at base + horiz (c) + vert*32 (b)
195+  A69F 69               ld l,c      ; x position.
196+  A6A0 26 00            ld h,0      ; 0 h
197+  A6A2 19               add hl,de
198+  A6A3 54 5D            ld de,hl    ; horiz done
199+  A6A5 78               ld a,b      ; do vert
200+  A6A6 D5               push de
201+  A6A7 C5               push bc
202+  A6A8 11 20 00         ld de,32
203+  A6AB CD 3A 80         call utilities_multiply
204+  A6AE C1               pop bc
205+  A6AF D1               pop de
206+  A6B0 19               add hl,de
207+  A6B1 54 5D            ld de,hl    ; vert done
208+  A6B3 C9               ret
209+  A6B4
210+  A6B4              ;
211+  A6B4              ; Gets the attr memory location for a screen coord
212+  A6B4              ; Will overwrite bc
213+  A6B4              ; Inputs:
214+  A6B4              ; bc - screen coords
215+  A6B4              ; Outputs:
216+  A6B4              ; de - memory location
217+  A6B4              ; bc - character coords
218+  A6B4              ;
219+  A6B4              screen_getattraddressfromscreencoords:
220+  A6B4 78               ld a,b                          ; get the player block coords of current block
221+  A6B5 E6 F8            and 248                         ; find closest multiple of eight
222+  A6B7 0F               rrca
223+  A6B8 0F               rrca
224+  A6B9 0F               rrca                ; divide by 8
225+  A6BA 47               ld b,a
226+  A6BB 79               ld a,c
227+  A6BC 48               ld c,b                         ; swap b and c
228+  A6BD E6 F8            and 248
229+  A6BF 0F               rrca
230+  A6C0 0F               rrca
231+  A6C1 0F               rrca                ; divide by 8
232+  A6C2 47               ld b,a
233+  A6C3 CD 84 A6         call screen_getcellattradress   ; work out memory location of current block attributes, memory in de
234+  A6C6 C9               ret
235+  A6C7
236+  A6C7              ;
237+  A6C7              ; Get buffer address for a character at b,c - b vert
238+  A6C7              ; Buffer memory is stored as sequential block
239+  A6C7              ; Char at 0,0 is stored 0,32,64...; 0,1 is stored at 1,33,65
240+  A6C7              ; Inputs:
241+  A6C7              ; bc - coords
242+  A6C7              ; Outputs:
243+  A6C7              ; de - memory location of first byte
244+  A6C7              screen_getbufferaddress:
245+  A6C7 21 87 83         ld hl, buffer_buffer    ; first get screen buffer start
246+  A6CA 50               ld d,b                  ; then work out vertical offset
247+  A6CB 1E 00            ld e,0                  ; mult by 256, low byte becomes high byte, de now holds result
248+  A6CD 19               add hl,de               ; add to base
249+  A6CE 59               ld e,c                  ; then add horizontal offset (c)
250+  A6CF 16 00            ld d,0
251+  A6D1 19               add hl,de               ; add to base
252+  A6D2 54 5D            ld de,hl
253+  A6D4 C9               ret
254+  A6D5
255+  A6D5              ;
256+  A6D5              ; Display character hl at (b, c) to buffer.
257+  A6D5              ; Stored sequentially
258+  A6D5              ; Inputs:
259+  A6D5              ; hl: block address
260+  A6D5              ; bc: coords
261+  A6D5              ;
262+  A6D5              screen_showchar:
263+  A6D5 3E 00            ld a,0
264+  A6D7 E5               push hl
265+  A6D8 CD C7 A6         call screen_getbufferaddress ; get the current screen buffer pointer
266+  A6DB E1               pop hl
267+  A6DC 06 08            ld b,8              ; number of pixels high.
268+  A6DE              screen_showchar0:
269+  A6DE 7E               ld a,(hl)           ; source graphic.
270+  A6DF 12               ld (de),a           ; transfer to screen.
271+  A6E0 23               inc hl              ; next piece of data.
272+  A6E1 E5               push hl             ; store hl
273+  A6E2 62 6B            ld hl,de            ; put de in hl
274+  A6E4 1E 20            ld e,32            ; inc memory by 32, so load 32 into de
275+  A6E6 16 00            ld d,0
276+  A6E8 19               add hl,de              ; add de to hl
277+  A6E9 54 5D            ld de,hl            ; load back to de
278+  A6EB E1               pop hl              ; restore hl
279+  A6EC
280+  A6EC 10 F0            djnz screen_showchar0 ; repeat
281+  A6EE C9               ret
282+  A6EF
283+  A6EF
284+  A6EF              ;
285+  A6EF              ; Get cell graphic.
286+  A6EF              ; Inputs:
287+  A6EF              ; a: block
288+  A6EF              ; Outputs:
289+  A6EF              ; hl: memory
290+  A6EF              ;
291+  A6EF              screen_getblock:
292+  A6EF 07               rlca                        ; multiply block number by eight.
293+  A6F0 07               rlca
294+  A6F1 07               rlca
295+  A6F2 5F               ld e,a                      ; displacement to graphic address.
296+  A6F3 16 00            ld d,0                      ; no high byte.
297+  A6F5 21 12 AF         ld hl,sprites               ; address of character blocks.
298+  A6F8 19               add hl,de                   ; point to block.
299+  A6F9 C9               ret
300+  A6FA
301+  A6FA              ;
302+  A6FA              ; Get cell attribute.
303+  A6FA              ; Inputs:
304+  A6FA              ; a: block
305+  A6FA              ; Outputs:
306+  A6FA              ; hl: memory
307+  A6FA              ;
308+  A6FA              screen_getattr:
309+  A6FA 5F               ld e,a                      ; displacement to attribute address.
310+  A6FB 16 00            ld d,0                      ; no high byte.
311+  A6FD 21 8A AF         ld hl,sprite_attrs          ; address of block attributes.
312+  A700 19               add hl,de                   ; point to attribute.
313+  A701 C9               ret
314+  A702
# file closed: screen/screen.asm
 25   A702                  include "screen\sprites.asm"
# file opened: screen/sprites.asm
  1+  A702              ;
  2+  A702              ; This is the sprite routine and expects coordinates in (c ,b) form,
  3+  A702              ; where c is the vertical coord from the top of the screen (0-176), and
  4+  A702              ; b is the horizontal coord from the left of the screen (0 to 240).
  5+  A702              ; Sprite data is stored as you'd expect in its unshifted form as this
  6+  A702              ; routine takes care of all the shifting itself. This means that sprite
  7+  A702              ; handling isn't particularly fast but the graphics only take 1/8th of the
  8+  A702              ; space they would require in pre-shifted form.
  9+  A702              ; Inputs:
 10+  A702              ; hl - sprite data
 11+  A702              ; bc - screen coords
 12+  A702              ;
 13+  A702              sprites_drawsprite7:
 14+  A702 EE 07            xor 7               ; complement last 3 bits.
 15+  A704 3C               inc a               ; add one for luck!
 16+  A705              sprites_drawsprite3:
 17+  A705 CB 11            rl c                ; ...into middle byte...
 18+  A707 CB 12            rl d                ; ...and finally into left character cell.
 19+  A709 3D               dec a               ; count shifts we've done.
 20+  A70A 20 F9            jr nz,sprites_drawsprite3 ; return until all shifts complete.
 21+  A70C                                      ; Line of sprite image is now in e + c + d, we need it in form c + d + e.
 22+  A70C 79               ld a,c              ; left edge of image is currently in e.
 23+  A70D 4A               ld c,d              ; put right edge there instead.
 24+  A70E 57               ld d,a              ; and the left edge back into c.
 25+  A70F 18 25            jr sprites_drawsprite0   ; we've done the switch so transfer to screen.
 26+  A711              sprites_drawsprite:
 27+  A711 ED 43 76 A7      ld (dispx),bc       ; store coords in dispx for now.
 28+  A715 E5               push hl
 29+  A716 CD 54 A7         call sprites_scadd  ; calculate screen address.
 30+  A719 E1               pop hl
 31+  A71A 3E 08            ld a,8              ; height of sprite in pixels.
 32+  A71C              sprites_drawsprite1:
 33+  A71C 08               ex af,af'           ; store loop counter.
 34+  A71D D5               push de             ; store screen address.
 35+  A71E 4E               ld c,(hl)           ; first sprite graphic.
 36+  A71F 23               inc hl              ; increment poiinter to sprite data.
 37+  A720 22 78 A7         ld (sprtmp),hl      ; store it for later.
 38+  A723 16 00            ld d,0              ; blank right byte for now.
 39+  A725 78               ld a,b              ; b holds y position.
 40+  A726 E6 07            and 7               ; how are we straddling character cells?
 41+  A728 28 0C            jr z,sprites_drawsprite0 ; we're not straddling them, don't bother shifting.
 42+  A72A FE 05            cp 5                ; 5 or more right shifts needed?
 43+  A72C 30 D4            jr nc,sprites_drawsprite7 ; yes, shift from left as it's quicker.
 44+  A72E A7               and a               ; oops, carry flag is set so clear it.
 45+  A72F              sprites_drawsprite2:
 46+  A72F CB 19            rr c                ; rotate left byte right...
 47+  A731 CB 1A            rr d                ; ...into right byte.
 48+  A733 3D               dec a               ; one less shift to do.
 49+  A734 20 F9            jr nz,sprites_drawsprite2 ; return until all shifts complete.
 50+  A736              sprites_drawsprite0:
 51+  A736 E1               pop hl              ; pop screen address from stack.
 52+  A737 7E               ld a,(hl)           ; what's there already.
 53+  A738 A9               xor c               ; merge in image data.
 54+  A739 77               ld (hl),a           ; place onto screen.
 55+  A73A 23               inc hl
 56+  A73B 7E               ld a,(hl)           ; what's already there.
 57+  A73C AA               xor d               ; right edge of sprite image data.
 58+  A73D 77               ld (hl),a           ; plonk it on screen.
 59+  A73E 3A 76 A7         ld a,(dispx)        ; vertical coordinate.
 60+  A741 3C               inc a               ; next line down.
 61+  A742 32 76 A7         ld (dispx),a        ; store new position.
 62+  A745 2B               dec hl
 63+  A746 11 20 00         ld de,32            ; add 32 to get to the next row
 64+  A749 19               add hl,de           ; add 32
 65+  A74A              sprites_drawsprite6:
 66+  A74A EB               ex de,hl            ; screen address in de.
 67+  A74B 2A 78 A7         ld hl,(sprtmp)      ; restore graphic address.
 68+  A74E 08               ex af,af'           ; restore loop counter.
 69+  A74F 3D               dec a               ; decrement it.
 70+  A750 C2 1C A7         jp nz,sprites_drawsprite1 ; not reached bottom of sprite yet to repeat.
 71+  A753 C9               ret                 ; job done.
 72+  A754
 73+  A754              ;
 74+  A754              ; This routine returns a buffer address for (c, b) in de (c vert).
 75+  A754              ; For example: 0,0 will be at memory offset 0
 76+  A754              ; 1,0 (1 down) will be at memory offset 1
 77+  A754              ; 0,7 will be at memory offset 0
 78+  A754              ; 9,1 will be at memory offset 8+1
 79+  A754              ; 8,0 will be at memory offset 256
 80+  A754              ; 9,0 will be at memory offset 257
 81+  A754              ; Outputs:
 82+  A754              ; de - coords
 83+  A754              ;
 84+  A754              sprites_scadd:
 85+  A754 79               ld a,c               ; calculate vertical offset
 86+  A755 E6 F8            and 248             ;  to get nearest multiple of 8
 87+  A757 0F               rrca
 88+  A758 0F               rrca
 89+  A759 0F               rrca                ; divide by 8
 90+  A75A 67               ld h,a
 91+  A75B 78               ld a,b               ; calculate horizontal offset
 92+  A75C E6 F8            and 248             ;  to get nearest multiple of 8
 93+  A75E 0F               rrca
 94+  A75F 0F               rrca
 95+  A760 0F               rrca                ; divide by 8
 96+  A761 6F               ld l,a
 97+  A762 C5               push bc             ; store the screen coords
 98+  A763 44 4D            ld bc,hl            ; load bc with the character coords
 99+  A765 CD C7 A6         call screen_getbufferaddress
100+  A768 C1               pop bc              ; get back screen coords, de is now memory of character
101+  A769 79               ld a,c              ; now add the vertical within the cell
102+  A76A E6 07            and 7
103+  A76C 0F               rrca                ; multiply by 32.
104+  A76D 0F               rrca
105+  A76E 0F               rrca
106+  A76F 6F               ld l,a
107+  A770 26 00            ld h,0
108+  A772 19               add hl,de
109+  A773 54 5D            ld de,hl
110+  A775 C9               ret
111+  A776
112+  A776 00           dispx   defb 0           ; general-use coordinates.
113+  A777 00           dispy   defb 0
114+  A778 00 00        sprtmp  defb 0,0           ; sprite temporary address.
115+  A77A
# file closed: screen/sprites.asm
 26   A77A                  include "screen\titlescreen.asm"
# file opened: screen/titlescreen.asm
  1+  A77A              ;
  2+  A77A              ; Draws the title screen
  3+  A77A              ;
  4+  A77A              titlescreen_show:
  5+  A77A CD F2 A7         call titlescreen_init
  6+  A77D CD 9B A7         call titlescreen_drawtitle
  7+  A780 3E FA            ld a,250                              ; wait for 200 frames
  8+  A782 CD 52 80         call utilities_waitforkey_forframes   ; wait for keypress
  9+  A785 7B               ld a,e
 10+  A786 FE 01            cp 1                                  ; was anything pressed?
 11+  A788 C8               ret z                                 ; end titlescreen if so
 12+  A789
 13+  A789 CD 05 A8         call titlescreen_alt_init             ; otherwise, draw alt screen
 14+  A78C CD B7 A7         call titlescreen_alt_drawtitle
 15+  A78F 3E FA            ld a,250                              ; wait for 200 frames
 16+  A791 CD 52 80         call utilities_waitforkey_forframes   ; wait for keypress
 17+  A794 7B               ld a,e
 18+  A795 FE 01            cp 1                                  ; was anything pressed?
 19+  A797 C2 7A A7         jp nz,titlescreen_show                ; start again if not
 20+  A79A C9               ret
 21+  A79B
 22+  A79B              ;
 23+  A79B              ; Draws the iconic logo
 24+  A79B              ;
 25+  A79B              titlescreen_drawtitle:
 26+  A79B 06 66            ld b,102              ; number of points
 27+  A79D DD 21 12 A8      ld ix,titlescreen_logo_data
 28+  A7A1              titlescreen_drawtitle0:
 29+  A7A1 C5               push bc
 30+  A7A2 DD 4E 00         ld c,(ix)                   ; got horiz
 31+  A7A5 DD 23            inc ix
 32+  A7A7 DD 46 00         ld b,(ix)                   ; got vert
 33+  A7AA DD 23            inc ix
 34+  A7AC CD 9C A6         call screen_getscreenattradress ; memory in de
 35+  A7AF 13               inc de                      ; slide one to the right, since I'm too lazy to change the data
 36+  A7B0 3E 13            ld a,19
 37+  A7B2 12               ld (de),a
 38+  A7B3 C1               pop bc
 39+  A7B4 10 EB            djnz titlescreen_drawtitle0 ; loop if we're not at the end
 40+  A7B6 C9               ret
 41+  A7B7
 42+  A7B7              ;
 43+  A7B7              ; Draws the alternate title screen
 44+  A7B7              ;
 45+  A7B7              titlescreen_alt_drawtitle:
 46+  A7B7 21 D1 80         ld hl,string_alttitlescreen_1
 47+  A7BA CD 3F 83         call string_print
 48+  A7BD 21 DD 80         ld hl,string_alttitlescreen_2
 49+  A7C0 CD 3F 83         call string_print
 50+  A7C3 21 D8 81         ld hl,string_alttitlescreen_3
 51+  A7C6 CD 3F 83         call string_print
 52+  A7C9 06 20            ld b,32
 53+  A7CB 3E 43            ld a,67
 54+  A7CD 11 00 58         ld de,22528                         ; top row attrs here
 55+  A7D0 CD 3E A6         call screen_setcolours
 56+  A7D3 06 20            ld b,32
 57+  A7D5 3E 46            ld a,70
 58+  A7D7 11 A0 59         ld de,22528+416                     ; 13th row attrs here
 59+  A7DA CD 3E A6         call screen_setcolours
 60+  A7DD 06 20            ld b,32
 61+  A7DF 3E 43            ld a,67
 62+  A7E1 11 20 5A         ld de,22528+544                         ; 17th row attrs here
 63+  A7E4 CD 3E A6         call screen_setcolours
 64+  A7E7 06 20            ld b,32
 65+  A7E9 3E 42            ld a,66
 66+  A7EB 11 A0 5A         ld de,22528+672                         ; 21st row attrs here
 67+  A7EE CD 3E A6         call screen_setcolours
 68+  A7F1 C9               ret
 69+  A7F2
 70+  A7F2              ;
 71+  A7F2              ; Initialises the screen
 72+  A7F2              ;
 73+  A7F2              titlescreen_init:
 74+  A7F2              ; We want a black screen.
 75+  A7F2 3E 0B            ld a,11             ; magenta ink (7) on blue paper (0),
 76+  A7F4                                      ; bright (64).
 77+  A7F4 CD 67 80         call utilities_clearscreen
 78+  A7F7 32 8D 5C         ld (23693),a        ; set our screen colours.
 79+  A7FA 3E 01            ld a,1              ; 2 is the code for red.
 80+  A7FC D3 FE            out (254),a         ; write to port 254.
 81+  A7FE
 82+  A7FE 21 B7 80         ld hl,string_titlescreen_copyright
 83+  A801 CD 3F 83         call string_print
 84+  A804
 85+  A804 C9               ret
 86+  A805
 87+  A805              ;
 88+  A805              ; Initialises the screen
 89+  A805              ;
 90+  A805              titlescreen_alt_init:
 91+  A805              ; We want a black screen.
 92+  A805 3E 47            ld a,71             ; white ink (7) on black paper (0),
 93+  A807                                      ; bright (64).
 94+  A807 CD 67 80         call utilities_clearscreen
 95+  A80A 32 8D 5C         ld (23693),a        ; set our screen colours.
 96+  A80D 3E 00            ld a,0              ; 2 is the code for red.
 97+  A80F D3 FE            out (254),a         ; write to port 254.
 98+  A811
 99+  A811 C9               ret
100+  A812
101+  A812              ;
102+  A812              ; Horiz, vert
103+  A812              ;
104+  A812              titlescreen_logo_data:
105+  A812 08 00 09 00      defb 8,0,9,0,10,0,12,0,15,0,17,0,18,0,19,0
105+  A816 0A 00 0C 00
105+  A81A 0F 00 11 00
105+  A81E 12 00 13 00
106+  A822 09 01 0C 01      defb 9,1,12,1,15,1,17,1
106+  A826 0F 01 11 01
107+  A82A 09 02 0C 02      defb 9,2,12,2,13,2,14,2,15,2,17,2,18,2,19,2
107+  A82E 0D 02 0E 02
107+  A832 0F 02 11 02
107+  A836 12 02 13 02
108+  A83A 09 03 0C 03      defb 9,3,12,3,15,3,17,3
108+  A83E 0F 03 11 03
109+  A842 09 04 0C 04      defb 9,4,12,4,15,4,17,4,18,4,19,4
109+  A846 0F 04 11 04
109+  A84A 12 04 13 04
110+  A84E 00 06 01 06      defb 0,6,1,6,2,6,3,6,4,6,5,6,6,6,7,6,8,6,9,6,10,6,11,6
110+  A852 02 06 03 06
110+  A856 04 06 05 06
110+  A85A 06 06 07 06
110+  A85E 08 06 09 06
110+  A862 0A 06 0B 06
111+  A866 10 06 11 06      defb 16,6,17,6,18,6,19,6,20,6,21,6,22,6,23,6,24,6,25,6,26,6,27,6
111+  A86A 12 06 13 06
111+  A86E 14 06 15 06
111+  A872 16 06 17 06
111+  A876 18 06 19 06
111+  A87A 1A 06 1B 06
112+  A87E 02 07 02 08      defb 2,7,2,8,2,9,2,10,2,11,2,12,2,13,2,14,2,15,2,16,2,17,2,18,2,19,2,20
112+  A882 02 09 02 0A
112+  A886 02 0B 02 0C
112+  A88A 02 0D 02 0E
112+  A88E 02 0F 02 10
112+  A892 02 11 02 12
112+  A896 02 13 02 14
113+  A89A 19 07 19 08      defb 25,7,25,8,25,9,25,10,25,11,25,12,25,13,25,14,25,15,25,16,25,17,25,18,25,19,25,20
113+  A89E 19 09 19 0A
113+  A8A2 19 0B 19 0C
113+  A8A6 19 0D 19 0E
113+  A8AA 19 0F 19 10
113+  A8AE 19 11 19 12
113+  A8B2 19 13 19 14
114+  A8B6 03 0B 04 0B      defb 3,11,4,11,5,11,6,11,7,11,8,11,9,11,10,11,11,11
114+  A8BA 05 0B 06 0B
114+  A8BE 07 0B 08 0B
114+  A8C2 09 0B 0A 0B
114+  A8C6 0B 0B
115+  A8C8 0B 07 0B 08      defb 11,7,11,8,11,9,11,10
115+  A8CC 0B 09 0B 0A
116+  A8D0 10 0D 10 0F      defb 16,13,16,15,16,16,16,17,16,18,16,19,16,20
116+  A8D4 10 10 10 11
116+  A8D8 10 12 10 13
116+  A8DC 10 14
117+  A8DE
# file closed: screen/titlescreen.asm
 27   A8DE                  include "screen\lifescreen.asm"
# file opened: screen/lifescreen.asm
  1+  A8DE              ;
  2+  A8DE              ; Draws the life remaining screen
  3+  A8DE              ;
  4+  A8DE              lifescreen_draw:
  5+  A8DE CD 24 A9         call lifescreen_init
  6+  A8E1
  7+  A8E1 3A 61 B4         ld a,(game_currentplayer)             ; get the current player
  8+  A8E4 C6 30            add 48                                ; add 48 to get char
  9+  A8E6 21 DE 82         ld hl,string_lifescreen_player+10
 10+  A8E9 77               ld (hl),a                             ; load this to the string we're about to show
 11+  A8EA
 12+  A8EA 21 D4 82         ld hl,string_lifescreen_player
 13+  A8ED CD 3F 83         call string_print
 14+  A8F0
 15+  A8F0 3A 98 B4         ld a,(player+9)                       ; get the current player lives
 16+  A8F3 C6 30            add 48                                ; add 48 to get the character
 17+  A8F5 FE 31            cp 49
 18+  A8F7 C2 0A A9         jp nz,lifescreen_draw0
 19+  A8FA 21 EE 82         ld hl,string_lifescreen_lastman
 20+  A8FD
 21+  A8FD 06 08            ld b,8
 22+  A8FF 3E 0A            ld a,10                                ; set red
 23+  A901 11 6C 58         ld de,22528+108                        ; attrs here
 24+  A904 CD 3E A6         call screen_setcolours
 25+  A907
 26+  A907 C3 11 A9         jp lifescreen_draw1
 27+  A90A              lifescreen_draw0:
 28+  A90A 21 E3 82         ld hl,string_lifescreen_lives+2       ; not last man, so use the normal view
 29+  A90D 77               ld (hl),a                             ; load this to the string we're about to show
 30+  A90E 21 E1 82         ld hl,string_lifescreen_lives
 31+  A911              lifescreen_draw1:
 32+  A911 CD 3F 83         call string_print
 33+  A914
 34+  A914 3E 86            ld a,134
 35+  A916 11 0B 58         ld de, 22528+11     ; get the colour for the top text
 36+  A919 06 0A            ld b,10
 37+  A91B CD 3E A6         call screen_setcolours
 38+  A91E
 39+  A91E 3E 64            ld a,100                              ; wait for 200 frames
 40+  A920 CD 52 80         call utilities_waitforkey_forframes   ; wait for keypress
 41+  A923
 42+  A923 C9               ret
 43+  A924
 44+  A924              ;
 45+  A924              ; Initialises the screen
 46+  A924              ;
 47+  A924              lifescreen_init:
 48+  A924              ; We want a blue screen.
 49+  A924                  ;call $0D6B
 50+  A924 3E 0E            ld a,14             ; yellow ink (6) on blue paper (1),
 51+  A926                                      ; bright (64).
 52+  A926 CD 67 80         call utilities_clearscreen
 53+  A929 32 8D 5C         ld (23693),a        ; set our screen colours.
 54+  A92C 3E 01            ld a,1              ; 1 is the code for blue.
 55+  A92E D3 FE            out (254),a         ; write to port 254.
 56+  A930                  ;call 3503           ; ROM routine - clears screen, opens chan 2.
 57+  A930
 58+  A930 C9               ret
# file closed: screen/lifescreen.asm
 28   A931                  include "screen\gameover.asm"
# file opened: screen/gameover.asm
  1+  A931              ;
  2+  A931              ; Draws the game over screen
  3+  A931              ;
  4+  A931              gameover_draw:
  5+  A931 CD 67 A9         call gameover_init
  6+  A934 CD 10 A6         call screen_setuptext       ; show scores
  7+  A937
  8+  A937 21 F9 82         ld hl,string_gameoverscreen_gameover
  9+  A93A CD 3F 83         call string_print
 10+  A93D
 11+  A93D 21 05 83         ld hl,string_gameoverscreen_copyright
 12+  A940 CD 3F 83         call string_print
 13+  A943
 14+  A943 21 33 83         ld hl,string_gameover_credits
 15+  A946 CD 3F 83         call string_print
 16+  A949
 17+  A949 21 1F 83         ld hl,string_gameoverscreen_bestscores
 18+  A94C CD 3F 83         call string_print
 19+  A94F
 20+  A94F 06 20            ld b,32
 21+  A951 3E 45            ld a,69
 22+  A953 11 C0 5A         ld de,22528+704                         ; attrs here
 23+  A956 CD 3E A6         call screen_setcolours
 24+  A959
 25+  A959 06 0B            ld b,11
 26+  A95B 3E 42            ld a,66
 27+  A95D 11 2B 58         ld de,22528+43                         ; attrs here
 28+  A960 CD 3E A6         call screen_setcolours
 29+  A963
 30+  A963 CD 47 80         call utilities_waitforkey   ; wait for keypress
 31+  A966
 32+  A966 C9               ret
 33+  A967
 34+  A967              ;
 35+  A967              ; Initialises the screen
 36+  A967              ;
 37+  A967              gameover_init:
 38+  A967              ; We want a black screen.
 39+  A967 3E 47            ld a,71             ; white ink (7) on black paper (0),
 40+  A969                                      ; bright (64).
 41+  A969 CD 67 80         call utilities_clearscreen
 42+  A96C 32 8D 5C         ld (23693),a        ; set our screen colours.
 43+  A96F 3E 00            ld a,0              ; 2 is the code for red.
 44+  A971 D3 FE            out (254),a         ; write to port 254.
 45+  A973 C9               ret
# file closed: screen/gameover.asm
 29   A974
 30   A974                  include "leveldata\level01.asm"
# file opened: leveldata/level01.asm
  1+  A974              ; ###############################################################
  2+  A974              ; Data for level 1
  3+  A974              ; ###############################################################
  4+  A974              level01:
  5+  A974
  6+  A974                  ;defb 09,04,04,04,04,04,04,04,04,04,04,04,04,04,04,09,09,04,04,04,04,04,04,04,04,04,04,04,04,04,04,09
  7+  A974
  8+  A974 00 00 05 05      defb 00,00,05,05,05,05,05,05,05,05,05,05,05,05,02,01,01,01,03,05,05,05,05,05,05,05,05,05,05,05,00,00
  8+  A978 05 05 05 05
  8+  A97C 05 05 05 05
  8+  A980 05 05 02 01
  8+  A984 01 01 03 05
  8+  A988 05 05 05 05
  8+  A98C 05 05 05 05
  8+  A990 05 05 00 00
  9+  A994 00 00 05 05      defb 00,00,05,05,05,05,05,05,05,05,05,05,02,01,01,01,01,01,01,01,03,05,05,05,05,05,05,05,05,05,00,00
  9+  A998 05 05 05 05
  9+  A99C 05 05 05 05
  9+  A9A0 02 01 01 01
  9+  A9A4 01 01 01 01
  9+  A9A8 03 05 05 05
  9+  A9AC 05 05 05 05
  9+  A9B0 05 05 00 00
 10+  A9B4 00 00 05 05      defb 00,00,05,05,05,05,05,05,05,05,02,01,01,01,01,01,01,01,01,01,01,01,03,05,13,13,13,13,13,13,00,00
 10+  A9B8 05 05 05 05
 10+  A9BC 05 05 02 01
 10+  A9C0 01 01 01 01
 10+  A9C4 01 01 01 01
 10+  A9C8 01 01 03 05
 10+  A9CC 0D 0D 0D 0D
 10+  A9D0 0D 0D 00 00
 11+  A9D4 00 00 01 01      defb 00,00,01,01,01,01,00,01,01,01,01,01,01,01,01,01,01,01,01,01,01,01,01,03,05,05,05,05,05,05,00,00
 11+  A9D8 01 01 00 01
 11+  A9DC 01 01 01 01
 11+  A9E0 01 01 01 01
 11+  A9E4 01 01 01 01
 11+  A9E8 01 01 01 03
 11+  A9EC 05 05 05 05
 11+  A9F0 05 05 00 00
 12+  A9F4 00 00 01 01      defb 00,00,01,01,04,04,04,04,04,04,01,01,01,01,01,01,01,01,01,01,01,01,01,01,01,01,01,01,00,01,00,00
 12+  A9F8 04 04 04 04
 12+  A9FC 04 04 01 01
 12+  AA00 01 01 01 01
 12+  AA04 01 01 01 01
 12+  AA08 01 01 01 01
 12+  AA0C 01 01 01 01
 12+  AA10 00 01 00 00
 13+  AA14 00 00 01 04      defb 00,00,01,04,04,04,04,04,04,04,04,04,01,01,01,01,01,01,01,01,01,01,01,01,00,00,00,00,00,01,00,00
 13+  AA18 04 04 04 04
 13+  AA1C 04 04 04 04
 13+  AA20 01 01 01 01
 13+  AA24 01 01 01 01
 13+  AA28 01 01 01 01
 13+  AA2C 00 00 00 00
 13+  AA30 00 01 00 00
 14+  AA34 00 00 01 04      defb 00,00,01,04,04,01,01,01,01,01,04,04,04,04,01,01,01,01,01,01,01,00,00,00,00,01,01,01,01,01,00,00
 14+  AA38 04 01 01 01
 14+  AA3C 01 01 04 04
 14+  AA40 04 04 01 01
 14+  AA44 01 01 01 01
 14+  AA48 01 00 00 00
 14+  AA4C 00 01 01 01
 14+  AA50 01 01 00 00
 15+  AA54 00 00 01 04      defb 00,00,01,04,04,04,04,04,04,01,04,04,04,04,04,04,04,04,00,00,00,00,04,04,04,04,04,04,04,01,00,00
 15+  AA58 04 04 04 04
 15+  AA5C 04 01 04 04
 15+  AA60 04 04 04 04
 15+  AA64 04 04 00 00
 15+  AA68 00 00 04 04
 15+  AA6C 04 04 04 04
 15+  AA70 04 01 00 00
 16+  AA74 00 00 01 01      defb 00,00,01,01,01,04,01,01,01,01,04,04,04,04,04,04,04,04,00,04,04,04,04,04,04,04,04,04,04,01,00,00
 16+  AA78 01 04 01 01
 16+  AA7C 01 01 04 04
 16+  AA80 04 04 04 04
 16+  AA84 04 04 00 04
 16+  AA88 04 04 04 04
 16+  AA8C 04 04 04 04
 16+  AA90 04 01 00 00
 17+  AA94 00 00 01 00      defb 00,00,01,00,00,00,00,00,00,04,04,04,04,04,04,04,04,04,00,04,04,04,04,04,04,04,04,04,04,01,00,00
 17+  AA98 00 00 00 00
 17+  AA9C 00 04 04 04
 17+  AAA0 04 04 04 04
 17+  AAA4 04 04 00 04
 17+  AAA8 04 04 04 04
 17+  AAAC 04 04 04 04
 17+  AAB0 04 01 00 00
 18+  AAB4 00 00 01 07      defb 00,00,01,07,07,07,07,07,07,01,04,04,04,04,04,04,04,04,00,04,04,04,04,04,04,04,04,04,04,01,00,00
 18+  AAB8 07 07 07 07
 18+  AABC 07 01 04 04
 18+  AAC0 04 04 04 04
 18+  AAC4 04 04 00 04
 18+  AAC8 04 04 04 04
 18+  AACC 04 04 04 04
 18+  AAD0 04 01 00 00
 19+  AAD4 00 00 01 00      defb 00,00,01,00,00,00,00,00,00,01,04,04,04,04,04,04,04,04,00,04,04,04,04,04,04,00,00,00,00,01,00,00
 19+  AAD8 00 00 00 00
 19+  AADC 00 01 04 04
 19+  AAE0 04 04 04 04
 19+  AAE4 04 04 00 04
 19+  AAE8 04 04 04 04
 19+  AAEC 04 00 00 00
 19+  AAF0 00 01 00 00
 20+  AAF4 00 00 01 00      defb 00,00,01,00,00,00,00,00,00,01,04,04,04,04,04,04,04,04,00,04,04,04,04,04,04,00,04,04,00,01,00,00
 20+  AAF8 00 00 00 00
 20+  AAFC 00 01 04 04
 20+  AB00 04 04 04 04
 20+  AB04 04 04 00 04
 20+  AB08 04 04 04 04
 20+  AB0C 04 00 04 04
 20+  AB10 00 01 00 00
 21+  AB14 00 00 01 06      defb 00,00,01,06,06,06,06,06,06,01,04,04,04,04,04,04,04,04,00,04,04,04,04,04,04,00,04,04,00,01,00,00
 21+  AB18 06 06 06 06
 21+  AB1C 06 01 04 04
 21+  AB20 04 04 04 04
 21+  AB24 04 04 00 04
 21+  AB28 04 04 04 04
 21+  AB2C 04 00 04 04
 21+  AB30 00 01 00 00
 22+  AB34 00 00 01 06      defb 00,00,01,06,06,06,06,06,06,01,04,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,04,04,00,01,00,00
 22+  AB38 06 06 06 06
 22+  AB3C 06 01 04 00
 22+  AB40 00 00 00 00
 22+  AB44 00 00 00 00
 22+  AB48 00 00 00 00
 22+  AB4C 00 00 04 04
 22+  AB50 00 01 00 00
 23+  AB54 00 00 01 06      defb 00,00,01,06,06,06,06,06,06,01,04,00,04,04,04,04,04,04,00,04,04,04,00,04,04,04,04,04,00,01,00,00
 23+  AB58 06 06 06 06
 23+  AB5C 06 01 04 00
 23+  AB60 04 04 04 04
 23+  AB64 04 04 00 04
 23+  AB68 04 04 00 04
 23+  AB6C 04 04 04 04
 23+  AB70 00 01 00 00
 24+  AB74 00 00 01 06      defb 00,00,01,06,06,06,06,06,06,01,04,00,04,04,04,04,04,04,00,04,04,04,00,04,04,04,04,04,00,01,00,00
 24+  AB78 06 06 06 06
 24+  AB7C 06 01 04 00
 24+  AB80 04 04 04 04
 24+  AB84 04 04 00 04
 24+  AB88 04 04 00 04
 24+  AB8C 04 04 04 04
 24+  AB90 00 01 00 00
 25+  AB94 00 00 01 01      defb 00,00,01,01,01,01,01,01,01,01,04,00,04,04,04,04,04,04,00,04,04,04,00,04,04,04,04,04,00,01,00,00
 25+  AB98 01 01 01 01
 25+  AB9C 01 01 04 00
 25+  ABA0 04 04 04 04
 25+  ABA4 04 04 00 04
 25+  ABA8 04 04 00 04
 25+  ABAC 04 04 04 04
 25+  ABB0 00 01 00 00
 26+  ABB4 00 00 01 04      defb 00,00,01,04,04,04,04,04,04,04,04,00,04,04,04,04,04,04,00,04,04,04,00,00,00,00,04,04,04,01,00,00
 26+  ABB8 04 04 04 04
 26+  ABBC 04 04 04 00
 26+  ABC0 04 04 04 04
 26+  ABC4 04 04 00 04
 26+  ABC8 04 04 00 00
 26+  ABCC 00 00 04 04
 26+  ABD0 04 01 00 00
 27+  ABD4 00 00 01 04      defb 00,00,01,04,04,04,00,00,00,00,00,00,04,04,04,04,04,04,00,04,04,04,04,04,04,00,04,04,04,01,00,00
 27+  ABD8 04 04 00 00
 27+  ABDC 00 00 00 00
 27+  ABE0 04 04 04 04
 27+  ABE4 04 04 00 04
 27+  ABE8 04 04 04 04
 27+  ABEC 04 00 04 04
 27+  ABF0 04 01 00 00
 28+  ABF4 00 00 01 04      defb 00,00,01,04,04,04,00,04,04,04,04,04,04,04,04,04,04,04,00,04,04,04,04,04,04,00,04,04,04,01,00,00
 28+  ABF8 04 04 00 04
 28+  ABFC 04 04 04 04
 28+  AC00 04 04 04 04
 28+  AC04 04 04 00 04
 28+  AC08 04 04 04 04
 28+  AC0C 04 00 04 04
 28+  AC10 04 01 00 00
 29+  AC14 00 00 01 04      defb 00,00,01,04,04,04,00,04,04,04,01,01,01,01,01,01,01,01,01,01,01,01,01,01,04,00,04,04,04,01,00,00
 29+  AC18 04 04 00 04
 29+  AC1C 04 04 01 01
 29+  AC20 01 01 01 01
 29+  AC24 01 01 01 01
 29+  AC28 01 01 01 01
 29+  AC2C 04 00 04 04
 29+  AC30 04 01 00 00
 30+  AC34 00 00 01 04      defb 00,00,01,04,04,04,00,04,04,04,01,00,00,00,00,00,00,00,00,00,00,00,00,01,04,00,04,04,04,01,00,00
 30+  AC38 04 04 00 04
 30+  AC3C 04 04 01 00
 30+  AC40 00 00 00 00
 30+  AC44 00 00 00 00
 30+  AC48 00 00 00 01
 30+  AC4C 04 00 04 04
 30+  AC50 04 01 00 00
 31+  AC54 00 00 01 04      defb 00,00,01,04,04,04,00,04,04,04,01,00,00,00,00,00,00,00,00,00,00,00,00,01,04,00,04,04,04,01,00,00
 31+  AC58 04 04 00 04
 31+  AC5C 04 04 01 00
 31+  AC60 00 00 00 00
 31+  AC64 00 00 00 00
 31+  AC68 00 00 00 01
 31+  AC6C 04 00 04 04
 31+  AC70 04 01 00 00
 32+  AC74 00 00 01 04      defb 00,00,01,04,04,04,00,04,04,04,01,00,00,00,00,00,00,00,00,00,00,00,00,01,04,00,04,04,04,01,00,00
 32+  AC78 04 04 00 04
 32+  AC7C 04 04 01 00
 32+  AC80 00 00 00 00
 32+  AC84 00 00 00 00
 32+  AC88 00 00 00 01
 32+  AC8C 04 00 04 04
 32+  AC90 04 01 00 00
 33+  AC94 00 00 01 04      defb 00,00,01,04,04,04,00,04,04,04,04,00,00,00,00,00,00,00,00,00,00,00,00,04,04,04,04,04,04,01,00,00
 33+  AC98 04 04 00 04
 33+  AC9C 04 04 04 00
 33+  ACA0 00 00 00 00
 33+  ACA4 00 00 00 00
 33+  ACA8 00 00 00 04
 33+  ACAC 04 04 04 04
 33+  ACB0 04 01 00 00
 34+  ACB4 00 00 01 04      defb 00,00,01,04,04,04,04,04,04,04,01,00,00,00,00,00,00,00,00,00,00,00,00,01,04,04,04,04,04,01,00,00
 34+  ACB8 04 04 04 04
 34+  ACBC 04 04 01 00
 34+  ACC0 00 00 00 00
 34+  ACC4 00 00 00 00
 34+  ACC8 00 00 00 01
 34+  ACCC 04 04 04 04
 34+  ACD0 04 01 00 00
 35+  ACD4 00 00 01 04      defb 00,00,01,04,04,04,04,04,04,04,01,00,00,00,01,00,00,00,00,01,00,00,00,01,04,04,04,04,04,01,00,00
 35+  ACD8 04 04 04 04
 35+  ACDC 04 04 01 00
 35+  ACE0 00 00 01 00
 35+  ACE4 00 00 00 01
 35+  ACE8 00 00 00 01
 35+  ACEC 04 04 04 04
 35+  ACF0 04 01 00 00
 36+  ACF4 00 00 01 01      defb 00,00,01,01,01,01,01,01,01,01,01,01,01,01,01,01,01,01,01,01,01,01,01,01,01,01,01,01,01,01,00,00
 36+  ACF8 01 01 01 01
 36+  ACFC 01 01 01 01
 36+  AD00 01 01 01 01
 36+  AD04 01 01 01 01
 36+  AD08 01 01 01 01
 36+  AD0C 01 01 01 01
 36+  AD10 01 01 00 00
 37+  AD14
 38+  AD14              ; ###############################################################
 39+  AD14              ; Object data: horiz, vert, state, memh, meml
 40+  AD14              ; ###############################################################
 41+  AD14              level01rocks:
 42+  AD14 09 04 00 00      defb 9,4,0,0,0
 42+  AD18 00
 43+  AD19 0C 07 00 00      defb 12,7,0,0,0
 43+  AD1D 00
 44+  AD1E 10 07 00 00      defb 16,7,0,0,0
 44+  AD22 00
 45+  AD23 0B 08 00 00      defb 11,8,0,0,0
 45+  AD27 00
 46+  AD28 0A 0A 00 00      defb 10,10,0,0,0
 46+  AD2C 00
 47+  AD2D 0C 0A 00 00      defb 12,10,0,0,0
 47+  AD31 00
 48+  AD32 0D 09 00 00      defb 13,9,0,0,0
 48+  AD36 00
 49+  AD37 0E 08 00 00      defb 14,8,0,0,0
 49+  AD3B 00
 50+  AD3C 0F 0B 00 00      defb 15,11,0,0,0
 50+  AD40 00
 51+  AD41 0B 0C 00 00      defb 11,12,0,0,0
 51+  AD45 00
 52+  AD46 11 0C 00 00      defb 17,12,0,0,0
 52+  AD4A 00
 53+  AD4B 13 08 00 00      defb 19,8,0,0,0
 53+  AD4F 00
 54+  AD50 16 09 00 00      defb 22,9,0,0,0
 54+  AD54 00
 55+  AD55 13 0A 00 00      defb 19,10,0,0,0
 55+  AD59 00
 56+  AD5A 15 0A 00 00      defb 21,10,0,0,0
 56+  AD5E 00
 57+  AD5F 15 0C 00 00      defb 21,12,0,0,0
 57+  AD63 00
 58+  AD64 16 0C 00 00      defb 22,12,0,0,0
 58+  AD68 00
 59+  AD69 18 0A 00 00      defb 24,10,0,0,0
 59+  AD6D 00
 60+  AD6E 19 09 00 00      defb 25,9,0,0,0
 60+  AD72 00
 61+  AD73 1C 09 00 00      defb 28,9,0,0,0
 61+  AD77 00
 62+  AD78 1B 0C 00 00      defb 27,12,0,0,0
 62+  AD7C 00
 63+  AD7D 1A 0D 00 00      defb 26,13,0,0,0
 63+  AD81 00
 64+  AD82 19 0E 00 00      defb 25,14,0,0,0
 64+  AD86 00
 65+  AD87 19 10 00 00      defb 25,16,0,0,0
 65+  AD8B 00
 66+  AD8C 1A 11 00 00      defb 26,17,0,0,0
 66+  AD90 00
 67+  AD91 1B 11 00 00      defb 27,17,0,0,0
 67+  AD95 00
 68+  AD96 1C 12 00 00      defb 28,18,0,0,0
 68+  AD9A 00
 69+  AD9B 1A 13 00 00      defb 26,19,0,0,0
 69+  AD9F 00
 70+  ADA0 1B 15 00 00      defb 27,21,0,0,0
 70+  ADA4 00
 71+  ADA5 1A 17 00 00      defb 26,23,0,0,0
 71+  ADA9 00
 72+  ADAA 1B 18 00 00      defb 27,24,0,0,0
 72+  ADAE 00
 73+  ADAF 19 18 00 00      defb 25,24,0,0,0
 73+  ADB3 00
 74+  ADB4 18 17 00 00      defb 24,23,0,0,0
 74+  ADB8 00
 75+  ADB9 13 14 00 00      defb 19,20,0,0,0
 75+  ADBD 00
 76+  ADBE 14 12 00 00      defb 20,18,0,0,0
 76+  ADC2 00
 77+  ADC3 14 10 00 00      defb 20,16,0,0,0
 77+  ADC7 00
 78+  ADC8 15 10 00 00      defb 21,16,0,0,0
 78+  ADCC 00
 79+  ADCD 16 12 00 00      defb 22,18,0,0,0
 79+  ADD1 00
 80+  ADD2 11 14 00 00      defb 17,20,0,0,0
 80+  ADD6 00
 81+  ADD7 0D 11 00 00      defb 13,17,0,0,0
 81+  ADDB 00
 82+  ADDC 0C 13 00 00      defb 12,19,0,0,0
 82+  ADE0 00
 83+  ADE1 0B 13 00 00      defb 11,19,0,0,0
 83+  ADE5 00
 84+  ADE6 0A 11 00 00      defb 10,17,0,0,0
 84+  ADEA 00
 85+  ADEB 05 12 00 00      defb 5,18,0,0,0
 85+  ADEF 00
 86+  ADF0 07 16 00 00      defb 7,22,0,0,0
 86+  ADF4 00
 87+  ADF5 09 17 00 00      defb 9,23,0,0,0
 87+  ADF9 00
 88+  ADFA 07 18 00 00      defb 7,24,0,0,0
 88+  ADFE 00
 89+  ADFF 05 18 00 00      defb 5,24,0,0,0
 89+  AE03 00
 90+  AE04 06 19 00 00      defb 6,25,0,0,0
 90+  AE08 00
 91+  AE09 08 19 00 00      defb 8,25,0,0,0
 91+  AE0D 00
 92+  AE0E 04 17 00 00      defb 4,23,0,0,0
 92+  AE12 00
 93+  AE13 FF               defb 255
 94+  AE14
 95+  AE14              level01missiles:
 96+  AE14 0B 17 00 00      defb 11,23,0,0,0
 96+  AE18 00
 97+  AE19 0B 16 00 00      defb 11,22,0,0,0
 97+  AE1D 00
 98+  AE1E 0C 17 00 00      defb 12,23,0,0,0
 98+  AE22 00
 99+  AE23 0C 16 00 00      defb 12,22,0,0,0
 99+  AE27 00
100+  AE28 0D 17 00 00      defb 13,23,0,0,0
100+  AE2C 00
101+  AE2D 0D 16 00 00      defb 13,22,0,0,0
101+  AE31 00
102+  AE32 0E 17 00 00      defb 14,23,0,0,0
102+  AE36 00
103+  AE37 0E 16 00 00      defb 14,22,0,0,0
103+  AE3B 00
104+  AE3C 0F 17 00 00      defb 15,23,0,0,0
104+  AE40 00
105+  AE41 0F 16 00 00      defb 15,22,0,0,0
105+  AE45 00
106+  AE46 10 17 00 00      defb 16,23,0,0,0
106+  AE4A 00
107+  AE4B 10 16 00 00      defb 16,22,0,0,0
107+  AE4F 00
108+  AE50 11 17 00 00      defb 17,23,0,0,0
108+  AE54 00
109+  AE55 11 16 00 00      defb 17,22,0,0,0
109+  AE59 00
110+  AE5A 12 17 00 00      defb 18,23,0,0,0
110+  AE5E 00
111+  AE5F 12 16 00 00      defb 18,22,0,0,0
111+  AE63 00
112+  AE64 13 17 00 00      defb 19,23,0,0,0
112+  AE68 00
113+  AE69 13 16 00 00      defb 19,22,0,0,0
113+  AE6D 00
114+  AE6E 14 17 00 00      defb 20,23,0,0,0
114+  AE72 00
115+  AE73 14 16 00 00      defb 20,22,0,0,0
115+  AE77 00
116+  AE78 15 17 00 00      defb 21,23,0,0,0
116+  AE7C 00
117+  AE7D 15 16 00 00      defb 21,22,0,0,0
117+  AE81 00
118+  AE82 16 17 00 00      defb 22,23,0,0,0
118+  AE86 00
119+  AE87 16 16 00 00      defb 22,22,0,0,0
119+  AE8B 00
120+  AE8C FF               defb 255
121+  AE8D
122+  AE8D              level01diamonds:
123+  AE8D 0C 1B 00 00      defb 12,27,0,0,0
123+  AE91 00
124+  AE92 10 1B 00 00      defb 16,27,0,0,0
124+  AE96 00
125+  AE97 15 1B 00 00      defb 21,27,0,0,0
125+  AE9B 00
126+  AE9C FF               defb 255
127+  AE9D
128+  AE9D              level01gems:
129+  AE9D 12 14 00 00      defb 18,20,0,0,0
129+  AEA1 00
130+  AEA2 06 18 00 00      defb 6,24,0,0,0
130+  AEA6 00
131+  AEA7 19 17 00 00      defb 25,23,0,0,0
131+  AEAB 00
132+  AEAC 1C 11 00 00      defb 28,17,0,0,0
132+  AEB0 00
133+  AEB1 FF               defb 255
134+  AEB2              ;
135+  AEB2              ; Score area colours
136+  AEB2              ;
137+  AEB2              score_colours:
138+  AEB2 47 47 47 47      defb 71,71,71,71,71,71,71,71,71,71,71,66,67,67,67,67,67,67,67,67,66,71,71,71,71,71,71,71,71,71,71,71
138+  AEB6 47 47 47 47
138+  AEBA 47 47 47 42
138+  AEBE 43 43 43 43
138+  AEC2 43 43 43 43
138+  AEC6 42 47 47 47
138+  AECA 47 47 47 47
138+  AECE 47 47 47 47
139+  AED2 47 47 47 47      defb 71,71,71,71,71,71,71,71,71,71,71,70,70,70,70,70,70,70,70,70,70,71,71,71,71,71,71,71,71,71,71,71
139+  AED6 47 47 47 47
139+  AEDA 47 47 47 46
139+  AEDE 46 46 46 46
139+  AEE2 46 46 46 46
139+  AEE6 46 47 47 47
139+  AEEA 47 47 47 47
139+  AEEE 47 47 47 47
140+  AEF2
141+  AEF2              high_score_colours:
142+  AEF2 00 00 00 42      defb  0, 0, 0,66,66,66,71,71,71,71,71,71,67,67,67,71,71,71,71,71,71,70,70,70,71,71,71,71,71,71,0,0
142+  AEF6 42 42 47 47
142+  AEFA 47 47 47 47
142+  AEFE 43 43 43 47
142+  AF02 47 47 47 47
142+  AF06 47 46 46 46
142+  AF0A 47 47 47 47
142+  AF0E 47 47 00 00
# file closed: leveldata/level01.asm
 31   AF12                  include "graphics\graphics.asm"
# file opened: graphics/graphics.asm
  1+  AF12              ; Tiles graphics.
  2+  AF12              sprites:
  3+  AF12 00 00 00 00      defb    0  ,  0,  0,  0,  0,  0,  0,  0   ; 0, space
  3+  AF16 00 00 00 00
  4+  AF1A FF FF FF FF      defb    255,255,255,255,255,255,255,255   ; 1, cyan block
  4+  AF1E FF FF FF FF
  5+  AF22 01 03 07 0F      defb	  1,  3,  7, 15, 31, 63,127,255   ; 2, slope left
  5+  AF26 1F 3F 7F FF
  6+  AF2A 80 C0 E0 F0      defb    128,192,224,240,248,252,254,255   ; 3, slope right
  6+  AF2E F8 FC FE FF
  7+  AF32 55 AA 55 AA      defb    85,170, 85,170, 85,170, 85,170    ; 4, dirt
  7+  AF36 55 AA 55 AA
  8+  AF3A 00 00 00 00      defb    0  ,  0,  0,  0,  0,  0,  0,  0   ; 5, sky block
  8+  AF3E 00 00 00 00
  9+  AF42 FF FF FF FF      defb    255,255,255,255,255,255,255,255   ; 6, slime block
  9+  AF46 FF FF FF FF
 10+  AF4A FF FF 00 00      defb    255,255,  0,  0,  0,  0,  0,  0   ; 7, trapdoor
 10+  AF4E 00 00 00 00
 11+  AF52 18 2C 4E 8F      defb    24, 44, 78,143,241,114, 52,  24    ; 8, diamond
 11+  AF56 F1 72 34 18
 12+  AF5A 3C 7E FF 7F      defb    60,126,255,127,254,254,255,126    ; 9, rock
 12+  AF5E FE FE FF 7E
 13+  AF62 7E FF 7F 7F  	defb	126,255,127,127,254,255,126, 60    ; 10, rock 2
 13+  AF66 FE FF 7E 3C
 14+  AF6A 00 00 00 00      defb    0  ,  0,  0,  0,  0,  0,255,255   ; 11, sky block, pixel trapdoor
 14+  AF6E 00 00 FF FF
 15+  AF72 99 DB 7E 24  	defb    153,219,126, 36,255,126, 60, 24   ; 12, missile
 15+  AF76 FF 7E 3C 18
 16+  AF7A 00 00 00 00      defb    0  ,  0,  0,  0,  0,  0,  0,  0   ; 13, sky block, tank background
 16+  AF7E 00 00 00 00
 17+  AF82 00 00 00 00  	defb    0,  0,  0,  0,  0, 60, 90, 52     ; 14, gem
 17+  AF86 00 3C 5A 34
 18+  AF8A
 19+  AF8A              sprite_attrs:
 20+  AF8A 46               defb    070 ; 0, space
 21+  AF8B 65               defb    101 ; 1, cyan block
 22+  AF8C 4D               defb    077 ; 2, slope left
 23+  AF8D 4D               defb    077 ; 3, slope right
 24+  AF8E 46               defb    070 ; 4, dirt
 25+  AF8F 4E               defb    078 ; 5, sky
 26+  AF90 4C               defb    076 ; 6, slime
 27+  AF91 42               defb    066 ; 7, trapdoor
 28+  AF92 46               defb    070 ; 8, diamond
 29+  AF93 42               defb    066 ; 9, rock
 30+  AF94 42               defb    066 ; 10, rock 2
 31+  AF95 49           	defb    073 ; 11, sky, trapdoor
 32+  AF96 43           	defb    067 ; 12, missile
 33+  AF97 4A               defb    074 ; 13, sky, red ink (tank)
 34+  AF98 46               defb    070 ; 14, gem
 35+  AF99
 36+  AF99              player_sprite:
 37+  AF99 10 39 92 FC  	defb	 16, 57,146,252, 56, 61,195,128 ; 0 up/down 1
 37+  AF9D 38 3D C3 80
 38+  AFA1 08 1C 08 FC  	defb	  8, 28,  8,252, 60, 28, 22, 50 ; 1 left 1
 38+  AFA5 3C 1C 16 32
 39+  AFA9 10 38 10 3F      defb   	 16, 56, 16, 63, 60, 56,104, 76 ; 2 right 1
 39+  AFAD 3C 38 68 4C
 40+  AFB1 08 9C 49 3F  	defb	  8,156, 73, 63, 28,188,195,  1 ; 3 up/down 2
 40+  AFB5 1C BC C3 01
 41+  AFB9 08 1C 08 FC  	defb	  8, 28,  8,252, 60, 60,100, 12; 4 left 2
 41+  AFBD 3C 3C 64 0C
 42+  AFC1 10 38 10 3F  	defb	 16, 56, 16, 63, 60, 60, 38, 48 ; 5 right 2
 42+  AFC5 3C 3C 26 30
 43+  AFC9 54 28 10 12  	defb	 84, 40, 16, 18, 30, 92,253, 95 ; 6 shoot up
 43+  AFCD 1E 5C FD 5F
 44+  AFD1 02 87 42 BF  	defb	 2,135, 66,191, 79,143, 25,  3  ; 7 shoot left
 44+  AFD5 4F 8F 19 03
 45+  AFD9 40 E1 42 FD  	defb	 64,225, 66,253,242,241,152,192 ; 8 shoot right
 45+  AFDD F2 F1 98 C0
 46+  AFE1 FA BF 3A 78  	defb	 250,191, 58,120, 72,  8, 20, 42 ; 9 shoot down
 46+  AFE5 48 08 14 2A
 47+  AFE9
 48+  AFE9              ;
 49+  AFE9              ; First 4 top half, next 4 bottom 1, next 4 bottom 2
 50+  AFE9              ;
 51+  AFE9              ship_sprite:
 52+  AFE9 00 00 00 01  	defb	  0,  0,  0,  1,  3, 31,127,255
 52+  AFED 03 1F 7F FF
 53+  AFF1 1F 01 7F FF  	defb	 31,  1,127,255,255,255,255,255
 53+  AFF5 FF FF FF FF
 54+  AFF9 F8 80 FE FF  	defb	248,128,254,255,255,255,255,255
 54+  AFFD FF FF FF FF
 55+  B001 00 00 00 80  	defb	  0,  0,  0,128,192,248,254,255
 55+  B005 C0 F8 FE FF
 56+  B009 B3 B3 7F 1F  	defb	179,179,127, 31,  3,  3,  2,  7
 56+  B00D 03 03 02 07
 57+  B011 8F 8F FF FF  	defb	143,143,255,255,255, 15,  7,131
 57+  B015 FF 0F 07 83
 58+  B019 0F 0F FF FF  	defb	 15, 15,255,255,255, 16, 32,193
 58+  B01D FF 10 20 C1
 59+  B021 19 19 FE F8  	defb	 25, 25,254,248,192,192, 64,224
 59+  B025 C0 C0 40 E0
 60+  B029 98 98 7F 1F  	defb	152,152,127, 31,  3,  3,  2,  7
 60+  B02D 03 03 02 07
 61+  B031 F0 F0 FF FF  	defb	240,240,255,255,255,  8,  4,131
 61+  B035 FF 08 04 83
 62+  B039 F1 F1 FF FF  	defb	241,241,255,255,255,240,224,193
 62+  B03D FF F0 E0 C1
 63+  B041 CD CD FE F8  	defb	205,205,254,248,192,192, 64,224
 63+  B045 C0 C0 40 E0
 64+  B049
 65+  B049              ;
 66+  B049              ;  First 8 frames are tank, last frame is the gun barrel
 67+  B049              ;
 68+  B049              tank_sprite:
 69+  B049 00 00 00 7F  	defb	  0,  0,  0,127,127,  0,  0,  0
 69+  B04D 7F 00 00 00
 70+  B051 01 03 FE FC  	defb	  1,  3,254,252,254,255,127, 64
 70+  B055 FE FF 7F 40
 71+  B059 FF FF 03 F9  	defb	255,255,  3,249,  3,255,255,  1
 71+  B05D 03 FF FF 01
 72+  B061 00 00 C0 E0  	defb	  0,  0,192,224,224,192,  0,  0
 72+  B065 E0 C0 00 00
 73+  B069 3F 7F E1 FB  	defb	 63,127,225,251,247,225,127, 63
 73+  B06D F7 E1 7F 3F
 74+  B071 FF FF 16 52  	defb	255,255, 22, 82, 84, 22,255,255
 74+  B075 54 16 FF FF
 75+  B079 FF FF A8 A9  	defb	255,255,168,169,155,168,255,255
 75+  B07D 9B A8 FF FF
 76+  B081 FC FE 8F AF  	defb	252,254,143,175,159,175,254,252
 76+  B085 9F AF FE FC
 77+  B089 00 00 00 1F  	defb	  0,  0,  0, 31, 31,  0,  0,  0
 77+  B08D 1F 00 00 00
# file closed: graphics/graphics.asm
 32   B091
 33   B091                  include "game\control.asm"
# file opened: game/control.asm
  1+  B091              ;
  2+  B091              ; Check the keyboard then move
  3+  B091              ;
  4+  B091              control_keyboard:
  5+  B091 3A 94 B4         ld a,(player+5)      ; first, check if the player has pixels left to move
  6+  B094 FE 00            cp 0
  7+  B096 CA 9D B0         jp z, control_keyboard5
  8+  B099 CD A2 B1         call control_automove
  9+  B09C C9               ret
 10+  B09D              control_keyboard5:
 11+  B09D 3A 95 B4         ld a,(player+6)      ; next, check if the player is digging
 12+  B0A0 FE 00            cp 0
 13+  B0A2 CA A9 B0         jp z, control_keyboard0
 14+  B0A5 CD E0 B0         call control_dig
 15+  B0A8 C9               ret
 16+  B0A9              control_keyboard0:
 17+  B0A9 01 FE FB         ld bc,64510         ; port for keyboard row q-t.
 18+  B0AC ED 78            in a,(c)            ; read keyboard.
 19+  B0AE 47               ld b,a              ; store result in b register.
 20+  B0AF CB 18            rr b                ; check outermost key (q).
 21+  B0B1 D2 D0 B0         jp nc,control_keyboard1
 22+  B0B4 01 FE FD         ld bc,65022         ; port for keyboard row a-f.
 23+  B0B7 ED 78            in a,(c)            ; read keyboard.
 24+  B0B9 47               ld b,a              ; store result in b register.
 25+  B0BA CB 18            rr b                ; check outermost key (a).
 26+  B0BC D2 D4 B0         jp nc,control_keyboard2
 27+  B0BF 01 FE DF         ld bc,57342         ; port for keyboard row y-p.
 28+  B0C2 ED 78            in a,(c)            ; read keyboard.
 29+  B0C4 47               ld b,a              ; store result in b register.
 30+  B0C5 CB 18            rr b                ; check outermost key (p).
 31+  B0C7 D2 D8 B0         jp nc,control_keyboard3
 32+  B0CA CB 18            rr b                ; check next key.
 33+  B0CC D2 DC B0         jp nc,control_keyboard4
 34+  B0CF C9               ret
 35+  B0D0              control_keyboard1:
 36+  B0D0 CD EB B1         call control_pl_moveup         ; player up.
 37+  B0D3 C9               ret
 38+  B0D4              control_keyboard2:
 39+  B0D4 CD 1A B2         call control_pl_movedown       ; player down.
 40+  B0D7 C9               ret
 41+  B0D8              control_keyboard3:
 42+  B0D8 CD 77 B2         call control_pl_moveright       ; player left.
 43+  B0DB C9               ret
 44+  B0DC              control_keyboard4:
 45+  B0DC CD 47 B2         call control_pl_moveleft       ; player right.
 46+  B0DF C9               ret
 47+  B0E0
 48+  B0E0              ;
 49+  B0E0              ; Performs a dig if the counter has reset, otherwise, messes with the graphics
 50+  B0E0              ;
 51+  B0E0              control_dig:
 52+  B0E0 ED 4B 8F B4      ld bc,(player)      ; load the current coords into bc
 53+  B0E4 C5               push bc
 54+  B0E5 3A 91 B4         ld a,(player+2)     ; get the direction
 55+  B0E8 FE 01            cp 1                ; left
 56+  B0EA CA 02 B1         jp z,control_dig0
 57+  B0ED FE 02            cp 2                ; right
 58+  B0EF CA 17 B1         jp z,control_dig1
 59+  B0F2 FE 03            cp 3                ; down
 60+  B0F4 CA 3B B1         jp z,control_dig5
 61+  B0F7 FE 00            cp 0                ; up
 62+  B0F9 CA 2B B1         jp z,control_dig4
 63+  B0FC 21 95 B4         ld hl,player+6
 64+  B0FF 36 00            ld (hl),0           ; turn off digging
 65+  B101 C9               ret                 ; return
 66+  B102              control_dig0:           ; going left
 67+  B102 CD 54 A7         call sprites_scadd  ; get the current coord
 68+  B105 62 6B            ld hl,de
 69+  B107 2B               dec hl              ; move one left
 70+  B108 C1               pop bc              ; get the coords back, subtract 8 from horiz, 8 from vert, store (will be coords of space above dug dirt)
 71+  B109 78               ld a,b
 72+  B10A 06 08            ld b,8
 73+  B10C 90               sub b
 74+  B10D 47               ld b,a
 75+  B10E 79               ld a,c
 76+  B10F 0E 08            ld c,8
 77+  B111 91               sub c
 78+  B112 4F               ld c,a
 79+  B113 C5               push bc
 80+  B114 C3 44 B1         jp control_dig2
 81+  B117              control_dig1:
 82+  B117 CD 54 A7         call sprites_scadd  ; get the current coord
 83+  B11A 62 6B            ld hl,de
 84+  B11C 23               inc hl              ; move one right
 85+  B11D C1               pop bc              ; get the coords back, add 8 to horiz, subtract 8 from vert store (will be coords of space above dug dirt)
 86+  B11E 3E 08            ld a,8
 87+  B120 80               add a,b
 88+  B121 47               ld b,a
 89+  B122 79               ld a,c
 90+  B123 0E 08            ld c,8
 91+  B125 91               sub c
 92+  B126 4F               ld c,a
 93+  B127 C5               push bc
 94+  B128 C3 44 B1         jp control_dig2
 95+  B12B              control_dig4:
 96+  B12B CD 54 A7         call sprites_scadd  ; get the current coord
 97+  B12E 62 6B            ld hl,de
 98+  B130 11 20 00         ld de,32
 99+  B133 ED 52            sbc hl,de             ; move one up
100+  B135 C1               pop bc              ; get the coords back, 1 from vert, store, then we'll sub 1 from c for each row later
101+  B136 0D               dec c
102+  B137 C5               push bc
103+  B138 C3 5C B1         jp control_dig6
104+  B13B              control_dig5:
105+  B13B CD 54 A7         call sprites_scadd  ; get the current coord
106+  B13E 62 6B            ld hl,de
107+  B140 24               inc h              ; move one down
108+  B141                                     ; not bothered about working out bc here, since rock will never fall if digging down
109+  B141 C3 44 B1         jp control_dig2
110+  B144              ; Normal (not up) digging
111+  B144              control_dig2:
112+  B144 3A 97 B4         ld a,(player+8)     ; get the number of rows we need to overwrite
113+  B147 47               ld b,a              ; rows to copy over
114+  B148 E5               push hl             ; store the memory location of the first row for later
115+  B149              control_dig3:
116+  B149 CD 8B B1         call control_getpixelrow
117+  B14C 77               ld (hl),a           ; load contents into row
118+  B14D 11 20 00         ld de,32
119+  B150 19               add hl,de           ; move to next row
120+  B151 10 F6            djnz control_dig3
121+  B153 E1               pop hl              ; get the original memory location back
122+  B154 11 20 00         ld de,32
123+  B157 ED 52            sbc hl,de           ; move to above row, ready for checking for rock
124+  B159 C3 72 B1         jp control_dig10
125+  B15C              ; Special case for going up
126+  B15C              control_dig6:
127+  B15C 3A 97 B4         ld a,(player+8)     ; get the number of rows we need to overwrite
128+  B15F 47               ld b,a              ; rows to copy over
129+  B160              control_dig7:
130+  B160 CD 8B B1         call control_getpixelrow
131+  B163              control_dig12:
132+  B163 77               ld (hl),a           ; load empty into row
133+  B164 11 20 00         ld de,32
134+  B167 ED 52            sbc hl,de           ; move up to next row
135+  B169 0D               dec c               ; decrease c to track rows
136+  B16A 10 F4            djnz control_dig7
137+  B16C 79               ld a,c
138+  B16D D6 07            sub 7
139+  B16F C1               pop bc
140+  B170 4F               ld c,a
141+  B171 C5               push bc             ; store the decreased c coord
142+  B172              control_dig10:
143+  B172 DD 21 96 B4      ld ix,player+7
144+  B176 DD 7E 00         ld a,(ix)     ; get the dig frame number
145+  B179 3D               dec a
146+  B17A DD 77 00         ld (ix),a
147+  B17D                  ; call the check for rocks above the removed dirt
148+  B17D DD 21 95 B4      ld ix,player+6
149+  B181 DD 7E 00         ld a,(ix)     ; get the dig state
150+  B184 FE 00            cp 0
151+  B186 C1               pop bc
152+  B187 CC 20 B7         call z, rocks_checkforfalling ; make the check if we're no longer digging
153+  B18A C9               ret
154+  B18B
155+  B18B              ;
156+  B18B              ; Gets a modified pixel row to overwrite dirt - if this is the last dig, overwrite with nothing, otherwise xor to flip the dirt
157+  B18B              ; Inputs:
158+  B18B              ; hl - memory of pixel row
159+  B18B              ; Outputs:
160+  B18B              ; a - modified row to write
161+  B18B              ;
162+  B18B              control_getpixelrow:
163+  B18B 3A 96 B4         ld a,(player+7)     ; get the dig frame number
164+  B18E FE 00            cp 0                ; is this the last dig
165+  B190 CA 97 B1         jp z,control_getpixelrow1
166+  B193 7E               ld a,(hl)           ; if not, xor with 255 to flip it
167+  B194 EE FF            xor 255
168+  B196 C9               ret
169+  B197              control_getpixelrow1:
170+  B197 DD 21 95 B4      ld ix,player+6
171+  B19B DD 36 00 00      ld (ix),0           ; turn off digging
172+  B19F 3E 00            ld a,0              ; if it is, load with empty
173+  B1A1 C9               ret
174+  B1A2
175+  B1A2              ;
176+  B1A2              ; Auto move the player until pixels is zero
177+  B1A2              ;
178+  B1A2              control_automove:
179+  B1A2 5F               ld e,a              ; store the number of pixels left to move in e
180+  B1A3 ED 4B 8F B4      ld bc,(player)      ; load the current coords into bc
181+  B1A7 21 91 B4         ld hl,player+2      ; get the direction
182+  B1AA 7E               ld a,(hl)
183+  B1AB FE 03            cp 3                ; down
184+  B1AD CA C1 B1         jp z,control_automove3  ; don't need to do anything
185+  B1B0 FE 00            cp 0                ; going up
186+  B1B2 CA CD B1         jp z,control_automove2
187+  B1B5 FE 01            cp 1                ; going left?
188+  B1B7 CA D9 B1         jp z,control_automove0
189+  B1BA 78               ld a,b
190+  B1BB 3C               inc a               ; if we're going right, increment a twice for two pixels
191+  B1BC 3C               inc a
192+  B1BD 47               ld b,a
193+  B1BE C3 DD B1         jp control_automove1
194+  B1C1              control_automove3:
195+  B1C1 79               ld a,c
196+  B1C2 3C               inc a
197+  B1C3 3C               inc a               ; if we're going down, increment twice
198+  B1C4 4F               ld c,a
199+  B1C5 FE 90            cp 144
200+  B1C7 CC A5 B2         call z, control_scroll_down
201+  B1CA C3 DD B1         jp control_automove1
202+  B1CD              control_automove2:
203+  B1CD 79               ld a,c
204+  B1CE 3D               dec a
205+  B1CF 3D               dec a               ; if we're going up, decrement twice
206+  B1D0 4F               ld c,a
207+  B1D1 FE 60            cp 96
208+  B1D3 CC B2 B2         call z, control_scroll_up
209+  B1D6 C3 DD B1         jp control_automove1
210+  B1D9              control_automove0:
211+  B1D9 78               ld a,b
212+  B1DA 3D               dec a               ; if we're going left, decrement a twice
213+  B1DB 3D               dec a
214+  B1DC 47               ld b,a
215+  B1DD              control_automove1:
216+  B1DD ED 43 8F B4      ld (player),bc      ; and back to player
217+  B1E1 7B               ld a,e              ; now get the pixel count back
218+  B1E2 3D               dec a               ; decrease by one
219+  B1E3 21 94 B4         ld hl,player+5
220+  B1E6 77               ld (hl),a           ; copy back
221+  B1E7 CD 1B B5         call player_justmoved
222+  B1EA C9               ret
223+  B1EB
224+  B1EB              ;
225+  B1EB              ; Moves the player up
226+  B1EB              ;
227+  B1EB              control_pl_moveup:
228+  B1EB C5               push bc
229+  B1EC ED 4B 8F B4      ld bc,(player)          ; get the current coords, b horiz, c vert
230+  B1F0 79               ld a,c                  ; load c into the acc
231+  B1F1 FE 18            cp 24
232+  B1F3 CA 13 B2         jp z,control_pl_moveup0 ; are we at the edge of the screen
233+  B1F6 FE 60            cp 96
234+  B1F8 CC B2 B2         call z, control_scroll_up
235+  B1FB CD DD B3         call movement_checkcanmove_up ; check we can move up, e will be 1 if we can
236+  B1FE F5               push af
237+  B1FF 7B               ld a,e                  ; put e in a
238+  B200 FE 00            cp 0
239+  B202 CA 12 B2         jp z,control_pl_moveup1 ; don't move if we can't
240+  B205 F1               pop af
241+  B206 D6 01            sub 1                   ; subtract 1
242+  B208 D6 01            sub 1                   ; subtract 1
243+  B20A 4F               ld c,a                  ; load back to c
244+  B20B ED 43 8F B4      ld (player),bc          ; load back to player
245+  B20F C3 13 B2         jp control_pl_moveup0
246+  B212              control_pl_moveup1:
247+  B212 F1               pop af                  ; restore af if needed
248+  B213              control_pl_moveup0:
249+  B213 3E 00            ld a,0
250+  B215 32 91 B4         ld (player+2),a        ; set direction to up
251+  B218 C1               pop bc
252+  B219 C9               ret
253+  B21A              ;
254+  B21A              ; Moves the player down
255+  B21A              ;
256+  B21A              control_pl_movedown:
257+  B21A C5               push bc
258+  B21B ED 4B 8F B4      ld bc,(player)          ; get the current coords, b horiz, c vert
259+  B21F 79               ld a,c                  ; load c into the acc
260+  B220 FE E0            cp 224
261+  B222 CA 40 B2         jp z,control_pl_movedown0 ; are we at the edge of the screen
262+  B225 FE 80            cp 128
263+  B227 CC A5 B2         call z, control_scroll_down
264+  B22A CD B5 B3         call movement_checkcanmove_down ; check we can move down, e will be 1 if we can
265+  B22D F5               push af
266+  B22E 7B               ld a,e                  ; put e in a
267+  B22F FE 00            cp 0
268+  B231 CA 3F B2         jp z,control_pl_movedown1 ; don't move if we can't
269+  B234 F1               pop af
270+  B235 3C               inc a                   ; add 1
271+  B236 3C               inc a                   ; add 1
272+  B237 4F               ld c,a                  ; load back to c
273+  B238 ED 43 8F B4      ld (player),bc          ; load back to player
274+  B23C C3 40 B2         jp control_pl_movedown0
275+  B23F              control_pl_movedown1:
276+  B23F F1               pop af                  ; restore af if needed
277+  B240              control_pl_movedown0:
278+  B240 3E 03            ld a,3
279+  B242 32 91 B4         ld (player+2),a        ; set direction to down
280+  B245 C1               pop bc
281+  B246 C9               ret
282+  B247              ;
283+  B247              ; Moves the player left
284+  B247              ;
285+  B247              control_pl_moveleft:
286+  B247 C5               push bc
287+  B248 ED 4B 8F B4      ld bc,(player)          ; get the current coords, b horiz, c vert
288+  B24C 78               ld a,b                  ; load b into the acc
289+  B24D FE 10            cp 16
290+  B24F CA 70 B2         jp z,control_pl_moveleft0 ; are we at the edge of the screen
291+  B252 CD 37 B4         call movement_checkcanmove_left ; check we can move down, e will be 1 if we can
292+  B255 F5               push af
293+  B256 7B               ld a,e                  ; put e in a
294+  B257 FE 00            cp 0
295+  B259 CA 6F B2         jp z,control_pl_moveleft1 ; don't move if we can't
296+  B25C 21 94 B4         ld hl,player+5          ; need to store the amount of pixels still left to move in the player status
297+  B25F 3E 03            ld a,3
298+  B261 77               ld (hl),a
299+  B262 F1               pop af
300+  B263 D6 01            sub 1                    ; subtract 2
301+  B265 D6 01            sub 1
302+  B267 47               ld b,a                  ; load back to c
303+  B268 ED 43 8F B4      ld (player),bc          ; load back to player
304+  B26C C3 70 B2         jp control_pl_moveleft0
305+  B26F              control_pl_moveleft1:
306+  B26F F1               pop af
307+  B270              control_pl_moveleft0:
308+  B270 3E 01            ld a,1
309+  B272 32 91 B4         ld (player+2),a        ; set direction to left
310+  B275 C1               pop bc
311+  B276 C9               ret
312+  B277              ;
313+  B277              ; Moves the player right
314+  B277              ;
315+  B277              control_pl_moveright:
316+  B277 C5               push bc
317+  B278 ED 4B 8F B4      ld bc,(player)          ; get the current coords, b horiz, c vert
318+  B27C 78               ld a,b                  ; load b into the acc
319+  B27D FE F0            cp 240
320+  B27F CA 9E B2         jp z,control_pl_moveright0 ; are we at the edge of the screen
321+  B282 CD 0F B4         call movement_checkcanmove_right ; check we can move down, e will be 1 if we can
322+  B285 F5               push af
323+  B286 7B               ld a,e                  ; put e in a
324+  B287 FE 00            cp 0
325+  B289 CA 9D B2         jp z,control_pl_moveright1 ; don't move if we can't
326+  B28C 21 94 B4         ld hl,player+5          ; need to store the amount of pixels still left to move in the player status
327+  B28F 3E 03            ld a,3
328+  B291 77               ld (hl),a
329+  B292 F1               pop af
330+  B293 3C               inc a                   ; add 2
331+  B294 3C               inc a
332+  B295 47               ld b,a                  ; load back to b
333+  B296 ED 43 8F B4      ld (player),bc          ; load back to player
334+  B29A C3 9E B2         jp control_pl_moveright0
335+  B29D              control_pl_moveright1:
336+  B29D F1               pop af                  ; restore af if needed
337+  B29E              control_pl_moveright0:
338+  B29E 3E 02            ld a,2
339+  B2A0 32 91 B4         ld (player+2),a        ; set direction to right
340+  B2A3 C1               pop bc
341+  B2A4 C9               ret
342+  B2A5
343+  B2A5              ;
344+  B2A5              ; Scrolls the screen down
345+  B2A5              ;
346+  B2A5              control_scroll_down:
347+  B2A5 F5               push af
348+  B2A6 3E 08            ld a,8
349+  B2A8 32 8C A5         ld (screen_offset),a
350+  B2AB F1               pop af
351+  B2AC 21 3E A4         ld hl,buffer_updateall
352+  B2AF 36 01            ld (hl),1         ; flag as screen needing update
353+  B2B1 C9               ret
354+  B2B2
355+  B2B2              ;
356+  B2B2              ; Scrolls the screen up
357+  B2B2              ;
358+  B2B2              control_scroll_up:
359+  B2B2 F5               push af
360+  B2B3 3E 00            ld a,0
361+  B2B5 32 8C A5         ld (screen_offset),a
362+  B2B8 F1               pop af
363+  B2B9 21 3E A4         ld hl,buffer_updateall
364+  B2BC 36 01            ld (hl),1         ; flag as screen needing update
365+  B2BE C9               ret
366+  B2BF
367+  B2BF
368+  B2BF
369+  B2BF
# file closed: game/control.asm
 34   B2BF                  include "game\movement.asm"
# file opened: game/movement.asm
  1+  B2BF              ;
  2+  B2BF              ; Checks the contents of a cell are empty - ie, all pixel rows are zero
  3+  B2BF              ; Inputs:
  4+  B2BF              ; hl - memory location of top pixel row
  5+  B2BF              ; bc - screen coords, b horiz, c vert
  6+  B2BF              ; Outputs:
  7+  B2BF              ; e - 0 if not empty, 1 if empty
  8+  B2BF              ;
  9+  B2BF              movement_spaceisempty:
 10+  B2BF 3E 08            ld a,8                          ; 8 rows to check
 11+  B2C1              movement_spaceisempty0:
 12+  B2C1 08               ex af,af'                       ; store the loop counter
 13+  B2C2 7E               ld a,(hl)                       ; get current pixel row
 14+  B2C3 FE 00            cp 0
 15+  B2C5 C2 D9 B2         jp nz, movement_spaceisempty1    ; row is not empty, can't move here
 16+  B2C8 79               ld a,c                          ; load the vertical coord
 17+  B2C9 3C               inc a                           ; next row down
 18+  B2CA 11 20 00         ld de,32
 19+  B2CD 19               add hl,de                       ; otherwise, just go one down for hl, which means add 32, because of course
 20+  B2CE 4F               ld c,a                          ; copy vert coord back to c
 21+  B2CF 08               ex af,af'                       ; get loop counter back
 22+  B2D0 3D               dec a                           ; decrease loop counter
 23+  B2D1 C2 C1 B2         jp nz, movement_spaceisempty0
 24+  B2D4 16 00            ld d,0
 25+  B2D6 1E 01            ld e,1                          ; got to end, so space is empty
 26+  B2D8 C9               ret
 27+  B2D9              movement_spaceisempty1:
 28+  B2D9 16 00            ld d,0
 29+  B2DB 1E 00            ld e,0                          ; returning false, ie space not empty
 30+  B2DD C9               ret
 31+  B2DE
 32+  B2DE              ;
 33+  B2DE              ; Checks the line of a cell below is empty - ie, first pixel rows is zero
 34+  B2DE              ; Inputs:
 35+  B2DE              ; hl - memory location of top pixel row
 36+  B2DE              ; bc - screen coords, b horiz, c vert
 37+  B2DE              ; Outputs:
 38+  B2DE              ; e - 0 if not empty, 1 if empty
 39+  B2DE              ;
 40+  B2DE              movement_linebelowisempty:
 41+  B2DE 7E               ld a,(hl)                       ; get current pixel row
 42+  B2DF FE 00            cp 0
 43+  B2E1 C2 E9 B2         jp nz, movement_linebelowisempty1    ; row is not empty, can't move here
 44+  B2E4 16 00            ld d,0
 45+  B2E6 1E 01            ld e,1                          ; got to end, so space is empty
 46+  B2E8 C9               ret
 47+  B2E9              movement_linebelowisempty1:
 48+  B2E9 16 00            ld d,0
 49+  B2EB 1E 00            ld e,0                          ; returning false, ie space not empty
 50+  B2ED C9               ret
 51+  B2EE
 52+  B2EE              ;
 53+  B2EE              ; Checks the line of a cell above is empty - ie, last pixel rows are zero
 54+  B2EE              ; Inputs:
 55+  B2EE              ; hl - memory location of top pixel row
 56+  B2EE              ; bc - screen coords, b horiz, c vert
 57+  B2EE              ; Outputs:
 58+  B2EE              ; e - 0 if not empty, 1 if empty
 59+  B2EE              ;
 60+  B2EE              movement_lineaboveisempty:
 61+  B2EE 7E               ld a,(hl)                       ; get current pixel row
 62+  B2EF FE 00            cp 0
 63+  B2F1 C2 F9 B2         jp nz, movement_lineaboveisempty1    ; row is not empty, can't move here
 64+  B2F4 16 00            ld d,0
 65+  B2F6 1E 01            ld e,1                          ; got to end, so space is empty
 66+  B2F8 C9               ret
 67+  B2F9              movement_lineaboveisempty1:
 68+  B2F9 16 00            ld d,0
 69+  B2FB 1E 00            ld e,0                          ; returning false, ie space not empty
 70+  B2FD C9               ret
 71+  B2FE
 72+  B2FE              ;
 73+  B2FE              ; Checks the contents of a cell are diggable - ie, all pixel rows are dirt or empty
 74+  B2FE              ; Inputs:
 75+  B2FE              ; hl - memory location of top pixel row
 76+  B2FE              ; bc - screen coords, b horiz, c vert
 77+  B2FE              ; Outputs:
 78+  B2FE              ; none - puts player into digging mode
 79+  B2FE              ;
 80+  B2FE              movement_spaceisdiggable:
 81+  B2FE 3E 08            ld a,8                          ; 8 rows to check
 82+  B300              movement_spaceisdiggable0:
 83+  B300 08               ex af,af'                       ; store the loop counter
 84+  B301 7E               ld a,(hl)                       ; get current pixel row
 85+  B302 FE 00            cp 0
 86+  B304 CA 14 B3         jp z, movement_spaceisdiggable2  ; row is empty, can dig here
 87+  B307 FE 55            cp 85
 88+  B309 CA 14 B3         jp z, movement_spaceisdiggable2  ; row is dirt, can dig here
 89+  B30C FE AA            cp 170
 90+  B30E CA 14 B3         jp z, movement_spaceisdiggable2  ; row is dirt, can dig here
 91+  B311 C3 2C B3         jp movement_spaceisdiggable1     ; otherwise, stop checking
 92+  B314              movement_spaceisdiggable2:
 93+  B314 79               ld a,c                          ; load the vertical coord
 94+  B315 3C               inc a                           ; next row down
 95+  B316 11 20 00         ld de,32
 96+  B319 19               add hl,de                       ; otherwise, just go one down for hl, which means add 32, because of course
 97+  B31A 4F               ld c,a                          ; copy vert coord back to c
 98+  B31B 08               ex af,af'                       ; get loop counter back
 99+  B31C 3D               dec a                           ; decrease loop counter
100+  B31D C2 00 B3         jp nz, movement_spaceisdiggable0
101+  B320 21 95 B4         ld hl,player+6
102+  B323 36 01            ld (hl),1                       ; set the player into digging mode
103+  B325 23               inc hl
104+  B326 36 05            ld (hl),5                      ; set the number of frame to dig for
105+  B328 23               inc hl
106+  B329 36 08            ld (hl),8                       ; set the number of pixels to dig
107+  B32B C9               ret
108+  B32C              movement_spaceisdiggable1:
109+  B32C 21 95 B4         ld hl,player+6
110+  B32F 36 00            ld (hl),0                       ; set the player out of digging mode
111+  B331 C9               ret
112+  B332
113+  B332              ;
114+  B332              ; Checks the contents of a cell below are diggable - ie, at least one pixel row has dirt. If the first one isn't dirt, stop
115+  B332              ; Inputs:
116+  B332              ; hl - memory location of top pixel row
117+  B332              ; bc - screen coords, b horiz, c vert
118+  B332              ; Outputs:
119+  B332              ; none - puts player into digging mode
120+  B332              ;
121+  B332              movement_spacebelowisdiggable:
122+  B332 7E               ld a,(hl)                       ; get first pixel row
123+  B333 FE 55            cp 85
124+  B335 CA 40 B3         jp z, movement_spacebelowisdiggable3  ; row is dirt, can dig here
125+  B338 FE AA            cp 170
126+  B33A CA 40 B3         jp z, movement_spacebelowisdiggable3  ; row is dirt, can dig here
127+  B33D C3 2C B3         jp movement_spaceisdiggable1    ; the first row is not dirt, so don't bother checking the rest, can't dig
128+  B340              movement_spacebelowisdiggable3:
129+  B340 3E 08            ld a,8                          ; rows to check
130+  B342 1E 00            ld e,0                          ; count of rows to dig
131+  B344              movement_spacebelowisdiggable0:
132+  B344 08               ex af,af'                       ; store the loop counter
133+  B345 7E               ld a,(hl)                       ; get current pixel row
134+  B346 FE 55            cp 85
135+  B348 CA 53 B3         jp z, movement_spacebelowisdiggable4  ; row is dirt, can dig here
136+  B34B FE AA            cp 170
137+  B34D CA 53 B3         jp z, movement_spacebelowisdiggable4  ; row is dirt, can dig here
138+  B350 C3 62 B3         jp movement_spacebelowisdiggable5     ; don't count this row and stop counting
139+  B353              movement_spacebelowisdiggable4:
140+  B353 1C               inc e                           ; inc count of rows to dig
141+  B354              movement_spacebelowisdiggable2:
142+  B354 79               ld a,c                          ; load the vertical coord
143+  B355 3C               inc a                           ; next row down
144+  B356 D5               push de                         ; need e for later
145+  B357 11 20 00         ld de,32
146+  B35A 19               add hl,de                       ; otherwise, just go one down for hl, which means add 32, because of course
147+  B35B 4F               ld c,a                          ; copy vert coord back to c
148+  B35C D1               pop de                          ; get e back
149+  B35D 08               ex af,af'                       ; get loop counter back
150+  B35E 3D               dec a                           ; incease loop counter
151+  B35F C2 44 B3         jp nz, movement_spacebelowisdiggable0
152+  B362              movement_spacebelowisdiggable5:
153+  B362 21 95 B4         ld hl,player+6
154+  B365 36 01            ld (hl),1                       ; set the player into digging mode
155+  B367 23               inc hl
156+  B368 36 03            ld (hl),3                      ; set the number of frame to dig for
157+  B36A 23               inc hl
158+  B36B 73               ld (hl),e                       ; set the number of pixels to dig
159+  B36C C9               ret
160+  B36D              movement_spacebelowisdiggable1:
161+  B36D 21 95 B4         ld hl,player+6
162+  B370 36 00            ld (hl),0                       ; set the player out of digging mode
163+  B372 C9               ret
164+  B373
165+  B373              ;
166+  B373              ; Checks the contents of a cell above are diggable - ie, at least one pixel row has dirt. If the first one isn't dirt, stop
167+  B373              ; Inputs:
168+  B373              ; hl - memory location of top pixel row
169+  B373              ; bc - screen coords, b horiz, c vert
170+  B373              ; Outputs:
171+  B373              ; none - puts player into digging mode
172+  B373              ;
173+  B373              movement_spaceaboveisdiggable:
174+  B373 7E               ld a,(hl)                       ; get first pixel row
175+  B374 FE 55            cp 85
176+  B376 CA 81 B3         jp z, movement_spaceaboveisdiggable3  ; row is dirt, can dig here
177+  B379 FE AA            cp 170
178+  B37B CA 81 B3         jp z, movement_spaceaboveisdiggable3  ; row is dirt, can dig here
179+  B37E C3 2C B3         jp movement_spaceisdiggable1    ; the first row is not dirt, so don't bother checking the rest, can't dig
180+  B381              movement_spaceaboveisdiggable3:
181+  B381 3E 08            ld a,8                          ; rows to check
182+  B383 1E 00            ld e,0                          ; count of rows to dig
183+  B385              movement_spaceaboveisdiggable0:
184+  B385 08               ex af,af'                       ; store the loop counter
185+  B386 7E               ld a,(hl)                       ; get current pixel row
186+  B387 FE 55            cp 85
187+  B389 CA 94 B3         jp z, movement_spaceaboveisdiggable4  ; row is dirt, can dig here
188+  B38C FE AA            cp 170
189+  B38E CA 94 B3         jp z, movement_spaceaboveisdiggable4  ; row is dirt, can dig here
190+  B391 C3 A4 B3         jp movement_spaceaboveisdiggable5     ; don't count this row and stop counting
191+  B394              movement_spaceaboveisdiggable4:
192+  B394 1C               inc e                           ; inc count of rows to dig
193+  B395              movement_spaceaboveisdiggable2:
194+  B395 79               ld a,c                          ; load the vertical coord
195+  B396 3D               dec a                           ; next row up
196+  B397 D5               push de                         ; need e for later
197+  B398 11 20 00         ld de,32
198+  B39B ED 52            sbc hl,de                       ; otherwise, just go one up for hl, which means sub 32, because of course
199+  B39D 4F               ld c,a                          ; copy vert coord back to c
200+  B39E D1               pop de                          ; get e back
201+  B39F 08               ex af,af'                       ; get loop counter back
202+  B3A0 3D               dec a                           ; incease loop counter
203+  B3A1 C2 85 B3         jp nz, movement_spaceaboveisdiggable0
204+  B3A4              movement_spaceaboveisdiggable5:
205+  B3A4 21 95 B4         ld hl,player+6
206+  B3A7 36 01            ld (hl),1                       ; set the player into digging mode
207+  B3A9 23               inc hl
208+  B3AA 36 05            ld (hl),5                       ; set the number of frame to dig for
209+  B3AC 23               inc hl
210+  B3AD 73               ld (hl),e                       ; set the number of pixels to dig
211+  B3AE C9               ret
212+  B3AF              movement_spaceaboveisdiggable1:
213+  B3AF 21 95 B4         ld hl,player+6
214+  B3B2 36 00            ld (hl),0                       ; set the player out of digging mode
215+  B3B4 C9               ret
216+  B3B5
217+  B3B5              ;
218+  B3B5              ; Checks if the player can move down
219+  B3B5              ; Inputs:
220+  B3B5              ; bc - player coords, b horiz, c vert
221+  B3B5              ; Outputs:
222+  B3B5              ; de - 1 can move
223+  B3B5              movement_checkcanmove_down:
224+  B3B5 F5               push af
225+  B3B6 C5               push bc
226+  B3B7 CD 54 A7         call sprites_scadd              ; get the memory location of cell into de
227+  B3BA 62 6B            ld hl,de                        ; look at cell directly underneath (add 256)
228+  B3BC 24               inc h                       ; memory location of cell beneath now in hl
229+  B3BD CD DE B2         call movement_linebelowisempty       ; check space is empty
230+  B3C0 7B               ld a,e                          ; check space empty flag
231+  B3C1 FE 00            cp 0
232+  B3C3 CA CC B3         jp z, movement_checkcanmove_down1 ; can't move
233+  B3C6 CD 1B B5         call player_justmoved
234+  B3C9 C1               pop bc
235+  B3CA F1               pop af
236+  B3CB C9               ret
237+  B3CC              movement_checkcanmove_down1:
238+  B3CC C1               pop bc
239+  B3CD CD 54 A7         call sprites_scadd              ; get the memory location of cell into de
240+  B3D0 62 6B            ld hl,de                        ; look at cell directly underneath (add 256)
241+  B3D2 24               inc h
242+  B3D3 C5               push bc
243+  B3D4 CD 32 B3         call movement_spacebelowisdiggable    ; can't move here, but can we dig
244+  B3D7 11 00 00         ld de,0
245+  B3DA C1               pop bc
246+  B3DB F1               pop af
247+  B3DC C9               ret
248+  B3DD
249+  B3DD              ;
250+  B3DD              ; Checks if the player can move up
251+  B3DD              ; Inputs:
252+  B3DD              ; bc - player coords, b horiz, c vert
253+  B3DD              ; Outputs:
254+  B3DD              ; de - 1 can move
255+  B3DD              movement_checkcanmove_up:
256+  B3DD F5               push af
257+  B3DE C5               push bc
258+  B3DF CD 54 A7         call sprites_scadd              ; get the memory location of cell into de
259+  B3E2 62 6B            ld hl,de                        ; look at cell directly above (subtract 32)
260+  B3E4 11 20 00         ld de,32
261+  B3E7 ED 52            sbc hl,de                       ; memory location of line above now in hl
262+  B3E9 CD EE B2         call movement_lineaboveisempty       ; check space is empty
263+  B3EC 7B               ld a,e                          ; check space empty flag
264+  B3ED FE 00            cp 0
265+  B3EF CA FA B3         jp z, movement_checkcanmove_up1 ; can't move
266+  B3F2 1E 01            ld e,1
267+  B3F4 CD 1B B5         call player_justmoved
268+  B3F7 C1               pop bc
269+  B3F8 F1               pop af
270+  B3F9 C9               ret
271+  B3FA              movement_checkcanmove_up1:
272+  B3FA C1               pop bc
273+  B3FB CD 54 A7         call sprites_scadd              ; get the memory location of cell into de
274+  B3FE 62 6B            ld hl,de                        ; look at cell directly above (subtract 32)
275+  B400 11 20 00         ld de,32
276+  B403 ED 52            sbc hl,de                       ; memory location of line above now in hl
277+  B405 C5               push bc
278+  B406 CD 73 B3         call movement_spaceaboveisdiggable    ; can't move here, but can we dig
279+  B409 11 00 00         ld de,0
280+  B40C C1               pop bc
281+  B40D F1               pop af
282+  B40E C9               ret
283+  B40F
284+  B40F              ;
285+  B40F              ; Checks if the player can move right
286+  B40F              ; Inputs:
287+  B40F              ; bc - player coords, b horiz, c vert
288+  B40F              ; Outputs:
289+  B40F              ; de - 1 can move
290+  B40F              movement_checkcanmove_right:
291+  B40F F5               push af
292+  B410 C5               push bc
293+  B411 CD 54 A7         call sprites_scadd              ; get the memory location of cell into de
294+  B414 62 6B            ld hl,de                        ; look at cell directly to the right (add 1)
295+  B416 23               inc hl                          ; memory location of cell to the right now in hl
296+  B417 CD BF B2         call movement_spaceisempty       ; check space is empty
297+  B41A 7B               ld a,e                          ; check space empty flag
298+  B41B FE 00            cp 0
299+  B41D CA 26 B4         jp z, movement_checkcanmove_right1 ; can't move
300+  B420 CD 1B B5         call player_justmoved
301+  B423 C1               pop bc
302+  B424 F1               pop af
303+  B425 C9               ret
304+  B426              movement_checkcanmove_right1:
305+  B426 C1               pop bc
306+  B427 CD 54 A7         call sprites_scadd              ; get the memory location of cell into de
307+  B42A 62 6B            ld hl,de
308+  B42C 23               inc hl                          ; memory location of cell to the right now in hl
309+  B42D C5               push bc
310+  B42E CD FE B2         call movement_spaceisdiggable    ; can't move here, but can we dig
311+  B431 11 00 00         ld de,0
312+  B434 C1               pop bc
313+  B435 F1               pop af
314+  B436 C9               ret
315+  B437
316+  B437              ;
317+  B437              ; Checks if the player can move left
318+  B437              ; Inputs:
319+  B437              ; bc - player coords, b horiz, c vert
320+  B437              ; Outputs:
321+  B437              ; de - 1 can move
322+  B437              movement_checkcanmove_left:
323+  B437 F5               push af
324+  B438 C5               push bc
325+  B439 CD 54 A7         call sprites_scadd              ; get the memory location of cell into de
326+  B43C 62 6B            ld hl,de                        ; look at cell directly to the right (add 1)
327+  B43E 2B               dec hl                          ; memory location of cell to the right now in hl
328+  B43F CD BF B2         call movement_spaceisempty       ; check space is empty
329+  B442 7B               ld a,e                          ; check space empty flag
330+  B443 FE 00            cp 0
331+  B445 CA 4E B4         jp z, movement_checkcanmove_left1 ; can't move
332+  B448 CD 1B B5         call player_justmoved
333+  B44B C1               pop bc
334+  B44C F1               pop af
335+  B44D C9               ret
336+  B44E              movement_checkcanmove_left1:
337+  B44E C1               pop bc
338+  B44F CD 54 A7         call sprites_scadd              ; get the memory location of cell into de
339+  B452 62 6B            ld hl,de
340+  B454 2B               dec hl                          ; memory location of cell to the right now in hl
341+  B455 C5               push bc
342+  B456 CD FE B2         call movement_spaceisdiggable    ; can't move here, but can we dig
343+  B459 11 00 00         ld de,0
344+  B45C C1               pop bc
345+  B45D F1               pop af
346+  B45E C9               ret
# file closed: game/movement.asm
 35   B45F                  include "game\game.asm"
# file opened: game/game.asm
  1+  B45F              ;
  2+  B45F              ; The current frame count, incremented each frame
  3+  B45F              ;
  4+  B45F              game_framenumber:
  5+  B45F 00               defb    0
  6+  B460
  7+  B460              ;
  8+  B460              ; The number of players
  9+  B460              ;
 10+  B460              game_numberplayers:
 11+  B460 01               defb 1
 12+  B461
 13+  B461              ;
 14+  B461              ; The current player
 15+  B461              ;
 16+  B461              game_currentplayer:
 17+  B461 01               defb 1
 18+  B462
 19+  B462              ;
 20+  B462              ; The default number of lives
 21+  B462              ;
 22+  B462              game_numberlives:
 23+  B462 04               defb 4
 24+  B463
 25+  B463              ;
 26+  B463              ; Moves to the next player
 27+  B463              ;
 28+  B463              game_changeplayer:
 29+  B463 3A 61 B4         ld a,(game_currentplayer)
 30+  B466 FE 01            cp 1
 31+  B468 C8               ret z                       ; if just one player, no need to change
 32+  B469 3D               dec a                       ; otherwise decrease by one
 33+  B46A EE 01            xor 1                       ; xor with one to flip
 34+  B46C 3C               inc a                       ; increment
 35+  B46D 21 61 B4         ld hl,game_currentplayer
 36+  B470 77               ld (hl),a                   ; store
 37+  B471 C9               ret
 38+  B472
 39+  B472              ;
 40+  B472              ; Sets the number of players at the start of the game
 41+  B472              ; Inputs:
 42+  B472              ; a - number of players
 43+  B472              game_setnumberofplayers:
 44+  B472 21 60 B4         ld hl,game_numberplayers
 45+  B475 77               ld (hl),a
 46+  B476
 47+  B476              ;
 48+  B476              ; Increment frame number by 1
 49+  B476              ;
 50+  B476              game_incrementframe:
 51+  B476 3A 5F B4         ld a,(game_framenumber)
 52+  B479 FE FF            cp 255
 53+  B47B C2 80 B4         jp nz,game_incrementframe0
 54+  B47E 3E 00            ld a,0
 55+  B480              game_incrementframe0:
 56+  B480 3C               inc a
 57+  B481 32 5F B4         ld (game_framenumber),a
 58+  B484 C9               ret
 59+  B485
 60+  B485              ;
 61+  B485              ; Returns current frame
 62+  B485              ; Outputs:
 63+  B485              ; a - current frame
 64+  B485              ;
 65+  B485              game_getcurrentframe:
 66+  B485 3A 5F B4         ld a,(game_framenumber)
 67+  B488 C9               ret
 68+  B489
 69+  B489              ;
 70+  B489              ; Resets current frame
 71+  B489              ;
 72+  B489              game_resetcurrentframe:
 73+  B489 21 5F B4         ld hl,game_framenumber
 74+  B48C 36 00            ld (hl),0
 75+  B48E C9               ret
# file closed: game/game.asm
 36   B48F                  include "game\player.asm"
# file opened: game/player.asm
  1+  B48F              ;
  2+  B48F              ;   Data for current player
  3+  B48F              ;
  4+  B48F              player:
  5+  B48F 00 00            defb    0,0                 ; horiz,vert (+0,+1)
  6+  B491 02 00 01         defb    2,0,1               ; dir (0 up, 1 left, 2 right, 3 down), frame, frame transition count (+2,+3,+4)
  7+  B494 00               defb    0                   ; auto move remaining (+5)
  8+  B495 00 00 00         defb    0,0,0               ; is digging (0 no), digging count, pixels to di (+6,+7,+8)
  9+  B498 00               defb    0                   ; lives remaining (+9)
 10+  B499 00               defb    0                   ; died this life (+10)
 11+  B49A
 12+  B49A              ;
 13+  B49A              ; Score for the current player
 14+  B49A              ;
 15+  B49A              player_score:
 16+  B49A 30 30 30 30      defb '000000'
 16+  B49E 30 30
 17+  B4A0              ;
 18+  B4A0              ; Initializes a player at start of game
 19+  B4A0              ; Copy initial coords, copy lives, copy score
 20+  B4A0              ;
 21+  B4A0              player_init_gamestart:
 22+  B4A0 3A 62 B4         ld a,(game_numberlives)
 23+  B4A3 32 D3 B4         ld (player1_lives),a
 24+  B4A6 32 D4 B4         ld (player2_lives),a                        ; set the initial number of lives at game start
 25+  B4A9 C9               ret
 26+  B4AA
 27+  B4AA              ;
 28+  B4AA              ; Initializes a player at start of a life
 29+  B4AA              ; Copy initial coords, copy lives, copy score
 30+  B4AA              ;
 31+  B4AA              player_init_lifestart:
 32+  B4AA ED 4B 22 80      ld bc,(init_coord)
 33+  B4AE ED 43 8F B4      ld (player),bc
 34+  B4B2 01 98 B4         ld bc,player+9
 35+  B4B5 3A D3 B4         ld a,(player1_lives)
 36+  B4B8 02               ld (bc),a
 37+  B4B9 01 99 B4         ld bc,player+10
 38+  B4BC 3E 00            ld a,0
 39+  B4BE 02               ld (bc),a
 40+  B4BF C9               ret
 41+  B4C0
 42+  B4C0              ;
 43+  B4C0              ; Finalises a player at end of a life
 44+  B4C0              ; Copy lives, copy score
 45+  B4C0              ;
 46+  B4C0              player_lifeend:
 47+  B4C0 01 98 B4         ld bc,player+9
 48+  B4C3 0A               ld a,(bc)
 49+  B4C4 01 D3 B4         ld bc,player1_lives
 50+  B4C7 02               ld (bc),a
 51+  B4C8 C9               ret
 52+  B4C9
 53+  B4C9              ;
 54+  B4C9              ; Player just died, subtract a life
 55+  B4C9              ;
 56+  B4C9              player_died:
 57+  B4C9 01 98 B4         ld bc,player+9
 58+  B4CC 0A               ld a,(bc)
 59+  B4CD 3D               dec a
 60+  B4CE 02               ld (bc),a
 61+  B4CF CD C0 B4         call player_lifeend
 62+  B4D2 C9               ret
 63+  B4D3
 64+  B4D3              ;
 65+  B4D3              ; Player lives
 66+  B4D3              ;
 67+  B4D3              player1_lives:
 68+  B4D3 03               defb 3
 69+  B4D4              player2_lives:
 70+  B4D4 03               defb 3
 71+  B4D5
 72+  B4D5              ;
 73+  B4D5              ; Player scores
 74+  B4D5              ;
 75+  B4D5              player1_score:
 76+  B4D5 30 30 30 30      defb '000000'
 76+  B4D9 30 30
 77+  B4DB              player2_score:
 78+  B4DB 30 30 30 30      defb '000000'
 78+  B4DF 30 30
 79+  B4E1
 80+  B4E1              ;
 81+  B4E1              ; Kills a player this life
 82+  B4E1              ;
 83+  B4E1              player_killplayer:
 84+  B4E1 21 99 B4         ld hl,player+10
 85+  B4E4 36 01            ld (hl),1
 86+  B4E6 C9               ret
 87+  B4E7
 88+  B4E7              ;
 89+  B4E7              ; Draws the player at the current position or deletes them
 90+  B4E7              ;
 91+  B4E7              player_drawplayer:
 92+  B4E7 3A 91 B4         ld a,(player+2)             ; get the current direction
 93+  B4EA FE 03            cp 3
 94+  B4EC C2 F1 B4         jp nz,player_drawplayer0
 95+  B4EF 3E 00            ld a,0                      ; if 3, then down, so set the direction to 0 since the sprite is the same as up
 96+  B4F1              player_drawplayer0:
 97+  B4F1 5F               ld e,a                      ; store in e
 98+  B4F2 3A 95 B4         ld a,(player+6)             ; get the dig flag
 99+  B4F5 FE 01            cp 1
100+  B4F7 CA 01 B5         jp z,player_drawplayer1    ; get dig frame
101+  B4FA 3A 92 B4         ld a,(player+3)             ; this is normal movement so get the current frame
102+  B4FD 83               add a,e
103+  B4FE C3 06 B5         jp player_drawplayer2
104+  B501              player_drawplayer1
105+  B501 3A 91 B4         ld a,(player+2)             ; get the current direction again, because want all four
106+  B504 C6 06            add a,6                     ; add direction to 6 to get frame
107+  B506              player_drawplayer2
108+  B506 07               rlca
109+  B507 07               rlca
110+  B508 07               rlca                        ; multiply by eight
111+  B509 6F               ld l,a
112+  B50A 26 00            ld h,0
113+  B50C 11 99 AF         ld de,player_sprite
114+  B50F 19               add hl,de                   ; load hl with the location of the player sprite data
115+  B510 ED 4B 8F B4      ld bc,(player)              ; load bc with the start coords
116+  B514 CD 11 A7         call sprites_drawsprite     ; call the routine to draw the sprite
117+  B517 CD 47 B5         call player_storeupdatedlines ; log updated rows
118+  B51A C9               ret
119+  B51B
120+  B51B
121+  B51B              ;
122+  B51B              ; Runs after the player just moved. Changes animation frame if required
123+  B51B              ;
124+  B51B              player_justmoved:
125+  B51B D9               exx
126+  B51C 3A 93 B4         ld a,(player+4)             ; get the transition count
127+  B51F FE 00            cp 0
128+  B521 CA 27 B5         jp z, player_justmoved2     ; if zero reset and change the frame
129+  B524 C3 41 B5         jp player_justmoved1       ; otherwise decrease and continue
130+  B527              player_justmoved2:
131+  B527                  ; reset and change frame in here
132+  B527 3E 01            ld a,1
133+  B529 32 93 B4         ld (player+4),a            ; reset back to whatever
134+  B52C 3A 92 B4         ld a,(player+3)             ; load the frame
135+  B52F FE 03            cp 3                       ; flip between 3 and 0
136+  B531 C2 39 B5         jp nz, player_justmoved4
137+  B534 3E 00            ld a,0
138+  B536 C3 3B B5         jp player_justmoved5
139+  B539              player_justmoved4:
140+  B539 3E 03            ld a,3
141+  B53B              player_justmoved5:
142+  B53B 32 92 B4         ld (player+3),a           ; save back
143+  B53E C3 45 B5         jp player_justmoved3
144+  B541              player_justmoved1:
145+  B541                  ; decrease count
146+  B541 3D               dec a
147+  B542 32 93 B4         ld (player+4),a
148+  B545              player_justmoved3:
149+  B545 D9               exx;
150+  B546 C9               ret
151+  B547
152+  B547              ;
153+  B547              ; Stores the updated rows associated with the player
154+  B547              ;
155+  B547              player_storeupdatedlines:
156+  B547 ED 4B 8F B4      ld bc,(player)          ; get the screen coords into bc
157+  B54B 79               ld a,c                  ; get the player block coords of current block
158+  B54C E6 F8            and 248                 ; find closest multiple of eight
159+  B54E 0F               rrca
160+  B54F 0F               rrca
161+  B550 0F               rrca                    ; divide by 8
162+  B551 ED 5B 8C A5      ld de,(screen_offset)          ; load the screen offset, this is in rows
163+  B555 93               sub e
164+  B556 F5               push af
165+  B557 CD 3F A4         call buffer_marklineforupdate  ; store current row in updated lines
166+  B55A F1               pop af
167+  B55B 3D               dec a
168+  B55C F5               push af
169+  B55D CD 3F A4         call buffer_marklineforupdate  ; store line above
170+  B560 F1               pop af
171+  B561 3C               inc a
172+  B562 3C               inc a
173+  B563 CD 3F A4         call buffer_marklineforupdate  ; store line beneath
174+  B566 C9               ret
# file closed: game/player.asm
 37   B567                  include "game\ship.asm"
# file opened: game/ship.asm
  1+  B567              ;
  2+  B567              ; Ship initial position: vert,horiz
  3+  B567              ;
  4+  B567              ship_initpos:
  5+  B567 00 24            defb 0,36
  6+  B569              ship_initpos2:
  7+  B569 00 00            defb 0,0
  8+  B56B              ship_frame:
  9+  B56B 00               defb 0
 10+  B56C              ;
 11+  B56C              ; The current memory location
 12+  B56C              ;
 13+  B56C              ship_current_sprite:
 14+  B56C 00 00            defb 0,0
 15+  B56E
 16+  B56E              ship_current_coords:
 17+  B56E 00 00            defb 0,0
 18+  B570
 19+  B570              ;
 20+  B570              ;   Draw and land the ship - first move the ship down, then across, drawing the player in the middle
 21+  B570              ;
 22+  B570              ship_land:
 23+  B570 ED 4B 67 B5      ld bc,(ship_initpos)
 24+  B574 ED 43 69 B5      ld (ship_initpos2),bc        ; save the initial position for later use
 25+  B578 1E 00            ld e,0                      ; store a flag to track first time round
 26+  B57A 06 09            ld b,9                      ; move down 8 pixels
 27+  B57C              ship_land0:
 28+  B57C C5               push bc
 29+  B57D 7B               ld a,e
 30+  B57E D5               push de                     ; store de for next time round
 31+  B57F FE 01            cp 1                        ; check first time flag
 32+  B581 C2 96 B5         jp nz,ship_land1             ; don't draw over previous one if first time
 33+  B584 CD FE B5         call ship_draw_full         ; delete old one
 34+  B587 CD D3 B5         call ship_change_frame      ; increment the frame
 35+  B58A ED 4B 69 B5      ld bc,(ship_initpos2)       ; get the current coords
 36+  B58E 81 C6 01         add c,1                     ; move down one pixels
 37+  B591 4F               ld c,a
 38+  B592 ED 43 69 B5      ld (ship_initpos2),bc
 39+  B596              ship_land1:
 40+  B596 CD FE B5         call ship_draw_full         ; draw the ship
 41+  B599 CD E8 B5         call ship_draw_screen
 42+  B59C D1               pop de
 43+  B59D 1E 01            ld e,1
 44+  B59F C1               pop bc
 45+  B5A0 10 DA            djnz ship_land0             ; repeat for downward movement
 46+  B5A2                  ; done moving down
 47+  B5A2                  ; now move across
 48+  B5A2 CD E7 B4         call player_drawplayer      ; draw player
 49+  B5A5 CD FE B5         call ship_draw_full         ; delete old one
 50+  B5A8 1E 00            ld e,0                      ; store a flag to track first time round
 51+  B5AA 06 14            ld b,20                      ; move back 20 pixels pixels
 52+  B5AC              ship_land3:
 53+  B5AC C5               push bc
 54+  B5AD 7B               ld a,e
 55+  B5AE D5               push de                     ; store de for next time round
 56+  B5AF FE 01            cp 1                        ; check first time flag
 57+  B5B1 C2 C6 B5         jp nz,ship_land2             ; don't draw over previous one if first time
 58+  B5B4 CD FE B5         call ship_draw_full         ; delete old one
 59+  B5B7 CD D3 B5         call ship_change_frame      ; increment the frame
 60+  B5BA ED 4B 69 B5      ld bc,(ship_initpos2)       ; get the current coords
 61+  B5BE 78               ld a,b
 62+  B5BF D6 01            sub 1                       ; move back one pixels
 63+  B5C1 47               ld b,a
 64+  B5C2 ED 43 69 B5      ld (ship_initpos2),bc
 65+  B5C6              ship_land2:
 66+  B5C6 CD FE B5         call ship_draw_full         ; draw the ship
 67+  B5C9 CD E8 B5         call ship_draw_screen       ; draw the frame to screen by clearing the buffer
 68+  B5CC D1               pop de
 69+  B5CD 1E 01            ld e,1                      ; set e to 1 to indicate >1 time
 70+  B5CF C1               pop bc
 71+  B5D0 10 DA            djnz ship_land3             ; repeat for vertical movement
 72+  B5D2 C9               ret
 73+  B5D3
 74+  B5D3              ;
 75+  B5D3              ; Swap the animation frame between 0 and 32. This will be added to the memory location later
 76+  B5D3              ;
 77+  B5D3              ship_change_frame:
 78+  B5D3 F5               push af
 79+  B5D4 3A 6B B5         ld a,(ship_frame)
 80+  B5D7 FE 00            cp 0
 81+  B5D9 CA E1 B5         jp z,ship_change_frame0
 82+  B5DC 3E 00            ld a,0                      ; flip to 0
 83+  B5DE C3 E3 B5         jp ship_change_frame1
 84+  B5E1              ship_change_frame0:
 85+  B5E1 3E 20            ld a,32                      ; flip to 32
 86+  B5E3              ship_change_frame1:
 87+  B5E3 32 6B B5         ld (ship_frame),a            ; save the frame
 88+  B5E6 F1               pop af
 89+  B5E7 C9               ret
 90+  B5E8
 91+  B5E8              ship_draw_screen:
 92+  B5E8 3E 00            ld a,0
 93+  B5EA CD 3F A4         call buffer_marklineforupdate
 94+  B5ED 3E 01            ld a,1
 95+  B5EF CD 3F A4         call buffer_marklineforupdate
 96+  B5F2 3E 02            ld a,2
 97+  B5F4 CD 3F A4         call buffer_marklineforupdate   ; mark the first three rows for update
 98+  B5F7 76               halt
 99+  B5F8 F3               di
100+  B5F9 CD D3 A4         call buffer_buffertoscreen  ; copy buffer to screen
101+  B5FC FB               ei                          ; enable interupts
102+  B5FD C9               ret
103+  B5FE
104+  B5FE              ship_draw_full:
105+  B5FE 21 E9 AF         ld hl,ship_sprite
106+  B601 ED 4B 69 B5      ld bc,(ship_initpos2)         ; load bc with the start coords
107+  B605 22 6C B5         ld (ship_current_sprite),hl  ; put into memory
108+  B608 ED 43 6E B5      ld (ship_current_coords),bc  ; put into memory
109+  B60C CD 2B B6         call ship_draw
110+  B60F 08               ex af,af'
111+  B610 3A 6B B5         ld a,(ship_frame)            ; get the animation frame
112+  B613 16 00            ld d,0
113+  B615 5F               ld e,a
114+  B616 19               add hl,de
115+  B617 22 6C B5         ld (ship_current_sprite),hl  ; put into memory
116+  B61A 08               ex af,af'
117+  B61B ED 4B 69 B5      ld bc,(ship_initpos2)         ; load bc with the start coords
118+  B61F 81 C6 08         add c,8                      ; move one line down
119+  B622 4F               ld c,a
120+  B623 ED 43 6E B5      ld (ship_current_coords),bc  ; put into memory
121+  B627 CD 2B B6         call ship_draw
122+  B62A C9               ret
123+  B62B
124+  B62B              ;
125+  B62B              ; Draw the ship
126+  B62B              ; Inputs:
127+  B62B              ; None, all in memory
128+  B62B              ;
129+  B62B              ship_draw:
130+  B62B 3E 04            ld a,4                              ; 4 pieces per half
131+  B62D              ship_draw0:
132+  B62D F5               push af
133+  B62E 2A 6C B5         ld hl,(ship_current_sprite)
134+  B631 ED 4B 6E B5      ld bc,(ship_current_coords)         ; load bc with the start coords
135+  B635 CD 11 A7         call sprites_drawsprite
136+  B638 2A 6C B5         ld hl,(ship_current_sprite)
137+  B63B ED 4B 6E B5      ld bc,(ship_current_coords)         ; load bc with the start coords
138+  B63F 11 08 00         ld de,8
139+  B642 19               add hl,de
140+  B643 80 C6 08         add b,8
141+  B646 47               ld b,a
142+  B647 22 6C B5         ld (ship_current_sprite),hl         ; put into memory
143+  B64A ED 43 6E B5      ld (ship_current_coords),bc         ; put into memory
144+  B64E F1               pop af
145+  B64F 3D               dec a
146+  B650 FE 00            cp 0
147+  B652 C2 2D B6         jp nz,ship_draw0
148+  B655
149+  B655 C9               ret
150+  B656
# file closed: game/ship.asm
 38   B656                  include "game\tank.asm"
# file opened: game/tank.asm
  1+  B656              ;
  2+  B656              ; tank initial position: vert,horiz
  3+  B656              ;
  4+  B656              tank_initpos:
  5+  B656 10 D0            defb 16,208
  6+  B658              tank_initpos2:
  7+  B658 00 00            defb 0,0
  8+  B65A              tank_frame:
  9+  B65A 00               defb 0
 10+  B65B              tank_anim:
 11+  B65B 11               defb 17
 12+  B65C              ;
 13+  B65C              ; The current memory location
 14+  B65C              ;
 15+  B65C              tank_current_sprite:
 16+  B65C 00 00            defb 0,0
 17+  B65E
 18+  B65E              tank_current_coords:
 19+  B65E 00 00            defb 0,0
 20+  B660
 21+  B660              ;
 22+  B660              ; Initialise the tank
 23+  B660              ;
 24+  B660              tank_init:
 25+  B660 ED 4B 56 B6      ld bc,(tank_initpos)
 26+  B664 ED 43 58 B6      ld (tank_initpos2),bc       ; save the initial position for later use
 27+  B668 21 5A B6         ld hl,tank_frame
 28+  B66B 36 00            ld (hl),0
 29+  B66D 21 5B B6         ld hl,tank_anim
 30+  B670 36 11            ld (hl),17                  ; reset tank
 31+  B672 C9               ret
 32+  B673
 33+  B673              ;
 34+  B673              ;   Draw and move the tank
 35+  B673              ;   Start processing at frame 200
 36+  B673              ;   Don't move if anim is zero
 37+  B673              ;   Decrement frame if moved
 38+  B673              ;
 39+  B673              tank_process:
 40+  B673 3A 5B B6         ld a,(tank_anim)
 41+  B676 FE 00            cp 0
 42+  B678 C8               ret z                       ; return if we've already moved
 43+  B679 CD 85 B4         call game_getcurrentframe   ; get the current frame number into a
 44+  B67C FE 4B            cp 75
 45+  B67E D8               ret c                       ; return if the frame number is below 100
 46+  B67F CD 8A B6         call tank_move              ; move tank if not
 47+  B682 3A 5B B6         ld a,(tank_anim)
 48+  B685 3D               dec a
 49+  B686 32 5B B6         ld (tank_anim),a            ; decrease the anim count
 50+  B689 C9               ret
 51+  B68A
 52+  B68A              tank_move:
 53+  B68A ED 4B 58 B6      ld bc,(tank_initpos2)
 54+  B68E C5               push bc
 55+  B68F 3A 5B B6         ld a,(tank_anim)
 56+  B692 FE 11            cp 17                       ; check first time flag
 57+  B694 CA A6 B6         jp z,tank_move1             ; don't draw over previous one if first time
 58+  B697 CD AB B6         call tank_draw_full         ; delete old one
 59+  B69A ED 4B 58 B6      ld bc,(tank_initpos2)       ; get the current coords
 60+  B69E 78               ld a,b
 61+  B69F D6 01            sub 1                       ; move back one pixels
 62+  B6A1 47               ld b,a
 63+  B6A2 ED 43 58 B6      ld (tank_initpos2),bc
 64+  B6A6              tank_move1:
 65+  B6A6 CD AB B6         call tank_draw_full         ; draw the tank
 66+  B6A9 C1               pop bc
 67+  B6AA C9               ret
 68+  B6AB
 69+  B6AB              tank_draw_full:
 70+  B6AB 21 49 B0         ld hl,tank_sprite
 71+  B6AE ED 4B 58 B6      ld bc,(tank_initpos2)         ; load bc with the start coords
 72+  B6B2 22 5C B6         ld (tank_current_sprite),hl  ; put into memory
 73+  B6B5 ED 43 5E B6      ld (tank_current_coords),bc  ; put into memory
 74+  B6B9 CD E2 B6         call tank_draw
 75+  B6BC 08               ex af,af'
 76+  B6BD 3A 5A B6         ld a,(tank_frame)            ; get the animation frame
 77+  B6C0 16 00            ld d,0
 78+  B6C2 5F               ld e,a
 79+  B6C3 19               add hl,de
 80+  B6C4 22 5C B6         ld (tank_current_sprite),hl  ; put into memory
 81+  B6C7 08               ex af,af'
 82+  B6C8 ED 4B 58 B6      ld bc,(tank_initpos2)         ; load bc with the start coords
 83+  B6CC 81 C6 08         add c,8                      ; move one line down
 84+  B6CF 4F               ld c,a
 85+  B6D0 ED 43 5E B6      ld (tank_current_coords),bc  ; put into memory
 86+  B6D4 CD E2 B6         call tank_draw
 87+  B6D7 3E 02            ld a,2
 88+  B6D9 CD 3F A4         call buffer_marklineforupdate
 89+  B6DC 3E 03            ld a,3
 90+  B6DE CD 3F A4         call buffer_marklineforupdate   ; mark the first two rows for update
 91+  B6E1 C9               ret
 92+  B6E2
 93+  B6E2              ;
 94+  B6E2              ; Draw the tank
 95+  B6E2              ; Inputs:
 96+  B6E2              ; None, all in memory
 97+  B6E2              ;
 98+  B6E2              tank_draw:
 99+  B6E2 3E 04            ld a,4                              ; 4 pieces per half
100+  B6E4              tank_draw0:
101+  B6E4 F5               push af
102+  B6E5 2A 5C B6         ld hl,(tank_current_sprite)
103+  B6E8 ED 4B 5E B6      ld bc,(tank_current_coords)         ; load bc with the start coords
104+  B6EC CD 11 A7         call sprites_drawsprite
105+  B6EF 2A 5C B6         ld hl,(tank_current_sprite)
106+  B6F2 ED 4B 5E B6      ld bc,(tank_current_coords)         ; load bc with the start coords
107+  B6F6 11 08 00         ld de,8
108+  B6F9 19               add hl,de
109+  B6FA 80 C6 08         add b,8
110+  B6FD 47               ld b,a
111+  B6FE 22 5C B6         ld (tank_current_sprite),hl         ; put into memory
112+  B701 ED 43 5E B6      ld (tank_current_coords),bc         ; put into memory
113+  B705 F1               pop af
114+  B706 3D               dec a
115+  B707 FE 00            cp 0
116+  B709 C2 E4 B6         jp nz,tank_draw0
117+  B70C
118+  B70C C9               ret
119+  B70D
# file closed: game/tank.asm
 39   B70D                  include "game\rocks.asm"
# file opened: game/rocks.asm
  1+  B70D              ;
  2+  B70D              ; A structure of falling rocks
  3+  B70D              ; Assume we'll never have more than 4 falling at any one time
  4+  B70D              ; (1,2 - 16 bit memory location for rock graphic),state (0 fell, 1 falling, 2 wobbling), countdown
  5+  B70D              ;
  6+  B70D              rocks_falling:
  7+  B70D 00 00 00 00      defb 0,0,0,0
  8+  B711 00 00 00 00      defb 0,0,0,0
  9+  B715 00 00 00 00      defb 0,0,0,0
 10+  B719 00 00 00 00      defb 0,0,0,0
 11+  B71D
 12+  B71D              rocks_tmp:
 13+  B71D 00               defb 0
 14+  B71E
 15+  B71E              rocks_tmp2:
 16+  B71E 00 00            defb 0,0
 17+  B720
 18+  B720              ;
 19+  B720              ; Checks for a rock that needs to start falling. Takes a memory location of the first line at the bottom of the space.
 20+  B720              ; Checks to see if the pixel row in that location is a rock bottom. If it is, mark this rock as ready to fall.
 21+  B720              ; If the pixel row is not the rock bottom, stop checking.
 22+  B720              ; Inputs:
 23+  B720              ; hl- memory location
 24+  B720              ;
 25+  B720              rocks_checkforfalling:
 26+  B720 7E               ld a,(hl)           ; get the pixel row in this memory location
 27+  B721 FE 7E            cp 126              ; check against the bottom pixel row of the rock graphic
 28+  B723 C2 29 B7         jp nz,rocks_checkforfalling2 ; not a rock, stop
 29+  B726 CD 2A B7         call rocks_addrocktofalling ; mark the rock as falling
 30+  B729              rocks_checkforfalling2:
 31+  B729 C9               ret
 32+  B72A
 33+  B72A              ;
 34+  B72A              ; Adds the rock to the structure that tracks falling rocks
 35+  B72A              ; Inputs:
 36+  B72A              ; hl - memory location of falling rock graphic
 37+  B72A              ; bc - coords of rock, c vert
 38+  B72A              rocks_addrocktofalling:
 39+  B72A C5               push bc             ; store the coords
 40+  B72B 11 0D B7         ld de,rocks_falling
 41+  B72E 06 04            ld b,4              ; number of possible falling rocks
 42+  B730              rocks_addrocktofalling0:
 43+  B730 13               inc de
 44+  B731 13               inc de
 45+  B732 13               inc de              ; move three along to get the state
 46+  B733 1A               ld a,(de)           ; load the state
 47+  B734 FE 00            cp 0                ; check if this is not falling
 48+  B736 C2 4B B7         jp nz,rocks_addrocktofalling1 ; continue the loop if not 0
 49+  B739 3E 10            ld a,16             ; load the number of frames to wobble
 50+  B73B 12               ld (de),a
 51+  B73C 1B               dec de              ; move de back to state
 52+  B73D 3E 02            ld a,2
 53+  B73F 12               ld (de),a           ; set the state to wobbling
 54+  B740 1B               dec de              ; move back coords
 55+  B741 C1               pop bc              ; get back coords
 56+  B742 78               ld a,b
 57+  B743 12               ld (de),a           ; store the vertical
 58+  B744 1B               dec de
 59+  B745 79               ld a,c
 60+  B746 12               ld (de),a           ; store the horizontal
 61+  B747 C5               push bc
 62+  B748 C3 4E B7         jp rocks_addrocktofalling2 ; done
 63+  B74B              rocks_addrocktofalling1:
 64+  B74B 13               inc de              ; move memory along to next rock
 65+  B74C 10 E2            djnz rocks_addrocktofalling0 ; try the next rock
 66+  B74E              rocks_addrocktofalling2: ; done, return
 67+  B74E C1               pop bc              ; to tidy up
 68+  B74F C9               ret
 69+  B750
 70+  B750              ;
 71+  B750              ; Processes any falling rocks
 72+  B750              ;
 73+  B750              rocks_processrocks:
 74+  B750 DD 21 0D B7      ld ix,rocks_falling
 75+  B754 06 04            ld b,4              ; the number of rocks to check
 76+  B756              rocks_processrocks0:
 77+  B756 C5               push bc             ; store loop count
 78+  B757 DD 4E 00 DD      ld bc,(ix)          ; load the coords for this rock into bc
 78+  B75B 46 01
 79+  B75D DD 23            inc ix
 80+  B75F DD 23            inc ix              ; move to the state
 81+  B761 DD 7E 00         ld a,(ix)           ; load the state into a
 82+  B764 FE 00            cp 0
 83+  B766 CA 8A B7         jp z,rocks_processrocks3 ; if not falling, check next
 84+  B769 FE 02            cp 2
 85+  B76B C2 7B B7         jp nz, rocks_processrocks2
 86+  B76E                  ; we're wobbling
 87+  B76E DD 23            inc ix              ; get frame number for wobble
 88+  B770 DD 7E 00         ld a,(ix)           ; get wobble frame into a
 89+  B773 CD 40 B8         call rocks_wobble
 90+  B776 DD 23            inc ix              ; increment for next
 91+  B778 C3 8E B7         jp rocks_processrocks1  ; do next rock
 92+  B77B              rocks_processrocks2:
 93+  B77B                  ; we're falling
 94+  B77B C5               push bc
 95+  B77C CD A7 B7         call rocks_fall
 96+  B77F C1               pop bc
 97+  B780 CD 92 B7         call rocks_storeupdatedlines
 98+  B783 DD 23            inc ix
 99+  B785 DD 23            inc ix              ; inc ix to get to next
100+  B787 C3 8E B7         jp rocks_processrocks1
101+  B78A              rocks_processrocks3:
102+  B78A DD 23            inc ix
103+  B78C DD 23            inc ix
104+  B78E              rocks_processrocks1:
105+  B78E C1               pop bc              ; get loop count back
106+  B78F 10 C5            djnz rocks_processrocks0
107+  B791 C9               ret
108+  B792
109+  B792              ;
110+  B792              ; Stores the updated rows associated with the rock
111+  B792              ; Inputs:
112+  B792              ; bc - coords
113+  B792              ;
114+  B792              rocks_storeupdatedlines:
115+  B792 79               ld a,c                  ; get the player block coords of current block
116+  B793 E6 F8            and 248                 ; find closest multiple of eight
117+  B795 0F               rrca
118+  B796 0F               rrca
119+  B797 0F               rrca                    ; divide by 8
120+  B798 ED 5B 8C A5      ld de,(screen_offset)          ; load the screen offset, this is in rows
121+  B79C 93               sub e
122+  B79D F5               push af
123+  B79E CD 3F A4         call buffer_marklineforupdate  ; store current row in updated lines
124+  B7A1 F1               pop af
125+  B7A2 3C               inc a
126+  B7A3 CD 3F A4         call buffer_marklineforupdate  ; store line beneath
127+  B7A6 C9               ret
128+  B7A7
129+  B7A7              ;
130+  B7A7              ; Falls a rock one pixel, checks the next square down to see if it is empty, if not, stop falling
131+  B7A7              ; bc - coord of current rock graphic on screen
132+  B7A7              ; ix - memory location of current rock in rock list, currently at the 3rd position (rock state)
133+  B7A7              ;
134+  B7A7              rocks_fall:
135+  B7A7 DD 2B            dec ix
136+  B7A9 DD 2B            dec ix              ; decrease ix back to coords
137+  B7AB ED 43 1E B7      ld (rocks_tmp2),bc  ; store original coords
138+  B7AF 3E 03            ld a,3              ; move this number of pixels
139+  B7B1              rocks_fall1:
140+  B7B1 08               ex af,af'
141+  B7B2 DD 4E 00 DD      ld bc,(ix)          ; get current coords
141+  B7B6 46 01
142+  B7B8 CD 54 A7         call sprites_scadd  ; get the memory of the coords into de
143+  B7BB 14               inc d               ; add 256 to get next row
144+  B7BC 1A               ld a,(de)           ; get the contents of the next row
145+  B7BD FE 00            cp 0
146+  B7BF C2 18 B8         jp nz,rocks_fall3    ; move the rock if the row is empty
147+  B7C2 0C               inc c               ; increment the vertical
148+  B7C3 DD 71 00 DD      ld (ix),bc          ; store the new coords
148+  B7C7 70 01
149+  B7C9 79               ld a,c              ; get the vertical coord into a
150+  B7CA E6 07            and 7               ; divisible by 8?
151+  B7CC FE 00            cp 0
152+  B7CE C2 E9 B7         jp nz,rocks_fall4   ; if not, carry on
153+  B7D1 CD B4 A6         call screen_getattraddressfromscreencoords ; get the attr address into de
154+  B7D4 62 6B            ld hl,de
155+  B7D6 36 42            ld (hl),66          ; load this square with the yellow colour
156+  B7D8 DD 4E 00 DD      ld bc,(ix)
156+  B7DC 46 01
157+  B7DE 79               ld a,c              ; get vertical
158+  B7DF D6 08            sub 8               ; look up one square
159+  B7E1 4F               ld c,a              ; put a back in c
160+  B7E2 CD B4 A6         call screen_getattraddressfromscreencoords ; get the attr address into de
161+  B7E5 62 6B            ld hl,de
162+  B7E7 36 46            ld (hl),70          ; load this square with the yellow colour
163+  B7E9              rocks_fall4:
164+  B7E9 08               ex af,af'
165+  B7EA 3D               dec a
166+  B7EB FE 00            cp 0
167+  B7ED C2 B1 B7         jp nz,rocks_fall1   ; do another pixel if needed
168+  B7F0              rocks_fall2:
169+  B7F0 3E 09            ld a,9              ; rock graphic
170+  B7F2 ED 4B 1E B7      ld bc,(rocks_tmp2)  ; get the original coords
171+  B7F6 CD EF A6         call screen_getblock     ; get the memory into hl
172+  B7F9 CD 11 A7         call sprites_drawsprite  ; draw the sprite - over the top of the current one
173+  B7FC 3E 09            ld a,9
174+  B7FE DD 4E 00 DD      ld bc,(ix)          ; get the new coords
174+  B802 46 01
175+  B804 CD EF A6         call screen_getblock     ; get the memory into hl
176+  B807 CD 11 A7         call sprites_drawsprite  ; draw the sprite - over the top of the current one
177+  B80A DD 4E 00 DD      ld bc,(ix)          ; get the coords again
177+  B80E 46 01
178+  B810 CD 2D B8         call rocks_checkforplayer ; check to see if we hit a player
179+  B813 DD 23            inc ix
180+  B815 DD 23            inc ix                  ; get ix back to state
181+  B817 C9               ret
182+  B818              rocks_fall3:
183+  B818 3E 00            ld a,0              ; set the state to fell
184+  B81A DD 77 02         ld (ix+2),a           ; store the falling state
185+  B81D DD 4E 00 DD      ld bc,(ix)          ; get the coords
185+  B821 46 01
186+  B823 CD B4 A6         call screen_getattraddressfromscreencoords ; get the attr address into de
187+  B826 62 6B            ld hl,de
188+  B828 36 42            ld (hl),66
189+  B82A C3 F0 B7         jp rocks_fall2      ; rejoin main loop
190+  B82D
191+  B82D              ;
192+  B82D              ; Checks to see if the rock is hitting a player
193+  B82D              ; Inputs:
194+  B82D              ; bc - coords of rock we're checking
195+  B82D              rocks_checkforplayer:
196+  B82D ED 5B 8F B4      ld de,(player)       ; get the player coords
197+  B831 7B               ld a,e               ; get the vert coord first
198+  B832 91               sub c                ; subtract the rock vertical coord from players
199+  B833 FE 08            cp 8                 ; the rock will only hit a player if the player is directly underneath, so this must be 8
200+  B835 C0               ret nz               ; if not, hasn't hit
201+  B836 7A               ld a,d               ; get the player horiz coord
202+  B837 90               sub b                ; subtract rock coord
203+  B838 C6 07            add 7                ; add max distance
204+  B83A FE 0D            cp 13                ; compare to 13? if carry flag set, they've hit
205+  B83C DC E1 B4         call c, player_killplayer ; if so, jump out
206+  B83F C9               ret
207+  B840
208+  B840              ;
209+  B840              ; Wobbles a rocks
210+  B840              ; Inputs:
211+  B840              ; bc - coord of current rock graphic on screen
212+  B840              ; ix - memory location of current rock in rock list, currently at the 4th position (wobble count)
213+  B840              ; a - wobble frame
214+  B840              rocks_wobble:
215+  B840 3A 1D B7         ld a,(rocks_tmp)    ; get the frame toggle
216+  B843 1E 09            ld e,9              ; this is the rock frame
217+  B845 83               add a,e             ; add the frame toggle
218+  B846 C5               push bc
219+  B847 CD EF A6         call screen_getblock     ; get the memory into hl
220+  B84A CD 11 A7         call sprites_drawsprite  ; draw the sprite - over the top of the current one
221+  B84D 3A 1D B7         ld a,(rocks_tmp)    ; get the frame toggle against
222+  B850 EE 01            xor 1               ; flip to other state
223+  B852 32 1D B7         ld (rocks_tmp),a    ; store
224+  B855 1E 09            ld e,9              ; this is the rock frame
225+  B857 83               add a,e             ; add the frame toggle
226+  B858 CD EF A6         call screen_getblock     ; get the memory into hl
227+  B85B C1               pop bc
228+  B85C CD 11 A7         call sprites_drawsprite  ; draw the sprite again with the new frame - next time it will do the opposite
229+  B85F DD 7E 00         ld a,(ix)           ; get the wobble count back
230+  B862 3D               dec a               ; decrease
231+  B863 DD 77 00         ld (ix),a           ; store
232+  B866 FE 00            cp 0
233+  B868 C0               ret nz              ; if we're not at zero, return
234+  B869 DD 2B            dec ix              ; otherwise look to state location
235+  B86B 3E 01            ld a,1              ; set the state to falling
236+  B86D DD 77 00         ld (ix),a           ; store the falling state
237+  B870 DD 23            inc ix              ; set ix back to location of wobble count, and we're done
238+  B872 C9               ret
239+  B873
# file closed: game/rocks.asm
 40   B873                  include "game\scores.asm"
# file opened: game/scores.asm
  1+  B873              ;
  2+  B873              ; The score of the current player
  3+  B873              ;
  4+  B873              scores_current:
  5+  B873 30 30 30 30      defb '000000'
  5+  B877 30 30
  6+  B879
  7+  B879              ;
  8+  B879              ; The current high score table
  9+  B879              ;
 10+  B879              scores_table:
 11+  B879 03 17 47 41      defb 3,23,'GAM',255
 11+  B87D 4D FF
 12+  B87F 06 17 30 30      defb 6,23,'00000 ',255
 12+  B883 30 30 30 20
 12+  B887 FF
 13+  B888 0C 17 47 41      defb 12,23,'GAM',255
 13+  B88C 4D FF
 14+  B88E 0F 17 30 30      defb 15,23,'00000 ',255
 14+  B892 30 30 30 20
 14+  B896 FF
 15+  B897 15 17 47 41      defb 21,23,'GAM',255
 15+  B89B 4D FF
 16+  B89D 18 17 30 30      defb 24,23,'00000 ',255
 16+  B8A1 30 30 30 20
 16+  B8A5 FF
 17+  B8A6
 18+  B8A6              ;
 19+  B8A6              ; Displays the high score table at the bottom of the screen
 20+  B8A6              ;
 21+  B8A6              scores_showtable:
 22+  B8A6 21 79 B8         ld hl, scores_table
 23+  B8A9 CD 3F 83         call string_print
 24+  B8AC 21 7F B8         ld hl, scores_table+6
 25+  B8AF CD 3F 83         call string_print
 26+  B8B2 21 88 B8         ld hl, scores_table+15
 27+  B8B5 CD 3F 83         call string_print
 28+  B8B8 21 8E B8         ld hl, scores_table+21
 29+  B8BB CD 3F 83         call string_print
 30+  B8BE 21 97 B8         ld hl, scores_table+30
 31+  B8C1 CD 3F 83         call string_print
 32+  B8C4 21 9D B8         ld hl, scores_table+36
 33+  B8C7 CD 3F 83         call string_print
 34+  B8CA C9               ret
# file closed: game/scores.asm
 41   B8CB                  include "game\diamonds.asm"
# file opened: game/diamonds.asm
  1+  B8CB              ;
  2+  B8CB              ; Changes the attribute of gem and diamond cells based on the frame count
  3+  B8CB              ; Inputs:
  4+  B8CB              ; hl - memory location of gem type
  5+  B8CB              diamonds_twinkle_type:
  6+  B8CB CD 85 B4         call game_getcurrentframe       ; get current frame number
  7+  B8CE E6 07            and 7                           ; want a number from 0-7
  8+  B8D0 C6 40            add 64                          ; add to 60 to get attr colour
  9+  B8D2              diamonds_twinkle_type0:
 10+  B8D2 4E               ld c,(hl)                      ; get coords into bc
 11+  B8D3 08               ex af, af'
 12+  B8D4 79               ld a,c                          ; load c into add
 13+  B8D5 FE FF            cp 255                          ; is this the end?
 14+  B8D7 CA EE B8         jp z,diamonds_twinkle_type1           ; step out if so
 15+  B8DA 23               inc hl
 16+  B8DB 23               inc hl
 17+  B8DC 7E               ld a,(hl)                       ; check the state, don't process if collection
 18+  B8DD FE 01            cp 1
 19+  B8DF CA EE B8         jp z,diamonds_twinkle_type1           ; step out if so
 20+  B8E2 23               inc hl
 21+  B8E3 08               ex af,af'
 22+  B8E4 5E 23 56 2B      ld de,(hl)                      ; get the memory location into de
 23+  B8E8 12               ld (de),a                       ; set the value of attr
 24+  B8E9 23               inc hl
 25+  B8EA 23               inc hl                          ; move to next diamond
 26+  B8EB C3 D2 B8         jp diamonds_twinkle_type0
 27+  B8EE              diamonds_twinkle_type1:
 28+  B8EE C9               ret
 29+  B8EF
 30+  B8EF              ;
 31+  B8EF              ; Initialise diamonds and gems
 32+  B8EF              ;
 33+  B8EF              diamonds_twinkle
 34+  B8EF 21 8D AE         ld hl, level01diamonds
 35+  B8F2 CD CB B8         call diamonds_twinkle_type
 36+  B8F5 21 9D AE         ld hl, level01gems
 37+  B8F8 CD CB B8         call diamonds_twinkle_type
 38+  B8FB C9               ret
 39+  B8FC
 40+  B8FC              ;
 41+  B8FC              ; Initialise diamonds and gems
 42+  B8FC              ;
 43+  B8FC              diamonds_init:
 44+  B8FC 21 8D AE         ld hl, level01diamonds
 45+  B8FF CD 09 B9         call diamonds_init_type
 46+  B902 21 9D AE         ld hl, level01gems
 47+  B905 CD 09 B9         call diamonds_init_type
 48+  B908 C9               ret
 49+  B909
 50+  B909              ;
 51+  B909              ; Initialise diamonds or gems, get memory addresses
 52+  B909              ; Inputs:
 53+  B909              ; hl - memory location
 54+  B909              diamonds_init_type:
 55+  B909 4E               ld c,(hl)                      ; get coords into c
 56+  B90A 79               ld a,c                          ; load c into add
 57+  B90B FE FF            cp 255                          ; is this the end?
 58+  B90D CA 22 B9         jp z,diamonds_init_type1             ; step out if so
 59+  B910 23               inc hl
 60+  B911 46               ld b,(hl)                       ; get coords into b
 61+  B912 E5               push hl
 62+  B913 CD 84 A6         call screen_getcellattradress ; get memory of attr for this diamond into de
 63+  B916 E1               pop hl
 64+  B917 23               inc hl                          ; move to state
 65+  B918 23               inc hl                          ; move to memory
 66+  B919 73 23 72 2B      ld (hl),de                      ; store the memory location
 67+  B91D 23               inc hl                          ; move to next diamond
 68+  B91E 23               inc hl
 69+  B91F C3 09 B9         jp diamonds_init_type
 70+  B922              diamonds_init_type1:
 71+  B922 C9               ret
# file closed: game/diamonds.asm
 42   B923
 43   B923              ;===========================================================================
 44   B923              ; main routine - the code execution starts here.
 45   B923              ; Sets up the new interrupt routine, the memory
 46   B923              ; banks and jumps to the start loop.
 47   B923              ;===========================================================================
 48   B923              main:
 49   B923
 50   B923                  ; Setup stack
 51   B923 31 4C BA         ld sp,stack_top
 52   B926
 53   B926                  ; Draw the title screen
 54   B926              main_titlescreen:
 55   B926 CD 7A A7         call titlescreen_show
 56   B929 CD A0 B4         call player_init_gamestart
 57   B92C
 58   B92C              main_lifestart:
 59   B92C
 60   B92C CD AA B4         call player_init_lifestart
 61   B92F
 62   B92F CD DE A8         call lifescreen_draw        ; show the lives remaining screen
 63   B932
 64   B932 CD 00 80         call init_start
 65   B935 CD A7 A5         call screen_draw
 66   B938 CD 05 A5         call buffer_allbuffertoscreen
 67   B93B
 68   B93B CD 70 B5         call ship_land              ; land the ship
 69   B93E CD 60 B6         call tank_init
 70   B941 CD FC B8         call diamonds_init
 71   B944              mloop:
 72   B944 76               halt
 73   B945 CD 60 B9         call main_loop_processing
 74   B948
 75   B948 21 99 B4         ld hl,player+10
 76   B94B 7E               ld a,(hl)                   ; check if the player died this frame
 77   B94C FE 01            cp 1
 78   B94E C2 44 B9         jp nz,mloop
 79   B951 CD C9 B4         call player_died        ; do end of life housekeeping
 80   B954 21 98 B4         ld hl,player+9        ; check lives remaining
 81   B957 7E               ld a,(hl)
 82   B958 FE 00            cp 0
 83   B95A CA 7C B9         jp z,main_gameover   ; leave the loop if we're done
 84   B95D C3 2C B9         jp main_lifestart
 85   B960
 86   B960              main_loop_processing:
 87   B960 CD D3 A4         call buffer_buffertoscreen  ; copy buffer to screen
 88   B963 CD 53 A4         call buffer_clearlist       ; zero the updated lines list
 89   B966 CD E7 B4         call player_drawplayer      ; delete player
 90   B969 CD 91 B0         call control_keyboard       ; check keyboard
 91   B96C CD E7 B4         call player_drawplayer      ; draw player
 92   B96F CD 73 B6         call tank_process           ; prcoess the tank
 93   B972 CD 50 B7         call rocks_processrocks     ; process falling rocks
 94   B975 CD EF B8         call diamonds_twinkle       ; make the diamonds twinkle
 95   B978
 96   B978 CD 76 B4         call game_incrementframe    ; increment the game frame
 97   B97B
 98   B97B C9               ret
 99   B97C
100   B97C              main_gameover:
101   B97C CD 31 A9         call gameover_draw          ; show the game over screen
102   B97F C3 26 B9         jp main_titlescreen         ; go back to title
103   B982
104   B982              ;===========================================================================
105   B982              ; Stack.
106   B982              ;===========================================================================
107   B982
108   B982              ; Stack: this area is reserved for the stack
109   B982              STACK_SIZE: equ 100    ; in words
110   B982
111   B982              ; Reserve stack space
112   B982 00 00            defw 0  ; WPMEM, 2
113   B984              stack_bottom:
114   B984 00 00 00...      defs    STACK_SIZE*2, 0
115   BA4C              stack_top:
116   BA4C 00 00            defw 0  ; WPMEM, 2
117   BA4E
118   BA4E                     SAVESNA "ThePit.sna", main
# file closed: main.asm
